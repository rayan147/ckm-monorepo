import { z } from 'zod';
import type { Prisma } from '@prisma/client';

/////////////////////////////////////////
// HELPER FUNCTIONS
/////////////////////////////////////////


/////////////////////////////////////////
// ENUMS
/////////////////////////////////////////

export const TransactionIsolationLevelSchema = z.enum(['ReadUncommitted','ReadCommitted','RepeatableRead','Serializable']);

export const RecipeNutritionScalarFieldEnumSchema = z.enum(['id','recipeId','servingSize','servingUnit','calories','protein','carbohydrates','fat','fiber','sugar','sodium','containsGluten','containsDairy','containsNuts','containsEggs','containsSoy','containsFish','containsShellfish','containsSesame']);

export const RecipeCriticalPointScalarFieldEnumSchema = z.enum(['id','recipeId','stepNumber','description','threshold','unit','action','createdAt','updatedAt']);

export const RecipeStorageScalarFieldEnumSchema = z.enum(['id','recipeId','temperature','method','shelfLife','containerType','specialNotes','createdAt','updatedAt']);

export const RecipePhotoScalarFieldEnumSchema = z.enum(['id','recipeId','url','type','stepNumber','description','createdAt','updatedAt']);

export const RecipeTemperatureScalarFieldEnumSchema = z.enum(['id','recipeId','stepNumber','minTemp','maxTemp','isCritical','holdTime','description','createdAt','updatedAt']);

export const RecipeYieldScalarFieldEnumSchema = z.enum(['id','recipeId','expectedYield','actualYield','unit','wastagePercent','notes','createdAt','updatedAt']);

export const RecipeLaborCostScalarFieldEnumSchema = z.enum(['id','recipeId','prepTime','cookTime','laborRate','totalLaborCost','createdAt','updatedAt']);

export const SalesTransactionsScalarFieldEnumSchema = z.enum(['id','posTransactionID','restaurantId','menuItemId','price','total','transactionDate','createdAt','updatedAt']);

export const MenuCategoryScalarFieldEnumSchema = z.enum(['id','name','description','displayOrder','menuId','isActive','createdAt','updatedAt']);

export const RecipeVersionScalarFieldEnumSchema = z.enum(['id','recipeId','versionNumber','description','changes','isActive','createdById','approvedById','approvedAt','createdAt','updatedAt']);

export const EquipmentScalarFieldEnumSchema = z.enum(['id','name','description','model','serialNumber','purchaseDate','lastMaintenance','nextMaintenance','status','location','restaurantId','createdAt','updatedAt']);

export const RecipeEquipmentScalarFieldEnumSchema = z.enum(['id','recipeId','equipmentId','notes','recipeInstructionId']);

export const MaintenanceLogScalarFieldEnumSchema = z.enum(['id','equipmentId','date','type','description','cost','performedBy','notes','createdAt','updatedAt']);

export const QualityChecklistScalarFieldEnumSchema = z.enum(['id','name','description','restaurantId','frequency','isActive','createdAt','updatedAt']);

export const ChecklistItemScalarFieldEnumSchema = z.enum(['id','checklistId','description','order','type','requiredPhotos','createdAt','updatedAt']);

export const ChecklistCompleteScalarFieldEnumSchema = z.enum(['id','checklistId','completedById','date','notes','createdAt','updatedAt']);

export const ChecklistItemCompleteScalarFieldEnumSchema = z.enum(['id','checklistCompleteId','checklistItemId','status','notes','photoUrls','createdAt','updatedAt']);

export const SupplierPriceHistoryScalarFieldEnumSchema = z.enum(['id','vendorId','ingredientId','price','unit','startDate','endDate','notes','createdAt','updatedAt']);

export const CustomerFeedbackScalarFieldEnumSchema = z.enum(['id','restaurantId','menuItemId','rating','comment','source','tags','status','responseText','respondedAt','respondedById','createdAt','updatedAt']);

export const DietaryRestrictionScalarFieldEnumSchema = z.enum(['id','name','description','icon','createdAt','updatedAt']);

export const RecipeTagScalarFieldEnumSchema = z.enum(['id','name','description','createdAt','updatedAt']);

export const LeftoverItemScalarFieldEnumSchema = z.enum(['id','restaurantId','date','menuItemId','quantity','reason','recordedById','createdAt','updatedAt']);

export const WasteRecordScalarFieldEnumSchema = z.enum(['id','restaurantId','date','ingredientId','quantity','unit','reason','recordedById','createdAt','updatedAt']);

export const ProductionPlanScalarFieldEnumSchema = z.enum(['id','restaurantId','date','status','createdById','createdAt','updatedAt']);

export const ProductionPlanItemScalarFieldEnumSchema = z.enum(['id','productionPlanId','recipeId','quantity','unit','assignedToId','createdAt','updatedAt']);

export const ShiftTaskScalarFieldEnumSchema = z.enum(['id','shiftId','taskType','startTime','endTime','duration','notes','createdAt','updatedAt']);

export const AvailabilityScalarFieldEnumSchema = z.enum(['id','userId','dayOfWeek','startTime','endTime','createdAt','updatedAt']);

export const SchedulingConstraintScalarFieldEnumSchema = z.enum(['id','userId','date','constraintsType','startTime','endTime','notes','createdAt','updatedAt']);

export const InventoryWithdrawalScalarFieldEnumSchema = z.enum(['id','inventoryItemId','dateTime','quantity','unit','recipeId','createdById','createdAt','updatedAt']);

export const AllergenScalarFieldEnumSchema = z.enum(['id','name','description']);

export const IngredientAllergenScalarFieldEnumSchema = z.enum(['id','ingredientId','allergenId']);

export const NutritionalRecommendationScalarFieldEnumSchema = z.enum(['id','menuItemId','recommendation','createdAt','updatedAt']);

export const EarlyAccessScalarFieldEnumSchema = z.enum(['id','email','isEmailSent','createdAt','updatedAt']);

export const OrganizationScalarFieldEnumSchema = z.enum(['id','name','imageUrl','createdAt','updatedAt']);

export const InventoryScalarFieldEnumSchema = z.enum(['id','restaurantId','name','type','isActive','createdAt','updatedAt']);

export const RestaurantScalarFieldEnumSchema = z.enum(['id','name','imageUrl','address','city','zipCode','state','owner','organizationId','foodCost','createdAt','updatedAt','isDeleted','deleted']);

export const UserScalarFieldEnumSchema = z.enum(['id','email','sub','passwordHash','firstName','lastName','profileImage','verified','role','organizationId','restaurantId','createdAt','updatedAt']);

export const SessionScalarFieldEnumSchema = z.enum(['id','userId','code','token','expiresAt','createdAt']);

export const CookBookScalarFieldEnumSchema = z.enum(['id','name','imageUrl','category','restaurantId']);

export const RecipeScalarFieldEnumSchema = z.enum(['id','name','imageUrls','description','servings','cookTime','prepTime','frequency','restaurantId','cookBookId','foodCost','isDeleted','isPublished','publishedAt','language','skillLevel','category']);

export const IngredientScalarFieldEnumSchema = z.enum(['id','name','category','price','density','dietaryRestrictionId','calories','protein','carbohydrates','fat','fiber','sugar','sodium','usdaFoodId','nutritionSource','nutritionUpdatedAt']);

export const RecipeIngredientScalarFieldEnumSchema = z.enum(['id','recipeId','ingredientId','quantity','unit','processingInstructions','substituteIngredients','isOptional','notes','cost','density','yield','joinAt','recipeVersionId']);

export const RecipeInstructionScalarFieldEnumSchema = z.enum(['id','recipeId','stepNumber','instruction','imageUrl','recipeVersionId','timeInMinutes','temperature','temperatureUnit','isCritical','techniqueTips','warningNotes']);

export const InventoryItemScalarFieldEnumSchema = z.enum(['id','inventoryId','ingredientId','quantity','unit','minQuantity','restockThreshold','lastCountDate','lastOrderDate','lastUpdatedById','lastUpdated','par','reorderPoint','maxQuantity','location','barcode','notes','currentPrice','averageCost','lastPurchasePrice']);

export const InventoryTransactionScalarFieldEnumSchema = z.enum(['id','inventoryId','itemId','type','quantity','unit','previousQty','newQty','cost','reference','notes','createdById','createdAt']);

export const StockCountScalarFieldEnumSchema = z.enum(['id','inventoryId','status','startedAt','completedAt','createdById','notes']);

export const StockCountItemScalarFieldEnumSchema = z.enum(['id','stockCountId','itemId','expectedQty','actualQty','difference','notes']);

export const RecipeStatsScalarFieldEnumSchema = z.enum(['id','recipeId','totalCost','profitMargin','averageRating','preparationCount','lastPrepared']);

export const OrderScalarFieldEnumSchema = z.enum(['id','restaurantId','vendorId','status','createdAt','updatedAt']);

export const OrderItemScalarFieldEnumSchema = z.enum(['id','orderId','ingredientId','quantity','unit','price']);

export const VendorScalarFieldEnumSchema = z.enum(['id','name','contact','email','phone','createdAt','updatedAt']);

export const ShiftScalarFieldEnumSchema = z.enum(['id','userId','startTime','endTime','status']);

export const PrepBoardScalarFieldEnumSchema = z.enum(['id','name','status','createdAt','updatedAt']);

export const PrepItemScalarFieldEnumSchema = z.enum(['id','prepBoardId','recipeId','quantity','status','assignedToId']);

export const PasswordResetScalarFieldEnumSchema = z.enum(['id','token','userId','expiresAt','createdAt','updatedAt']);

export const MenuScalarFieldEnumSchema = z.enum(['id','name','restaurantId','createdAt','updatedAt']);

export const MenuItemRecipeScalarFieldEnumSchema = z.enum(['id','menuItemId','recipeId','joinAt']);

export const MenuItemScalarFieldEnumSchema = z.enum(['id','name','description','price','foodCost','isActive','recipeIds','recipeServingsAmount','recipeServingsCost','allergens','menuId','categoryId']);

export const NutritionalInfoScalarFieldEnumSchema = z.enum(['id','menuItemId','calories','fat','saturatedFat','transFat','cholesterol','sodium','carbohydrates','fiber','sugar','protein','createdAt','updatedAt']);

export const FoodCostHistoryScalarFieldEnumSchema = z.enum(['id','recipeId','cost','date','createdAt','updatedAt']);

export const PrepHistoryScalarFieldEnumSchema = z.enum(['id','recipeId','quantity','date','createdAt','updatedAt']);

export const SortOrderSchema = z.enum(['asc','desc']);

export const QueryModeSchema = z.enum(['default','insensitive']);

export const NullsOrderSchema = z.enum(['first','last']);

export const ChecklistItemTypeSchema = z.enum(['BOOLEAN','NUMERIC','TEXT','TEMPERATURE','PHOTO']);

export type ChecklistItemTypeType = `${z.infer<typeof ChecklistItemTypeSchema>}`

export const EquipmentStatusSchema = z.enum(['ACTIVE','MAINTENANCE','REPAIR','RETIRED']);

export type EquipmentStatusType = `${z.infer<typeof EquipmentStatusSchema>}`

export const MaintenanceTypeSchema = z.enum(['ROUTINE','REPAIR','INSPECTION','CLEANING','CALIBRATION']);

export type MaintenanceTypeType = `${z.infer<typeof MaintenanceTypeSchema>}`

export const ChecklistFrequencySchema = z.enum(['DAILY','WEEKLY','MONTHLY','QUARTERLY','CUSTOM']);

export type ChecklistFrequencyType = `${z.infer<typeof ChecklistFrequencySchema>}`

export const ChecklistStatusSchema = z.enum(['COMPLETED','FAILED','SKIPPED','NEEDS_ATTENTION']);

export type ChecklistStatusType = `${z.infer<typeof ChecklistStatusSchema>}`

export const FeedbackSourceSchema = z.enum(['IN_PERSON','ONLINE','MOBILE_APP','THIRD_PARTY']);

export type FeedbackSourceType = `${z.infer<typeof FeedbackSourceSchema>}`

export const FeedbackStatusSchema = z.enum(['NEW','IN_PROGRESS','RESPONDED','CLOSED','FLAGGED']);

export type FeedbackStatusType = `${z.infer<typeof FeedbackStatusSchema>}`

export const ProductionStatusSchema = z.enum(['PLANNED','IN_PROGRESS','COMPLETED','CANCELLED','HAS_NOT_START']);

export type ProductionStatusType = `${z.infer<typeof ProductionStatusSchema>}`

export const TaskTypeSchema = z.enum(['PREP','COOKING','CLEANING','INVENTORY','OTHER']);

export type TaskTypeType = `${z.infer<typeof TaskTypeSchema>}`

export const DayOfWeekSchema = z.enum(['MONDAY','TUESDAY','WEDNESDAY','THURSDAY','FRIDAY','SATURDAY','SUNDAY']);

export type DayOfWeekType = `${z.infer<typeof DayOfWeekSchema>}`

export const ConstraintTypeSchema = z.enum(['UNAVAILABLE','PREFERRED']);

export type ConstraintTypeType = `${z.infer<typeof ConstraintTypeSchema>}`

export const CategorySchema = z.enum(['APPETIZER','SOUP','SALAD','MAIN_COURSE','SIDE_DISH','DESSERT','BEVERAGE','BREAKFAST','BRUNCH','LUNCH','DINNER','SNACK','BAKED_GOOD','SAUCE','CONDIMENT','SPECIAL']);

export type CategoryType = `${z.infer<typeof CategorySchema>}`

export const InventoryTypeSchema = z.enum(['MAIN','BAR','PREP','STORAGE','WALK_IN','FREEZER']);

export type InventoryTypeType = `${z.infer<typeof InventoryTypeSchema>}`

export const TransactionTypeSchema = z.enum(['PURCHASE','WITHDRAWAL','ADJUSTMENT','WASTE','TRANSFER_IN','TRANSFER_OUT','COUNT_ADJUSTMENT','PRODUCTION','RETURN']);

export type TransactionTypeType = `${z.infer<typeof TransactionTypeSchema>}`

export const CountStatusSchema = z.enum(['PENDING','IN_PROGRESS','COMPLETED','CANCELLED']);

export type CountStatusType = `${z.infer<typeof CountStatusSchema>}`

export const UserRoleSchema = z.enum(['ADMIN','MANAGER','CHEF','STAFF','VENDOR']);

export type UserRoleType = `${z.infer<typeof UserRoleSchema>}`

export const OrderStatusSchema = z.enum(['PENDING','APPROVED','ORDERED','RECEIVED','CANCELLED']);

export type OrderStatusType = `${z.infer<typeof OrderStatusSchema>}`

export const ShiftStatusSchema = z.enum(['SCHEDULED','COMPLETED','CANCELLED']);

export type ShiftStatusType = `${z.infer<typeof ShiftStatusSchema>}`

export const PrepStatusSchema = z.enum(['COMPLETED','CANCELLED','MISSING_ITEM','PENDING','ON_PROGRESS','POSTPONE']);

export type PrepStatusType = `${z.infer<typeof PrepStatusSchema>}`

export const SkillLevelSchema = z.enum(['BEGINNER','INTERMEDIATE','ADVANCED','EXPERT']);

export type SkillLevelType = `${z.infer<typeof SkillLevelSchema>}`

export const PhotoTypeSchema = z.enum(['MAIN','STEP','PLATING','TECHNIQUE','EQUIPMENT_SETUP']);

export type PhotoTypeType = `${z.infer<typeof PhotoTypeSchema>}`

export const NutritionSourceSchema = z.enum(['MANUAL','USDA','CUSTOM','ESTIMATED']);

export type NutritionSourceType = `${z.infer<typeof NutritionSourceSchema>}`

/////////////////////////////////////////
// MODELS
/////////////////////////////////////////

/////////////////////////////////////////
// RECIPE NUTRITION SCHEMA
/////////////////////////////////////////

export const RecipeNutritionSchema = z.object({
  id: z.number().int(),
  recipeId: z.number().int(),
  servingSize: z.number(),
  servingUnit: z.string(),
  calories: z.number(),
  protein: z.number(),
  carbohydrates: z.number(),
  fat: z.number(),
  fiber: z.number(),
  sugar: z.number(),
  sodium: z.number(),
  containsGluten: z.boolean(),
  containsDairy: z.boolean(),
  containsNuts: z.boolean(),
  containsEggs: z.boolean(),
  containsSoy: z.boolean(),
  containsFish: z.boolean(),
  containsShellfish: z.boolean(),
  containsSesame: z.boolean(),
})

export type RecipeNutrition = z.infer<typeof RecipeNutritionSchema>

/////////////////////////////////////////
// RECIPE CRITICAL POINT SCHEMA
/////////////////////////////////////////

export const RecipeCriticalPointSchema = z.object({
  id: z.number().int(),
  recipeId: z.number().int(),
  stepNumber: z.number().int(),
  description: z.string(),
  threshold: z.number().nullable(),
  unit: z.string().nullable(),
  action: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type RecipeCriticalPoint = z.infer<typeof RecipeCriticalPointSchema>

/////////////////////////////////////////
// RECIPE STORAGE SCHEMA
/////////////////////////////////////////

export const RecipeStorageSchema = z.object({
  id: z.number().int(),
  recipeId: z.number().int(),
  temperature: z.number().nullable(),
  method: z.string(),
  shelfLife: z.number().int(),
  containerType: z.string().nullable(),
  specialNotes: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type RecipeStorage = z.infer<typeof RecipeStorageSchema>

/////////////////////////////////////////
// RECIPE PHOTO SCHEMA
/////////////////////////////////////////

export const RecipePhotoSchema = z.object({
  type: PhotoTypeSchema,
  id: z.number().int(),
  recipeId: z.number().int(),
  url: z.string(),
  stepNumber: z.number().int().nullable(),
  description: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type RecipePhoto = z.infer<typeof RecipePhotoSchema>

/////////////////////////////////////////
// RECIPE TEMPERATURE SCHEMA
/////////////////////////////////////////

export const RecipeTemperatureSchema = z.object({
  id: z.number().int(),
  recipeId: z.number().int(),
  stepNumber: z.number().int(),
  minTemp: z.number(),
  maxTemp: z.number(),
  isCritical: z.boolean(),
  holdTime: z.number().int().nullable(),
  description: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type RecipeTemperature = z.infer<typeof RecipeTemperatureSchema>

/////////////////////////////////////////
// RECIPE YIELD SCHEMA
/////////////////////////////////////////

export const RecipeYieldSchema = z.object({
  id: z.number().int(),
  recipeId: z.number().int(),
  expectedYield: z.number(),
  actualYield: z.number().nullable(),
  unit: z.string(),
  wastagePercent: z.number().nullable(),
  notes: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type RecipeYield = z.infer<typeof RecipeYieldSchema>

/////////////////////////////////////////
// RECIPE LABOR COST SCHEMA
/////////////////////////////////////////

export const RecipeLaborCostSchema = z.object({
  id: z.number().int(),
  recipeId: z.number().int(),
  prepTime: z.number().int(),
  cookTime: z.number().int(),
  laborRate: z.number(),
  totalLaborCost: z.number(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type RecipeLaborCost = z.infer<typeof RecipeLaborCostSchema>

/////////////////////////////////////////
// SALES TRANSACTIONS SCHEMA
/////////////////////////////////////////

export const SalesTransactionsSchema = z.object({
  id: z.number().int(),
  posTransactionID: z.string().nullable(),
  restaurantId: z.number().int(),
  menuItemId: z.number().int(),
  price: z.number(),
  total: z.number(),
  transactionDate: z.coerce.date(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type SalesTransactions = z.infer<typeof SalesTransactionsSchema>

/////////////////////////////////////////
// MENU CATEGORY SCHEMA
/////////////////////////////////////////

export const MenuCategorySchema = z.object({
  id: z.number().int(),
  name: z.string(),
  description: z.string().nullable(),
  displayOrder: z.number().int(),
  menuId: z.number().int(),
  isActive: z.boolean(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type MenuCategory = z.infer<typeof MenuCategorySchema>

/////////////////////////////////////////
// RECIPE VERSION SCHEMA
/////////////////////////////////////////

export const RecipeVersionSchema = z.object({
  id: z.number().int(),
  recipeId: z.number().int(),
  versionNumber: z.number().int(),
  description: z.string().nullable(),
  changes: z.string().nullable(),
  isActive: z.boolean(),
  createdById: z.number().int(),
  approvedById: z.number().int().nullable(),
  approvedAt: z.coerce.date().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type RecipeVersion = z.infer<typeof RecipeVersionSchema>

/////////////////////////////////////////
// EQUIPMENT SCHEMA
/////////////////////////////////////////

export const EquipmentSchema = z.object({
  status: EquipmentStatusSchema,
  id: z.number().int(),
  name: z.string(),
  description: z.string().nullable(),
  model: z.string().nullable(),
  serialNumber: z.string().nullable(),
  purchaseDate: z.coerce.date().nullable(),
  lastMaintenance: z.coerce.date().nullable(),
  nextMaintenance: z.coerce.date().nullable(),
  location: z.string().nullable(),
  restaurantId: z.number().int(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Equipment = z.infer<typeof EquipmentSchema>

/////////////////////////////////////////
// RECIPE EQUIPMENT SCHEMA
/////////////////////////////////////////

export const RecipeEquipmentSchema = z.object({
  id: z.number().int(),
  recipeId: z.number().int(),
  equipmentId: z.number().int(),
  notes: z.string().nullable(),
  recipeInstructionId: z.number().int().nullable(),
})

export type RecipeEquipment = z.infer<typeof RecipeEquipmentSchema>

/////////////////////////////////////////
// MAINTENANCE LOG SCHEMA
/////////////////////////////////////////

export const MaintenanceLogSchema = z.object({
  type: MaintenanceTypeSchema,
  id: z.number().int(),
  equipmentId: z.number().int(),
  date: z.coerce.date(),
  description: z.string(),
  cost: z.number().nullable(),
  performedBy: z.string(),
  notes: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type MaintenanceLog = z.infer<typeof MaintenanceLogSchema>

/////////////////////////////////////////
// QUALITY CHECKLIST SCHEMA
/////////////////////////////////////////

export const QualityChecklistSchema = z.object({
  frequency: ChecklistFrequencySchema,
  id: z.number().int(),
  name: z.string(),
  description: z.string().nullable(),
  restaurantId: z.number().int(),
  isActive: z.boolean(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type QualityChecklist = z.infer<typeof QualityChecklistSchema>

/////////////////////////////////////////
// CHECKLIST ITEM SCHEMA
/////////////////////////////////////////

export const ChecklistItemSchema = z.object({
  type: ChecklistItemTypeSchema,
  id: z.number().int(),
  checklistId: z.number().int(),
  description: z.string(),
  order: z.number().int(),
  requiredPhotos: z.boolean(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type ChecklistItem = z.infer<typeof ChecklistItemSchema>

/////////////////////////////////////////
// CHECKLIST COMPLETE SCHEMA
/////////////////////////////////////////

export const ChecklistCompleteSchema = z.object({
  id: z.number().int(),
  checklistId: z.number().int(),
  completedById: z.number().int(),
  date: z.coerce.date(),
  notes: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type ChecklistComplete = z.infer<typeof ChecklistCompleteSchema>

/////////////////////////////////////////
// CHECKLIST ITEM COMPLETE SCHEMA
/////////////////////////////////////////

export const ChecklistItemCompleteSchema = z.object({
  status: ChecklistStatusSchema,
  id: z.number().int(),
  checklistCompleteId: z.number().int(),
  checklistItemId: z.number().int(),
  notes: z.string().nullable(),
  photoUrls: z.string().array(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type ChecklistItemComplete = z.infer<typeof ChecklistItemCompleteSchema>

/////////////////////////////////////////
// SUPPLIER PRICE HISTORY SCHEMA
/////////////////////////////////////////

export const SupplierPriceHistorySchema = z.object({
  id: z.number().int(),
  vendorId: z.number().int(),
  ingredientId: z.number().int(),
  price: z.number(),
  unit: z.string(),
  startDate: z.coerce.date(),
  endDate: z.coerce.date().nullable(),
  notes: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type SupplierPriceHistory = z.infer<typeof SupplierPriceHistorySchema>

/////////////////////////////////////////
// CUSTOMER FEEDBACK SCHEMA
/////////////////////////////////////////

export const CustomerFeedbackSchema = z.object({
  source: FeedbackSourceSchema,
  status: FeedbackStatusSchema,
  id: z.number().int(),
  restaurantId: z.number().int(),
  menuItemId: z.number().int().nullable(),
  rating: z.number().int(),
  comment: z.string().nullable(),
  tags: z.string().array(),
  responseText: z.string().nullable(),
  respondedAt: z.coerce.date().nullable(),
  respondedById: z.number().int().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type CustomerFeedback = z.infer<typeof CustomerFeedbackSchema>

/////////////////////////////////////////
// DIETARY RESTRICTION SCHEMA
/////////////////////////////////////////

export const DietaryRestrictionSchema = z.object({
  id: z.number().int(),
  name: z.string(),
  description: z.string().nullable(),
  icon: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type DietaryRestriction = z.infer<typeof DietaryRestrictionSchema>

/////////////////////////////////////////
// RECIPE TAG SCHEMA
/////////////////////////////////////////

export const RecipeTagSchema = z.object({
  id: z.number().int(),
  name: z.string(),
  description: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type RecipeTag = z.infer<typeof RecipeTagSchema>

/////////////////////////////////////////
// LEFTOVER ITEM SCHEMA
/////////////////////////////////////////

export const LeftoverItemSchema = z.object({
  id: z.number().int(),
  restaurantId: z.number().int(),
  date: z.coerce.date(),
  menuItemId: z.number().int(),
  quantity: z.number().int(),
  reason: z.string(),
  recordedById: z.number().int(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type LeftoverItem = z.infer<typeof LeftoverItemSchema>

/////////////////////////////////////////
// WASTE RECORD SCHEMA
/////////////////////////////////////////

export const WasteRecordSchema = z.object({
  id: z.number().int(),
  restaurantId: z.number().int(),
  date: z.coerce.date(),
  ingredientId: z.number().int(),
  quantity: z.number(),
  unit: z.string(),
  reason: z.string(),
  recordedById: z.number().int(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type WasteRecord = z.infer<typeof WasteRecordSchema>

/////////////////////////////////////////
// PRODUCTION PLAN SCHEMA
/////////////////////////////////////////

export const ProductionPlanSchema = z.object({
  status: ProductionStatusSchema,
  id: z.number().int(),
  restaurantId: z.number().int(),
  date: z.coerce.date(),
  createdById: z.number().int(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type ProductionPlan = z.infer<typeof ProductionPlanSchema>

/////////////////////////////////////////
// PRODUCTION PLAN ITEM SCHEMA
/////////////////////////////////////////

export const ProductionPlanItemSchema = z.object({
  id: z.number().int(),
  productionPlanId: z.number().int(),
  recipeId: z.number().int(),
  quantity: z.number().int(),
  unit: z.string(),
  assignedToId: z.number().int().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type ProductionPlanItem = z.infer<typeof ProductionPlanItemSchema>

/////////////////////////////////////////
// SHIFT TASK SCHEMA
/////////////////////////////////////////

export const ShiftTaskSchema = z.object({
  taskType: TaskTypeSchema,
  id: z.number().int(),
  shiftId: z.number().int(),
  startTime: z.coerce.date(),
  endTime: z.coerce.date(),
  duration: z.number().int(),
  notes: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type ShiftTask = z.infer<typeof ShiftTaskSchema>

/////////////////////////////////////////
// AVAILABILITY SCHEMA
/////////////////////////////////////////

export const AvailabilitySchema = z.object({
  dayOfWeek: DayOfWeekSchema,
  id: z.number().int(),
  userId: z.number().int(),
  startTime: z.coerce.date(),
  endTime: z.coerce.date(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Availability = z.infer<typeof AvailabilitySchema>

/////////////////////////////////////////
// SCHEDULING CONSTRAINT SCHEMA
/////////////////////////////////////////

export const SchedulingConstraintSchema = z.object({
  constraintsType: ConstraintTypeSchema,
  id: z.number().int(),
  userId: z.number().int(),
  date: z.coerce.date(),
  startTime: z.coerce.date(),
  endTime: z.coerce.date(),
  notes: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type SchedulingConstraint = z.infer<typeof SchedulingConstraintSchema>

/////////////////////////////////////////
// INVENTORY WITHDRAWAL SCHEMA
/////////////////////////////////////////

export const InventoryWithdrawalSchema = z.object({
  id: z.number().int(),
  inventoryItemId: z.number().int(),
  dateTime: z.coerce.date(),
  quantity: z.number(),
  unit: z.string(),
  recipeId: z.number().int().nullable(),
  createdById: z.number().int(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type InventoryWithdrawal = z.infer<typeof InventoryWithdrawalSchema>

/////////////////////////////////////////
// ALLERGEN SCHEMA
/////////////////////////////////////////

export const AllergenSchema = z.object({
  id: z.number().int(),
  name: z.string(),
  description: z.string().nullable(),
})

export type Allergen = z.infer<typeof AllergenSchema>

/////////////////////////////////////////
// INGREDIENT ALLERGEN SCHEMA
/////////////////////////////////////////

export const IngredientAllergenSchema = z.object({
  id: z.number().int(),
  ingredientId: z.number().int(),
  allergenId: z.number().int(),
})

export type IngredientAllergen = z.infer<typeof IngredientAllergenSchema>

/////////////////////////////////////////
// NUTRITIONAL RECOMMENDATION SCHEMA
/////////////////////////////////////////

export const NutritionalRecommendationSchema = z.object({
  id: z.number().int(),
  menuItemId: z.number().int(),
  recommendation: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type NutritionalRecommendation = z.infer<typeof NutritionalRecommendationSchema>

/////////////////////////////////////////
// EARLY ACCESS SCHEMA
/////////////////////////////////////////

export const EarlyAccessSchema = z.object({
  id: z.number().int(),
  email: z.string(),
  isEmailSent: z.boolean(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type EarlyAccess = z.infer<typeof EarlyAccessSchema>

/////////////////////////////////////////
// ORGANIZATION SCHEMA
/////////////////////////////////////////

export const OrganizationSchema = z.object({
  id: z.number().int(),
  name: z.string(),
  imageUrl: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Organization = z.infer<typeof OrganizationSchema>

/////////////////////////////////////////
// INVENTORY SCHEMA
/////////////////////////////////////////

export const InventorySchema = z.object({
  type: InventoryTypeSchema,
  id: z.number().int(),
  restaurantId: z.number().int(),
  name: z.string().nullable(),
  isActive: z.boolean(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Inventory = z.infer<typeof InventorySchema>

/////////////////////////////////////////
// RESTAURANT SCHEMA
/////////////////////////////////////////

export const RestaurantSchema = z.object({
  id: z.number().int(),
  name: z.string(),
  imageUrl: z.string().nullable(),
  address: z.string(),
  city: z.string(),
  zipCode: z.string(),
  state: z.string(),
  owner: z.string(),
  organizationId: z.number().int().nullable(),
  foodCost: z.number().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  isDeleted: z.boolean(),
  deleted: z.coerce.date().nullable(),
})

export type Restaurant = z.infer<typeof RestaurantSchema>

/////////////////////////////////////////
// USER SCHEMA
/////////////////////////////////////////

export const UserSchema = z.object({
  role: UserRoleSchema,
  id: z.number().int(),
  email: z.string(),
  sub: z.number().int().nullable(),
  passwordHash: z.string(),
  firstName: z.string(),
  lastName: z.string(),
  profileImage: z.string().nullable(),
  verified: z.boolean(),
  organizationId: z.number().int().nullable(),
  restaurantId: z.number().int().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type User = z.infer<typeof UserSchema>

/////////////////////////////////////////
// SESSION SCHEMA
/////////////////////////////////////////

export const SessionSchema = z.object({
  id: z.string().uuid(),
  userId: z.number().int(),
  code: z.string(),
  token: z.string(),
  expiresAt: z.coerce.date(),
  createdAt: z.coerce.date(),
})

export type Session = z.infer<typeof SessionSchema>

/////////////////////////////////////////
// COOK BOOK SCHEMA
/////////////////////////////////////////

export const CookBookSchema = z.object({
  id: z.number().int(),
  name: z.string(),
  imageUrl: z.string().nullable(),
  category: z.string(),
  restaurantId: z.number().int().nullable(),
})

export type CookBook = z.infer<typeof CookBookSchema>

/////////////////////////////////////////
// RECIPE SCHEMA
/////////////////////////////////////////

export const RecipeSchema = z.object({
  skillLevel: SkillLevelSchema,
  category: CategorySchema,
  id: z.number().int(),
  name: z.string(),
  imageUrls: z.string().array(),
  description: z.string().nullable(),
  servings: z.number().int(),
  cookTime: z.number().int(),
  prepTime: z.number().int(),
  frequency: z.number().int().nullable(),
  restaurantId: z.number().int(),
  cookBookId: z.number().int(),
  foodCost: z.number().nullable(),
  isDeleted: z.boolean(),
  isPublished: z.boolean(),
  publishedAt: z.coerce.date().nullable(),
  language: z.string(),
})

export type Recipe = z.infer<typeof RecipeSchema>

/////////////////////////////////////////
// INGREDIENT SCHEMA
/////////////////////////////////////////

export const IngredientSchema = z.object({
  nutritionSource: NutritionSourceSchema.nullable(),
  id: z.number().int(),
  name: z.string(),
  category: z.string(),
  price: z.number(),
  density: z.number().nullable(),
  dietaryRestrictionId: z.number().int().nullable(),
  calories: z.number().nullable(),
  protein: z.number().nullable(),
  carbohydrates: z.number().nullable(),
  fat: z.number().nullable(),
  fiber: z.number().nullable(),
  sugar: z.number().nullable(),
  sodium: z.number().nullable(),
  usdaFoodId: z.string().nullable(),
  nutritionUpdatedAt: z.coerce.date().nullable(),
})

export type Ingredient = z.infer<typeof IngredientSchema>

/////////////////////////////////////////
// RECIPE INGREDIENT SCHEMA
/////////////////////////////////////////

export const RecipeIngredientSchema = z.object({
  id: z.number().int(),
  recipeId: z.number().int(),
  ingredientId: z.number().int(),
  quantity: z.number(),
  unit: z.string(),
  processingInstructions: z.string().nullable(),
  substituteIngredients: z.number().int().array(),
  isOptional: z.boolean(),
  notes: z.string().nullable(),
  cost: z.number().nullable(),
  density: z.number().nullable(),
  yield: z.number().nullable(),
  joinAt: z.coerce.date(),
  recipeVersionId: z.number().int().nullable(),
})

export type RecipeIngredient = z.infer<typeof RecipeIngredientSchema>

/////////////////////////////////////////
// RECIPE INSTRUCTION SCHEMA
/////////////////////////////////////////

export const RecipeInstructionSchema = z.object({
  id: z.number().int(),
  recipeId: z.number().int(),
  stepNumber: z.number().int(),
  instruction: z.string(),
  imageUrl: z.string().nullable(),
  recipeVersionId: z.number().int().nullable(),
  timeInMinutes: z.number().int().nullable(),
  temperature: z.number().nullable(),
  temperatureUnit: z.string().nullable(),
  isCritical: z.boolean(),
  techniqueTips: z.string().nullable(),
  warningNotes: z.string().nullable(),
})

export type RecipeInstruction = z.infer<typeof RecipeInstructionSchema>

/////////////////////////////////////////
// INVENTORY ITEM SCHEMA
/////////////////////////////////////////

export const InventoryItemSchema = z.object({
  id: z.number().int(),
  inventoryId: z.number().int(),
  ingredientId: z.number().int(),
  quantity: z.number(),
  unit: z.string(),
  minQuantity: z.number(),
  restockThreshold: z.number(),
  lastCountDate: z.coerce.date().nullable(),
  lastOrderDate: z.coerce.date().nullable(),
  lastUpdatedById: z.number().int().nullable(),
  lastUpdated: z.coerce.date(),
  par: z.number(),
  reorderPoint: z.number(),
  maxQuantity: z.number().nullable(),
  location: z.string().nullable(),
  barcode: z.string().nullable(),
  notes: z.string().nullable(),
  currentPrice: z.number(),
  averageCost: z.number(),
  lastPurchasePrice: z.number().nullable(),
})

export type InventoryItem = z.infer<typeof InventoryItemSchema>

/////////////////////////////////////////
// INVENTORY TRANSACTION SCHEMA
/////////////////////////////////////////

export const InventoryTransactionSchema = z.object({
  type: TransactionTypeSchema,
  id: z.number().int(),
  inventoryId: z.number().int(),
  itemId: z.number().int(),
  quantity: z.number(),
  unit: z.string(),
  previousQty: z.number(),
  newQty: z.number(),
  cost: z.number().nullable(),
  reference: z.string().nullable(),
  notes: z.string().nullable(),
  createdById: z.number().int(),
  createdAt: z.coerce.date(),
})

export type InventoryTransaction = z.infer<typeof InventoryTransactionSchema>

/////////////////////////////////////////
// STOCK COUNT SCHEMA
/////////////////////////////////////////

export const StockCountSchema = z.object({
  status: CountStatusSchema,
  id: z.number().int(),
  inventoryId: z.number().int(),
  startedAt: z.coerce.date(),
  completedAt: z.coerce.date().nullable(),
  createdById: z.number().int(),
  notes: z.string().nullable(),
})

export type StockCount = z.infer<typeof StockCountSchema>

/////////////////////////////////////////
// STOCK COUNT ITEM SCHEMA
/////////////////////////////////////////

export const StockCountItemSchema = z.object({
  id: z.number().int(),
  stockCountId: z.number().int(),
  itemId: z.number().int(),
  expectedQty: z.number(),
  actualQty: z.number(),
  difference: z.number(),
  notes: z.string().nullable(),
})

export type StockCountItem = z.infer<typeof StockCountItemSchema>

/////////////////////////////////////////
// RECIPE STATS SCHEMA
/////////////////////////////////////////

export const RecipeStatsSchema = z.object({
  id: z.number().int(),
  recipeId: z.number().int(),
  totalCost: z.number(),
  profitMargin: z.number(),
  averageRating: z.number(),
  preparationCount: z.number().int(),
  lastPrepared: z.coerce.date().nullable(),
})

export type RecipeStats = z.infer<typeof RecipeStatsSchema>

/////////////////////////////////////////
// ORDER SCHEMA
/////////////////////////////////////////

export const OrderSchema = z.object({
  status: OrderStatusSchema,
  id: z.number().int(),
  restaurantId: z.number().int(),
  vendorId: z.number().int(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Order = z.infer<typeof OrderSchema>

/////////////////////////////////////////
// ORDER ITEM SCHEMA
/////////////////////////////////////////

export const OrderItemSchema = z.object({
  id: z.number().int(),
  orderId: z.number().int(),
  ingredientId: z.number().int(),
  quantity: z.number(),
  unit: z.string(),
  price: z.number(),
})

export type OrderItem = z.infer<typeof OrderItemSchema>

/////////////////////////////////////////
// VENDOR SCHEMA
/////////////////////////////////////////

export const VendorSchema = z.object({
  id: z.number().int(),
  name: z.string(),
  contact: z.string(),
  email: z.string(),
  phone: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Vendor = z.infer<typeof VendorSchema>

/////////////////////////////////////////
// SHIFT SCHEMA
/////////////////////////////////////////

export const ShiftSchema = z.object({
  status: ShiftStatusSchema,
  id: z.number().int(),
  userId: z.number().int(),
  startTime: z.coerce.date(),
  endTime: z.coerce.date(),
})

export type Shift = z.infer<typeof ShiftSchema>

/////////////////////////////////////////
// PREP BOARD SCHEMA
/////////////////////////////////////////

export const PrepBoardSchema = z.object({
  status: PrepStatusSchema,
  id: z.number().int(),
  name: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type PrepBoard = z.infer<typeof PrepBoardSchema>

/////////////////////////////////////////
// PREP ITEM SCHEMA
/////////////////////////////////////////

export const PrepItemSchema = z.object({
  status: PrepStatusSchema,
  id: z.number().int(),
  prepBoardId: z.number().int(),
  recipeId: z.number().int(),
  quantity: z.number().int(),
  assignedToId: z.number().int(),
})

export type PrepItem = z.infer<typeof PrepItemSchema>

/////////////////////////////////////////
// PASSWORD RESET SCHEMA
/////////////////////////////////////////

export const PasswordResetSchema = z.object({
  id: z.number().int(),
  token: z.string(),
  userId: z.number().int(),
  expiresAt: z.coerce.date(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type PasswordReset = z.infer<typeof PasswordResetSchema>

/////////////////////////////////////////
// MENU SCHEMA
/////////////////////////////////////////

export const MenuSchema = z.object({
  id: z.number().int(),
  name: z.string(),
  restaurantId: z.number().int(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Menu = z.infer<typeof MenuSchema>

/////////////////////////////////////////
// MENU ITEM RECIPE SCHEMA
/////////////////////////////////////////

export const MenuItemRecipeSchema = z.object({
  id: z.number().int(),
  menuItemId: z.number().int(),
  recipeId: z.number().int(),
  joinAt: z.coerce.date(),
})

export type MenuItemRecipe = z.infer<typeof MenuItemRecipeSchema>

/////////////////////////////////////////
// MENU ITEM SCHEMA
/////////////////////////////////////////

export const MenuItemSchema = z.object({
  id: z.number().int(),
  name: z.string(),
  description: z.string().nullable(),
  price: z.number(),
  foodCost: z.number(),
  isActive: z.boolean(),
  recipeIds: z.number().int().array(),
  recipeServingsAmount: z.number().array(),
  recipeServingsCost: z.number().array(),
  allergens: z.string().array(),
  menuId: z.number().int(),
  categoryId: z.number().int().nullable(),
})

export type MenuItem = z.infer<typeof MenuItemSchema>

/////////////////////////////////////////
// NUTRITIONAL INFO SCHEMA
/////////////////////////////////////////

export const NutritionalInfoSchema = z.object({
  id: z.number().int(),
  menuItemId: z.number().int().nullable(),
  calories: z.number(),
  fat: z.number(),
  saturatedFat: z.number(),
  transFat: z.number(),
  cholesterol: z.number(),
  sodium: z.number(),
  carbohydrates: z.number(),
  fiber: z.number(),
  sugar: z.number(),
  protein: z.number(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type NutritionalInfo = z.infer<typeof NutritionalInfoSchema>

/////////////////////////////////////////
// FOOD COST HISTORY SCHEMA
/////////////////////////////////////////

export const FoodCostHistorySchema = z.object({
  id: z.number().int(),
  recipeId: z.number().int(),
  cost: z.number(),
  date: z.coerce.date(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type FoodCostHistory = z.infer<typeof FoodCostHistorySchema>

/////////////////////////////////////////
// PREP HISTORY SCHEMA
/////////////////////////////////////////

export const PrepHistorySchema = z.object({
  id: z.number().int(),
  recipeId: z.number().int(),
  quantity: z.number().int(),
  date: z.coerce.date(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type PrepHistory = z.infer<typeof PrepHistorySchema>

/////////////////////////////////////////
// SELECT & INCLUDE
/////////////////////////////////////////

// RECIPE NUTRITION
//------------------------------------------------------

export const RecipeNutritionIncludeSchema: z.ZodType<Prisma.RecipeNutritionInclude> = z.object({
  recipe: z.union([z.boolean(),z.lazy(() => RecipeArgsSchema)]).optional(),
}).strict()

export const RecipeNutritionArgsSchema: z.ZodType<Prisma.RecipeNutritionDefaultArgs> = z.object({
  select: z.lazy(() => RecipeNutritionSelectSchema).optional(),
  include: z.lazy(() => RecipeNutritionIncludeSchema).optional(),
}).strict();

export const RecipeNutritionSelectSchema: z.ZodType<Prisma.RecipeNutritionSelect> = z.object({
  id: z.boolean().optional(),
  recipeId: z.boolean().optional(),
  servingSize: z.boolean().optional(),
  servingUnit: z.boolean().optional(),
  calories: z.boolean().optional(),
  protein: z.boolean().optional(),
  carbohydrates: z.boolean().optional(),
  fat: z.boolean().optional(),
  fiber: z.boolean().optional(),
  sugar: z.boolean().optional(),
  sodium: z.boolean().optional(),
  containsGluten: z.boolean().optional(),
  containsDairy: z.boolean().optional(),
  containsNuts: z.boolean().optional(),
  containsEggs: z.boolean().optional(),
  containsSoy: z.boolean().optional(),
  containsFish: z.boolean().optional(),
  containsShellfish: z.boolean().optional(),
  containsSesame: z.boolean().optional(),
  recipe: z.union([z.boolean(),z.lazy(() => RecipeArgsSchema)]).optional(),
}).strict()

// RECIPE CRITICAL POINT
//------------------------------------------------------

export const RecipeCriticalPointIncludeSchema: z.ZodType<Prisma.RecipeCriticalPointInclude> = z.object({
  recipe: z.union([z.boolean(),z.lazy(() => RecipeArgsSchema)]).optional(),
}).strict()

export const RecipeCriticalPointArgsSchema: z.ZodType<Prisma.RecipeCriticalPointDefaultArgs> = z.object({
  select: z.lazy(() => RecipeCriticalPointSelectSchema).optional(),
  include: z.lazy(() => RecipeCriticalPointIncludeSchema).optional(),
}).strict();

export const RecipeCriticalPointSelectSchema: z.ZodType<Prisma.RecipeCriticalPointSelect> = z.object({
  id: z.boolean().optional(),
  recipeId: z.boolean().optional(),
  stepNumber: z.boolean().optional(),
  description: z.boolean().optional(),
  threshold: z.boolean().optional(),
  unit: z.boolean().optional(),
  action: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  recipe: z.union([z.boolean(),z.lazy(() => RecipeArgsSchema)]).optional(),
}).strict()

// RECIPE STORAGE
//------------------------------------------------------

export const RecipeStorageIncludeSchema: z.ZodType<Prisma.RecipeStorageInclude> = z.object({
  recipe: z.union([z.boolean(),z.lazy(() => RecipeArgsSchema)]).optional(),
}).strict()

export const RecipeStorageArgsSchema: z.ZodType<Prisma.RecipeStorageDefaultArgs> = z.object({
  select: z.lazy(() => RecipeStorageSelectSchema).optional(),
  include: z.lazy(() => RecipeStorageIncludeSchema).optional(),
}).strict();

export const RecipeStorageSelectSchema: z.ZodType<Prisma.RecipeStorageSelect> = z.object({
  id: z.boolean().optional(),
  recipeId: z.boolean().optional(),
  temperature: z.boolean().optional(),
  method: z.boolean().optional(),
  shelfLife: z.boolean().optional(),
  containerType: z.boolean().optional(),
  specialNotes: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  recipe: z.union([z.boolean(),z.lazy(() => RecipeArgsSchema)]).optional(),
}).strict()

// RECIPE PHOTO
//------------------------------------------------------

export const RecipePhotoIncludeSchema: z.ZodType<Prisma.RecipePhotoInclude> = z.object({
  recipe: z.union([z.boolean(),z.lazy(() => RecipeArgsSchema)]).optional(),
}).strict()

export const RecipePhotoArgsSchema: z.ZodType<Prisma.RecipePhotoDefaultArgs> = z.object({
  select: z.lazy(() => RecipePhotoSelectSchema).optional(),
  include: z.lazy(() => RecipePhotoIncludeSchema).optional(),
}).strict();

export const RecipePhotoSelectSchema: z.ZodType<Prisma.RecipePhotoSelect> = z.object({
  id: z.boolean().optional(),
  recipeId: z.boolean().optional(),
  url: z.boolean().optional(),
  type: z.boolean().optional(),
  stepNumber: z.boolean().optional(),
  description: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  recipe: z.union([z.boolean(),z.lazy(() => RecipeArgsSchema)]).optional(),
}).strict()

// RECIPE TEMPERATURE
//------------------------------------------------------

export const RecipeTemperatureIncludeSchema: z.ZodType<Prisma.RecipeTemperatureInclude> = z.object({
  recipe: z.union([z.boolean(),z.lazy(() => RecipeArgsSchema)]).optional(),
}).strict()

export const RecipeTemperatureArgsSchema: z.ZodType<Prisma.RecipeTemperatureDefaultArgs> = z.object({
  select: z.lazy(() => RecipeTemperatureSelectSchema).optional(),
  include: z.lazy(() => RecipeTemperatureIncludeSchema).optional(),
}).strict();

export const RecipeTemperatureSelectSchema: z.ZodType<Prisma.RecipeTemperatureSelect> = z.object({
  id: z.boolean().optional(),
  recipeId: z.boolean().optional(),
  stepNumber: z.boolean().optional(),
  minTemp: z.boolean().optional(),
  maxTemp: z.boolean().optional(),
  isCritical: z.boolean().optional(),
  holdTime: z.boolean().optional(),
  description: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  recipe: z.union([z.boolean(),z.lazy(() => RecipeArgsSchema)]).optional(),
}).strict()

// RECIPE YIELD
//------------------------------------------------------

export const RecipeYieldIncludeSchema: z.ZodType<Prisma.RecipeYieldInclude> = z.object({
  recipe: z.union([z.boolean(),z.lazy(() => RecipeArgsSchema)]).optional(),
}).strict()

export const RecipeYieldArgsSchema: z.ZodType<Prisma.RecipeYieldDefaultArgs> = z.object({
  select: z.lazy(() => RecipeYieldSelectSchema).optional(),
  include: z.lazy(() => RecipeYieldIncludeSchema).optional(),
}).strict();

export const RecipeYieldSelectSchema: z.ZodType<Prisma.RecipeYieldSelect> = z.object({
  id: z.boolean().optional(),
  recipeId: z.boolean().optional(),
  expectedYield: z.boolean().optional(),
  actualYield: z.boolean().optional(),
  unit: z.boolean().optional(),
  wastagePercent: z.boolean().optional(),
  notes: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  recipe: z.union([z.boolean(),z.lazy(() => RecipeArgsSchema)]).optional(),
}).strict()

// RECIPE LABOR COST
//------------------------------------------------------

export const RecipeLaborCostIncludeSchema: z.ZodType<Prisma.RecipeLaborCostInclude> = z.object({
  recipe: z.union([z.boolean(),z.lazy(() => RecipeArgsSchema)]).optional(),
}).strict()

export const RecipeLaborCostArgsSchema: z.ZodType<Prisma.RecipeLaborCostDefaultArgs> = z.object({
  select: z.lazy(() => RecipeLaborCostSelectSchema).optional(),
  include: z.lazy(() => RecipeLaborCostIncludeSchema).optional(),
}).strict();

export const RecipeLaborCostSelectSchema: z.ZodType<Prisma.RecipeLaborCostSelect> = z.object({
  id: z.boolean().optional(),
  recipeId: z.boolean().optional(),
  prepTime: z.boolean().optional(),
  cookTime: z.boolean().optional(),
  laborRate: z.boolean().optional(),
  totalLaborCost: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  recipe: z.union([z.boolean(),z.lazy(() => RecipeArgsSchema)]).optional(),
}).strict()

// SALES TRANSACTIONS
//------------------------------------------------------

export const SalesTransactionsIncludeSchema: z.ZodType<Prisma.SalesTransactionsInclude> = z.object({
  restaurant: z.union([z.boolean(),z.lazy(() => RestaurantArgsSchema)]).optional(),
  menuItem: z.union([z.boolean(),z.lazy(() => MenuItemArgsSchema)]).optional(),
}).strict()

export const SalesTransactionsArgsSchema: z.ZodType<Prisma.SalesTransactionsDefaultArgs> = z.object({
  select: z.lazy(() => SalesTransactionsSelectSchema).optional(),
  include: z.lazy(() => SalesTransactionsIncludeSchema).optional(),
}).strict();

export const SalesTransactionsSelectSchema: z.ZodType<Prisma.SalesTransactionsSelect> = z.object({
  id: z.boolean().optional(),
  posTransactionID: z.boolean().optional(),
  restaurantId: z.boolean().optional(),
  menuItemId: z.boolean().optional(),
  price: z.boolean().optional(),
  total: z.boolean().optional(),
  transactionDate: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  restaurant: z.union([z.boolean(),z.lazy(() => RestaurantArgsSchema)]).optional(),
  menuItem: z.union([z.boolean(),z.lazy(() => MenuItemArgsSchema)]).optional(),
}).strict()

// MENU CATEGORY
//------------------------------------------------------

export const MenuCategoryIncludeSchema: z.ZodType<Prisma.MenuCategoryInclude> = z.object({
  menu: z.union([z.boolean(),z.lazy(() => MenuArgsSchema)]).optional(),
  menuItems: z.union([z.boolean(),z.lazy(() => MenuItemFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => MenuCategoryCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const MenuCategoryArgsSchema: z.ZodType<Prisma.MenuCategoryDefaultArgs> = z.object({
  select: z.lazy(() => MenuCategorySelectSchema).optional(),
  include: z.lazy(() => MenuCategoryIncludeSchema).optional(),
}).strict();

export const MenuCategoryCountOutputTypeArgsSchema: z.ZodType<Prisma.MenuCategoryCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => MenuCategoryCountOutputTypeSelectSchema).nullish(),
}).strict();

export const MenuCategoryCountOutputTypeSelectSchema: z.ZodType<Prisma.MenuCategoryCountOutputTypeSelect> = z.object({
  menuItems: z.boolean().optional(),
}).strict();

export const MenuCategorySelectSchema: z.ZodType<Prisma.MenuCategorySelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  displayOrder: z.boolean().optional(),
  menuId: z.boolean().optional(),
  isActive: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  menu: z.union([z.boolean(),z.lazy(() => MenuArgsSchema)]).optional(),
  menuItems: z.union([z.boolean(),z.lazy(() => MenuItemFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => MenuCategoryCountOutputTypeArgsSchema)]).optional(),
}).strict()

// RECIPE VERSION
//------------------------------------------------------

export const RecipeVersionIncludeSchema: z.ZodType<Prisma.RecipeVersionInclude> = z.object({
  recipe: z.union([z.boolean(),z.lazy(() => RecipeArgsSchema)]).optional(),
  ingredients: z.union([z.boolean(),z.lazy(() => RecipeIngredientFindManyArgsSchema)]).optional(),
  instructions: z.union([z.boolean(),z.lazy(() => RecipeInstructionFindManyArgsSchema)]).optional(),
  createdBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  approvedBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => RecipeVersionCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const RecipeVersionArgsSchema: z.ZodType<Prisma.RecipeVersionDefaultArgs> = z.object({
  select: z.lazy(() => RecipeVersionSelectSchema).optional(),
  include: z.lazy(() => RecipeVersionIncludeSchema).optional(),
}).strict();

export const RecipeVersionCountOutputTypeArgsSchema: z.ZodType<Prisma.RecipeVersionCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => RecipeVersionCountOutputTypeSelectSchema).nullish(),
}).strict();

export const RecipeVersionCountOutputTypeSelectSchema: z.ZodType<Prisma.RecipeVersionCountOutputTypeSelect> = z.object({
  ingredients: z.boolean().optional(),
  instructions: z.boolean().optional(),
}).strict();

export const RecipeVersionSelectSchema: z.ZodType<Prisma.RecipeVersionSelect> = z.object({
  id: z.boolean().optional(),
  recipeId: z.boolean().optional(),
  versionNumber: z.boolean().optional(),
  description: z.boolean().optional(),
  changes: z.boolean().optional(),
  isActive: z.boolean().optional(),
  createdById: z.boolean().optional(),
  approvedById: z.boolean().optional(),
  approvedAt: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  recipe: z.union([z.boolean(),z.lazy(() => RecipeArgsSchema)]).optional(),
  ingredients: z.union([z.boolean(),z.lazy(() => RecipeIngredientFindManyArgsSchema)]).optional(),
  instructions: z.union([z.boolean(),z.lazy(() => RecipeInstructionFindManyArgsSchema)]).optional(),
  createdBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  approvedBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => RecipeVersionCountOutputTypeArgsSchema)]).optional(),
}).strict()

// EQUIPMENT
//------------------------------------------------------

export const EquipmentIncludeSchema: z.ZodType<Prisma.EquipmentInclude> = z.object({
  restaurant: z.union([z.boolean(),z.lazy(() => RestaurantArgsSchema)]).optional(),
  recipes: z.union([z.boolean(),z.lazy(() => RecipeEquipmentFindManyArgsSchema)]).optional(),
  maintenanceLogs: z.union([z.boolean(),z.lazy(() => MaintenanceLogFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => EquipmentCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const EquipmentArgsSchema: z.ZodType<Prisma.EquipmentDefaultArgs> = z.object({
  select: z.lazy(() => EquipmentSelectSchema).optional(),
  include: z.lazy(() => EquipmentIncludeSchema).optional(),
}).strict();

export const EquipmentCountOutputTypeArgsSchema: z.ZodType<Prisma.EquipmentCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => EquipmentCountOutputTypeSelectSchema).nullish(),
}).strict();

export const EquipmentCountOutputTypeSelectSchema: z.ZodType<Prisma.EquipmentCountOutputTypeSelect> = z.object({
  recipes: z.boolean().optional(),
  maintenanceLogs: z.boolean().optional(),
}).strict();

export const EquipmentSelectSchema: z.ZodType<Prisma.EquipmentSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  model: z.boolean().optional(),
  serialNumber: z.boolean().optional(),
  purchaseDate: z.boolean().optional(),
  lastMaintenance: z.boolean().optional(),
  nextMaintenance: z.boolean().optional(),
  status: z.boolean().optional(),
  location: z.boolean().optional(),
  restaurantId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  restaurant: z.union([z.boolean(),z.lazy(() => RestaurantArgsSchema)]).optional(),
  recipes: z.union([z.boolean(),z.lazy(() => RecipeEquipmentFindManyArgsSchema)]).optional(),
  maintenanceLogs: z.union([z.boolean(),z.lazy(() => MaintenanceLogFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => EquipmentCountOutputTypeArgsSchema)]).optional(),
}).strict()

// RECIPE EQUIPMENT
//------------------------------------------------------

export const RecipeEquipmentIncludeSchema: z.ZodType<Prisma.RecipeEquipmentInclude> = z.object({
  recipe: z.union([z.boolean(),z.lazy(() => RecipeArgsSchema)]).optional(),
  equipment: z.union([z.boolean(),z.lazy(() => EquipmentArgsSchema)]).optional(),
  RecipeInstruction: z.union([z.boolean(),z.lazy(() => RecipeInstructionArgsSchema)]).optional(),
}).strict()

export const RecipeEquipmentArgsSchema: z.ZodType<Prisma.RecipeEquipmentDefaultArgs> = z.object({
  select: z.lazy(() => RecipeEquipmentSelectSchema).optional(),
  include: z.lazy(() => RecipeEquipmentIncludeSchema).optional(),
}).strict();

export const RecipeEquipmentSelectSchema: z.ZodType<Prisma.RecipeEquipmentSelect> = z.object({
  id: z.boolean().optional(),
  recipeId: z.boolean().optional(),
  equipmentId: z.boolean().optional(),
  notes: z.boolean().optional(),
  recipeInstructionId: z.boolean().optional(),
  recipe: z.union([z.boolean(),z.lazy(() => RecipeArgsSchema)]).optional(),
  equipment: z.union([z.boolean(),z.lazy(() => EquipmentArgsSchema)]).optional(),
  RecipeInstruction: z.union([z.boolean(),z.lazy(() => RecipeInstructionArgsSchema)]).optional(),
}).strict()

// MAINTENANCE LOG
//------------------------------------------------------

export const MaintenanceLogIncludeSchema: z.ZodType<Prisma.MaintenanceLogInclude> = z.object({
  equipment: z.union([z.boolean(),z.lazy(() => EquipmentArgsSchema)]).optional(),
}).strict()

export const MaintenanceLogArgsSchema: z.ZodType<Prisma.MaintenanceLogDefaultArgs> = z.object({
  select: z.lazy(() => MaintenanceLogSelectSchema).optional(),
  include: z.lazy(() => MaintenanceLogIncludeSchema).optional(),
}).strict();

export const MaintenanceLogSelectSchema: z.ZodType<Prisma.MaintenanceLogSelect> = z.object({
  id: z.boolean().optional(),
  equipmentId: z.boolean().optional(),
  date: z.boolean().optional(),
  type: z.boolean().optional(),
  description: z.boolean().optional(),
  cost: z.boolean().optional(),
  performedBy: z.boolean().optional(),
  notes: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  equipment: z.union([z.boolean(),z.lazy(() => EquipmentArgsSchema)]).optional(),
}).strict()

// QUALITY CHECKLIST
//------------------------------------------------------

export const QualityChecklistIncludeSchema: z.ZodType<Prisma.QualityChecklistInclude> = z.object({
  restaurant: z.union([z.boolean(),z.lazy(() => RestaurantArgsSchema)]).optional(),
  items: z.union([z.boolean(),z.lazy(() => ChecklistItemFindManyArgsSchema)]).optional(),
  completions: z.union([z.boolean(),z.lazy(() => ChecklistCompleteFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => QualityChecklistCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const QualityChecklistArgsSchema: z.ZodType<Prisma.QualityChecklistDefaultArgs> = z.object({
  select: z.lazy(() => QualityChecklistSelectSchema).optional(),
  include: z.lazy(() => QualityChecklistIncludeSchema).optional(),
}).strict();

export const QualityChecklistCountOutputTypeArgsSchema: z.ZodType<Prisma.QualityChecklistCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => QualityChecklistCountOutputTypeSelectSchema).nullish(),
}).strict();

export const QualityChecklistCountOutputTypeSelectSchema: z.ZodType<Prisma.QualityChecklistCountOutputTypeSelect> = z.object({
  items: z.boolean().optional(),
  completions: z.boolean().optional(),
}).strict();

export const QualityChecklistSelectSchema: z.ZodType<Prisma.QualityChecklistSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  restaurantId: z.boolean().optional(),
  frequency: z.boolean().optional(),
  isActive: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  restaurant: z.union([z.boolean(),z.lazy(() => RestaurantArgsSchema)]).optional(),
  items: z.union([z.boolean(),z.lazy(() => ChecklistItemFindManyArgsSchema)]).optional(),
  completions: z.union([z.boolean(),z.lazy(() => ChecklistCompleteFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => QualityChecklistCountOutputTypeArgsSchema)]).optional(),
}).strict()

// CHECKLIST ITEM
//------------------------------------------------------

export const ChecklistItemIncludeSchema: z.ZodType<Prisma.ChecklistItemInclude> = z.object({
  checklist: z.union([z.boolean(),z.lazy(() => QualityChecklistArgsSchema)]).optional(),
  completions: z.union([z.boolean(),z.lazy(() => ChecklistItemCompleteFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ChecklistItemCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const ChecklistItemArgsSchema: z.ZodType<Prisma.ChecklistItemDefaultArgs> = z.object({
  select: z.lazy(() => ChecklistItemSelectSchema).optional(),
  include: z.lazy(() => ChecklistItemIncludeSchema).optional(),
}).strict();

export const ChecklistItemCountOutputTypeArgsSchema: z.ZodType<Prisma.ChecklistItemCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => ChecklistItemCountOutputTypeSelectSchema).nullish(),
}).strict();

export const ChecklistItemCountOutputTypeSelectSchema: z.ZodType<Prisma.ChecklistItemCountOutputTypeSelect> = z.object({
  completions: z.boolean().optional(),
}).strict();

export const ChecklistItemSelectSchema: z.ZodType<Prisma.ChecklistItemSelect> = z.object({
  id: z.boolean().optional(),
  checklistId: z.boolean().optional(),
  description: z.boolean().optional(),
  order: z.boolean().optional(),
  type: z.boolean().optional(),
  requiredPhotos: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  checklist: z.union([z.boolean(),z.lazy(() => QualityChecklistArgsSchema)]).optional(),
  completions: z.union([z.boolean(),z.lazy(() => ChecklistItemCompleteFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ChecklistItemCountOutputTypeArgsSchema)]).optional(),
}).strict()

// CHECKLIST COMPLETE
//------------------------------------------------------

export const ChecklistCompleteIncludeSchema: z.ZodType<Prisma.ChecklistCompleteInclude> = z.object({
  checklist: z.union([z.boolean(),z.lazy(() => QualityChecklistArgsSchema)]).optional(),
  completedBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  items: z.union([z.boolean(),z.lazy(() => ChecklistItemCompleteFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ChecklistCompleteCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const ChecklistCompleteArgsSchema: z.ZodType<Prisma.ChecklistCompleteDefaultArgs> = z.object({
  select: z.lazy(() => ChecklistCompleteSelectSchema).optional(),
  include: z.lazy(() => ChecklistCompleteIncludeSchema).optional(),
}).strict();

export const ChecklistCompleteCountOutputTypeArgsSchema: z.ZodType<Prisma.ChecklistCompleteCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => ChecklistCompleteCountOutputTypeSelectSchema).nullish(),
}).strict();

export const ChecklistCompleteCountOutputTypeSelectSchema: z.ZodType<Prisma.ChecklistCompleteCountOutputTypeSelect> = z.object({
  items: z.boolean().optional(),
}).strict();

export const ChecklistCompleteSelectSchema: z.ZodType<Prisma.ChecklistCompleteSelect> = z.object({
  id: z.boolean().optional(),
  checklistId: z.boolean().optional(),
  completedById: z.boolean().optional(),
  date: z.boolean().optional(),
  notes: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  checklist: z.union([z.boolean(),z.lazy(() => QualityChecklistArgsSchema)]).optional(),
  completedBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  items: z.union([z.boolean(),z.lazy(() => ChecklistItemCompleteFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ChecklistCompleteCountOutputTypeArgsSchema)]).optional(),
}).strict()

// CHECKLIST ITEM COMPLETE
//------------------------------------------------------

export const ChecklistItemCompleteIncludeSchema: z.ZodType<Prisma.ChecklistItemCompleteInclude> = z.object({
  checklistComplete: z.union([z.boolean(),z.lazy(() => ChecklistCompleteArgsSchema)]).optional(),
  checklistItem: z.union([z.boolean(),z.lazy(() => ChecklistItemArgsSchema)]).optional(),
}).strict()

export const ChecklistItemCompleteArgsSchema: z.ZodType<Prisma.ChecklistItemCompleteDefaultArgs> = z.object({
  select: z.lazy(() => ChecklistItemCompleteSelectSchema).optional(),
  include: z.lazy(() => ChecklistItemCompleteIncludeSchema).optional(),
}).strict();

export const ChecklistItemCompleteSelectSchema: z.ZodType<Prisma.ChecklistItemCompleteSelect> = z.object({
  id: z.boolean().optional(),
  checklistCompleteId: z.boolean().optional(),
  checklistItemId: z.boolean().optional(),
  status: z.boolean().optional(),
  notes: z.boolean().optional(),
  photoUrls: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  checklistComplete: z.union([z.boolean(),z.lazy(() => ChecklistCompleteArgsSchema)]).optional(),
  checklistItem: z.union([z.boolean(),z.lazy(() => ChecklistItemArgsSchema)]).optional(),
}).strict()

// SUPPLIER PRICE HISTORY
//------------------------------------------------------

export const SupplierPriceHistoryIncludeSchema: z.ZodType<Prisma.SupplierPriceHistoryInclude> = z.object({
  vendor: z.union([z.boolean(),z.lazy(() => VendorArgsSchema)]).optional(),
  ingredient: z.union([z.boolean(),z.lazy(() => IngredientArgsSchema)]).optional(),
}).strict()

export const SupplierPriceHistoryArgsSchema: z.ZodType<Prisma.SupplierPriceHistoryDefaultArgs> = z.object({
  select: z.lazy(() => SupplierPriceHistorySelectSchema).optional(),
  include: z.lazy(() => SupplierPriceHistoryIncludeSchema).optional(),
}).strict();

export const SupplierPriceHistorySelectSchema: z.ZodType<Prisma.SupplierPriceHistorySelect> = z.object({
  id: z.boolean().optional(),
  vendorId: z.boolean().optional(),
  ingredientId: z.boolean().optional(),
  price: z.boolean().optional(),
  unit: z.boolean().optional(),
  startDate: z.boolean().optional(),
  endDate: z.boolean().optional(),
  notes: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  vendor: z.union([z.boolean(),z.lazy(() => VendorArgsSchema)]).optional(),
  ingredient: z.union([z.boolean(),z.lazy(() => IngredientArgsSchema)]).optional(),
}).strict()

// CUSTOMER FEEDBACK
//------------------------------------------------------

export const CustomerFeedbackIncludeSchema: z.ZodType<Prisma.CustomerFeedbackInclude> = z.object({
  restaurant: z.union([z.boolean(),z.lazy(() => RestaurantArgsSchema)]).optional(),
  menuItem: z.union([z.boolean(),z.lazy(() => MenuItemArgsSchema)]).optional(),
  respondedBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const CustomerFeedbackArgsSchema: z.ZodType<Prisma.CustomerFeedbackDefaultArgs> = z.object({
  select: z.lazy(() => CustomerFeedbackSelectSchema).optional(),
  include: z.lazy(() => CustomerFeedbackIncludeSchema).optional(),
}).strict();

export const CustomerFeedbackSelectSchema: z.ZodType<Prisma.CustomerFeedbackSelect> = z.object({
  id: z.boolean().optional(),
  restaurantId: z.boolean().optional(),
  menuItemId: z.boolean().optional(),
  rating: z.boolean().optional(),
  comment: z.boolean().optional(),
  source: z.boolean().optional(),
  tags: z.boolean().optional(),
  status: z.boolean().optional(),
  responseText: z.boolean().optional(),
  respondedAt: z.boolean().optional(),
  respondedById: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  restaurant: z.union([z.boolean(),z.lazy(() => RestaurantArgsSchema)]).optional(),
  menuItem: z.union([z.boolean(),z.lazy(() => MenuItemArgsSchema)]).optional(),
  respondedBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// DIETARY RESTRICTION
//------------------------------------------------------

export const DietaryRestrictionIncludeSchema: z.ZodType<Prisma.DietaryRestrictionInclude> = z.object({
  menuItems: z.union([z.boolean(),z.lazy(() => MenuItemFindManyArgsSchema)]).optional(),
  recipes: z.union([z.boolean(),z.lazy(() => RecipeFindManyArgsSchema)]).optional(),
  ingredients: z.union([z.boolean(),z.lazy(() => IngredientFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => DietaryRestrictionCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const DietaryRestrictionArgsSchema: z.ZodType<Prisma.DietaryRestrictionDefaultArgs> = z.object({
  select: z.lazy(() => DietaryRestrictionSelectSchema).optional(),
  include: z.lazy(() => DietaryRestrictionIncludeSchema).optional(),
}).strict();

export const DietaryRestrictionCountOutputTypeArgsSchema: z.ZodType<Prisma.DietaryRestrictionCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => DietaryRestrictionCountOutputTypeSelectSchema).nullish(),
}).strict();

export const DietaryRestrictionCountOutputTypeSelectSchema: z.ZodType<Prisma.DietaryRestrictionCountOutputTypeSelect> = z.object({
  menuItems: z.boolean().optional(),
  recipes: z.boolean().optional(),
  ingredients: z.boolean().optional(),
}).strict();

export const DietaryRestrictionSelectSchema: z.ZodType<Prisma.DietaryRestrictionSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  icon: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  menuItems: z.union([z.boolean(),z.lazy(() => MenuItemFindManyArgsSchema)]).optional(),
  recipes: z.union([z.boolean(),z.lazy(() => RecipeFindManyArgsSchema)]).optional(),
  ingredients: z.union([z.boolean(),z.lazy(() => IngredientFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => DietaryRestrictionCountOutputTypeArgsSchema)]).optional(),
}).strict()

// RECIPE TAG
//------------------------------------------------------

export const RecipeTagIncludeSchema: z.ZodType<Prisma.RecipeTagInclude> = z.object({
  recipes: z.union([z.boolean(),z.lazy(() => RecipeFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => RecipeTagCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const RecipeTagArgsSchema: z.ZodType<Prisma.RecipeTagDefaultArgs> = z.object({
  select: z.lazy(() => RecipeTagSelectSchema).optional(),
  include: z.lazy(() => RecipeTagIncludeSchema).optional(),
}).strict();

export const RecipeTagCountOutputTypeArgsSchema: z.ZodType<Prisma.RecipeTagCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => RecipeTagCountOutputTypeSelectSchema).nullish(),
}).strict();

export const RecipeTagCountOutputTypeSelectSchema: z.ZodType<Prisma.RecipeTagCountOutputTypeSelect> = z.object({
  recipes: z.boolean().optional(),
}).strict();

export const RecipeTagSelectSchema: z.ZodType<Prisma.RecipeTagSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  recipes: z.union([z.boolean(),z.lazy(() => RecipeFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => RecipeTagCountOutputTypeArgsSchema)]).optional(),
}).strict()

// LEFTOVER ITEM
//------------------------------------------------------

export const LeftoverItemIncludeSchema: z.ZodType<Prisma.LeftoverItemInclude> = z.object({
  restaurant: z.union([z.boolean(),z.lazy(() => RestaurantArgsSchema)]).optional(),
  menuItem: z.union([z.boolean(),z.lazy(() => MenuItemArgsSchema)]).optional(),
  recordedBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const LeftoverItemArgsSchema: z.ZodType<Prisma.LeftoverItemDefaultArgs> = z.object({
  select: z.lazy(() => LeftoverItemSelectSchema).optional(),
  include: z.lazy(() => LeftoverItemIncludeSchema).optional(),
}).strict();

export const LeftoverItemSelectSchema: z.ZodType<Prisma.LeftoverItemSelect> = z.object({
  id: z.boolean().optional(),
  restaurantId: z.boolean().optional(),
  date: z.boolean().optional(),
  menuItemId: z.boolean().optional(),
  quantity: z.boolean().optional(),
  reason: z.boolean().optional(),
  recordedById: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  restaurant: z.union([z.boolean(),z.lazy(() => RestaurantArgsSchema)]).optional(),
  menuItem: z.union([z.boolean(),z.lazy(() => MenuItemArgsSchema)]).optional(),
  recordedBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// WASTE RECORD
//------------------------------------------------------

export const WasteRecordIncludeSchema: z.ZodType<Prisma.WasteRecordInclude> = z.object({
  restaurant: z.union([z.boolean(),z.lazy(() => RestaurantArgsSchema)]).optional(),
  ingrediente: z.union([z.boolean(),z.lazy(() => IngredientArgsSchema)]).optional(),
  recordedBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const WasteRecordArgsSchema: z.ZodType<Prisma.WasteRecordDefaultArgs> = z.object({
  select: z.lazy(() => WasteRecordSelectSchema).optional(),
  include: z.lazy(() => WasteRecordIncludeSchema).optional(),
}).strict();

export const WasteRecordSelectSchema: z.ZodType<Prisma.WasteRecordSelect> = z.object({
  id: z.boolean().optional(),
  restaurantId: z.boolean().optional(),
  date: z.boolean().optional(),
  ingredientId: z.boolean().optional(),
  quantity: z.boolean().optional(),
  unit: z.boolean().optional(),
  reason: z.boolean().optional(),
  recordedById: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  restaurant: z.union([z.boolean(),z.lazy(() => RestaurantArgsSchema)]).optional(),
  ingrediente: z.union([z.boolean(),z.lazy(() => IngredientArgsSchema)]).optional(),
  recordedBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// PRODUCTION PLAN
//------------------------------------------------------

export const ProductionPlanIncludeSchema: z.ZodType<Prisma.ProductionPlanInclude> = z.object({
  restaurant: z.union([z.boolean(),z.lazy(() => RestaurantArgsSchema)]).optional(),
  createdBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  items: z.union([z.boolean(),z.lazy(() => ProductionPlanItemFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ProductionPlanCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const ProductionPlanArgsSchema: z.ZodType<Prisma.ProductionPlanDefaultArgs> = z.object({
  select: z.lazy(() => ProductionPlanSelectSchema).optional(),
  include: z.lazy(() => ProductionPlanIncludeSchema).optional(),
}).strict();

export const ProductionPlanCountOutputTypeArgsSchema: z.ZodType<Prisma.ProductionPlanCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => ProductionPlanCountOutputTypeSelectSchema).nullish(),
}).strict();

export const ProductionPlanCountOutputTypeSelectSchema: z.ZodType<Prisma.ProductionPlanCountOutputTypeSelect> = z.object({
  items: z.boolean().optional(),
}).strict();

export const ProductionPlanSelectSchema: z.ZodType<Prisma.ProductionPlanSelect> = z.object({
  id: z.boolean().optional(),
  restaurantId: z.boolean().optional(),
  date: z.boolean().optional(),
  status: z.boolean().optional(),
  createdById: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  restaurant: z.union([z.boolean(),z.lazy(() => RestaurantArgsSchema)]).optional(),
  createdBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  items: z.union([z.boolean(),z.lazy(() => ProductionPlanItemFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ProductionPlanCountOutputTypeArgsSchema)]).optional(),
}).strict()

// PRODUCTION PLAN ITEM
//------------------------------------------------------

export const ProductionPlanItemIncludeSchema: z.ZodType<Prisma.ProductionPlanItemInclude> = z.object({
  productionPlan: z.union([z.boolean(),z.lazy(() => ProductionPlanArgsSchema)]).optional(),
  recipe: z.union([z.boolean(),z.lazy(() => RecipeArgsSchema)]).optional(),
  assignedTo: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const ProductionPlanItemArgsSchema: z.ZodType<Prisma.ProductionPlanItemDefaultArgs> = z.object({
  select: z.lazy(() => ProductionPlanItemSelectSchema).optional(),
  include: z.lazy(() => ProductionPlanItemIncludeSchema).optional(),
}).strict();

export const ProductionPlanItemSelectSchema: z.ZodType<Prisma.ProductionPlanItemSelect> = z.object({
  id: z.boolean().optional(),
  productionPlanId: z.boolean().optional(),
  recipeId: z.boolean().optional(),
  quantity: z.boolean().optional(),
  unit: z.boolean().optional(),
  assignedToId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  productionPlan: z.union([z.boolean(),z.lazy(() => ProductionPlanArgsSchema)]).optional(),
  recipe: z.union([z.boolean(),z.lazy(() => RecipeArgsSchema)]).optional(),
  assignedTo: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// SHIFT TASK
//------------------------------------------------------

export const ShiftTaskIncludeSchema: z.ZodType<Prisma.ShiftTaskInclude> = z.object({
  shift: z.union([z.boolean(),z.lazy(() => ShiftArgsSchema)]).optional(),
}).strict()

export const ShiftTaskArgsSchema: z.ZodType<Prisma.ShiftTaskDefaultArgs> = z.object({
  select: z.lazy(() => ShiftTaskSelectSchema).optional(),
  include: z.lazy(() => ShiftTaskIncludeSchema).optional(),
}).strict();

export const ShiftTaskSelectSchema: z.ZodType<Prisma.ShiftTaskSelect> = z.object({
  id: z.boolean().optional(),
  shiftId: z.boolean().optional(),
  taskType: z.boolean().optional(),
  startTime: z.boolean().optional(),
  endTime: z.boolean().optional(),
  duration: z.boolean().optional(),
  notes: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  shift: z.union([z.boolean(),z.lazy(() => ShiftArgsSchema)]).optional(),
}).strict()

// AVAILABILITY
//------------------------------------------------------

export const AvailabilityIncludeSchema: z.ZodType<Prisma.AvailabilityInclude> = z.object({
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const AvailabilityArgsSchema: z.ZodType<Prisma.AvailabilityDefaultArgs> = z.object({
  select: z.lazy(() => AvailabilitySelectSchema).optional(),
  include: z.lazy(() => AvailabilityIncludeSchema).optional(),
}).strict();

export const AvailabilitySelectSchema: z.ZodType<Prisma.AvailabilitySelect> = z.object({
  id: z.boolean().optional(),
  userId: z.boolean().optional(),
  dayOfWeek: z.boolean().optional(),
  startTime: z.boolean().optional(),
  endTime: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// SCHEDULING CONSTRAINT
//------------------------------------------------------

export const SchedulingConstraintIncludeSchema: z.ZodType<Prisma.SchedulingConstraintInclude> = z.object({
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const SchedulingConstraintArgsSchema: z.ZodType<Prisma.SchedulingConstraintDefaultArgs> = z.object({
  select: z.lazy(() => SchedulingConstraintSelectSchema).optional(),
  include: z.lazy(() => SchedulingConstraintIncludeSchema).optional(),
}).strict();

export const SchedulingConstraintSelectSchema: z.ZodType<Prisma.SchedulingConstraintSelect> = z.object({
  id: z.boolean().optional(),
  userId: z.boolean().optional(),
  date: z.boolean().optional(),
  constraintsType: z.boolean().optional(),
  startTime: z.boolean().optional(),
  endTime: z.boolean().optional(),
  notes: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// INVENTORY WITHDRAWAL
//------------------------------------------------------

export const InventoryWithdrawalIncludeSchema: z.ZodType<Prisma.InventoryWithdrawalInclude> = z.object({
  inventoryItem: z.union([z.boolean(),z.lazy(() => InventoryItemArgsSchema)]).optional(),
  recipe: z.union([z.boolean(),z.lazy(() => RecipeArgsSchema)]).optional(),
  createdBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const InventoryWithdrawalArgsSchema: z.ZodType<Prisma.InventoryWithdrawalDefaultArgs> = z.object({
  select: z.lazy(() => InventoryWithdrawalSelectSchema).optional(),
  include: z.lazy(() => InventoryWithdrawalIncludeSchema).optional(),
}).strict();

export const InventoryWithdrawalSelectSchema: z.ZodType<Prisma.InventoryWithdrawalSelect> = z.object({
  id: z.boolean().optional(),
  inventoryItemId: z.boolean().optional(),
  dateTime: z.boolean().optional(),
  quantity: z.boolean().optional(),
  unit: z.boolean().optional(),
  recipeId: z.boolean().optional(),
  createdById: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  inventoryItem: z.union([z.boolean(),z.lazy(() => InventoryItemArgsSchema)]).optional(),
  recipe: z.union([z.boolean(),z.lazy(() => RecipeArgsSchema)]).optional(),
  createdBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// ALLERGEN
//------------------------------------------------------

export const AllergenIncludeSchema: z.ZodType<Prisma.AllergenInclude> = z.object({
  ingredients: z.union([z.boolean(),z.lazy(() => IngredientAllergenFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => AllergenCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const AllergenArgsSchema: z.ZodType<Prisma.AllergenDefaultArgs> = z.object({
  select: z.lazy(() => AllergenSelectSchema).optional(),
  include: z.lazy(() => AllergenIncludeSchema).optional(),
}).strict();

export const AllergenCountOutputTypeArgsSchema: z.ZodType<Prisma.AllergenCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => AllergenCountOutputTypeSelectSchema).nullish(),
}).strict();

export const AllergenCountOutputTypeSelectSchema: z.ZodType<Prisma.AllergenCountOutputTypeSelect> = z.object({
  ingredients: z.boolean().optional(),
}).strict();

export const AllergenSelectSchema: z.ZodType<Prisma.AllergenSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  ingredients: z.union([z.boolean(),z.lazy(() => IngredientAllergenFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => AllergenCountOutputTypeArgsSchema)]).optional(),
}).strict()

// INGREDIENT ALLERGEN
//------------------------------------------------------

export const IngredientAllergenIncludeSchema: z.ZodType<Prisma.IngredientAllergenInclude> = z.object({
  ingredient: z.union([z.boolean(),z.lazy(() => IngredientArgsSchema)]).optional(),
  allergen: z.union([z.boolean(),z.lazy(() => AllergenArgsSchema)]).optional(),
}).strict()

export const IngredientAllergenArgsSchema: z.ZodType<Prisma.IngredientAllergenDefaultArgs> = z.object({
  select: z.lazy(() => IngredientAllergenSelectSchema).optional(),
  include: z.lazy(() => IngredientAllergenIncludeSchema).optional(),
}).strict();

export const IngredientAllergenSelectSchema: z.ZodType<Prisma.IngredientAllergenSelect> = z.object({
  id: z.boolean().optional(),
  ingredientId: z.boolean().optional(),
  allergenId: z.boolean().optional(),
  ingredient: z.union([z.boolean(),z.lazy(() => IngredientArgsSchema)]).optional(),
  allergen: z.union([z.boolean(),z.lazy(() => AllergenArgsSchema)]).optional(),
}).strict()

// NUTRITIONAL RECOMMENDATION
//------------------------------------------------------

export const NutritionalRecommendationIncludeSchema: z.ZodType<Prisma.NutritionalRecommendationInclude> = z.object({
  menuItem: z.union([z.boolean(),z.lazy(() => MenuItemArgsSchema)]).optional(),
}).strict()

export const NutritionalRecommendationArgsSchema: z.ZodType<Prisma.NutritionalRecommendationDefaultArgs> = z.object({
  select: z.lazy(() => NutritionalRecommendationSelectSchema).optional(),
  include: z.lazy(() => NutritionalRecommendationIncludeSchema).optional(),
}).strict();

export const NutritionalRecommendationSelectSchema: z.ZodType<Prisma.NutritionalRecommendationSelect> = z.object({
  id: z.boolean().optional(),
  menuItemId: z.boolean().optional(),
  recommendation: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  menuItem: z.union([z.boolean(),z.lazy(() => MenuItemArgsSchema)]).optional(),
}).strict()

// EARLY ACCESS
//------------------------------------------------------

export const EarlyAccessSelectSchema: z.ZodType<Prisma.EarlyAccessSelect> = z.object({
  id: z.boolean().optional(),
  email: z.boolean().optional(),
  isEmailSent: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
}).strict()

// ORGANIZATION
//------------------------------------------------------

export const OrganizationIncludeSchema: z.ZodType<Prisma.OrganizationInclude> = z.object({
  restaurants: z.union([z.boolean(),z.lazy(() => RestaurantFindManyArgsSchema)]).optional(),
  users: z.union([z.boolean(),z.lazy(() => UserFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => OrganizationCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const OrganizationArgsSchema: z.ZodType<Prisma.OrganizationDefaultArgs> = z.object({
  select: z.lazy(() => OrganizationSelectSchema).optional(),
  include: z.lazy(() => OrganizationIncludeSchema).optional(),
}).strict();

export const OrganizationCountOutputTypeArgsSchema: z.ZodType<Prisma.OrganizationCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => OrganizationCountOutputTypeSelectSchema).nullish(),
}).strict();

export const OrganizationCountOutputTypeSelectSchema: z.ZodType<Prisma.OrganizationCountOutputTypeSelect> = z.object({
  restaurants: z.boolean().optional(),
  users: z.boolean().optional(),
}).strict();

export const OrganizationSelectSchema: z.ZodType<Prisma.OrganizationSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  imageUrl: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  restaurants: z.union([z.boolean(),z.lazy(() => RestaurantFindManyArgsSchema)]).optional(),
  users: z.union([z.boolean(),z.lazy(() => UserFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => OrganizationCountOutputTypeArgsSchema)]).optional(),
}).strict()

// INVENTORY
//------------------------------------------------------

export const InventoryIncludeSchema: z.ZodType<Prisma.InventoryInclude> = z.object({
  restaurant: z.union([z.boolean(),z.lazy(() => RestaurantArgsSchema)]).optional(),
  items: z.union([z.boolean(),z.lazy(() => InventoryItemFindManyArgsSchema)]).optional(),
  transactions: z.union([z.boolean(),z.lazy(() => InventoryTransactionFindManyArgsSchema)]).optional(),
  stockCounts: z.union([z.boolean(),z.lazy(() => StockCountFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => InventoryCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const InventoryArgsSchema: z.ZodType<Prisma.InventoryDefaultArgs> = z.object({
  select: z.lazy(() => InventorySelectSchema).optional(),
  include: z.lazy(() => InventoryIncludeSchema).optional(),
}).strict();

export const InventoryCountOutputTypeArgsSchema: z.ZodType<Prisma.InventoryCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => InventoryCountOutputTypeSelectSchema).nullish(),
}).strict();

export const InventoryCountOutputTypeSelectSchema: z.ZodType<Prisma.InventoryCountOutputTypeSelect> = z.object({
  items: z.boolean().optional(),
  transactions: z.boolean().optional(),
  stockCounts: z.boolean().optional(),
}).strict();

export const InventorySelectSchema: z.ZodType<Prisma.InventorySelect> = z.object({
  id: z.boolean().optional(),
  restaurantId: z.boolean().optional(),
  name: z.boolean().optional(),
  type: z.boolean().optional(),
  isActive: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  restaurant: z.union([z.boolean(),z.lazy(() => RestaurantArgsSchema)]).optional(),
  items: z.union([z.boolean(),z.lazy(() => InventoryItemFindManyArgsSchema)]).optional(),
  transactions: z.union([z.boolean(),z.lazy(() => InventoryTransactionFindManyArgsSchema)]).optional(),
  stockCounts: z.union([z.boolean(),z.lazy(() => StockCountFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => InventoryCountOutputTypeArgsSchema)]).optional(),
}).strict()

// RESTAURANT
//------------------------------------------------------

export const RestaurantIncludeSchema: z.ZodType<Prisma.RestaurantInclude> = z.object({
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  users: z.union([z.boolean(),z.lazy(() => UserFindManyArgsSchema)]).optional(),
  cookbooks: z.union([z.boolean(),z.lazy(() => CookBookFindManyArgsSchema)]).optional(),
  inventory: z.union([z.boolean(),z.lazy(() => InventoryArgsSchema)]).optional(),
  orders: z.union([z.boolean(),z.lazy(() => OrderFindManyArgsSchema)]).optional(),
  recipes: z.union([z.boolean(),z.lazy(() => RecipeFindManyArgsSchema)]).optional(),
  menus: z.union([z.boolean(),z.lazy(() => MenuFindManyArgsSchema)]).optional(),
  salesTransactions: z.union([z.boolean(),z.lazy(() => SalesTransactionsFindManyArgsSchema)]).optional(),
  leftoverItems: z.union([z.boolean(),z.lazy(() => LeftoverItemFindManyArgsSchema)]).optional(),
  wasteRecords: z.union([z.boolean(),z.lazy(() => WasteRecordFindManyArgsSchema)]).optional(),
  productionPlans: z.union([z.boolean(),z.lazy(() => ProductionPlanFindManyArgsSchema)]).optional(),
  equipments: z.union([z.boolean(),z.lazy(() => EquipmentFindManyArgsSchema)]).optional(),
  qualityChecklists: z.union([z.boolean(),z.lazy(() => QualityChecklistFindManyArgsSchema)]).optional(),
  customerFeedbacks: z.union([z.boolean(),z.lazy(() => CustomerFeedbackFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => RestaurantCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const RestaurantArgsSchema: z.ZodType<Prisma.RestaurantDefaultArgs> = z.object({
  select: z.lazy(() => RestaurantSelectSchema).optional(),
  include: z.lazy(() => RestaurantIncludeSchema).optional(),
}).strict();

export const RestaurantCountOutputTypeArgsSchema: z.ZodType<Prisma.RestaurantCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => RestaurantCountOutputTypeSelectSchema).nullish(),
}).strict();

export const RestaurantCountOutputTypeSelectSchema: z.ZodType<Prisma.RestaurantCountOutputTypeSelect> = z.object({
  users: z.boolean().optional(),
  cookbooks: z.boolean().optional(),
  orders: z.boolean().optional(),
  recipes: z.boolean().optional(),
  menus: z.boolean().optional(),
  salesTransactions: z.boolean().optional(),
  leftoverItems: z.boolean().optional(),
  wasteRecords: z.boolean().optional(),
  productionPlans: z.boolean().optional(),
  equipments: z.boolean().optional(),
  qualityChecklists: z.boolean().optional(),
  customerFeedbacks: z.boolean().optional(),
}).strict();

export const RestaurantSelectSchema: z.ZodType<Prisma.RestaurantSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  imageUrl: z.boolean().optional(),
  address: z.boolean().optional(),
  city: z.boolean().optional(),
  zipCode: z.boolean().optional(),
  state: z.boolean().optional(),
  owner: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  foodCost: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  isDeleted: z.boolean().optional(),
  deleted: z.boolean().optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  users: z.union([z.boolean(),z.lazy(() => UserFindManyArgsSchema)]).optional(),
  cookbooks: z.union([z.boolean(),z.lazy(() => CookBookFindManyArgsSchema)]).optional(),
  inventory: z.union([z.boolean(),z.lazy(() => InventoryArgsSchema)]).optional(),
  orders: z.union([z.boolean(),z.lazy(() => OrderFindManyArgsSchema)]).optional(),
  recipes: z.union([z.boolean(),z.lazy(() => RecipeFindManyArgsSchema)]).optional(),
  menus: z.union([z.boolean(),z.lazy(() => MenuFindManyArgsSchema)]).optional(),
  salesTransactions: z.union([z.boolean(),z.lazy(() => SalesTransactionsFindManyArgsSchema)]).optional(),
  leftoverItems: z.union([z.boolean(),z.lazy(() => LeftoverItemFindManyArgsSchema)]).optional(),
  wasteRecords: z.union([z.boolean(),z.lazy(() => WasteRecordFindManyArgsSchema)]).optional(),
  productionPlans: z.union([z.boolean(),z.lazy(() => ProductionPlanFindManyArgsSchema)]).optional(),
  equipments: z.union([z.boolean(),z.lazy(() => EquipmentFindManyArgsSchema)]).optional(),
  qualityChecklists: z.union([z.boolean(),z.lazy(() => QualityChecklistFindManyArgsSchema)]).optional(),
  customerFeedbacks: z.union([z.boolean(),z.lazy(() => CustomerFeedbackFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => RestaurantCountOutputTypeArgsSchema)]).optional(),
}).strict()

// USER
//------------------------------------------------------

export const UserIncludeSchema: z.ZodType<Prisma.UserInclude> = z.object({
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  restaurant: z.union([z.boolean(),z.lazy(() => RestaurantArgsSchema)]).optional(),
  shifts: z.union([z.boolean(),z.lazy(() => ShiftFindManyArgsSchema)]).optional(),
  prepItems: z.union([z.boolean(),z.lazy(() => PrepItemFindManyArgsSchema)]).optional(),
  inventoryUpdates: z.union([z.boolean(),z.lazy(() => InventoryItemFindManyArgsSchema)]).optional(),
  sessions: z.union([z.boolean(),z.lazy(() => SessionFindManyArgsSchema)]).optional(),
  passwordResets: z.union([z.boolean(),z.lazy(() => PasswordResetFindManyArgsSchema)]).optional(),
  leftoverItems: z.union([z.boolean(),z.lazy(() => LeftoverItemFindManyArgsSchema)]).optional(),
  wasteRecords: z.union([z.boolean(),z.lazy(() => WasteRecordFindManyArgsSchema)]).optional(),
  productionPlans: z.union([z.boolean(),z.lazy(() => ProductionPlanFindManyArgsSchema)]).optional(),
  productionPlanItems: z.union([z.boolean(),z.lazy(() => ProductionPlanItemFindManyArgsSchema)]).optional(),
  availability: z.union([z.boolean(),z.lazy(() => AvailabilityFindManyArgsSchema)]).optional(),
  schedulingConstraints: z.union([z.boolean(),z.lazy(() => SchedulingConstraintFindManyArgsSchema)]).optional(),
  inventoryWithdrawals: z.union([z.boolean(),z.lazy(() => InventoryWithdrawalFindManyArgsSchema)]).optional(),
  checklistCompletes: z.union([z.boolean(),z.lazy(() => ChecklistCompleteFindManyArgsSchema)]).optional(),
  customerFeedbackResponses: z.union([z.boolean(),z.lazy(() => CustomerFeedbackFindManyArgsSchema)]).optional(),
  recipeVersionsCreated: z.union([z.boolean(),z.lazy(() => RecipeVersionFindManyArgsSchema)]).optional(),
  recipeVersionsApproved: z.union([z.boolean(),z.lazy(() => RecipeVersionFindManyArgsSchema)]).optional(),
  InventoryTransactions: z.union([z.boolean(),z.lazy(() => InventoryTransactionFindManyArgsSchema)]).optional(),
  StockCounts: z.union([z.boolean(),z.lazy(() => StockCountFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => UserCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const UserArgsSchema: z.ZodType<Prisma.UserDefaultArgs> = z.object({
  select: z.lazy(() => UserSelectSchema).optional(),
  include: z.lazy(() => UserIncludeSchema).optional(),
}).strict();

export const UserCountOutputTypeArgsSchema: z.ZodType<Prisma.UserCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => UserCountOutputTypeSelectSchema).nullish(),
}).strict();

export const UserCountOutputTypeSelectSchema: z.ZodType<Prisma.UserCountOutputTypeSelect> = z.object({
  shifts: z.boolean().optional(),
  prepItems: z.boolean().optional(),
  inventoryUpdates: z.boolean().optional(),
  sessions: z.boolean().optional(),
  passwordResets: z.boolean().optional(),
  leftoverItems: z.boolean().optional(),
  wasteRecords: z.boolean().optional(),
  productionPlans: z.boolean().optional(),
  productionPlanItems: z.boolean().optional(),
  availability: z.boolean().optional(),
  schedulingConstraints: z.boolean().optional(),
  inventoryWithdrawals: z.boolean().optional(),
  checklistCompletes: z.boolean().optional(),
  customerFeedbackResponses: z.boolean().optional(),
  recipeVersionsCreated: z.boolean().optional(),
  recipeVersionsApproved: z.boolean().optional(),
  InventoryTransactions: z.boolean().optional(),
  StockCounts: z.boolean().optional(),
}).strict();

export const UserSelectSchema: z.ZodType<Prisma.UserSelect> = z.object({
  id: z.boolean().optional(),
  email: z.boolean().optional(),
  sub: z.boolean().optional(),
  passwordHash: z.boolean().optional(),
  firstName: z.boolean().optional(),
  lastName: z.boolean().optional(),
  profileImage: z.boolean().optional(),
  verified: z.boolean().optional(),
  role: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  restaurantId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  restaurant: z.union([z.boolean(),z.lazy(() => RestaurantArgsSchema)]).optional(),
  shifts: z.union([z.boolean(),z.lazy(() => ShiftFindManyArgsSchema)]).optional(),
  prepItems: z.union([z.boolean(),z.lazy(() => PrepItemFindManyArgsSchema)]).optional(),
  inventoryUpdates: z.union([z.boolean(),z.lazy(() => InventoryItemFindManyArgsSchema)]).optional(),
  sessions: z.union([z.boolean(),z.lazy(() => SessionFindManyArgsSchema)]).optional(),
  passwordResets: z.union([z.boolean(),z.lazy(() => PasswordResetFindManyArgsSchema)]).optional(),
  leftoverItems: z.union([z.boolean(),z.lazy(() => LeftoverItemFindManyArgsSchema)]).optional(),
  wasteRecords: z.union([z.boolean(),z.lazy(() => WasteRecordFindManyArgsSchema)]).optional(),
  productionPlans: z.union([z.boolean(),z.lazy(() => ProductionPlanFindManyArgsSchema)]).optional(),
  productionPlanItems: z.union([z.boolean(),z.lazy(() => ProductionPlanItemFindManyArgsSchema)]).optional(),
  availability: z.union([z.boolean(),z.lazy(() => AvailabilityFindManyArgsSchema)]).optional(),
  schedulingConstraints: z.union([z.boolean(),z.lazy(() => SchedulingConstraintFindManyArgsSchema)]).optional(),
  inventoryWithdrawals: z.union([z.boolean(),z.lazy(() => InventoryWithdrawalFindManyArgsSchema)]).optional(),
  checklistCompletes: z.union([z.boolean(),z.lazy(() => ChecklistCompleteFindManyArgsSchema)]).optional(),
  customerFeedbackResponses: z.union([z.boolean(),z.lazy(() => CustomerFeedbackFindManyArgsSchema)]).optional(),
  recipeVersionsCreated: z.union([z.boolean(),z.lazy(() => RecipeVersionFindManyArgsSchema)]).optional(),
  recipeVersionsApproved: z.union([z.boolean(),z.lazy(() => RecipeVersionFindManyArgsSchema)]).optional(),
  InventoryTransactions: z.union([z.boolean(),z.lazy(() => InventoryTransactionFindManyArgsSchema)]).optional(),
  StockCounts: z.union([z.boolean(),z.lazy(() => StockCountFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => UserCountOutputTypeArgsSchema)]).optional(),
}).strict()

// SESSION
//------------------------------------------------------

export const SessionIncludeSchema: z.ZodType<Prisma.SessionInclude> = z.object({
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const SessionArgsSchema: z.ZodType<Prisma.SessionDefaultArgs> = z.object({
  select: z.lazy(() => SessionSelectSchema).optional(),
  include: z.lazy(() => SessionIncludeSchema).optional(),
}).strict();

export const SessionSelectSchema: z.ZodType<Prisma.SessionSelect> = z.object({
  id: z.boolean().optional(),
  userId: z.boolean().optional(),
  code: z.boolean().optional(),
  token: z.boolean().optional(),
  expiresAt: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// COOK BOOK
//------------------------------------------------------

export const CookBookIncludeSchema: z.ZodType<Prisma.CookBookInclude> = z.object({
  recipes: z.union([z.boolean(),z.lazy(() => RecipeFindManyArgsSchema)]).optional(),
  restaurant: z.union([z.boolean(),z.lazy(() => RestaurantArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => CookBookCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const CookBookArgsSchema: z.ZodType<Prisma.CookBookDefaultArgs> = z.object({
  select: z.lazy(() => CookBookSelectSchema).optional(),
  include: z.lazy(() => CookBookIncludeSchema).optional(),
}).strict();

export const CookBookCountOutputTypeArgsSchema: z.ZodType<Prisma.CookBookCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => CookBookCountOutputTypeSelectSchema).nullish(),
}).strict();

export const CookBookCountOutputTypeSelectSchema: z.ZodType<Prisma.CookBookCountOutputTypeSelect> = z.object({
  recipes: z.boolean().optional(),
}).strict();

export const CookBookSelectSchema: z.ZodType<Prisma.CookBookSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  imageUrl: z.boolean().optional(),
  category: z.boolean().optional(),
  restaurantId: z.boolean().optional(),
  recipes: z.union([z.boolean(),z.lazy(() => RecipeFindManyArgsSchema)]).optional(),
  restaurant: z.union([z.boolean(),z.lazy(() => RestaurantArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => CookBookCountOutputTypeArgsSchema)]).optional(),
}).strict()

// RECIPE
//------------------------------------------------------

export const RecipeIncludeSchema: z.ZodType<Prisma.RecipeInclude> = z.object({
  restaurant: z.union([z.boolean(),z.lazy(() => RestaurantArgsSchema)]).optional(),
  cookBook: z.union([z.boolean(),z.lazy(() => CookBookArgsSchema)]).optional(),
  ingredients: z.union([z.boolean(),z.lazy(() => RecipeIngredientFindManyArgsSchema)]).optional(),
  instructions: z.union([z.boolean(),z.lazy(() => RecipeInstructionFindManyArgsSchema)]).optional(),
  menuItems: z.union([z.boolean(),z.lazy(() => MenuItemFindManyArgsSchema)]).optional(),
  foodCostHistory: z.union([z.boolean(),z.lazy(() => FoodCostHistoryFindManyArgsSchema)]).optional(),
  prepHistory: z.union([z.boolean(),z.lazy(() => PrepHistoryFindManyArgsSchema)]).optional(),
  prepBoards: z.union([z.boolean(),z.lazy(() => PrepBoardFindManyArgsSchema)]).optional(),
  prepItems: z.union([z.boolean(),z.lazy(() => PrepItemFindManyArgsSchema)]).optional(),
  menuItemRecipes: z.union([z.boolean(),z.lazy(() => MenuItemRecipeFindManyArgsSchema)]).optional(),
  productionPlanItems: z.union([z.boolean(),z.lazy(() => ProductionPlanItemFindManyArgsSchema)]).optional(),
  withdrawals: z.union([z.boolean(),z.lazy(() => InventoryWithdrawalFindManyArgsSchema)]).optional(),
  tags: z.union([z.boolean(),z.lazy(() => RecipeTagFindManyArgsSchema)]).optional(),
  versions: z.union([z.boolean(),z.lazy(() => RecipeVersionFindManyArgsSchema)]).optional(),
  equipments: z.union([z.boolean(),z.lazy(() => RecipeEquipmentFindManyArgsSchema)]).optional(),
  dietaryRestrictions: z.union([z.boolean(),z.lazy(() => DietaryRestrictionFindManyArgsSchema)]).optional(),
  temperatures: z.union([z.boolean(),z.lazy(() => RecipeTemperatureFindManyArgsSchema)]).optional(),
  yields: z.union([z.boolean(),z.lazy(() => RecipeYieldFindManyArgsSchema)]).optional(),
  laborCosts: z.union([z.boolean(),z.lazy(() => RecipeLaborCostFindManyArgsSchema)]).optional(),
  nutritionalInfo: z.union([z.boolean(),z.lazy(() => RecipeNutritionArgsSchema)]).optional(),
  criticalPoints: z.union([z.boolean(),z.lazy(() => RecipeCriticalPointFindManyArgsSchema)]).optional(),
  storage: z.union([z.boolean(),z.lazy(() => RecipeStorageArgsSchema)]).optional(),
  photos: z.union([z.boolean(),z.lazy(() => RecipePhotoFindManyArgsSchema)]).optional(),
  recipeStats: z.union([z.boolean(),z.lazy(() => RecipeStatsArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => RecipeCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const RecipeArgsSchema: z.ZodType<Prisma.RecipeDefaultArgs> = z.object({
  select: z.lazy(() => RecipeSelectSchema).optional(),
  include: z.lazy(() => RecipeIncludeSchema).optional(),
}).strict();

export const RecipeCountOutputTypeArgsSchema: z.ZodType<Prisma.RecipeCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => RecipeCountOutputTypeSelectSchema).nullish(),
}).strict();

export const RecipeCountOutputTypeSelectSchema: z.ZodType<Prisma.RecipeCountOutputTypeSelect> = z.object({
  ingredients: z.boolean().optional(),
  instructions: z.boolean().optional(),
  menuItems: z.boolean().optional(),
  foodCostHistory: z.boolean().optional(),
  prepHistory: z.boolean().optional(),
  prepBoards: z.boolean().optional(),
  prepItems: z.boolean().optional(),
  menuItemRecipes: z.boolean().optional(),
  productionPlanItems: z.boolean().optional(),
  withdrawals: z.boolean().optional(),
  tags: z.boolean().optional(),
  versions: z.boolean().optional(),
  equipments: z.boolean().optional(),
  dietaryRestrictions: z.boolean().optional(),
  temperatures: z.boolean().optional(),
  yields: z.boolean().optional(),
  laborCosts: z.boolean().optional(),
  criticalPoints: z.boolean().optional(),
  photos: z.boolean().optional(),
}).strict();

export const RecipeSelectSchema: z.ZodType<Prisma.RecipeSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  imageUrls: z.boolean().optional(),
  description: z.boolean().optional(),
  servings: z.boolean().optional(),
  cookTime: z.boolean().optional(),
  prepTime: z.boolean().optional(),
  frequency: z.boolean().optional(),
  restaurantId: z.boolean().optional(),
  cookBookId: z.boolean().optional(),
  foodCost: z.boolean().optional(),
  isDeleted: z.boolean().optional(),
  isPublished: z.boolean().optional(),
  publishedAt: z.boolean().optional(),
  language: z.boolean().optional(),
  skillLevel: z.boolean().optional(),
  category: z.boolean().optional(),
  restaurant: z.union([z.boolean(),z.lazy(() => RestaurantArgsSchema)]).optional(),
  cookBook: z.union([z.boolean(),z.lazy(() => CookBookArgsSchema)]).optional(),
  ingredients: z.union([z.boolean(),z.lazy(() => RecipeIngredientFindManyArgsSchema)]).optional(),
  instructions: z.union([z.boolean(),z.lazy(() => RecipeInstructionFindManyArgsSchema)]).optional(),
  menuItems: z.union([z.boolean(),z.lazy(() => MenuItemFindManyArgsSchema)]).optional(),
  foodCostHistory: z.union([z.boolean(),z.lazy(() => FoodCostHistoryFindManyArgsSchema)]).optional(),
  prepHistory: z.union([z.boolean(),z.lazy(() => PrepHistoryFindManyArgsSchema)]).optional(),
  prepBoards: z.union([z.boolean(),z.lazy(() => PrepBoardFindManyArgsSchema)]).optional(),
  prepItems: z.union([z.boolean(),z.lazy(() => PrepItemFindManyArgsSchema)]).optional(),
  menuItemRecipes: z.union([z.boolean(),z.lazy(() => MenuItemRecipeFindManyArgsSchema)]).optional(),
  productionPlanItems: z.union([z.boolean(),z.lazy(() => ProductionPlanItemFindManyArgsSchema)]).optional(),
  withdrawals: z.union([z.boolean(),z.lazy(() => InventoryWithdrawalFindManyArgsSchema)]).optional(),
  tags: z.union([z.boolean(),z.lazy(() => RecipeTagFindManyArgsSchema)]).optional(),
  versions: z.union([z.boolean(),z.lazy(() => RecipeVersionFindManyArgsSchema)]).optional(),
  equipments: z.union([z.boolean(),z.lazy(() => RecipeEquipmentFindManyArgsSchema)]).optional(),
  dietaryRestrictions: z.union([z.boolean(),z.lazy(() => DietaryRestrictionFindManyArgsSchema)]).optional(),
  temperatures: z.union([z.boolean(),z.lazy(() => RecipeTemperatureFindManyArgsSchema)]).optional(),
  yields: z.union([z.boolean(),z.lazy(() => RecipeYieldFindManyArgsSchema)]).optional(),
  laborCosts: z.union([z.boolean(),z.lazy(() => RecipeLaborCostFindManyArgsSchema)]).optional(),
  nutritionalInfo: z.union([z.boolean(),z.lazy(() => RecipeNutritionArgsSchema)]).optional(),
  criticalPoints: z.union([z.boolean(),z.lazy(() => RecipeCriticalPointFindManyArgsSchema)]).optional(),
  storage: z.union([z.boolean(),z.lazy(() => RecipeStorageArgsSchema)]).optional(),
  photos: z.union([z.boolean(),z.lazy(() => RecipePhotoFindManyArgsSchema)]).optional(),
  recipeStats: z.union([z.boolean(),z.lazy(() => RecipeStatsArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => RecipeCountOutputTypeArgsSchema)]).optional(),
}).strict()

// INGREDIENT
//------------------------------------------------------

export const IngredientIncludeSchema: z.ZodType<Prisma.IngredientInclude> = z.object({
  recipeIngredients: z.union([z.boolean(),z.lazy(() => RecipeIngredientFindManyArgsSchema)]).optional(),
  inventoryItems: z.union([z.boolean(),z.lazy(() => InventoryItemFindManyArgsSchema)]).optional(),
  orderItems: z.union([z.boolean(),z.lazy(() => OrderItemFindManyArgsSchema)]).optional(),
  vendors: z.union([z.boolean(),z.lazy(() => VendorFindManyArgsSchema)]).optional(),
  WasteRecords: z.union([z.boolean(),z.lazy(() => WasteRecordFindManyArgsSchema)]).optional(),
  IngredientAllergens: z.union([z.boolean(),z.lazy(() => IngredientAllergenFindManyArgsSchema)]).optional(),
  priceHistory: z.union([z.boolean(),z.lazy(() => SupplierPriceHistoryFindManyArgsSchema)]).optional(),
  DietaryRestrictions: z.union([z.boolean(),z.lazy(() => DietaryRestrictionFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => IngredientCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const IngredientArgsSchema: z.ZodType<Prisma.IngredientDefaultArgs> = z.object({
  select: z.lazy(() => IngredientSelectSchema).optional(),
  include: z.lazy(() => IngredientIncludeSchema).optional(),
}).strict();

export const IngredientCountOutputTypeArgsSchema: z.ZodType<Prisma.IngredientCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => IngredientCountOutputTypeSelectSchema).nullish(),
}).strict();

export const IngredientCountOutputTypeSelectSchema: z.ZodType<Prisma.IngredientCountOutputTypeSelect> = z.object({
  recipeIngredients: z.boolean().optional(),
  inventoryItems: z.boolean().optional(),
  orderItems: z.boolean().optional(),
  vendors: z.boolean().optional(),
  WasteRecords: z.boolean().optional(),
  IngredientAllergens: z.boolean().optional(),
  priceHistory: z.boolean().optional(),
  DietaryRestrictions: z.boolean().optional(),
}).strict();

export const IngredientSelectSchema: z.ZodType<Prisma.IngredientSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  category: z.boolean().optional(),
  price: z.boolean().optional(),
  density: z.boolean().optional(),
  dietaryRestrictionId: z.boolean().optional(),
  calories: z.boolean().optional(),
  protein: z.boolean().optional(),
  carbohydrates: z.boolean().optional(),
  fat: z.boolean().optional(),
  fiber: z.boolean().optional(),
  sugar: z.boolean().optional(),
  sodium: z.boolean().optional(),
  usdaFoodId: z.boolean().optional(),
  nutritionSource: z.boolean().optional(),
  nutritionUpdatedAt: z.boolean().optional(),
  recipeIngredients: z.union([z.boolean(),z.lazy(() => RecipeIngredientFindManyArgsSchema)]).optional(),
  inventoryItems: z.union([z.boolean(),z.lazy(() => InventoryItemFindManyArgsSchema)]).optional(),
  orderItems: z.union([z.boolean(),z.lazy(() => OrderItemFindManyArgsSchema)]).optional(),
  vendors: z.union([z.boolean(),z.lazy(() => VendorFindManyArgsSchema)]).optional(),
  WasteRecords: z.union([z.boolean(),z.lazy(() => WasteRecordFindManyArgsSchema)]).optional(),
  IngredientAllergens: z.union([z.boolean(),z.lazy(() => IngredientAllergenFindManyArgsSchema)]).optional(),
  priceHistory: z.union([z.boolean(),z.lazy(() => SupplierPriceHistoryFindManyArgsSchema)]).optional(),
  DietaryRestrictions: z.union([z.boolean(),z.lazy(() => DietaryRestrictionFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => IngredientCountOutputTypeArgsSchema)]).optional(),
}).strict()

// RECIPE INGREDIENT
//------------------------------------------------------

export const RecipeIngredientIncludeSchema: z.ZodType<Prisma.RecipeIngredientInclude> = z.object({
  recipe: z.union([z.boolean(),z.lazy(() => RecipeArgsSchema)]).optional(),
  ingredient: z.union([z.boolean(),z.lazy(() => IngredientArgsSchema)]).optional(),
  recipeVersion: z.union([z.boolean(),z.lazy(() => RecipeVersionArgsSchema)]).optional(),
}).strict()

export const RecipeIngredientArgsSchema: z.ZodType<Prisma.RecipeIngredientDefaultArgs> = z.object({
  select: z.lazy(() => RecipeIngredientSelectSchema).optional(),
  include: z.lazy(() => RecipeIngredientIncludeSchema).optional(),
}).strict();

export const RecipeIngredientSelectSchema: z.ZodType<Prisma.RecipeIngredientSelect> = z.object({
  id: z.boolean().optional(),
  recipeId: z.boolean().optional(),
  ingredientId: z.boolean().optional(),
  quantity: z.boolean().optional(),
  unit: z.boolean().optional(),
  processingInstructions: z.boolean().optional(),
  substituteIngredients: z.boolean().optional(),
  isOptional: z.boolean().optional(),
  notes: z.boolean().optional(),
  cost: z.boolean().optional(),
  density: z.boolean().optional(),
  yield: z.boolean().optional(),
  joinAt: z.boolean().optional(),
  recipeVersionId: z.boolean().optional(),
  recipe: z.union([z.boolean(),z.lazy(() => RecipeArgsSchema)]).optional(),
  ingredient: z.union([z.boolean(),z.lazy(() => IngredientArgsSchema)]).optional(),
  recipeVersion: z.union([z.boolean(),z.lazy(() => RecipeVersionArgsSchema)]).optional(),
}).strict()

// RECIPE INSTRUCTION
//------------------------------------------------------

export const RecipeInstructionIncludeSchema: z.ZodType<Prisma.RecipeInstructionInclude> = z.object({
  recipe: z.union([z.boolean(),z.lazy(() => RecipeArgsSchema)]).optional(),
  RecipeVersion: z.union([z.boolean(),z.lazy(() => RecipeVersionArgsSchema)]).optional(),
  equipment: z.union([z.boolean(),z.lazy(() => RecipeEquipmentFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => RecipeInstructionCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const RecipeInstructionArgsSchema: z.ZodType<Prisma.RecipeInstructionDefaultArgs> = z.object({
  select: z.lazy(() => RecipeInstructionSelectSchema).optional(),
  include: z.lazy(() => RecipeInstructionIncludeSchema).optional(),
}).strict();

export const RecipeInstructionCountOutputTypeArgsSchema: z.ZodType<Prisma.RecipeInstructionCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => RecipeInstructionCountOutputTypeSelectSchema).nullish(),
}).strict();

export const RecipeInstructionCountOutputTypeSelectSchema: z.ZodType<Prisma.RecipeInstructionCountOutputTypeSelect> = z.object({
  equipment: z.boolean().optional(),
}).strict();

export const RecipeInstructionSelectSchema: z.ZodType<Prisma.RecipeInstructionSelect> = z.object({
  id: z.boolean().optional(),
  recipeId: z.boolean().optional(),
  stepNumber: z.boolean().optional(),
  instruction: z.boolean().optional(),
  imageUrl: z.boolean().optional(),
  recipeVersionId: z.boolean().optional(),
  timeInMinutes: z.boolean().optional(),
  temperature: z.boolean().optional(),
  temperatureUnit: z.boolean().optional(),
  isCritical: z.boolean().optional(),
  techniqueTips: z.boolean().optional(),
  warningNotes: z.boolean().optional(),
  recipe: z.union([z.boolean(),z.lazy(() => RecipeArgsSchema)]).optional(),
  RecipeVersion: z.union([z.boolean(),z.lazy(() => RecipeVersionArgsSchema)]).optional(),
  equipment: z.union([z.boolean(),z.lazy(() => RecipeEquipmentFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => RecipeInstructionCountOutputTypeArgsSchema)]).optional(),
}).strict()

// INVENTORY ITEM
//------------------------------------------------------

export const InventoryItemIncludeSchema: z.ZodType<Prisma.InventoryItemInclude> = z.object({
  inventory: z.union([z.boolean(),z.lazy(() => InventoryArgsSchema)]).optional(),
  ingredient: z.union([z.boolean(),z.lazy(() => IngredientArgsSchema)]).optional(),
  lastUpdatedBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  transactions: z.union([z.boolean(),z.lazy(() => InventoryTransactionFindManyArgsSchema)]).optional(),
  withdrawals: z.union([z.boolean(),z.lazy(() => InventoryWithdrawalFindManyArgsSchema)]).optional(),
  stockCounts: z.union([z.boolean(),z.lazy(() => StockCountItemFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => InventoryItemCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const InventoryItemArgsSchema: z.ZodType<Prisma.InventoryItemDefaultArgs> = z.object({
  select: z.lazy(() => InventoryItemSelectSchema).optional(),
  include: z.lazy(() => InventoryItemIncludeSchema).optional(),
}).strict();

export const InventoryItemCountOutputTypeArgsSchema: z.ZodType<Prisma.InventoryItemCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => InventoryItemCountOutputTypeSelectSchema).nullish(),
}).strict();

export const InventoryItemCountOutputTypeSelectSchema: z.ZodType<Prisma.InventoryItemCountOutputTypeSelect> = z.object({
  transactions: z.boolean().optional(),
  withdrawals: z.boolean().optional(),
  stockCounts: z.boolean().optional(),
}).strict();

export const InventoryItemSelectSchema: z.ZodType<Prisma.InventoryItemSelect> = z.object({
  id: z.boolean().optional(),
  inventoryId: z.boolean().optional(),
  ingredientId: z.boolean().optional(),
  quantity: z.boolean().optional(),
  unit: z.boolean().optional(),
  minQuantity: z.boolean().optional(),
  restockThreshold: z.boolean().optional(),
  lastCountDate: z.boolean().optional(),
  lastOrderDate: z.boolean().optional(),
  lastUpdatedById: z.boolean().optional(),
  lastUpdated: z.boolean().optional(),
  par: z.boolean().optional(),
  reorderPoint: z.boolean().optional(),
  maxQuantity: z.boolean().optional(),
  location: z.boolean().optional(),
  barcode: z.boolean().optional(),
  notes: z.boolean().optional(),
  currentPrice: z.boolean().optional(),
  averageCost: z.boolean().optional(),
  lastPurchasePrice: z.boolean().optional(),
  inventory: z.union([z.boolean(),z.lazy(() => InventoryArgsSchema)]).optional(),
  ingredient: z.union([z.boolean(),z.lazy(() => IngredientArgsSchema)]).optional(),
  lastUpdatedBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  transactions: z.union([z.boolean(),z.lazy(() => InventoryTransactionFindManyArgsSchema)]).optional(),
  withdrawals: z.union([z.boolean(),z.lazy(() => InventoryWithdrawalFindManyArgsSchema)]).optional(),
  stockCounts: z.union([z.boolean(),z.lazy(() => StockCountItemFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => InventoryItemCountOutputTypeArgsSchema)]).optional(),
}).strict()

// INVENTORY TRANSACTION
//------------------------------------------------------

export const InventoryTransactionIncludeSchema: z.ZodType<Prisma.InventoryTransactionInclude> = z.object({
  inventory: z.union([z.boolean(),z.lazy(() => InventoryArgsSchema)]).optional(),
  item: z.union([z.boolean(),z.lazy(() => InventoryItemArgsSchema)]).optional(),
  createdBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const InventoryTransactionArgsSchema: z.ZodType<Prisma.InventoryTransactionDefaultArgs> = z.object({
  select: z.lazy(() => InventoryTransactionSelectSchema).optional(),
  include: z.lazy(() => InventoryTransactionIncludeSchema).optional(),
}).strict();

export const InventoryTransactionSelectSchema: z.ZodType<Prisma.InventoryTransactionSelect> = z.object({
  id: z.boolean().optional(),
  inventoryId: z.boolean().optional(),
  itemId: z.boolean().optional(),
  type: z.boolean().optional(),
  quantity: z.boolean().optional(),
  unit: z.boolean().optional(),
  previousQty: z.boolean().optional(),
  newQty: z.boolean().optional(),
  cost: z.boolean().optional(),
  reference: z.boolean().optional(),
  notes: z.boolean().optional(),
  createdById: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  inventory: z.union([z.boolean(),z.lazy(() => InventoryArgsSchema)]).optional(),
  item: z.union([z.boolean(),z.lazy(() => InventoryItemArgsSchema)]).optional(),
  createdBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// STOCK COUNT
//------------------------------------------------------

export const StockCountIncludeSchema: z.ZodType<Prisma.StockCountInclude> = z.object({
  inventory: z.union([z.boolean(),z.lazy(() => InventoryArgsSchema)]).optional(),
  createdBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  items: z.union([z.boolean(),z.lazy(() => StockCountItemFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => StockCountCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const StockCountArgsSchema: z.ZodType<Prisma.StockCountDefaultArgs> = z.object({
  select: z.lazy(() => StockCountSelectSchema).optional(),
  include: z.lazy(() => StockCountIncludeSchema).optional(),
}).strict();

export const StockCountCountOutputTypeArgsSchema: z.ZodType<Prisma.StockCountCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => StockCountCountOutputTypeSelectSchema).nullish(),
}).strict();

export const StockCountCountOutputTypeSelectSchema: z.ZodType<Prisma.StockCountCountOutputTypeSelect> = z.object({
  items: z.boolean().optional(),
}).strict();

export const StockCountSelectSchema: z.ZodType<Prisma.StockCountSelect> = z.object({
  id: z.boolean().optional(),
  inventoryId: z.boolean().optional(),
  status: z.boolean().optional(),
  startedAt: z.boolean().optional(),
  completedAt: z.boolean().optional(),
  createdById: z.boolean().optional(),
  notes: z.boolean().optional(),
  inventory: z.union([z.boolean(),z.lazy(() => InventoryArgsSchema)]).optional(),
  createdBy: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  items: z.union([z.boolean(),z.lazy(() => StockCountItemFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => StockCountCountOutputTypeArgsSchema)]).optional(),
}).strict()

// STOCK COUNT ITEM
//------------------------------------------------------

export const StockCountItemIncludeSchema: z.ZodType<Prisma.StockCountItemInclude> = z.object({
  stockCount: z.union([z.boolean(),z.lazy(() => StockCountArgsSchema)]).optional(),
  item: z.union([z.boolean(),z.lazy(() => InventoryItemArgsSchema)]).optional(),
}).strict()

export const StockCountItemArgsSchema: z.ZodType<Prisma.StockCountItemDefaultArgs> = z.object({
  select: z.lazy(() => StockCountItemSelectSchema).optional(),
  include: z.lazy(() => StockCountItemIncludeSchema).optional(),
}).strict();

export const StockCountItemSelectSchema: z.ZodType<Prisma.StockCountItemSelect> = z.object({
  id: z.boolean().optional(),
  stockCountId: z.boolean().optional(),
  itemId: z.boolean().optional(),
  expectedQty: z.boolean().optional(),
  actualQty: z.boolean().optional(),
  difference: z.boolean().optional(),
  notes: z.boolean().optional(),
  stockCount: z.union([z.boolean(),z.lazy(() => StockCountArgsSchema)]).optional(),
  item: z.union([z.boolean(),z.lazy(() => InventoryItemArgsSchema)]).optional(),
}).strict()

// RECIPE STATS
//------------------------------------------------------

export const RecipeStatsIncludeSchema: z.ZodType<Prisma.RecipeStatsInclude> = z.object({
  recipe: z.union([z.boolean(),z.lazy(() => RecipeArgsSchema)]).optional(),
}).strict()

export const RecipeStatsArgsSchema: z.ZodType<Prisma.RecipeStatsDefaultArgs> = z.object({
  select: z.lazy(() => RecipeStatsSelectSchema).optional(),
  include: z.lazy(() => RecipeStatsIncludeSchema).optional(),
}).strict();

export const RecipeStatsSelectSchema: z.ZodType<Prisma.RecipeStatsSelect> = z.object({
  id: z.boolean().optional(),
  recipeId: z.boolean().optional(),
  totalCost: z.boolean().optional(),
  profitMargin: z.boolean().optional(),
  averageRating: z.boolean().optional(),
  preparationCount: z.boolean().optional(),
  lastPrepared: z.boolean().optional(),
  recipe: z.union([z.boolean(),z.lazy(() => RecipeArgsSchema)]).optional(),
}).strict()

// ORDER
//------------------------------------------------------

export const OrderIncludeSchema: z.ZodType<Prisma.OrderInclude> = z.object({
  restaurant: z.union([z.boolean(),z.lazy(() => RestaurantArgsSchema)]).optional(),
  vendor: z.union([z.boolean(),z.lazy(() => VendorArgsSchema)]).optional(),
  items: z.union([z.boolean(),z.lazy(() => OrderItemFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => OrderCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const OrderArgsSchema: z.ZodType<Prisma.OrderDefaultArgs> = z.object({
  select: z.lazy(() => OrderSelectSchema).optional(),
  include: z.lazy(() => OrderIncludeSchema).optional(),
}).strict();

export const OrderCountOutputTypeArgsSchema: z.ZodType<Prisma.OrderCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => OrderCountOutputTypeSelectSchema).nullish(),
}).strict();

export const OrderCountOutputTypeSelectSchema: z.ZodType<Prisma.OrderCountOutputTypeSelect> = z.object({
  items: z.boolean().optional(),
}).strict();

export const OrderSelectSchema: z.ZodType<Prisma.OrderSelect> = z.object({
  id: z.boolean().optional(),
  restaurantId: z.boolean().optional(),
  vendorId: z.boolean().optional(),
  status: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  restaurant: z.union([z.boolean(),z.lazy(() => RestaurantArgsSchema)]).optional(),
  vendor: z.union([z.boolean(),z.lazy(() => VendorArgsSchema)]).optional(),
  items: z.union([z.boolean(),z.lazy(() => OrderItemFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => OrderCountOutputTypeArgsSchema)]).optional(),
}).strict()

// ORDER ITEM
//------------------------------------------------------

export const OrderItemIncludeSchema: z.ZodType<Prisma.OrderItemInclude> = z.object({
  order: z.union([z.boolean(),z.lazy(() => OrderArgsSchema)]).optional(),
  ingredient: z.union([z.boolean(),z.lazy(() => IngredientArgsSchema)]).optional(),
}).strict()

export const OrderItemArgsSchema: z.ZodType<Prisma.OrderItemDefaultArgs> = z.object({
  select: z.lazy(() => OrderItemSelectSchema).optional(),
  include: z.lazy(() => OrderItemIncludeSchema).optional(),
}).strict();

export const OrderItemSelectSchema: z.ZodType<Prisma.OrderItemSelect> = z.object({
  id: z.boolean().optional(),
  orderId: z.boolean().optional(),
  ingredientId: z.boolean().optional(),
  quantity: z.boolean().optional(),
  unit: z.boolean().optional(),
  price: z.boolean().optional(),
  order: z.union([z.boolean(),z.lazy(() => OrderArgsSchema)]).optional(),
  ingredient: z.union([z.boolean(),z.lazy(() => IngredientArgsSchema)]).optional(),
}).strict()

// VENDOR
//------------------------------------------------------

export const VendorIncludeSchema: z.ZodType<Prisma.VendorInclude> = z.object({
  orders: z.union([z.boolean(),z.lazy(() => OrderFindManyArgsSchema)]).optional(),
  ingredients: z.union([z.boolean(),z.lazy(() => IngredientFindManyArgsSchema)]).optional(),
  supplierPriceHistory: z.union([z.boolean(),z.lazy(() => SupplierPriceHistoryFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => VendorCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const VendorArgsSchema: z.ZodType<Prisma.VendorDefaultArgs> = z.object({
  select: z.lazy(() => VendorSelectSchema).optional(),
  include: z.lazy(() => VendorIncludeSchema).optional(),
}).strict();

export const VendorCountOutputTypeArgsSchema: z.ZodType<Prisma.VendorCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => VendorCountOutputTypeSelectSchema).nullish(),
}).strict();

export const VendorCountOutputTypeSelectSchema: z.ZodType<Prisma.VendorCountOutputTypeSelect> = z.object({
  orders: z.boolean().optional(),
  ingredients: z.boolean().optional(),
  supplierPriceHistory: z.boolean().optional(),
}).strict();

export const VendorSelectSchema: z.ZodType<Prisma.VendorSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  contact: z.boolean().optional(),
  email: z.boolean().optional(),
  phone: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  orders: z.union([z.boolean(),z.lazy(() => OrderFindManyArgsSchema)]).optional(),
  ingredients: z.union([z.boolean(),z.lazy(() => IngredientFindManyArgsSchema)]).optional(),
  supplierPriceHistory: z.union([z.boolean(),z.lazy(() => SupplierPriceHistoryFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => VendorCountOutputTypeArgsSchema)]).optional(),
}).strict()

// SHIFT
//------------------------------------------------------

export const ShiftIncludeSchema: z.ZodType<Prisma.ShiftInclude> = z.object({
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  tasks: z.union([z.boolean(),z.lazy(() => ShiftTaskFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ShiftCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const ShiftArgsSchema: z.ZodType<Prisma.ShiftDefaultArgs> = z.object({
  select: z.lazy(() => ShiftSelectSchema).optional(),
  include: z.lazy(() => ShiftIncludeSchema).optional(),
}).strict();

export const ShiftCountOutputTypeArgsSchema: z.ZodType<Prisma.ShiftCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => ShiftCountOutputTypeSelectSchema).nullish(),
}).strict();

export const ShiftCountOutputTypeSelectSchema: z.ZodType<Prisma.ShiftCountOutputTypeSelect> = z.object({
  tasks: z.boolean().optional(),
}).strict();

export const ShiftSelectSchema: z.ZodType<Prisma.ShiftSelect> = z.object({
  id: z.boolean().optional(),
  userId: z.boolean().optional(),
  startTime: z.boolean().optional(),
  endTime: z.boolean().optional(),
  status: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  tasks: z.union([z.boolean(),z.lazy(() => ShiftTaskFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ShiftCountOutputTypeArgsSchema)]).optional(),
}).strict()

// PREP BOARD
//------------------------------------------------------

export const PrepBoardIncludeSchema: z.ZodType<Prisma.PrepBoardInclude> = z.object({
  recipes: z.union([z.boolean(),z.lazy(() => RecipeFindManyArgsSchema)]).optional(),
  prepItems: z.union([z.boolean(),z.lazy(() => PrepItemFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => PrepBoardCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const PrepBoardArgsSchema: z.ZodType<Prisma.PrepBoardDefaultArgs> = z.object({
  select: z.lazy(() => PrepBoardSelectSchema).optional(),
  include: z.lazy(() => PrepBoardIncludeSchema).optional(),
}).strict();

export const PrepBoardCountOutputTypeArgsSchema: z.ZodType<Prisma.PrepBoardCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => PrepBoardCountOutputTypeSelectSchema).nullish(),
}).strict();

export const PrepBoardCountOutputTypeSelectSchema: z.ZodType<Prisma.PrepBoardCountOutputTypeSelect> = z.object({
  recipes: z.boolean().optional(),
  prepItems: z.boolean().optional(),
}).strict();

export const PrepBoardSelectSchema: z.ZodType<Prisma.PrepBoardSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  status: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  recipes: z.union([z.boolean(),z.lazy(() => RecipeFindManyArgsSchema)]).optional(),
  prepItems: z.union([z.boolean(),z.lazy(() => PrepItemFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => PrepBoardCountOutputTypeArgsSchema)]).optional(),
}).strict()

// PREP ITEM
//------------------------------------------------------

export const PrepItemIncludeSchema: z.ZodType<Prisma.PrepItemInclude> = z.object({
  prepBoard: z.union([z.boolean(),z.lazy(() => PrepBoardArgsSchema)]).optional(),
  recipe: z.union([z.boolean(),z.lazy(() => RecipeArgsSchema)]).optional(),
  assignedTo: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const PrepItemArgsSchema: z.ZodType<Prisma.PrepItemDefaultArgs> = z.object({
  select: z.lazy(() => PrepItemSelectSchema).optional(),
  include: z.lazy(() => PrepItemIncludeSchema).optional(),
}).strict();

export const PrepItemSelectSchema: z.ZodType<Prisma.PrepItemSelect> = z.object({
  id: z.boolean().optional(),
  prepBoardId: z.boolean().optional(),
  recipeId: z.boolean().optional(),
  quantity: z.boolean().optional(),
  status: z.boolean().optional(),
  assignedToId: z.boolean().optional(),
  prepBoard: z.union([z.boolean(),z.lazy(() => PrepBoardArgsSchema)]).optional(),
  recipe: z.union([z.boolean(),z.lazy(() => RecipeArgsSchema)]).optional(),
  assignedTo: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// PASSWORD RESET
//------------------------------------------------------

export const PasswordResetIncludeSchema: z.ZodType<Prisma.PasswordResetInclude> = z.object({
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const PasswordResetArgsSchema: z.ZodType<Prisma.PasswordResetDefaultArgs> = z.object({
  select: z.lazy(() => PasswordResetSelectSchema).optional(),
  include: z.lazy(() => PasswordResetIncludeSchema).optional(),
}).strict();

export const PasswordResetSelectSchema: z.ZodType<Prisma.PasswordResetSelect> = z.object({
  id: z.boolean().optional(),
  token: z.boolean().optional(),
  userId: z.boolean().optional(),
  expiresAt: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// MENU
//------------------------------------------------------

export const MenuIncludeSchema: z.ZodType<Prisma.MenuInclude> = z.object({
  restaurant: z.union([z.boolean(),z.lazy(() => RestaurantArgsSchema)]).optional(),
  menuItems: z.union([z.boolean(),z.lazy(() => MenuItemFindManyArgsSchema)]).optional(),
  MenuCategory: z.union([z.boolean(),z.lazy(() => MenuCategoryFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => MenuCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const MenuArgsSchema: z.ZodType<Prisma.MenuDefaultArgs> = z.object({
  select: z.lazy(() => MenuSelectSchema).optional(),
  include: z.lazy(() => MenuIncludeSchema).optional(),
}).strict();

export const MenuCountOutputTypeArgsSchema: z.ZodType<Prisma.MenuCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => MenuCountOutputTypeSelectSchema).nullish(),
}).strict();

export const MenuCountOutputTypeSelectSchema: z.ZodType<Prisma.MenuCountOutputTypeSelect> = z.object({
  menuItems: z.boolean().optional(),
  MenuCategory: z.boolean().optional(),
}).strict();

export const MenuSelectSchema: z.ZodType<Prisma.MenuSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  restaurantId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  restaurant: z.union([z.boolean(),z.lazy(() => RestaurantArgsSchema)]).optional(),
  menuItems: z.union([z.boolean(),z.lazy(() => MenuItemFindManyArgsSchema)]).optional(),
  MenuCategory: z.union([z.boolean(),z.lazy(() => MenuCategoryFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => MenuCountOutputTypeArgsSchema)]).optional(),
}).strict()

// MENU ITEM RECIPE
//------------------------------------------------------

export const MenuItemRecipeIncludeSchema: z.ZodType<Prisma.MenuItemRecipeInclude> = z.object({
  menuItem: z.union([z.boolean(),z.lazy(() => MenuItemArgsSchema)]).optional(),
  recipe: z.union([z.boolean(),z.lazy(() => RecipeArgsSchema)]).optional(),
}).strict()

export const MenuItemRecipeArgsSchema: z.ZodType<Prisma.MenuItemRecipeDefaultArgs> = z.object({
  select: z.lazy(() => MenuItemRecipeSelectSchema).optional(),
  include: z.lazy(() => MenuItemRecipeIncludeSchema).optional(),
}).strict();

export const MenuItemRecipeSelectSchema: z.ZodType<Prisma.MenuItemRecipeSelect> = z.object({
  id: z.boolean().optional(),
  menuItemId: z.boolean().optional(),
  recipeId: z.boolean().optional(),
  joinAt: z.boolean().optional(),
  menuItem: z.union([z.boolean(),z.lazy(() => MenuItemArgsSchema)]).optional(),
  recipe: z.union([z.boolean(),z.lazy(() => RecipeArgsSchema)]).optional(),
}).strict()

// MENU ITEM
//------------------------------------------------------

export const MenuItemIncludeSchema: z.ZodType<Prisma.MenuItemInclude> = z.object({
  menu: z.union([z.boolean(),z.lazy(() => MenuArgsSchema)]).optional(),
  category: z.union([z.boolean(),z.lazy(() => MenuCategoryArgsSchema)]).optional(),
  recipes: z.union([z.boolean(),z.lazy(() => RecipeFindManyArgsSchema)]).optional(),
  menuItemRecipes: z.union([z.boolean(),z.lazy(() => MenuItemRecipeFindManyArgsSchema)]).optional(),
  nutritionalInfo: z.union([z.boolean(),z.lazy(() => NutritionalInfoArgsSchema)]).optional(),
  recommendations: z.union([z.boolean(),z.lazy(() => NutritionalRecommendationFindManyArgsSchema)]).optional(),
  salesTransactions: z.union([z.boolean(),z.lazy(() => SalesTransactionsFindManyArgsSchema)]).optional(),
  leftoverItems: z.union([z.boolean(),z.lazy(() => LeftoverItemFindManyArgsSchema)]).optional(),
  feedback: z.union([z.boolean(),z.lazy(() => CustomerFeedbackFindManyArgsSchema)]).optional(),
  dietaryRestrictions: z.union([z.boolean(),z.lazy(() => DietaryRestrictionFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => MenuItemCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const MenuItemArgsSchema: z.ZodType<Prisma.MenuItemDefaultArgs> = z.object({
  select: z.lazy(() => MenuItemSelectSchema).optional(),
  include: z.lazy(() => MenuItemIncludeSchema).optional(),
}).strict();

export const MenuItemCountOutputTypeArgsSchema: z.ZodType<Prisma.MenuItemCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => MenuItemCountOutputTypeSelectSchema).nullish(),
}).strict();

export const MenuItemCountOutputTypeSelectSchema: z.ZodType<Prisma.MenuItemCountOutputTypeSelect> = z.object({
  recipes: z.boolean().optional(),
  menuItemRecipes: z.boolean().optional(),
  recommendations: z.boolean().optional(),
  salesTransactions: z.boolean().optional(),
  leftoverItems: z.boolean().optional(),
  feedback: z.boolean().optional(),
  dietaryRestrictions: z.boolean().optional(),
}).strict();

export const MenuItemSelectSchema: z.ZodType<Prisma.MenuItemSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  price: z.boolean().optional(),
  foodCost: z.boolean().optional(),
  isActive: z.boolean().optional(),
  recipeIds: z.boolean().optional(),
  recipeServingsAmount: z.boolean().optional(),
  recipeServingsCost: z.boolean().optional(),
  allergens: z.boolean().optional(),
  menuId: z.boolean().optional(),
  categoryId: z.boolean().optional(),
  menu: z.union([z.boolean(),z.lazy(() => MenuArgsSchema)]).optional(),
  category: z.union([z.boolean(),z.lazy(() => MenuCategoryArgsSchema)]).optional(),
  recipes: z.union([z.boolean(),z.lazy(() => RecipeFindManyArgsSchema)]).optional(),
  menuItemRecipes: z.union([z.boolean(),z.lazy(() => MenuItemRecipeFindManyArgsSchema)]).optional(),
  nutritionalInfo: z.union([z.boolean(),z.lazy(() => NutritionalInfoArgsSchema)]).optional(),
  recommendations: z.union([z.boolean(),z.lazy(() => NutritionalRecommendationFindManyArgsSchema)]).optional(),
  salesTransactions: z.union([z.boolean(),z.lazy(() => SalesTransactionsFindManyArgsSchema)]).optional(),
  leftoverItems: z.union([z.boolean(),z.lazy(() => LeftoverItemFindManyArgsSchema)]).optional(),
  feedback: z.union([z.boolean(),z.lazy(() => CustomerFeedbackFindManyArgsSchema)]).optional(),
  dietaryRestrictions: z.union([z.boolean(),z.lazy(() => DietaryRestrictionFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => MenuItemCountOutputTypeArgsSchema)]).optional(),
}).strict()

// NUTRITIONAL INFO
//------------------------------------------------------

export const NutritionalInfoIncludeSchema: z.ZodType<Prisma.NutritionalInfoInclude> = z.object({
  menuItem: z.union([z.boolean(),z.lazy(() => MenuItemArgsSchema)]).optional(),
}).strict()

export const NutritionalInfoArgsSchema: z.ZodType<Prisma.NutritionalInfoDefaultArgs> = z.object({
  select: z.lazy(() => NutritionalInfoSelectSchema).optional(),
  include: z.lazy(() => NutritionalInfoIncludeSchema).optional(),
}).strict();

export const NutritionalInfoSelectSchema: z.ZodType<Prisma.NutritionalInfoSelect> = z.object({
  id: z.boolean().optional(),
  menuItemId: z.boolean().optional(),
  calories: z.boolean().optional(),
  fat: z.boolean().optional(),
  saturatedFat: z.boolean().optional(),
  transFat: z.boolean().optional(),
  cholesterol: z.boolean().optional(),
  sodium: z.boolean().optional(),
  carbohydrates: z.boolean().optional(),
  fiber: z.boolean().optional(),
  sugar: z.boolean().optional(),
  protein: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  menuItem: z.union([z.boolean(),z.lazy(() => MenuItemArgsSchema)]).optional(),
}).strict()

// FOOD COST HISTORY
//------------------------------------------------------

export const FoodCostHistoryIncludeSchema: z.ZodType<Prisma.FoodCostHistoryInclude> = z.object({
  recipe: z.union([z.boolean(),z.lazy(() => RecipeArgsSchema)]).optional(),
}).strict()

export const FoodCostHistoryArgsSchema: z.ZodType<Prisma.FoodCostHistoryDefaultArgs> = z.object({
  select: z.lazy(() => FoodCostHistorySelectSchema).optional(),
  include: z.lazy(() => FoodCostHistoryIncludeSchema).optional(),
}).strict();

export const FoodCostHistorySelectSchema: z.ZodType<Prisma.FoodCostHistorySelect> = z.object({
  id: z.boolean().optional(),
  recipeId: z.boolean().optional(),
  cost: z.boolean().optional(),
  date: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  recipe: z.union([z.boolean(),z.lazy(() => RecipeArgsSchema)]).optional(),
}).strict()

// PREP HISTORY
//------------------------------------------------------

export const PrepHistoryIncludeSchema: z.ZodType<Prisma.PrepHistoryInclude> = z.object({
  recipe: z.union([z.boolean(),z.lazy(() => RecipeArgsSchema)]).optional(),
}).strict()

export const PrepHistoryArgsSchema: z.ZodType<Prisma.PrepHistoryDefaultArgs> = z.object({
  select: z.lazy(() => PrepHistorySelectSchema).optional(),
  include: z.lazy(() => PrepHistoryIncludeSchema).optional(),
}).strict();

export const PrepHistorySelectSchema: z.ZodType<Prisma.PrepHistorySelect> = z.object({
  id: z.boolean().optional(),
  recipeId: z.boolean().optional(),
  quantity: z.boolean().optional(),
  date: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  recipe: z.union([z.boolean(),z.lazy(() => RecipeArgsSchema)]).optional(),
}).strict()


/////////////////////////////////////////
// INPUT TYPES
/////////////////////////////////////////

export const RecipeNutritionWhereInputSchema: z.ZodType<Prisma.RecipeNutritionWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RecipeNutritionWhereInputSchema),z.lazy(() => RecipeNutritionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RecipeNutritionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RecipeNutritionWhereInputSchema),z.lazy(() => RecipeNutritionWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  recipeId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  servingSize: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  servingUnit: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  calories: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  protein: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  carbohydrates: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  fat: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  fiber: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  sugar: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  sodium: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  containsGluten: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  containsDairy: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  containsNuts: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  containsEggs: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  containsSoy: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  containsFish: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  containsShellfish: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  containsSesame: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  recipe: z.union([ z.lazy(() => RecipeScalarRelationFilterSchema),z.lazy(() => RecipeWhereInputSchema) ]).optional(),
}).strict();

export const RecipeNutritionOrderByWithRelationInputSchema: z.ZodType<Prisma.RecipeNutritionOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  servingSize: z.lazy(() => SortOrderSchema).optional(),
  servingUnit: z.lazy(() => SortOrderSchema).optional(),
  calories: z.lazy(() => SortOrderSchema).optional(),
  protein: z.lazy(() => SortOrderSchema).optional(),
  carbohydrates: z.lazy(() => SortOrderSchema).optional(),
  fat: z.lazy(() => SortOrderSchema).optional(),
  fiber: z.lazy(() => SortOrderSchema).optional(),
  sugar: z.lazy(() => SortOrderSchema).optional(),
  sodium: z.lazy(() => SortOrderSchema).optional(),
  containsGluten: z.lazy(() => SortOrderSchema).optional(),
  containsDairy: z.lazy(() => SortOrderSchema).optional(),
  containsNuts: z.lazy(() => SortOrderSchema).optional(),
  containsEggs: z.lazy(() => SortOrderSchema).optional(),
  containsSoy: z.lazy(() => SortOrderSchema).optional(),
  containsFish: z.lazy(() => SortOrderSchema).optional(),
  containsShellfish: z.lazy(() => SortOrderSchema).optional(),
  containsSesame: z.lazy(() => SortOrderSchema).optional(),
  recipe: z.lazy(() => RecipeOrderByWithRelationInputSchema).optional()
}).strict();

export const RecipeNutritionWhereUniqueInputSchema: z.ZodType<Prisma.RecipeNutritionWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    recipeId: z.number().int()
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    recipeId: z.number().int(),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  recipeId: z.number().int().optional(),
  AND: z.union([ z.lazy(() => RecipeNutritionWhereInputSchema),z.lazy(() => RecipeNutritionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RecipeNutritionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RecipeNutritionWhereInputSchema),z.lazy(() => RecipeNutritionWhereInputSchema).array() ]).optional(),
  servingSize: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  servingUnit: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  calories: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  protein: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  carbohydrates: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  fat: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  fiber: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  sugar: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  sodium: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  containsGluten: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  containsDairy: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  containsNuts: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  containsEggs: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  containsSoy: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  containsFish: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  containsShellfish: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  containsSesame: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  recipe: z.union([ z.lazy(() => RecipeScalarRelationFilterSchema),z.lazy(() => RecipeWhereInputSchema) ]).optional(),
}).strict());

export const RecipeNutritionOrderByWithAggregationInputSchema: z.ZodType<Prisma.RecipeNutritionOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  servingSize: z.lazy(() => SortOrderSchema).optional(),
  servingUnit: z.lazy(() => SortOrderSchema).optional(),
  calories: z.lazy(() => SortOrderSchema).optional(),
  protein: z.lazy(() => SortOrderSchema).optional(),
  carbohydrates: z.lazy(() => SortOrderSchema).optional(),
  fat: z.lazy(() => SortOrderSchema).optional(),
  fiber: z.lazy(() => SortOrderSchema).optional(),
  sugar: z.lazy(() => SortOrderSchema).optional(),
  sodium: z.lazy(() => SortOrderSchema).optional(),
  containsGluten: z.lazy(() => SortOrderSchema).optional(),
  containsDairy: z.lazy(() => SortOrderSchema).optional(),
  containsNuts: z.lazy(() => SortOrderSchema).optional(),
  containsEggs: z.lazy(() => SortOrderSchema).optional(),
  containsSoy: z.lazy(() => SortOrderSchema).optional(),
  containsFish: z.lazy(() => SortOrderSchema).optional(),
  containsShellfish: z.lazy(() => SortOrderSchema).optional(),
  containsSesame: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => RecipeNutritionCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => RecipeNutritionAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => RecipeNutritionMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => RecipeNutritionMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => RecipeNutritionSumOrderByAggregateInputSchema).optional()
}).strict();

export const RecipeNutritionScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.RecipeNutritionScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => RecipeNutritionScalarWhereWithAggregatesInputSchema),z.lazy(() => RecipeNutritionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => RecipeNutritionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RecipeNutritionScalarWhereWithAggregatesInputSchema),z.lazy(() => RecipeNutritionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  recipeId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  servingSize: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  servingUnit: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  calories: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  protein: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  carbohydrates: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  fat: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  fiber: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  sugar: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  sodium: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  containsGluten: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  containsDairy: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  containsNuts: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  containsEggs: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  containsSoy: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  containsFish: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  containsShellfish: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  containsSesame: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
}).strict();

export const RecipeCriticalPointWhereInputSchema: z.ZodType<Prisma.RecipeCriticalPointWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RecipeCriticalPointWhereInputSchema),z.lazy(() => RecipeCriticalPointWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RecipeCriticalPointWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RecipeCriticalPointWhereInputSchema),z.lazy(() => RecipeCriticalPointWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  recipeId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  stepNumber: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  description: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  threshold: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  unit: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  action: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  recipe: z.union([ z.lazy(() => RecipeScalarRelationFilterSchema),z.lazy(() => RecipeWhereInputSchema) ]).optional(),
}).strict();

export const RecipeCriticalPointOrderByWithRelationInputSchema: z.ZodType<Prisma.RecipeCriticalPointOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  stepNumber: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  threshold: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  unit: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  action: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  recipe: z.lazy(() => RecipeOrderByWithRelationInputSchema).optional()
}).strict();

export const RecipeCriticalPointWhereUniqueInputSchema: z.ZodType<Prisma.RecipeCriticalPointWhereUniqueInput> = z.object({
  id: z.number().int()
})
.and(z.object({
  id: z.number().int().optional(),
  AND: z.union([ z.lazy(() => RecipeCriticalPointWhereInputSchema),z.lazy(() => RecipeCriticalPointWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RecipeCriticalPointWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RecipeCriticalPointWhereInputSchema),z.lazy(() => RecipeCriticalPointWhereInputSchema).array() ]).optional(),
  recipeId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  stepNumber: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  description: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  threshold: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  unit: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  action: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  recipe: z.union([ z.lazy(() => RecipeScalarRelationFilterSchema),z.lazy(() => RecipeWhereInputSchema) ]).optional(),
}).strict());

export const RecipeCriticalPointOrderByWithAggregationInputSchema: z.ZodType<Prisma.RecipeCriticalPointOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  stepNumber: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  threshold: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  unit: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  action: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => RecipeCriticalPointCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => RecipeCriticalPointAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => RecipeCriticalPointMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => RecipeCriticalPointMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => RecipeCriticalPointSumOrderByAggregateInputSchema).optional()
}).strict();

export const RecipeCriticalPointScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.RecipeCriticalPointScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => RecipeCriticalPointScalarWhereWithAggregatesInputSchema),z.lazy(() => RecipeCriticalPointScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => RecipeCriticalPointScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RecipeCriticalPointScalarWhereWithAggregatesInputSchema),z.lazy(() => RecipeCriticalPointScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  recipeId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  stepNumber: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  description: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  threshold: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  unit: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  action: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const RecipeStorageWhereInputSchema: z.ZodType<Prisma.RecipeStorageWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RecipeStorageWhereInputSchema),z.lazy(() => RecipeStorageWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RecipeStorageWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RecipeStorageWhereInputSchema),z.lazy(() => RecipeStorageWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  recipeId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  temperature: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  method: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  shelfLife: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  containerType: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  specialNotes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  recipe: z.union([ z.lazy(() => RecipeScalarRelationFilterSchema),z.lazy(() => RecipeWhereInputSchema) ]).optional(),
}).strict();

export const RecipeStorageOrderByWithRelationInputSchema: z.ZodType<Prisma.RecipeStorageOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  temperature: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  method: z.lazy(() => SortOrderSchema).optional(),
  shelfLife: z.lazy(() => SortOrderSchema).optional(),
  containerType: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  specialNotes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  recipe: z.lazy(() => RecipeOrderByWithRelationInputSchema).optional()
}).strict();

export const RecipeStorageWhereUniqueInputSchema: z.ZodType<Prisma.RecipeStorageWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    recipeId: z.number().int()
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    recipeId: z.number().int(),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  recipeId: z.number().int().optional(),
  AND: z.union([ z.lazy(() => RecipeStorageWhereInputSchema),z.lazy(() => RecipeStorageWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RecipeStorageWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RecipeStorageWhereInputSchema),z.lazy(() => RecipeStorageWhereInputSchema).array() ]).optional(),
  temperature: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  method: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  shelfLife: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  containerType: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  specialNotes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  recipe: z.union([ z.lazy(() => RecipeScalarRelationFilterSchema),z.lazy(() => RecipeWhereInputSchema) ]).optional(),
}).strict());

export const RecipeStorageOrderByWithAggregationInputSchema: z.ZodType<Prisma.RecipeStorageOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  temperature: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  method: z.lazy(() => SortOrderSchema).optional(),
  shelfLife: z.lazy(() => SortOrderSchema).optional(),
  containerType: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  specialNotes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => RecipeStorageCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => RecipeStorageAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => RecipeStorageMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => RecipeStorageMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => RecipeStorageSumOrderByAggregateInputSchema).optional()
}).strict();

export const RecipeStorageScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.RecipeStorageScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => RecipeStorageScalarWhereWithAggregatesInputSchema),z.lazy(() => RecipeStorageScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => RecipeStorageScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RecipeStorageScalarWhereWithAggregatesInputSchema),z.lazy(() => RecipeStorageScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  recipeId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  temperature: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  method: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  shelfLife: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  containerType: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  specialNotes: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const RecipePhotoWhereInputSchema: z.ZodType<Prisma.RecipePhotoWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RecipePhotoWhereInputSchema),z.lazy(() => RecipePhotoWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RecipePhotoWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RecipePhotoWhereInputSchema),z.lazy(() => RecipePhotoWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  recipeId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  url: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumPhotoTypeFilterSchema),z.lazy(() => PhotoTypeSchema) ]).optional(),
  stepNumber: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  recipe: z.union([ z.lazy(() => RecipeScalarRelationFilterSchema),z.lazy(() => RecipeWhereInputSchema) ]).optional(),
}).strict();

export const RecipePhotoOrderByWithRelationInputSchema: z.ZodType<Prisma.RecipePhotoOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  stepNumber: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  recipe: z.lazy(() => RecipeOrderByWithRelationInputSchema).optional()
}).strict();

export const RecipePhotoWhereUniqueInputSchema: z.ZodType<Prisma.RecipePhotoWhereUniqueInput> = z.object({
  id: z.number().int()
})
.and(z.object({
  id: z.number().int().optional(),
  AND: z.union([ z.lazy(() => RecipePhotoWhereInputSchema),z.lazy(() => RecipePhotoWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RecipePhotoWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RecipePhotoWhereInputSchema),z.lazy(() => RecipePhotoWhereInputSchema).array() ]).optional(),
  recipeId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  url: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumPhotoTypeFilterSchema),z.lazy(() => PhotoTypeSchema) ]).optional(),
  stepNumber: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  recipe: z.union([ z.lazy(() => RecipeScalarRelationFilterSchema),z.lazy(() => RecipeWhereInputSchema) ]).optional(),
}).strict());

export const RecipePhotoOrderByWithAggregationInputSchema: z.ZodType<Prisma.RecipePhotoOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  stepNumber: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => RecipePhotoCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => RecipePhotoAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => RecipePhotoMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => RecipePhotoMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => RecipePhotoSumOrderByAggregateInputSchema).optional()
}).strict();

export const RecipePhotoScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.RecipePhotoScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => RecipePhotoScalarWhereWithAggregatesInputSchema),z.lazy(() => RecipePhotoScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => RecipePhotoScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RecipePhotoScalarWhereWithAggregatesInputSchema),z.lazy(() => RecipePhotoScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  recipeId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  url: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumPhotoTypeWithAggregatesFilterSchema),z.lazy(() => PhotoTypeSchema) ]).optional(),
  stepNumber: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const RecipeTemperatureWhereInputSchema: z.ZodType<Prisma.RecipeTemperatureWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RecipeTemperatureWhereInputSchema),z.lazy(() => RecipeTemperatureWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RecipeTemperatureWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RecipeTemperatureWhereInputSchema),z.lazy(() => RecipeTemperatureWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  recipeId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  stepNumber: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  minTemp: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  maxTemp: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  isCritical: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  holdTime: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  recipe: z.union([ z.lazy(() => RecipeScalarRelationFilterSchema),z.lazy(() => RecipeWhereInputSchema) ]).optional(),
}).strict();

export const RecipeTemperatureOrderByWithRelationInputSchema: z.ZodType<Prisma.RecipeTemperatureOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  stepNumber: z.lazy(() => SortOrderSchema).optional(),
  minTemp: z.lazy(() => SortOrderSchema).optional(),
  maxTemp: z.lazy(() => SortOrderSchema).optional(),
  isCritical: z.lazy(() => SortOrderSchema).optional(),
  holdTime: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  recipe: z.lazy(() => RecipeOrderByWithRelationInputSchema).optional()
}).strict();

export const RecipeTemperatureWhereUniqueInputSchema: z.ZodType<Prisma.RecipeTemperatureWhereUniqueInput> = z.object({
  id: z.number().int()
})
.and(z.object({
  id: z.number().int().optional(),
  AND: z.union([ z.lazy(() => RecipeTemperatureWhereInputSchema),z.lazy(() => RecipeTemperatureWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RecipeTemperatureWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RecipeTemperatureWhereInputSchema),z.lazy(() => RecipeTemperatureWhereInputSchema).array() ]).optional(),
  recipeId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  stepNumber: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  minTemp: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  maxTemp: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  isCritical: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  holdTime: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  recipe: z.union([ z.lazy(() => RecipeScalarRelationFilterSchema),z.lazy(() => RecipeWhereInputSchema) ]).optional(),
}).strict());

export const RecipeTemperatureOrderByWithAggregationInputSchema: z.ZodType<Prisma.RecipeTemperatureOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  stepNumber: z.lazy(() => SortOrderSchema).optional(),
  minTemp: z.lazy(() => SortOrderSchema).optional(),
  maxTemp: z.lazy(() => SortOrderSchema).optional(),
  isCritical: z.lazy(() => SortOrderSchema).optional(),
  holdTime: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => RecipeTemperatureCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => RecipeTemperatureAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => RecipeTemperatureMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => RecipeTemperatureMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => RecipeTemperatureSumOrderByAggregateInputSchema).optional()
}).strict();

export const RecipeTemperatureScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.RecipeTemperatureScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => RecipeTemperatureScalarWhereWithAggregatesInputSchema),z.lazy(() => RecipeTemperatureScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => RecipeTemperatureScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RecipeTemperatureScalarWhereWithAggregatesInputSchema),z.lazy(() => RecipeTemperatureScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  recipeId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  stepNumber: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  minTemp: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  maxTemp: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  isCritical: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  holdTime: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const RecipeYieldWhereInputSchema: z.ZodType<Prisma.RecipeYieldWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RecipeYieldWhereInputSchema),z.lazy(() => RecipeYieldWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RecipeYieldWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RecipeYieldWhereInputSchema),z.lazy(() => RecipeYieldWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  recipeId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  expectedYield: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  actualYield: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  unit: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  wastagePercent: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  recipe: z.union([ z.lazy(() => RecipeScalarRelationFilterSchema),z.lazy(() => RecipeWhereInputSchema) ]).optional(),
}).strict();

export const RecipeYieldOrderByWithRelationInputSchema: z.ZodType<Prisma.RecipeYieldOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  expectedYield: z.lazy(() => SortOrderSchema).optional(),
  actualYield: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  wastagePercent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  notes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  recipe: z.lazy(() => RecipeOrderByWithRelationInputSchema).optional()
}).strict();

export const RecipeYieldWhereUniqueInputSchema: z.ZodType<Prisma.RecipeYieldWhereUniqueInput> = z.object({
  id: z.number().int()
})
.and(z.object({
  id: z.number().int().optional(),
  AND: z.union([ z.lazy(() => RecipeYieldWhereInputSchema),z.lazy(() => RecipeYieldWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RecipeYieldWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RecipeYieldWhereInputSchema),z.lazy(() => RecipeYieldWhereInputSchema).array() ]).optional(),
  recipeId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  expectedYield: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  actualYield: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  unit: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  wastagePercent: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  recipe: z.union([ z.lazy(() => RecipeScalarRelationFilterSchema),z.lazy(() => RecipeWhereInputSchema) ]).optional(),
}).strict());

export const RecipeYieldOrderByWithAggregationInputSchema: z.ZodType<Prisma.RecipeYieldOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  expectedYield: z.lazy(() => SortOrderSchema).optional(),
  actualYield: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  wastagePercent: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  notes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => RecipeYieldCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => RecipeYieldAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => RecipeYieldMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => RecipeYieldMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => RecipeYieldSumOrderByAggregateInputSchema).optional()
}).strict();

export const RecipeYieldScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.RecipeYieldScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => RecipeYieldScalarWhereWithAggregatesInputSchema),z.lazy(() => RecipeYieldScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => RecipeYieldScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RecipeYieldScalarWhereWithAggregatesInputSchema),z.lazy(() => RecipeYieldScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  recipeId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  expectedYield: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  actualYield: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  unit: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  wastagePercent: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  notes: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const RecipeLaborCostWhereInputSchema: z.ZodType<Prisma.RecipeLaborCostWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RecipeLaborCostWhereInputSchema),z.lazy(() => RecipeLaborCostWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RecipeLaborCostWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RecipeLaborCostWhereInputSchema),z.lazy(() => RecipeLaborCostWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  recipeId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  prepTime: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  cookTime: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  laborRate: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  totalLaborCost: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  recipe: z.union([ z.lazy(() => RecipeScalarRelationFilterSchema),z.lazy(() => RecipeWhereInputSchema) ]).optional(),
}).strict();

export const RecipeLaborCostOrderByWithRelationInputSchema: z.ZodType<Prisma.RecipeLaborCostOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  prepTime: z.lazy(() => SortOrderSchema).optional(),
  cookTime: z.lazy(() => SortOrderSchema).optional(),
  laborRate: z.lazy(() => SortOrderSchema).optional(),
  totalLaborCost: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  recipe: z.lazy(() => RecipeOrderByWithRelationInputSchema).optional()
}).strict();

export const RecipeLaborCostWhereUniqueInputSchema: z.ZodType<Prisma.RecipeLaborCostWhereUniqueInput> = z.object({
  id: z.number().int()
})
.and(z.object({
  id: z.number().int().optional(),
  AND: z.union([ z.lazy(() => RecipeLaborCostWhereInputSchema),z.lazy(() => RecipeLaborCostWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RecipeLaborCostWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RecipeLaborCostWhereInputSchema),z.lazy(() => RecipeLaborCostWhereInputSchema).array() ]).optional(),
  recipeId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  prepTime: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  cookTime: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  laborRate: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  totalLaborCost: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  recipe: z.union([ z.lazy(() => RecipeScalarRelationFilterSchema),z.lazy(() => RecipeWhereInputSchema) ]).optional(),
}).strict());

export const RecipeLaborCostOrderByWithAggregationInputSchema: z.ZodType<Prisma.RecipeLaborCostOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  prepTime: z.lazy(() => SortOrderSchema).optional(),
  cookTime: z.lazy(() => SortOrderSchema).optional(),
  laborRate: z.lazy(() => SortOrderSchema).optional(),
  totalLaborCost: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => RecipeLaborCostCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => RecipeLaborCostAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => RecipeLaborCostMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => RecipeLaborCostMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => RecipeLaborCostSumOrderByAggregateInputSchema).optional()
}).strict();

export const RecipeLaborCostScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.RecipeLaborCostScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => RecipeLaborCostScalarWhereWithAggregatesInputSchema),z.lazy(() => RecipeLaborCostScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => RecipeLaborCostScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RecipeLaborCostScalarWhereWithAggregatesInputSchema),z.lazy(() => RecipeLaborCostScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  recipeId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  prepTime: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  cookTime: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  laborRate: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  totalLaborCost: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const SalesTransactionsWhereInputSchema: z.ZodType<Prisma.SalesTransactionsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SalesTransactionsWhereInputSchema),z.lazy(() => SalesTransactionsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SalesTransactionsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SalesTransactionsWhereInputSchema),z.lazy(() => SalesTransactionsWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  posTransactionID: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  restaurantId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  menuItemId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  price: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  total: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  transactionDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  restaurant: z.union([ z.lazy(() => RestaurantScalarRelationFilterSchema),z.lazy(() => RestaurantWhereInputSchema) ]).optional(),
  menuItem: z.union([ z.lazy(() => MenuItemScalarRelationFilterSchema),z.lazy(() => MenuItemWhereInputSchema) ]).optional(),
}).strict();

export const SalesTransactionsOrderByWithRelationInputSchema: z.ZodType<Prisma.SalesTransactionsOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  posTransactionID: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  menuItemId: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  total: z.lazy(() => SortOrderSchema).optional(),
  transactionDate: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  restaurant: z.lazy(() => RestaurantOrderByWithRelationInputSchema).optional(),
  menuItem: z.lazy(() => MenuItemOrderByWithRelationInputSchema).optional()
}).strict();

export const SalesTransactionsWhereUniqueInputSchema: z.ZodType<Prisma.SalesTransactionsWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    posTransactionID: z.string()
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    posTransactionID: z.string(),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  posTransactionID: z.string().optional(),
  AND: z.union([ z.lazy(() => SalesTransactionsWhereInputSchema),z.lazy(() => SalesTransactionsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SalesTransactionsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SalesTransactionsWhereInputSchema),z.lazy(() => SalesTransactionsWhereInputSchema).array() ]).optional(),
  restaurantId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  menuItemId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  price: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  total: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  transactionDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  restaurant: z.union([ z.lazy(() => RestaurantScalarRelationFilterSchema),z.lazy(() => RestaurantWhereInputSchema) ]).optional(),
  menuItem: z.union([ z.lazy(() => MenuItemScalarRelationFilterSchema),z.lazy(() => MenuItemWhereInputSchema) ]).optional(),
}).strict());

export const SalesTransactionsOrderByWithAggregationInputSchema: z.ZodType<Prisma.SalesTransactionsOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  posTransactionID: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  menuItemId: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  total: z.lazy(() => SortOrderSchema).optional(),
  transactionDate: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => SalesTransactionsCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => SalesTransactionsAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => SalesTransactionsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => SalesTransactionsMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => SalesTransactionsSumOrderByAggregateInputSchema).optional()
}).strict();

export const SalesTransactionsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.SalesTransactionsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => SalesTransactionsScalarWhereWithAggregatesInputSchema),z.lazy(() => SalesTransactionsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => SalesTransactionsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SalesTransactionsScalarWhereWithAggregatesInputSchema),z.lazy(() => SalesTransactionsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  posTransactionID: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  restaurantId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  menuItemId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  price: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  total: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  transactionDate: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const MenuCategoryWhereInputSchema: z.ZodType<Prisma.MenuCategoryWhereInput> = z.object({
  AND: z.union([ z.lazy(() => MenuCategoryWhereInputSchema),z.lazy(() => MenuCategoryWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MenuCategoryWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MenuCategoryWhereInputSchema),z.lazy(() => MenuCategoryWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  displayOrder: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  menuId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  isActive: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  menu: z.union([ z.lazy(() => MenuScalarRelationFilterSchema),z.lazy(() => MenuWhereInputSchema) ]).optional(),
  menuItems: z.lazy(() => MenuItemListRelationFilterSchema).optional()
}).strict();

export const MenuCategoryOrderByWithRelationInputSchema: z.ZodType<Prisma.MenuCategoryOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  displayOrder: z.lazy(() => SortOrderSchema).optional(),
  menuId: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  menu: z.lazy(() => MenuOrderByWithRelationInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemOrderByRelationAggregateInputSchema).optional()
}).strict();

export const MenuCategoryWhereUniqueInputSchema: z.ZodType<Prisma.MenuCategoryWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    menuId_name: z.lazy(() => MenuCategoryMenuIdNameCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    menuId_name: z.lazy(() => MenuCategoryMenuIdNameCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  menuId_name: z.lazy(() => MenuCategoryMenuIdNameCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => MenuCategoryWhereInputSchema),z.lazy(() => MenuCategoryWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MenuCategoryWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MenuCategoryWhereInputSchema),z.lazy(() => MenuCategoryWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  displayOrder: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  menuId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  isActive: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  menu: z.union([ z.lazy(() => MenuScalarRelationFilterSchema),z.lazy(() => MenuWhereInputSchema) ]).optional(),
  menuItems: z.lazy(() => MenuItemListRelationFilterSchema).optional()
}).strict());

export const MenuCategoryOrderByWithAggregationInputSchema: z.ZodType<Prisma.MenuCategoryOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  displayOrder: z.lazy(() => SortOrderSchema).optional(),
  menuId: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => MenuCategoryCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => MenuCategoryAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => MenuCategoryMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => MenuCategoryMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => MenuCategorySumOrderByAggregateInputSchema).optional()
}).strict();

export const MenuCategoryScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.MenuCategoryScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => MenuCategoryScalarWhereWithAggregatesInputSchema),z.lazy(() => MenuCategoryScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => MenuCategoryScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MenuCategoryScalarWhereWithAggregatesInputSchema),z.lazy(() => MenuCategoryScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  displayOrder: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  menuId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  isActive: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const RecipeVersionWhereInputSchema: z.ZodType<Prisma.RecipeVersionWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RecipeVersionWhereInputSchema),z.lazy(() => RecipeVersionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RecipeVersionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RecipeVersionWhereInputSchema),z.lazy(() => RecipeVersionWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  recipeId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  versionNumber: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  changes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  isActive: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  createdById: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  approvedById: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  approvedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  recipe: z.union([ z.lazy(() => RecipeScalarRelationFilterSchema),z.lazy(() => RecipeWhereInputSchema) ]).optional(),
  ingredients: z.lazy(() => RecipeIngredientListRelationFilterSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionListRelationFilterSchema).optional(),
  createdBy: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  approvedBy: z.union([ z.lazy(() => UserNullableScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
}).strict();

export const RecipeVersionOrderByWithRelationInputSchema: z.ZodType<Prisma.RecipeVersionOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  versionNumber: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  changes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  approvedById: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  approvedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  recipe: z.lazy(() => RecipeOrderByWithRelationInputSchema).optional(),
  ingredients: z.lazy(() => RecipeIngredientOrderByRelationAggregateInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionOrderByRelationAggregateInputSchema).optional(),
  createdBy: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  approvedBy: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const RecipeVersionWhereUniqueInputSchema: z.ZodType<Prisma.RecipeVersionWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    recipeId_versionNumber: z.lazy(() => RecipeVersionRecipeIdVersionNumberCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    recipeId_versionNumber: z.lazy(() => RecipeVersionRecipeIdVersionNumberCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  recipeId_versionNumber: z.lazy(() => RecipeVersionRecipeIdVersionNumberCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => RecipeVersionWhereInputSchema),z.lazy(() => RecipeVersionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RecipeVersionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RecipeVersionWhereInputSchema),z.lazy(() => RecipeVersionWhereInputSchema).array() ]).optional(),
  recipeId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  versionNumber: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  changes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  isActive: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  createdById: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  approvedById: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  approvedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  recipe: z.union([ z.lazy(() => RecipeScalarRelationFilterSchema),z.lazy(() => RecipeWhereInputSchema) ]).optional(),
  ingredients: z.lazy(() => RecipeIngredientListRelationFilterSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionListRelationFilterSchema).optional(),
  createdBy: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  approvedBy: z.union([ z.lazy(() => UserNullableScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
}).strict());

export const RecipeVersionOrderByWithAggregationInputSchema: z.ZodType<Prisma.RecipeVersionOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  versionNumber: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  changes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  approvedById: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  approvedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => RecipeVersionCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => RecipeVersionAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => RecipeVersionMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => RecipeVersionMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => RecipeVersionSumOrderByAggregateInputSchema).optional()
}).strict();

export const RecipeVersionScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.RecipeVersionScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => RecipeVersionScalarWhereWithAggregatesInputSchema),z.lazy(() => RecipeVersionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => RecipeVersionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RecipeVersionScalarWhereWithAggregatesInputSchema),z.lazy(() => RecipeVersionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  recipeId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  versionNumber: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  changes: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  isActive: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  createdById: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  approvedById: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  approvedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const EquipmentWhereInputSchema: z.ZodType<Prisma.EquipmentWhereInput> = z.object({
  AND: z.union([ z.lazy(() => EquipmentWhereInputSchema),z.lazy(() => EquipmentWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EquipmentWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EquipmentWhereInputSchema),z.lazy(() => EquipmentWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  model: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  serialNumber: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  purchaseDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  lastMaintenance: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  nextMaintenance: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  status: z.union([ z.lazy(() => EnumEquipmentStatusFilterSchema),z.lazy(() => EquipmentStatusSchema) ]).optional(),
  location: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  restaurantId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  restaurant: z.union([ z.lazy(() => RestaurantScalarRelationFilterSchema),z.lazy(() => RestaurantWhereInputSchema) ]).optional(),
  recipes: z.lazy(() => RecipeEquipmentListRelationFilterSchema).optional(),
  maintenanceLogs: z.lazy(() => MaintenanceLogListRelationFilterSchema).optional()
}).strict();

export const EquipmentOrderByWithRelationInputSchema: z.ZodType<Prisma.EquipmentOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  model: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  serialNumber: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  purchaseDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  lastMaintenance: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  nextMaintenance: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  location: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  restaurant: z.lazy(() => RestaurantOrderByWithRelationInputSchema).optional(),
  recipes: z.lazy(() => RecipeEquipmentOrderByRelationAggregateInputSchema).optional(),
  maintenanceLogs: z.lazy(() => MaintenanceLogOrderByRelationAggregateInputSchema).optional()
}).strict();

export const EquipmentWhereUniqueInputSchema: z.ZodType<Prisma.EquipmentWhereUniqueInput> = z.object({
  id: z.number().int()
})
.and(z.object({
  id: z.number().int().optional(),
  AND: z.union([ z.lazy(() => EquipmentWhereInputSchema),z.lazy(() => EquipmentWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EquipmentWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EquipmentWhereInputSchema),z.lazy(() => EquipmentWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  model: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  serialNumber: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  purchaseDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  lastMaintenance: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  nextMaintenance: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  status: z.union([ z.lazy(() => EnumEquipmentStatusFilterSchema),z.lazy(() => EquipmentStatusSchema) ]).optional(),
  location: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  restaurantId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  restaurant: z.union([ z.lazy(() => RestaurantScalarRelationFilterSchema),z.lazy(() => RestaurantWhereInputSchema) ]).optional(),
  recipes: z.lazy(() => RecipeEquipmentListRelationFilterSchema).optional(),
  maintenanceLogs: z.lazy(() => MaintenanceLogListRelationFilterSchema).optional()
}).strict());

export const EquipmentOrderByWithAggregationInputSchema: z.ZodType<Prisma.EquipmentOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  model: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  serialNumber: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  purchaseDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  lastMaintenance: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  nextMaintenance: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  location: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => EquipmentCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => EquipmentAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => EquipmentMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => EquipmentMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => EquipmentSumOrderByAggregateInputSchema).optional()
}).strict();

export const EquipmentScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.EquipmentScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => EquipmentScalarWhereWithAggregatesInputSchema),z.lazy(() => EquipmentScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => EquipmentScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EquipmentScalarWhereWithAggregatesInputSchema),z.lazy(() => EquipmentScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  model: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  serialNumber: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  purchaseDate: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  lastMaintenance: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  nextMaintenance: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  status: z.union([ z.lazy(() => EnumEquipmentStatusWithAggregatesFilterSchema),z.lazy(() => EquipmentStatusSchema) ]).optional(),
  location: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  restaurantId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const RecipeEquipmentWhereInputSchema: z.ZodType<Prisma.RecipeEquipmentWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RecipeEquipmentWhereInputSchema),z.lazy(() => RecipeEquipmentWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RecipeEquipmentWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RecipeEquipmentWhereInputSchema),z.lazy(() => RecipeEquipmentWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  recipeId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  equipmentId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  recipeInstructionId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  recipe: z.union([ z.lazy(() => RecipeScalarRelationFilterSchema),z.lazy(() => RecipeWhereInputSchema) ]).optional(),
  equipment: z.union([ z.lazy(() => EquipmentScalarRelationFilterSchema),z.lazy(() => EquipmentWhereInputSchema) ]).optional(),
  RecipeInstruction: z.union([ z.lazy(() => RecipeInstructionNullableScalarRelationFilterSchema),z.lazy(() => RecipeInstructionWhereInputSchema) ]).optional().nullable(),
}).strict();

export const RecipeEquipmentOrderByWithRelationInputSchema: z.ZodType<Prisma.RecipeEquipmentOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  equipmentId: z.lazy(() => SortOrderSchema).optional(),
  notes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  recipeInstructionId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  recipe: z.lazy(() => RecipeOrderByWithRelationInputSchema).optional(),
  equipment: z.lazy(() => EquipmentOrderByWithRelationInputSchema).optional(),
  RecipeInstruction: z.lazy(() => RecipeInstructionOrderByWithRelationInputSchema).optional()
}).strict();

export const RecipeEquipmentWhereUniqueInputSchema: z.ZodType<Prisma.RecipeEquipmentWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    recipeId_equipmentId: z.lazy(() => RecipeEquipmentRecipeIdEquipmentIdCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    recipeId_equipmentId: z.lazy(() => RecipeEquipmentRecipeIdEquipmentIdCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  recipeId_equipmentId: z.lazy(() => RecipeEquipmentRecipeIdEquipmentIdCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => RecipeEquipmentWhereInputSchema),z.lazy(() => RecipeEquipmentWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RecipeEquipmentWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RecipeEquipmentWhereInputSchema),z.lazy(() => RecipeEquipmentWhereInputSchema).array() ]).optional(),
  recipeId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  equipmentId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  recipeInstructionId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  recipe: z.union([ z.lazy(() => RecipeScalarRelationFilterSchema),z.lazy(() => RecipeWhereInputSchema) ]).optional(),
  equipment: z.union([ z.lazy(() => EquipmentScalarRelationFilterSchema),z.lazy(() => EquipmentWhereInputSchema) ]).optional(),
  RecipeInstruction: z.union([ z.lazy(() => RecipeInstructionNullableScalarRelationFilterSchema),z.lazy(() => RecipeInstructionWhereInputSchema) ]).optional().nullable(),
}).strict());

export const RecipeEquipmentOrderByWithAggregationInputSchema: z.ZodType<Prisma.RecipeEquipmentOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  equipmentId: z.lazy(() => SortOrderSchema).optional(),
  notes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  recipeInstructionId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => RecipeEquipmentCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => RecipeEquipmentAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => RecipeEquipmentMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => RecipeEquipmentMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => RecipeEquipmentSumOrderByAggregateInputSchema).optional()
}).strict();

export const RecipeEquipmentScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.RecipeEquipmentScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => RecipeEquipmentScalarWhereWithAggregatesInputSchema),z.lazy(() => RecipeEquipmentScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => RecipeEquipmentScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RecipeEquipmentScalarWhereWithAggregatesInputSchema),z.lazy(() => RecipeEquipmentScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  recipeId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  equipmentId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  notes: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  recipeInstructionId: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
}).strict();

export const MaintenanceLogWhereInputSchema: z.ZodType<Prisma.MaintenanceLogWhereInput> = z.object({
  AND: z.union([ z.lazy(() => MaintenanceLogWhereInputSchema),z.lazy(() => MaintenanceLogWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MaintenanceLogWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MaintenanceLogWhereInputSchema),z.lazy(() => MaintenanceLogWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  equipmentId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  type: z.union([ z.lazy(() => EnumMaintenanceTypeFilterSchema),z.lazy(() => MaintenanceTypeSchema) ]).optional(),
  description: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  cost: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  performedBy: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  equipment: z.union([ z.lazy(() => EquipmentScalarRelationFilterSchema),z.lazy(() => EquipmentWhereInputSchema) ]).optional(),
}).strict();

export const MaintenanceLogOrderByWithRelationInputSchema: z.ZodType<Prisma.MaintenanceLogOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  equipmentId: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  cost: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  performedBy: z.lazy(() => SortOrderSchema).optional(),
  notes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  equipment: z.lazy(() => EquipmentOrderByWithRelationInputSchema).optional()
}).strict();

export const MaintenanceLogWhereUniqueInputSchema: z.ZodType<Prisma.MaintenanceLogWhereUniqueInput> = z.object({
  id: z.number().int()
})
.and(z.object({
  id: z.number().int().optional(),
  AND: z.union([ z.lazy(() => MaintenanceLogWhereInputSchema),z.lazy(() => MaintenanceLogWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MaintenanceLogWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MaintenanceLogWhereInputSchema),z.lazy(() => MaintenanceLogWhereInputSchema).array() ]).optional(),
  equipmentId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  type: z.union([ z.lazy(() => EnumMaintenanceTypeFilterSchema),z.lazy(() => MaintenanceTypeSchema) ]).optional(),
  description: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  cost: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  performedBy: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  equipment: z.union([ z.lazy(() => EquipmentScalarRelationFilterSchema),z.lazy(() => EquipmentWhereInputSchema) ]).optional(),
}).strict());

export const MaintenanceLogOrderByWithAggregationInputSchema: z.ZodType<Prisma.MaintenanceLogOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  equipmentId: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  cost: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  performedBy: z.lazy(() => SortOrderSchema).optional(),
  notes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => MaintenanceLogCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => MaintenanceLogAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => MaintenanceLogMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => MaintenanceLogMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => MaintenanceLogSumOrderByAggregateInputSchema).optional()
}).strict();

export const MaintenanceLogScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.MaintenanceLogScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => MaintenanceLogScalarWhereWithAggregatesInputSchema),z.lazy(() => MaintenanceLogScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => MaintenanceLogScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MaintenanceLogScalarWhereWithAggregatesInputSchema),z.lazy(() => MaintenanceLogScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  equipmentId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  type: z.union([ z.lazy(() => EnumMaintenanceTypeWithAggregatesFilterSchema),z.lazy(() => MaintenanceTypeSchema) ]).optional(),
  description: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  cost: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  performedBy: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  notes: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const QualityChecklistWhereInputSchema: z.ZodType<Prisma.QualityChecklistWhereInput> = z.object({
  AND: z.union([ z.lazy(() => QualityChecklistWhereInputSchema),z.lazy(() => QualityChecklistWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => QualityChecklistWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => QualityChecklistWhereInputSchema),z.lazy(() => QualityChecklistWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  restaurantId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  frequency: z.union([ z.lazy(() => EnumChecklistFrequencyFilterSchema),z.lazy(() => ChecklistFrequencySchema) ]).optional(),
  isActive: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  restaurant: z.union([ z.lazy(() => RestaurantScalarRelationFilterSchema),z.lazy(() => RestaurantWhereInputSchema) ]).optional(),
  items: z.lazy(() => ChecklistItemListRelationFilterSchema).optional(),
  completions: z.lazy(() => ChecklistCompleteListRelationFilterSchema).optional()
}).strict();

export const QualityChecklistOrderByWithRelationInputSchema: z.ZodType<Prisma.QualityChecklistOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  frequency: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  restaurant: z.lazy(() => RestaurantOrderByWithRelationInputSchema).optional(),
  items: z.lazy(() => ChecklistItemOrderByRelationAggregateInputSchema).optional(),
  completions: z.lazy(() => ChecklistCompleteOrderByRelationAggregateInputSchema).optional()
}).strict();

export const QualityChecklistWhereUniqueInputSchema: z.ZodType<Prisma.QualityChecklistWhereUniqueInput> = z.object({
  id: z.number().int()
})
.and(z.object({
  id: z.number().int().optional(),
  AND: z.union([ z.lazy(() => QualityChecklistWhereInputSchema),z.lazy(() => QualityChecklistWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => QualityChecklistWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => QualityChecklistWhereInputSchema),z.lazy(() => QualityChecklistWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  restaurantId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  frequency: z.union([ z.lazy(() => EnumChecklistFrequencyFilterSchema),z.lazy(() => ChecklistFrequencySchema) ]).optional(),
  isActive: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  restaurant: z.union([ z.lazy(() => RestaurantScalarRelationFilterSchema),z.lazy(() => RestaurantWhereInputSchema) ]).optional(),
  items: z.lazy(() => ChecklistItemListRelationFilterSchema).optional(),
  completions: z.lazy(() => ChecklistCompleteListRelationFilterSchema).optional()
}).strict());

export const QualityChecklistOrderByWithAggregationInputSchema: z.ZodType<Prisma.QualityChecklistOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  frequency: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => QualityChecklistCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => QualityChecklistAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => QualityChecklistMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => QualityChecklistMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => QualityChecklistSumOrderByAggregateInputSchema).optional()
}).strict();

export const QualityChecklistScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.QualityChecklistScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => QualityChecklistScalarWhereWithAggregatesInputSchema),z.lazy(() => QualityChecklistScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => QualityChecklistScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => QualityChecklistScalarWhereWithAggregatesInputSchema),z.lazy(() => QualityChecklistScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  restaurantId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  frequency: z.union([ z.lazy(() => EnumChecklistFrequencyWithAggregatesFilterSchema),z.lazy(() => ChecklistFrequencySchema) ]).optional(),
  isActive: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ChecklistItemWhereInputSchema: z.ZodType<Prisma.ChecklistItemWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ChecklistItemWhereInputSchema),z.lazy(() => ChecklistItemWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ChecklistItemWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ChecklistItemWhereInputSchema),z.lazy(() => ChecklistItemWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  checklistId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  description: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  order: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  type: z.union([ z.lazy(() => EnumChecklistItemTypeFilterSchema),z.lazy(() => ChecklistItemTypeSchema) ]).optional(),
  requiredPhotos: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  checklist: z.union([ z.lazy(() => QualityChecklistScalarRelationFilterSchema),z.lazy(() => QualityChecklistWhereInputSchema) ]).optional(),
  completions: z.lazy(() => ChecklistItemCompleteListRelationFilterSchema).optional()
}).strict();

export const ChecklistItemOrderByWithRelationInputSchema: z.ZodType<Prisma.ChecklistItemOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  checklistId: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  requiredPhotos: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  checklist: z.lazy(() => QualityChecklistOrderByWithRelationInputSchema).optional(),
  completions: z.lazy(() => ChecklistItemCompleteOrderByRelationAggregateInputSchema).optional()
}).strict();

export const ChecklistItemWhereUniqueInputSchema: z.ZodType<Prisma.ChecklistItemWhereUniqueInput> = z.object({
  id: z.number().int()
})
.and(z.object({
  id: z.number().int().optional(),
  AND: z.union([ z.lazy(() => ChecklistItemWhereInputSchema),z.lazy(() => ChecklistItemWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ChecklistItemWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ChecklistItemWhereInputSchema),z.lazy(() => ChecklistItemWhereInputSchema).array() ]).optional(),
  checklistId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  description: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  order: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  type: z.union([ z.lazy(() => EnumChecklistItemTypeFilterSchema),z.lazy(() => ChecklistItemTypeSchema) ]).optional(),
  requiredPhotos: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  checklist: z.union([ z.lazy(() => QualityChecklistScalarRelationFilterSchema),z.lazy(() => QualityChecklistWhereInputSchema) ]).optional(),
  completions: z.lazy(() => ChecklistItemCompleteListRelationFilterSchema).optional()
}).strict());

export const ChecklistItemOrderByWithAggregationInputSchema: z.ZodType<Prisma.ChecklistItemOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  checklistId: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  requiredPhotos: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ChecklistItemCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => ChecklistItemAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ChecklistItemMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ChecklistItemMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => ChecklistItemSumOrderByAggregateInputSchema).optional()
}).strict();

export const ChecklistItemScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ChecklistItemScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ChecklistItemScalarWhereWithAggregatesInputSchema),z.lazy(() => ChecklistItemScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ChecklistItemScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ChecklistItemScalarWhereWithAggregatesInputSchema),z.lazy(() => ChecklistItemScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  checklistId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  description: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  order: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  type: z.union([ z.lazy(() => EnumChecklistItemTypeWithAggregatesFilterSchema),z.lazy(() => ChecklistItemTypeSchema) ]).optional(),
  requiredPhotos: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ChecklistCompleteWhereInputSchema: z.ZodType<Prisma.ChecklistCompleteWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ChecklistCompleteWhereInputSchema),z.lazy(() => ChecklistCompleteWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ChecklistCompleteWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ChecklistCompleteWhereInputSchema),z.lazy(() => ChecklistCompleteWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  checklistId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  completedById: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  checklist: z.union([ z.lazy(() => QualityChecklistScalarRelationFilterSchema),z.lazy(() => QualityChecklistWhereInputSchema) ]).optional(),
  completedBy: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  items: z.lazy(() => ChecklistItemCompleteListRelationFilterSchema).optional()
}).strict();

export const ChecklistCompleteOrderByWithRelationInputSchema: z.ZodType<Prisma.ChecklistCompleteOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  checklistId: z.lazy(() => SortOrderSchema).optional(),
  completedById: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  notes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  checklist: z.lazy(() => QualityChecklistOrderByWithRelationInputSchema).optional(),
  completedBy: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  items: z.lazy(() => ChecklistItemCompleteOrderByRelationAggregateInputSchema).optional()
}).strict();

export const ChecklistCompleteWhereUniqueInputSchema: z.ZodType<Prisma.ChecklistCompleteWhereUniqueInput> = z.object({
  id: z.number().int()
})
.and(z.object({
  id: z.number().int().optional(),
  AND: z.union([ z.lazy(() => ChecklistCompleteWhereInputSchema),z.lazy(() => ChecklistCompleteWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ChecklistCompleteWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ChecklistCompleteWhereInputSchema),z.lazy(() => ChecklistCompleteWhereInputSchema).array() ]).optional(),
  checklistId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  completedById: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  checklist: z.union([ z.lazy(() => QualityChecklistScalarRelationFilterSchema),z.lazy(() => QualityChecklistWhereInputSchema) ]).optional(),
  completedBy: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  items: z.lazy(() => ChecklistItemCompleteListRelationFilterSchema).optional()
}).strict());

export const ChecklistCompleteOrderByWithAggregationInputSchema: z.ZodType<Prisma.ChecklistCompleteOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  checklistId: z.lazy(() => SortOrderSchema).optional(),
  completedById: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  notes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ChecklistCompleteCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => ChecklistCompleteAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ChecklistCompleteMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ChecklistCompleteMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => ChecklistCompleteSumOrderByAggregateInputSchema).optional()
}).strict();

export const ChecklistCompleteScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ChecklistCompleteScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ChecklistCompleteScalarWhereWithAggregatesInputSchema),z.lazy(() => ChecklistCompleteScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ChecklistCompleteScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ChecklistCompleteScalarWhereWithAggregatesInputSchema),z.lazy(() => ChecklistCompleteScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  checklistId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  completedById: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  notes: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ChecklistItemCompleteWhereInputSchema: z.ZodType<Prisma.ChecklistItemCompleteWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ChecklistItemCompleteWhereInputSchema),z.lazy(() => ChecklistItemCompleteWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ChecklistItemCompleteWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ChecklistItemCompleteWhereInputSchema),z.lazy(() => ChecklistItemCompleteWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  checklistCompleteId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  checklistItemId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  status: z.union([ z.lazy(() => EnumChecklistStatusFilterSchema),z.lazy(() => ChecklistStatusSchema) ]).optional(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  photoUrls: z.lazy(() => StringNullableListFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  checklistComplete: z.union([ z.lazy(() => ChecklistCompleteScalarRelationFilterSchema),z.lazy(() => ChecklistCompleteWhereInputSchema) ]).optional(),
  checklistItem: z.union([ z.lazy(() => ChecklistItemScalarRelationFilterSchema),z.lazy(() => ChecklistItemWhereInputSchema) ]).optional(),
}).strict();

export const ChecklistItemCompleteOrderByWithRelationInputSchema: z.ZodType<Prisma.ChecklistItemCompleteOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  checklistCompleteId: z.lazy(() => SortOrderSchema).optional(),
  checklistItemId: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  notes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  photoUrls: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  checklistComplete: z.lazy(() => ChecklistCompleteOrderByWithRelationInputSchema).optional(),
  checklistItem: z.lazy(() => ChecklistItemOrderByWithRelationInputSchema).optional()
}).strict();

export const ChecklistItemCompleteWhereUniqueInputSchema: z.ZodType<Prisma.ChecklistItemCompleteWhereUniqueInput> = z.object({
  id: z.number().int()
})
.and(z.object({
  id: z.number().int().optional(),
  AND: z.union([ z.lazy(() => ChecklistItemCompleteWhereInputSchema),z.lazy(() => ChecklistItemCompleteWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ChecklistItemCompleteWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ChecklistItemCompleteWhereInputSchema),z.lazy(() => ChecklistItemCompleteWhereInputSchema).array() ]).optional(),
  checklistCompleteId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  checklistItemId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  status: z.union([ z.lazy(() => EnumChecklistStatusFilterSchema),z.lazy(() => ChecklistStatusSchema) ]).optional(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  photoUrls: z.lazy(() => StringNullableListFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  checklistComplete: z.union([ z.lazy(() => ChecklistCompleteScalarRelationFilterSchema),z.lazy(() => ChecklistCompleteWhereInputSchema) ]).optional(),
  checklistItem: z.union([ z.lazy(() => ChecklistItemScalarRelationFilterSchema),z.lazy(() => ChecklistItemWhereInputSchema) ]).optional(),
}).strict());

export const ChecklistItemCompleteOrderByWithAggregationInputSchema: z.ZodType<Prisma.ChecklistItemCompleteOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  checklistCompleteId: z.lazy(() => SortOrderSchema).optional(),
  checklistItemId: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  notes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  photoUrls: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ChecklistItemCompleteCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => ChecklistItemCompleteAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ChecklistItemCompleteMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ChecklistItemCompleteMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => ChecklistItemCompleteSumOrderByAggregateInputSchema).optional()
}).strict();

export const ChecklistItemCompleteScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ChecklistItemCompleteScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ChecklistItemCompleteScalarWhereWithAggregatesInputSchema),z.lazy(() => ChecklistItemCompleteScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ChecklistItemCompleteScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ChecklistItemCompleteScalarWhereWithAggregatesInputSchema),z.lazy(() => ChecklistItemCompleteScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  checklistCompleteId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  checklistItemId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  status: z.union([ z.lazy(() => EnumChecklistStatusWithAggregatesFilterSchema),z.lazy(() => ChecklistStatusSchema) ]).optional(),
  notes: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  photoUrls: z.lazy(() => StringNullableListFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const SupplierPriceHistoryWhereInputSchema: z.ZodType<Prisma.SupplierPriceHistoryWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SupplierPriceHistoryWhereInputSchema),z.lazy(() => SupplierPriceHistoryWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SupplierPriceHistoryWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SupplierPriceHistoryWhereInputSchema),z.lazy(() => SupplierPriceHistoryWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  vendorId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  ingredientId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  price: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  unit: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  startDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  endDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  vendor: z.union([ z.lazy(() => VendorScalarRelationFilterSchema),z.lazy(() => VendorWhereInputSchema) ]).optional(),
  ingredient: z.union([ z.lazy(() => IngredientScalarRelationFilterSchema),z.lazy(() => IngredientWhereInputSchema) ]).optional(),
}).strict();

export const SupplierPriceHistoryOrderByWithRelationInputSchema: z.ZodType<Prisma.SupplierPriceHistoryOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  vendorId: z.lazy(() => SortOrderSchema).optional(),
  ingredientId: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  startDate: z.lazy(() => SortOrderSchema).optional(),
  endDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  notes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  vendor: z.lazy(() => VendorOrderByWithRelationInputSchema).optional(),
  ingredient: z.lazy(() => IngredientOrderByWithRelationInputSchema).optional()
}).strict();

export const SupplierPriceHistoryWhereUniqueInputSchema: z.ZodType<Prisma.SupplierPriceHistoryWhereUniqueInput> = z.object({
  id: z.number().int()
})
.and(z.object({
  id: z.number().int().optional(),
  AND: z.union([ z.lazy(() => SupplierPriceHistoryWhereInputSchema),z.lazy(() => SupplierPriceHistoryWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SupplierPriceHistoryWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SupplierPriceHistoryWhereInputSchema),z.lazy(() => SupplierPriceHistoryWhereInputSchema).array() ]).optional(),
  vendorId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  ingredientId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  price: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  unit: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  startDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  endDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  vendor: z.union([ z.lazy(() => VendorScalarRelationFilterSchema),z.lazy(() => VendorWhereInputSchema) ]).optional(),
  ingredient: z.union([ z.lazy(() => IngredientScalarRelationFilterSchema),z.lazy(() => IngredientWhereInputSchema) ]).optional(),
}).strict());

export const SupplierPriceHistoryOrderByWithAggregationInputSchema: z.ZodType<Prisma.SupplierPriceHistoryOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  vendorId: z.lazy(() => SortOrderSchema).optional(),
  ingredientId: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  startDate: z.lazy(() => SortOrderSchema).optional(),
  endDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  notes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => SupplierPriceHistoryCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => SupplierPriceHistoryAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => SupplierPriceHistoryMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => SupplierPriceHistoryMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => SupplierPriceHistorySumOrderByAggregateInputSchema).optional()
}).strict();

export const SupplierPriceHistoryScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.SupplierPriceHistoryScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => SupplierPriceHistoryScalarWhereWithAggregatesInputSchema),z.lazy(() => SupplierPriceHistoryScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => SupplierPriceHistoryScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SupplierPriceHistoryScalarWhereWithAggregatesInputSchema),z.lazy(() => SupplierPriceHistoryScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  vendorId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  ingredientId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  price: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  unit: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  startDate: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  endDate: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  notes: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const CustomerFeedbackWhereInputSchema: z.ZodType<Prisma.CustomerFeedbackWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CustomerFeedbackWhereInputSchema),z.lazy(() => CustomerFeedbackWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CustomerFeedbackWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CustomerFeedbackWhereInputSchema),z.lazy(() => CustomerFeedbackWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  restaurantId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  menuItemId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  rating: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  comment: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  source: z.union([ z.lazy(() => EnumFeedbackSourceFilterSchema),z.lazy(() => FeedbackSourceSchema) ]).optional(),
  tags: z.lazy(() => StringNullableListFilterSchema).optional(),
  status: z.union([ z.lazy(() => EnumFeedbackStatusFilterSchema),z.lazy(() => FeedbackStatusSchema) ]).optional(),
  responseText: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  respondedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  respondedById: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  restaurant: z.union([ z.lazy(() => RestaurantScalarRelationFilterSchema),z.lazy(() => RestaurantWhereInputSchema) ]).optional(),
  menuItem: z.union([ z.lazy(() => MenuItemNullableScalarRelationFilterSchema),z.lazy(() => MenuItemWhereInputSchema) ]).optional().nullable(),
  respondedBy: z.union([ z.lazy(() => UserNullableScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
}).strict();

export const CustomerFeedbackOrderByWithRelationInputSchema: z.ZodType<Prisma.CustomerFeedbackOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  menuItemId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rating: z.lazy(() => SortOrderSchema).optional(),
  comment: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  source: z.lazy(() => SortOrderSchema).optional(),
  tags: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  responseText: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  respondedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  respondedById: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  restaurant: z.lazy(() => RestaurantOrderByWithRelationInputSchema).optional(),
  menuItem: z.lazy(() => MenuItemOrderByWithRelationInputSchema).optional(),
  respondedBy: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const CustomerFeedbackWhereUniqueInputSchema: z.ZodType<Prisma.CustomerFeedbackWhereUniqueInput> = z.object({
  id: z.number().int()
})
.and(z.object({
  id: z.number().int().optional(),
  AND: z.union([ z.lazy(() => CustomerFeedbackWhereInputSchema),z.lazy(() => CustomerFeedbackWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CustomerFeedbackWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CustomerFeedbackWhereInputSchema),z.lazy(() => CustomerFeedbackWhereInputSchema).array() ]).optional(),
  restaurantId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  menuItemId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  rating: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  comment: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  source: z.union([ z.lazy(() => EnumFeedbackSourceFilterSchema),z.lazy(() => FeedbackSourceSchema) ]).optional(),
  tags: z.lazy(() => StringNullableListFilterSchema).optional(),
  status: z.union([ z.lazy(() => EnumFeedbackStatusFilterSchema),z.lazy(() => FeedbackStatusSchema) ]).optional(),
  responseText: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  respondedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  respondedById: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  restaurant: z.union([ z.lazy(() => RestaurantScalarRelationFilterSchema),z.lazy(() => RestaurantWhereInputSchema) ]).optional(),
  menuItem: z.union([ z.lazy(() => MenuItemNullableScalarRelationFilterSchema),z.lazy(() => MenuItemWhereInputSchema) ]).optional().nullable(),
  respondedBy: z.union([ z.lazy(() => UserNullableScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
}).strict());

export const CustomerFeedbackOrderByWithAggregationInputSchema: z.ZodType<Prisma.CustomerFeedbackOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  menuItemId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  rating: z.lazy(() => SortOrderSchema).optional(),
  comment: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  source: z.lazy(() => SortOrderSchema).optional(),
  tags: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  responseText: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  respondedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  respondedById: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => CustomerFeedbackCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => CustomerFeedbackAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => CustomerFeedbackMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => CustomerFeedbackMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => CustomerFeedbackSumOrderByAggregateInputSchema).optional()
}).strict();

export const CustomerFeedbackScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.CustomerFeedbackScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => CustomerFeedbackScalarWhereWithAggregatesInputSchema),z.lazy(() => CustomerFeedbackScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => CustomerFeedbackScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CustomerFeedbackScalarWhereWithAggregatesInputSchema),z.lazy(() => CustomerFeedbackScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  restaurantId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  menuItemId: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  rating: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  comment: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  source: z.union([ z.lazy(() => EnumFeedbackSourceWithAggregatesFilterSchema),z.lazy(() => FeedbackSourceSchema) ]).optional(),
  tags: z.lazy(() => StringNullableListFilterSchema).optional(),
  status: z.union([ z.lazy(() => EnumFeedbackStatusWithAggregatesFilterSchema),z.lazy(() => FeedbackStatusSchema) ]).optional(),
  responseText: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  respondedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  respondedById: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const DietaryRestrictionWhereInputSchema: z.ZodType<Prisma.DietaryRestrictionWhereInput> = z.object({
  AND: z.union([ z.lazy(() => DietaryRestrictionWhereInputSchema),z.lazy(() => DietaryRestrictionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => DietaryRestrictionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => DietaryRestrictionWhereInputSchema),z.lazy(() => DietaryRestrictionWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  icon: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  menuItems: z.lazy(() => MenuItemListRelationFilterSchema).optional(),
  recipes: z.lazy(() => RecipeListRelationFilterSchema).optional(),
  ingredients: z.lazy(() => IngredientListRelationFilterSchema).optional()
}).strict();

export const DietaryRestrictionOrderByWithRelationInputSchema: z.ZodType<Prisma.DietaryRestrictionOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  icon: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  menuItems: z.lazy(() => MenuItemOrderByRelationAggregateInputSchema).optional(),
  recipes: z.lazy(() => RecipeOrderByRelationAggregateInputSchema).optional(),
  ingredients: z.lazy(() => IngredientOrderByRelationAggregateInputSchema).optional()
}).strict();

export const DietaryRestrictionWhereUniqueInputSchema: z.ZodType<Prisma.DietaryRestrictionWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    name: z.string()
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    name: z.string(),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  name: z.string().optional(),
  AND: z.union([ z.lazy(() => DietaryRestrictionWhereInputSchema),z.lazy(() => DietaryRestrictionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => DietaryRestrictionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => DietaryRestrictionWhereInputSchema),z.lazy(() => DietaryRestrictionWhereInputSchema).array() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  icon: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  menuItems: z.lazy(() => MenuItemListRelationFilterSchema).optional(),
  recipes: z.lazy(() => RecipeListRelationFilterSchema).optional(),
  ingredients: z.lazy(() => IngredientListRelationFilterSchema).optional()
}).strict());

export const DietaryRestrictionOrderByWithAggregationInputSchema: z.ZodType<Prisma.DietaryRestrictionOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  icon: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => DietaryRestrictionCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => DietaryRestrictionAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => DietaryRestrictionMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => DietaryRestrictionMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => DietaryRestrictionSumOrderByAggregateInputSchema).optional()
}).strict();

export const DietaryRestrictionScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.DietaryRestrictionScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => DietaryRestrictionScalarWhereWithAggregatesInputSchema),z.lazy(() => DietaryRestrictionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => DietaryRestrictionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => DietaryRestrictionScalarWhereWithAggregatesInputSchema),z.lazy(() => DietaryRestrictionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  icon: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const RecipeTagWhereInputSchema: z.ZodType<Prisma.RecipeTagWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RecipeTagWhereInputSchema),z.lazy(() => RecipeTagWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RecipeTagWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RecipeTagWhereInputSchema),z.lazy(() => RecipeTagWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  recipes: z.lazy(() => RecipeListRelationFilterSchema).optional()
}).strict();

export const RecipeTagOrderByWithRelationInputSchema: z.ZodType<Prisma.RecipeTagOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  recipes: z.lazy(() => RecipeOrderByRelationAggregateInputSchema).optional()
}).strict();

export const RecipeTagWhereUniqueInputSchema: z.ZodType<Prisma.RecipeTagWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    name: z.string()
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    name: z.string(),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  name: z.string().optional(),
  AND: z.union([ z.lazy(() => RecipeTagWhereInputSchema),z.lazy(() => RecipeTagWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RecipeTagWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RecipeTagWhereInputSchema),z.lazy(() => RecipeTagWhereInputSchema).array() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  recipes: z.lazy(() => RecipeListRelationFilterSchema).optional()
}).strict());

export const RecipeTagOrderByWithAggregationInputSchema: z.ZodType<Prisma.RecipeTagOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => RecipeTagCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => RecipeTagAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => RecipeTagMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => RecipeTagMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => RecipeTagSumOrderByAggregateInputSchema).optional()
}).strict();

export const RecipeTagScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.RecipeTagScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => RecipeTagScalarWhereWithAggregatesInputSchema),z.lazy(() => RecipeTagScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => RecipeTagScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RecipeTagScalarWhereWithAggregatesInputSchema),z.lazy(() => RecipeTagScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const LeftoverItemWhereInputSchema: z.ZodType<Prisma.LeftoverItemWhereInput> = z.object({
  AND: z.union([ z.lazy(() => LeftoverItemWhereInputSchema),z.lazy(() => LeftoverItemWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LeftoverItemWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LeftoverItemWhereInputSchema),z.lazy(() => LeftoverItemWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  restaurantId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  menuItemId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  quantity: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  reason: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  recordedById: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  restaurant: z.union([ z.lazy(() => RestaurantScalarRelationFilterSchema),z.lazy(() => RestaurantWhereInputSchema) ]).optional(),
  menuItem: z.union([ z.lazy(() => MenuItemScalarRelationFilterSchema),z.lazy(() => MenuItemWhereInputSchema) ]).optional(),
  recordedBy: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const LeftoverItemOrderByWithRelationInputSchema: z.ZodType<Prisma.LeftoverItemOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  menuItemId: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  reason: z.lazy(() => SortOrderSchema).optional(),
  recordedById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  restaurant: z.lazy(() => RestaurantOrderByWithRelationInputSchema).optional(),
  menuItem: z.lazy(() => MenuItemOrderByWithRelationInputSchema).optional(),
  recordedBy: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const LeftoverItemWhereUniqueInputSchema: z.ZodType<Prisma.LeftoverItemWhereUniqueInput> = z.object({
  id: z.number().int()
})
.and(z.object({
  id: z.number().int().optional(),
  AND: z.union([ z.lazy(() => LeftoverItemWhereInputSchema),z.lazy(() => LeftoverItemWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LeftoverItemWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LeftoverItemWhereInputSchema),z.lazy(() => LeftoverItemWhereInputSchema).array() ]).optional(),
  restaurantId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  menuItemId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  quantity: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  reason: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  recordedById: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  restaurant: z.union([ z.lazy(() => RestaurantScalarRelationFilterSchema),z.lazy(() => RestaurantWhereInputSchema) ]).optional(),
  menuItem: z.union([ z.lazy(() => MenuItemScalarRelationFilterSchema),z.lazy(() => MenuItemWhereInputSchema) ]).optional(),
  recordedBy: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const LeftoverItemOrderByWithAggregationInputSchema: z.ZodType<Prisma.LeftoverItemOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  menuItemId: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  reason: z.lazy(() => SortOrderSchema).optional(),
  recordedById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => LeftoverItemCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => LeftoverItemAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => LeftoverItemMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => LeftoverItemMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => LeftoverItemSumOrderByAggregateInputSchema).optional()
}).strict();

export const LeftoverItemScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.LeftoverItemScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => LeftoverItemScalarWhereWithAggregatesInputSchema),z.lazy(() => LeftoverItemScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => LeftoverItemScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LeftoverItemScalarWhereWithAggregatesInputSchema),z.lazy(() => LeftoverItemScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  restaurantId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  menuItemId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  quantity: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  reason: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  recordedById: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const WasteRecordWhereInputSchema: z.ZodType<Prisma.WasteRecordWhereInput> = z.object({
  AND: z.union([ z.lazy(() => WasteRecordWhereInputSchema),z.lazy(() => WasteRecordWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => WasteRecordWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => WasteRecordWhereInputSchema),z.lazy(() => WasteRecordWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  restaurantId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  ingredientId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  quantity: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  unit: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  reason: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  recordedById: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  restaurant: z.union([ z.lazy(() => RestaurantScalarRelationFilterSchema),z.lazy(() => RestaurantWhereInputSchema) ]).optional(),
  ingrediente: z.union([ z.lazy(() => IngredientScalarRelationFilterSchema),z.lazy(() => IngredientWhereInputSchema) ]).optional(),
  recordedBy: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const WasteRecordOrderByWithRelationInputSchema: z.ZodType<Prisma.WasteRecordOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  ingredientId: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  reason: z.lazy(() => SortOrderSchema).optional(),
  recordedById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  restaurant: z.lazy(() => RestaurantOrderByWithRelationInputSchema).optional(),
  ingrediente: z.lazy(() => IngredientOrderByWithRelationInputSchema).optional(),
  recordedBy: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const WasteRecordWhereUniqueInputSchema: z.ZodType<Prisma.WasteRecordWhereUniqueInput> = z.object({
  id: z.number().int()
})
.and(z.object({
  id: z.number().int().optional(),
  AND: z.union([ z.lazy(() => WasteRecordWhereInputSchema),z.lazy(() => WasteRecordWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => WasteRecordWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => WasteRecordWhereInputSchema),z.lazy(() => WasteRecordWhereInputSchema).array() ]).optional(),
  restaurantId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  ingredientId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  quantity: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  unit: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  reason: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  recordedById: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  restaurant: z.union([ z.lazy(() => RestaurantScalarRelationFilterSchema),z.lazy(() => RestaurantWhereInputSchema) ]).optional(),
  ingrediente: z.union([ z.lazy(() => IngredientScalarRelationFilterSchema),z.lazy(() => IngredientWhereInputSchema) ]).optional(),
  recordedBy: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const WasteRecordOrderByWithAggregationInputSchema: z.ZodType<Prisma.WasteRecordOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  ingredientId: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  reason: z.lazy(() => SortOrderSchema).optional(),
  recordedById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => WasteRecordCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => WasteRecordAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => WasteRecordMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => WasteRecordMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => WasteRecordSumOrderByAggregateInputSchema).optional()
}).strict();

export const WasteRecordScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.WasteRecordScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => WasteRecordScalarWhereWithAggregatesInputSchema),z.lazy(() => WasteRecordScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => WasteRecordScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => WasteRecordScalarWhereWithAggregatesInputSchema),z.lazy(() => WasteRecordScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  restaurantId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  ingredientId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  quantity: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  unit: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  reason: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  recordedById: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ProductionPlanWhereInputSchema: z.ZodType<Prisma.ProductionPlanWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ProductionPlanWhereInputSchema),z.lazy(() => ProductionPlanWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProductionPlanWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProductionPlanWhereInputSchema),z.lazy(() => ProductionPlanWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  restaurantId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  status: z.union([ z.lazy(() => EnumProductionStatusFilterSchema),z.lazy(() => ProductionStatusSchema) ]).optional(),
  createdById: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  restaurant: z.union([ z.lazy(() => RestaurantScalarRelationFilterSchema),z.lazy(() => RestaurantWhereInputSchema) ]).optional(),
  createdBy: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  items: z.lazy(() => ProductionPlanItemListRelationFilterSchema).optional()
}).strict();

export const ProductionPlanOrderByWithRelationInputSchema: z.ZodType<Prisma.ProductionPlanOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  restaurant: z.lazy(() => RestaurantOrderByWithRelationInputSchema).optional(),
  createdBy: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  items: z.lazy(() => ProductionPlanItemOrderByRelationAggregateInputSchema).optional()
}).strict();

export const ProductionPlanWhereUniqueInputSchema: z.ZodType<Prisma.ProductionPlanWhereUniqueInput> = z.object({
  id: z.number().int()
})
.and(z.object({
  id: z.number().int().optional(),
  AND: z.union([ z.lazy(() => ProductionPlanWhereInputSchema),z.lazy(() => ProductionPlanWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProductionPlanWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProductionPlanWhereInputSchema),z.lazy(() => ProductionPlanWhereInputSchema).array() ]).optional(),
  restaurantId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  status: z.union([ z.lazy(() => EnumProductionStatusFilterSchema),z.lazy(() => ProductionStatusSchema) ]).optional(),
  createdById: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  restaurant: z.union([ z.lazy(() => RestaurantScalarRelationFilterSchema),z.lazy(() => RestaurantWhereInputSchema) ]).optional(),
  createdBy: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  items: z.lazy(() => ProductionPlanItemListRelationFilterSchema).optional()
}).strict());

export const ProductionPlanOrderByWithAggregationInputSchema: z.ZodType<Prisma.ProductionPlanOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ProductionPlanCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => ProductionPlanAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ProductionPlanMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ProductionPlanMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => ProductionPlanSumOrderByAggregateInputSchema).optional()
}).strict();

export const ProductionPlanScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ProductionPlanScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ProductionPlanScalarWhereWithAggregatesInputSchema),z.lazy(() => ProductionPlanScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProductionPlanScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProductionPlanScalarWhereWithAggregatesInputSchema),z.lazy(() => ProductionPlanScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  restaurantId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  status: z.union([ z.lazy(() => EnumProductionStatusWithAggregatesFilterSchema),z.lazy(() => ProductionStatusSchema) ]).optional(),
  createdById: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ProductionPlanItemWhereInputSchema: z.ZodType<Prisma.ProductionPlanItemWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ProductionPlanItemWhereInputSchema),z.lazy(() => ProductionPlanItemWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProductionPlanItemWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProductionPlanItemWhereInputSchema),z.lazy(() => ProductionPlanItemWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  productionPlanId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  recipeId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  quantity: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  unit: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  assignedToId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  productionPlan: z.union([ z.lazy(() => ProductionPlanScalarRelationFilterSchema),z.lazy(() => ProductionPlanWhereInputSchema) ]).optional(),
  recipe: z.union([ z.lazy(() => RecipeScalarRelationFilterSchema),z.lazy(() => RecipeWhereInputSchema) ]).optional(),
  assignedTo: z.union([ z.lazy(() => UserNullableScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
}).strict();

export const ProductionPlanItemOrderByWithRelationInputSchema: z.ZodType<Prisma.ProductionPlanItemOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  productionPlanId: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  assignedToId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  productionPlan: z.lazy(() => ProductionPlanOrderByWithRelationInputSchema).optional(),
  recipe: z.lazy(() => RecipeOrderByWithRelationInputSchema).optional(),
  assignedTo: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const ProductionPlanItemWhereUniqueInputSchema: z.ZodType<Prisma.ProductionPlanItemWhereUniqueInput> = z.object({
  id: z.number().int()
})
.and(z.object({
  id: z.number().int().optional(),
  AND: z.union([ z.lazy(() => ProductionPlanItemWhereInputSchema),z.lazy(() => ProductionPlanItemWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProductionPlanItemWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProductionPlanItemWhereInputSchema),z.lazy(() => ProductionPlanItemWhereInputSchema).array() ]).optional(),
  productionPlanId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  recipeId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  quantity: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  unit: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  assignedToId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  productionPlan: z.union([ z.lazy(() => ProductionPlanScalarRelationFilterSchema),z.lazy(() => ProductionPlanWhereInputSchema) ]).optional(),
  recipe: z.union([ z.lazy(() => RecipeScalarRelationFilterSchema),z.lazy(() => RecipeWhereInputSchema) ]).optional(),
  assignedTo: z.union([ z.lazy(() => UserNullableScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
}).strict());

export const ProductionPlanItemOrderByWithAggregationInputSchema: z.ZodType<Prisma.ProductionPlanItemOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  productionPlanId: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  assignedToId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ProductionPlanItemCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => ProductionPlanItemAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ProductionPlanItemMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ProductionPlanItemMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => ProductionPlanItemSumOrderByAggregateInputSchema).optional()
}).strict();

export const ProductionPlanItemScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ProductionPlanItemScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ProductionPlanItemScalarWhereWithAggregatesInputSchema),z.lazy(() => ProductionPlanItemScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProductionPlanItemScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProductionPlanItemScalarWhereWithAggregatesInputSchema),z.lazy(() => ProductionPlanItemScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  productionPlanId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  recipeId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  quantity: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  unit: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  assignedToId: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ShiftTaskWhereInputSchema: z.ZodType<Prisma.ShiftTaskWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ShiftTaskWhereInputSchema),z.lazy(() => ShiftTaskWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ShiftTaskWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ShiftTaskWhereInputSchema),z.lazy(() => ShiftTaskWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  shiftId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  taskType: z.union([ z.lazy(() => EnumTaskTypeFilterSchema),z.lazy(() => TaskTypeSchema) ]).optional(),
  startTime: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  endTime: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  duration: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  shift: z.union([ z.lazy(() => ShiftScalarRelationFilterSchema),z.lazy(() => ShiftWhereInputSchema) ]).optional(),
}).strict();

export const ShiftTaskOrderByWithRelationInputSchema: z.ZodType<Prisma.ShiftTaskOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  shiftId: z.lazy(() => SortOrderSchema).optional(),
  taskType: z.lazy(() => SortOrderSchema).optional(),
  startTime: z.lazy(() => SortOrderSchema).optional(),
  endTime: z.lazy(() => SortOrderSchema).optional(),
  duration: z.lazy(() => SortOrderSchema).optional(),
  notes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  shift: z.lazy(() => ShiftOrderByWithRelationInputSchema).optional()
}).strict();

export const ShiftTaskWhereUniqueInputSchema: z.ZodType<Prisma.ShiftTaskWhereUniqueInput> = z.object({
  id: z.number().int()
})
.and(z.object({
  id: z.number().int().optional(),
  AND: z.union([ z.lazy(() => ShiftTaskWhereInputSchema),z.lazy(() => ShiftTaskWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ShiftTaskWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ShiftTaskWhereInputSchema),z.lazy(() => ShiftTaskWhereInputSchema).array() ]).optional(),
  shiftId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  taskType: z.union([ z.lazy(() => EnumTaskTypeFilterSchema),z.lazy(() => TaskTypeSchema) ]).optional(),
  startTime: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  endTime: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  duration: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  shift: z.union([ z.lazy(() => ShiftScalarRelationFilterSchema),z.lazy(() => ShiftWhereInputSchema) ]).optional(),
}).strict());

export const ShiftTaskOrderByWithAggregationInputSchema: z.ZodType<Prisma.ShiftTaskOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  shiftId: z.lazy(() => SortOrderSchema).optional(),
  taskType: z.lazy(() => SortOrderSchema).optional(),
  startTime: z.lazy(() => SortOrderSchema).optional(),
  endTime: z.lazy(() => SortOrderSchema).optional(),
  duration: z.lazy(() => SortOrderSchema).optional(),
  notes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ShiftTaskCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => ShiftTaskAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ShiftTaskMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ShiftTaskMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => ShiftTaskSumOrderByAggregateInputSchema).optional()
}).strict();

export const ShiftTaskScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ShiftTaskScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ShiftTaskScalarWhereWithAggregatesInputSchema),z.lazy(() => ShiftTaskScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ShiftTaskScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ShiftTaskScalarWhereWithAggregatesInputSchema),z.lazy(() => ShiftTaskScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  shiftId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  taskType: z.union([ z.lazy(() => EnumTaskTypeWithAggregatesFilterSchema),z.lazy(() => TaskTypeSchema) ]).optional(),
  startTime: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  endTime: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  duration: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  notes: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const AvailabilityWhereInputSchema: z.ZodType<Prisma.AvailabilityWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AvailabilityWhereInputSchema),z.lazy(() => AvailabilityWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AvailabilityWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AvailabilityWhereInputSchema),z.lazy(() => AvailabilityWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  userId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  dayOfWeek: z.union([ z.lazy(() => EnumDayOfWeekFilterSchema),z.lazy(() => DayOfWeekSchema) ]).optional(),
  startTime: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  endTime: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const AvailabilityOrderByWithRelationInputSchema: z.ZodType<Prisma.AvailabilityOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  dayOfWeek: z.lazy(() => SortOrderSchema).optional(),
  startTime: z.lazy(() => SortOrderSchema).optional(),
  endTime: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const AvailabilityWhereUniqueInputSchema: z.ZodType<Prisma.AvailabilityWhereUniqueInput> = z.object({
  id: z.number().int()
})
.and(z.object({
  id: z.number().int().optional(),
  AND: z.union([ z.lazy(() => AvailabilityWhereInputSchema),z.lazy(() => AvailabilityWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AvailabilityWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AvailabilityWhereInputSchema),z.lazy(() => AvailabilityWhereInputSchema).array() ]).optional(),
  userId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  dayOfWeek: z.union([ z.lazy(() => EnumDayOfWeekFilterSchema),z.lazy(() => DayOfWeekSchema) ]).optional(),
  startTime: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  endTime: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const AvailabilityOrderByWithAggregationInputSchema: z.ZodType<Prisma.AvailabilityOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  dayOfWeek: z.lazy(() => SortOrderSchema).optional(),
  startTime: z.lazy(() => SortOrderSchema).optional(),
  endTime: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => AvailabilityCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => AvailabilityAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => AvailabilityMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => AvailabilityMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => AvailabilitySumOrderByAggregateInputSchema).optional()
}).strict();

export const AvailabilityScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.AvailabilityScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => AvailabilityScalarWhereWithAggregatesInputSchema),z.lazy(() => AvailabilityScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => AvailabilityScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AvailabilityScalarWhereWithAggregatesInputSchema),z.lazy(() => AvailabilityScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  userId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  dayOfWeek: z.union([ z.lazy(() => EnumDayOfWeekWithAggregatesFilterSchema),z.lazy(() => DayOfWeekSchema) ]).optional(),
  startTime: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  endTime: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const SchedulingConstraintWhereInputSchema: z.ZodType<Prisma.SchedulingConstraintWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SchedulingConstraintWhereInputSchema),z.lazy(() => SchedulingConstraintWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SchedulingConstraintWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SchedulingConstraintWhereInputSchema),z.lazy(() => SchedulingConstraintWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  userId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  constraintsType: z.union([ z.lazy(() => EnumConstraintTypeFilterSchema),z.lazy(() => ConstraintTypeSchema) ]).optional(),
  startTime: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  endTime: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const SchedulingConstraintOrderByWithRelationInputSchema: z.ZodType<Prisma.SchedulingConstraintOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  constraintsType: z.lazy(() => SortOrderSchema).optional(),
  startTime: z.lazy(() => SortOrderSchema).optional(),
  endTime: z.lazy(() => SortOrderSchema).optional(),
  notes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const SchedulingConstraintWhereUniqueInputSchema: z.ZodType<Prisma.SchedulingConstraintWhereUniqueInput> = z.object({
  id: z.number().int()
})
.and(z.object({
  id: z.number().int().optional(),
  AND: z.union([ z.lazy(() => SchedulingConstraintWhereInputSchema),z.lazy(() => SchedulingConstraintWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SchedulingConstraintWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SchedulingConstraintWhereInputSchema),z.lazy(() => SchedulingConstraintWhereInputSchema).array() ]).optional(),
  userId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  constraintsType: z.union([ z.lazy(() => EnumConstraintTypeFilterSchema),z.lazy(() => ConstraintTypeSchema) ]).optional(),
  startTime: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  endTime: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const SchedulingConstraintOrderByWithAggregationInputSchema: z.ZodType<Prisma.SchedulingConstraintOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  constraintsType: z.lazy(() => SortOrderSchema).optional(),
  startTime: z.lazy(() => SortOrderSchema).optional(),
  endTime: z.lazy(() => SortOrderSchema).optional(),
  notes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => SchedulingConstraintCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => SchedulingConstraintAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => SchedulingConstraintMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => SchedulingConstraintMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => SchedulingConstraintSumOrderByAggregateInputSchema).optional()
}).strict();

export const SchedulingConstraintScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.SchedulingConstraintScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => SchedulingConstraintScalarWhereWithAggregatesInputSchema),z.lazy(() => SchedulingConstraintScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => SchedulingConstraintScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SchedulingConstraintScalarWhereWithAggregatesInputSchema),z.lazy(() => SchedulingConstraintScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  userId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  constraintsType: z.union([ z.lazy(() => EnumConstraintTypeWithAggregatesFilterSchema),z.lazy(() => ConstraintTypeSchema) ]).optional(),
  startTime: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  endTime: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  notes: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const InventoryWithdrawalWhereInputSchema: z.ZodType<Prisma.InventoryWithdrawalWhereInput> = z.object({
  AND: z.union([ z.lazy(() => InventoryWithdrawalWhereInputSchema),z.lazy(() => InventoryWithdrawalWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => InventoryWithdrawalWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => InventoryWithdrawalWhereInputSchema),z.lazy(() => InventoryWithdrawalWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  inventoryItemId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  dateTime: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  quantity: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  unit: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  recipeId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  createdById: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  inventoryItem: z.union([ z.lazy(() => InventoryItemScalarRelationFilterSchema),z.lazy(() => InventoryItemWhereInputSchema) ]).optional(),
  recipe: z.union([ z.lazy(() => RecipeNullableScalarRelationFilterSchema),z.lazy(() => RecipeWhereInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const InventoryWithdrawalOrderByWithRelationInputSchema: z.ZodType<Prisma.InventoryWithdrawalOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  inventoryItemId: z.lazy(() => SortOrderSchema).optional(),
  dateTime: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  inventoryItem: z.lazy(() => InventoryItemOrderByWithRelationInputSchema).optional(),
  recipe: z.lazy(() => RecipeOrderByWithRelationInputSchema).optional(),
  createdBy: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const InventoryWithdrawalWhereUniqueInputSchema: z.ZodType<Prisma.InventoryWithdrawalWhereUniqueInput> = z.object({
  id: z.number().int()
})
.and(z.object({
  id: z.number().int().optional(),
  AND: z.union([ z.lazy(() => InventoryWithdrawalWhereInputSchema),z.lazy(() => InventoryWithdrawalWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => InventoryWithdrawalWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => InventoryWithdrawalWhereInputSchema),z.lazy(() => InventoryWithdrawalWhereInputSchema).array() ]).optional(),
  inventoryItemId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  dateTime: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  quantity: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  unit: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  recipeId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  createdById: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  inventoryItem: z.union([ z.lazy(() => InventoryItemScalarRelationFilterSchema),z.lazy(() => InventoryItemWhereInputSchema) ]).optional(),
  recipe: z.union([ z.lazy(() => RecipeNullableScalarRelationFilterSchema),z.lazy(() => RecipeWhereInputSchema) ]).optional().nullable(),
  createdBy: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const InventoryWithdrawalOrderByWithAggregationInputSchema: z.ZodType<Prisma.InventoryWithdrawalOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  inventoryItemId: z.lazy(() => SortOrderSchema).optional(),
  dateTime: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => InventoryWithdrawalCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => InventoryWithdrawalAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => InventoryWithdrawalMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => InventoryWithdrawalMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => InventoryWithdrawalSumOrderByAggregateInputSchema).optional()
}).strict();

export const InventoryWithdrawalScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.InventoryWithdrawalScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => InventoryWithdrawalScalarWhereWithAggregatesInputSchema),z.lazy(() => InventoryWithdrawalScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => InventoryWithdrawalScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => InventoryWithdrawalScalarWhereWithAggregatesInputSchema),z.lazy(() => InventoryWithdrawalScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  inventoryItemId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  dateTime: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  quantity: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  unit: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  recipeId: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  createdById: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const AllergenWhereInputSchema: z.ZodType<Prisma.AllergenWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AllergenWhereInputSchema),z.lazy(() => AllergenWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AllergenWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AllergenWhereInputSchema),z.lazy(() => AllergenWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ingredients: z.lazy(() => IngredientAllergenListRelationFilterSchema).optional()
}).strict();

export const AllergenOrderByWithRelationInputSchema: z.ZodType<Prisma.AllergenOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ingredients: z.lazy(() => IngredientAllergenOrderByRelationAggregateInputSchema).optional()
}).strict();

export const AllergenWhereUniqueInputSchema: z.ZodType<Prisma.AllergenWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    name: z.string()
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    name: z.string(),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  name: z.string().optional(),
  AND: z.union([ z.lazy(() => AllergenWhereInputSchema),z.lazy(() => AllergenWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AllergenWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AllergenWhereInputSchema),z.lazy(() => AllergenWhereInputSchema).array() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ingredients: z.lazy(() => IngredientAllergenListRelationFilterSchema).optional()
}).strict());

export const AllergenOrderByWithAggregationInputSchema: z.ZodType<Prisma.AllergenOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => AllergenCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => AllergenAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => AllergenMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => AllergenMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => AllergenSumOrderByAggregateInputSchema).optional()
}).strict();

export const AllergenScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.AllergenScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => AllergenScalarWhereWithAggregatesInputSchema),z.lazy(() => AllergenScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => AllergenScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AllergenScalarWhereWithAggregatesInputSchema),z.lazy(() => AllergenScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const IngredientAllergenWhereInputSchema: z.ZodType<Prisma.IngredientAllergenWhereInput> = z.object({
  AND: z.union([ z.lazy(() => IngredientAllergenWhereInputSchema),z.lazy(() => IngredientAllergenWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => IngredientAllergenWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => IngredientAllergenWhereInputSchema),z.lazy(() => IngredientAllergenWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  ingredientId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  allergenId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  ingredient: z.union([ z.lazy(() => IngredientScalarRelationFilterSchema),z.lazy(() => IngredientWhereInputSchema) ]).optional(),
  allergen: z.union([ z.lazy(() => AllergenScalarRelationFilterSchema),z.lazy(() => AllergenWhereInputSchema) ]).optional(),
}).strict();

export const IngredientAllergenOrderByWithRelationInputSchema: z.ZodType<Prisma.IngredientAllergenOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  ingredientId: z.lazy(() => SortOrderSchema).optional(),
  allergenId: z.lazy(() => SortOrderSchema).optional(),
  ingredient: z.lazy(() => IngredientOrderByWithRelationInputSchema).optional(),
  allergen: z.lazy(() => AllergenOrderByWithRelationInputSchema).optional()
}).strict();

export const IngredientAllergenWhereUniqueInputSchema: z.ZodType<Prisma.IngredientAllergenWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    ingredientId_allergenId: z.lazy(() => IngredientAllergenIngredientIdAllergenIdCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    ingredientId_allergenId: z.lazy(() => IngredientAllergenIngredientIdAllergenIdCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  ingredientId_allergenId: z.lazy(() => IngredientAllergenIngredientIdAllergenIdCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => IngredientAllergenWhereInputSchema),z.lazy(() => IngredientAllergenWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => IngredientAllergenWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => IngredientAllergenWhereInputSchema),z.lazy(() => IngredientAllergenWhereInputSchema).array() ]).optional(),
  ingredientId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  allergenId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  ingredient: z.union([ z.lazy(() => IngredientScalarRelationFilterSchema),z.lazy(() => IngredientWhereInputSchema) ]).optional(),
  allergen: z.union([ z.lazy(() => AllergenScalarRelationFilterSchema),z.lazy(() => AllergenWhereInputSchema) ]).optional(),
}).strict());

export const IngredientAllergenOrderByWithAggregationInputSchema: z.ZodType<Prisma.IngredientAllergenOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  ingredientId: z.lazy(() => SortOrderSchema).optional(),
  allergenId: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => IngredientAllergenCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => IngredientAllergenAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => IngredientAllergenMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => IngredientAllergenMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => IngredientAllergenSumOrderByAggregateInputSchema).optional()
}).strict();

export const IngredientAllergenScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.IngredientAllergenScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => IngredientAllergenScalarWhereWithAggregatesInputSchema),z.lazy(() => IngredientAllergenScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => IngredientAllergenScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => IngredientAllergenScalarWhereWithAggregatesInputSchema),z.lazy(() => IngredientAllergenScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  ingredientId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  allergenId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
}).strict();

export const NutritionalRecommendationWhereInputSchema: z.ZodType<Prisma.NutritionalRecommendationWhereInput> = z.object({
  AND: z.union([ z.lazy(() => NutritionalRecommendationWhereInputSchema),z.lazy(() => NutritionalRecommendationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => NutritionalRecommendationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => NutritionalRecommendationWhereInputSchema),z.lazy(() => NutritionalRecommendationWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  menuItemId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  recommendation: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  menuItem: z.union([ z.lazy(() => MenuItemScalarRelationFilterSchema),z.lazy(() => MenuItemWhereInputSchema) ]).optional(),
}).strict();

export const NutritionalRecommendationOrderByWithRelationInputSchema: z.ZodType<Prisma.NutritionalRecommendationOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  menuItemId: z.lazy(() => SortOrderSchema).optional(),
  recommendation: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  menuItem: z.lazy(() => MenuItemOrderByWithRelationInputSchema).optional()
}).strict();

export const NutritionalRecommendationWhereUniqueInputSchema: z.ZodType<Prisma.NutritionalRecommendationWhereUniqueInput> = z.object({
  id: z.number().int()
})
.and(z.object({
  id: z.number().int().optional(),
  AND: z.union([ z.lazy(() => NutritionalRecommendationWhereInputSchema),z.lazy(() => NutritionalRecommendationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => NutritionalRecommendationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => NutritionalRecommendationWhereInputSchema),z.lazy(() => NutritionalRecommendationWhereInputSchema).array() ]).optional(),
  menuItemId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  recommendation: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  menuItem: z.union([ z.lazy(() => MenuItemScalarRelationFilterSchema),z.lazy(() => MenuItemWhereInputSchema) ]).optional(),
}).strict());

export const NutritionalRecommendationOrderByWithAggregationInputSchema: z.ZodType<Prisma.NutritionalRecommendationOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  menuItemId: z.lazy(() => SortOrderSchema).optional(),
  recommendation: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => NutritionalRecommendationCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => NutritionalRecommendationAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => NutritionalRecommendationMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => NutritionalRecommendationMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => NutritionalRecommendationSumOrderByAggregateInputSchema).optional()
}).strict();

export const NutritionalRecommendationScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.NutritionalRecommendationScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => NutritionalRecommendationScalarWhereWithAggregatesInputSchema),z.lazy(() => NutritionalRecommendationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => NutritionalRecommendationScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => NutritionalRecommendationScalarWhereWithAggregatesInputSchema),z.lazy(() => NutritionalRecommendationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  menuItemId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  recommendation: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const EarlyAccessWhereInputSchema: z.ZodType<Prisma.EarlyAccessWhereInput> = z.object({
  AND: z.union([ z.lazy(() => EarlyAccessWhereInputSchema),z.lazy(() => EarlyAccessWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EarlyAccessWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EarlyAccessWhereInputSchema),z.lazy(() => EarlyAccessWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  isEmailSent: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const EarlyAccessOrderByWithRelationInputSchema: z.ZodType<Prisma.EarlyAccessOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  isEmailSent: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EarlyAccessWhereUniqueInputSchema: z.ZodType<Prisma.EarlyAccessWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    email: z.string()
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    email: z.string(),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  email: z.string().optional(),
  AND: z.union([ z.lazy(() => EarlyAccessWhereInputSchema),z.lazy(() => EarlyAccessWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EarlyAccessWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EarlyAccessWhereInputSchema),z.lazy(() => EarlyAccessWhereInputSchema).array() ]).optional(),
  isEmailSent: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict());

export const EarlyAccessOrderByWithAggregationInputSchema: z.ZodType<Prisma.EarlyAccessOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  isEmailSent: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => EarlyAccessCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => EarlyAccessAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => EarlyAccessMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => EarlyAccessMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => EarlyAccessSumOrderByAggregateInputSchema).optional()
}).strict();

export const EarlyAccessScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.EarlyAccessScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => EarlyAccessScalarWhereWithAggregatesInputSchema),z.lazy(() => EarlyAccessScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => EarlyAccessScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EarlyAccessScalarWhereWithAggregatesInputSchema),z.lazy(() => EarlyAccessScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  email: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  isEmailSent: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const OrganizationWhereInputSchema: z.ZodType<Prisma.OrganizationWhereInput> = z.object({
  AND: z.union([ z.lazy(() => OrganizationWhereInputSchema),z.lazy(() => OrganizationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrganizationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrganizationWhereInputSchema),z.lazy(() => OrganizationWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  imageUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  restaurants: z.lazy(() => RestaurantListRelationFilterSchema).optional(),
  users: z.lazy(() => UserListRelationFilterSchema).optional()
}).strict();

export const OrganizationOrderByWithRelationInputSchema: z.ZodType<Prisma.OrganizationOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  imageUrl: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  restaurants: z.lazy(() => RestaurantOrderByRelationAggregateInputSchema).optional(),
  users: z.lazy(() => UserOrderByRelationAggregateInputSchema).optional()
}).strict();

export const OrganizationWhereUniqueInputSchema: z.ZodType<Prisma.OrganizationWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    name: z.string()
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    name: z.string(),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  name: z.string().optional(),
  AND: z.union([ z.lazy(() => OrganizationWhereInputSchema),z.lazy(() => OrganizationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrganizationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrganizationWhereInputSchema),z.lazy(() => OrganizationWhereInputSchema).array() ]).optional(),
  imageUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  restaurants: z.lazy(() => RestaurantListRelationFilterSchema).optional(),
  users: z.lazy(() => UserListRelationFilterSchema).optional()
}).strict());

export const OrganizationOrderByWithAggregationInputSchema: z.ZodType<Prisma.OrganizationOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  imageUrl: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => OrganizationCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => OrganizationAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => OrganizationMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => OrganizationMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => OrganizationSumOrderByAggregateInputSchema).optional()
}).strict();

export const OrganizationScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.OrganizationScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema),z.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema),z.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  imageUrl: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const InventoryWhereInputSchema: z.ZodType<Prisma.InventoryWhereInput> = z.object({
  AND: z.union([ z.lazy(() => InventoryWhereInputSchema),z.lazy(() => InventoryWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => InventoryWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => InventoryWhereInputSchema),z.lazy(() => InventoryWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  restaurantId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => EnumInventoryTypeFilterSchema),z.lazy(() => InventoryTypeSchema) ]).optional(),
  isActive: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  restaurant: z.union([ z.lazy(() => RestaurantScalarRelationFilterSchema),z.lazy(() => RestaurantWhereInputSchema) ]).optional(),
  items: z.lazy(() => InventoryItemListRelationFilterSchema).optional(),
  transactions: z.lazy(() => InventoryTransactionListRelationFilterSchema).optional(),
  stockCounts: z.lazy(() => StockCountListRelationFilterSchema).optional()
}).strict();

export const InventoryOrderByWithRelationInputSchema: z.ZodType<Prisma.InventoryOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  restaurant: z.lazy(() => RestaurantOrderByWithRelationInputSchema).optional(),
  items: z.lazy(() => InventoryItemOrderByRelationAggregateInputSchema).optional(),
  transactions: z.lazy(() => InventoryTransactionOrderByRelationAggregateInputSchema).optional(),
  stockCounts: z.lazy(() => StockCountOrderByRelationAggregateInputSchema).optional()
}).strict();

export const InventoryWhereUniqueInputSchema: z.ZodType<Prisma.InventoryWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    restaurantId: z.number().int()
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    restaurantId: z.number().int(),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  restaurantId: z.number().int().optional(),
  AND: z.union([ z.lazy(() => InventoryWhereInputSchema),z.lazy(() => InventoryWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => InventoryWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => InventoryWhereInputSchema),z.lazy(() => InventoryWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => EnumInventoryTypeFilterSchema),z.lazy(() => InventoryTypeSchema) ]).optional(),
  isActive: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  restaurant: z.union([ z.lazy(() => RestaurantScalarRelationFilterSchema),z.lazy(() => RestaurantWhereInputSchema) ]).optional(),
  items: z.lazy(() => InventoryItemListRelationFilterSchema).optional(),
  transactions: z.lazy(() => InventoryTransactionListRelationFilterSchema).optional(),
  stockCounts: z.lazy(() => StockCountListRelationFilterSchema).optional()
}).strict());

export const InventoryOrderByWithAggregationInputSchema: z.ZodType<Prisma.InventoryOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => InventoryCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => InventoryAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => InventoryMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => InventoryMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => InventorySumOrderByAggregateInputSchema).optional()
}).strict();

export const InventoryScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.InventoryScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => InventoryScalarWhereWithAggregatesInputSchema),z.lazy(() => InventoryScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => InventoryScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => InventoryScalarWhereWithAggregatesInputSchema),z.lazy(() => InventoryScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  restaurantId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => EnumInventoryTypeWithAggregatesFilterSchema),z.lazy(() => InventoryTypeSchema) ]).optional(),
  isActive: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const RestaurantWhereInputSchema: z.ZodType<Prisma.RestaurantWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RestaurantWhereInputSchema),z.lazy(() => RestaurantWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RestaurantWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RestaurantWhereInputSchema),z.lazy(() => RestaurantWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  imageUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  address: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  city: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  zipCode: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  state: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  owner: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  foodCost: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  isDeleted: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  deleted: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  organization: z.union([ z.lazy(() => OrganizationNullableScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UserListRelationFilterSchema).optional(),
  cookbooks: z.lazy(() => CookBookListRelationFilterSchema).optional(),
  inventory: z.union([ z.lazy(() => InventoryNullableScalarRelationFilterSchema),z.lazy(() => InventoryWhereInputSchema) ]).optional().nullable(),
  orders: z.lazy(() => OrderListRelationFilterSchema).optional(),
  recipes: z.lazy(() => RecipeListRelationFilterSchema).optional(),
  menus: z.lazy(() => MenuListRelationFilterSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsListRelationFilterSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemListRelationFilterSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordListRelationFilterSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanListRelationFilterSchema).optional(),
  equipments: z.lazy(() => EquipmentListRelationFilterSchema).optional(),
  qualityChecklists: z.lazy(() => QualityChecklistListRelationFilterSchema).optional(),
  customerFeedbacks: z.lazy(() => CustomerFeedbackListRelationFilterSchema).optional()
}).strict();

export const RestaurantOrderByWithRelationInputSchema: z.ZodType<Prisma.RestaurantOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  imageUrl: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  address: z.lazy(() => SortOrderSchema).optional(),
  city: z.lazy(() => SortOrderSchema).optional(),
  zipCode: z.lazy(() => SortOrderSchema).optional(),
  state: z.lazy(() => SortOrderSchema).optional(),
  owner: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  foodCost: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  isDeleted: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  users: z.lazy(() => UserOrderByRelationAggregateInputSchema).optional(),
  cookbooks: z.lazy(() => CookBookOrderByRelationAggregateInputSchema).optional(),
  inventory: z.lazy(() => InventoryOrderByWithRelationInputSchema).optional(),
  orders: z.lazy(() => OrderOrderByRelationAggregateInputSchema).optional(),
  recipes: z.lazy(() => RecipeOrderByRelationAggregateInputSchema).optional(),
  menus: z.lazy(() => MenuOrderByRelationAggregateInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsOrderByRelationAggregateInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemOrderByRelationAggregateInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordOrderByRelationAggregateInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanOrderByRelationAggregateInputSchema).optional(),
  equipments: z.lazy(() => EquipmentOrderByRelationAggregateInputSchema).optional(),
  qualityChecklists: z.lazy(() => QualityChecklistOrderByRelationAggregateInputSchema).optional(),
  customerFeedbacks: z.lazy(() => CustomerFeedbackOrderByRelationAggregateInputSchema).optional()
}).strict();

export const RestaurantWhereUniqueInputSchema: z.ZodType<Prisma.RestaurantWhereUniqueInput> = z.object({
  id: z.number().int()
})
.and(z.object({
  id: z.number().int().optional(),
  AND: z.union([ z.lazy(() => RestaurantWhereInputSchema),z.lazy(() => RestaurantWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RestaurantWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RestaurantWhereInputSchema),z.lazy(() => RestaurantWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  imageUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  address: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  city: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  zipCode: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  state: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  owner: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  foodCost: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  isDeleted: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  deleted: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  organization: z.union([ z.lazy(() => OrganizationNullableScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UserListRelationFilterSchema).optional(),
  cookbooks: z.lazy(() => CookBookListRelationFilterSchema).optional(),
  inventory: z.union([ z.lazy(() => InventoryNullableScalarRelationFilterSchema),z.lazy(() => InventoryWhereInputSchema) ]).optional().nullable(),
  orders: z.lazy(() => OrderListRelationFilterSchema).optional(),
  recipes: z.lazy(() => RecipeListRelationFilterSchema).optional(),
  menus: z.lazy(() => MenuListRelationFilterSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsListRelationFilterSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemListRelationFilterSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordListRelationFilterSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanListRelationFilterSchema).optional(),
  equipments: z.lazy(() => EquipmentListRelationFilterSchema).optional(),
  qualityChecklists: z.lazy(() => QualityChecklistListRelationFilterSchema).optional(),
  customerFeedbacks: z.lazy(() => CustomerFeedbackListRelationFilterSchema).optional()
}).strict());

export const RestaurantOrderByWithAggregationInputSchema: z.ZodType<Prisma.RestaurantOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  imageUrl: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  address: z.lazy(() => SortOrderSchema).optional(),
  city: z.lazy(() => SortOrderSchema).optional(),
  zipCode: z.lazy(() => SortOrderSchema).optional(),
  state: z.lazy(() => SortOrderSchema).optional(),
  owner: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  foodCost: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  isDeleted: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => RestaurantCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => RestaurantAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => RestaurantMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => RestaurantMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => RestaurantSumOrderByAggregateInputSchema).optional()
}).strict();

export const RestaurantScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.RestaurantScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => RestaurantScalarWhereWithAggregatesInputSchema),z.lazy(() => RestaurantScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => RestaurantScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RestaurantScalarWhereWithAggregatesInputSchema),z.lazy(() => RestaurantScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  imageUrl: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  address: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  city: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  zipCode: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  state: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  owner: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  foodCost: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  isDeleted: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  deleted: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const UserWhereInputSchema: z.ZodType<Prisma.UserWhereInput> = z.object({
  AND: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  sub: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  passwordHash: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  firstName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  lastName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  profileImage: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  verified: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  role: z.union([ z.lazy(() => EnumUserRoleFilterSchema),z.lazy(() => UserRoleSchema) ]).optional(),
  organizationId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  restaurantId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationNullableScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional().nullable(),
  restaurant: z.union([ z.lazy(() => RestaurantNullableScalarRelationFilterSchema),z.lazy(() => RestaurantWhereInputSchema) ]).optional().nullable(),
  shifts: z.lazy(() => ShiftListRelationFilterSchema).optional(),
  prepItems: z.lazy(() => PrepItemListRelationFilterSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemListRelationFilterSchema).optional(),
  sessions: z.lazy(() => SessionListRelationFilterSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetListRelationFilterSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemListRelationFilterSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordListRelationFilterSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanListRelationFilterSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemListRelationFilterSchema).optional(),
  availability: z.lazy(() => AvailabilityListRelationFilterSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintListRelationFilterSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalListRelationFilterSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteListRelationFilterSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackListRelationFilterSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionListRelationFilterSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionListRelationFilterSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionListRelationFilterSchema).optional(),
  StockCounts: z.lazy(() => StockCountListRelationFilterSchema).optional()
}).strict();

export const UserOrderByWithRelationInputSchema: z.ZodType<Prisma.UserOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  sub: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  passwordHash: z.lazy(() => SortOrderSchema).optional(),
  firstName: z.lazy(() => SortOrderSchema).optional(),
  lastName: z.lazy(() => SortOrderSchema).optional(),
  profileImage: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  verified: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  restaurantId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  restaurant: z.lazy(() => RestaurantOrderByWithRelationInputSchema).optional(),
  shifts: z.lazy(() => ShiftOrderByRelationAggregateInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemOrderByRelationAggregateInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemOrderByRelationAggregateInputSchema).optional(),
  sessions: z.lazy(() => SessionOrderByRelationAggregateInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetOrderByRelationAggregateInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemOrderByRelationAggregateInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordOrderByRelationAggregateInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanOrderByRelationAggregateInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemOrderByRelationAggregateInputSchema).optional(),
  availability: z.lazy(() => AvailabilityOrderByRelationAggregateInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintOrderByRelationAggregateInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalOrderByRelationAggregateInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteOrderByRelationAggregateInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackOrderByRelationAggregateInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionOrderByRelationAggregateInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionOrderByRelationAggregateInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionOrderByRelationAggregateInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountOrderByRelationAggregateInputSchema).optional()
}).strict();

export const UserWhereUniqueInputSchema: z.ZodType<Prisma.UserWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    email: z.string(),
    sub: z.number().int()
  }),
  z.object({
    id: z.number().int(),
    email: z.string(),
  }),
  z.object({
    id: z.number().int(),
    sub: z.number().int(),
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    email: z.string(),
    sub: z.number().int(),
  }),
  z.object({
    email: z.string(),
  }),
  z.object({
    sub: z.number().int(),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  email: z.string().optional(),
  sub: z.number().int().optional(),
  AND: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  passwordHash: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  firstName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  lastName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  profileImage: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  verified: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  role: z.union([ z.lazy(() => EnumUserRoleFilterSchema),z.lazy(() => UserRoleSchema) ]).optional(),
  organizationId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  restaurantId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationNullableScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional().nullable(),
  restaurant: z.union([ z.lazy(() => RestaurantNullableScalarRelationFilterSchema),z.lazy(() => RestaurantWhereInputSchema) ]).optional().nullable(),
  shifts: z.lazy(() => ShiftListRelationFilterSchema).optional(),
  prepItems: z.lazy(() => PrepItemListRelationFilterSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemListRelationFilterSchema).optional(),
  sessions: z.lazy(() => SessionListRelationFilterSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetListRelationFilterSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemListRelationFilterSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordListRelationFilterSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanListRelationFilterSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemListRelationFilterSchema).optional(),
  availability: z.lazy(() => AvailabilityListRelationFilterSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintListRelationFilterSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalListRelationFilterSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteListRelationFilterSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackListRelationFilterSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionListRelationFilterSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionListRelationFilterSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionListRelationFilterSchema).optional(),
  StockCounts: z.lazy(() => StockCountListRelationFilterSchema).optional()
}).strict());

export const UserOrderByWithAggregationInputSchema: z.ZodType<Prisma.UserOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  sub: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  passwordHash: z.lazy(() => SortOrderSchema).optional(),
  firstName: z.lazy(() => SortOrderSchema).optional(),
  lastName: z.lazy(() => SortOrderSchema).optional(),
  profileImage: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  verified: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  restaurantId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => UserCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => UserAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => UserMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => UserMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => UserSumOrderByAggregateInputSchema).optional()
}).strict();

export const UserScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.UserScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => UserScalarWhereWithAggregatesInputSchema),z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserScalarWhereWithAggregatesInputSchema),z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  email: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  sub: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  passwordHash: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  firstName: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  lastName: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  profileImage: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  verified: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  role: z.union([ z.lazy(() => EnumUserRoleWithAggregatesFilterSchema),z.lazy(() => UserRoleSchema) ]).optional(),
  organizationId: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  restaurantId: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const SessionWhereInputSchema: z.ZodType<Prisma.SessionWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SessionWhereInputSchema),z.lazy(() => SessionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SessionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SessionWhereInputSchema),z.lazy(() => SessionWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  code: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  token: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const SessionOrderByWithRelationInputSchema: z.ZodType<Prisma.SessionOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const SessionWhereUniqueInputSchema: z.ZodType<Prisma.SessionWhereUniqueInput> = z.union([
  z.object({
    id: z.string().uuid(),
    code: z.string(),
    token: z.string()
  }),
  z.object({
    id: z.string().uuid(),
    code: z.string(),
  }),
  z.object({
    id: z.string().uuid(),
    token: z.string(),
  }),
  z.object({
    id: z.string().uuid(),
  }),
  z.object({
    code: z.string(),
    token: z.string(),
  }),
  z.object({
    code: z.string(),
  }),
  z.object({
    token: z.string(),
  }),
])
.and(z.object({
  id: z.string().uuid().optional(),
  code: z.string().optional(),
  token: z.string().optional(),
  AND: z.union([ z.lazy(() => SessionWhereInputSchema),z.lazy(() => SessionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SessionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SessionWhereInputSchema),z.lazy(() => SessionWhereInputSchema).array() ]).optional(),
  userId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const SessionOrderByWithAggregationInputSchema: z.ZodType<Prisma.SessionOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => SessionCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => SessionAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => SessionMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => SessionMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => SessionSumOrderByAggregateInputSchema).optional()
}).strict();

export const SessionScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.SessionScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => SessionScalarWhereWithAggregatesInputSchema),z.lazy(() => SessionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => SessionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SessionScalarWhereWithAggregatesInputSchema),z.lazy(() => SessionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  code: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  token: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const CookBookWhereInputSchema: z.ZodType<Prisma.CookBookWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CookBookWhereInputSchema),z.lazy(() => CookBookWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CookBookWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CookBookWhereInputSchema),z.lazy(() => CookBookWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  imageUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  category: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  restaurantId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  recipes: z.lazy(() => RecipeListRelationFilterSchema).optional(),
  restaurant: z.union([ z.lazy(() => RestaurantNullableScalarRelationFilterSchema),z.lazy(() => RestaurantWhereInputSchema) ]).optional().nullable(),
}).strict();

export const CookBookOrderByWithRelationInputSchema: z.ZodType<Prisma.CookBookOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  imageUrl: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  recipes: z.lazy(() => RecipeOrderByRelationAggregateInputSchema).optional(),
  restaurant: z.lazy(() => RestaurantOrderByWithRelationInputSchema).optional()
}).strict();

export const CookBookWhereUniqueInputSchema: z.ZodType<Prisma.CookBookWhereUniqueInput> = z.object({
  id: z.number().int()
})
.and(z.object({
  id: z.number().int().optional(),
  AND: z.union([ z.lazy(() => CookBookWhereInputSchema),z.lazy(() => CookBookWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CookBookWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CookBookWhereInputSchema),z.lazy(() => CookBookWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  imageUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  category: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  restaurantId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  recipes: z.lazy(() => RecipeListRelationFilterSchema).optional(),
  restaurant: z.union([ z.lazy(() => RestaurantNullableScalarRelationFilterSchema),z.lazy(() => RestaurantWhereInputSchema) ]).optional().nullable(),
}).strict());

export const CookBookOrderByWithAggregationInputSchema: z.ZodType<Prisma.CookBookOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  imageUrl: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => CookBookCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => CookBookAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => CookBookMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => CookBookMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => CookBookSumOrderByAggregateInputSchema).optional()
}).strict();

export const CookBookScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.CookBookScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => CookBookScalarWhereWithAggregatesInputSchema),z.lazy(() => CookBookScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => CookBookScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CookBookScalarWhereWithAggregatesInputSchema),z.lazy(() => CookBookScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  imageUrl: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  category: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  restaurantId: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
}).strict();

export const RecipeWhereInputSchema: z.ZodType<Prisma.RecipeWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RecipeWhereInputSchema),z.lazy(() => RecipeWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RecipeWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RecipeWhereInputSchema),z.lazy(() => RecipeWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  imageUrls: z.lazy(() => StringNullableListFilterSchema).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  servings: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  cookTime: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  prepTime: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  frequency: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  restaurantId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  cookBookId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  foodCost: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  isDeleted: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  isPublished: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  publishedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  language: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  skillLevel: z.union([ z.lazy(() => EnumSkillLevelFilterSchema),z.lazy(() => SkillLevelSchema) ]).optional(),
  category: z.union([ z.lazy(() => EnumCategoryFilterSchema),z.lazy(() => CategorySchema) ]).optional(),
  restaurant: z.union([ z.lazy(() => RestaurantScalarRelationFilterSchema),z.lazy(() => RestaurantWhereInputSchema) ]).optional(),
  cookBook: z.union([ z.lazy(() => CookBookScalarRelationFilterSchema),z.lazy(() => CookBookWhereInputSchema) ]).optional(),
  ingredients: z.lazy(() => RecipeIngredientListRelationFilterSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionListRelationFilterSchema).optional(),
  menuItems: z.lazy(() => MenuItemListRelationFilterSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryListRelationFilterSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryListRelationFilterSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardListRelationFilterSchema).optional(),
  prepItems: z.lazy(() => PrepItemListRelationFilterSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeListRelationFilterSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemListRelationFilterSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalListRelationFilterSchema).optional(),
  tags: z.lazy(() => RecipeTagListRelationFilterSchema).optional(),
  versions: z.lazy(() => RecipeVersionListRelationFilterSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentListRelationFilterSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionListRelationFilterSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureListRelationFilterSchema).optional(),
  yields: z.lazy(() => RecipeYieldListRelationFilterSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostListRelationFilterSchema).optional(),
  nutritionalInfo: z.union([ z.lazy(() => RecipeNutritionNullableScalarRelationFilterSchema),z.lazy(() => RecipeNutritionWhereInputSchema) ]).optional().nullable(),
  criticalPoints: z.lazy(() => RecipeCriticalPointListRelationFilterSchema).optional(),
  storage: z.union([ z.lazy(() => RecipeStorageNullableScalarRelationFilterSchema),z.lazy(() => RecipeStorageWhereInputSchema) ]).optional().nullable(),
  photos: z.lazy(() => RecipePhotoListRelationFilterSchema).optional(),
  recipeStats: z.union([ z.lazy(() => RecipeStatsNullableScalarRelationFilterSchema),z.lazy(() => RecipeStatsWhereInputSchema) ]).optional().nullable(),
}).strict();

export const RecipeOrderByWithRelationInputSchema: z.ZodType<Prisma.RecipeOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  imageUrls: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  servings: z.lazy(() => SortOrderSchema).optional(),
  cookTime: z.lazy(() => SortOrderSchema).optional(),
  prepTime: z.lazy(() => SortOrderSchema).optional(),
  frequency: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  cookBookId: z.lazy(() => SortOrderSchema).optional(),
  foodCost: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  isDeleted: z.lazy(() => SortOrderSchema).optional(),
  isPublished: z.lazy(() => SortOrderSchema).optional(),
  publishedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  language: z.lazy(() => SortOrderSchema).optional(),
  skillLevel: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  restaurant: z.lazy(() => RestaurantOrderByWithRelationInputSchema).optional(),
  cookBook: z.lazy(() => CookBookOrderByWithRelationInputSchema).optional(),
  ingredients: z.lazy(() => RecipeIngredientOrderByRelationAggregateInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionOrderByRelationAggregateInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemOrderByRelationAggregateInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryOrderByRelationAggregateInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryOrderByRelationAggregateInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardOrderByRelationAggregateInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemOrderByRelationAggregateInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeOrderByRelationAggregateInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemOrderByRelationAggregateInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalOrderByRelationAggregateInputSchema).optional(),
  tags: z.lazy(() => RecipeTagOrderByRelationAggregateInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionOrderByRelationAggregateInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentOrderByRelationAggregateInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionOrderByRelationAggregateInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureOrderByRelationAggregateInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldOrderByRelationAggregateInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostOrderByRelationAggregateInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionOrderByWithRelationInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointOrderByRelationAggregateInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageOrderByWithRelationInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoOrderByRelationAggregateInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsOrderByWithRelationInputSchema).optional()
}).strict();

export const RecipeWhereUniqueInputSchema: z.ZodType<Prisma.RecipeWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    name: z.string()
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    name: z.string(),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  name: z.string().optional(),
  AND: z.union([ z.lazy(() => RecipeWhereInputSchema),z.lazy(() => RecipeWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RecipeWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RecipeWhereInputSchema),z.lazy(() => RecipeWhereInputSchema).array() ]).optional(),
  imageUrls: z.lazy(() => StringNullableListFilterSchema).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  servings: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  cookTime: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  prepTime: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  frequency: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  restaurantId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  cookBookId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  foodCost: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  isDeleted: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  isPublished: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  publishedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  language: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  skillLevel: z.union([ z.lazy(() => EnumSkillLevelFilterSchema),z.lazy(() => SkillLevelSchema) ]).optional(),
  category: z.union([ z.lazy(() => EnumCategoryFilterSchema),z.lazy(() => CategorySchema) ]).optional(),
  restaurant: z.union([ z.lazy(() => RestaurantScalarRelationFilterSchema),z.lazy(() => RestaurantWhereInputSchema) ]).optional(),
  cookBook: z.union([ z.lazy(() => CookBookScalarRelationFilterSchema),z.lazy(() => CookBookWhereInputSchema) ]).optional(),
  ingredients: z.lazy(() => RecipeIngredientListRelationFilterSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionListRelationFilterSchema).optional(),
  menuItems: z.lazy(() => MenuItemListRelationFilterSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryListRelationFilterSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryListRelationFilterSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardListRelationFilterSchema).optional(),
  prepItems: z.lazy(() => PrepItemListRelationFilterSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeListRelationFilterSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemListRelationFilterSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalListRelationFilterSchema).optional(),
  tags: z.lazy(() => RecipeTagListRelationFilterSchema).optional(),
  versions: z.lazy(() => RecipeVersionListRelationFilterSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentListRelationFilterSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionListRelationFilterSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureListRelationFilterSchema).optional(),
  yields: z.lazy(() => RecipeYieldListRelationFilterSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostListRelationFilterSchema).optional(),
  nutritionalInfo: z.union([ z.lazy(() => RecipeNutritionNullableScalarRelationFilterSchema),z.lazy(() => RecipeNutritionWhereInputSchema) ]).optional().nullable(),
  criticalPoints: z.lazy(() => RecipeCriticalPointListRelationFilterSchema).optional(),
  storage: z.union([ z.lazy(() => RecipeStorageNullableScalarRelationFilterSchema),z.lazy(() => RecipeStorageWhereInputSchema) ]).optional().nullable(),
  photos: z.lazy(() => RecipePhotoListRelationFilterSchema).optional(),
  recipeStats: z.union([ z.lazy(() => RecipeStatsNullableScalarRelationFilterSchema),z.lazy(() => RecipeStatsWhereInputSchema) ]).optional().nullable(),
}).strict());

export const RecipeOrderByWithAggregationInputSchema: z.ZodType<Prisma.RecipeOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  imageUrls: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  servings: z.lazy(() => SortOrderSchema).optional(),
  cookTime: z.lazy(() => SortOrderSchema).optional(),
  prepTime: z.lazy(() => SortOrderSchema).optional(),
  frequency: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  cookBookId: z.lazy(() => SortOrderSchema).optional(),
  foodCost: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  isDeleted: z.lazy(() => SortOrderSchema).optional(),
  isPublished: z.lazy(() => SortOrderSchema).optional(),
  publishedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  language: z.lazy(() => SortOrderSchema).optional(),
  skillLevel: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => RecipeCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => RecipeAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => RecipeMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => RecipeMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => RecipeSumOrderByAggregateInputSchema).optional()
}).strict();

export const RecipeScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.RecipeScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => RecipeScalarWhereWithAggregatesInputSchema),z.lazy(() => RecipeScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => RecipeScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RecipeScalarWhereWithAggregatesInputSchema),z.lazy(() => RecipeScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  imageUrls: z.lazy(() => StringNullableListFilterSchema).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  servings: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  cookTime: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  prepTime: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  frequency: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  restaurantId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  cookBookId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  foodCost: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  isDeleted: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  isPublished: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  publishedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  language: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  skillLevel: z.union([ z.lazy(() => EnumSkillLevelWithAggregatesFilterSchema),z.lazy(() => SkillLevelSchema) ]).optional(),
  category: z.union([ z.lazy(() => EnumCategoryWithAggregatesFilterSchema),z.lazy(() => CategorySchema) ]).optional(),
}).strict();

export const IngredientWhereInputSchema: z.ZodType<Prisma.IngredientWhereInput> = z.object({
  AND: z.union([ z.lazy(() => IngredientWhereInputSchema),z.lazy(() => IngredientWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => IngredientWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => IngredientWhereInputSchema),z.lazy(() => IngredientWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  category: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  price: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  density: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  dietaryRestrictionId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  calories: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  protein: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  carbohydrates: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  fat: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  fiber: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  sugar: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  sodium: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  usdaFoodId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  nutritionSource: z.union([ z.lazy(() => EnumNutritionSourceNullableFilterSchema),z.lazy(() => NutritionSourceSchema) ]).optional().nullable(),
  nutritionUpdatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  recipeIngredients: z.lazy(() => RecipeIngredientListRelationFilterSchema).optional(),
  inventoryItems: z.lazy(() => InventoryItemListRelationFilterSchema).optional(),
  orderItems: z.lazy(() => OrderItemListRelationFilterSchema).optional(),
  vendors: z.lazy(() => VendorListRelationFilterSchema).optional(),
  WasteRecords: z.lazy(() => WasteRecordListRelationFilterSchema).optional(),
  IngredientAllergens: z.lazy(() => IngredientAllergenListRelationFilterSchema).optional(),
  priceHistory: z.lazy(() => SupplierPriceHistoryListRelationFilterSchema).optional(),
  DietaryRestrictions: z.lazy(() => DietaryRestrictionListRelationFilterSchema).optional()
}).strict();

export const IngredientOrderByWithRelationInputSchema: z.ZodType<Prisma.IngredientOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  density: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  dietaryRestrictionId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  calories: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  protein: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  carbohydrates: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  fat: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  fiber: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sugar: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sodium: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  usdaFoodId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  nutritionSource: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  nutritionUpdatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  recipeIngredients: z.lazy(() => RecipeIngredientOrderByRelationAggregateInputSchema).optional(),
  inventoryItems: z.lazy(() => InventoryItemOrderByRelationAggregateInputSchema).optional(),
  orderItems: z.lazy(() => OrderItemOrderByRelationAggregateInputSchema).optional(),
  vendors: z.lazy(() => VendorOrderByRelationAggregateInputSchema).optional(),
  WasteRecords: z.lazy(() => WasteRecordOrderByRelationAggregateInputSchema).optional(),
  IngredientAllergens: z.lazy(() => IngredientAllergenOrderByRelationAggregateInputSchema).optional(),
  priceHistory: z.lazy(() => SupplierPriceHistoryOrderByRelationAggregateInputSchema).optional(),
  DietaryRestrictions: z.lazy(() => DietaryRestrictionOrderByRelationAggregateInputSchema).optional()
}).strict();

export const IngredientWhereUniqueInputSchema: z.ZodType<Prisma.IngredientWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    name: z.string()
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    name: z.string(),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  name: z.string().optional(),
  AND: z.union([ z.lazy(() => IngredientWhereInputSchema),z.lazy(() => IngredientWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => IngredientWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => IngredientWhereInputSchema),z.lazy(() => IngredientWhereInputSchema).array() ]).optional(),
  category: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  price: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  density: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  dietaryRestrictionId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  calories: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  protein: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  carbohydrates: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  fat: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  fiber: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  sugar: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  sodium: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  usdaFoodId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  nutritionSource: z.union([ z.lazy(() => EnumNutritionSourceNullableFilterSchema),z.lazy(() => NutritionSourceSchema) ]).optional().nullable(),
  nutritionUpdatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  recipeIngredients: z.lazy(() => RecipeIngredientListRelationFilterSchema).optional(),
  inventoryItems: z.lazy(() => InventoryItemListRelationFilterSchema).optional(),
  orderItems: z.lazy(() => OrderItemListRelationFilterSchema).optional(),
  vendors: z.lazy(() => VendorListRelationFilterSchema).optional(),
  WasteRecords: z.lazy(() => WasteRecordListRelationFilterSchema).optional(),
  IngredientAllergens: z.lazy(() => IngredientAllergenListRelationFilterSchema).optional(),
  priceHistory: z.lazy(() => SupplierPriceHistoryListRelationFilterSchema).optional(),
  DietaryRestrictions: z.lazy(() => DietaryRestrictionListRelationFilterSchema).optional()
}).strict());

export const IngredientOrderByWithAggregationInputSchema: z.ZodType<Prisma.IngredientOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  density: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  dietaryRestrictionId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  calories: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  protein: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  carbohydrates: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  fat: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  fiber: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sugar: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sodium: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  usdaFoodId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  nutritionSource: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  nutritionUpdatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => IngredientCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => IngredientAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => IngredientMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => IngredientMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => IngredientSumOrderByAggregateInputSchema).optional()
}).strict();

export const IngredientScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.IngredientScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => IngredientScalarWhereWithAggregatesInputSchema),z.lazy(() => IngredientScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => IngredientScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => IngredientScalarWhereWithAggregatesInputSchema),z.lazy(() => IngredientScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  category: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  price: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  density: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  dietaryRestrictionId: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  calories: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  protein: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  carbohydrates: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  fat: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  fiber: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  sugar: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  sodium: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  usdaFoodId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  nutritionSource: z.union([ z.lazy(() => EnumNutritionSourceNullableWithAggregatesFilterSchema),z.lazy(() => NutritionSourceSchema) ]).optional().nullable(),
  nutritionUpdatedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const RecipeIngredientWhereInputSchema: z.ZodType<Prisma.RecipeIngredientWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RecipeIngredientWhereInputSchema),z.lazy(() => RecipeIngredientWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RecipeIngredientWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RecipeIngredientWhereInputSchema),z.lazy(() => RecipeIngredientWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  recipeId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  ingredientId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  quantity: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  unit: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  processingInstructions: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  substituteIngredients: z.lazy(() => IntNullableListFilterSchema).optional(),
  isOptional: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  cost: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  density: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  yield: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  joinAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  recipeVersionId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  recipe: z.union([ z.lazy(() => RecipeScalarRelationFilterSchema),z.lazy(() => RecipeWhereInputSchema) ]).optional(),
  ingredient: z.union([ z.lazy(() => IngredientScalarRelationFilterSchema),z.lazy(() => IngredientWhereInputSchema) ]).optional(),
  recipeVersion: z.union([ z.lazy(() => RecipeVersionNullableScalarRelationFilterSchema),z.lazy(() => RecipeVersionWhereInputSchema) ]).optional().nullable(),
}).strict();

export const RecipeIngredientOrderByWithRelationInputSchema: z.ZodType<Prisma.RecipeIngredientOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  ingredientId: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  processingInstructions: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  substituteIngredients: z.lazy(() => SortOrderSchema).optional(),
  isOptional: z.lazy(() => SortOrderSchema).optional(),
  notes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  cost: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  density: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  yield: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  joinAt: z.lazy(() => SortOrderSchema).optional(),
  recipeVersionId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  recipe: z.lazy(() => RecipeOrderByWithRelationInputSchema).optional(),
  ingredient: z.lazy(() => IngredientOrderByWithRelationInputSchema).optional(),
  recipeVersion: z.lazy(() => RecipeVersionOrderByWithRelationInputSchema).optional()
}).strict();

export const RecipeIngredientWhereUniqueInputSchema: z.ZodType<Prisma.RecipeIngredientWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    unique_ingredient_per_version: z.lazy(() => RecipeIngredientUnique_ingredient_per_versionCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    unique_ingredient_per_version: z.lazy(() => RecipeIngredientUnique_ingredient_per_versionCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  unique_ingredient_per_version: z.lazy(() => RecipeIngredientUnique_ingredient_per_versionCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => RecipeIngredientWhereInputSchema),z.lazy(() => RecipeIngredientWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RecipeIngredientWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RecipeIngredientWhereInputSchema),z.lazy(() => RecipeIngredientWhereInputSchema).array() ]).optional(),
  recipeId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  ingredientId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  quantity: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  unit: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  processingInstructions: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  substituteIngredients: z.lazy(() => IntNullableListFilterSchema).optional(),
  isOptional: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  cost: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  density: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  yield: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  joinAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  recipeVersionId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  recipe: z.union([ z.lazy(() => RecipeScalarRelationFilterSchema),z.lazy(() => RecipeWhereInputSchema) ]).optional(),
  ingredient: z.union([ z.lazy(() => IngredientScalarRelationFilterSchema),z.lazy(() => IngredientWhereInputSchema) ]).optional(),
  recipeVersion: z.union([ z.lazy(() => RecipeVersionNullableScalarRelationFilterSchema),z.lazy(() => RecipeVersionWhereInputSchema) ]).optional().nullable(),
}).strict());

export const RecipeIngredientOrderByWithAggregationInputSchema: z.ZodType<Prisma.RecipeIngredientOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  ingredientId: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  processingInstructions: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  substituteIngredients: z.lazy(() => SortOrderSchema).optional(),
  isOptional: z.lazy(() => SortOrderSchema).optional(),
  notes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  cost: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  density: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  yield: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  joinAt: z.lazy(() => SortOrderSchema).optional(),
  recipeVersionId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => RecipeIngredientCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => RecipeIngredientAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => RecipeIngredientMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => RecipeIngredientMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => RecipeIngredientSumOrderByAggregateInputSchema).optional()
}).strict();

export const RecipeIngredientScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.RecipeIngredientScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => RecipeIngredientScalarWhereWithAggregatesInputSchema),z.lazy(() => RecipeIngredientScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => RecipeIngredientScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RecipeIngredientScalarWhereWithAggregatesInputSchema),z.lazy(() => RecipeIngredientScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  recipeId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  ingredientId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  quantity: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  unit: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  processingInstructions: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  substituteIngredients: z.lazy(() => IntNullableListFilterSchema).optional(),
  isOptional: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  notes: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  cost: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  density: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  yield: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  joinAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  recipeVersionId: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
}).strict();

export const RecipeInstructionWhereInputSchema: z.ZodType<Prisma.RecipeInstructionWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RecipeInstructionWhereInputSchema),z.lazy(() => RecipeInstructionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RecipeInstructionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RecipeInstructionWhereInputSchema),z.lazy(() => RecipeInstructionWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  recipeId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  stepNumber: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  instruction: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  imageUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  recipeVersionId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  timeInMinutes: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  temperature: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  temperatureUnit: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  isCritical: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  techniqueTips: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  warningNotes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  recipe: z.union([ z.lazy(() => RecipeScalarRelationFilterSchema),z.lazy(() => RecipeWhereInputSchema) ]).optional(),
  RecipeVersion: z.union([ z.lazy(() => RecipeVersionNullableScalarRelationFilterSchema),z.lazy(() => RecipeVersionWhereInputSchema) ]).optional().nullable(),
  equipment: z.lazy(() => RecipeEquipmentListRelationFilterSchema).optional()
}).strict();

export const RecipeInstructionOrderByWithRelationInputSchema: z.ZodType<Prisma.RecipeInstructionOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  stepNumber: z.lazy(() => SortOrderSchema).optional(),
  instruction: z.lazy(() => SortOrderSchema).optional(),
  imageUrl: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  recipeVersionId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  timeInMinutes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  temperature: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  temperatureUnit: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  isCritical: z.lazy(() => SortOrderSchema).optional(),
  techniqueTips: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  warningNotes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  recipe: z.lazy(() => RecipeOrderByWithRelationInputSchema).optional(),
  RecipeVersion: z.lazy(() => RecipeVersionOrderByWithRelationInputSchema).optional(),
  equipment: z.lazy(() => RecipeEquipmentOrderByRelationAggregateInputSchema).optional()
}).strict();

export const RecipeInstructionWhereUniqueInputSchema: z.ZodType<Prisma.RecipeInstructionWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    recipeId_stepNumber_recipeVersionId: z.lazy(() => RecipeInstructionRecipeIdStepNumberRecipeVersionIdCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    recipeId_stepNumber_recipeVersionId: z.lazy(() => RecipeInstructionRecipeIdStepNumberRecipeVersionIdCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  recipeId_stepNumber_recipeVersionId: z.lazy(() => RecipeInstructionRecipeIdStepNumberRecipeVersionIdCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => RecipeInstructionWhereInputSchema),z.lazy(() => RecipeInstructionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RecipeInstructionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RecipeInstructionWhereInputSchema),z.lazy(() => RecipeInstructionWhereInputSchema).array() ]).optional(),
  recipeId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  stepNumber: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  instruction: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  imageUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  recipeVersionId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  timeInMinutes: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  temperature: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  temperatureUnit: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  isCritical: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  techniqueTips: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  warningNotes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  recipe: z.union([ z.lazy(() => RecipeScalarRelationFilterSchema),z.lazy(() => RecipeWhereInputSchema) ]).optional(),
  RecipeVersion: z.union([ z.lazy(() => RecipeVersionNullableScalarRelationFilterSchema),z.lazy(() => RecipeVersionWhereInputSchema) ]).optional().nullable(),
  equipment: z.lazy(() => RecipeEquipmentListRelationFilterSchema).optional()
}).strict());

export const RecipeInstructionOrderByWithAggregationInputSchema: z.ZodType<Prisma.RecipeInstructionOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  stepNumber: z.lazy(() => SortOrderSchema).optional(),
  instruction: z.lazy(() => SortOrderSchema).optional(),
  imageUrl: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  recipeVersionId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  timeInMinutes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  temperature: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  temperatureUnit: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  isCritical: z.lazy(() => SortOrderSchema).optional(),
  techniqueTips: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  warningNotes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => RecipeInstructionCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => RecipeInstructionAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => RecipeInstructionMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => RecipeInstructionMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => RecipeInstructionSumOrderByAggregateInputSchema).optional()
}).strict();

export const RecipeInstructionScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.RecipeInstructionScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => RecipeInstructionScalarWhereWithAggregatesInputSchema),z.lazy(() => RecipeInstructionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => RecipeInstructionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RecipeInstructionScalarWhereWithAggregatesInputSchema),z.lazy(() => RecipeInstructionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  recipeId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  stepNumber: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  instruction: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  imageUrl: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  recipeVersionId: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  timeInMinutes: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  temperature: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  temperatureUnit: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  isCritical: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  techniqueTips: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  warningNotes: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const InventoryItemWhereInputSchema: z.ZodType<Prisma.InventoryItemWhereInput> = z.object({
  AND: z.union([ z.lazy(() => InventoryItemWhereInputSchema),z.lazy(() => InventoryItemWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => InventoryItemWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => InventoryItemWhereInputSchema),z.lazy(() => InventoryItemWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  inventoryId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  ingredientId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  quantity: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  unit: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  minQuantity: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  restockThreshold: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  lastCountDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  lastOrderDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  lastUpdatedById: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  lastUpdated: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  par: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  reorderPoint: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  maxQuantity: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  location: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  barcode: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  currentPrice: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  averageCost: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  lastPurchasePrice: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  inventory: z.union([ z.lazy(() => InventoryScalarRelationFilterSchema),z.lazy(() => InventoryWhereInputSchema) ]).optional(),
  ingredient: z.union([ z.lazy(() => IngredientScalarRelationFilterSchema),z.lazy(() => IngredientWhereInputSchema) ]).optional(),
  lastUpdatedBy: z.union([ z.lazy(() => UserNullableScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  transactions: z.lazy(() => InventoryTransactionListRelationFilterSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalListRelationFilterSchema).optional(),
  stockCounts: z.lazy(() => StockCountItemListRelationFilterSchema).optional()
}).strict();

export const InventoryItemOrderByWithRelationInputSchema: z.ZodType<Prisma.InventoryItemOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  inventoryId: z.lazy(() => SortOrderSchema).optional(),
  ingredientId: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  minQuantity: z.lazy(() => SortOrderSchema).optional(),
  restockThreshold: z.lazy(() => SortOrderSchema).optional(),
  lastCountDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  lastOrderDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  lastUpdatedById: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  lastUpdated: z.lazy(() => SortOrderSchema).optional(),
  par: z.lazy(() => SortOrderSchema).optional(),
  reorderPoint: z.lazy(() => SortOrderSchema).optional(),
  maxQuantity: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  location: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  barcode: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  notes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  currentPrice: z.lazy(() => SortOrderSchema).optional(),
  averageCost: z.lazy(() => SortOrderSchema).optional(),
  lastPurchasePrice: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  inventory: z.lazy(() => InventoryOrderByWithRelationInputSchema).optional(),
  ingredient: z.lazy(() => IngredientOrderByWithRelationInputSchema).optional(),
  lastUpdatedBy: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  transactions: z.lazy(() => InventoryTransactionOrderByRelationAggregateInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalOrderByRelationAggregateInputSchema).optional(),
  stockCounts: z.lazy(() => StockCountItemOrderByRelationAggregateInputSchema).optional()
}).strict();

export const InventoryItemWhereUniqueInputSchema: z.ZodType<Prisma.InventoryItemWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    inventoryId_ingredientId: z.lazy(() => InventoryItemInventoryIdIngredientIdCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    inventoryId_ingredientId: z.lazy(() => InventoryItemInventoryIdIngredientIdCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  inventoryId_ingredientId: z.lazy(() => InventoryItemInventoryIdIngredientIdCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => InventoryItemWhereInputSchema),z.lazy(() => InventoryItemWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => InventoryItemWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => InventoryItemWhereInputSchema),z.lazy(() => InventoryItemWhereInputSchema).array() ]).optional(),
  inventoryId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  ingredientId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  quantity: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  unit: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  minQuantity: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  restockThreshold: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  lastCountDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  lastOrderDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  lastUpdatedById: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  lastUpdated: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  par: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  reorderPoint: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  maxQuantity: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  location: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  barcode: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  currentPrice: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  averageCost: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  lastPurchasePrice: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  inventory: z.union([ z.lazy(() => InventoryScalarRelationFilterSchema),z.lazy(() => InventoryWhereInputSchema) ]).optional(),
  ingredient: z.union([ z.lazy(() => IngredientScalarRelationFilterSchema),z.lazy(() => IngredientWhereInputSchema) ]).optional(),
  lastUpdatedBy: z.union([ z.lazy(() => UserNullableScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  transactions: z.lazy(() => InventoryTransactionListRelationFilterSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalListRelationFilterSchema).optional(),
  stockCounts: z.lazy(() => StockCountItemListRelationFilterSchema).optional()
}).strict());

export const InventoryItemOrderByWithAggregationInputSchema: z.ZodType<Prisma.InventoryItemOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  inventoryId: z.lazy(() => SortOrderSchema).optional(),
  ingredientId: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  minQuantity: z.lazy(() => SortOrderSchema).optional(),
  restockThreshold: z.lazy(() => SortOrderSchema).optional(),
  lastCountDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  lastOrderDate: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  lastUpdatedById: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  lastUpdated: z.lazy(() => SortOrderSchema).optional(),
  par: z.lazy(() => SortOrderSchema).optional(),
  reorderPoint: z.lazy(() => SortOrderSchema).optional(),
  maxQuantity: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  location: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  barcode: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  notes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  currentPrice: z.lazy(() => SortOrderSchema).optional(),
  averageCost: z.lazy(() => SortOrderSchema).optional(),
  lastPurchasePrice: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => InventoryItemCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => InventoryItemAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => InventoryItemMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => InventoryItemMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => InventoryItemSumOrderByAggregateInputSchema).optional()
}).strict();

export const InventoryItemScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.InventoryItemScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => InventoryItemScalarWhereWithAggregatesInputSchema),z.lazy(() => InventoryItemScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => InventoryItemScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => InventoryItemScalarWhereWithAggregatesInputSchema),z.lazy(() => InventoryItemScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  inventoryId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  ingredientId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  quantity: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  unit: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  minQuantity: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  restockThreshold: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  lastCountDate: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  lastOrderDate: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  lastUpdatedById: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  lastUpdated: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  par: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  reorderPoint: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  maxQuantity: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  location: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  barcode: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  notes: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  currentPrice: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  averageCost: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  lastPurchasePrice: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
}).strict();

export const InventoryTransactionWhereInputSchema: z.ZodType<Prisma.InventoryTransactionWhereInput> = z.object({
  AND: z.union([ z.lazy(() => InventoryTransactionWhereInputSchema),z.lazy(() => InventoryTransactionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => InventoryTransactionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => InventoryTransactionWhereInputSchema),z.lazy(() => InventoryTransactionWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  inventoryId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  itemId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  type: z.union([ z.lazy(() => EnumTransactionTypeFilterSchema),z.lazy(() => TransactionTypeSchema) ]).optional(),
  quantity: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  unit: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  previousQty: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  newQty: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  cost: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  reference: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdById: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  inventory: z.union([ z.lazy(() => InventoryScalarRelationFilterSchema),z.lazy(() => InventoryWhereInputSchema) ]).optional(),
  item: z.union([ z.lazy(() => InventoryItemScalarRelationFilterSchema),z.lazy(() => InventoryItemWhereInputSchema) ]).optional(),
  createdBy: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const InventoryTransactionOrderByWithRelationInputSchema: z.ZodType<Prisma.InventoryTransactionOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  inventoryId: z.lazy(() => SortOrderSchema).optional(),
  itemId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  previousQty: z.lazy(() => SortOrderSchema).optional(),
  newQty: z.lazy(() => SortOrderSchema).optional(),
  cost: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  reference: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  notes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  inventory: z.lazy(() => InventoryOrderByWithRelationInputSchema).optional(),
  item: z.lazy(() => InventoryItemOrderByWithRelationInputSchema).optional(),
  createdBy: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const InventoryTransactionWhereUniqueInputSchema: z.ZodType<Prisma.InventoryTransactionWhereUniqueInput> = z.object({
  id: z.number().int()
})
.and(z.object({
  id: z.number().int().optional(),
  AND: z.union([ z.lazy(() => InventoryTransactionWhereInputSchema),z.lazy(() => InventoryTransactionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => InventoryTransactionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => InventoryTransactionWhereInputSchema),z.lazy(() => InventoryTransactionWhereInputSchema).array() ]).optional(),
  inventoryId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  itemId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  type: z.union([ z.lazy(() => EnumTransactionTypeFilterSchema),z.lazy(() => TransactionTypeSchema) ]).optional(),
  quantity: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  unit: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  previousQty: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  newQty: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  cost: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  reference: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdById: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  inventory: z.union([ z.lazy(() => InventoryScalarRelationFilterSchema),z.lazy(() => InventoryWhereInputSchema) ]).optional(),
  item: z.union([ z.lazy(() => InventoryItemScalarRelationFilterSchema),z.lazy(() => InventoryItemWhereInputSchema) ]).optional(),
  createdBy: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const InventoryTransactionOrderByWithAggregationInputSchema: z.ZodType<Prisma.InventoryTransactionOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  inventoryId: z.lazy(() => SortOrderSchema).optional(),
  itemId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  previousQty: z.lazy(() => SortOrderSchema).optional(),
  newQty: z.lazy(() => SortOrderSchema).optional(),
  cost: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  reference: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  notes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => InventoryTransactionCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => InventoryTransactionAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => InventoryTransactionMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => InventoryTransactionMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => InventoryTransactionSumOrderByAggregateInputSchema).optional()
}).strict();

export const InventoryTransactionScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.InventoryTransactionScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => InventoryTransactionScalarWhereWithAggregatesInputSchema),z.lazy(() => InventoryTransactionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => InventoryTransactionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => InventoryTransactionScalarWhereWithAggregatesInputSchema),z.lazy(() => InventoryTransactionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  inventoryId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  itemId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  type: z.union([ z.lazy(() => EnumTransactionTypeWithAggregatesFilterSchema),z.lazy(() => TransactionTypeSchema) ]).optional(),
  quantity: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  unit: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  previousQty: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  newQty: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  cost: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  reference: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  notes: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdById: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const StockCountWhereInputSchema: z.ZodType<Prisma.StockCountWhereInput> = z.object({
  AND: z.union([ z.lazy(() => StockCountWhereInputSchema),z.lazy(() => StockCountWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => StockCountWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => StockCountWhereInputSchema),z.lazy(() => StockCountWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  inventoryId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  status: z.union([ z.lazy(() => EnumCountStatusFilterSchema),z.lazy(() => CountStatusSchema) ]).optional(),
  startedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  completedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdById: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  inventory: z.union([ z.lazy(() => InventoryScalarRelationFilterSchema),z.lazy(() => InventoryWhereInputSchema) ]).optional(),
  createdBy: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  items: z.lazy(() => StockCountItemListRelationFilterSchema).optional()
}).strict();

export const StockCountOrderByWithRelationInputSchema: z.ZodType<Prisma.StockCountOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  inventoryId: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  startedAt: z.lazy(() => SortOrderSchema).optional(),
  completedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  notes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  inventory: z.lazy(() => InventoryOrderByWithRelationInputSchema).optional(),
  createdBy: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  items: z.lazy(() => StockCountItemOrderByRelationAggregateInputSchema).optional()
}).strict();

export const StockCountWhereUniqueInputSchema: z.ZodType<Prisma.StockCountWhereUniqueInput> = z.object({
  id: z.number().int()
})
.and(z.object({
  id: z.number().int().optional(),
  AND: z.union([ z.lazy(() => StockCountWhereInputSchema),z.lazy(() => StockCountWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => StockCountWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => StockCountWhereInputSchema),z.lazy(() => StockCountWhereInputSchema).array() ]).optional(),
  inventoryId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  status: z.union([ z.lazy(() => EnumCountStatusFilterSchema),z.lazy(() => CountStatusSchema) ]).optional(),
  startedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  completedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdById: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  inventory: z.union([ z.lazy(() => InventoryScalarRelationFilterSchema),z.lazy(() => InventoryWhereInputSchema) ]).optional(),
  createdBy: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  items: z.lazy(() => StockCountItemListRelationFilterSchema).optional()
}).strict());

export const StockCountOrderByWithAggregationInputSchema: z.ZodType<Prisma.StockCountOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  inventoryId: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  startedAt: z.lazy(() => SortOrderSchema).optional(),
  completedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  notes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => StockCountCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => StockCountAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => StockCountMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => StockCountMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => StockCountSumOrderByAggregateInputSchema).optional()
}).strict();

export const StockCountScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.StockCountScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => StockCountScalarWhereWithAggregatesInputSchema),z.lazy(() => StockCountScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => StockCountScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => StockCountScalarWhereWithAggregatesInputSchema),z.lazy(() => StockCountScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  inventoryId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  status: z.union([ z.lazy(() => EnumCountStatusWithAggregatesFilterSchema),z.lazy(() => CountStatusSchema) ]).optional(),
  startedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  completedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdById: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  notes: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const StockCountItemWhereInputSchema: z.ZodType<Prisma.StockCountItemWhereInput> = z.object({
  AND: z.union([ z.lazy(() => StockCountItemWhereInputSchema),z.lazy(() => StockCountItemWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => StockCountItemWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => StockCountItemWhereInputSchema),z.lazy(() => StockCountItemWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  stockCountId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  itemId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  expectedQty: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  actualQty: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  difference: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  stockCount: z.union([ z.lazy(() => StockCountScalarRelationFilterSchema),z.lazy(() => StockCountWhereInputSchema) ]).optional(),
  item: z.union([ z.lazy(() => InventoryItemScalarRelationFilterSchema),z.lazy(() => InventoryItemWhereInputSchema) ]).optional(),
}).strict();

export const StockCountItemOrderByWithRelationInputSchema: z.ZodType<Prisma.StockCountItemOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  stockCountId: z.lazy(() => SortOrderSchema).optional(),
  itemId: z.lazy(() => SortOrderSchema).optional(),
  expectedQty: z.lazy(() => SortOrderSchema).optional(),
  actualQty: z.lazy(() => SortOrderSchema).optional(),
  difference: z.lazy(() => SortOrderSchema).optional(),
  notes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  stockCount: z.lazy(() => StockCountOrderByWithRelationInputSchema).optional(),
  item: z.lazy(() => InventoryItemOrderByWithRelationInputSchema).optional()
}).strict();

export const StockCountItemWhereUniqueInputSchema: z.ZodType<Prisma.StockCountItemWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    stockCountId_itemId: z.lazy(() => StockCountItemStockCountIdItemIdCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    stockCountId_itemId: z.lazy(() => StockCountItemStockCountIdItemIdCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  stockCountId_itemId: z.lazy(() => StockCountItemStockCountIdItemIdCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => StockCountItemWhereInputSchema),z.lazy(() => StockCountItemWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => StockCountItemWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => StockCountItemWhereInputSchema),z.lazy(() => StockCountItemWhereInputSchema).array() ]).optional(),
  stockCountId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  itemId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  expectedQty: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  actualQty: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  difference: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  stockCount: z.union([ z.lazy(() => StockCountScalarRelationFilterSchema),z.lazy(() => StockCountWhereInputSchema) ]).optional(),
  item: z.union([ z.lazy(() => InventoryItemScalarRelationFilterSchema),z.lazy(() => InventoryItemWhereInputSchema) ]).optional(),
}).strict());

export const StockCountItemOrderByWithAggregationInputSchema: z.ZodType<Prisma.StockCountItemOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  stockCountId: z.lazy(() => SortOrderSchema).optional(),
  itemId: z.lazy(() => SortOrderSchema).optional(),
  expectedQty: z.lazy(() => SortOrderSchema).optional(),
  actualQty: z.lazy(() => SortOrderSchema).optional(),
  difference: z.lazy(() => SortOrderSchema).optional(),
  notes: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => StockCountItemCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => StockCountItemAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => StockCountItemMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => StockCountItemMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => StockCountItemSumOrderByAggregateInputSchema).optional()
}).strict();

export const StockCountItemScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.StockCountItemScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => StockCountItemScalarWhereWithAggregatesInputSchema),z.lazy(() => StockCountItemScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => StockCountItemScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => StockCountItemScalarWhereWithAggregatesInputSchema),z.lazy(() => StockCountItemScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  stockCountId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  itemId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  expectedQty: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  actualQty: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  difference: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  notes: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const RecipeStatsWhereInputSchema: z.ZodType<Prisma.RecipeStatsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RecipeStatsWhereInputSchema),z.lazy(() => RecipeStatsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RecipeStatsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RecipeStatsWhereInputSchema),z.lazy(() => RecipeStatsWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  recipeId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  totalCost: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  profitMargin: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  averageRating: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  preparationCount: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  lastPrepared: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  recipe: z.union([ z.lazy(() => RecipeScalarRelationFilterSchema),z.lazy(() => RecipeWhereInputSchema) ]).optional(),
}).strict();

export const RecipeStatsOrderByWithRelationInputSchema: z.ZodType<Prisma.RecipeStatsOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  totalCost: z.lazy(() => SortOrderSchema).optional(),
  profitMargin: z.lazy(() => SortOrderSchema).optional(),
  averageRating: z.lazy(() => SortOrderSchema).optional(),
  preparationCount: z.lazy(() => SortOrderSchema).optional(),
  lastPrepared: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  recipe: z.lazy(() => RecipeOrderByWithRelationInputSchema).optional()
}).strict();

export const RecipeStatsWhereUniqueInputSchema: z.ZodType<Prisma.RecipeStatsWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    recipeId: z.number().int()
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    recipeId: z.number().int(),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  recipeId: z.number().int().optional(),
  AND: z.union([ z.lazy(() => RecipeStatsWhereInputSchema),z.lazy(() => RecipeStatsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RecipeStatsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RecipeStatsWhereInputSchema),z.lazy(() => RecipeStatsWhereInputSchema).array() ]).optional(),
  totalCost: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  profitMargin: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  averageRating: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  preparationCount: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  lastPrepared: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  recipe: z.union([ z.lazy(() => RecipeScalarRelationFilterSchema),z.lazy(() => RecipeWhereInputSchema) ]).optional(),
}).strict());

export const RecipeStatsOrderByWithAggregationInputSchema: z.ZodType<Prisma.RecipeStatsOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  totalCost: z.lazy(() => SortOrderSchema).optional(),
  profitMargin: z.lazy(() => SortOrderSchema).optional(),
  averageRating: z.lazy(() => SortOrderSchema).optional(),
  preparationCount: z.lazy(() => SortOrderSchema).optional(),
  lastPrepared: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => RecipeStatsCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => RecipeStatsAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => RecipeStatsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => RecipeStatsMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => RecipeStatsSumOrderByAggregateInputSchema).optional()
}).strict();

export const RecipeStatsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.RecipeStatsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => RecipeStatsScalarWhereWithAggregatesInputSchema),z.lazy(() => RecipeStatsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => RecipeStatsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RecipeStatsScalarWhereWithAggregatesInputSchema),z.lazy(() => RecipeStatsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  recipeId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  totalCost: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  profitMargin: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  averageRating: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  preparationCount: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  lastPrepared: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const OrderWhereInputSchema: z.ZodType<Prisma.OrderWhereInput> = z.object({
  AND: z.union([ z.lazy(() => OrderWhereInputSchema),z.lazy(() => OrderWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrderWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrderWhereInputSchema),z.lazy(() => OrderWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  restaurantId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  vendorId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  status: z.union([ z.lazy(() => EnumOrderStatusFilterSchema),z.lazy(() => OrderStatusSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  restaurant: z.union([ z.lazy(() => RestaurantScalarRelationFilterSchema),z.lazy(() => RestaurantWhereInputSchema) ]).optional(),
  vendor: z.union([ z.lazy(() => VendorScalarRelationFilterSchema),z.lazy(() => VendorWhereInputSchema) ]).optional(),
  items: z.lazy(() => OrderItemListRelationFilterSchema).optional()
}).strict();

export const OrderOrderByWithRelationInputSchema: z.ZodType<Prisma.OrderOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  vendorId: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  restaurant: z.lazy(() => RestaurantOrderByWithRelationInputSchema).optional(),
  vendor: z.lazy(() => VendorOrderByWithRelationInputSchema).optional(),
  items: z.lazy(() => OrderItemOrderByRelationAggregateInputSchema).optional()
}).strict();

export const OrderWhereUniqueInputSchema: z.ZodType<Prisma.OrderWhereUniqueInput> = z.object({
  id: z.number().int()
})
.and(z.object({
  id: z.number().int().optional(),
  AND: z.union([ z.lazy(() => OrderWhereInputSchema),z.lazy(() => OrderWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrderWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrderWhereInputSchema),z.lazy(() => OrderWhereInputSchema).array() ]).optional(),
  restaurantId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  vendorId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  status: z.union([ z.lazy(() => EnumOrderStatusFilterSchema),z.lazy(() => OrderStatusSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  restaurant: z.union([ z.lazy(() => RestaurantScalarRelationFilterSchema),z.lazy(() => RestaurantWhereInputSchema) ]).optional(),
  vendor: z.union([ z.lazy(() => VendorScalarRelationFilterSchema),z.lazy(() => VendorWhereInputSchema) ]).optional(),
  items: z.lazy(() => OrderItemListRelationFilterSchema).optional()
}).strict());

export const OrderOrderByWithAggregationInputSchema: z.ZodType<Prisma.OrderOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  vendorId: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => OrderCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => OrderAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => OrderMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => OrderMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => OrderSumOrderByAggregateInputSchema).optional()
}).strict();

export const OrderScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.OrderScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => OrderScalarWhereWithAggregatesInputSchema),z.lazy(() => OrderScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrderScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrderScalarWhereWithAggregatesInputSchema),z.lazy(() => OrderScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  restaurantId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  vendorId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  status: z.union([ z.lazy(() => EnumOrderStatusWithAggregatesFilterSchema),z.lazy(() => OrderStatusSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const OrderItemWhereInputSchema: z.ZodType<Prisma.OrderItemWhereInput> = z.object({
  AND: z.union([ z.lazy(() => OrderItemWhereInputSchema),z.lazy(() => OrderItemWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrderItemWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrderItemWhereInputSchema),z.lazy(() => OrderItemWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  orderId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  ingredientId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  quantity: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  unit: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  price: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  order: z.union([ z.lazy(() => OrderScalarRelationFilterSchema),z.lazy(() => OrderWhereInputSchema) ]).optional(),
  ingredient: z.union([ z.lazy(() => IngredientScalarRelationFilterSchema),z.lazy(() => IngredientWhereInputSchema) ]).optional(),
}).strict();

export const OrderItemOrderByWithRelationInputSchema: z.ZodType<Prisma.OrderItemOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  orderId: z.lazy(() => SortOrderSchema).optional(),
  ingredientId: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => OrderOrderByWithRelationInputSchema).optional(),
  ingredient: z.lazy(() => IngredientOrderByWithRelationInputSchema).optional()
}).strict();

export const OrderItemWhereUniqueInputSchema: z.ZodType<Prisma.OrderItemWhereUniqueInput> = z.object({
  id: z.number().int()
})
.and(z.object({
  id: z.number().int().optional(),
  AND: z.union([ z.lazy(() => OrderItemWhereInputSchema),z.lazy(() => OrderItemWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrderItemWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrderItemWhereInputSchema),z.lazy(() => OrderItemWhereInputSchema).array() ]).optional(),
  orderId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  ingredientId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  quantity: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  unit: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  price: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  order: z.union([ z.lazy(() => OrderScalarRelationFilterSchema),z.lazy(() => OrderWhereInputSchema) ]).optional(),
  ingredient: z.union([ z.lazy(() => IngredientScalarRelationFilterSchema),z.lazy(() => IngredientWhereInputSchema) ]).optional(),
}).strict());

export const OrderItemOrderByWithAggregationInputSchema: z.ZodType<Prisma.OrderItemOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  orderId: z.lazy(() => SortOrderSchema).optional(),
  ingredientId: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => OrderItemCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => OrderItemAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => OrderItemMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => OrderItemMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => OrderItemSumOrderByAggregateInputSchema).optional()
}).strict();

export const OrderItemScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.OrderItemScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => OrderItemScalarWhereWithAggregatesInputSchema),z.lazy(() => OrderItemScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrderItemScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrderItemScalarWhereWithAggregatesInputSchema),z.lazy(() => OrderItemScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  orderId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  ingredientId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  quantity: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  unit: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  price: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
}).strict();

export const VendorWhereInputSchema: z.ZodType<Prisma.VendorWhereInput> = z.object({
  AND: z.union([ z.lazy(() => VendorWhereInputSchema),z.lazy(() => VendorWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => VendorWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => VendorWhereInputSchema),z.lazy(() => VendorWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  contact: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  phone: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  orders: z.lazy(() => OrderListRelationFilterSchema).optional(),
  ingredients: z.lazy(() => IngredientListRelationFilterSchema).optional(),
  supplierPriceHistory: z.lazy(() => SupplierPriceHistoryListRelationFilterSchema).optional()
}).strict();

export const VendorOrderByWithRelationInputSchema: z.ZodType<Prisma.VendorOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  contact: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  orders: z.lazy(() => OrderOrderByRelationAggregateInputSchema).optional(),
  ingredients: z.lazy(() => IngredientOrderByRelationAggregateInputSchema).optional(),
  supplierPriceHistory: z.lazy(() => SupplierPriceHistoryOrderByRelationAggregateInputSchema).optional()
}).strict();

export const VendorWhereUniqueInputSchema: z.ZodType<Prisma.VendorWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    name: z.string(),
    email: z.string()
  }),
  z.object({
    id: z.number().int(),
    name: z.string(),
  }),
  z.object({
    id: z.number().int(),
    email: z.string(),
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    name: z.string(),
    email: z.string(),
  }),
  z.object({
    name: z.string(),
  }),
  z.object({
    email: z.string(),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  name: z.string().optional(),
  email: z.string().optional(),
  AND: z.union([ z.lazy(() => VendorWhereInputSchema),z.lazy(() => VendorWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => VendorWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => VendorWhereInputSchema),z.lazy(() => VendorWhereInputSchema).array() ]).optional(),
  contact: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  phone: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  orders: z.lazy(() => OrderListRelationFilterSchema).optional(),
  ingredients: z.lazy(() => IngredientListRelationFilterSchema).optional(),
  supplierPriceHistory: z.lazy(() => SupplierPriceHistoryListRelationFilterSchema).optional()
}).strict());

export const VendorOrderByWithAggregationInputSchema: z.ZodType<Prisma.VendorOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  contact: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => VendorCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => VendorAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => VendorMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => VendorMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => VendorSumOrderByAggregateInputSchema).optional()
}).strict();

export const VendorScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.VendorScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => VendorScalarWhereWithAggregatesInputSchema),z.lazy(() => VendorScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => VendorScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => VendorScalarWhereWithAggregatesInputSchema),z.lazy(() => VendorScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  contact: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  phone: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ShiftWhereInputSchema: z.ZodType<Prisma.ShiftWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ShiftWhereInputSchema),z.lazy(() => ShiftWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ShiftWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ShiftWhereInputSchema),z.lazy(() => ShiftWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  userId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  startTime: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  endTime: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  status: z.union([ z.lazy(() => EnumShiftStatusFilterSchema),z.lazy(() => ShiftStatusSchema) ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  tasks: z.lazy(() => ShiftTaskListRelationFilterSchema).optional()
}).strict();

export const ShiftOrderByWithRelationInputSchema: z.ZodType<Prisma.ShiftOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  startTime: z.lazy(() => SortOrderSchema).optional(),
  endTime: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  tasks: z.lazy(() => ShiftTaskOrderByRelationAggregateInputSchema).optional()
}).strict();

export const ShiftWhereUniqueInputSchema: z.ZodType<Prisma.ShiftWhereUniqueInput> = z.object({
  id: z.number().int()
})
.and(z.object({
  id: z.number().int().optional(),
  AND: z.union([ z.lazy(() => ShiftWhereInputSchema),z.lazy(() => ShiftWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ShiftWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ShiftWhereInputSchema),z.lazy(() => ShiftWhereInputSchema).array() ]).optional(),
  userId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  startTime: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  endTime: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  status: z.union([ z.lazy(() => EnumShiftStatusFilterSchema),z.lazy(() => ShiftStatusSchema) ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  tasks: z.lazy(() => ShiftTaskListRelationFilterSchema).optional()
}).strict());

export const ShiftOrderByWithAggregationInputSchema: z.ZodType<Prisma.ShiftOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  startTime: z.lazy(() => SortOrderSchema).optional(),
  endTime: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ShiftCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => ShiftAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ShiftMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ShiftMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => ShiftSumOrderByAggregateInputSchema).optional()
}).strict();

export const ShiftScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ShiftScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ShiftScalarWhereWithAggregatesInputSchema),z.lazy(() => ShiftScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ShiftScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ShiftScalarWhereWithAggregatesInputSchema),z.lazy(() => ShiftScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  userId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  startTime: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  endTime: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  status: z.union([ z.lazy(() => EnumShiftStatusWithAggregatesFilterSchema),z.lazy(() => ShiftStatusSchema) ]).optional(),
}).strict();

export const PrepBoardWhereInputSchema: z.ZodType<Prisma.PrepBoardWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PrepBoardWhereInputSchema),z.lazy(() => PrepBoardWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PrepBoardWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PrepBoardWhereInputSchema),z.lazy(() => PrepBoardWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => EnumPrepStatusFilterSchema),z.lazy(() => PrepStatusSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  recipes: z.lazy(() => RecipeListRelationFilterSchema).optional(),
  prepItems: z.lazy(() => PrepItemListRelationFilterSchema).optional()
}).strict();

export const PrepBoardOrderByWithRelationInputSchema: z.ZodType<Prisma.PrepBoardOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  recipes: z.lazy(() => RecipeOrderByRelationAggregateInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemOrderByRelationAggregateInputSchema).optional()
}).strict();

export const PrepBoardWhereUniqueInputSchema: z.ZodType<Prisma.PrepBoardWhereUniqueInput> = z.object({
  id: z.number().int()
})
.and(z.object({
  id: z.number().int().optional(),
  AND: z.union([ z.lazy(() => PrepBoardWhereInputSchema),z.lazy(() => PrepBoardWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PrepBoardWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PrepBoardWhereInputSchema),z.lazy(() => PrepBoardWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => EnumPrepStatusFilterSchema),z.lazy(() => PrepStatusSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  recipes: z.lazy(() => RecipeListRelationFilterSchema).optional(),
  prepItems: z.lazy(() => PrepItemListRelationFilterSchema).optional()
}).strict());

export const PrepBoardOrderByWithAggregationInputSchema: z.ZodType<Prisma.PrepBoardOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => PrepBoardCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => PrepBoardAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => PrepBoardMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => PrepBoardMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => PrepBoardSumOrderByAggregateInputSchema).optional()
}).strict();

export const PrepBoardScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.PrepBoardScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => PrepBoardScalarWhereWithAggregatesInputSchema),z.lazy(() => PrepBoardScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => PrepBoardScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PrepBoardScalarWhereWithAggregatesInputSchema),z.lazy(() => PrepBoardScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => EnumPrepStatusWithAggregatesFilterSchema),z.lazy(() => PrepStatusSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const PrepItemWhereInputSchema: z.ZodType<Prisma.PrepItemWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PrepItemWhereInputSchema),z.lazy(() => PrepItemWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PrepItemWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PrepItemWhereInputSchema),z.lazy(() => PrepItemWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  prepBoardId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  recipeId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  quantity: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  status: z.union([ z.lazy(() => EnumPrepStatusFilterSchema),z.lazy(() => PrepStatusSchema) ]).optional(),
  assignedToId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  prepBoard: z.union([ z.lazy(() => PrepBoardScalarRelationFilterSchema),z.lazy(() => PrepBoardWhereInputSchema) ]).optional(),
  recipe: z.union([ z.lazy(() => RecipeScalarRelationFilterSchema),z.lazy(() => RecipeWhereInputSchema) ]).optional(),
  assignedTo: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const PrepItemOrderByWithRelationInputSchema: z.ZodType<Prisma.PrepItemOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  prepBoardId: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  assignedToId: z.lazy(() => SortOrderSchema).optional(),
  prepBoard: z.lazy(() => PrepBoardOrderByWithRelationInputSchema).optional(),
  recipe: z.lazy(() => RecipeOrderByWithRelationInputSchema).optional(),
  assignedTo: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const PrepItemWhereUniqueInputSchema: z.ZodType<Prisma.PrepItemWhereUniqueInput> = z.object({
  id: z.number().int()
})
.and(z.object({
  id: z.number().int().optional(),
  AND: z.union([ z.lazy(() => PrepItemWhereInputSchema),z.lazy(() => PrepItemWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PrepItemWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PrepItemWhereInputSchema),z.lazy(() => PrepItemWhereInputSchema).array() ]).optional(),
  prepBoardId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  recipeId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  quantity: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  status: z.union([ z.lazy(() => EnumPrepStatusFilterSchema),z.lazy(() => PrepStatusSchema) ]).optional(),
  assignedToId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  prepBoard: z.union([ z.lazy(() => PrepBoardScalarRelationFilterSchema),z.lazy(() => PrepBoardWhereInputSchema) ]).optional(),
  recipe: z.union([ z.lazy(() => RecipeScalarRelationFilterSchema),z.lazy(() => RecipeWhereInputSchema) ]).optional(),
  assignedTo: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const PrepItemOrderByWithAggregationInputSchema: z.ZodType<Prisma.PrepItemOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  prepBoardId: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  assignedToId: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => PrepItemCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => PrepItemAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => PrepItemMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => PrepItemMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => PrepItemSumOrderByAggregateInputSchema).optional()
}).strict();

export const PrepItemScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.PrepItemScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => PrepItemScalarWhereWithAggregatesInputSchema),z.lazy(() => PrepItemScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => PrepItemScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PrepItemScalarWhereWithAggregatesInputSchema),z.lazy(() => PrepItemScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  prepBoardId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  recipeId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  quantity: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  status: z.union([ z.lazy(() => EnumPrepStatusWithAggregatesFilterSchema),z.lazy(() => PrepStatusSchema) ]).optional(),
  assignedToId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
}).strict();

export const PasswordResetWhereInputSchema: z.ZodType<Prisma.PasswordResetWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PasswordResetWhereInputSchema),z.lazy(() => PasswordResetWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PasswordResetWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PasswordResetWhereInputSchema),z.lazy(() => PasswordResetWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  token: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const PasswordResetOrderByWithRelationInputSchema: z.ZodType<Prisma.PasswordResetOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const PasswordResetWhereUniqueInputSchema: z.ZodType<Prisma.PasswordResetWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    token: z.string()
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    token: z.string(),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  token: z.string().optional(),
  AND: z.union([ z.lazy(() => PasswordResetWhereInputSchema),z.lazy(() => PasswordResetWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PasswordResetWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PasswordResetWhereInputSchema),z.lazy(() => PasswordResetWhereInputSchema).array() ]).optional(),
  userId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const PasswordResetOrderByWithAggregationInputSchema: z.ZodType<Prisma.PasswordResetOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => PasswordResetCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => PasswordResetAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => PasswordResetMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => PasswordResetMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => PasswordResetSumOrderByAggregateInputSchema).optional()
}).strict();

export const PasswordResetScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.PasswordResetScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => PasswordResetScalarWhereWithAggregatesInputSchema),z.lazy(() => PasswordResetScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => PasswordResetScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PasswordResetScalarWhereWithAggregatesInputSchema),z.lazy(() => PasswordResetScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  token: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const MenuWhereInputSchema: z.ZodType<Prisma.MenuWhereInput> = z.object({
  AND: z.union([ z.lazy(() => MenuWhereInputSchema),z.lazy(() => MenuWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MenuWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MenuWhereInputSchema),z.lazy(() => MenuWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  restaurantId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  restaurant: z.union([ z.lazy(() => RestaurantScalarRelationFilterSchema),z.lazy(() => RestaurantWhereInputSchema) ]).optional(),
  menuItems: z.lazy(() => MenuItemListRelationFilterSchema).optional(),
  MenuCategory: z.lazy(() => MenuCategoryListRelationFilterSchema).optional()
}).strict();

export const MenuOrderByWithRelationInputSchema: z.ZodType<Prisma.MenuOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  restaurant: z.lazy(() => RestaurantOrderByWithRelationInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemOrderByRelationAggregateInputSchema).optional(),
  MenuCategory: z.lazy(() => MenuCategoryOrderByRelationAggregateInputSchema).optional()
}).strict();

export const MenuWhereUniqueInputSchema: z.ZodType<Prisma.MenuWhereUniqueInput> = z.object({
  id: z.number().int()
})
.and(z.object({
  id: z.number().int().optional(),
  AND: z.union([ z.lazy(() => MenuWhereInputSchema),z.lazy(() => MenuWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MenuWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MenuWhereInputSchema),z.lazy(() => MenuWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  restaurantId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  restaurant: z.union([ z.lazy(() => RestaurantScalarRelationFilterSchema),z.lazy(() => RestaurantWhereInputSchema) ]).optional(),
  menuItems: z.lazy(() => MenuItemListRelationFilterSchema).optional(),
  MenuCategory: z.lazy(() => MenuCategoryListRelationFilterSchema).optional()
}).strict());

export const MenuOrderByWithAggregationInputSchema: z.ZodType<Prisma.MenuOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => MenuCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => MenuAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => MenuMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => MenuMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => MenuSumOrderByAggregateInputSchema).optional()
}).strict();

export const MenuScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.MenuScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => MenuScalarWhereWithAggregatesInputSchema),z.lazy(() => MenuScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => MenuScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MenuScalarWhereWithAggregatesInputSchema),z.lazy(() => MenuScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  restaurantId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const MenuItemRecipeWhereInputSchema: z.ZodType<Prisma.MenuItemRecipeWhereInput> = z.object({
  AND: z.union([ z.lazy(() => MenuItemRecipeWhereInputSchema),z.lazy(() => MenuItemRecipeWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MenuItemRecipeWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MenuItemRecipeWhereInputSchema),z.lazy(() => MenuItemRecipeWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  menuItemId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  recipeId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  joinAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  menuItem: z.union([ z.lazy(() => MenuItemScalarRelationFilterSchema),z.lazy(() => MenuItemWhereInputSchema) ]).optional(),
  recipe: z.union([ z.lazy(() => RecipeScalarRelationFilterSchema),z.lazy(() => RecipeWhereInputSchema) ]).optional(),
}).strict();

export const MenuItemRecipeOrderByWithRelationInputSchema: z.ZodType<Prisma.MenuItemRecipeOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  menuItemId: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  joinAt: z.lazy(() => SortOrderSchema).optional(),
  menuItem: z.lazy(() => MenuItemOrderByWithRelationInputSchema).optional(),
  recipe: z.lazy(() => RecipeOrderByWithRelationInputSchema).optional()
}).strict();

export const MenuItemRecipeWhereUniqueInputSchema: z.ZodType<Prisma.MenuItemRecipeWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    menuItemId_recipeId: z.lazy(() => MenuItemRecipeMenuItemIdRecipeIdCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    menuItemId_recipeId: z.lazy(() => MenuItemRecipeMenuItemIdRecipeIdCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  menuItemId_recipeId: z.lazy(() => MenuItemRecipeMenuItemIdRecipeIdCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => MenuItemRecipeWhereInputSchema),z.lazy(() => MenuItemRecipeWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MenuItemRecipeWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MenuItemRecipeWhereInputSchema),z.lazy(() => MenuItemRecipeWhereInputSchema).array() ]).optional(),
  menuItemId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  recipeId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  joinAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  menuItem: z.union([ z.lazy(() => MenuItemScalarRelationFilterSchema),z.lazy(() => MenuItemWhereInputSchema) ]).optional(),
  recipe: z.union([ z.lazy(() => RecipeScalarRelationFilterSchema),z.lazy(() => RecipeWhereInputSchema) ]).optional(),
}).strict());

export const MenuItemRecipeOrderByWithAggregationInputSchema: z.ZodType<Prisma.MenuItemRecipeOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  menuItemId: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  joinAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => MenuItemRecipeCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => MenuItemRecipeAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => MenuItemRecipeMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => MenuItemRecipeMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => MenuItemRecipeSumOrderByAggregateInputSchema).optional()
}).strict();

export const MenuItemRecipeScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.MenuItemRecipeScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => MenuItemRecipeScalarWhereWithAggregatesInputSchema),z.lazy(() => MenuItemRecipeScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => MenuItemRecipeScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MenuItemRecipeScalarWhereWithAggregatesInputSchema),z.lazy(() => MenuItemRecipeScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  menuItemId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  recipeId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  joinAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const MenuItemWhereInputSchema: z.ZodType<Prisma.MenuItemWhereInput> = z.object({
  AND: z.union([ z.lazy(() => MenuItemWhereInputSchema),z.lazy(() => MenuItemWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MenuItemWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MenuItemWhereInputSchema),z.lazy(() => MenuItemWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  price: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  foodCost: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  isActive: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  recipeIds: z.lazy(() => IntNullableListFilterSchema).optional(),
  recipeServingsAmount: z.lazy(() => FloatNullableListFilterSchema).optional(),
  recipeServingsCost: z.lazy(() => FloatNullableListFilterSchema).optional(),
  allergens: z.lazy(() => StringNullableListFilterSchema).optional(),
  menuId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  categoryId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  menu: z.union([ z.lazy(() => MenuScalarRelationFilterSchema),z.lazy(() => MenuWhereInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => MenuCategoryNullableScalarRelationFilterSchema),z.lazy(() => MenuCategoryWhereInputSchema) ]).optional().nullable(),
  recipes: z.lazy(() => RecipeListRelationFilterSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeListRelationFilterSchema).optional(),
  nutritionalInfo: z.union([ z.lazy(() => NutritionalInfoNullableScalarRelationFilterSchema),z.lazy(() => NutritionalInfoWhereInputSchema) ]).optional().nullable(),
  recommendations: z.lazy(() => NutritionalRecommendationListRelationFilterSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsListRelationFilterSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemListRelationFilterSchema).optional(),
  feedback: z.lazy(() => CustomerFeedbackListRelationFilterSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionListRelationFilterSchema).optional()
}).strict();

export const MenuItemOrderByWithRelationInputSchema: z.ZodType<Prisma.MenuItemOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  foodCost: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  recipeIds: z.lazy(() => SortOrderSchema).optional(),
  recipeServingsAmount: z.lazy(() => SortOrderSchema).optional(),
  recipeServingsCost: z.lazy(() => SortOrderSchema).optional(),
  allergens: z.lazy(() => SortOrderSchema).optional(),
  menuId: z.lazy(() => SortOrderSchema).optional(),
  categoryId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  menu: z.lazy(() => MenuOrderByWithRelationInputSchema).optional(),
  category: z.lazy(() => MenuCategoryOrderByWithRelationInputSchema).optional(),
  recipes: z.lazy(() => RecipeOrderByRelationAggregateInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeOrderByRelationAggregateInputSchema).optional(),
  nutritionalInfo: z.lazy(() => NutritionalInfoOrderByWithRelationInputSchema).optional(),
  recommendations: z.lazy(() => NutritionalRecommendationOrderByRelationAggregateInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsOrderByRelationAggregateInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemOrderByRelationAggregateInputSchema).optional(),
  feedback: z.lazy(() => CustomerFeedbackOrderByRelationAggregateInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionOrderByRelationAggregateInputSchema).optional()
}).strict();

export const MenuItemWhereUniqueInputSchema: z.ZodType<Prisma.MenuItemWhereUniqueInput> = z.object({
  id: z.number().int()
})
.and(z.object({
  id: z.number().int().optional(),
  AND: z.union([ z.lazy(() => MenuItemWhereInputSchema),z.lazy(() => MenuItemWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MenuItemWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MenuItemWhereInputSchema),z.lazy(() => MenuItemWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  price: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  foodCost: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  isActive: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  recipeIds: z.lazy(() => IntNullableListFilterSchema).optional(),
  recipeServingsAmount: z.lazy(() => FloatNullableListFilterSchema).optional(),
  recipeServingsCost: z.lazy(() => FloatNullableListFilterSchema).optional(),
  allergens: z.lazy(() => StringNullableListFilterSchema).optional(),
  menuId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  categoryId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  menu: z.union([ z.lazy(() => MenuScalarRelationFilterSchema),z.lazy(() => MenuWhereInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => MenuCategoryNullableScalarRelationFilterSchema),z.lazy(() => MenuCategoryWhereInputSchema) ]).optional().nullable(),
  recipes: z.lazy(() => RecipeListRelationFilterSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeListRelationFilterSchema).optional(),
  nutritionalInfo: z.union([ z.lazy(() => NutritionalInfoNullableScalarRelationFilterSchema),z.lazy(() => NutritionalInfoWhereInputSchema) ]).optional().nullable(),
  recommendations: z.lazy(() => NutritionalRecommendationListRelationFilterSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsListRelationFilterSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemListRelationFilterSchema).optional(),
  feedback: z.lazy(() => CustomerFeedbackListRelationFilterSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionListRelationFilterSchema).optional()
}).strict());

export const MenuItemOrderByWithAggregationInputSchema: z.ZodType<Prisma.MenuItemOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  foodCost: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  recipeIds: z.lazy(() => SortOrderSchema).optional(),
  recipeServingsAmount: z.lazy(() => SortOrderSchema).optional(),
  recipeServingsCost: z.lazy(() => SortOrderSchema).optional(),
  allergens: z.lazy(() => SortOrderSchema).optional(),
  menuId: z.lazy(() => SortOrderSchema).optional(),
  categoryId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => MenuItemCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => MenuItemAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => MenuItemMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => MenuItemMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => MenuItemSumOrderByAggregateInputSchema).optional()
}).strict();

export const MenuItemScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.MenuItemScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => MenuItemScalarWhereWithAggregatesInputSchema),z.lazy(() => MenuItemScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => MenuItemScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MenuItemScalarWhereWithAggregatesInputSchema),z.lazy(() => MenuItemScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  price: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  foodCost: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  isActive: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  recipeIds: z.lazy(() => IntNullableListFilterSchema).optional(),
  recipeServingsAmount: z.lazy(() => FloatNullableListFilterSchema).optional(),
  recipeServingsCost: z.lazy(() => FloatNullableListFilterSchema).optional(),
  allergens: z.lazy(() => StringNullableListFilterSchema).optional(),
  menuId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  categoryId: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
}).strict();

export const NutritionalInfoWhereInputSchema: z.ZodType<Prisma.NutritionalInfoWhereInput> = z.object({
  AND: z.union([ z.lazy(() => NutritionalInfoWhereInputSchema),z.lazy(() => NutritionalInfoWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => NutritionalInfoWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => NutritionalInfoWhereInputSchema),z.lazy(() => NutritionalInfoWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  menuItemId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  calories: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  fat: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  saturatedFat: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  transFat: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  cholesterol: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  sodium: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  carbohydrates: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  fiber: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  sugar: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  protein: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  menuItem: z.union([ z.lazy(() => MenuItemNullableScalarRelationFilterSchema),z.lazy(() => MenuItemWhereInputSchema) ]).optional().nullable(),
}).strict();

export const NutritionalInfoOrderByWithRelationInputSchema: z.ZodType<Prisma.NutritionalInfoOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  menuItemId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  calories: z.lazy(() => SortOrderSchema).optional(),
  fat: z.lazy(() => SortOrderSchema).optional(),
  saturatedFat: z.lazy(() => SortOrderSchema).optional(),
  transFat: z.lazy(() => SortOrderSchema).optional(),
  cholesterol: z.lazy(() => SortOrderSchema).optional(),
  sodium: z.lazy(() => SortOrderSchema).optional(),
  carbohydrates: z.lazy(() => SortOrderSchema).optional(),
  fiber: z.lazy(() => SortOrderSchema).optional(),
  sugar: z.lazy(() => SortOrderSchema).optional(),
  protein: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  menuItem: z.lazy(() => MenuItemOrderByWithRelationInputSchema).optional()
}).strict();

export const NutritionalInfoWhereUniqueInputSchema: z.ZodType<Prisma.NutritionalInfoWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    menuItemId: z.number().int()
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    menuItemId: z.number().int(),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  menuItemId: z.number().int().optional(),
  AND: z.union([ z.lazy(() => NutritionalInfoWhereInputSchema),z.lazy(() => NutritionalInfoWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => NutritionalInfoWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => NutritionalInfoWhereInputSchema),z.lazy(() => NutritionalInfoWhereInputSchema).array() ]).optional(),
  calories: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  fat: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  saturatedFat: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  transFat: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  cholesterol: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  sodium: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  carbohydrates: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  fiber: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  sugar: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  protein: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  menuItem: z.union([ z.lazy(() => MenuItemNullableScalarRelationFilterSchema),z.lazy(() => MenuItemWhereInputSchema) ]).optional().nullable(),
}).strict());

export const NutritionalInfoOrderByWithAggregationInputSchema: z.ZodType<Prisma.NutritionalInfoOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  menuItemId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  calories: z.lazy(() => SortOrderSchema).optional(),
  fat: z.lazy(() => SortOrderSchema).optional(),
  saturatedFat: z.lazy(() => SortOrderSchema).optional(),
  transFat: z.lazy(() => SortOrderSchema).optional(),
  cholesterol: z.lazy(() => SortOrderSchema).optional(),
  sodium: z.lazy(() => SortOrderSchema).optional(),
  carbohydrates: z.lazy(() => SortOrderSchema).optional(),
  fiber: z.lazy(() => SortOrderSchema).optional(),
  sugar: z.lazy(() => SortOrderSchema).optional(),
  protein: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => NutritionalInfoCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => NutritionalInfoAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => NutritionalInfoMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => NutritionalInfoMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => NutritionalInfoSumOrderByAggregateInputSchema).optional()
}).strict();

export const NutritionalInfoScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.NutritionalInfoScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => NutritionalInfoScalarWhereWithAggregatesInputSchema),z.lazy(() => NutritionalInfoScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => NutritionalInfoScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => NutritionalInfoScalarWhereWithAggregatesInputSchema),z.lazy(() => NutritionalInfoScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  menuItemId: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  calories: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  fat: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  saturatedFat: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  transFat: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  cholesterol: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  sodium: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  carbohydrates: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  fiber: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  sugar: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  protein: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const FoodCostHistoryWhereInputSchema: z.ZodType<Prisma.FoodCostHistoryWhereInput> = z.object({
  AND: z.union([ z.lazy(() => FoodCostHistoryWhereInputSchema),z.lazy(() => FoodCostHistoryWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => FoodCostHistoryWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FoodCostHistoryWhereInputSchema),z.lazy(() => FoodCostHistoryWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  recipeId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  cost: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  recipe: z.union([ z.lazy(() => RecipeScalarRelationFilterSchema),z.lazy(() => RecipeWhereInputSchema) ]).optional(),
}).strict();

export const FoodCostHistoryOrderByWithRelationInputSchema: z.ZodType<Prisma.FoodCostHistoryOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  cost: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  recipe: z.lazy(() => RecipeOrderByWithRelationInputSchema).optional()
}).strict();

export const FoodCostHistoryWhereUniqueInputSchema: z.ZodType<Prisma.FoodCostHistoryWhereUniqueInput> = z.object({
  id: z.number().int()
})
.and(z.object({
  id: z.number().int().optional(),
  AND: z.union([ z.lazy(() => FoodCostHistoryWhereInputSchema),z.lazy(() => FoodCostHistoryWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => FoodCostHistoryWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FoodCostHistoryWhereInputSchema),z.lazy(() => FoodCostHistoryWhereInputSchema).array() ]).optional(),
  recipeId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  cost: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  recipe: z.union([ z.lazy(() => RecipeScalarRelationFilterSchema),z.lazy(() => RecipeWhereInputSchema) ]).optional(),
}).strict());

export const FoodCostHistoryOrderByWithAggregationInputSchema: z.ZodType<Prisma.FoodCostHistoryOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  cost: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => FoodCostHistoryCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => FoodCostHistoryAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => FoodCostHistoryMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => FoodCostHistoryMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => FoodCostHistorySumOrderByAggregateInputSchema).optional()
}).strict();

export const FoodCostHistoryScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.FoodCostHistoryScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => FoodCostHistoryScalarWhereWithAggregatesInputSchema),z.lazy(() => FoodCostHistoryScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => FoodCostHistoryScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FoodCostHistoryScalarWhereWithAggregatesInputSchema),z.lazy(() => FoodCostHistoryScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  recipeId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  cost: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const PrepHistoryWhereInputSchema: z.ZodType<Prisma.PrepHistoryWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PrepHistoryWhereInputSchema),z.lazy(() => PrepHistoryWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PrepHistoryWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PrepHistoryWhereInputSchema),z.lazy(() => PrepHistoryWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  recipeId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  quantity: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  recipe: z.union([ z.lazy(() => RecipeScalarRelationFilterSchema),z.lazy(() => RecipeWhereInputSchema) ]).optional(),
}).strict();

export const PrepHistoryOrderByWithRelationInputSchema: z.ZodType<Prisma.PrepHistoryOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  recipe: z.lazy(() => RecipeOrderByWithRelationInputSchema).optional()
}).strict();

export const PrepHistoryWhereUniqueInputSchema: z.ZodType<Prisma.PrepHistoryWhereUniqueInput> = z.object({
  id: z.number().int()
})
.and(z.object({
  id: z.number().int().optional(),
  AND: z.union([ z.lazy(() => PrepHistoryWhereInputSchema),z.lazy(() => PrepHistoryWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PrepHistoryWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PrepHistoryWhereInputSchema),z.lazy(() => PrepHistoryWhereInputSchema).array() ]).optional(),
  recipeId: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  quantity: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  recipe: z.union([ z.lazy(() => RecipeScalarRelationFilterSchema),z.lazy(() => RecipeWhereInputSchema) ]).optional(),
}).strict());

export const PrepHistoryOrderByWithAggregationInputSchema: z.ZodType<Prisma.PrepHistoryOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => PrepHistoryCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => PrepHistoryAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => PrepHistoryMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => PrepHistoryMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => PrepHistorySumOrderByAggregateInputSchema).optional()
}).strict();

export const PrepHistoryScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.PrepHistoryScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => PrepHistoryScalarWhereWithAggregatesInputSchema),z.lazy(() => PrepHistoryScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => PrepHistoryScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PrepHistoryScalarWhereWithAggregatesInputSchema),z.lazy(() => PrepHistoryScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  recipeId: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  quantity: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const RecipeNutritionCreateInputSchema: z.ZodType<Prisma.RecipeNutritionCreateInput> = z.object({
  servingSize: z.number(),
  servingUnit: z.string(),
  calories: z.number(),
  protein: z.number(),
  carbohydrates: z.number(),
  fat: z.number(),
  fiber: z.number(),
  sugar: z.number(),
  sodium: z.number(),
  containsGluten: z.boolean().optional(),
  containsDairy: z.boolean().optional(),
  containsNuts: z.boolean().optional(),
  containsEggs: z.boolean().optional(),
  containsSoy: z.boolean().optional(),
  containsFish: z.boolean().optional(),
  containsShellfish: z.boolean().optional(),
  containsSesame: z.boolean().optional(),
  recipe: z.lazy(() => RecipeCreateNestedOneWithoutNutritionalInfoInputSchema)
}).strict();

export const RecipeNutritionUncheckedCreateInputSchema: z.ZodType<Prisma.RecipeNutritionUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  recipeId: z.number().int(),
  servingSize: z.number(),
  servingUnit: z.string(),
  calories: z.number(),
  protein: z.number(),
  carbohydrates: z.number(),
  fat: z.number(),
  fiber: z.number(),
  sugar: z.number(),
  sodium: z.number(),
  containsGluten: z.boolean().optional(),
  containsDairy: z.boolean().optional(),
  containsNuts: z.boolean().optional(),
  containsEggs: z.boolean().optional(),
  containsSoy: z.boolean().optional(),
  containsFish: z.boolean().optional(),
  containsShellfish: z.boolean().optional(),
  containsSesame: z.boolean().optional()
}).strict();

export const RecipeNutritionUpdateInputSchema: z.ZodType<Prisma.RecipeNutritionUpdateInput> = z.object({
  servingSize: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  servingUnit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  calories: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  protein: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  carbohydrates: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  fat: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  fiber: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  sugar: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  sodium: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  containsGluten: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  containsDairy: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  containsNuts: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  containsEggs: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  containsSoy: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  containsFish: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  containsShellfish: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  containsSesame: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  recipe: z.lazy(() => RecipeUpdateOneRequiredWithoutNutritionalInfoNestedInputSchema).optional()
}).strict();

export const RecipeNutritionUncheckedUpdateInputSchema: z.ZodType<Prisma.RecipeNutritionUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  servingSize: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  servingUnit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  calories: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  protein: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  carbohydrates: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  fat: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  fiber: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  sugar: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  sodium: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  containsGluten: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  containsDairy: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  containsNuts: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  containsEggs: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  containsSoy: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  containsFish: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  containsShellfish: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  containsSesame: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RecipeNutritionCreateManyInputSchema: z.ZodType<Prisma.RecipeNutritionCreateManyInput> = z.object({
  id: z.number().int().optional(),
  recipeId: z.number().int(),
  servingSize: z.number(),
  servingUnit: z.string(),
  calories: z.number(),
  protein: z.number(),
  carbohydrates: z.number(),
  fat: z.number(),
  fiber: z.number(),
  sugar: z.number(),
  sodium: z.number(),
  containsGluten: z.boolean().optional(),
  containsDairy: z.boolean().optional(),
  containsNuts: z.boolean().optional(),
  containsEggs: z.boolean().optional(),
  containsSoy: z.boolean().optional(),
  containsFish: z.boolean().optional(),
  containsShellfish: z.boolean().optional(),
  containsSesame: z.boolean().optional()
}).strict();

export const RecipeNutritionUpdateManyMutationInputSchema: z.ZodType<Prisma.RecipeNutritionUpdateManyMutationInput> = z.object({
  servingSize: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  servingUnit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  calories: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  protein: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  carbohydrates: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  fat: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  fiber: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  sugar: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  sodium: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  containsGluten: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  containsDairy: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  containsNuts: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  containsEggs: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  containsSoy: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  containsFish: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  containsShellfish: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  containsSesame: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RecipeNutritionUncheckedUpdateManyInputSchema: z.ZodType<Prisma.RecipeNutritionUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  servingSize: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  servingUnit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  calories: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  protein: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  carbohydrates: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  fat: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  fiber: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  sugar: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  sodium: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  containsGluten: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  containsDairy: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  containsNuts: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  containsEggs: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  containsSoy: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  containsFish: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  containsShellfish: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  containsSesame: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RecipeCriticalPointCreateInputSchema: z.ZodType<Prisma.RecipeCriticalPointCreateInput> = z.object({
  stepNumber: z.number().int(),
  description: z.string(),
  threshold: z.number().optional().nullable(),
  unit: z.string().optional().nullable(),
  action: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  recipe: z.lazy(() => RecipeCreateNestedOneWithoutCriticalPointsInputSchema)
}).strict();

export const RecipeCriticalPointUncheckedCreateInputSchema: z.ZodType<Prisma.RecipeCriticalPointUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  recipeId: z.number().int(),
  stepNumber: z.number().int(),
  description: z.string(),
  threshold: z.number().optional().nullable(),
  unit: z.string().optional().nullable(),
  action: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const RecipeCriticalPointUpdateInputSchema: z.ZodType<Prisma.RecipeCriticalPointUpdateInput> = z.object({
  stepNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  threshold: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  unit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  recipe: z.lazy(() => RecipeUpdateOneRequiredWithoutCriticalPointsNestedInputSchema).optional()
}).strict();

export const RecipeCriticalPointUncheckedUpdateInputSchema: z.ZodType<Prisma.RecipeCriticalPointUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  stepNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  threshold: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  unit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RecipeCriticalPointCreateManyInputSchema: z.ZodType<Prisma.RecipeCriticalPointCreateManyInput> = z.object({
  id: z.number().int().optional(),
  recipeId: z.number().int(),
  stepNumber: z.number().int(),
  description: z.string(),
  threshold: z.number().optional().nullable(),
  unit: z.string().optional().nullable(),
  action: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const RecipeCriticalPointUpdateManyMutationInputSchema: z.ZodType<Prisma.RecipeCriticalPointUpdateManyMutationInput> = z.object({
  stepNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  threshold: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  unit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RecipeCriticalPointUncheckedUpdateManyInputSchema: z.ZodType<Prisma.RecipeCriticalPointUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  stepNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  threshold: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  unit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RecipeStorageCreateInputSchema: z.ZodType<Prisma.RecipeStorageCreateInput> = z.object({
  temperature: z.number().optional().nullable(),
  method: z.string(),
  shelfLife: z.number().int(),
  containerType: z.string().optional().nullable(),
  specialNotes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  recipe: z.lazy(() => RecipeCreateNestedOneWithoutStorageInputSchema)
}).strict();

export const RecipeStorageUncheckedCreateInputSchema: z.ZodType<Prisma.RecipeStorageUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  recipeId: z.number().int(),
  temperature: z.number().optional().nullable(),
  method: z.string(),
  shelfLife: z.number().int(),
  containerType: z.string().optional().nullable(),
  specialNotes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const RecipeStorageUpdateInputSchema: z.ZodType<Prisma.RecipeStorageUpdateInput> = z.object({
  temperature: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  method: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  shelfLife: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  containerType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  specialNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  recipe: z.lazy(() => RecipeUpdateOneRequiredWithoutStorageNestedInputSchema).optional()
}).strict();

export const RecipeStorageUncheckedUpdateInputSchema: z.ZodType<Prisma.RecipeStorageUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  temperature: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  method: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  shelfLife: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  containerType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  specialNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RecipeStorageCreateManyInputSchema: z.ZodType<Prisma.RecipeStorageCreateManyInput> = z.object({
  id: z.number().int().optional(),
  recipeId: z.number().int(),
  temperature: z.number().optional().nullable(),
  method: z.string(),
  shelfLife: z.number().int(),
  containerType: z.string().optional().nullable(),
  specialNotes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const RecipeStorageUpdateManyMutationInputSchema: z.ZodType<Prisma.RecipeStorageUpdateManyMutationInput> = z.object({
  temperature: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  method: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  shelfLife: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  containerType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  specialNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RecipeStorageUncheckedUpdateManyInputSchema: z.ZodType<Prisma.RecipeStorageUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  temperature: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  method: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  shelfLife: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  containerType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  specialNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RecipePhotoCreateInputSchema: z.ZodType<Prisma.RecipePhotoCreateInput> = z.object({
  url: z.string(),
  type: z.lazy(() => PhotoTypeSchema),
  stepNumber: z.number().int().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  recipe: z.lazy(() => RecipeCreateNestedOneWithoutPhotosInputSchema)
}).strict();

export const RecipePhotoUncheckedCreateInputSchema: z.ZodType<Prisma.RecipePhotoUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  recipeId: z.number().int(),
  url: z.string(),
  type: z.lazy(() => PhotoTypeSchema),
  stepNumber: z.number().int().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const RecipePhotoUpdateInputSchema: z.ZodType<Prisma.RecipePhotoUpdateInput> = z.object({
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => PhotoTypeSchema),z.lazy(() => EnumPhotoTypeFieldUpdateOperationsInputSchema) ]).optional(),
  stepNumber: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  recipe: z.lazy(() => RecipeUpdateOneRequiredWithoutPhotosNestedInputSchema).optional()
}).strict();

export const RecipePhotoUncheckedUpdateInputSchema: z.ZodType<Prisma.RecipePhotoUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => PhotoTypeSchema),z.lazy(() => EnumPhotoTypeFieldUpdateOperationsInputSchema) ]).optional(),
  stepNumber: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RecipePhotoCreateManyInputSchema: z.ZodType<Prisma.RecipePhotoCreateManyInput> = z.object({
  id: z.number().int().optional(),
  recipeId: z.number().int(),
  url: z.string(),
  type: z.lazy(() => PhotoTypeSchema),
  stepNumber: z.number().int().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const RecipePhotoUpdateManyMutationInputSchema: z.ZodType<Prisma.RecipePhotoUpdateManyMutationInput> = z.object({
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => PhotoTypeSchema),z.lazy(() => EnumPhotoTypeFieldUpdateOperationsInputSchema) ]).optional(),
  stepNumber: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RecipePhotoUncheckedUpdateManyInputSchema: z.ZodType<Prisma.RecipePhotoUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => PhotoTypeSchema),z.lazy(() => EnumPhotoTypeFieldUpdateOperationsInputSchema) ]).optional(),
  stepNumber: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RecipeTemperatureCreateInputSchema: z.ZodType<Prisma.RecipeTemperatureCreateInput> = z.object({
  stepNumber: z.number().int(),
  minTemp: z.number(),
  maxTemp: z.number(),
  isCritical: z.boolean().optional(),
  holdTime: z.number().int().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  recipe: z.lazy(() => RecipeCreateNestedOneWithoutTemperaturesInputSchema)
}).strict();

export const RecipeTemperatureUncheckedCreateInputSchema: z.ZodType<Prisma.RecipeTemperatureUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  recipeId: z.number().int(),
  stepNumber: z.number().int(),
  minTemp: z.number(),
  maxTemp: z.number(),
  isCritical: z.boolean().optional(),
  holdTime: z.number().int().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const RecipeTemperatureUpdateInputSchema: z.ZodType<Prisma.RecipeTemperatureUpdateInput> = z.object({
  stepNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  minTemp: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  maxTemp: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  isCritical: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  holdTime: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  recipe: z.lazy(() => RecipeUpdateOneRequiredWithoutTemperaturesNestedInputSchema).optional()
}).strict();

export const RecipeTemperatureUncheckedUpdateInputSchema: z.ZodType<Prisma.RecipeTemperatureUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  stepNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  minTemp: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  maxTemp: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  isCritical: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  holdTime: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RecipeTemperatureCreateManyInputSchema: z.ZodType<Prisma.RecipeTemperatureCreateManyInput> = z.object({
  id: z.number().int().optional(),
  recipeId: z.number().int(),
  stepNumber: z.number().int(),
  minTemp: z.number(),
  maxTemp: z.number(),
  isCritical: z.boolean().optional(),
  holdTime: z.number().int().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const RecipeTemperatureUpdateManyMutationInputSchema: z.ZodType<Prisma.RecipeTemperatureUpdateManyMutationInput> = z.object({
  stepNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  minTemp: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  maxTemp: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  isCritical: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  holdTime: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RecipeTemperatureUncheckedUpdateManyInputSchema: z.ZodType<Prisma.RecipeTemperatureUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  stepNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  minTemp: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  maxTemp: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  isCritical: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  holdTime: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RecipeYieldCreateInputSchema: z.ZodType<Prisma.RecipeYieldCreateInput> = z.object({
  expectedYield: z.number(),
  actualYield: z.number().optional().nullable(),
  unit: z.string(),
  wastagePercent: z.number().optional().nullable(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  recipe: z.lazy(() => RecipeCreateNestedOneWithoutYieldsInputSchema)
}).strict();

export const RecipeYieldUncheckedCreateInputSchema: z.ZodType<Prisma.RecipeYieldUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  recipeId: z.number().int(),
  expectedYield: z.number(),
  actualYield: z.number().optional().nullable(),
  unit: z.string(),
  wastagePercent: z.number().optional().nullable(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const RecipeYieldUpdateInputSchema: z.ZodType<Prisma.RecipeYieldUpdateInput> = z.object({
  expectedYield: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  actualYield: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  wastagePercent: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  recipe: z.lazy(() => RecipeUpdateOneRequiredWithoutYieldsNestedInputSchema).optional()
}).strict();

export const RecipeYieldUncheckedUpdateInputSchema: z.ZodType<Prisma.RecipeYieldUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  expectedYield: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  actualYield: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  wastagePercent: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RecipeYieldCreateManyInputSchema: z.ZodType<Prisma.RecipeYieldCreateManyInput> = z.object({
  id: z.number().int().optional(),
  recipeId: z.number().int(),
  expectedYield: z.number(),
  actualYield: z.number().optional().nullable(),
  unit: z.string(),
  wastagePercent: z.number().optional().nullable(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const RecipeYieldUpdateManyMutationInputSchema: z.ZodType<Prisma.RecipeYieldUpdateManyMutationInput> = z.object({
  expectedYield: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  actualYield: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  wastagePercent: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RecipeYieldUncheckedUpdateManyInputSchema: z.ZodType<Prisma.RecipeYieldUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  expectedYield: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  actualYield: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  wastagePercent: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RecipeLaborCostCreateInputSchema: z.ZodType<Prisma.RecipeLaborCostCreateInput> = z.object({
  prepTime: z.number().int(),
  cookTime: z.number().int(),
  laborRate: z.number(),
  totalLaborCost: z.number(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  recipe: z.lazy(() => RecipeCreateNestedOneWithoutLaborCostsInputSchema)
}).strict();

export const RecipeLaborCostUncheckedCreateInputSchema: z.ZodType<Prisma.RecipeLaborCostUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  recipeId: z.number().int(),
  prepTime: z.number().int(),
  cookTime: z.number().int(),
  laborRate: z.number(),
  totalLaborCost: z.number(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const RecipeLaborCostUpdateInputSchema: z.ZodType<Prisma.RecipeLaborCostUpdateInput> = z.object({
  prepTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  laborRate: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  totalLaborCost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  recipe: z.lazy(() => RecipeUpdateOneRequiredWithoutLaborCostsNestedInputSchema).optional()
}).strict();

export const RecipeLaborCostUncheckedUpdateInputSchema: z.ZodType<Prisma.RecipeLaborCostUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  laborRate: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  totalLaborCost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RecipeLaborCostCreateManyInputSchema: z.ZodType<Prisma.RecipeLaborCostCreateManyInput> = z.object({
  id: z.number().int().optional(),
  recipeId: z.number().int(),
  prepTime: z.number().int(),
  cookTime: z.number().int(),
  laborRate: z.number(),
  totalLaborCost: z.number(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const RecipeLaborCostUpdateManyMutationInputSchema: z.ZodType<Prisma.RecipeLaborCostUpdateManyMutationInput> = z.object({
  prepTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  laborRate: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  totalLaborCost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RecipeLaborCostUncheckedUpdateManyInputSchema: z.ZodType<Prisma.RecipeLaborCostUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  laborRate: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  totalLaborCost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SalesTransactionsCreateInputSchema: z.ZodType<Prisma.SalesTransactionsCreateInput> = z.object({
  posTransactionID: z.string().optional().nullable(),
  price: z.number(),
  total: z.number(),
  transactionDate: z.coerce.date(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutSalesTransactionsInputSchema),
  menuItem: z.lazy(() => MenuItemCreateNestedOneWithoutSalesTransactionsInputSchema)
}).strict();

export const SalesTransactionsUncheckedCreateInputSchema: z.ZodType<Prisma.SalesTransactionsUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  posTransactionID: z.string().optional().nullable(),
  restaurantId: z.number().int(),
  menuItemId: z.number().int(),
  price: z.number(),
  total: z.number(),
  transactionDate: z.coerce.date(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const SalesTransactionsUpdateInputSchema: z.ZodType<Prisma.SalesTransactionsUpdateInput> = z.object({
  posTransactionID: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  total: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  transactionDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneRequiredWithoutSalesTransactionsNestedInputSchema).optional(),
  menuItem: z.lazy(() => MenuItemUpdateOneRequiredWithoutSalesTransactionsNestedInputSchema).optional()
}).strict();

export const SalesTransactionsUncheckedUpdateInputSchema: z.ZodType<Prisma.SalesTransactionsUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  posTransactionID: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  menuItemId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  total: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  transactionDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SalesTransactionsCreateManyInputSchema: z.ZodType<Prisma.SalesTransactionsCreateManyInput> = z.object({
  id: z.number().int().optional(),
  posTransactionID: z.string().optional().nullable(),
  restaurantId: z.number().int(),
  menuItemId: z.number().int(),
  price: z.number(),
  total: z.number(),
  transactionDate: z.coerce.date(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const SalesTransactionsUpdateManyMutationInputSchema: z.ZodType<Prisma.SalesTransactionsUpdateManyMutationInput> = z.object({
  posTransactionID: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  total: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  transactionDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SalesTransactionsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.SalesTransactionsUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  posTransactionID: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  menuItemId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  total: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  transactionDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MenuCategoryCreateInputSchema: z.ZodType<Prisma.MenuCategoryCreateInput> = z.object({
  name: z.string(),
  description: z.string().optional().nullable(),
  displayOrder: z.number().int(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  menu: z.lazy(() => MenuCreateNestedOneWithoutMenuCategoryInputSchema),
  menuItems: z.lazy(() => MenuItemCreateNestedManyWithoutCategoryInputSchema).optional()
}).strict();

export const MenuCategoryUncheckedCreateInputSchema: z.ZodType<Prisma.MenuCategoryUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  displayOrder: z.number().int(),
  menuId: z.number().int(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  menuItems: z.lazy(() => MenuItemUncheckedCreateNestedManyWithoutCategoryInputSchema).optional()
}).strict();

export const MenuCategoryUpdateInputSchema: z.ZodType<Prisma.MenuCategoryUpdateInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  displayOrder: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  menu: z.lazy(() => MenuUpdateOneRequiredWithoutMenuCategoryNestedInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUpdateManyWithoutCategoryNestedInputSchema).optional()
}).strict();

export const MenuCategoryUncheckedUpdateInputSchema: z.ZodType<Prisma.MenuCategoryUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  displayOrder: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  menuId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  menuItems: z.lazy(() => MenuItemUncheckedUpdateManyWithoutCategoryNestedInputSchema).optional()
}).strict();

export const MenuCategoryCreateManyInputSchema: z.ZodType<Prisma.MenuCategoryCreateManyInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  displayOrder: z.number().int(),
  menuId: z.number().int(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const MenuCategoryUpdateManyMutationInputSchema: z.ZodType<Prisma.MenuCategoryUpdateManyMutationInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  displayOrder: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MenuCategoryUncheckedUpdateManyInputSchema: z.ZodType<Prisma.MenuCategoryUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  displayOrder: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  menuId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RecipeVersionCreateInputSchema: z.ZodType<Prisma.RecipeVersionCreateInput> = z.object({
  versionNumber: z.number().int(),
  description: z.string().optional().nullable(),
  changes: z.string().optional().nullable(),
  isActive: z.boolean().optional(),
  approvedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  recipe: z.lazy(() => RecipeCreateNestedOneWithoutVersionsInputSchema),
  ingredients: z.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeVersionInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeVersionInputSchema).optional(),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutRecipeVersionsCreatedInputSchema),
  approvedBy: z.lazy(() => UserCreateNestedOneWithoutRecipeVersionsApprovedInputSchema).optional()
}).strict();

export const RecipeVersionUncheckedCreateInputSchema: z.ZodType<Prisma.RecipeVersionUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  recipeId: z.number().int(),
  versionNumber: z.number().int(),
  description: z.string().optional().nullable(),
  changes: z.string().optional().nullable(),
  isActive: z.boolean().optional(),
  createdById: z.number().int(),
  approvedById: z.number().int().optional().nullable(),
  approvedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  ingredients: z.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeVersionInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeVersionInputSchema).optional()
}).strict();

export const RecipeVersionUpdateInputSchema: z.ZodType<Prisma.RecipeVersionUpdateInput> = z.object({
  versionNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  changes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  approvedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  recipe: z.lazy(() => RecipeUpdateOneRequiredWithoutVersionsNestedInputSchema).optional(),
  ingredients: z.lazy(() => RecipeIngredientUpdateManyWithoutRecipeVersionNestedInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUpdateManyWithoutRecipeVersionNestedInputSchema).optional(),
  createdBy: z.lazy(() => UserUpdateOneRequiredWithoutRecipeVersionsCreatedNestedInputSchema).optional(),
  approvedBy: z.lazy(() => UserUpdateOneWithoutRecipeVersionsApprovedNestedInputSchema).optional()
}).strict();

export const RecipeVersionUncheckedUpdateInputSchema: z.ZodType<Prisma.RecipeVersionUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  versionNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  changes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  approvedById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approvedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ingredients: z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeVersionNestedInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeVersionNestedInputSchema).optional()
}).strict();

export const RecipeVersionCreateManyInputSchema: z.ZodType<Prisma.RecipeVersionCreateManyInput> = z.object({
  id: z.number().int().optional(),
  recipeId: z.number().int(),
  versionNumber: z.number().int(),
  description: z.string().optional().nullable(),
  changes: z.string().optional().nullable(),
  isActive: z.boolean().optional(),
  createdById: z.number().int(),
  approvedById: z.number().int().optional().nullable(),
  approvedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const RecipeVersionUpdateManyMutationInputSchema: z.ZodType<Prisma.RecipeVersionUpdateManyMutationInput> = z.object({
  versionNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  changes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  approvedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RecipeVersionUncheckedUpdateManyInputSchema: z.ZodType<Prisma.RecipeVersionUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  versionNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  changes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  approvedById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approvedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EquipmentCreateInputSchema: z.ZodType<Prisma.EquipmentCreateInput> = z.object({
  name: z.string(),
  description: z.string().optional().nullable(),
  model: z.string().optional().nullable(),
  serialNumber: z.string().optional().nullable(),
  purchaseDate: z.coerce.date().optional().nullable(),
  lastMaintenance: z.coerce.date().optional().nullable(),
  nextMaintenance: z.coerce.date().optional().nullable(),
  status: z.lazy(() => EquipmentStatusSchema).optional(),
  location: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutEquipmentsInputSchema),
  recipes: z.lazy(() => RecipeEquipmentCreateNestedManyWithoutEquipmentInputSchema).optional(),
  maintenanceLogs: z.lazy(() => MaintenanceLogCreateNestedManyWithoutEquipmentInputSchema).optional()
}).strict();

export const EquipmentUncheckedCreateInputSchema: z.ZodType<Prisma.EquipmentUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  model: z.string().optional().nullable(),
  serialNumber: z.string().optional().nullable(),
  purchaseDate: z.coerce.date().optional().nullable(),
  lastMaintenance: z.coerce.date().optional().nullable(),
  nextMaintenance: z.coerce.date().optional().nullable(),
  status: z.lazy(() => EquipmentStatusSchema).optional(),
  location: z.string().optional().nullable(),
  restaurantId: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  recipes: z.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutEquipmentInputSchema).optional(),
  maintenanceLogs: z.lazy(() => MaintenanceLogUncheckedCreateNestedManyWithoutEquipmentInputSchema).optional()
}).strict();

export const EquipmentUpdateInputSchema: z.ZodType<Prisma.EquipmentUpdateInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serialNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  purchaseDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastMaintenance: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nextMaintenance: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => EquipmentStatusSchema),z.lazy(() => EnumEquipmentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneRequiredWithoutEquipmentsNestedInputSchema).optional(),
  recipes: z.lazy(() => RecipeEquipmentUpdateManyWithoutEquipmentNestedInputSchema).optional(),
  maintenanceLogs: z.lazy(() => MaintenanceLogUpdateManyWithoutEquipmentNestedInputSchema).optional()
}).strict();

export const EquipmentUncheckedUpdateInputSchema: z.ZodType<Prisma.EquipmentUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serialNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  purchaseDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastMaintenance: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nextMaintenance: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => EquipmentStatusSchema),z.lazy(() => EnumEquipmentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  recipes: z.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutEquipmentNestedInputSchema).optional(),
  maintenanceLogs: z.lazy(() => MaintenanceLogUncheckedUpdateManyWithoutEquipmentNestedInputSchema).optional()
}).strict();

export const EquipmentCreateManyInputSchema: z.ZodType<Prisma.EquipmentCreateManyInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  model: z.string().optional().nullable(),
  serialNumber: z.string().optional().nullable(),
  purchaseDate: z.coerce.date().optional().nullable(),
  lastMaintenance: z.coerce.date().optional().nullable(),
  nextMaintenance: z.coerce.date().optional().nullable(),
  status: z.lazy(() => EquipmentStatusSchema).optional(),
  location: z.string().optional().nullable(),
  restaurantId: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const EquipmentUpdateManyMutationInputSchema: z.ZodType<Prisma.EquipmentUpdateManyMutationInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serialNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  purchaseDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastMaintenance: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nextMaintenance: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => EquipmentStatusSchema),z.lazy(() => EnumEquipmentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EquipmentUncheckedUpdateManyInputSchema: z.ZodType<Prisma.EquipmentUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serialNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  purchaseDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastMaintenance: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nextMaintenance: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => EquipmentStatusSchema),z.lazy(() => EnumEquipmentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RecipeEquipmentCreateInputSchema: z.ZodType<Prisma.RecipeEquipmentCreateInput> = z.object({
  notes: z.string().optional().nullable(),
  recipe: z.lazy(() => RecipeCreateNestedOneWithoutEquipmentsInputSchema),
  equipment: z.lazy(() => EquipmentCreateNestedOneWithoutRecipesInputSchema),
  RecipeInstruction: z.lazy(() => RecipeInstructionCreateNestedOneWithoutEquipmentInputSchema).optional()
}).strict();

export const RecipeEquipmentUncheckedCreateInputSchema: z.ZodType<Prisma.RecipeEquipmentUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  recipeId: z.number().int(),
  equipmentId: z.number().int(),
  notes: z.string().optional().nullable(),
  recipeInstructionId: z.number().int().optional().nullable()
}).strict();

export const RecipeEquipmentUpdateInputSchema: z.ZodType<Prisma.RecipeEquipmentUpdateInput> = z.object({
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recipe: z.lazy(() => RecipeUpdateOneRequiredWithoutEquipmentsNestedInputSchema).optional(),
  equipment: z.lazy(() => EquipmentUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  RecipeInstruction: z.lazy(() => RecipeInstructionUpdateOneWithoutEquipmentNestedInputSchema).optional()
}).strict();

export const RecipeEquipmentUncheckedUpdateInputSchema: z.ZodType<Prisma.RecipeEquipmentUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  equipmentId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recipeInstructionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const RecipeEquipmentCreateManyInputSchema: z.ZodType<Prisma.RecipeEquipmentCreateManyInput> = z.object({
  id: z.number().int().optional(),
  recipeId: z.number().int(),
  equipmentId: z.number().int(),
  notes: z.string().optional().nullable(),
  recipeInstructionId: z.number().int().optional().nullable()
}).strict();

export const RecipeEquipmentUpdateManyMutationInputSchema: z.ZodType<Prisma.RecipeEquipmentUpdateManyMutationInput> = z.object({
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const RecipeEquipmentUncheckedUpdateManyInputSchema: z.ZodType<Prisma.RecipeEquipmentUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  equipmentId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recipeInstructionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const MaintenanceLogCreateInputSchema: z.ZodType<Prisma.MaintenanceLogCreateInput> = z.object({
  date: z.coerce.date().optional(),
  type: z.lazy(() => MaintenanceTypeSchema),
  description: z.string(),
  cost: z.number().optional().nullable(),
  performedBy: z.string(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  equipment: z.lazy(() => EquipmentCreateNestedOneWithoutMaintenanceLogsInputSchema)
}).strict();

export const MaintenanceLogUncheckedCreateInputSchema: z.ZodType<Prisma.MaintenanceLogUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  equipmentId: z.number().int(),
  date: z.coerce.date().optional(),
  type: z.lazy(() => MaintenanceTypeSchema),
  description: z.string(),
  cost: z.number().optional().nullable(),
  performedBy: z.string(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const MaintenanceLogUpdateInputSchema: z.ZodType<Prisma.MaintenanceLogUpdateInput> = z.object({
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => MaintenanceTypeSchema),z.lazy(() => EnumMaintenanceTypeFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  performedBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  equipment: z.lazy(() => EquipmentUpdateOneRequiredWithoutMaintenanceLogsNestedInputSchema).optional()
}).strict();

export const MaintenanceLogUncheckedUpdateInputSchema: z.ZodType<Prisma.MaintenanceLogUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  equipmentId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => MaintenanceTypeSchema),z.lazy(() => EnumMaintenanceTypeFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  performedBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MaintenanceLogCreateManyInputSchema: z.ZodType<Prisma.MaintenanceLogCreateManyInput> = z.object({
  id: z.number().int().optional(),
  equipmentId: z.number().int(),
  date: z.coerce.date().optional(),
  type: z.lazy(() => MaintenanceTypeSchema),
  description: z.string(),
  cost: z.number().optional().nullable(),
  performedBy: z.string(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const MaintenanceLogUpdateManyMutationInputSchema: z.ZodType<Prisma.MaintenanceLogUpdateManyMutationInput> = z.object({
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => MaintenanceTypeSchema),z.lazy(() => EnumMaintenanceTypeFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  performedBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MaintenanceLogUncheckedUpdateManyInputSchema: z.ZodType<Prisma.MaintenanceLogUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  equipmentId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => MaintenanceTypeSchema),z.lazy(() => EnumMaintenanceTypeFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  performedBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const QualityChecklistCreateInputSchema: z.ZodType<Prisma.QualityChecklistCreateInput> = z.object({
  name: z.string(),
  description: z.string().optional().nullable(),
  frequency: z.lazy(() => ChecklistFrequencySchema).optional(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutQualityChecklistsInputSchema),
  items: z.lazy(() => ChecklistItemCreateNestedManyWithoutChecklistInputSchema).optional(),
  completions: z.lazy(() => ChecklistCompleteCreateNestedManyWithoutChecklistInputSchema).optional()
}).strict();

export const QualityChecklistUncheckedCreateInputSchema: z.ZodType<Prisma.QualityChecklistUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  restaurantId: z.number().int(),
  frequency: z.lazy(() => ChecklistFrequencySchema).optional(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  items: z.lazy(() => ChecklistItemUncheckedCreateNestedManyWithoutChecklistInputSchema).optional(),
  completions: z.lazy(() => ChecklistCompleteUncheckedCreateNestedManyWithoutChecklistInputSchema).optional()
}).strict();

export const QualityChecklistUpdateInputSchema: z.ZodType<Prisma.QualityChecklistUpdateInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  frequency: z.union([ z.lazy(() => ChecklistFrequencySchema),z.lazy(() => EnumChecklistFrequencyFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneRequiredWithoutQualityChecklistsNestedInputSchema).optional(),
  items: z.lazy(() => ChecklistItemUpdateManyWithoutChecklistNestedInputSchema).optional(),
  completions: z.lazy(() => ChecklistCompleteUpdateManyWithoutChecklistNestedInputSchema).optional()
}).strict();

export const QualityChecklistUncheckedUpdateInputSchema: z.ZodType<Prisma.QualityChecklistUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.lazy(() => ChecklistFrequencySchema),z.lazy(() => EnumChecklistFrequencyFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  items: z.lazy(() => ChecklistItemUncheckedUpdateManyWithoutChecklistNestedInputSchema).optional(),
  completions: z.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutChecklistNestedInputSchema).optional()
}).strict();

export const QualityChecklistCreateManyInputSchema: z.ZodType<Prisma.QualityChecklistCreateManyInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  restaurantId: z.number().int(),
  frequency: z.lazy(() => ChecklistFrequencySchema).optional(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const QualityChecklistUpdateManyMutationInputSchema: z.ZodType<Prisma.QualityChecklistUpdateManyMutationInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  frequency: z.union([ z.lazy(() => ChecklistFrequencySchema),z.lazy(() => EnumChecklistFrequencyFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const QualityChecklistUncheckedUpdateManyInputSchema: z.ZodType<Prisma.QualityChecklistUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.lazy(() => ChecklistFrequencySchema),z.lazy(() => EnumChecklistFrequencyFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ChecklistItemCreateInputSchema: z.ZodType<Prisma.ChecklistItemCreateInput> = z.object({
  description: z.string(),
  order: z.number().int(),
  type: z.lazy(() => ChecklistItemTypeSchema),
  requiredPhotos: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  checklist: z.lazy(() => QualityChecklistCreateNestedOneWithoutItemsInputSchema),
  completions: z.lazy(() => ChecklistItemCompleteCreateNestedManyWithoutChecklistItemInputSchema).optional()
}).strict();

export const ChecklistItemUncheckedCreateInputSchema: z.ZodType<Prisma.ChecklistItemUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  checklistId: z.number().int(),
  description: z.string(),
  order: z.number().int(),
  type: z.lazy(() => ChecklistItemTypeSchema),
  requiredPhotos: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  completions: z.lazy(() => ChecklistItemCompleteUncheckedCreateNestedManyWithoutChecklistItemInputSchema).optional()
}).strict();

export const ChecklistItemUpdateInputSchema: z.ZodType<Prisma.ChecklistItemUpdateInput> = z.object({
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => ChecklistItemTypeSchema),z.lazy(() => EnumChecklistItemTypeFieldUpdateOperationsInputSchema) ]).optional(),
  requiredPhotos: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  checklist: z.lazy(() => QualityChecklistUpdateOneRequiredWithoutItemsNestedInputSchema).optional(),
  completions: z.lazy(() => ChecklistItemCompleteUpdateManyWithoutChecklistItemNestedInputSchema).optional()
}).strict();

export const ChecklistItemUncheckedUpdateInputSchema: z.ZodType<Prisma.ChecklistItemUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  checklistId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => ChecklistItemTypeSchema),z.lazy(() => EnumChecklistItemTypeFieldUpdateOperationsInputSchema) ]).optional(),
  requiredPhotos: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  completions: z.lazy(() => ChecklistItemCompleteUncheckedUpdateManyWithoutChecklistItemNestedInputSchema).optional()
}).strict();

export const ChecklistItemCreateManyInputSchema: z.ZodType<Prisma.ChecklistItemCreateManyInput> = z.object({
  id: z.number().int().optional(),
  checklistId: z.number().int(),
  description: z.string(),
  order: z.number().int(),
  type: z.lazy(() => ChecklistItemTypeSchema),
  requiredPhotos: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ChecklistItemUpdateManyMutationInputSchema: z.ZodType<Prisma.ChecklistItemUpdateManyMutationInput> = z.object({
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => ChecklistItemTypeSchema),z.lazy(() => EnumChecklistItemTypeFieldUpdateOperationsInputSchema) ]).optional(),
  requiredPhotos: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ChecklistItemUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ChecklistItemUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  checklistId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => ChecklistItemTypeSchema),z.lazy(() => EnumChecklistItemTypeFieldUpdateOperationsInputSchema) ]).optional(),
  requiredPhotos: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ChecklistCompleteCreateInputSchema: z.ZodType<Prisma.ChecklistCompleteCreateInput> = z.object({
  date: z.coerce.date(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  checklist: z.lazy(() => QualityChecklistCreateNestedOneWithoutCompletionsInputSchema),
  completedBy: z.lazy(() => UserCreateNestedOneWithoutChecklistCompletesInputSchema),
  items: z.lazy(() => ChecklistItemCompleteCreateNestedManyWithoutChecklistCompleteInputSchema).optional()
}).strict();

export const ChecklistCompleteUncheckedCreateInputSchema: z.ZodType<Prisma.ChecklistCompleteUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  checklistId: z.number().int(),
  completedById: z.number().int(),
  date: z.coerce.date(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  items: z.lazy(() => ChecklistItemCompleteUncheckedCreateNestedManyWithoutChecklistCompleteInputSchema).optional()
}).strict();

export const ChecklistCompleteUpdateInputSchema: z.ZodType<Prisma.ChecklistCompleteUpdateInput> = z.object({
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  checklist: z.lazy(() => QualityChecklistUpdateOneRequiredWithoutCompletionsNestedInputSchema).optional(),
  completedBy: z.lazy(() => UserUpdateOneRequiredWithoutChecklistCompletesNestedInputSchema).optional(),
  items: z.lazy(() => ChecklistItemCompleteUpdateManyWithoutChecklistCompleteNestedInputSchema).optional()
}).strict();

export const ChecklistCompleteUncheckedUpdateInputSchema: z.ZodType<Prisma.ChecklistCompleteUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  checklistId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  completedById: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  items: z.lazy(() => ChecklistItemCompleteUncheckedUpdateManyWithoutChecklistCompleteNestedInputSchema).optional()
}).strict();

export const ChecklistCompleteCreateManyInputSchema: z.ZodType<Prisma.ChecklistCompleteCreateManyInput> = z.object({
  id: z.number().int().optional(),
  checklistId: z.number().int(),
  completedById: z.number().int(),
  date: z.coerce.date(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ChecklistCompleteUpdateManyMutationInputSchema: z.ZodType<Prisma.ChecklistCompleteUpdateManyMutationInput> = z.object({
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ChecklistCompleteUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ChecklistCompleteUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  checklistId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  completedById: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ChecklistItemCompleteCreateInputSchema: z.ZodType<Prisma.ChecklistItemCompleteCreateInput> = z.object({
  status: z.lazy(() => ChecklistStatusSchema),
  notes: z.string().optional().nullable(),
  photoUrls: z.union([ z.lazy(() => ChecklistItemCompleteCreatephotoUrlsInputSchema),z.string().array() ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  checklistComplete: z.lazy(() => ChecklistCompleteCreateNestedOneWithoutItemsInputSchema),
  checklistItem: z.lazy(() => ChecklistItemCreateNestedOneWithoutCompletionsInputSchema)
}).strict();

export const ChecklistItemCompleteUncheckedCreateInputSchema: z.ZodType<Prisma.ChecklistItemCompleteUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  checklistCompleteId: z.number().int(),
  checklistItemId: z.number().int(),
  status: z.lazy(() => ChecklistStatusSchema),
  notes: z.string().optional().nullable(),
  photoUrls: z.union([ z.lazy(() => ChecklistItemCompleteCreatephotoUrlsInputSchema),z.string().array() ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ChecklistItemCompleteUpdateInputSchema: z.ZodType<Prisma.ChecklistItemCompleteUpdateInput> = z.object({
  status: z.union([ z.lazy(() => ChecklistStatusSchema),z.lazy(() => EnumChecklistStatusFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  photoUrls: z.union([ z.lazy(() => ChecklistItemCompleteUpdatephotoUrlsInputSchema),z.string().array() ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  checklistComplete: z.lazy(() => ChecklistCompleteUpdateOneRequiredWithoutItemsNestedInputSchema).optional(),
  checklistItem: z.lazy(() => ChecklistItemUpdateOneRequiredWithoutCompletionsNestedInputSchema).optional()
}).strict();

export const ChecklistItemCompleteUncheckedUpdateInputSchema: z.ZodType<Prisma.ChecklistItemCompleteUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  checklistCompleteId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  checklistItemId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ChecklistStatusSchema),z.lazy(() => EnumChecklistStatusFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  photoUrls: z.union([ z.lazy(() => ChecklistItemCompleteUpdatephotoUrlsInputSchema),z.string().array() ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ChecklistItemCompleteCreateManyInputSchema: z.ZodType<Prisma.ChecklistItemCompleteCreateManyInput> = z.object({
  id: z.number().int().optional(),
  checklistCompleteId: z.number().int(),
  checklistItemId: z.number().int(),
  status: z.lazy(() => ChecklistStatusSchema),
  notes: z.string().optional().nullable(),
  photoUrls: z.union([ z.lazy(() => ChecklistItemCompleteCreatephotoUrlsInputSchema),z.string().array() ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ChecklistItemCompleteUpdateManyMutationInputSchema: z.ZodType<Prisma.ChecklistItemCompleteUpdateManyMutationInput> = z.object({
  status: z.union([ z.lazy(() => ChecklistStatusSchema),z.lazy(() => EnumChecklistStatusFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  photoUrls: z.union([ z.lazy(() => ChecklistItemCompleteUpdatephotoUrlsInputSchema),z.string().array() ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ChecklistItemCompleteUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ChecklistItemCompleteUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  checklistCompleteId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  checklistItemId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ChecklistStatusSchema),z.lazy(() => EnumChecklistStatusFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  photoUrls: z.union([ z.lazy(() => ChecklistItemCompleteUpdatephotoUrlsInputSchema),z.string().array() ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SupplierPriceHistoryCreateInputSchema: z.ZodType<Prisma.SupplierPriceHistoryCreateInput> = z.object({
  price: z.number(),
  unit: z.string(),
  startDate: z.coerce.date(),
  endDate: z.coerce.date().optional().nullable(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  vendor: z.lazy(() => VendorCreateNestedOneWithoutSupplierPriceHistoryInputSchema),
  ingredient: z.lazy(() => IngredientCreateNestedOneWithoutPriceHistoryInputSchema)
}).strict();

export const SupplierPriceHistoryUncheckedCreateInputSchema: z.ZodType<Prisma.SupplierPriceHistoryUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  vendorId: z.number().int(),
  ingredientId: z.number().int(),
  price: z.number(),
  unit: z.string(),
  startDate: z.coerce.date(),
  endDate: z.coerce.date().optional().nullable(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const SupplierPriceHistoryUpdateInputSchema: z.ZodType<Prisma.SupplierPriceHistoryUpdateInput> = z.object({
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  vendor: z.lazy(() => VendorUpdateOneRequiredWithoutSupplierPriceHistoryNestedInputSchema).optional(),
  ingredient: z.lazy(() => IngredientUpdateOneRequiredWithoutPriceHistoryNestedInputSchema).optional()
}).strict();

export const SupplierPriceHistoryUncheckedUpdateInputSchema: z.ZodType<Prisma.SupplierPriceHistoryUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  vendorId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ingredientId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SupplierPriceHistoryCreateManyInputSchema: z.ZodType<Prisma.SupplierPriceHistoryCreateManyInput> = z.object({
  id: z.number().int().optional(),
  vendorId: z.number().int(),
  ingredientId: z.number().int(),
  price: z.number(),
  unit: z.string(),
  startDate: z.coerce.date(),
  endDate: z.coerce.date().optional().nullable(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const SupplierPriceHistoryUpdateManyMutationInputSchema: z.ZodType<Prisma.SupplierPriceHistoryUpdateManyMutationInput> = z.object({
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SupplierPriceHistoryUncheckedUpdateManyInputSchema: z.ZodType<Prisma.SupplierPriceHistoryUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  vendorId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ingredientId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CustomerFeedbackCreateInputSchema: z.ZodType<Prisma.CustomerFeedbackCreateInput> = z.object({
  rating: z.number().int(),
  comment: z.string().optional().nullable(),
  source: z.lazy(() => FeedbackSourceSchema),
  tags: z.union([ z.lazy(() => CustomerFeedbackCreatetagsInputSchema),z.string().array() ]).optional(),
  status: z.lazy(() => FeedbackStatusSchema).optional(),
  responseText: z.string().optional().nullable(),
  respondedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutCustomerFeedbacksInputSchema),
  menuItem: z.lazy(() => MenuItemCreateNestedOneWithoutFeedbackInputSchema).optional(),
  respondedBy: z.lazy(() => UserCreateNestedOneWithoutCustomerFeedbackResponsesInputSchema).optional()
}).strict();

export const CustomerFeedbackUncheckedCreateInputSchema: z.ZodType<Prisma.CustomerFeedbackUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  restaurantId: z.number().int(),
  menuItemId: z.number().int().optional().nullable(),
  rating: z.number().int(),
  comment: z.string().optional().nullable(),
  source: z.lazy(() => FeedbackSourceSchema),
  tags: z.union([ z.lazy(() => CustomerFeedbackCreatetagsInputSchema),z.string().array() ]).optional(),
  status: z.lazy(() => FeedbackStatusSchema).optional(),
  responseText: z.string().optional().nullable(),
  respondedAt: z.coerce.date().optional().nullable(),
  respondedById: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CustomerFeedbackUpdateInputSchema: z.ZodType<Prisma.CustomerFeedbackUpdateInput> = z.object({
  rating: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  comment: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  source: z.union([ z.lazy(() => FeedbackSourceSchema),z.lazy(() => EnumFeedbackSourceFieldUpdateOperationsInputSchema) ]).optional(),
  tags: z.union([ z.lazy(() => CustomerFeedbackUpdatetagsInputSchema),z.string().array() ]).optional(),
  status: z.union([ z.lazy(() => FeedbackStatusSchema),z.lazy(() => EnumFeedbackStatusFieldUpdateOperationsInputSchema) ]).optional(),
  responseText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  respondedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneRequiredWithoutCustomerFeedbacksNestedInputSchema).optional(),
  menuItem: z.lazy(() => MenuItemUpdateOneWithoutFeedbackNestedInputSchema).optional(),
  respondedBy: z.lazy(() => UserUpdateOneWithoutCustomerFeedbackResponsesNestedInputSchema).optional()
}).strict();

export const CustomerFeedbackUncheckedUpdateInputSchema: z.ZodType<Prisma.CustomerFeedbackUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  menuItemId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  comment: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  source: z.union([ z.lazy(() => FeedbackSourceSchema),z.lazy(() => EnumFeedbackSourceFieldUpdateOperationsInputSchema) ]).optional(),
  tags: z.union([ z.lazy(() => CustomerFeedbackUpdatetagsInputSchema),z.string().array() ]).optional(),
  status: z.union([ z.lazy(() => FeedbackStatusSchema),z.lazy(() => EnumFeedbackStatusFieldUpdateOperationsInputSchema) ]).optional(),
  responseText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  respondedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  respondedById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CustomerFeedbackCreateManyInputSchema: z.ZodType<Prisma.CustomerFeedbackCreateManyInput> = z.object({
  id: z.number().int().optional(),
  restaurantId: z.number().int(),
  menuItemId: z.number().int().optional().nullable(),
  rating: z.number().int(),
  comment: z.string().optional().nullable(),
  source: z.lazy(() => FeedbackSourceSchema),
  tags: z.union([ z.lazy(() => CustomerFeedbackCreatetagsInputSchema),z.string().array() ]).optional(),
  status: z.lazy(() => FeedbackStatusSchema).optional(),
  responseText: z.string().optional().nullable(),
  respondedAt: z.coerce.date().optional().nullable(),
  respondedById: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CustomerFeedbackUpdateManyMutationInputSchema: z.ZodType<Prisma.CustomerFeedbackUpdateManyMutationInput> = z.object({
  rating: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  comment: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  source: z.union([ z.lazy(() => FeedbackSourceSchema),z.lazy(() => EnumFeedbackSourceFieldUpdateOperationsInputSchema) ]).optional(),
  tags: z.union([ z.lazy(() => CustomerFeedbackUpdatetagsInputSchema),z.string().array() ]).optional(),
  status: z.union([ z.lazy(() => FeedbackStatusSchema),z.lazy(() => EnumFeedbackStatusFieldUpdateOperationsInputSchema) ]).optional(),
  responseText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  respondedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CustomerFeedbackUncheckedUpdateManyInputSchema: z.ZodType<Prisma.CustomerFeedbackUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  menuItemId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  comment: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  source: z.union([ z.lazy(() => FeedbackSourceSchema),z.lazy(() => EnumFeedbackSourceFieldUpdateOperationsInputSchema) ]).optional(),
  tags: z.union([ z.lazy(() => CustomerFeedbackUpdatetagsInputSchema),z.string().array() ]).optional(),
  status: z.union([ z.lazy(() => FeedbackStatusSchema),z.lazy(() => EnumFeedbackStatusFieldUpdateOperationsInputSchema) ]).optional(),
  responseText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  respondedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  respondedById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DietaryRestrictionCreateInputSchema: z.ZodType<Prisma.DietaryRestrictionCreateInput> = z.object({
  name: z.string(),
  description: z.string().optional().nullable(),
  icon: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  menuItems: z.lazy(() => MenuItemCreateNestedManyWithoutDietaryRestrictionsInputSchema).optional(),
  recipes: z.lazy(() => RecipeCreateNestedManyWithoutDietaryRestrictionsInputSchema).optional(),
  ingredients: z.lazy(() => IngredientCreateNestedManyWithoutDietaryRestrictionsInputSchema).optional()
}).strict();

export const DietaryRestrictionUncheckedCreateInputSchema: z.ZodType<Prisma.DietaryRestrictionUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  icon: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  menuItems: z.lazy(() => MenuItemUncheckedCreateNestedManyWithoutDietaryRestrictionsInputSchema).optional(),
  recipes: z.lazy(() => RecipeUncheckedCreateNestedManyWithoutDietaryRestrictionsInputSchema).optional(),
  ingredients: z.lazy(() => IngredientUncheckedCreateNestedManyWithoutDietaryRestrictionsInputSchema).optional()
}).strict();

export const DietaryRestrictionUpdateInputSchema: z.ZodType<Prisma.DietaryRestrictionUpdateInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  icon: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  menuItems: z.lazy(() => MenuItemUpdateManyWithoutDietaryRestrictionsNestedInputSchema).optional(),
  recipes: z.lazy(() => RecipeUpdateManyWithoutDietaryRestrictionsNestedInputSchema).optional(),
  ingredients: z.lazy(() => IngredientUpdateManyWithoutDietaryRestrictionsNestedInputSchema).optional()
}).strict();

export const DietaryRestrictionUncheckedUpdateInputSchema: z.ZodType<Prisma.DietaryRestrictionUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  icon: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  menuItems: z.lazy(() => MenuItemUncheckedUpdateManyWithoutDietaryRestrictionsNestedInputSchema).optional(),
  recipes: z.lazy(() => RecipeUncheckedUpdateManyWithoutDietaryRestrictionsNestedInputSchema).optional(),
  ingredients: z.lazy(() => IngredientUncheckedUpdateManyWithoutDietaryRestrictionsNestedInputSchema).optional()
}).strict();

export const DietaryRestrictionCreateManyInputSchema: z.ZodType<Prisma.DietaryRestrictionCreateManyInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  icon: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const DietaryRestrictionUpdateManyMutationInputSchema: z.ZodType<Prisma.DietaryRestrictionUpdateManyMutationInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  icon: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DietaryRestrictionUncheckedUpdateManyInputSchema: z.ZodType<Prisma.DietaryRestrictionUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  icon: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RecipeTagCreateInputSchema: z.ZodType<Prisma.RecipeTagCreateInput> = z.object({
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  recipes: z.lazy(() => RecipeCreateNestedManyWithoutTagsInputSchema).optional()
}).strict();

export const RecipeTagUncheckedCreateInputSchema: z.ZodType<Prisma.RecipeTagUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  recipes: z.lazy(() => RecipeUncheckedCreateNestedManyWithoutTagsInputSchema).optional()
}).strict();

export const RecipeTagUpdateInputSchema: z.ZodType<Prisma.RecipeTagUpdateInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  recipes: z.lazy(() => RecipeUpdateManyWithoutTagsNestedInputSchema).optional()
}).strict();

export const RecipeTagUncheckedUpdateInputSchema: z.ZodType<Prisma.RecipeTagUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  recipes: z.lazy(() => RecipeUncheckedUpdateManyWithoutTagsNestedInputSchema).optional()
}).strict();

export const RecipeTagCreateManyInputSchema: z.ZodType<Prisma.RecipeTagCreateManyInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const RecipeTagUpdateManyMutationInputSchema: z.ZodType<Prisma.RecipeTagUpdateManyMutationInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RecipeTagUncheckedUpdateManyInputSchema: z.ZodType<Prisma.RecipeTagUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const LeftoverItemCreateInputSchema: z.ZodType<Prisma.LeftoverItemCreateInput> = z.object({
  date: z.coerce.date(),
  quantity: z.number().int(),
  reason: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutLeftoverItemsInputSchema),
  menuItem: z.lazy(() => MenuItemCreateNestedOneWithoutLeftoverItemsInputSchema),
  recordedBy: z.lazy(() => UserCreateNestedOneWithoutLeftoverItemsInputSchema)
}).strict();

export const LeftoverItemUncheckedCreateInputSchema: z.ZodType<Prisma.LeftoverItemUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  restaurantId: z.number().int(),
  date: z.coerce.date(),
  menuItemId: z.number().int(),
  quantity: z.number().int(),
  reason: z.string(),
  recordedById: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const LeftoverItemUpdateInputSchema: z.ZodType<Prisma.LeftoverItemUpdateInput> = z.object({
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  reason: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneRequiredWithoutLeftoverItemsNestedInputSchema).optional(),
  menuItem: z.lazy(() => MenuItemUpdateOneRequiredWithoutLeftoverItemsNestedInputSchema).optional(),
  recordedBy: z.lazy(() => UserUpdateOneRequiredWithoutLeftoverItemsNestedInputSchema).optional()
}).strict();

export const LeftoverItemUncheckedUpdateInputSchema: z.ZodType<Prisma.LeftoverItemUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  menuItemId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  reason: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  recordedById: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const LeftoverItemCreateManyInputSchema: z.ZodType<Prisma.LeftoverItemCreateManyInput> = z.object({
  id: z.number().int().optional(),
  restaurantId: z.number().int(),
  date: z.coerce.date(),
  menuItemId: z.number().int(),
  quantity: z.number().int(),
  reason: z.string(),
  recordedById: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const LeftoverItemUpdateManyMutationInputSchema: z.ZodType<Prisma.LeftoverItemUpdateManyMutationInput> = z.object({
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  reason: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const LeftoverItemUncheckedUpdateManyInputSchema: z.ZodType<Prisma.LeftoverItemUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  menuItemId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  reason: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  recordedById: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const WasteRecordCreateInputSchema: z.ZodType<Prisma.WasteRecordCreateInput> = z.object({
  date: z.coerce.date(),
  quantity: z.number(),
  unit: z.string(),
  reason: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutWasteRecordsInputSchema),
  ingrediente: z.lazy(() => IngredientCreateNestedOneWithoutWasteRecordsInputSchema),
  recordedBy: z.lazy(() => UserCreateNestedOneWithoutWasteRecordsInputSchema)
}).strict();

export const WasteRecordUncheckedCreateInputSchema: z.ZodType<Prisma.WasteRecordUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  restaurantId: z.number().int(),
  date: z.coerce.date(),
  ingredientId: z.number().int(),
  quantity: z.number(),
  unit: z.string(),
  reason: z.string(),
  recordedById: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const WasteRecordUpdateInputSchema: z.ZodType<Prisma.WasteRecordUpdateInput> = z.object({
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reason: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneRequiredWithoutWasteRecordsNestedInputSchema).optional(),
  ingrediente: z.lazy(() => IngredientUpdateOneRequiredWithoutWasteRecordsNestedInputSchema).optional(),
  recordedBy: z.lazy(() => UserUpdateOneRequiredWithoutWasteRecordsNestedInputSchema).optional()
}).strict();

export const WasteRecordUncheckedUpdateInputSchema: z.ZodType<Prisma.WasteRecordUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ingredientId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reason: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  recordedById: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const WasteRecordCreateManyInputSchema: z.ZodType<Prisma.WasteRecordCreateManyInput> = z.object({
  id: z.number().int().optional(),
  restaurantId: z.number().int(),
  date: z.coerce.date(),
  ingredientId: z.number().int(),
  quantity: z.number(),
  unit: z.string(),
  reason: z.string(),
  recordedById: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const WasteRecordUpdateManyMutationInputSchema: z.ZodType<Prisma.WasteRecordUpdateManyMutationInput> = z.object({
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reason: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const WasteRecordUncheckedUpdateManyInputSchema: z.ZodType<Prisma.WasteRecordUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ingredientId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reason: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  recordedById: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProductionPlanCreateInputSchema: z.ZodType<Prisma.ProductionPlanCreateInput> = z.object({
  date: z.coerce.date(),
  status: z.lazy(() => ProductionStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutProductionPlansInputSchema),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutProductionPlansInputSchema),
  items: z.lazy(() => ProductionPlanItemCreateNestedManyWithoutProductionPlanInputSchema).optional()
}).strict();

export const ProductionPlanUncheckedCreateInputSchema: z.ZodType<Prisma.ProductionPlanUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  restaurantId: z.number().int(),
  date: z.coerce.date(),
  status: z.lazy(() => ProductionStatusSchema).optional(),
  createdById: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  items: z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutProductionPlanInputSchema).optional()
}).strict();

export const ProductionPlanUpdateInputSchema: z.ZodType<Prisma.ProductionPlanUpdateInput> = z.object({
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ProductionStatusSchema),z.lazy(() => EnumProductionStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneRequiredWithoutProductionPlansNestedInputSchema).optional(),
  createdBy: z.lazy(() => UserUpdateOneRequiredWithoutProductionPlansNestedInputSchema).optional(),
  items: z.lazy(() => ProductionPlanItemUpdateManyWithoutProductionPlanNestedInputSchema).optional()
}).strict();

export const ProductionPlanUncheckedUpdateInputSchema: z.ZodType<Prisma.ProductionPlanUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ProductionStatusSchema),z.lazy(() => EnumProductionStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  items: z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutProductionPlanNestedInputSchema).optional()
}).strict();

export const ProductionPlanCreateManyInputSchema: z.ZodType<Prisma.ProductionPlanCreateManyInput> = z.object({
  id: z.number().int().optional(),
  restaurantId: z.number().int(),
  date: z.coerce.date(),
  status: z.lazy(() => ProductionStatusSchema).optional(),
  createdById: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ProductionPlanUpdateManyMutationInputSchema: z.ZodType<Prisma.ProductionPlanUpdateManyMutationInput> = z.object({
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ProductionStatusSchema),z.lazy(() => EnumProductionStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProductionPlanUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ProductionPlanUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ProductionStatusSchema),z.lazy(() => EnumProductionStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProductionPlanItemCreateInputSchema: z.ZodType<Prisma.ProductionPlanItemCreateInput> = z.object({
  quantity: z.number().int(),
  unit: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  productionPlan: z.lazy(() => ProductionPlanCreateNestedOneWithoutItemsInputSchema),
  recipe: z.lazy(() => RecipeCreateNestedOneWithoutProductionPlanItemsInputSchema),
  assignedTo: z.lazy(() => UserCreateNestedOneWithoutProductionPlanItemsInputSchema).optional()
}).strict();

export const ProductionPlanItemUncheckedCreateInputSchema: z.ZodType<Prisma.ProductionPlanItemUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  productionPlanId: z.number().int(),
  recipeId: z.number().int(),
  quantity: z.number().int(),
  unit: z.string(),
  assignedToId: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ProductionPlanItemUpdateInputSchema: z.ZodType<Prisma.ProductionPlanItemUpdateInput> = z.object({
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  productionPlan: z.lazy(() => ProductionPlanUpdateOneRequiredWithoutItemsNestedInputSchema).optional(),
  recipe: z.lazy(() => RecipeUpdateOneRequiredWithoutProductionPlanItemsNestedInputSchema).optional(),
  assignedTo: z.lazy(() => UserUpdateOneWithoutProductionPlanItemsNestedInputSchema).optional()
}).strict();

export const ProductionPlanItemUncheckedUpdateInputSchema: z.ZodType<Prisma.ProductionPlanItemUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  productionPlanId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assignedToId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProductionPlanItemCreateManyInputSchema: z.ZodType<Prisma.ProductionPlanItemCreateManyInput> = z.object({
  id: z.number().int().optional(),
  productionPlanId: z.number().int(),
  recipeId: z.number().int(),
  quantity: z.number().int(),
  unit: z.string(),
  assignedToId: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ProductionPlanItemUpdateManyMutationInputSchema: z.ZodType<Prisma.ProductionPlanItemUpdateManyMutationInput> = z.object({
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProductionPlanItemUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ProductionPlanItemUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  productionPlanId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assignedToId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ShiftTaskCreateInputSchema: z.ZodType<Prisma.ShiftTaskCreateInput> = z.object({
  taskType: z.lazy(() => TaskTypeSchema),
  startTime: z.coerce.date(),
  endTime: z.coerce.date(),
  duration: z.number().int(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  shift: z.lazy(() => ShiftCreateNestedOneWithoutTasksInputSchema)
}).strict();

export const ShiftTaskUncheckedCreateInputSchema: z.ZodType<Prisma.ShiftTaskUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  shiftId: z.number().int(),
  taskType: z.lazy(() => TaskTypeSchema),
  startTime: z.coerce.date(),
  endTime: z.coerce.date(),
  duration: z.number().int(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ShiftTaskUpdateInputSchema: z.ZodType<Prisma.ShiftTaskUpdateInput> = z.object({
  taskType: z.union([ z.lazy(() => TaskTypeSchema),z.lazy(() => EnumTaskTypeFieldUpdateOperationsInputSchema) ]).optional(),
  startTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  duration: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  shift: z.lazy(() => ShiftUpdateOneRequiredWithoutTasksNestedInputSchema).optional()
}).strict();

export const ShiftTaskUncheckedUpdateInputSchema: z.ZodType<Prisma.ShiftTaskUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shiftId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  taskType: z.union([ z.lazy(() => TaskTypeSchema),z.lazy(() => EnumTaskTypeFieldUpdateOperationsInputSchema) ]).optional(),
  startTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  duration: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ShiftTaskCreateManyInputSchema: z.ZodType<Prisma.ShiftTaskCreateManyInput> = z.object({
  id: z.number().int().optional(),
  shiftId: z.number().int(),
  taskType: z.lazy(() => TaskTypeSchema),
  startTime: z.coerce.date(),
  endTime: z.coerce.date(),
  duration: z.number().int(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ShiftTaskUpdateManyMutationInputSchema: z.ZodType<Prisma.ShiftTaskUpdateManyMutationInput> = z.object({
  taskType: z.union([ z.lazy(() => TaskTypeSchema),z.lazy(() => EnumTaskTypeFieldUpdateOperationsInputSchema) ]).optional(),
  startTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  duration: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ShiftTaskUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ShiftTaskUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  shiftId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  taskType: z.union([ z.lazy(() => TaskTypeSchema),z.lazy(() => EnumTaskTypeFieldUpdateOperationsInputSchema) ]).optional(),
  startTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  duration: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AvailabilityCreateInputSchema: z.ZodType<Prisma.AvailabilityCreateInput> = z.object({
  dayOfWeek: z.lazy(() => DayOfWeekSchema),
  startTime: z.coerce.date(),
  endTime: z.coerce.date(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutAvailabilityInputSchema)
}).strict();

export const AvailabilityUncheckedCreateInputSchema: z.ZodType<Prisma.AvailabilityUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  userId: z.number().int(),
  dayOfWeek: z.lazy(() => DayOfWeekSchema),
  startTime: z.coerce.date(),
  endTime: z.coerce.date(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const AvailabilityUpdateInputSchema: z.ZodType<Prisma.AvailabilityUpdateInput> = z.object({
  dayOfWeek: z.union([ z.lazy(() => DayOfWeekSchema),z.lazy(() => EnumDayOfWeekFieldUpdateOperationsInputSchema) ]).optional(),
  startTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutAvailabilityNestedInputSchema).optional()
}).strict();

export const AvailabilityUncheckedUpdateInputSchema: z.ZodType<Prisma.AvailabilityUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  dayOfWeek: z.union([ z.lazy(() => DayOfWeekSchema),z.lazy(() => EnumDayOfWeekFieldUpdateOperationsInputSchema) ]).optional(),
  startTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AvailabilityCreateManyInputSchema: z.ZodType<Prisma.AvailabilityCreateManyInput> = z.object({
  id: z.number().int().optional(),
  userId: z.number().int(),
  dayOfWeek: z.lazy(() => DayOfWeekSchema),
  startTime: z.coerce.date(),
  endTime: z.coerce.date(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const AvailabilityUpdateManyMutationInputSchema: z.ZodType<Prisma.AvailabilityUpdateManyMutationInput> = z.object({
  dayOfWeek: z.union([ z.lazy(() => DayOfWeekSchema),z.lazy(() => EnumDayOfWeekFieldUpdateOperationsInputSchema) ]).optional(),
  startTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AvailabilityUncheckedUpdateManyInputSchema: z.ZodType<Prisma.AvailabilityUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  dayOfWeek: z.union([ z.lazy(() => DayOfWeekSchema),z.lazy(() => EnumDayOfWeekFieldUpdateOperationsInputSchema) ]).optional(),
  startTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SchedulingConstraintCreateInputSchema: z.ZodType<Prisma.SchedulingConstraintCreateInput> = z.object({
  date: z.coerce.date(),
  constraintsType: z.lazy(() => ConstraintTypeSchema),
  startTime: z.coerce.date(),
  endTime: z.coerce.date(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutSchedulingConstraintsInputSchema)
}).strict();

export const SchedulingConstraintUncheckedCreateInputSchema: z.ZodType<Prisma.SchedulingConstraintUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  userId: z.number().int(),
  date: z.coerce.date(),
  constraintsType: z.lazy(() => ConstraintTypeSchema),
  startTime: z.coerce.date(),
  endTime: z.coerce.date(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const SchedulingConstraintUpdateInputSchema: z.ZodType<Prisma.SchedulingConstraintUpdateInput> = z.object({
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  constraintsType: z.union([ z.lazy(() => ConstraintTypeSchema),z.lazy(() => EnumConstraintTypeFieldUpdateOperationsInputSchema) ]).optional(),
  startTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutSchedulingConstraintsNestedInputSchema).optional()
}).strict();

export const SchedulingConstraintUncheckedUpdateInputSchema: z.ZodType<Prisma.SchedulingConstraintUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  constraintsType: z.union([ z.lazy(() => ConstraintTypeSchema),z.lazy(() => EnumConstraintTypeFieldUpdateOperationsInputSchema) ]).optional(),
  startTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SchedulingConstraintCreateManyInputSchema: z.ZodType<Prisma.SchedulingConstraintCreateManyInput> = z.object({
  id: z.number().int().optional(),
  userId: z.number().int(),
  date: z.coerce.date(),
  constraintsType: z.lazy(() => ConstraintTypeSchema),
  startTime: z.coerce.date(),
  endTime: z.coerce.date(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const SchedulingConstraintUpdateManyMutationInputSchema: z.ZodType<Prisma.SchedulingConstraintUpdateManyMutationInput> = z.object({
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  constraintsType: z.union([ z.lazy(() => ConstraintTypeSchema),z.lazy(() => EnumConstraintTypeFieldUpdateOperationsInputSchema) ]).optional(),
  startTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SchedulingConstraintUncheckedUpdateManyInputSchema: z.ZodType<Prisma.SchedulingConstraintUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  constraintsType: z.union([ z.lazy(() => ConstraintTypeSchema),z.lazy(() => EnumConstraintTypeFieldUpdateOperationsInputSchema) ]).optional(),
  startTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InventoryWithdrawalCreateInputSchema: z.ZodType<Prisma.InventoryWithdrawalCreateInput> = z.object({
  dateTime: z.coerce.date(),
  quantity: z.number(),
  unit: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  inventoryItem: z.lazy(() => InventoryItemCreateNestedOneWithoutWithdrawalsInputSchema),
  recipe: z.lazy(() => RecipeCreateNestedOneWithoutWithdrawalsInputSchema).optional(),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutInventoryWithdrawalsInputSchema)
}).strict();

export const InventoryWithdrawalUncheckedCreateInputSchema: z.ZodType<Prisma.InventoryWithdrawalUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  inventoryItemId: z.number().int(),
  dateTime: z.coerce.date(),
  quantity: z.number(),
  unit: z.string(),
  recipeId: z.number().int().optional().nullable(),
  createdById: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const InventoryWithdrawalUpdateInputSchema: z.ZodType<Prisma.InventoryWithdrawalUpdateInput> = z.object({
  dateTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  inventoryItem: z.lazy(() => InventoryItemUpdateOneRequiredWithoutWithdrawalsNestedInputSchema).optional(),
  recipe: z.lazy(() => RecipeUpdateOneWithoutWithdrawalsNestedInputSchema).optional(),
  createdBy: z.lazy(() => UserUpdateOneRequiredWithoutInventoryWithdrawalsNestedInputSchema).optional()
}).strict();

export const InventoryWithdrawalUncheckedUpdateInputSchema: z.ZodType<Prisma.InventoryWithdrawalUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inventoryItemId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  dateTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InventoryWithdrawalCreateManyInputSchema: z.ZodType<Prisma.InventoryWithdrawalCreateManyInput> = z.object({
  id: z.number().int().optional(),
  inventoryItemId: z.number().int(),
  dateTime: z.coerce.date(),
  quantity: z.number(),
  unit: z.string(),
  recipeId: z.number().int().optional().nullable(),
  createdById: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const InventoryWithdrawalUpdateManyMutationInputSchema: z.ZodType<Prisma.InventoryWithdrawalUpdateManyMutationInput> = z.object({
  dateTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InventoryWithdrawalUncheckedUpdateManyInputSchema: z.ZodType<Prisma.InventoryWithdrawalUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inventoryItemId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  dateTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AllergenCreateInputSchema: z.ZodType<Prisma.AllergenCreateInput> = z.object({
  name: z.string(),
  description: z.string().optional().nullable(),
  ingredients: z.lazy(() => IngredientAllergenCreateNestedManyWithoutAllergenInputSchema).optional()
}).strict();

export const AllergenUncheckedCreateInputSchema: z.ZodType<Prisma.AllergenUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  ingredients: z.lazy(() => IngredientAllergenUncheckedCreateNestedManyWithoutAllergenInputSchema).optional()
}).strict();

export const AllergenUpdateInputSchema: z.ZodType<Prisma.AllergenUpdateInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ingredients: z.lazy(() => IngredientAllergenUpdateManyWithoutAllergenNestedInputSchema).optional()
}).strict();

export const AllergenUncheckedUpdateInputSchema: z.ZodType<Prisma.AllergenUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ingredients: z.lazy(() => IngredientAllergenUncheckedUpdateManyWithoutAllergenNestedInputSchema).optional()
}).strict();

export const AllergenCreateManyInputSchema: z.ZodType<Prisma.AllergenCreateManyInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable()
}).strict();

export const AllergenUpdateManyMutationInputSchema: z.ZodType<Prisma.AllergenUpdateManyMutationInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AllergenUncheckedUpdateManyInputSchema: z.ZodType<Prisma.AllergenUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const IngredientAllergenCreateInputSchema: z.ZodType<Prisma.IngredientAllergenCreateInput> = z.object({
  ingredient: z.lazy(() => IngredientCreateNestedOneWithoutIngredientAllergensInputSchema),
  allergen: z.lazy(() => AllergenCreateNestedOneWithoutIngredientsInputSchema)
}).strict();

export const IngredientAllergenUncheckedCreateInputSchema: z.ZodType<Prisma.IngredientAllergenUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  ingredientId: z.number().int(),
  allergenId: z.number().int()
}).strict();

export const IngredientAllergenUpdateInputSchema: z.ZodType<Prisma.IngredientAllergenUpdateInput> = z.object({
  ingredient: z.lazy(() => IngredientUpdateOneRequiredWithoutIngredientAllergensNestedInputSchema).optional(),
  allergen: z.lazy(() => AllergenUpdateOneRequiredWithoutIngredientsNestedInputSchema).optional()
}).strict();

export const IngredientAllergenUncheckedUpdateInputSchema: z.ZodType<Prisma.IngredientAllergenUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ingredientId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  allergenId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const IngredientAllergenCreateManyInputSchema: z.ZodType<Prisma.IngredientAllergenCreateManyInput> = z.object({
  id: z.number().int().optional(),
  ingredientId: z.number().int(),
  allergenId: z.number().int()
}).strict();

export const IngredientAllergenUpdateManyMutationInputSchema: z.ZodType<Prisma.IngredientAllergenUpdateManyMutationInput> = z.object({
}).strict();

export const IngredientAllergenUncheckedUpdateManyInputSchema: z.ZodType<Prisma.IngredientAllergenUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ingredientId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  allergenId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const NutritionalRecommendationCreateInputSchema: z.ZodType<Prisma.NutritionalRecommendationCreateInput> = z.object({
  recommendation: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  menuItem: z.lazy(() => MenuItemCreateNestedOneWithoutRecommendationsInputSchema)
}).strict();

export const NutritionalRecommendationUncheckedCreateInputSchema: z.ZodType<Prisma.NutritionalRecommendationUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  menuItemId: z.number().int(),
  recommendation: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const NutritionalRecommendationUpdateInputSchema: z.ZodType<Prisma.NutritionalRecommendationUpdateInput> = z.object({
  recommendation: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  menuItem: z.lazy(() => MenuItemUpdateOneRequiredWithoutRecommendationsNestedInputSchema).optional()
}).strict();

export const NutritionalRecommendationUncheckedUpdateInputSchema: z.ZodType<Prisma.NutritionalRecommendationUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  menuItemId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  recommendation: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const NutritionalRecommendationCreateManyInputSchema: z.ZodType<Prisma.NutritionalRecommendationCreateManyInput> = z.object({
  id: z.number().int().optional(),
  menuItemId: z.number().int(),
  recommendation: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const NutritionalRecommendationUpdateManyMutationInputSchema: z.ZodType<Prisma.NutritionalRecommendationUpdateManyMutationInput> = z.object({
  recommendation: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const NutritionalRecommendationUncheckedUpdateManyInputSchema: z.ZodType<Prisma.NutritionalRecommendationUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  menuItemId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  recommendation: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EarlyAccessCreateInputSchema: z.ZodType<Prisma.EarlyAccessCreateInput> = z.object({
  email: z.string(),
  isEmailSent: z.boolean(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const EarlyAccessUncheckedCreateInputSchema: z.ZodType<Prisma.EarlyAccessUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  email: z.string(),
  isEmailSent: z.boolean(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const EarlyAccessUpdateInputSchema: z.ZodType<Prisma.EarlyAccessUpdateInput> = z.object({
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isEmailSent: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EarlyAccessUncheckedUpdateInputSchema: z.ZodType<Prisma.EarlyAccessUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isEmailSent: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EarlyAccessCreateManyInputSchema: z.ZodType<Prisma.EarlyAccessCreateManyInput> = z.object({
  id: z.number().int().optional(),
  email: z.string(),
  isEmailSent: z.boolean(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const EarlyAccessUpdateManyMutationInputSchema: z.ZodType<Prisma.EarlyAccessUpdateManyMutationInput> = z.object({
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isEmailSent: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EarlyAccessUncheckedUpdateManyInputSchema: z.ZodType<Prisma.EarlyAccessUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  isEmailSent: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const OrganizationCreateInputSchema: z.ZodType<Prisma.OrganizationCreateInput> = z.object({
  name: z.string(),
  imageUrl: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  restaurants: z.lazy(() => RestaurantCreateNestedManyWithoutOrganizationInputSchema).optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  imageUrl: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  restaurants: z.lazy(() => RestaurantUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUpdateInputSchema: z.ZodType<Prisma.OrganizationUpdateInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  restaurants: z.lazy(() => RestaurantUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  users: z.lazy(() => UserUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  restaurants: z.lazy(() => RestaurantUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationCreateManyInputSchema: z.ZodType<Prisma.OrganizationCreateManyInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  imageUrl: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const OrganizationUpdateManyMutationInputSchema: z.ZodType<Prisma.OrganizationUpdateManyMutationInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const OrganizationUncheckedUpdateManyInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InventoryCreateInputSchema: z.ZodType<Prisma.InventoryCreateInput> = z.object({
  name: z.string().optional().nullable(),
  type: z.lazy(() => InventoryTypeSchema).optional(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutInventoryInputSchema),
  items: z.lazy(() => InventoryItemCreateNestedManyWithoutInventoryInputSchema).optional(),
  transactions: z.lazy(() => InventoryTransactionCreateNestedManyWithoutInventoryInputSchema).optional(),
  stockCounts: z.lazy(() => StockCountCreateNestedManyWithoutInventoryInputSchema).optional()
}).strict();

export const InventoryUncheckedCreateInputSchema: z.ZodType<Prisma.InventoryUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  restaurantId: z.number().int(),
  name: z.string().optional().nullable(),
  type: z.lazy(() => InventoryTypeSchema).optional(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  items: z.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutInventoryInputSchema).optional(),
  transactions: z.lazy(() => InventoryTransactionUncheckedCreateNestedManyWithoutInventoryInputSchema).optional(),
  stockCounts: z.lazy(() => StockCountUncheckedCreateNestedManyWithoutInventoryInputSchema).optional()
}).strict();

export const InventoryUpdateInputSchema: z.ZodType<Prisma.InventoryUpdateInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => InventoryTypeSchema),z.lazy(() => EnumInventoryTypeFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneRequiredWithoutInventoryNestedInputSchema).optional(),
  items: z.lazy(() => InventoryItemUpdateManyWithoutInventoryNestedInputSchema).optional(),
  transactions: z.lazy(() => InventoryTransactionUpdateManyWithoutInventoryNestedInputSchema).optional(),
  stockCounts: z.lazy(() => StockCountUpdateManyWithoutInventoryNestedInputSchema).optional()
}).strict();

export const InventoryUncheckedUpdateInputSchema: z.ZodType<Prisma.InventoryUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => InventoryTypeSchema),z.lazy(() => EnumInventoryTypeFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  items: z.lazy(() => InventoryItemUncheckedUpdateManyWithoutInventoryNestedInputSchema).optional(),
  transactions: z.lazy(() => InventoryTransactionUncheckedUpdateManyWithoutInventoryNestedInputSchema).optional(),
  stockCounts: z.lazy(() => StockCountUncheckedUpdateManyWithoutInventoryNestedInputSchema).optional()
}).strict();

export const InventoryCreateManyInputSchema: z.ZodType<Prisma.InventoryCreateManyInput> = z.object({
  id: z.number().int().optional(),
  restaurantId: z.number().int(),
  name: z.string().optional().nullable(),
  type: z.lazy(() => InventoryTypeSchema).optional(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const InventoryUpdateManyMutationInputSchema: z.ZodType<Prisma.InventoryUpdateManyMutationInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => InventoryTypeSchema),z.lazy(() => EnumInventoryTypeFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InventoryUncheckedUpdateManyInputSchema: z.ZodType<Prisma.InventoryUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => InventoryTypeSchema),z.lazy(() => EnumInventoryTypeFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RestaurantCreateInputSchema: z.ZodType<Prisma.RestaurantCreateInput> = z.object({
  name: z.string(),
  imageUrl: z.string().optional().nullable(),
  address: z.string(),
  city: z.string(),
  zipCode: z.string(),
  state: z.string(),
  owner: z.string(),
  foodCost: z.number().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  isDeleted: z.boolean().optional(),
  deleted: z.coerce.date().optional().nullable(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutRestaurantsInputSchema).optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: z.lazy(() => CookBookCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: z.lazy(() => InventoryCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: z.lazy(() => OrderCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: z.lazy(() => RecipeCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: z.lazy(() => MenuCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipments: z.lazy(() => EquipmentCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklists: z.lazy(() => QualityChecklistCreateNestedManyWithoutRestaurantInputSchema).optional(),
  customerFeedbacks: z.lazy(() => CustomerFeedbackCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();

export const RestaurantUncheckedCreateInputSchema: z.ZodType<Prisma.RestaurantUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  imageUrl: z.string().optional().nullable(),
  address: z.string(),
  city: z.string(),
  zipCode: z.string(),
  state: z.string(),
  owner: z.string(),
  organizationId: z.number().int().optional().nullable(),
  foodCost: z.number().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  isDeleted: z.boolean().optional(),
  deleted: z.coerce.date().optional().nullable(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: z.lazy(() => CookBookUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: z.lazy(() => InventoryUncheckedCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: z.lazy(() => OrderUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: z.lazy(() => RecipeUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: z.lazy(() => MenuUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipments: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklists: z.lazy(() => QualityChecklistUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  customerFeedbacks: z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();

export const RestaurantUpdateInputSchema: z.ZodType<Prisma.RestaurantUpdateInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zipCode: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  owner: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deleted: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organization: z.lazy(() => OrganizationUpdateOneWithoutRestaurantsNestedInputSchema).optional(),
  users: z.lazy(() => UserUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: z.lazy(() => CookBookUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: z.lazy(() => InventoryUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: z.lazy(() => OrderUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: z.lazy(() => RecipeUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: z.lazy(() => MenuUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipments: z.lazy(() => EquipmentUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklists: z.lazy(() => QualityChecklistUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  customerFeedbacks: z.lazy(() => CustomerFeedbackUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();

export const RestaurantUncheckedUpdateInputSchema: z.ZodType<Prisma.RestaurantUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zipCode: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  owner: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deleted: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: z.lazy(() => CookBookUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: z.lazy(() => InventoryUncheckedUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: z.lazy(() => OrderUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: z.lazy(() => RecipeUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: z.lazy(() => MenuUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipments: z.lazy(() => EquipmentUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklists: z.lazy(() => QualityChecklistUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  customerFeedbacks: z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();

export const RestaurantCreateManyInputSchema: z.ZodType<Prisma.RestaurantCreateManyInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  imageUrl: z.string().optional().nullable(),
  address: z.string(),
  city: z.string(),
  zipCode: z.string(),
  state: z.string(),
  owner: z.string(),
  organizationId: z.number().int().optional().nullable(),
  foodCost: z.number().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  isDeleted: z.boolean().optional(),
  deleted: z.coerce.date().optional().nullable()
}).strict();

export const RestaurantUpdateManyMutationInputSchema: z.ZodType<Prisma.RestaurantUpdateManyMutationInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zipCode: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  owner: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deleted: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const RestaurantUncheckedUpdateManyInputSchema: z.ZodType<Prisma.RestaurantUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zipCode: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  owner: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deleted: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UserCreateInputSchema: z.ZodType<Prisma.UserCreateInput> = z.object({
  email: z.string(),
  sub: z.number().int().optional().nullable(),
  passwordHash: z.string(),
  firstName: z.string(),
  lastName: z.string(),
  profileImage: z.string().optional().nullable(),
  verified: z.boolean().optional(),
  role: z.lazy(() => UserRoleSchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema).optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutUsersInputSchema).optional(),
  shifts: z.lazy(() => ShiftCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z.lazy(() => AvailabilityCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionCreateNestedManyWithoutApprovedByInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountCreateNestedManyWithoutCreatedByInputSchema).optional()
}).strict();

export const UserUncheckedCreateInputSchema: z.ZodType<Prisma.UserUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  email: z.string(),
  sub: z.number().int().optional().nullable(),
  passwordHash: z.string(),
  firstName: z.string(),
  lastName: z.string(),
  profileImage: z.string().optional().nullable(),
  verified: z.boolean().optional(),
  role: z.lazy(() => UserRoleSchema),
  organizationId: z.number().int().optional().nullable(),
  restaurantId: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  shifts: z.lazy(() => ShiftUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteUncheckedCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutApprovedByInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional()
}).strict();

export const UserUpdateInputSchema: z.ZodType<Prisma.UserUpdateInput> = z.object({
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sub: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passwordHash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  verified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneWithoutUsersNestedInputSchema).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneWithoutUsersNestedInputSchema).optional(),
  shifts: z.lazy(() => ShiftUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionUpdateManyWithoutApprovedByNestedInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountUpdateManyWithoutCreatedByNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateInputSchema: z.ZodType<Prisma.UserUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sub: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passwordHash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  verified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  shifts: z.lazy(() => ShiftUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemUncheckedUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutApprovedByNestedInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional()
}).strict();

export const UserCreateManyInputSchema: z.ZodType<Prisma.UserCreateManyInput> = z.object({
  id: z.number().int().optional(),
  email: z.string(),
  sub: z.number().int().optional().nullable(),
  passwordHash: z.string(),
  firstName: z.string(),
  lastName: z.string(),
  profileImage: z.string().optional().nullable(),
  verified: z.boolean().optional(),
  role: z.lazy(() => UserRoleSchema),
  organizationId: z.number().int().optional().nullable(),
  restaurantId: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const UserUpdateManyMutationInputSchema: z.ZodType<Prisma.UserUpdateManyMutationInput> = z.object({
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sub: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passwordHash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  verified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserUncheckedUpdateManyInputSchema: z.ZodType<Prisma.UserUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sub: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passwordHash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  verified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SessionCreateInputSchema: z.ZodType<Prisma.SessionCreateInput> = z.object({
  id: z.string().uuid().optional(),
  code: z.string(),
  token: z.string(),
  expiresAt: z.coerce.date(),
  createdAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutSessionsInputSchema)
}).strict();

export const SessionUncheckedCreateInputSchema: z.ZodType<Prisma.SessionUncheckedCreateInput> = z.object({
  id: z.string().uuid().optional(),
  userId: z.number().int(),
  code: z.string(),
  token: z.string(),
  expiresAt: z.coerce.date(),
  createdAt: z.coerce.date().optional()
}).strict();

export const SessionUpdateInputSchema: z.ZodType<Prisma.SessionUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutSessionsNestedInputSchema).optional()
}).strict();

export const SessionUncheckedUpdateInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SessionCreateManyInputSchema: z.ZodType<Prisma.SessionCreateManyInput> = z.object({
  id: z.string().uuid().optional(),
  userId: z.number().int(),
  code: z.string(),
  token: z.string(),
  expiresAt: z.coerce.date(),
  createdAt: z.coerce.date().optional()
}).strict();

export const SessionUpdateManyMutationInputSchema: z.ZodType<Prisma.SessionUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SessionUncheckedUpdateManyInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CookBookCreateInputSchema: z.ZodType<Prisma.CookBookCreateInput> = z.object({
  name: z.string(),
  imageUrl: z.string().optional().nullable(),
  category: z.string(),
  recipes: z.lazy(() => RecipeCreateNestedManyWithoutCookBookInputSchema).optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutCookbooksInputSchema).optional()
}).strict();

export const CookBookUncheckedCreateInputSchema: z.ZodType<Prisma.CookBookUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  imageUrl: z.string().optional().nullable(),
  category: z.string(),
  restaurantId: z.number().int().optional().nullable(),
  recipes: z.lazy(() => RecipeUncheckedCreateNestedManyWithoutCookBookInputSchema).optional()
}).strict();

export const CookBookUpdateInputSchema: z.ZodType<Prisma.CookBookUpdateInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  recipes: z.lazy(() => RecipeUpdateManyWithoutCookBookNestedInputSchema).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneWithoutCookbooksNestedInputSchema).optional()
}).strict();

export const CookBookUncheckedUpdateInputSchema: z.ZodType<Prisma.CookBookUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recipes: z.lazy(() => RecipeUncheckedUpdateManyWithoutCookBookNestedInputSchema).optional()
}).strict();

export const CookBookCreateManyInputSchema: z.ZodType<Prisma.CookBookCreateManyInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  imageUrl: z.string().optional().nullable(),
  category: z.string(),
  restaurantId: z.number().int().optional().nullable()
}).strict();

export const CookBookUpdateManyMutationInputSchema: z.ZodType<Prisma.CookBookUpdateManyMutationInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CookBookUncheckedUpdateManyInputSchema: z.ZodType<Prisma.CookBookUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const RecipeCreateInputSchema: z.ZodType<Prisma.RecipeCreateInput> = z.object({
  name: z.string(),
  imageUrls: z.union([ z.lazy(() => RecipeCreateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.string().optional().nullable(),
  servings: z.number().int(),
  cookTime: z.number().int(),
  prepTime: z.number().int(),
  frequency: z.number().int().optional().nullable(),
  foodCost: z.number().optional().nullable(),
  isDeleted: z.boolean().optional(),
  isPublished: z.boolean().optional(),
  publishedAt: z.coerce.date().optional().nullable(),
  language: z.string().optional(),
  skillLevel: z.lazy(() => SkillLevelSchema).optional(),
  category: z.lazy(() => CategorySchema).optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutRecipesInputSchema),
  cookBook: z.lazy(() => CookBookCreateNestedOneWithoutRecipesInputSchema),
  ingredients: z.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeCreateNestedManyWithoutRecipeInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z.lazy(() => RecipeTagCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionCreateNestedManyWithoutRecipesInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureCreateNestedManyWithoutRecipeInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldCreateNestedManyWithoutRecipeInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostCreateNestedManyWithoutRecipeInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionCreateNestedOneWithoutRecipeInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointCreateNestedManyWithoutRecipeInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageCreateNestedOneWithoutRecipeInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoCreateNestedManyWithoutRecipeInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsCreateNestedOneWithoutRecipeInputSchema).optional()
}).strict();

export const RecipeUncheckedCreateInputSchema: z.ZodType<Prisma.RecipeUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  imageUrls: z.union([ z.lazy(() => RecipeCreateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.string().optional().nullable(),
  servings: z.number().int(),
  cookTime: z.number().int(),
  prepTime: z.number().int(),
  frequency: z.number().int().optional().nullable(),
  restaurantId: z.number().int(),
  cookBookId: z.number().int(),
  foodCost: z.number().optional().nullable(),
  isDeleted: z.boolean().optional(),
  isPublished: z.boolean().optional(),
  publishedAt: z.coerce.date().optional().nullable(),
  language: z.string().optional(),
  skillLevel: z.lazy(() => SkillLevelSchema).optional(),
  category: z.lazy(() => CategorySchema).optional(),
  ingredients: z.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUncheckedCreateNestedOneWithoutRecipeInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUncheckedCreateNestedOneWithoutRecipeInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUncheckedCreateNestedOneWithoutRecipeInputSchema).optional()
}).strict();

export const RecipeUpdateInputSchema: z.ZodType<Prisma.RecipeUpdateInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrls: z.union([ z.lazy(() => RecipeUpdateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  servings: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isPublished: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  publishedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  skillLevel: z.union([ z.lazy(() => SkillLevelSchema),z.lazy(() => EnumSkillLevelFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => CategorySchema),z.lazy(() => EnumCategoryFieldUpdateOperationsInputSchema) ]).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  cookBook: z.lazy(() => CookBookUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  ingredients: z.lazy(() => RecipeIngredientUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUpdateManyWithoutRecipeNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUpdateManyWithoutRecipesNestedInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUpdateManyWithoutRecipeNestedInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUpdateManyWithoutRecipeNestedInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUpdateManyWithoutRecipeNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUpdateOneWithoutRecipeNestedInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUpdateManyWithoutRecipeNestedInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUpdateOneWithoutRecipeNestedInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUpdateManyWithoutRecipeNestedInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUpdateOneWithoutRecipeNestedInputSchema).optional()
}).strict();

export const RecipeUncheckedUpdateInputSchema: z.ZodType<Prisma.RecipeUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrls: z.union([ z.lazy(() => RecipeUpdateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  servings: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookBookId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isPublished: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  publishedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  skillLevel: z.union([ z.lazy(() => SkillLevelSchema),z.lazy(() => EnumSkillLevelFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => CategorySchema),z.lazy(() => EnumCategoryFieldUpdateOperationsInputSchema) ]).optional(),
  ingredients: z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional()
}).strict();

export const RecipeCreateManyInputSchema: z.ZodType<Prisma.RecipeCreateManyInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  imageUrls: z.union([ z.lazy(() => RecipeCreateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.string().optional().nullable(),
  servings: z.number().int(),
  cookTime: z.number().int(),
  prepTime: z.number().int(),
  frequency: z.number().int().optional().nullable(),
  restaurantId: z.number().int(),
  cookBookId: z.number().int(),
  foodCost: z.number().optional().nullable(),
  isDeleted: z.boolean().optional(),
  isPublished: z.boolean().optional(),
  publishedAt: z.coerce.date().optional().nullable(),
  language: z.string().optional(),
  skillLevel: z.lazy(() => SkillLevelSchema).optional(),
  category: z.lazy(() => CategorySchema).optional()
}).strict();

export const RecipeUpdateManyMutationInputSchema: z.ZodType<Prisma.RecipeUpdateManyMutationInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrls: z.union([ z.lazy(() => RecipeUpdateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  servings: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isPublished: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  publishedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  skillLevel: z.union([ z.lazy(() => SkillLevelSchema),z.lazy(() => EnumSkillLevelFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => CategorySchema),z.lazy(() => EnumCategoryFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RecipeUncheckedUpdateManyInputSchema: z.ZodType<Prisma.RecipeUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrls: z.union([ z.lazy(() => RecipeUpdateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  servings: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookBookId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isPublished: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  publishedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  skillLevel: z.union([ z.lazy(() => SkillLevelSchema),z.lazy(() => EnumSkillLevelFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => CategorySchema),z.lazy(() => EnumCategoryFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const IngredientCreateInputSchema: z.ZodType<Prisma.IngredientCreateInput> = z.object({
  name: z.string(),
  category: z.string(),
  price: z.number(),
  density: z.number().optional().nullable(),
  dietaryRestrictionId: z.number().int().optional().nullable(),
  calories: z.number().optional().nullable(),
  protein: z.number().optional().nullable(),
  carbohydrates: z.number().optional().nullable(),
  fat: z.number().optional().nullable(),
  fiber: z.number().optional().nullable(),
  sugar: z.number().optional().nullable(),
  sodium: z.number().optional().nullable(),
  usdaFoodId: z.string().optional().nullable(),
  nutritionSource: z.lazy(() => NutritionSourceSchema).optional().nullable(),
  nutritionUpdatedAt: z.coerce.date().optional().nullable(),
  recipeIngredients: z.lazy(() => RecipeIngredientCreateNestedManyWithoutIngredientInputSchema).optional(),
  inventoryItems: z.lazy(() => InventoryItemCreateNestedManyWithoutIngredientInputSchema).optional(),
  orderItems: z.lazy(() => OrderItemCreateNestedManyWithoutIngredientInputSchema).optional(),
  vendors: z.lazy(() => VendorCreateNestedManyWithoutIngredientsInputSchema).optional(),
  WasteRecords: z.lazy(() => WasteRecordCreateNestedManyWithoutIngredienteInputSchema).optional(),
  IngredientAllergens: z.lazy(() => IngredientAllergenCreateNestedManyWithoutIngredientInputSchema).optional(),
  priceHistory: z.lazy(() => SupplierPriceHistoryCreateNestedManyWithoutIngredientInputSchema).optional(),
  DietaryRestrictions: z.lazy(() => DietaryRestrictionCreateNestedManyWithoutIngredientsInputSchema).optional()
}).strict();

export const IngredientUncheckedCreateInputSchema: z.ZodType<Prisma.IngredientUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  category: z.string(),
  price: z.number(),
  density: z.number().optional().nullable(),
  dietaryRestrictionId: z.number().int().optional().nullable(),
  calories: z.number().optional().nullable(),
  protein: z.number().optional().nullable(),
  carbohydrates: z.number().optional().nullable(),
  fat: z.number().optional().nullable(),
  fiber: z.number().optional().nullable(),
  sugar: z.number().optional().nullable(),
  sodium: z.number().optional().nullable(),
  usdaFoodId: z.string().optional().nullable(),
  nutritionSource: z.lazy(() => NutritionSourceSchema).optional().nullable(),
  nutritionUpdatedAt: z.coerce.date().optional().nullable(),
  recipeIngredients: z.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  inventoryItems: z.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  orderItems: z.lazy(() => OrderItemUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  vendors: z.lazy(() => VendorUncheckedCreateNestedManyWithoutIngredientsInputSchema).optional(),
  WasteRecords: z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutIngredienteInputSchema).optional(),
  IngredientAllergens: z.lazy(() => IngredientAllergenUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  priceHistory: z.lazy(() => SupplierPriceHistoryUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  DietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutIngredientsInputSchema).optional()
}).strict();

export const IngredientUpdateInputSchema: z.ZodType<Prisma.IngredientUpdateInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  density: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dietaryRestrictionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  calories: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  protein: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  carbohydrates: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fat: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fiber: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sugar: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sodium: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  usdaFoodId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nutritionSource: z.union([ z.lazy(() => NutritionSourceSchema),z.lazy(() => NullableEnumNutritionSourceFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nutritionUpdatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recipeIngredients: z.lazy(() => RecipeIngredientUpdateManyWithoutIngredientNestedInputSchema).optional(),
  inventoryItems: z.lazy(() => InventoryItemUpdateManyWithoutIngredientNestedInputSchema).optional(),
  orderItems: z.lazy(() => OrderItemUpdateManyWithoutIngredientNestedInputSchema).optional(),
  vendors: z.lazy(() => VendorUpdateManyWithoutIngredientsNestedInputSchema).optional(),
  WasteRecords: z.lazy(() => WasteRecordUpdateManyWithoutIngredienteNestedInputSchema).optional(),
  IngredientAllergens: z.lazy(() => IngredientAllergenUpdateManyWithoutIngredientNestedInputSchema).optional(),
  priceHistory: z.lazy(() => SupplierPriceHistoryUpdateManyWithoutIngredientNestedInputSchema).optional(),
  DietaryRestrictions: z.lazy(() => DietaryRestrictionUpdateManyWithoutIngredientsNestedInputSchema).optional()
}).strict();

export const IngredientUncheckedUpdateInputSchema: z.ZodType<Prisma.IngredientUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  density: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dietaryRestrictionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  calories: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  protein: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  carbohydrates: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fat: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fiber: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sugar: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sodium: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  usdaFoodId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nutritionSource: z.union([ z.lazy(() => NutritionSourceSchema),z.lazy(() => NullableEnumNutritionSourceFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nutritionUpdatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recipeIngredients: z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  inventoryItems: z.lazy(() => InventoryItemUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  orderItems: z.lazy(() => OrderItemUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  vendors: z.lazy(() => VendorUncheckedUpdateManyWithoutIngredientsNestedInputSchema).optional(),
  WasteRecords: z.lazy(() => WasteRecordUncheckedUpdateManyWithoutIngredienteNestedInputSchema).optional(),
  IngredientAllergens: z.lazy(() => IngredientAllergenUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  priceHistory: z.lazy(() => SupplierPriceHistoryUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  DietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutIngredientsNestedInputSchema).optional()
}).strict();

export const IngredientCreateManyInputSchema: z.ZodType<Prisma.IngredientCreateManyInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  category: z.string(),
  price: z.number(),
  density: z.number().optional().nullable(),
  dietaryRestrictionId: z.number().int().optional().nullable(),
  calories: z.number().optional().nullable(),
  protein: z.number().optional().nullable(),
  carbohydrates: z.number().optional().nullable(),
  fat: z.number().optional().nullable(),
  fiber: z.number().optional().nullable(),
  sugar: z.number().optional().nullable(),
  sodium: z.number().optional().nullable(),
  usdaFoodId: z.string().optional().nullable(),
  nutritionSource: z.lazy(() => NutritionSourceSchema).optional().nullable(),
  nutritionUpdatedAt: z.coerce.date().optional().nullable()
}).strict();

export const IngredientUpdateManyMutationInputSchema: z.ZodType<Prisma.IngredientUpdateManyMutationInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  density: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dietaryRestrictionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  calories: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  protein: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  carbohydrates: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fat: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fiber: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sugar: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sodium: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  usdaFoodId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nutritionSource: z.union([ z.lazy(() => NutritionSourceSchema),z.lazy(() => NullableEnumNutritionSourceFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nutritionUpdatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const IngredientUncheckedUpdateManyInputSchema: z.ZodType<Prisma.IngredientUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  density: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dietaryRestrictionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  calories: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  protein: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  carbohydrates: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fat: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fiber: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sugar: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sodium: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  usdaFoodId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nutritionSource: z.union([ z.lazy(() => NutritionSourceSchema),z.lazy(() => NullableEnumNutritionSourceFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nutritionUpdatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const RecipeIngredientCreateInputSchema: z.ZodType<Prisma.RecipeIngredientCreateInput> = z.object({
  quantity: z.number(),
  unit: z.string(),
  processingInstructions: z.string().optional().nullable(),
  substituteIngredients: z.union([ z.lazy(() => RecipeIngredientCreatesubstituteIngredientsInputSchema),z.number().int().array() ]).optional(),
  isOptional: z.boolean().optional(),
  notes: z.string().optional().nullable(),
  cost: z.number().optional().nullable(),
  density: z.number().optional().nullable(),
  yield: z.number().optional().nullable(),
  joinAt: z.coerce.date().optional(),
  recipe: z.lazy(() => RecipeCreateNestedOneWithoutIngredientsInputSchema),
  ingredient: z.lazy(() => IngredientCreateNestedOneWithoutRecipeIngredientsInputSchema),
  recipeVersion: z.lazy(() => RecipeVersionCreateNestedOneWithoutIngredientsInputSchema).optional()
}).strict();

export const RecipeIngredientUncheckedCreateInputSchema: z.ZodType<Prisma.RecipeIngredientUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  recipeId: z.number().int(),
  ingredientId: z.number().int(),
  quantity: z.number(),
  unit: z.string(),
  processingInstructions: z.string().optional().nullable(),
  substituteIngredients: z.union([ z.lazy(() => RecipeIngredientCreatesubstituteIngredientsInputSchema),z.number().int().array() ]).optional(),
  isOptional: z.boolean().optional(),
  notes: z.string().optional().nullable(),
  cost: z.number().optional().nullable(),
  density: z.number().optional().nullable(),
  yield: z.number().optional().nullable(),
  joinAt: z.coerce.date().optional(),
  recipeVersionId: z.number().int().optional().nullable()
}).strict();

export const RecipeIngredientUpdateInputSchema: z.ZodType<Prisma.RecipeIngredientUpdateInput> = z.object({
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  processingInstructions: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  substituteIngredients: z.union([ z.lazy(() => RecipeIngredientUpdatesubstituteIngredientsInputSchema),z.number().int().array() ]).optional(),
  isOptional: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  cost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  density: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  yield: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  joinAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  recipe: z.lazy(() => RecipeUpdateOneRequiredWithoutIngredientsNestedInputSchema).optional(),
  ingredient: z.lazy(() => IngredientUpdateOneRequiredWithoutRecipeIngredientsNestedInputSchema).optional(),
  recipeVersion: z.lazy(() => RecipeVersionUpdateOneWithoutIngredientsNestedInputSchema).optional()
}).strict();

export const RecipeIngredientUncheckedUpdateInputSchema: z.ZodType<Prisma.RecipeIngredientUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ingredientId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  processingInstructions: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  substituteIngredients: z.union([ z.lazy(() => RecipeIngredientUpdatesubstituteIngredientsInputSchema),z.number().int().array() ]).optional(),
  isOptional: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  cost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  density: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  yield: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  joinAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  recipeVersionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const RecipeIngredientCreateManyInputSchema: z.ZodType<Prisma.RecipeIngredientCreateManyInput> = z.object({
  id: z.number().int().optional(),
  recipeId: z.number().int(),
  ingredientId: z.number().int(),
  quantity: z.number(),
  unit: z.string(),
  processingInstructions: z.string().optional().nullable(),
  substituteIngredients: z.union([ z.lazy(() => RecipeIngredientCreatesubstituteIngredientsInputSchema),z.number().int().array() ]).optional(),
  isOptional: z.boolean().optional(),
  notes: z.string().optional().nullable(),
  cost: z.number().optional().nullable(),
  density: z.number().optional().nullable(),
  yield: z.number().optional().nullable(),
  joinAt: z.coerce.date().optional(),
  recipeVersionId: z.number().int().optional().nullable()
}).strict();

export const RecipeIngredientUpdateManyMutationInputSchema: z.ZodType<Prisma.RecipeIngredientUpdateManyMutationInput> = z.object({
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  processingInstructions: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  substituteIngredients: z.union([ z.lazy(() => RecipeIngredientUpdatesubstituteIngredientsInputSchema),z.number().int().array() ]).optional(),
  isOptional: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  cost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  density: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  yield: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  joinAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RecipeIngredientUncheckedUpdateManyInputSchema: z.ZodType<Prisma.RecipeIngredientUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ingredientId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  processingInstructions: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  substituteIngredients: z.union([ z.lazy(() => RecipeIngredientUpdatesubstituteIngredientsInputSchema),z.number().int().array() ]).optional(),
  isOptional: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  cost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  density: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  yield: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  joinAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  recipeVersionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const RecipeInstructionCreateInputSchema: z.ZodType<Prisma.RecipeInstructionCreateInput> = z.object({
  stepNumber: z.number().int(),
  instruction: z.string(),
  imageUrl: z.string().optional().nullable(),
  timeInMinutes: z.number().int().optional().nullable(),
  temperature: z.number().optional().nullable(),
  temperatureUnit: z.string().optional().nullable(),
  isCritical: z.boolean().optional(),
  techniqueTips: z.string().optional().nullable(),
  warningNotes: z.string().optional().nullable(),
  recipe: z.lazy(() => RecipeCreateNestedOneWithoutInstructionsInputSchema),
  RecipeVersion: z.lazy(() => RecipeVersionCreateNestedOneWithoutInstructionsInputSchema).optional(),
  equipment: z.lazy(() => RecipeEquipmentCreateNestedManyWithoutRecipeInstructionInputSchema).optional()
}).strict();

export const RecipeInstructionUncheckedCreateInputSchema: z.ZodType<Prisma.RecipeInstructionUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  recipeId: z.number().int(),
  stepNumber: z.number().int(),
  instruction: z.string(),
  imageUrl: z.string().optional().nullable(),
  recipeVersionId: z.number().int().optional().nullable(),
  timeInMinutes: z.number().int().optional().nullable(),
  temperature: z.number().optional().nullable(),
  temperatureUnit: z.string().optional().nullable(),
  isCritical: z.boolean().optional(),
  techniqueTips: z.string().optional().nullable(),
  warningNotes: z.string().optional().nullable(),
  equipment: z.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInstructionInputSchema).optional()
}).strict();

export const RecipeInstructionUpdateInputSchema: z.ZodType<Prisma.RecipeInstructionUpdateInput> = z.object({
  stepNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  instruction: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timeInMinutes: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  temperature: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  temperatureUnit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isCritical: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  techniqueTips: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  warningNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recipe: z.lazy(() => RecipeUpdateOneRequiredWithoutInstructionsNestedInputSchema).optional(),
  RecipeVersion: z.lazy(() => RecipeVersionUpdateOneWithoutInstructionsNestedInputSchema).optional(),
  equipment: z.lazy(() => RecipeEquipmentUpdateManyWithoutRecipeInstructionNestedInputSchema).optional()
}).strict();

export const RecipeInstructionUncheckedUpdateInputSchema: z.ZodType<Prisma.RecipeInstructionUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  stepNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  instruction: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recipeVersionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timeInMinutes: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  temperature: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  temperatureUnit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isCritical: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  techniqueTips: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  warningNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  equipment: z.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutRecipeInstructionNestedInputSchema).optional()
}).strict();

export const RecipeInstructionCreateManyInputSchema: z.ZodType<Prisma.RecipeInstructionCreateManyInput> = z.object({
  id: z.number().int().optional(),
  recipeId: z.number().int(),
  stepNumber: z.number().int(),
  instruction: z.string(),
  imageUrl: z.string().optional().nullable(),
  recipeVersionId: z.number().int().optional().nullable(),
  timeInMinutes: z.number().int().optional().nullable(),
  temperature: z.number().optional().nullable(),
  temperatureUnit: z.string().optional().nullable(),
  isCritical: z.boolean().optional(),
  techniqueTips: z.string().optional().nullable(),
  warningNotes: z.string().optional().nullable()
}).strict();

export const RecipeInstructionUpdateManyMutationInputSchema: z.ZodType<Prisma.RecipeInstructionUpdateManyMutationInput> = z.object({
  stepNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  instruction: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timeInMinutes: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  temperature: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  temperatureUnit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isCritical: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  techniqueTips: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  warningNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const RecipeInstructionUncheckedUpdateManyInputSchema: z.ZodType<Prisma.RecipeInstructionUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  stepNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  instruction: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recipeVersionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timeInMinutes: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  temperature: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  temperatureUnit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isCritical: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  techniqueTips: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  warningNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const InventoryItemCreateInputSchema: z.ZodType<Prisma.InventoryItemCreateInput> = z.object({
  quantity: z.number(),
  unit: z.string(),
  minQuantity: z.number(),
  restockThreshold: z.number(),
  lastCountDate: z.coerce.date().optional().nullable(),
  lastOrderDate: z.coerce.date().optional().nullable(),
  lastUpdated: z.coerce.date().optional(),
  par: z.number(),
  reorderPoint: z.number(),
  maxQuantity: z.number().optional().nullable(),
  location: z.string().optional().nullable(),
  barcode: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  currentPrice: z.number(),
  averageCost: z.number(),
  lastPurchasePrice: z.number().optional().nullable(),
  inventory: z.lazy(() => InventoryCreateNestedOneWithoutItemsInputSchema),
  ingredient: z.lazy(() => IngredientCreateNestedOneWithoutInventoryItemsInputSchema),
  lastUpdatedBy: z.lazy(() => UserCreateNestedOneWithoutInventoryUpdatesInputSchema).optional(),
  transactions: z.lazy(() => InventoryTransactionCreateNestedManyWithoutItemInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutInventoryItemInputSchema).optional(),
  stockCounts: z.lazy(() => StockCountItemCreateNestedManyWithoutItemInputSchema).optional()
}).strict();

export const InventoryItemUncheckedCreateInputSchema: z.ZodType<Prisma.InventoryItemUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  inventoryId: z.number().int(),
  ingredientId: z.number().int(),
  quantity: z.number(),
  unit: z.string(),
  minQuantity: z.number(),
  restockThreshold: z.number(),
  lastCountDate: z.coerce.date().optional().nullable(),
  lastOrderDate: z.coerce.date().optional().nullable(),
  lastUpdatedById: z.number().int().optional().nullable(),
  lastUpdated: z.coerce.date().optional(),
  par: z.number(),
  reorderPoint: z.number(),
  maxQuantity: z.number().optional().nullable(),
  location: z.string().optional().nullable(),
  barcode: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  currentPrice: z.number(),
  averageCost: z.number(),
  lastPurchasePrice: z.number().optional().nullable(),
  transactions: z.lazy(() => InventoryTransactionUncheckedCreateNestedManyWithoutItemInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutInventoryItemInputSchema).optional(),
  stockCounts: z.lazy(() => StockCountItemUncheckedCreateNestedManyWithoutItemInputSchema).optional()
}).strict();

export const InventoryItemUpdateInputSchema: z.ZodType<Prisma.InventoryItemUpdateInput> = z.object({
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  minQuantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  restockThreshold: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lastCountDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastOrderDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastUpdated: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  par: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  reorderPoint: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  maxQuantity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  barcode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currentPrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  averageCost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lastPurchasePrice: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inventory: z.lazy(() => InventoryUpdateOneRequiredWithoutItemsNestedInputSchema).optional(),
  ingredient: z.lazy(() => IngredientUpdateOneRequiredWithoutInventoryItemsNestedInputSchema).optional(),
  lastUpdatedBy: z.lazy(() => UserUpdateOneWithoutInventoryUpdatesNestedInputSchema).optional(),
  transactions: z.lazy(() => InventoryTransactionUpdateManyWithoutItemNestedInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUpdateManyWithoutInventoryItemNestedInputSchema).optional(),
  stockCounts: z.lazy(() => StockCountItemUpdateManyWithoutItemNestedInputSchema).optional()
}).strict();

export const InventoryItemUncheckedUpdateInputSchema: z.ZodType<Prisma.InventoryItemUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inventoryId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ingredientId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  minQuantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  restockThreshold: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lastCountDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastOrderDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastUpdatedById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastUpdated: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  par: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  reorderPoint: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  maxQuantity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  barcode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currentPrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  averageCost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lastPurchasePrice: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  transactions: z.lazy(() => InventoryTransactionUncheckedUpdateManyWithoutItemNestedInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutInventoryItemNestedInputSchema).optional(),
  stockCounts: z.lazy(() => StockCountItemUncheckedUpdateManyWithoutItemNestedInputSchema).optional()
}).strict();

export const InventoryItemCreateManyInputSchema: z.ZodType<Prisma.InventoryItemCreateManyInput> = z.object({
  id: z.number().int().optional(),
  inventoryId: z.number().int(),
  ingredientId: z.number().int(),
  quantity: z.number(),
  unit: z.string(),
  minQuantity: z.number(),
  restockThreshold: z.number(),
  lastCountDate: z.coerce.date().optional().nullable(),
  lastOrderDate: z.coerce.date().optional().nullable(),
  lastUpdatedById: z.number().int().optional().nullable(),
  lastUpdated: z.coerce.date().optional(),
  par: z.number(),
  reorderPoint: z.number(),
  maxQuantity: z.number().optional().nullable(),
  location: z.string().optional().nullable(),
  barcode: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  currentPrice: z.number(),
  averageCost: z.number(),
  lastPurchasePrice: z.number().optional().nullable()
}).strict();

export const InventoryItemUpdateManyMutationInputSchema: z.ZodType<Prisma.InventoryItemUpdateManyMutationInput> = z.object({
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  minQuantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  restockThreshold: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lastCountDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastOrderDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastUpdated: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  par: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  reorderPoint: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  maxQuantity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  barcode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currentPrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  averageCost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lastPurchasePrice: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const InventoryItemUncheckedUpdateManyInputSchema: z.ZodType<Prisma.InventoryItemUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inventoryId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ingredientId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  minQuantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  restockThreshold: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lastCountDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastOrderDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastUpdatedById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastUpdated: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  par: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  reorderPoint: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  maxQuantity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  barcode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currentPrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  averageCost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lastPurchasePrice: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const InventoryTransactionCreateInputSchema: z.ZodType<Prisma.InventoryTransactionCreateInput> = z.object({
  type: z.lazy(() => TransactionTypeSchema),
  quantity: z.number(),
  unit: z.string(),
  previousQty: z.number(),
  newQty: z.number(),
  cost: z.number().optional().nullable(),
  reference: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  inventory: z.lazy(() => InventoryCreateNestedOneWithoutTransactionsInputSchema),
  item: z.lazy(() => InventoryItemCreateNestedOneWithoutTransactionsInputSchema),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutInventoryTransactionsInputSchema)
}).strict();

export const InventoryTransactionUncheckedCreateInputSchema: z.ZodType<Prisma.InventoryTransactionUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  inventoryId: z.number().int(),
  itemId: z.number().int(),
  type: z.lazy(() => TransactionTypeSchema),
  quantity: z.number(),
  unit: z.string(),
  previousQty: z.number(),
  newQty: z.number(),
  cost: z.number().optional().nullable(),
  reference: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  createdById: z.number().int(),
  createdAt: z.coerce.date().optional()
}).strict();

export const InventoryTransactionUpdateInputSchema: z.ZodType<Prisma.InventoryTransactionUpdateInput> = z.object({
  type: z.union([ z.lazy(() => TransactionTypeSchema),z.lazy(() => EnumTransactionTypeFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  previousQty: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  newQty: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  cost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reference: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  inventory: z.lazy(() => InventoryUpdateOneRequiredWithoutTransactionsNestedInputSchema).optional(),
  item: z.lazy(() => InventoryItemUpdateOneRequiredWithoutTransactionsNestedInputSchema).optional(),
  createdBy: z.lazy(() => UserUpdateOneRequiredWithoutInventoryTransactionsNestedInputSchema).optional()
}).strict();

export const InventoryTransactionUncheckedUpdateInputSchema: z.ZodType<Prisma.InventoryTransactionUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inventoryId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  itemId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => TransactionTypeSchema),z.lazy(() => EnumTransactionTypeFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  previousQty: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  newQty: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  cost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reference: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InventoryTransactionCreateManyInputSchema: z.ZodType<Prisma.InventoryTransactionCreateManyInput> = z.object({
  id: z.number().int().optional(),
  inventoryId: z.number().int(),
  itemId: z.number().int(),
  type: z.lazy(() => TransactionTypeSchema),
  quantity: z.number(),
  unit: z.string(),
  previousQty: z.number(),
  newQty: z.number(),
  cost: z.number().optional().nullable(),
  reference: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  createdById: z.number().int(),
  createdAt: z.coerce.date().optional()
}).strict();

export const InventoryTransactionUpdateManyMutationInputSchema: z.ZodType<Prisma.InventoryTransactionUpdateManyMutationInput> = z.object({
  type: z.union([ z.lazy(() => TransactionTypeSchema),z.lazy(() => EnumTransactionTypeFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  previousQty: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  newQty: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  cost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reference: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InventoryTransactionUncheckedUpdateManyInputSchema: z.ZodType<Prisma.InventoryTransactionUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inventoryId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  itemId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => TransactionTypeSchema),z.lazy(() => EnumTransactionTypeFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  previousQty: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  newQty: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  cost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reference: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const StockCountCreateInputSchema: z.ZodType<Prisma.StockCountCreateInput> = z.object({
  status: z.lazy(() => CountStatusSchema),
  startedAt: z.coerce.date(),
  completedAt: z.coerce.date().optional().nullable(),
  notes: z.string().optional().nullable(),
  inventory: z.lazy(() => InventoryCreateNestedOneWithoutStockCountsInputSchema),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutStockCountsInputSchema),
  items: z.lazy(() => StockCountItemCreateNestedManyWithoutStockCountInputSchema).optional()
}).strict();

export const StockCountUncheckedCreateInputSchema: z.ZodType<Prisma.StockCountUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  inventoryId: z.number().int(),
  status: z.lazy(() => CountStatusSchema),
  startedAt: z.coerce.date(),
  completedAt: z.coerce.date().optional().nullable(),
  createdById: z.number().int(),
  notes: z.string().optional().nullable(),
  items: z.lazy(() => StockCountItemUncheckedCreateNestedManyWithoutStockCountInputSchema).optional()
}).strict();

export const StockCountUpdateInputSchema: z.ZodType<Prisma.StockCountUpdateInput> = z.object({
  status: z.union([ z.lazy(() => CountStatusSchema),z.lazy(() => EnumCountStatusFieldUpdateOperationsInputSchema) ]).optional(),
  startedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inventory: z.lazy(() => InventoryUpdateOneRequiredWithoutStockCountsNestedInputSchema).optional(),
  createdBy: z.lazy(() => UserUpdateOneRequiredWithoutStockCountsNestedInputSchema).optional(),
  items: z.lazy(() => StockCountItemUpdateManyWithoutStockCountNestedInputSchema).optional()
}).strict();

export const StockCountUncheckedUpdateInputSchema: z.ZodType<Prisma.StockCountUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inventoryId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => CountStatusSchema),z.lazy(() => EnumCountStatusFieldUpdateOperationsInputSchema) ]).optional(),
  startedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  items: z.lazy(() => StockCountItemUncheckedUpdateManyWithoutStockCountNestedInputSchema).optional()
}).strict();

export const StockCountCreateManyInputSchema: z.ZodType<Prisma.StockCountCreateManyInput> = z.object({
  id: z.number().int().optional(),
  inventoryId: z.number().int(),
  status: z.lazy(() => CountStatusSchema),
  startedAt: z.coerce.date(),
  completedAt: z.coerce.date().optional().nullable(),
  createdById: z.number().int(),
  notes: z.string().optional().nullable()
}).strict();

export const StockCountUpdateManyMutationInputSchema: z.ZodType<Prisma.StockCountUpdateManyMutationInput> = z.object({
  status: z.union([ z.lazy(() => CountStatusSchema),z.lazy(() => EnumCountStatusFieldUpdateOperationsInputSchema) ]).optional(),
  startedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const StockCountUncheckedUpdateManyInputSchema: z.ZodType<Prisma.StockCountUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inventoryId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => CountStatusSchema),z.lazy(() => EnumCountStatusFieldUpdateOperationsInputSchema) ]).optional(),
  startedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const StockCountItemCreateInputSchema: z.ZodType<Prisma.StockCountItemCreateInput> = z.object({
  expectedQty: z.number(),
  actualQty: z.number(),
  difference: z.number(),
  notes: z.string().optional().nullable(),
  stockCount: z.lazy(() => StockCountCreateNestedOneWithoutItemsInputSchema),
  item: z.lazy(() => InventoryItemCreateNestedOneWithoutStockCountsInputSchema)
}).strict();

export const StockCountItemUncheckedCreateInputSchema: z.ZodType<Prisma.StockCountItemUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  stockCountId: z.number().int(),
  itemId: z.number().int(),
  expectedQty: z.number(),
  actualQty: z.number(),
  difference: z.number(),
  notes: z.string().optional().nullable()
}).strict();

export const StockCountItemUpdateInputSchema: z.ZodType<Prisma.StockCountItemUpdateInput> = z.object({
  expectedQty: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  actualQty: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  difference: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stockCount: z.lazy(() => StockCountUpdateOneRequiredWithoutItemsNestedInputSchema).optional(),
  item: z.lazy(() => InventoryItemUpdateOneRequiredWithoutStockCountsNestedInputSchema).optional()
}).strict();

export const StockCountItemUncheckedUpdateInputSchema: z.ZodType<Prisma.StockCountItemUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  stockCountId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  itemId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  expectedQty: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  actualQty: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  difference: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const StockCountItemCreateManyInputSchema: z.ZodType<Prisma.StockCountItemCreateManyInput> = z.object({
  id: z.number().int().optional(),
  stockCountId: z.number().int(),
  itemId: z.number().int(),
  expectedQty: z.number(),
  actualQty: z.number(),
  difference: z.number(),
  notes: z.string().optional().nullable()
}).strict();

export const StockCountItemUpdateManyMutationInputSchema: z.ZodType<Prisma.StockCountItemUpdateManyMutationInput> = z.object({
  expectedQty: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  actualQty: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  difference: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const StockCountItemUncheckedUpdateManyInputSchema: z.ZodType<Prisma.StockCountItemUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  stockCountId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  itemId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  expectedQty: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  actualQty: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  difference: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const RecipeStatsCreateInputSchema: z.ZodType<Prisma.RecipeStatsCreateInput> = z.object({
  totalCost: z.number(),
  profitMargin: z.number(),
  averageRating: z.number(),
  preparationCount: z.number().int(),
  lastPrepared: z.coerce.date().optional().nullable(),
  recipe: z.lazy(() => RecipeCreateNestedOneWithoutRecipeStatsInputSchema)
}).strict();

export const RecipeStatsUncheckedCreateInputSchema: z.ZodType<Prisma.RecipeStatsUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  recipeId: z.number().int(),
  totalCost: z.number(),
  profitMargin: z.number(),
  averageRating: z.number(),
  preparationCount: z.number().int(),
  lastPrepared: z.coerce.date().optional().nullable()
}).strict();

export const RecipeStatsUpdateInputSchema: z.ZodType<Prisma.RecipeStatsUpdateInput> = z.object({
  totalCost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  profitMargin: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  averageRating: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  preparationCount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  lastPrepared: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recipe: z.lazy(() => RecipeUpdateOneRequiredWithoutRecipeStatsNestedInputSchema).optional()
}).strict();

export const RecipeStatsUncheckedUpdateInputSchema: z.ZodType<Prisma.RecipeStatsUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  totalCost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  profitMargin: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  averageRating: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  preparationCount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  lastPrepared: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const RecipeStatsCreateManyInputSchema: z.ZodType<Prisma.RecipeStatsCreateManyInput> = z.object({
  id: z.number().int().optional(),
  recipeId: z.number().int(),
  totalCost: z.number(),
  profitMargin: z.number(),
  averageRating: z.number(),
  preparationCount: z.number().int(),
  lastPrepared: z.coerce.date().optional().nullable()
}).strict();

export const RecipeStatsUpdateManyMutationInputSchema: z.ZodType<Prisma.RecipeStatsUpdateManyMutationInput> = z.object({
  totalCost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  profitMargin: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  averageRating: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  preparationCount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  lastPrepared: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const RecipeStatsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.RecipeStatsUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  totalCost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  profitMargin: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  averageRating: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  preparationCount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  lastPrepared: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const OrderCreateInputSchema: z.ZodType<Prisma.OrderCreateInput> = z.object({
  status: z.lazy(() => OrderStatusSchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutOrdersInputSchema),
  vendor: z.lazy(() => VendorCreateNestedOneWithoutOrdersInputSchema),
  items: z.lazy(() => OrderItemCreateNestedManyWithoutOrderInputSchema).optional()
}).strict();

export const OrderUncheckedCreateInputSchema: z.ZodType<Prisma.OrderUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  restaurantId: z.number().int(),
  vendorId: z.number().int(),
  status: z.lazy(() => OrderStatusSchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  items: z.lazy(() => OrderItemUncheckedCreateNestedManyWithoutOrderInputSchema).optional()
}).strict();

export const OrderUpdateInputSchema: z.ZodType<Prisma.OrderUpdateInput> = z.object({
  status: z.union([ z.lazy(() => OrderStatusSchema),z.lazy(() => EnumOrderStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneRequiredWithoutOrdersNestedInputSchema).optional(),
  vendor: z.lazy(() => VendorUpdateOneRequiredWithoutOrdersNestedInputSchema).optional(),
  items: z.lazy(() => OrderItemUpdateManyWithoutOrderNestedInputSchema).optional()
}).strict();

export const OrderUncheckedUpdateInputSchema: z.ZodType<Prisma.OrderUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  vendorId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => OrderStatusSchema),z.lazy(() => EnumOrderStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  items: z.lazy(() => OrderItemUncheckedUpdateManyWithoutOrderNestedInputSchema).optional()
}).strict();

export const OrderCreateManyInputSchema: z.ZodType<Prisma.OrderCreateManyInput> = z.object({
  id: z.number().int().optional(),
  restaurantId: z.number().int(),
  vendorId: z.number().int(),
  status: z.lazy(() => OrderStatusSchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const OrderUpdateManyMutationInputSchema: z.ZodType<Prisma.OrderUpdateManyMutationInput> = z.object({
  status: z.union([ z.lazy(() => OrderStatusSchema),z.lazy(() => EnumOrderStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const OrderUncheckedUpdateManyInputSchema: z.ZodType<Prisma.OrderUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  vendorId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => OrderStatusSchema),z.lazy(() => EnumOrderStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const OrderItemCreateInputSchema: z.ZodType<Prisma.OrderItemCreateInput> = z.object({
  quantity: z.number(),
  unit: z.string(),
  price: z.number(),
  order: z.lazy(() => OrderCreateNestedOneWithoutItemsInputSchema),
  ingredient: z.lazy(() => IngredientCreateNestedOneWithoutOrderItemsInputSchema)
}).strict();

export const OrderItemUncheckedCreateInputSchema: z.ZodType<Prisma.OrderItemUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  orderId: z.number().int(),
  ingredientId: z.number().int(),
  quantity: z.number(),
  unit: z.string(),
  price: z.number()
}).strict();

export const OrderItemUpdateInputSchema: z.ZodType<Prisma.OrderItemUpdateInput> = z.object({
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.lazy(() => OrderUpdateOneRequiredWithoutItemsNestedInputSchema).optional(),
  ingredient: z.lazy(() => IngredientUpdateOneRequiredWithoutOrderItemsNestedInputSchema).optional()
}).strict();

export const OrderItemUncheckedUpdateInputSchema: z.ZodType<Prisma.OrderItemUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  orderId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ingredientId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const OrderItemCreateManyInputSchema: z.ZodType<Prisma.OrderItemCreateManyInput> = z.object({
  id: z.number().int().optional(),
  orderId: z.number().int(),
  ingredientId: z.number().int(),
  quantity: z.number(),
  unit: z.string(),
  price: z.number()
}).strict();

export const OrderItemUpdateManyMutationInputSchema: z.ZodType<Prisma.OrderItemUpdateManyMutationInput> = z.object({
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const OrderItemUncheckedUpdateManyInputSchema: z.ZodType<Prisma.OrderItemUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  orderId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ingredientId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const VendorCreateInputSchema: z.ZodType<Prisma.VendorCreateInput> = z.object({
  name: z.string(),
  contact: z.string(),
  email: z.string(),
  phone: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  orders: z.lazy(() => OrderCreateNestedManyWithoutVendorInputSchema).optional(),
  ingredients: z.lazy(() => IngredientCreateNestedManyWithoutVendorsInputSchema).optional(),
  supplierPriceHistory: z.lazy(() => SupplierPriceHistoryCreateNestedManyWithoutVendorInputSchema).optional()
}).strict();

export const VendorUncheckedCreateInputSchema: z.ZodType<Prisma.VendorUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  contact: z.string(),
  email: z.string(),
  phone: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  orders: z.lazy(() => OrderUncheckedCreateNestedManyWithoutVendorInputSchema).optional(),
  ingredients: z.lazy(() => IngredientUncheckedCreateNestedManyWithoutVendorsInputSchema).optional(),
  supplierPriceHistory: z.lazy(() => SupplierPriceHistoryUncheckedCreateNestedManyWithoutVendorInputSchema).optional()
}).strict();

export const VendorUpdateInputSchema: z.ZodType<Prisma.VendorUpdateInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  contact: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  orders: z.lazy(() => OrderUpdateManyWithoutVendorNestedInputSchema).optional(),
  ingredients: z.lazy(() => IngredientUpdateManyWithoutVendorsNestedInputSchema).optional(),
  supplierPriceHistory: z.lazy(() => SupplierPriceHistoryUpdateManyWithoutVendorNestedInputSchema).optional()
}).strict();

export const VendorUncheckedUpdateInputSchema: z.ZodType<Prisma.VendorUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  contact: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  orders: z.lazy(() => OrderUncheckedUpdateManyWithoutVendorNestedInputSchema).optional(),
  ingredients: z.lazy(() => IngredientUncheckedUpdateManyWithoutVendorsNestedInputSchema).optional(),
  supplierPriceHistory: z.lazy(() => SupplierPriceHistoryUncheckedUpdateManyWithoutVendorNestedInputSchema).optional()
}).strict();

export const VendorCreateManyInputSchema: z.ZodType<Prisma.VendorCreateManyInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  contact: z.string(),
  email: z.string(),
  phone: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const VendorUpdateManyMutationInputSchema: z.ZodType<Prisma.VendorUpdateManyMutationInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  contact: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const VendorUncheckedUpdateManyInputSchema: z.ZodType<Prisma.VendorUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  contact: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ShiftCreateInputSchema: z.ZodType<Prisma.ShiftCreateInput> = z.object({
  startTime: z.coerce.date(),
  endTime: z.coerce.date(),
  status: z.lazy(() => ShiftStatusSchema),
  user: z.lazy(() => UserCreateNestedOneWithoutShiftsInputSchema),
  tasks: z.lazy(() => ShiftTaskCreateNestedManyWithoutShiftInputSchema).optional()
}).strict();

export const ShiftUncheckedCreateInputSchema: z.ZodType<Prisma.ShiftUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  userId: z.number().int(),
  startTime: z.coerce.date(),
  endTime: z.coerce.date(),
  status: z.lazy(() => ShiftStatusSchema),
  tasks: z.lazy(() => ShiftTaskUncheckedCreateNestedManyWithoutShiftInputSchema).optional()
}).strict();

export const ShiftUpdateInputSchema: z.ZodType<Prisma.ShiftUpdateInput> = z.object({
  startTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ShiftStatusSchema),z.lazy(() => EnumShiftStatusFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutShiftsNestedInputSchema).optional(),
  tasks: z.lazy(() => ShiftTaskUpdateManyWithoutShiftNestedInputSchema).optional()
}).strict();

export const ShiftUncheckedUpdateInputSchema: z.ZodType<Prisma.ShiftUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  startTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ShiftStatusSchema),z.lazy(() => EnumShiftStatusFieldUpdateOperationsInputSchema) ]).optional(),
  tasks: z.lazy(() => ShiftTaskUncheckedUpdateManyWithoutShiftNestedInputSchema).optional()
}).strict();

export const ShiftCreateManyInputSchema: z.ZodType<Prisma.ShiftCreateManyInput> = z.object({
  id: z.number().int().optional(),
  userId: z.number().int(),
  startTime: z.coerce.date(),
  endTime: z.coerce.date(),
  status: z.lazy(() => ShiftStatusSchema)
}).strict();

export const ShiftUpdateManyMutationInputSchema: z.ZodType<Prisma.ShiftUpdateManyMutationInput> = z.object({
  startTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ShiftStatusSchema),z.lazy(() => EnumShiftStatusFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ShiftUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ShiftUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  startTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ShiftStatusSchema),z.lazy(() => EnumShiftStatusFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PrepBoardCreateInputSchema: z.ZodType<Prisma.PrepBoardCreateInput> = z.object({
  name: z.string(),
  status: z.lazy(() => PrepStatusSchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  recipes: z.lazy(() => RecipeCreateNestedManyWithoutPrepBoardsInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemCreateNestedManyWithoutPrepBoardInputSchema).optional()
}).strict();

export const PrepBoardUncheckedCreateInputSchema: z.ZodType<Prisma.PrepBoardUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  status: z.lazy(() => PrepStatusSchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  recipes: z.lazy(() => RecipeUncheckedCreateNestedManyWithoutPrepBoardsInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutPrepBoardInputSchema).optional()
}).strict();

export const PrepBoardUpdateInputSchema: z.ZodType<Prisma.PrepBoardUpdateInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => PrepStatusSchema),z.lazy(() => EnumPrepStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  recipes: z.lazy(() => RecipeUpdateManyWithoutPrepBoardsNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUpdateManyWithoutPrepBoardNestedInputSchema).optional()
}).strict();

export const PrepBoardUncheckedUpdateInputSchema: z.ZodType<Prisma.PrepBoardUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => PrepStatusSchema),z.lazy(() => EnumPrepStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  recipes: z.lazy(() => RecipeUncheckedUpdateManyWithoutPrepBoardsNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedUpdateManyWithoutPrepBoardNestedInputSchema).optional()
}).strict();

export const PrepBoardCreateManyInputSchema: z.ZodType<Prisma.PrepBoardCreateManyInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  status: z.lazy(() => PrepStatusSchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const PrepBoardUpdateManyMutationInputSchema: z.ZodType<Prisma.PrepBoardUpdateManyMutationInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => PrepStatusSchema),z.lazy(() => EnumPrepStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PrepBoardUncheckedUpdateManyInputSchema: z.ZodType<Prisma.PrepBoardUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => PrepStatusSchema),z.lazy(() => EnumPrepStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PrepItemCreateInputSchema: z.ZodType<Prisma.PrepItemCreateInput> = z.object({
  quantity: z.number().int(),
  status: z.lazy(() => PrepStatusSchema),
  prepBoard: z.lazy(() => PrepBoardCreateNestedOneWithoutPrepItemsInputSchema),
  recipe: z.lazy(() => RecipeCreateNestedOneWithoutPrepItemsInputSchema),
  assignedTo: z.lazy(() => UserCreateNestedOneWithoutPrepItemsInputSchema)
}).strict();

export const PrepItemUncheckedCreateInputSchema: z.ZodType<Prisma.PrepItemUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  prepBoardId: z.number().int(),
  recipeId: z.number().int(),
  quantity: z.number().int(),
  status: z.lazy(() => PrepStatusSchema),
  assignedToId: z.number().int()
}).strict();

export const PrepItemUpdateInputSchema: z.ZodType<Prisma.PrepItemUpdateInput> = z.object({
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => PrepStatusSchema),z.lazy(() => EnumPrepStatusFieldUpdateOperationsInputSchema) ]).optional(),
  prepBoard: z.lazy(() => PrepBoardUpdateOneRequiredWithoutPrepItemsNestedInputSchema).optional(),
  recipe: z.lazy(() => RecipeUpdateOneRequiredWithoutPrepItemsNestedInputSchema).optional(),
  assignedTo: z.lazy(() => UserUpdateOneRequiredWithoutPrepItemsNestedInputSchema).optional()
}).strict();

export const PrepItemUncheckedUpdateInputSchema: z.ZodType<Prisma.PrepItemUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepBoardId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => PrepStatusSchema),z.lazy(() => EnumPrepStatusFieldUpdateOperationsInputSchema) ]).optional(),
  assignedToId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PrepItemCreateManyInputSchema: z.ZodType<Prisma.PrepItemCreateManyInput> = z.object({
  id: z.number().int().optional(),
  prepBoardId: z.number().int(),
  recipeId: z.number().int(),
  quantity: z.number().int(),
  status: z.lazy(() => PrepStatusSchema),
  assignedToId: z.number().int()
}).strict();

export const PrepItemUpdateManyMutationInputSchema: z.ZodType<Prisma.PrepItemUpdateManyMutationInput> = z.object({
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => PrepStatusSchema),z.lazy(() => EnumPrepStatusFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PrepItemUncheckedUpdateManyInputSchema: z.ZodType<Prisma.PrepItemUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepBoardId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => PrepStatusSchema),z.lazy(() => EnumPrepStatusFieldUpdateOperationsInputSchema) ]).optional(),
  assignedToId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PasswordResetCreateInputSchema: z.ZodType<Prisma.PasswordResetCreateInput> = z.object({
  token: z.string(),
  expiresAt: z.coerce.date(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutPasswordResetsInputSchema)
}).strict();

export const PasswordResetUncheckedCreateInputSchema: z.ZodType<Prisma.PasswordResetUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  token: z.string(),
  userId: z.number().int(),
  expiresAt: z.coerce.date(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const PasswordResetUpdateInputSchema: z.ZodType<Prisma.PasswordResetUpdateInput> = z.object({
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutPasswordResetsNestedInputSchema).optional()
}).strict();

export const PasswordResetUncheckedUpdateInputSchema: z.ZodType<Prisma.PasswordResetUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PasswordResetCreateManyInputSchema: z.ZodType<Prisma.PasswordResetCreateManyInput> = z.object({
  id: z.number().int().optional(),
  token: z.string(),
  userId: z.number().int(),
  expiresAt: z.coerce.date(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const PasswordResetUpdateManyMutationInputSchema: z.ZodType<Prisma.PasswordResetUpdateManyMutationInput> = z.object({
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PasswordResetUncheckedUpdateManyInputSchema: z.ZodType<Prisma.PasswordResetUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MenuCreateInputSchema: z.ZodType<Prisma.MenuCreateInput> = z.object({
  name: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutMenusInputSchema),
  menuItems: z.lazy(() => MenuItemCreateNestedManyWithoutMenuInputSchema).optional(),
  MenuCategory: z.lazy(() => MenuCategoryCreateNestedManyWithoutMenuInputSchema).optional()
}).strict();

export const MenuUncheckedCreateInputSchema: z.ZodType<Prisma.MenuUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  restaurantId: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  menuItems: z.lazy(() => MenuItemUncheckedCreateNestedManyWithoutMenuInputSchema).optional(),
  MenuCategory: z.lazy(() => MenuCategoryUncheckedCreateNestedManyWithoutMenuInputSchema).optional()
}).strict();

export const MenuUpdateInputSchema: z.ZodType<Prisma.MenuUpdateInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneRequiredWithoutMenusNestedInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUpdateManyWithoutMenuNestedInputSchema).optional(),
  MenuCategory: z.lazy(() => MenuCategoryUpdateManyWithoutMenuNestedInputSchema).optional()
}).strict();

export const MenuUncheckedUpdateInputSchema: z.ZodType<Prisma.MenuUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  menuItems: z.lazy(() => MenuItemUncheckedUpdateManyWithoutMenuNestedInputSchema).optional(),
  MenuCategory: z.lazy(() => MenuCategoryUncheckedUpdateManyWithoutMenuNestedInputSchema).optional()
}).strict();

export const MenuCreateManyInputSchema: z.ZodType<Prisma.MenuCreateManyInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  restaurantId: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const MenuUpdateManyMutationInputSchema: z.ZodType<Prisma.MenuUpdateManyMutationInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MenuUncheckedUpdateManyInputSchema: z.ZodType<Prisma.MenuUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MenuItemRecipeCreateInputSchema: z.ZodType<Prisma.MenuItemRecipeCreateInput> = z.object({
  joinAt: z.coerce.date().optional(),
  menuItem: z.lazy(() => MenuItemCreateNestedOneWithoutMenuItemRecipesInputSchema),
  recipe: z.lazy(() => RecipeCreateNestedOneWithoutMenuItemRecipesInputSchema)
}).strict();

export const MenuItemRecipeUncheckedCreateInputSchema: z.ZodType<Prisma.MenuItemRecipeUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  menuItemId: z.number().int(),
  recipeId: z.number().int(),
  joinAt: z.coerce.date().optional()
}).strict();

export const MenuItemRecipeUpdateInputSchema: z.ZodType<Prisma.MenuItemRecipeUpdateInput> = z.object({
  joinAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  menuItem: z.lazy(() => MenuItemUpdateOneRequiredWithoutMenuItemRecipesNestedInputSchema).optional(),
  recipe: z.lazy(() => RecipeUpdateOneRequiredWithoutMenuItemRecipesNestedInputSchema).optional()
}).strict();

export const MenuItemRecipeUncheckedUpdateInputSchema: z.ZodType<Prisma.MenuItemRecipeUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  menuItemId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  joinAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MenuItemRecipeCreateManyInputSchema: z.ZodType<Prisma.MenuItemRecipeCreateManyInput> = z.object({
  id: z.number().int().optional(),
  menuItemId: z.number().int(),
  recipeId: z.number().int(),
  joinAt: z.coerce.date().optional()
}).strict();

export const MenuItemRecipeUpdateManyMutationInputSchema: z.ZodType<Prisma.MenuItemRecipeUpdateManyMutationInput> = z.object({
  joinAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MenuItemRecipeUncheckedUpdateManyInputSchema: z.ZodType<Prisma.MenuItemRecipeUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  menuItemId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  joinAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MenuItemCreateInputSchema: z.ZodType<Prisma.MenuItemCreateInput> = z.object({
  name: z.string(),
  description: z.string().optional().nullable(),
  price: z.number(),
  foodCost: z.number(),
  isActive: z.boolean().optional(),
  recipeIds: z.union([ z.lazy(() => MenuItemCreaterecipeIdsInputSchema),z.number().int().array() ]).optional(),
  recipeServingsAmount: z.union([ z.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema),z.number().array() ]).optional(),
  recipeServingsCost: z.union([ z.lazy(() => MenuItemCreaterecipeServingsCostInputSchema),z.number().array() ]).optional(),
  allergens: z.union([ z.lazy(() => MenuItemCreateallergensInputSchema),z.string().array() ]).optional(),
  menu: z.lazy(() => MenuCreateNestedOneWithoutMenuItemsInputSchema),
  category: z.lazy(() => MenuCategoryCreateNestedOneWithoutMenuItemsInputSchema).optional(),
  recipes: z.lazy(() => RecipeCreateNestedManyWithoutMenuItemsInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeCreateNestedManyWithoutMenuItemInputSchema).optional(),
  nutritionalInfo: z.lazy(() => NutritionalInfoCreateNestedOneWithoutMenuItemInputSchema).optional(),
  recommendations: z.lazy(() => NutritionalRecommendationCreateNestedManyWithoutMenuItemInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsCreateNestedManyWithoutMenuItemInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemCreateNestedManyWithoutMenuItemInputSchema).optional(),
  feedback: z.lazy(() => CustomerFeedbackCreateNestedManyWithoutMenuItemInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionCreateNestedManyWithoutMenuItemsInputSchema).optional()
}).strict();

export const MenuItemUncheckedCreateInputSchema: z.ZodType<Prisma.MenuItemUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  price: z.number(),
  foodCost: z.number(),
  isActive: z.boolean().optional(),
  recipeIds: z.union([ z.lazy(() => MenuItemCreaterecipeIdsInputSchema),z.number().int().array() ]).optional(),
  recipeServingsAmount: z.union([ z.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema),z.number().array() ]).optional(),
  recipeServingsCost: z.union([ z.lazy(() => MenuItemCreaterecipeServingsCostInputSchema),z.number().array() ]).optional(),
  allergens: z.union([ z.lazy(() => MenuItemCreateallergensInputSchema),z.string().array() ]).optional(),
  menuId: z.number().int(),
  categoryId: z.number().int().optional().nullable(),
  recipes: z.lazy(() => RecipeUncheckedCreateNestedManyWithoutMenuItemsInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  nutritionalInfo: z.lazy(() => NutritionalInfoUncheckedCreateNestedOneWithoutMenuItemInputSchema).optional(),
  recommendations: z.lazy(() => NutritionalRecommendationUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  feedback: z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutMenuItemsInputSchema).optional()
}).strict();

export const MenuItemUpdateInputSchema: z.ZodType<Prisma.MenuItemUpdateInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  recipeIds: z.union([ z.lazy(() => MenuItemUpdaterecipeIdsInputSchema),z.number().int().array() ]).optional(),
  recipeServingsAmount: z.union([ z.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema),z.number().array() ]).optional(),
  recipeServingsCost: z.union([ z.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema),z.number().array() ]).optional(),
  allergens: z.union([ z.lazy(() => MenuItemUpdateallergensInputSchema),z.string().array() ]).optional(),
  menu: z.lazy(() => MenuUpdateOneRequiredWithoutMenuItemsNestedInputSchema).optional(),
  category: z.lazy(() => MenuCategoryUpdateOneWithoutMenuItemsNestedInputSchema).optional(),
  recipes: z.lazy(() => RecipeUpdateManyWithoutMenuItemsNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => NutritionalInfoUpdateOneWithoutMenuItemNestedInputSchema).optional(),
  recommendations: z.lazy(() => NutritionalRecommendationUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  feedback: z.lazy(() => CustomerFeedbackUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUpdateManyWithoutMenuItemsNestedInputSchema).optional()
}).strict();

export const MenuItemUncheckedUpdateInputSchema: z.ZodType<Prisma.MenuItemUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  recipeIds: z.union([ z.lazy(() => MenuItemUpdaterecipeIdsInputSchema),z.number().int().array() ]).optional(),
  recipeServingsAmount: z.union([ z.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema),z.number().array() ]).optional(),
  recipeServingsCost: z.union([ z.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema),z.number().array() ]).optional(),
  allergens: z.union([ z.lazy(() => MenuItemUpdateallergensInputSchema),z.string().array() ]).optional(),
  menuId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  categoryId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recipes: z.lazy(() => RecipeUncheckedUpdateManyWithoutMenuItemsNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => NutritionalInfoUncheckedUpdateOneWithoutMenuItemNestedInputSchema).optional(),
  recommendations: z.lazy(() => NutritionalRecommendationUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  feedback: z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutMenuItemsNestedInputSchema).optional()
}).strict();

export const MenuItemCreateManyInputSchema: z.ZodType<Prisma.MenuItemCreateManyInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  price: z.number(),
  foodCost: z.number(),
  isActive: z.boolean().optional(),
  recipeIds: z.union([ z.lazy(() => MenuItemCreaterecipeIdsInputSchema),z.number().int().array() ]).optional(),
  recipeServingsAmount: z.union([ z.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema),z.number().array() ]).optional(),
  recipeServingsCost: z.union([ z.lazy(() => MenuItemCreaterecipeServingsCostInputSchema),z.number().array() ]).optional(),
  allergens: z.union([ z.lazy(() => MenuItemCreateallergensInputSchema),z.string().array() ]).optional(),
  menuId: z.number().int(),
  categoryId: z.number().int().optional().nullable()
}).strict();

export const MenuItemUpdateManyMutationInputSchema: z.ZodType<Prisma.MenuItemUpdateManyMutationInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  recipeIds: z.union([ z.lazy(() => MenuItemUpdaterecipeIdsInputSchema),z.number().int().array() ]).optional(),
  recipeServingsAmount: z.union([ z.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema),z.number().array() ]).optional(),
  recipeServingsCost: z.union([ z.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema),z.number().array() ]).optional(),
  allergens: z.union([ z.lazy(() => MenuItemUpdateallergensInputSchema),z.string().array() ]).optional(),
}).strict();

export const MenuItemUncheckedUpdateManyInputSchema: z.ZodType<Prisma.MenuItemUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  recipeIds: z.union([ z.lazy(() => MenuItemUpdaterecipeIdsInputSchema),z.number().int().array() ]).optional(),
  recipeServingsAmount: z.union([ z.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema),z.number().array() ]).optional(),
  recipeServingsCost: z.union([ z.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema),z.number().array() ]).optional(),
  allergens: z.union([ z.lazy(() => MenuItemUpdateallergensInputSchema),z.string().array() ]).optional(),
  menuId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  categoryId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const NutritionalInfoCreateInputSchema: z.ZodType<Prisma.NutritionalInfoCreateInput> = z.object({
  calories: z.number(),
  fat: z.number(),
  saturatedFat: z.number(),
  transFat: z.number(),
  cholesterol: z.number(),
  sodium: z.number(),
  carbohydrates: z.number(),
  fiber: z.number(),
  sugar: z.number(),
  protein: z.number(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  menuItem: z.lazy(() => MenuItemCreateNestedOneWithoutNutritionalInfoInputSchema).optional()
}).strict();

export const NutritionalInfoUncheckedCreateInputSchema: z.ZodType<Prisma.NutritionalInfoUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  menuItemId: z.number().int().optional().nullable(),
  calories: z.number(),
  fat: z.number(),
  saturatedFat: z.number(),
  transFat: z.number(),
  cholesterol: z.number(),
  sodium: z.number(),
  carbohydrates: z.number(),
  fiber: z.number(),
  sugar: z.number(),
  protein: z.number(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const NutritionalInfoUpdateInputSchema: z.ZodType<Prisma.NutritionalInfoUpdateInput> = z.object({
  calories: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  fat: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  saturatedFat: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  transFat: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  cholesterol: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  sodium: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  carbohydrates: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  fiber: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  sugar: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  protein: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  menuItem: z.lazy(() => MenuItemUpdateOneWithoutNutritionalInfoNestedInputSchema).optional()
}).strict();

export const NutritionalInfoUncheckedUpdateInputSchema: z.ZodType<Prisma.NutritionalInfoUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  menuItemId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  calories: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  fat: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  saturatedFat: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  transFat: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  cholesterol: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  sodium: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  carbohydrates: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  fiber: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  sugar: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  protein: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const NutritionalInfoCreateManyInputSchema: z.ZodType<Prisma.NutritionalInfoCreateManyInput> = z.object({
  id: z.number().int().optional(),
  menuItemId: z.number().int().optional().nullable(),
  calories: z.number(),
  fat: z.number(),
  saturatedFat: z.number(),
  transFat: z.number(),
  cholesterol: z.number(),
  sodium: z.number(),
  carbohydrates: z.number(),
  fiber: z.number(),
  sugar: z.number(),
  protein: z.number(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const NutritionalInfoUpdateManyMutationInputSchema: z.ZodType<Prisma.NutritionalInfoUpdateManyMutationInput> = z.object({
  calories: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  fat: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  saturatedFat: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  transFat: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  cholesterol: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  sodium: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  carbohydrates: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  fiber: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  sugar: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  protein: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const NutritionalInfoUncheckedUpdateManyInputSchema: z.ZodType<Prisma.NutritionalInfoUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  menuItemId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  calories: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  fat: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  saturatedFat: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  transFat: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  cholesterol: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  sodium: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  carbohydrates: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  fiber: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  sugar: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  protein: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FoodCostHistoryCreateInputSchema: z.ZodType<Prisma.FoodCostHistoryCreateInput> = z.object({
  cost: z.number(),
  date: z.coerce.date(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  recipe: z.lazy(() => RecipeCreateNestedOneWithoutFoodCostHistoryInputSchema)
}).strict();

export const FoodCostHistoryUncheckedCreateInputSchema: z.ZodType<Prisma.FoodCostHistoryUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  recipeId: z.number().int(),
  cost: z.number(),
  date: z.coerce.date(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const FoodCostHistoryUpdateInputSchema: z.ZodType<Prisma.FoodCostHistoryUpdateInput> = z.object({
  cost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  recipe: z.lazy(() => RecipeUpdateOneRequiredWithoutFoodCostHistoryNestedInputSchema).optional()
}).strict();

export const FoodCostHistoryUncheckedUpdateInputSchema: z.ZodType<Prisma.FoodCostHistoryUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FoodCostHistoryCreateManyInputSchema: z.ZodType<Prisma.FoodCostHistoryCreateManyInput> = z.object({
  id: z.number().int().optional(),
  recipeId: z.number().int(),
  cost: z.number(),
  date: z.coerce.date(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const FoodCostHistoryUpdateManyMutationInputSchema: z.ZodType<Prisma.FoodCostHistoryUpdateManyMutationInput> = z.object({
  cost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FoodCostHistoryUncheckedUpdateManyInputSchema: z.ZodType<Prisma.FoodCostHistoryUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PrepHistoryCreateInputSchema: z.ZodType<Prisma.PrepHistoryCreateInput> = z.object({
  quantity: z.number().int(),
  date: z.coerce.date(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  recipe: z.lazy(() => RecipeCreateNestedOneWithoutPrepHistoryInputSchema)
}).strict();

export const PrepHistoryUncheckedCreateInputSchema: z.ZodType<Prisma.PrepHistoryUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  recipeId: z.number().int(),
  quantity: z.number().int(),
  date: z.coerce.date(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const PrepHistoryUpdateInputSchema: z.ZodType<Prisma.PrepHistoryUpdateInput> = z.object({
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  recipe: z.lazy(() => RecipeUpdateOneRequiredWithoutPrepHistoryNestedInputSchema).optional()
}).strict();

export const PrepHistoryUncheckedUpdateInputSchema: z.ZodType<Prisma.PrepHistoryUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PrepHistoryCreateManyInputSchema: z.ZodType<Prisma.PrepHistoryCreateManyInput> = z.object({
  id: z.number().int().optional(),
  recipeId: z.number().int(),
  quantity: z.number().int(),
  date: z.coerce.date(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const PrepHistoryUpdateManyMutationInputSchema: z.ZodType<Prisma.PrepHistoryUpdateManyMutationInput> = z.object({
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PrepHistoryUncheckedUpdateManyInputSchema: z.ZodType<Prisma.PrepHistoryUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const IntFilterSchema: z.ZodType<Prisma.IntFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntFilterSchema) ]).optional(),
}).strict();

export const FloatFilterSchema: z.ZodType<Prisma.FloatFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatFilterSchema) ]).optional(),
}).strict();

export const StringFilterSchema: z.ZodType<Prisma.StringFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringFilterSchema) ]).optional(),
}).strict();

export const BoolFilterSchema: z.ZodType<Prisma.BoolFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolFilterSchema) ]).optional(),
}).strict();

export const RecipeScalarRelationFilterSchema: z.ZodType<Prisma.RecipeScalarRelationFilter> = z.object({
  is: z.lazy(() => RecipeWhereInputSchema).optional(),
  isNot: z.lazy(() => RecipeWhereInputSchema).optional()
}).strict();

export const RecipeNutritionCountOrderByAggregateInputSchema: z.ZodType<Prisma.RecipeNutritionCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  servingSize: z.lazy(() => SortOrderSchema).optional(),
  servingUnit: z.lazy(() => SortOrderSchema).optional(),
  calories: z.lazy(() => SortOrderSchema).optional(),
  protein: z.lazy(() => SortOrderSchema).optional(),
  carbohydrates: z.lazy(() => SortOrderSchema).optional(),
  fat: z.lazy(() => SortOrderSchema).optional(),
  fiber: z.lazy(() => SortOrderSchema).optional(),
  sugar: z.lazy(() => SortOrderSchema).optional(),
  sodium: z.lazy(() => SortOrderSchema).optional(),
  containsGluten: z.lazy(() => SortOrderSchema).optional(),
  containsDairy: z.lazy(() => SortOrderSchema).optional(),
  containsNuts: z.lazy(() => SortOrderSchema).optional(),
  containsEggs: z.lazy(() => SortOrderSchema).optional(),
  containsSoy: z.lazy(() => SortOrderSchema).optional(),
  containsFish: z.lazy(() => SortOrderSchema).optional(),
  containsShellfish: z.lazy(() => SortOrderSchema).optional(),
  containsSesame: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeNutritionAvgOrderByAggregateInputSchema: z.ZodType<Prisma.RecipeNutritionAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  servingSize: z.lazy(() => SortOrderSchema).optional(),
  calories: z.lazy(() => SortOrderSchema).optional(),
  protein: z.lazy(() => SortOrderSchema).optional(),
  carbohydrates: z.lazy(() => SortOrderSchema).optional(),
  fat: z.lazy(() => SortOrderSchema).optional(),
  fiber: z.lazy(() => SortOrderSchema).optional(),
  sugar: z.lazy(() => SortOrderSchema).optional(),
  sodium: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeNutritionMaxOrderByAggregateInputSchema: z.ZodType<Prisma.RecipeNutritionMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  servingSize: z.lazy(() => SortOrderSchema).optional(),
  servingUnit: z.lazy(() => SortOrderSchema).optional(),
  calories: z.lazy(() => SortOrderSchema).optional(),
  protein: z.lazy(() => SortOrderSchema).optional(),
  carbohydrates: z.lazy(() => SortOrderSchema).optional(),
  fat: z.lazy(() => SortOrderSchema).optional(),
  fiber: z.lazy(() => SortOrderSchema).optional(),
  sugar: z.lazy(() => SortOrderSchema).optional(),
  sodium: z.lazy(() => SortOrderSchema).optional(),
  containsGluten: z.lazy(() => SortOrderSchema).optional(),
  containsDairy: z.lazy(() => SortOrderSchema).optional(),
  containsNuts: z.lazy(() => SortOrderSchema).optional(),
  containsEggs: z.lazy(() => SortOrderSchema).optional(),
  containsSoy: z.lazy(() => SortOrderSchema).optional(),
  containsFish: z.lazy(() => SortOrderSchema).optional(),
  containsShellfish: z.lazy(() => SortOrderSchema).optional(),
  containsSesame: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeNutritionMinOrderByAggregateInputSchema: z.ZodType<Prisma.RecipeNutritionMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  servingSize: z.lazy(() => SortOrderSchema).optional(),
  servingUnit: z.lazy(() => SortOrderSchema).optional(),
  calories: z.lazy(() => SortOrderSchema).optional(),
  protein: z.lazy(() => SortOrderSchema).optional(),
  carbohydrates: z.lazy(() => SortOrderSchema).optional(),
  fat: z.lazy(() => SortOrderSchema).optional(),
  fiber: z.lazy(() => SortOrderSchema).optional(),
  sugar: z.lazy(() => SortOrderSchema).optional(),
  sodium: z.lazy(() => SortOrderSchema).optional(),
  containsGluten: z.lazy(() => SortOrderSchema).optional(),
  containsDairy: z.lazy(() => SortOrderSchema).optional(),
  containsNuts: z.lazy(() => SortOrderSchema).optional(),
  containsEggs: z.lazy(() => SortOrderSchema).optional(),
  containsSoy: z.lazy(() => SortOrderSchema).optional(),
  containsFish: z.lazy(() => SortOrderSchema).optional(),
  containsShellfish: z.lazy(() => SortOrderSchema).optional(),
  containsSesame: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeNutritionSumOrderByAggregateInputSchema: z.ZodType<Prisma.RecipeNutritionSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  servingSize: z.lazy(() => SortOrderSchema).optional(),
  calories: z.lazy(() => SortOrderSchema).optional(),
  protein: z.lazy(() => SortOrderSchema).optional(),
  carbohydrates: z.lazy(() => SortOrderSchema).optional(),
  fat: z.lazy(() => SortOrderSchema).optional(),
  fiber: z.lazy(() => SortOrderSchema).optional(),
  sugar: z.lazy(() => SortOrderSchema).optional(),
  sodium: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IntWithAggregatesFilterSchema: z.ZodType<Prisma.IntWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedIntFilterSchema).optional(),
  _max: z.lazy(() => NestedIntFilterSchema).optional()
}).strict();

export const FloatWithAggregatesFilterSchema: z.ZodType<Prisma.FloatWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedFloatFilterSchema).optional(),
  _min: z.lazy(() => NestedFloatFilterSchema).optional(),
  _max: z.lazy(() => NestedFloatFilterSchema).optional()
}).strict();

export const StringWithAggregatesFilterSchema: z.ZodType<Prisma.StringWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const BoolWithAggregatesFilterSchema: z.ZodType<Prisma.BoolWithAggregatesFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolFilterSchema).optional()
}).strict();

export const FloatNullableFilterSchema: z.ZodType<Prisma.FloatNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const StringNullableFilterSchema: z.ZodType<Prisma.StringNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const DateTimeFilterSchema: z.ZodType<Prisma.DateTimeFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeFilterSchema) ]).optional(),
}).strict();

export const SortOrderInputSchema: z.ZodType<Prisma.SortOrderInput> = z.object({
  sort: z.lazy(() => SortOrderSchema),
  nulls: z.lazy(() => NullsOrderSchema).optional()
}).strict();

export const RecipeCriticalPointCountOrderByAggregateInputSchema: z.ZodType<Prisma.RecipeCriticalPointCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  stepNumber: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  threshold: z.lazy(() => SortOrderSchema).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  action: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeCriticalPointAvgOrderByAggregateInputSchema: z.ZodType<Prisma.RecipeCriticalPointAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  stepNumber: z.lazy(() => SortOrderSchema).optional(),
  threshold: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeCriticalPointMaxOrderByAggregateInputSchema: z.ZodType<Prisma.RecipeCriticalPointMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  stepNumber: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  threshold: z.lazy(() => SortOrderSchema).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  action: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeCriticalPointMinOrderByAggregateInputSchema: z.ZodType<Prisma.RecipeCriticalPointMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  stepNumber: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  threshold: z.lazy(() => SortOrderSchema).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  action: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeCriticalPointSumOrderByAggregateInputSchema: z.ZodType<Prisma.RecipeCriticalPointSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  stepNumber: z.lazy(() => SortOrderSchema).optional(),
  threshold: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FloatNullableWithAggregatesFilterSchema: z.ZodType<Prisma.FloatNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedFloatNullableFilterSchema).optional()
}).strict();

export const StringNullableWithAggregatesFilterSchema: z.ZodType<Prisma.StringNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();

export const DateTimeWithAggregatesFilterSchema: z.ZodType<Prisma.DateTimeWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeFilterSchema).optional()
}).strict();

export const RecipeStorageCountOrderByAggregateInputSchema: z.ZodType<Prisma.RecipeStorageCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  temperature: z.lazy(() => SortOrderSchema).optional(),
  method: z.lazy(() => SortOrderSchema).optional(),
  shelfLife: z.lazy(() => SortOrderSchema).optional(),
  containerType: z.lazy(() => SortOrderSchema).optional(),
  specialNotes: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeStorageAvgOrderByAggregateInputSchema: z.ZodType<Prisma.RecipeStorageAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  temperature: z.lazy(() => SortOrderSchema).optional(),
  shelfLife: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeStorageMaxOrderByAggregateInputSchema: z.ZodType<Prisma.RecipeStorageMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  temperature: z.lazy(() => SortOrderSchema).optional(),
  method: z.lazy(() => SortOrderSchema).optional(),
  shelfLife: z.lazy(() => SortOrderSchema).optional(),
  containerType: z.lazy(() => SortOrderSchema).optional(),
  specialNotes: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeStorageMinOrderByAggregateInputSchema: z.ZodType<Prisma.RecipeStorageMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  temperature: z.lazy(() => SortOrderSchema).optional(),
  method: z.lazy(() => SortOrderSchema).optional(),
  shelfLife: z.lazy(() => SortOrderSchema).optional(),
  containerType: z.lazy(() => SortOrderSchema).optional(),
  specialNotes: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeStorageSumOrderByAggregateInputSchema: z.ZodType<Prisma.RecipeStorageSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  temperature: z.lazy(() => SortOrderSchema).optional(),
  shelfLife: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumPhotoTypeFilterSchema: z.ZodType<Prisma.EnumPhotoTypeFilter> = z.object({
  equals: z.lazy(() => PhotoTypeSchema).optional(),
  in: z.lazy(() => PhotoTypeSchema).array().optional(),
  notIn: z.lazy(() => PhotoTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => PhotoTypeSchema),z.lazy(() => NestedEnumPhotoTypeFilterSchema) ]).optional(),
}).strict();

export const IntNullableFilterSchema: z.ZodType<Prisma.IntNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const RecipePhotoCountOrderByAggregateInputSchema: z.ZodType<Prisma.RecipePhotoCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  stepNumber: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipePhotoAvgOrderByAggregateInputSchema: z.ZodType<Prisma.RecipePhotoAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  stepNumber: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipePhotoMaxOrderByAggregateInputSchema: z.ZodType<Prisma.RecipePhotoMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  stepNumber: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipePhotoMinOrderByAggregateInputSchema: z.ZodType<Prisma.RecipePhotoMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  stepNumber: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipePhotoSumOrderByAggregateInputSchema: z.ZodType<Prisma.RecipePhotoSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  stepNumber: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumPhotoTypeWithAggregatesFilterSchema: z.ZodType<Prisma.EnumPhotoTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => PhotoTypeSchema).optional(),
  in: z.lazy(() => PhotoTypeSchema).array().optional(),
  notIn: z.lazy(() => PhotoTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => PhotoTypeSchema),z.lazy(() => NestedEnumPhotoTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumPhotoTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumPhotoTypeFilterSchema).optional()
}).strict();

export const IntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.IntNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedIntNullableFilterSchema).optional()
}).strict();

export const RecipeTemperatureCountOrderByAggregateInputSchema: z.ZodType<Prisma.RecipeTemperatureCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  stepNumber: z.lazy(() => SortOrderSchema).optional(),
  minTemp: z.lazy(() => SortOrderSchema).optional(),
  maxTemp: z.lazy(() => SortOrderSchema).optional(),
  isCritical: z.lazy(() => SortOrderSchema).optional(),
  holdTime: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeTemperatureAvgOrderByAggregateInputSchema: z.ZodType<Prisma.RecipeTemperatureAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  stepNumber: z.lazy(() => SortOrderSchema).optional(),
  minTemp: z.lazy(() => SortOrderSchema).optional(),
  maxTemp: z.lazy(() => SortOrderSchema).optional(),
  holdTime: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeTemperatureMaxOrderByAggregateInputSchema: z.ZodType<Prisma.RecipeTemperatureMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  stepNumber: z.lazy(() => SortOrderSchema).optional(),
  minTemp: z.lazy(() => SortOrderSchema).optional(),
  maxTemp: z.lazy(() => SortOrderSchema).optional(),
  isCritical: z.lazy(() => SortOrderSchema).optional(),
  holdTime: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeTemperatureMinOrderByAggregateInputSchema: z.ZodType<Prisma.RecipeTemperatureMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  stepNumber: z.lazy(() => SortOrderSchema).optional(),
  minTemp: z.lazy(() => SortOrderSchema).optional(),
  maxTemp: z.lazy(() => SortOrderSchema).optional(),
  isCritical: z.lazy(() => SortOrderSchema).optional(),
  holdTime: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeTemperatureSumOrderByAggregateInputSchema: z.ZodType<Prisma.RecipeTemperatureSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  stepNumber: z.lazy(() => SortOrderSchema).optional(),
  minTemp: z.lazy(() => SortOrderSchema).optional(),
  maxTemp: z.lazy(() => SortOrderSchema).optional(),
  holdTime: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeYieldCountOrderByAggregateInputSchema: z.ZodType<Prisma.RecipeYieldCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  expectedYield: z.lazy(() => SortOrderSchema).optional(),
  actualYield: z.lazy(() => SortOrderSchema).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  wastagePercent: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeYieldAvgOrderByAggregateInputSchema: z.ZodType<Prisma.RecipeYieldAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  expectedYield: z.lazy(() => SortOrderSchema).optional(),
  actualYield: z.lazy(() => SortOrderSchema).optional(),
  wastagePercent: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeYieldMaxOrderByAggregateInputSchema: z.ZodType<Prisma.RecipeYieldMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  expectedYield: z.lazy(() => SortOrderSchema).optional(),
  actualYield: z.lazy(() => SortOrderSchema).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  wastagePercent: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeYieldMinOrderByAggregateInputSchema: z.ZodType<Prisma.RecipeYieldMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  expectedYield: z.lazy(() => SortOrderSchema).optional(),
  actualYield: z.lazy(() => SortOrderSchema).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  wastagePercent: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeYieldSumOrderByAggregateInputSchema: z.ZodType<Prisma.RecipeYieldSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  expectedYield: z.lazy(() => SortOrderSchema).optional(),
  actualYield: z.lazy(() => SortOrderSchema).optional(),
  wastagePercent: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeLaborCostCountOrderByAggregateInputSchema: z.ZodType<Prisma.RecipeLaborCostCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  prepTime: z.lazy(() => SortOrderSchema).optional(),
  cookTime: z.lazy(() => SortOrderSchema).optional(),
  laborRate: z.lazy(() => SortOrderSchema).optional(),
  totalLaborCost: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeLaborCostAvgOrderByAggregateInputSchema: z.ZodType<Prisma.RecipeLaborCostAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  prepTime: z.lazy(() => SortOrderSchema).optional(),
  cookTime: z.lazy(() => SortOrderSchema).optional(),
  laborRate: z.lazy(() => SortOrderSchema).optional(),
  totalLaborCost: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeLaborCostMaxOrderByAggregateInputSchema: z.ZodType<Prisma.RecipeLaborCostMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  prepTime: z.lazy(() => SortOrderSchema).optional(),
  cookTime: z.lazy(() => SortOrderSchema).optional(),
  laborRate: z.lazy(() => SortOrderSchema).optional(),
  totalLaborCost: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeLaborCostMinOrderByAggregateInputSchema: z.ZodType<Prisma.RecipeLaborCostMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  prepTime: z.lazy(() => SortOrderSchema).optional(),
  cookTime: z.lazy(() => SortOrderSchema).optional(),
  laborRate: z.lazy(() => SortOrderSchema).optional(),
  totalLaborCost: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeLaborCostSumOrderByAggregateInputSchema: z.ZodType<Prisma.RecipeLaborCostSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  prepTime: z.lazy(() => SortOrderSchema).optional(),
  cookTime: z.lazy(() => SortOrderSchema).optional(),
  laborRate: z.lazy(() => SortOrderSchema).optional(),
  totalLaborCost: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RestaurantScalarRelationFilterSchema: z.ZodType<Prisma.RestaurantScalarRelationFilter> = z.object({
  is: z.lazy(() => RestaurantWhereInputSchema).optional(),
  isNot: z.lazy(() => RestaurantWhereInputSchema).optional()
}).strict();

export const MenuItemScalarRelationFilterSchema: z.ZodType<Prisma.MenuItemScalarRelationFilter> = z.object({
  is: z.lazy(() => MenuItemWhereInputSchema).optional(),
  isNot: z.lazy(() => MenuItemWhereInputSchema).optional()
}).strict();

export const SalesTransactionsCountOrderByAggregateInputSchema: z.ZodType<Prisma.SalesTransactionsCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  posTransactionID: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  menuItemId: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  total: z.lazy(() => SortOrderSchema).optional(),
  transactionDate: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SalesTransactionsAvgOrderByAggregateInputSchema: z.ZodType<Prisma.SalesTransactionsAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  menuItemId: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  total: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SalesTransactionsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.SalesTransactionsMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  posTransactionID: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  menuItemId: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  total: z.lazy(() => SortOrderSchema).optional(),
  transactionDate: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SalesTransactionsMinOrderByAggregateInputSchema: z.ZodType<Prisma.SalesTransactionsMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  posTransactionID: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  menuItemId: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  total: z.lazy(() => SortOrderSchema).optional(),
  transactionDate: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SalesTransactionsSumOrderByAggregateInputSchema: z.ZodType<Prisma.SalesTransactionsSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  menuItemId: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  total: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MenuScalarRelationFilterSchema: z.ZodType<Prisma.MenuScalarRelationFilter> = z.object({
  is: z.lazy(() => MenuWhereInputSchema).optional(),
  isNot: z.lazy(() => MenuWhereInputSchema).optional()
}).strict();

export const MenuItemListRelationFilterSchema: z.ZodType<Prisma.MenuItemListRelationFilter> = z.object({
  every: z.lazy(() => MenuItemWhereInputSchema).optional(),
  some: z.lazy(() => MenuItemWhereInputSchema).optional(),
  none: z.lazy(() => MenuItemWhereInputSchema).optional()
}).strict();

export const MenuItemOrderByRelationAggregateInputSchema: z.ZodType<Prisma.MenuItemOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MenuCategoryMenuIdNameCompoundUniqueInputSchema: z.ZodType<Prisma.MenuCategoryMenuIdNameCompoundUniqueInput> = z.object({
  menuId: z.number(),
  name: z.string()
}).strict();

export const MenuCategoryCountOrderByAggregateInputSchema: z.ZodType<Prisma.MenuCategoryCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  displayOrder: z.lazy(() => SortOrderSchema).optional(),
  menuId: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MenuCategoryAvgOrderByAggregateInputSchema: z.ZodType<Prisma.MenuCategoryAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  displayOrder: z.lazy(() => SortOrderSchema).optional(),
  menuId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MenuCategoryMaxOrderByAggregateInputSchema: z.ZodType<Prisma.MenuCategoryMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  displayOrder: z.lazy(() => SortOrderSchema).optional(),
  menuId: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MenuCategoryMinOrderByAggregateInputSchema: z.ZodType<Prisma.MenuCategoryMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  displayOrder: z.lazy(() => SortOrderSchema).optional(),
  menuId: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MenuCategorySumOrderByAggregateInputSchema: z.ZodType<Prisma.MenuCategorySumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  displayOrder: z.lazy(() => SortOrderSchema).optional(),
  menuId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DateTimeNullableFilterSchema: z.ZodType<Prisma.DateTimeNullableFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const RecipeIngredientListRelationFilterSchema: z.ZodType<Prisma.RecipeIngredientListRelationFilter> = z.object({
  every: z.lazy(() => RecipeIngredientWhereInputSchema).optional(),
  some: z.lazy(() => RecipeIngredientWhereInputSchema).optional(),
  none: z.lazy(() => RecipeIngredientWhereInputSchema).optional()
}).strict();

export const RecipeInstructionListRelationFilterSchema: z.ZodType<Prisma.RecipeInstructionListRelationFilter> = z.object({
  every: z.lazy(() => RecipeInstructionWhereInputSchema).optional(),
  some: z.lazy(() => RecipeInstructionWhereInputSchema).optional(),
  none: z.lazy(() => RecipeInstructionWhereInputSchema).optional()
}).strict();

export const UserScalarRelationFilterSchema: z.ZodType<Prisma.UserScalarRelationFilter> = z.object({
  is: z.lazy(() => UserWhereInputSchema).optional(),
  isNot: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserNullableScalarRelationFilterSchema: z.ZodType<Prisma.UserNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => UserWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => UserWhereInputSchema).optional().nullable()
}).strict();

export const RecipeIngredientOrderByRelationAggregateInputSchema: z.ZodType<Prisma.RecipeIngredientOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeInstructionOrderByRelationAggregateInputSchema: z.ZodType<Prisma.RecipeInstructionOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeVersionRecipeIdVersionNumberCompoundUniqueInputSchema: z.ZodType<Prisma.RecipeVersionRecipeIdVersionNumberCompoundUniqueInput> = z.object({
  recipeId: z.number(),
  versionNumber: z.number()
}).strict();

export const RecipeVersionCountOrderByAggregateInputSchema: z.ZodType<Prisma.RecipeVersionCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  versionNumber: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  changes: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  approvedById: z.lazy(() => SortOrderSchema).optional(),
  approvedAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeVersionAvgOrderByAggregateInputSchema: z.ZodType<Prisma.RecipeVersionAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  versionNumber: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  approvedById: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeVersionMaxOrderByAggregateInputSchema: z.ZodType<Prisma.RecipeVersionMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  versionNumber: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  changes: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  approvedById: z.lazy(() => SortOrderSchema).optional(),
  approvedAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeVersionMinOrderByAggregateInputSchema: z.ZodType<Prisma.RecipeVersionMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  versionNumber: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  changes: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  approvedById: z.lazy(() => SortOrderSchema).optional(),
  approvedAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeVersionSumOrderByAggregateInputSchema: z.ZodType<Prisma.RecipeVersionSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  versionNumber: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  approvedById: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DateTimeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.DateTimeNullableWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeNullableFilterSchema).optional()
}).strict();

export const EnumEquipmentStatusFilterSchema: z.ZodType<Prisma.EnumEquipmentStatusFilter> = z.object({
  equals: z.lazy(() => EquipmentStatusSchema).optional(),
  in: z.lazy(() => EquipmentStatusSchema).array().optional(),
  notIn: z.lazy(() => EquipmentStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => EquipmentStatusSchema),z.lazy(() => NestedEnumEquipmentStatusFilterSchema) ]).optional(),
}).strict();

export const RecipeEquipmentListRelationFilterSchema: z.ZodType<Prisma.RecipeEquipmentListRelationFilter> = z.object({
  every: z.lazy(() => RecipeEquipmentWhereInputSchema).optional(),
  some: z.lazy(() => RecipeEquipmentWhereInputSchema).optional(),
  none: z.lazy(() => RecipeEquipmentWhereInputSchema).optional()
}).strict();

export const MaintenanceLogListRelationFilterSchema: z.ZodType<Prisma.MaintenanceLogListRelationFilter> = z.object({
  every: z.lazy(() => MaintenanceLogWhereInputSchema).optional(),
  some: z.lazy(() => MaintenanceLogWhereInputSchema).optional(),
  none: z.lazy(() => MaintenanceLogWhereInputSchema).optional()
}).strict();

export const RecipeEquipmentOrderByRelationAggregateInputSchema: z.ZodType<Prisma.RecipeEquipmentOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MaintenanceLogOrderByRelationAggregateInputSchema: z.ZodType<Prisma.MaintenanceLogOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EquipmentCountOrderByAggregateInputSchema: z.ZodType<Prisma.EquipmentCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  model: z.lazy(() => SortOrderSchema).optional(),
  serialNumber: z.lazy(() => SortOrderSchema).optional(),
  purchaseDate: z.lazy(() => SortOrderSchema).optional(),
  lastMaintenance: z.lazy(() => SortOrderSchema).optional(),
  nextMaintenance: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  location: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EquipmentAvgOrderByAggregateInputSchema: z.ZodType<Prisma.EquipmentAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EquipmentMaxOrderByAggregateInputSchema: z.ZodType<Prisma.EquipmentMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  model: z.lazy(() => SortOrderSchema).optional(),
  serialNumber: z.lazy(() => SortOrderSchema).optional(),
  purchaseDate: z.lazy(() => SortOrderSchema).optional(),
  lastMaintenance: z.lazy(() => SortOrderSchema).optional(),
  nextMaintenance: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  location: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EquipmentMinOrderByAggregateInputSchema: z.ZodType<Prisma.EquipmentMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  model: z.lazy(() => SortOrderSchema).optional(),
  serialNumber: z.lazy(() => SortOrderSchema).optional(),
  purchaseDate: z.lazy(() => SortOrderSchema).optional(),
  lastMaintenance: z.lazy(() => SortOrderSchema).optional(),
  nextMaintenance: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  location: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EquipmentSumOrderByAggregateInputSchema: z.ZodType<Prisma.EquipmentSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumEquipmentStatusWithAggregatesFilterSchema: z.ZodType<Prisma.EnumEquipmentStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => EquipmentStatusSchema).optional(),
  in: z.lazy(() => EquipmentStatusSchema).array().optional(),
  notIn: z.lazy(() => EquipmentStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => EquipmentStatusSchema),z.lazy(() => NestedEnumEquipmentStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumEquipmentStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumEquipmentStatusFilterSchema).optional()
}).strict();

export const EquipmentScalarRelationFilterSchema: z.ZodType<Prisma.EquipmentScalarRelationFilter> = z.object({
  is: z.lazy(() => EquipmentWhereInputSchema).optional(),
  isNot: z.lazy(() => EquipmentWhereInputSchema).optional()
}).strict();

export const RecipeInstructionNullableScalarRelationFilterSchema: z.ZodType<Prisma.RecipeInstructionNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => RecipeInstructionWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => RecipeInstructionWhereInputSchema).optional().nullable()
}).strict();

export const RecipeEquipmentRecipeIdEquipmentIdCompoundUniqueInputSchema: z.ZodType<Prisma.RecipeEquipmentRecipeIdEquipmentIdCompoundUniqueInput> = z.object({
  recipeId: z.number(),
  equipmentId: z.number()
}).strict();

export const RecipeEquipmentCountOrderByAggregateInputSchema: z.ZodType<Prisma.RecipeEquipmentCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  equipmentId: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional(),
  recipeInstructionId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeEquipmentAvgOrderByAggregateInputSchema: z.ZodType<Prisma.RecipeEquipmentAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  equipmentId: z.lazy(() => SortOrderSchema).optional(),
  recipeInstructionId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeEquipmentMaxOrderByAggregateInputSchema: z.ZodType<Prisma.RecipeEquipmentMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  equipmentId: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional(),
  recipeInstructionId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeEquipmentMinOrderByAggregateInputSchema: z.ZodType<Prisma.RecipeEquipmentMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  equipmentId: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional(),
  recipeInstructionId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeEquipmentSumOrderByAggregateInputSchema: z.ZodType<Prisma.RecipeEquipmentSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  equipmentId: z.lazy(() => SortOrderSchema).optional(),
  recipeInstructionId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumMaintenanceTypeFilterSchema: z.ZodType<Prisma.EnumMaintenanceTypeFilter> = z.object({
  equals: z.lazy(() => MaintenanceTypeSchema).optional(),
  in: z.lazy(() => MaintenanceTypeSchema).array().optional(),
  notIn: z.lazy(() => MaintenanceTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => MaintenanceTypeSchema),z.lazy(() => NestedEnumMaintenanceTypeFilterSchema) ]).optional(),
}).strict();

export const MaintenanceLogCountOrderByAggregateInputSchema: z.ZodType<Prisma.MaintenanceLogCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  equipmentId: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  cost: z.lazy(() => SortOrderSchema).optional(),
  performedBy: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MaintenanceLogAvgOrderByAggregateInputSchema: z.ZodType<Prisma.MaintenanceLogAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  equipmentId: z.lazy(() => SortOrderSchema).optional(),
  cost: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MaintenanceLogMaxOrderByAggregateInputSchema: z.ZodType<Prisma.MaintenanceLogMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  equipmentId: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  cost: z.lazy(() => SortOrderSchema).optional(),
  performedBy: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MaintenanceLogMinOrderByAggregateInputSchema: z.ZodType<Prisma.MaintenanceLogMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  equipmentId: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  cost: z.lazy(() => SortOrderSchema).optional(),
  performedBy: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MaintenanceLogSumOrderByAggregateInputSchema: z.ZodType<Prisma.MaintenanceLogSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  equipmentId: z.lazy(() => SortOrderSchema).optional(),
  cost: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumMaintenanceTypeWithAggregatesFilterSchema: z.ZodType<Prisma.EnumMaintenanceTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => MaintenanceTypeSchema).optional(),
  in: z.lazy(() => MaintenanceTypeSchema).array().optional(),
  notIn: z.lazy(() => MaintenanceTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => MaintenanceTypeSchema),z.lazy(() => NestedEnumMaintenanceTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumMaintenanceTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumMaintenanceTypeFilterSchema).optional()
}).strict();

export const EnumChecklistFrequencyFilterSchema: z.ZodType<Prisma.EnumChecklistFrequencyFilter> = z.object({
  equals: z.lazy(() => ChecklistFrequencySchema).optional(),
  in: z.lazy(() => ChecklistFrequencySchema).array().optional(),
  notIn: z.lazy(() => ChecklistFrequencySchema).array().optional(),
  not: z.union([ z.lazy(() => ChecklistFrequencySchema),z.lazy(() => NestedEnumChecklistFrequencyFilterSchema) ]).optional(),
}).strict();

export const ChecklistItemListRelationFilterSchema: z.ZodType<Prisma.ChecklistItemListRelationFilter> = z.object({
  every: z.lazy(() => ChecklistItemWhereInputSchema).optional(),
  some: z.lazy(() => ChecklistItemWhereInputSchema).optional(),
  none: z.lazy(() => ChecklistItemWhereInputSchema).optional()
}).strict();

export const ChecklistCompleteListRelationFilterSchema: z.ZodType<Prisma.ChecklistCompleteListRelationFilter> = z.object({
  every: z.lazy(() => ChecklistCompleteWhereInputSchema).optional(),
  some: z.lazy(() => ChecklistCompleteWhereInputSchema).optional(),
  none: z.lazy(() => ChecklistCompleteWhereInputSchema).optional()
}).strict();

export const ChecklistItemOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ChecklistItemOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ChecklistCompleteOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ChecklistCompleteOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const QualityChecklistCountOrderByAggregateInputSchema: z.ZodType<Prisma.QualityChecklistCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  frequency: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const QualityChecklistAvgOrderByAggregateInputSchema: z.ZodType<Prisma.QualityChecklistAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const QualityChecklistMaxOrderByAggregateInputSchema: z.ZodType<Prisma.QualityChecklistMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  frequency: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const QualityChecklistMinOrderByAggregateInputSchema: z.ZodType<Prisma.QualityChecklistMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  frequency: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const QualityChecklistSumOrderByAggregateInputSchema: z.ZodType<Prisma.QualityChecklistSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumChecklistFrequencyWithAggregatesFilterSchema: z.ZodType<Prisma.EnumChecklistFrequencyWithAggregatesFilter> = z.object({
  equals: z.lazy(() => ChecklistFrequencySchema).optional(),
  in: z.lazy(() => ChecklistFrequencySchema).array().optional(),
  notIn: z.lazy(() => ChecklistFrequencySchema).array().optional(),
  not: z.union([ z.lazy(() => ChecklistFrequencySchema),z.lazy(() => NestedEnumChecklistFrequencyWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumChecklistFrequencyFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumChecklistFrequencyFilterSchema).optional()
}).strict();

export const EnumChecklistItemTypeFilterSchema: z.ZodType<Prisma.EnumChecklistItemTypeFilter> = z.object({
  equals: z.lazy(() => ChecklistItemTypeSchema).optional(),
  in: z.lazy(() => ChecklistItemTypeSchema).array().optional(),
  notIn: z.lazy(() => ChecklistItemTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => ChecklistItemTypeSchema),z.lazy(() => NestedEnumChecklistItemTypeFilterSchema) ]).optional(),
}).strict();

export const QualityChecklistScalarRelationFilterSchema: z.ZodType<Prisma.QualityChecklistScalarRelationFilter> = z.object({
  is: z.lazy(() => QualityChecklistWhereInputSchema).optional(),
  isNot: z.lazy(() => QualityChecklistWhereInputSchema).optional()
}).strict();

export const ChecklistItemCompleteListRelationFilterSchema: z.ZodType<Prisma.ChecklistItemCompleteListRelationFilter> = z.object({
  every: z.lazy(() => ChecklistItemCompleteWhereInputSchema).optional(),
  some: z.lazy(() => ChecklistItemCompleteWhereInputSchema).optional(),
  none: z.lazy(() => ChecklistItemCompleteWhereInputSchema).optional()
}).strict();

export const ChecklistItemCompleteOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ChecklistItemCompleteOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ChecklistItemCountOrderByAggregateInputSchema: z.ZodType<Prisma.ChecklistItemCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  checklistId: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  requiredPhotos: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ChecklistItemAvgOrderByAggregateInputSchema: z.ZodType<Prisma.ChecklistItemAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  checklistId: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ChecklistItemMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ChecklistItemMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  checklistId: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  requiredPhotos: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ChecklistItemMinOrderByAggregateInputSchema: z.ZodType<Prisma.ChecklistItemMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  checklistId: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  requiredPhotos: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ChecklistItemSumOrderByAggregateInputSchema: z.ZodType<Prisma.ChecklistItemSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  checklistId: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumChecklistItemTypeWithAggregatesFilterSchema: z.ZodType<Prisma.EnumChecklistItemTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => ChecklistItemTypeSchema).optional(),
  in: z.lazy(() => ChecklistItemTypeSchema).array().optional(),
  notIn: z.lazy(() => ChecklistItemTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => ChecklistItemTypeSchema),z.lazy(() => NestedEnumChecklistItemTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumChecklistItemTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumChecklistItemTypeFilterSchema).optional()
}).strict();

export const ChecklistCompleteCountOrderByAggregateInputSchema: z.ZodType<Prisma.ChecklistCompleteCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  checklistId: z.lazy(() => SortOrderSchema).optional(),
  completedById: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ChecklistCompleteAvgOrderByAggregateInputSchema: z.ZodType<Prisma.ChecklistCompleteAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  checklistId: z.lazy(() => SortOrderSchema).optional(),
  completedById: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ChecklistCompleteMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ChecklistCompleteMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  checklistId: z.lazy(() => SortOrderSchema).optional(),
  completedById: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ChecklistCompleteMinOrderByAggregateInputSchema: z.ZodType<Prisma.ChecklistCompleteMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  checklistId: z.lazy(() => SortOrderSchema).optional(),
  completedById: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ChecklistCompleteSumOrderByAggregateInputSchema: z.ZodType<Prisma.ChecklistCompleteSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  checklistId: z.lazy(() => SortOrderSchema).optional(),
  completedById: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumChecklistStatusFilterSchema: z.ZodType<Prisma.EnumChecklistStatusFilter> = z.object({
  equals: z.lazy(() => ChecklistStatusSchema).optional(),
  in: z.lazy(() => ChecklistStatusSchema).array().optional(),
  notIn: z.lazy(() => ChecklistStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => ChecklistStatusSchema),z.lazy(() => NestedEnumChecklistStatusFilterSchema) ]).optional(),
}).strict();

export const StringNullableListFilterSchema: z.ZodType<Prisma.StringNullableListFilter> = z.object({
  equals: z.string().array().optional().nullable(),
  has: z.string().optional().nullable(),
  hasEvery: z.string().array().optional(),
  hasSome: z.string().array().optional(),
  isEmpty: z.boolean().optional()
}).strict();

export const ChecklistCompleteScalarRelationFilterSchema: z.ZodType<Prisma.ChecklistCompleteScalarRelationFilter> = z.object({
  is: z.lazy(() => ChecklistCompleteWhereInputSchema).optional(),
  isNot: z.lazy(() => ChecklistCompleteWhereInputSchema).optional()
}).strict();

export const ChecklistItemScalarRelationFilterSchema: z.ZodType<Prisma.ChecklistItemScalarRelationFilter> = z.object({
  is: z.lazy(() => ChecklistItemWhereInputSchema).optional(),
  isNot: z.lazy(() => ChecklistItemWhereInputSchema).optional()
}).strict();

export const ChecklistItemCompleteCountOrderByAggregateInputSchema: z.ZodType<Prisma.ChecklistItemCompleteCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  checklistCompleteId: z.lazy(() => SortOrderSchema).optional(),
  checklistItemId: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional(),
  photoUrls: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ChecklistItemCompleteAvgOrderByAggregateInputSchema: z.ZodType<Prisma.ChecklistItemCompleteAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  checklistCompleteId: z.lazy(() => SortOrderSchema).optional(),
  checklistItemId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ChecklistItemCompleteMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ChecklistItemCompleteMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  checklistCompleteId: z.lazy(() => SortOrderSchema).optional(),
  checklistItemId: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ChecklistItemCompleteMinOrderByAggregateInputSchema: z.ZodType<Prisma.ChecklistItemCompleteMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  checklistCompleteId: z.lazy(() => SortOrderSchema).optional(),
  checklistItemId: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ChecklistItemCompleteSumOrderByAggregateInputSchema: z.ZodType<Prisma.ChecklistItemCompleteSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  checklistCompleteId: z.lazy(() => SortOrderSchema).optional(),
  checklistItemId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumChecklistStatusWithAggregatesFilterSchema: z.ZodType<Prisma.EnumChecklistStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => ChecklistStatusSchema).optional(),
  in: z.lazy(() => ChecklistStatusSchema).array().optional(),
  notIn: z.lazy(() => ChecklistStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => ChecklistStatusSchema),z.lazy(() => NestedEnumChecklistStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumChecklistStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumChecklistStatusFilterSchema).optional()
}).strict();

export const VendorScalarRelationFilterSchema: z.ZodType<Prisma.VendorScalarRelationFilter> = z.object({
  is: z.lazy(() => VendorWhereInputSchema).optional(),
  isNot: z.lazy(() => VendorWhereInputSchema).optional()
}).strict();

export const IngredientScalarRelationFilterSchema: z.ZodType<Prisma.IngredientScalarRelationFilter> = z.object({
  is: z.lazy(() => IngredientWhereInputSchema).optional(),
  isNot: z.lazy(() => IngredientWhereInputSchema).optional()
}).strict();

export const SupplierPriceHistoryCountOrderByAggregateInputSchema: z.ZodType<Prisma.SupplierPriceHistoryCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  vendorId: z.lazy(() => SortOrderSchema).optional(),
  ingredientId: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  startDate: z.lazy(() => SortOrderSchema).optional(),
  endDate: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SupplierPriceHistoryAvgOrderByAggregateInputSchema: z.ZodType<Prisma.SupplierPriceHistoryAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  vendorId: z.lazy(() => SortOrderSchema).optional(),
  ingredientId: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SupplierPriceHistoryMaxOrderByAggregateInputSchema: z.ZodType<Prisma.SupplierPriceHistoryMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  vendorId: z.lazy(() => SortOrderSchema).optional(),
  ingredientId: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  startDate: z.lazy(() => SortOrderSchema).optional(),
  endDate: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SupplierPriceHistoryMinOrderByAggregateInputSchema: z.ZodType<Prisma.SupplierPriceHistoryMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  vendorId: z.lazy(() => SortOrderSchema).optional(),
  ingredientId: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  startDate: z.lazy(() => SortOrderSchema).optional(),
  endDate: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SupplierPriceHistorySumOrderByAggregateInputSchema: z.ZodType<Prisma.SupplierPriceHistorySumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  vendorId: z.lazy(() => SortOrderSchema).optional(),
  ingredientId: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumFeedbackSourceFilterSchema: z.ZodType<Prisma.EnumFeedbackSourceFilter> = z.object({
  equals: z.lazy(() => FeedbackSourceSchema).optional(),
  in: z.lazy(() => FeedbackSourceSchema).array().optional(),
  notIn: z.lazy(() => FeedbackSourceSchema).array().optional(),
  not: z.union([ z.lazy(() => FeedbackSourceSchema),z.lazy(() => NestedEnumFeedbackSourceFilterSchema) ]).optional(),
}).strict();

export const EnumFeedbackStatusFilterSchema: z.ZodType<Prisma.EnumFeedbackStatusFilter> = z.object({
  equals: z.lazy(() => FeedbackStatusSchema).optional(),
  in: z.lazy(() => FeedbackStatusSchema).array().optional(),
  notIn: z.lazy(() => FeedbackStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => FeedbackStatusSchema),z.lazy(() => NestedEnumFeedbackStatusFilterSchema) ]).optional(),
}).strict();

export const MenuItemNullableScalarRelationFilterSchema: z.ZodType<Prisma.MenuItemNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => MenuItemWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => MenuItemWhereInputSchema).optional().nullable()
}).strict();

export const CustomerFeedbackCountOrderByAggregateInputSchema: z.ZodType<Prisma.CustomerFeedbackCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  menuItemId: z.lazy(() => SortOrderSchema).optional(),
  rating: z.lazy(() => SortOrderSchema).optional(),
  comment: z.lazy(() => SortOrderSchema).optional(),
  source: z.lazy(() => SortOrderSchema).optional(),
  tags: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  responseText: z.lazy(() => SortOrderSchema).optional(),
  respondedAt: z.lazy(() => SortOrderSchema).optional(),
  respondedById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CustomerFeedbackAvgOrderByAggregateInputSchema: z.ZodType<Prisma.CustomerFeedbackAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  menuItemId: z.lazy(() => SortOrderSchema).optional(),
  rating: z.lazy(() => SortOrderSchema).optional(),
  respondedById: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CustomerFeedbackMaxOrderByAggregateInputSchema: z.ZodType<Prisma.CustomerFeedbackMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  menuItemId: z.lazy(() => SortOrderSchema).optional(),
  rating: z.lazy(() => SortOrderSchema).optional(),
  comment: z.lazy(() => SortOrderSchema).optional(),
  source: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  responseText: z.lazy(() => SortOrderSchema).optional(),
  respondedAt: z.lazy(() => SortOrderSchema).optional(),
  respondedById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CustomerFeedbackMinOrderByAggregateInputSchema: z.ZodType<Prisma.CustomerFeedbackMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  menuItemId: z.lazy(() => SortOrderSchema).optional(),
  rating: z.lazy(() => SortOrderSchema).optional(),
  comment: z.lazy(() => SortOrderSchema).optional(),
  source: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  responseText: z.lazy(() => SortOrderSchema).optional(),
  respondedAt: z.lazy(() => SortOrderSchema).optional(),
  respondedById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CustomerFeedbackSumOrderByAggregateInputSchema: z.ZodType<Prisma.CustomerFeedbackSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  menuItemId: z.lazy(() => SortOrderSchema).optional(),
  rating: z.lazy(() => SortOrderSchema).optional(),
  respondedById: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumFeedbackSourceWithAggregatesFilterSchema: z.ZodType<Prisma.EnumFeedbackSourceWithAggregatesFilter> = z.object({
  equals: z.lazy(() => FeedbackSourceSchema).optional(),
  in: z.lazy(() => FeedbackSourceSchema).array().optional(),
  notIn: z.lazy(() => FeedbackSourceSchema).array().optional(),
  not: z.union([ z.lazy(() => FeedbackSourceSchema),z.lazy(() => NestedEnumFeedbackSourceWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumFeedbackSourceFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumFeedbackSourceFilterSchema).optional()
}).strict();

export const EnumFeedbackStatusWithAggregatesFilterSchema: z.ZodType<Prisma.EnumFeedbackStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => FeedbackStatusSchema).optional(),
  in: z.lazy(() => FeedbackStatusSchema).array().optional(),
  notIn: z.lazy(() => FeedbackStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => FeedbackStatusSchema),z.lazy(() => NestedEnumFeedbackStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumFeedbackStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumFeedbackStatusFilterSchema).optional()
}).strict();

export const RecipeListRelationFilterSchema: z.ZodType<Prisma.RecipeListRelationFilter> = z.object({
  every: z.lazy(() => RecipeWhereInputSchema).optional(),
  some: z.lazy(() => RecipeWhereInputSchema).optional(),
  none: z.lazy(() => RecipeWhereInputSchema).optional()
}).strict();

export const IngredientListRelationFilterSchema: z.ZodType<Prisma.IngredientListRelationFilter> = z.object({
  every: z.lazy(() => IngredientWhereInputSchema).optional(),
  some: z.lazy(() => IngredientWhereInputSchema).optional(),
  none: z.lazy(() => IngredientWhereInputSchema).optional()
}).strict();

export const RecipeOrderByRelationAggregateInputSchema: z.ZodType<Prisma.RecipeOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IngredientOrderByRelationAggregateInputSchema: z.ZodType<Prisma.IngredientOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DietaryRestrictionCountOrderByAggregateInputSchema: z.ZodType<Prisma.DietaryRestrictionCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  icon: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DietaryRestrictionAvgOrderByAggregateInputSchema: z.ZodType<Prisma.DietaryRestrictionAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DietaryRestrictionMaxOrderByAggregateInputSchema: z.ZodType<Prisma.DietaryRestrictionMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  icon: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DietaryRestrictionMinOrderByAggregateInputSchema: z.ZodType<Prisma.DietaryRestrictionMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  icon: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DietaryRestrictionSumOrderByAggregateInputSchema: z.ZodType<Prisma.DietaryRestrictionSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeTagCountOrderByAggregateInputSchema: z.ZodType<Prisma.RecipeTagCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeTagAvgOrderByAggregateInputSchema: z.ZodType<Prisma.RecipeTagAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeTagMaxOrderByAggregateInputSchema: z.ZodType<Prisma.RecipeTagMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeTagMinOrderByAggregateInputSchema: z.ZodType<Prisma.RecipeTagMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeTagSumOrderByAggregateInputSchema: z.ZodType<Prisma.RecipeTagSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LeftoverItemCountOrderByAggregateInputSchema: z.ZodType<Prisma.LeftoverItemCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  menuItemId: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  reason: z.lazy(() => SortOrderSchema).optional(),
  recordedById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LeftoverItemAvgOrderByAggregateInputSchema: z.ZodType<Prisma.LeftoverItemAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  menuItemId: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  recordedById: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LeftoverItemMaxOrderByAggregateInputSchema: z.ZodType<Prisma.LeftoverItemMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  menuItemId: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  reason: z.lazy(() => SortOrderSchema).optional(),
  recordedById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LeftoverItemMinOrderByAggregateInputSchema: z.ZodType<Prisma.LeftoverItemMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  menuItemId: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  reason: z.lazy(() => SortOrderSchema).optional(),
  recordedById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LeftoverItemSumOrderByAggregateInputSchema: z.ZodType<Prisma.LeftoverItemSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  menuItemId: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  recordedById: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const WasteRecordCountOrderByAggregateInputSchema: z.ZodType<Prisma.WasteRecordCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  ingredientId: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  reason: z.lazy(() => SortOrderSchema).optional(),
  recordedById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const WasteRecordAvgOrderByAggregateInputSchema: z.ZodType<Prisma.WasteRecordAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  ingredientId: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  recordedById: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const WasteRecordMaxOrderByAggregateInputSchema: z.ZodType<Prisma.WasteRecordMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  ingredientId: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  reason: z.lazy(() => SortOrderSchema).optional(),
  recordedById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const WasteRecordMinOrderByAggregateInputSchema: z.ZodType<Prisma.WasteRecordMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  ingredientId: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  reason: z.lazy(() => SortOrderSchema).optional(),
  recordedById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const WasteRecordSumOrderByAggregateInputSchema: z.ZodType<Prisma.WasteRecordSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  ingredientId: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  recordedById: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumProductionStatusFilterSchema: z.ZodType<Prisma.EnumProductionStatusFilter> = z.object({
  equals: z.lazy(() => ProductionStatusSchema).optional(),
  in: z.lazy(() => ProductionStatusSchema).array().optional(),
  notIn: z.lazy(() => ProductionStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => ProductionStatusSchema),z.lazy(() => NestedEnumProductionStatusFilterSchema) ]).optional(),
}).strict();

export const ProductionPlanItemListRelationFilterSchema: z.ZodType<Prisma.ProductionPlanItemListRelationFilter> = z.object({
  every: z.lazy(() => ProductionPlanItemWhereInputSchema).optional(),
  some: z.lazy(() => ProductionPlanItemWhereInputSchema).optional(),
  none: z.lazy(() => ProductionPlanItemWhereInputSchema).optional()
}).strict();

export const ProductionPlanItemOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ProductionPlanItemOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProductionPlanCountOrderByAggregateInputSchema: z.ZodType<Prisma.ProductionPlanCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProductionPlanAvgOrderByAggregateInputSchema: z.ZodType<Prisma.ProductionPlanAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProductionPlanMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ProductionPlanMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProductionPlanMinOrderByAggregateInputSchema: z.ZodType<Prisma.ProductionPlanMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProductionPlanSumOrderByAggregateInputSchema: z.ZodType<Prisma.ProductionPlanSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumProductionStatusWithAggregatesFilterSchema: z.ZodType<Prisma.EnumProductionStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => ProductionStatusSchema).optional(),
  in: z.lazy(() => ProductionStatusSchema).array().optional(),
  notIn: z.lazy(() => ProductionStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => ProductionStatusSchema),z.lazy(() => NestedEnumProductionStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumProductionStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumProductionStatusFilterSchema).optional()
}).strict();

export const ProductionPlanScalarRelationFilterSchema: z.ZodType<Prisma.ProductionPlanScalarRelationFilter> = z.object({
  is: z.lazy(() => ProductionPlanWhereInputSchema).optional(),
  isNot: z.lazy(() => ProductionPlanWhereInputSchema).optional()
}).strict();

export const ProductionPlanItemCountOrderByAggregateInputSchema: z.ZodType<Prisma.ProductionPlanItemCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  productionPlanId: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  assignedToId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProductionPlanItemAvgOrderByAggregateInputSchema: z.ZodType<Prisma.ProductionPlanItemAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  productionPlanId: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  assignedToId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProductionPlanItemMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ProductionPlanItemMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  productionPlanId: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  assignedToId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProductionPlanItemMinOrderByAggregateInputSchema: z.ZodType<Prisma.ProductionPlanItemMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  productionPlanId: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  assignedToId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProductionPlanItemSumOrderByAggregateInputSchema: z.ZodType<Prisma.ProductionPlanItemSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  productionPlanId: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  assignedToId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumTaskTypeFilterSchema: z.ZodType<Prisma.EnumTaskTypeFilter> = z.object({
  equals: z.lazy(() => TaskTypeSchema).optional(),
  in: z.lazy(() => TaskTypeSchema).array().optional(),
  notIn: z.lazy(() => TaskTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => TaskTypeSchema),z.lazy(() => NestedEnumTaskTypeFilterSchema) ]).optional(),
}).strict();

export const ShiftScalarRelationFilterSchema: z.ZodType<Prisma.ShiftScalarRelationFilter> = z.object({
  is: z.lazy(() => ShiftWhereInputSchema).optional(),
  isNot: z.lazy(() => ShiftWhereInputSchema).optional()
}).strict();

export const ShiftTaskCountOrderByAggregateInputSchema: z.ZodType<Prisma.ShiftTaskCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  shiftId: z.lazy(() => SortOrderSchema).optional(),
  taskType: z.lazy(() => SortOrderSchema).optional(),
  startTime: z.lazy(() => SortOrderSchema).optional(),
  endTime: z.lazy(() => SortOrderSchema).optional(),
  duration: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ShiftTaskAvgOrderByAggregateInputSchema: z.ZodType<Prisma.ShiftTaskAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  shiftId: z.lazy(() => SortOrderSchema).optional(),
  duration: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ShiftTaskMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ShiftTaskMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  shiftId: z.lazy(() => SortOrderSchema).optional(),
  taskType: z.lazy(() => SortOrderSchema).optional(),
  startTime: z.lazy(() => SortOrderSchema).optional(),
  endTime: z.lazy(() => SortOrderSchema).optional(),
  duration: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ShiftTaskMinOrderByAggregateInputSchema: z.ZodType<Prisma.ShiftTaskMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  shiftId: z.lazy(() => SortOrderSchema).optional(),
  taskType: z.lazy(() => SortOrderSchema).optional(),
  startTime: z.lazy(() => SortOrderSchema).optional(),
  endTime: z.lazy(() => SortOrderSchema).optional(),
  duration: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ShiftTaskSumOrderByAggregateInputSchema: z.ZodType<Prisma.ShiftTaskSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  shiftId: z.lazy(() => SortOrderSchema).optional(),
  duration: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumTaskTypeWithAggregatesFilterSchema: z.ZodType<Prisma.EnumTaskTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => TaskTypeSchema).optional(),
  in: z.lazy(() => TaskTypeSchema).array().optional(),
  notIn: z.lazy(() => TaskTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => TaskTypeSchema),z.lazy(() => NestedEnumTaskTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumTaskTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumTaskTypeFilterSchema).optional()
}).strict();

export const EnumDayOfWeekFilterSchema: z.ZodType<Prisma.EnumDayOfWeekFilter> = z.object({
  equals: z.lazy(() => DayOfWeekSchema).optional(),
  in: z.lazy(() => DayOfWeekSchema).array().optional(),
  notIn: z.lazy(() => DayOfWeekSchema).array().optional(),
  not: z.union([ z.lazy(() => DayOfWeekSchema),z.lazy(() => NestedEnumDayOfWeekFilterSchema) ]).optional(),
}).strict();

export const AvailabilityCountOrderByAggregateInputSchema: z.ZodType<Prisma.AvailabilityCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  dayOfWeek: z.lazy(() => SortOrderSchema).optional(),
  startTime: z.lazy(() => SortOrderSchema).optional(),
  endTime: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AvailabilityAvgOrderByAggregateInputSchema: z.ZodType<Prisma.AvailabilityAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AvailabilityMaxOrderByAggregateInputSchema: z.ZodType<Prisma.AvailabilityMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  dayOfWeek: z.lazy(() => SortOrderSchema).optional(),
  startTime: z.lazy(() => SortOrderSchema).optional(),
  endTime: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AvailabilityMinOrderByAggregateInputSchema: z.ZodType<Prisma.AvailabilityMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  dayOfWeek: z.lazy(() => SortOrderSchema).optional(),
  startTime: z.lazy(() => SortOrderSchema).optional(),
  endTime: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AvailabilitySumOrderByAggregateInputSchema: z.ZodType<Prisma.AvailabilitySumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumDayOfWeekWithAggregatesFilterSchema: z.ZodType<Prisma.EnumDayOfWeekWithAggregatesFilter> = z.object({
  equals: z.lazy(() => DayOfWeekSchema).optional(),
  in: z.lazy(() => DayOfWeekSchema).array().optional(),
  notIn: z.lazy(() => DayOfWeekSchema).array().optional(),
  not: z.union([ z.lazy(() => DayOfWeekSchema),z.lazy(() => NestedEnumDayOfWeekWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumDayOfWeekFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumDayOfWeekFilterSchema).optional()
}).strict();

export const EnumConstraintTypeFilterSchema: z.ZodType<Prisma.EnumConstraintTypeFilter> = z.object({
  equals: z.lazy(() => ConstraintTypeSchema).optional(),
  in: z.lazy(() => ConstraintTypeSchema).array().optional(),
  notIn: z.lazy(() => ConstraintTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => ConstraintTypeSchema),z.lazy(() => NestedEnumConstraintTypeFilterSchema) ]).optional(),
}).strict();

export const SchedulingConstraintCountOrderByAggregateInputSchema: z.ZodType<Prisma.SchedulingConstraintCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  constraintsType: z.lazy(() => SortOrderSchema).optional(),
  startTime: z.lazy(() => SortOrderSchema).optional(),
  endTime: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SchedulingConstraintAvgOrderByAggregateInputSchema: z.ZodType<Prisma.SchedulingConstraintAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SchedulingConstraintMaxOrderByAggregateInputSchema: z.ZodType<Prisma.SchedulingConstraintMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  constraintsType: z.lazy(() => SortOrderSchema).optional(),
  startTime: z.lazy(() => SortOrderSchema).optional(),
  endTime: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SchedulingConstraintMinOrderByAggregateInputSchema: z.ZodType<Prisma.SchedulingConstraintMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  constraintsType: z.lazy(() => SortOrderSchema).optional(),
  startTime: z.lazy(() => SortOrderSchema).optional(),
  endTime: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SchedulingConstraintSumOrderByAggregateInputSchema: z.ZodType<Prisma.SchedulingConstraintSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumConstraintTypeWithAggregatesFilterSchema: z.ZodType<Prisma.EnumConstraintTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => ConstraintTypeSchema).optional(),
  in: z.lazy(() => ConstraintTypeSchema).array().optional(),
  notIn: z.lazy(() => ConstraintTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => ConstraintTypeSchema),z.lazy(() => NestedEnumConstraintTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumConstraintTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumConstraintTypeFilterSchema).optional()
}).strict();

export const InventoryItemScalarRelationFilterSchema: z.ZodType<Prisma.InventoryItemScalarRelationFilter> = z.object({
  is: z.lazy(() => InventoryItemWhereInputSchema).optional(),
  isNot: z.lazy(() => InventoryItemWhereInputSchema).optional()
}).strict();

export const RecipeNullableScalarRelationFilterSchema: z.ZodType<Prisma.RecipeNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => RecipeWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => RecipeWhereInputSchema).optional().nullable()
}).strict();

export const InventoryWithdrawalCountOrderByAggregateInputSchema: z.ZodType<Prisma.InventoryWithdrawalCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  inventoryItemId: z.lazy(() => SortOrderSchema).optional(),
  dateTime: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const InventoryWithdrawalAvgOrderByAggregateInputSchema: z.ZodType<Prisma.InventoryWithdrawalAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  inventoryItemId: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const InventoryWithdrawalMaxOrderByAggregateInputSchema: z.ZodType<Prisma.InventoryWithdrawalMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  inventoryItemId: z.lazy(() => SortOrderSchema).optional(),
  dateTime: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const InventoryWithdrawalMinOrderByAggregateInputSchema: z.ZodType<Prisma.InventoryWithdrawalMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  inventoryItemId: z.lazy(() => SortOrderSchema).optional(),
  dateTime: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const InventoryWithdrawalSumOrderByAggregateInputSchema: z.ZodType<Prisma.InventoryWithdrawalSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  inventoryItemId: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IngredientAllergenListRelationFilterSchema: z.ZodType<Prisma.IngredientAllergenListRelationFilter> = z.object({
  every: z.lazy(() => IngredientAllergenWhereInputSchema).optional(),
  some: z.lazy(() => IngredientAllergenWhereInputSchema).optional(),
  none: z.lazy(() => IngredientAllergenWhereInputSchema).optional()
}).strict();

export const IngredientAllergenOrderByRelationAggregateInputSchema: z.ZodType<Prisma.IngredientAllergenOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AllergenCountOrderByAggregateInputSchema: z.ZodType<Prisma.AllergenCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AllergenAvgOrderByAggregateInputSchema: z.ZodType<Prisma.AllergenAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AllergenMaxOrderByAggregateInputSchema: z.ZodType<Prisma.AllergenMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AllergenMinOrderByAggregateInputSchema: z.ZodType<Prisma.AllergenMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AllergenSumOrderByAggregateInputSchema: z.ZodType<Prisma.AllergenSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AllergenScalarRelationFilterSchema: z.ZodType<Prisma.AllergenScalarRelationFilter> = z.object({
  is: z.lazy(() => AllergenWhereInputSchema).optional(),
  isNot: z.lazy(() => AllergenWhereInputSchema).optional()
}).strict();

export const IngredientAllergenIngredientIdAllergenIdCompoundUniqueInputSchema: z.ZodType<Prisma.IngredientAllergenIngredientIdAllergenIdCompoundUniqueInput> = z.object({
  ingredientId: z.number(),
  allergenId: z.number()
}).strict();

export const IngredientAllergenCountOrderByAggregateInputSchema: z.ZodType<Prisma.IngredientAllergenCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  ingredientId: z.lazy(() => SortOrderSchema).optional(),
  allergenId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IngredientAllergenAvgOrderByAggregateInputSchema: z.ZodType<Prisma.IngredientAllergenAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  ingredientId: z.lazy(() => SortOrderSchema).optional(),
  allergenId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IngredientAllergenMaxOrderByAggregateInputSchema: z.ZodType<Prisma.IngredientAllergenMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  ingredientId: z.lazy(() => SortOrderSchema).optional(),
  allergenId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IngredientAllergenMinOrderByAggregateInputSchema: z.ZodType<Prisma.IngredientAllergenMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  ingredientId: z.lazy(() => SortOrderSchema).optional(),
  allergenId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IngredientAllergenSumOrderByAggregateInputSchema: z.ZodType<Prisma.IngredientAllergenSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  ingredientId: z.lazy(() => SortOrderSchema).optional(),
  allergenId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const NutritionalRecommendationCountOrderByAggregateInputSchema: z.ZodType<Prisma.NutritionalRecommendationCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  menuItemId: z.lazy(() => SortOrderSchema).optional(),
  recommendation: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const NutritionalRecommendationAvgOrderByAggregateInputSchema: z.ZodType<Prisma.NutritionalRecommendationAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  menuItemId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const NutritionalRecommendationMaxOrderByAggregateInputSchema: z.ZodType<Prisma.NutritionalRecommendationMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  menuItemId: z.lazy(() => SortOrderSchema).optional(),
  recommendation: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const NutritionalRecommendationMinOrderByAggregateInputSchema: z.ZodType<Prisma.NutritionalRecommendationMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  menuItemId: z.lazy(() => SortOrderSchema).optional(),
  recommendation: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const NutritionalRecommendationSumOrderByAggregateInputSchema: z.ZodType<Prisma.NutritionalRecommendationSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  menuItemId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EarlyAccessCountOrderByAggregateInputSchema: z.ZodType<Prisma.EarlyAccessCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  isEmailSent: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EarlyAccessAvgOrderByAggregateInputSchema: z.ZodType<Prisma.EarlyAccessAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EarlyAccessMaxOrderByAggregateInputSchema: z.ZodType<Prisma.EarlyAccessMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  isEmailSent: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EarlyAccessMinOrderByAggregateInputSchema: z.ZodType<Prisma.EarlyAccessMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  isEmailSent: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EarlyAccessSumOrderByAggregateInputSchema: z.ZodType<Prisma.EarlyAccessSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RestaurantListRelationFilterSchema: z.ZodType<Prisma.RestaurantListRelationFilter> = z.object({
  every: z.lazy(() => RestaurantWhereInputSchema).optional(),
  some: z.lazy(() => RestaurantWhereInputSchema).optional(),
  none: z.lazy(() => RestaurantWhereInputSchema).optional()
}).strict();

export const UserListRelationFilterSchema: z.ZodType<Prisma.UserListRelationFilter> = z.object({
  every: z.lazy(() => UserWhereInputSchema).optional(),
  some: z.lazy(() => UserWhereInputSchema).optional(),
  none: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const RestaurantOrderByRelationAggregateInputSchema: z.ZodType<Prisma.RestaurantOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserOrderByRelationAggregateInputSchema: z.ZodType<Prisma.UserOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrganizationCountOrderByAggregateInputSchema: z.ZodType<Prisma.OrganizationCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  imageUrl: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrganizationAvgOrderByAggregateInputSchema: z.ZodType<Prisma.OrganizationAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrganizationMaxOrderByAggregateInputSchema: z.ZodType<Prisma.OrganizationMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  imageUrl: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrganizationMinOrderByAggregateInputSchema: z.ZodType<Prisma.OrganizationMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  imageUrl: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrganizationSumOrderByAggregateInputSchema: z.ZodType<Prisma.OrganizationSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumInventoryTypeFilterSchema: z.ZodType<Prisma.EnumInventoryTypeFilter> = z.object({
  equals: z.lazy(() => InventoryTypeSchema).optional(),
  in: z.lazy(() => InventoryTypeSchema).array().optional(),
  notIn: z.lazy(() => InventoryTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => InventoryTypeSchema),z.lazy(() => NestedEnumInventoryTypeFilterSchema) ]).optional(),
}).strict();

export const InventoryItemListRelationFilterSchema: z.ZodType<Prisma.InventoryItemListRelationFilter> = z.object({
  every: z.lazy(() => InventoryItemWhereInputSchema).optional(),
  some: z.lazy(() => InventoryItemWhereInputSchema).optional(),
  none: z.lazy(() => InventoryItemWhereInputSchema).optional()
}).strict();

export const InventoryTransactionListRelationFilterSchema: z.ZodType<Prisma.InventoryTransactionListRelationFilter> = z.object({
  every: z.lazy(() => InventoryTransactionWhereInputSchema).optional(),
  some: z.lazy(() => InventoryTransactionWhereInputSchema).optional(),
  none: z.lazy(() => InventoryTransactionWhereInputSchema).optional()
}).strict();

export const StockCountListRelationFilterSchema: z.ZodType<Prisma.StockCountListRelationFilter> = z.object({
  every: z.lazy(() => StockCountWhereInputSchema).optional(),
  some: z.lazy(() => StockCountWhereInputSchema).optional(),
  none: z.lazy(() => StockCountWhereInputSchema).optional()
}).strict();

export const InventoryItemOrderByRelationAggregateInputSchema: z.ZodType<Prisma.InventoryItemOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const InventoryTransactionOrderByRelationAggregateInputSchema: z.ZodType<Prisma.InventoryTransactionOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const StockCountOrderByRelationAggregateInputSchema: z.ZodType<Prisma.StockCountOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const InventoryCountOrderByAggregateInputSchema: z.ZodType<Prisma.InventoryCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const InventoryAvgOrderByAggregateInputSchema: z.ZodType<Prisma.InventoryAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const InventoryMaxOrderByAggregateInputSchema: z.ZodType<Prisma.InventoryMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const InventoryMinOrderByAggregateInputSchema: z.ZodType<Prisma.InventoryMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const InventorySumOrderByAggregateInputSchema: z.ZodType<Prisma.InventorySumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumInventoryTypeWithAggregatesFilterSchema: z.ZodType<Prisma.EnumInventoryTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => InventoryTypeSchema).optional(),
  in: z.lazy(() => InventoryTypeSchema).array().optional(),
  notIn: z.lazy(() => InventoryTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => InventoryTypeSchema),z.lazy(() => NestedEnumInventoryTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumInventoryTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumInventoryTypeFilterSchema).optional()
}).strict();

export const OrganizationNullableScalarRelationFilterSchema: z.ZodType<Prisma.OrganizationNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => OrganizationWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => OrganizationWhereInputSchema).optional().nullable()
}).strict();

export const CookBookListRelationFilterSchema: z.ZodType<Prisma.CookBookListRelationFilter> = z.object({
  every: z.lazy(() => CookBookWhereInputSchema).optional(),
  some: z.lazy(() => CookBookWhereInputSchema).optional(),
  none: z.lazy(() => CookBookWhereInputSchema).optional()
}).strict();

export const InventoryNullableScalarRelationFilterSchema: z.ZodType<Prisma.InventoryNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => InventoryWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => InventoryWhereInputSchema).optional().nullable()
}).strict();

export const OrderListRelationFilterSchema: z.ZodType<Prisma.OrderListRelationFilter> = z.object({
  every: z.lazy(() => OrderWhereInputSchema).optional(),
  some: z.lazy(() => OrderWhereInputSchema).optional(),
  none: z.lazy(() => OrderWhereInputSchema).optional()
}).strict();

export const MenuListRelationFilterSchema: z.ZodType<Prisma.MenuListRelationFilter> = z.object({
  every: z.lazy(() => MenuWhereInputSchema).optional(),
  some: z.lazy(() => MenuWhereInputSchema).optional(),
  none: z.lazy(() => MenuWhereInputSchema).optional()
}).strict();

export const SalesTransactionsListRelationFilterSchema: z.ZodType<Prisma.SalesTransactionsListRelationFilter> = z.object({
  every: z.lazy(() => SalesTransactionsWhereInputSchema).optional(),
  some: z.lazy(() => SalesTransactionsWhereInputSchema).optional(),
  none: z.lazy(() => SalesTransactionsWhereInputSchema).optional()
}).strict();

export const LeftoverItemListRelationFilterSchema: z.ZodType<Prisma.LeftoverItemListRelationFilter> = z.object({
  every: z.lazy(() => LeftoverItemWhereInputSchema).optional(),
  some: z.lazy(() => LeftoverItemWhereInputSchema).optional(),
  none: z.lazy(() => LeftoverItemWhereInputSchema).optional()
}).strict();

export const WasteRecordListRelationFilterSchema: z.ZodType<Prisma.WasteRecordListRelationFilter> = z.object({
  every: z.lazy(() => WasteRecordWhereInputSchema).optional(),
  some: z.lazy(() => WasteRecordWhereInputSchema).optional(),
  none: z.lazy(() => WasteRecordWhereInputSchema).optional()
}).strict();

export const ProductionPlanListRelationFilterSchema: z.ZodType<Prisma.ProductionPlanListRelationFilter> = z.object({
  every: z.lazy(() => ProductionPlanWhereInputSchema).optional(),
  some: z.lazy(() => ProductionPlanWhereInputSchema).optional(),
  none: z.lazy(() => ProductionPlanWhereInputSchema).optional()
}).strict();

export const EquipmentListRelationFilterSchema: z.ZodType<Prisma.EquipmentListRelationFilter> = z.object({
  every: z.lazy(() => EquipmentWhereInputSchema).optional(),
  some: z.lazy(() => EquipmentWhereInputSchema).optional(),
  none: z.lazy(() => EquipmentWhereInputSchema).optional()
}).strict();

export const QualityChecklistListRelationFilterSchema: z.ZodType<Prisma.QualityChecklistListRelationFilter> = z.object({
  every: z.lazy(() => QualityChecklistWhereInputSchema).optional(),
  some: z.lazy(() => QualityChecklistWhereInputSchema).optional(),
  none: z.lazy(() => QualityChecklistWhereInputSchema).optional()
}).strict();

export const CustomerFeedbackListRelationFilterSchema: z.ZodType<Prisma.CustomerFeedbackListRelationFilter> = z.object({
  every: z.lazy(() => CustomerFeedbackWhereInputSchema).optional(),
  some: z.lazy(() => CustomerFeedbackWhereInputSchema).optional(),
  none: z.lazy(() => CustomerFeedbackWhereInputSchema).optional()
}).strict();

export const CookBookOrderByRelationAggregateInputSchema: z.ZodType<Prisma.CookBookOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrderOrderByRelationAggregateInputSchema: z.ZodType<Prisma.OrderOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MenuOrderByRelationAggregateInputSchema: z.ZodType<Prisma.MenuOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SalesTransactionsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.SalesTransactionsOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LeftoverItemOrderByRelationAggregateInputSchema: z.ZodType<Prisma.LeftoverItemOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const WasteRecordOrderByRelationAggregateInputSchema: z.ZodType<Prisma.WasteRecordOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProductionPlanOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ProductionPlanOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EquipmentOrderByRelationAggregateInputSchema: z.ZodType<Prisma.EquipmentOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const QualityChecklistOrderByRelationAggregateInputSchema: z.ZodType<Prisma.QualityChecklistOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CustomerFeedbackOrderByRelationAggregateInputSchema: z.ZodType<Prisma.CustomerFeedbackOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RestaurantCountOrderByAggregateInputSchema: z.ZodType<Prisma.RestaurantCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  imageUrl: z.lazy(() => SortOrderSchema).optional(),
  address: z.lazy(() => SortOrderSchema).optional(),
  city: z.lazy(() => SortOrderSchema).optional(),
  zipCode: z.lazy(() => SortOrderSchema).optional(),
  state: z.lazy(() => SortOrderSchema).optional(),
  owner: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  foodCost: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  isDeleted: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RestaurantAvgOrderByAggregateInputSchema: z.ZodType<Prisma.RestaurantAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  foodCost: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RestaurantMaxOrderByAggregateInputSchema: z.ZodType<Prisma.RestaurantMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  imageUrl: z.lazy(() => SortOrderSchema).optional(),
  address: z.lazy(() => SortOrderSchema).optional(),
  city: z.lazy(() => SortOrderSchema).optional(),
  zipCode: z.lazy(() => SortOrderSchema).optional(),
  state: z.lazy(() => SortOrderSchema).optional(),
  owner: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  foodCost: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  isDeleted: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RestaurantMinOrderByAggregateInputSchema: z.ZodType<Prisma.RestaurantMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  imageUrl: z.lazy(() => SortOrderSchema).optional(),
  address: z.lazy(() => SortOrderSchema).optional(),
  city: z.lazy(() => SortOrderSchema).optional(),
  zipCode: z.lazy(() => SortOrderSchema).optional(),
  state: z.lazy(() => SortOrderSchema).optional(),
  owner: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  foodCost: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  isDeleted: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RestaurantSumOrderByAggregateInputSchema: z.ZodType<Prisma.RestaurantSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  foodCost: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumUserRoleFilterSchema: z.ZodType<Prisma.EnumUserRoleFilter> = z.object({
  equals: z.lazy(() => UserRoleSchema).optional(),
  in: z.lazy(() => UserRoleSchema).array().optional(),
  notIn: z.lazy(() => UserRoleSchema).array().optional(),
  not: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => NestedEnumUserRoleFilterSchema) ]).optional(),
}).strict();

export const RestaurantNullableScalarRelationFilterSchema: z.ZodType<Prisma.RestaurantNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => RestaurantWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => RestaurantWhereInputSchema).optional().nullable()
}).strict();

export const ShiftListRelationFilterSchema: z.ZodType<Prisma.ShiftListRelationFilter> = z.object({
  every: z.lazy(() => ShiftWhereInputSchema).optional(),
  some: z.lazy(() => ShiftWhereInputSchema).optional(),
  none: z.lazy(() => ShiftWhereInputSchema).optional()
}).strict();

export const PrepItemListRelationFilterSchema: z.ZodType<Prisma.PrepItemListRelationFilter> = z.object({
  every: z.lazy(() => PrepItemWhereInputSchema).optional(),
  some: z.lazy(() => PrepItemWhereInputSchema).optional(),
  none: z.lazy(() => PrepItemWhereInputSchema).optional()
}).strict();

export const SessionListRelationFilterSchema: z.ZodType<Prisma.SessionListRelationFilter> = z.object({
  every: z.lazy(() => SessionWhereInputSchema).optional(),
  some: z.lazy(() => SessionWhereInputSchema).optional(),
  none: z.lazy(() => SessionWhereInputSchema).optional()
}).strict();

export const PasswordResetListRelationFilterSchema: z.ZodType<Prisma.PasswordResetListRelationFilter> = z.object({
  every: z.lazy(() => PasswordResetWhereInputSchema).optional(),
  some: z.lazy(() => PasswordResetWhereInputSchema).optional(),
  none: z.lazy(() => PasswordResetWhereInputSchema).optional()
}).strict();

export const AvailabilityListRelationFilterSchema: z.ZodType<Prisma.AvailabilityListRelationFilter> = z.object({
  every: z.lazy(() => AvailabilityWhereInputSchema).optional(),
  some: z.lazy(() => AvailabilityWhereInputSchema).optional(),
  none: z.lazy(() => AvailabilityWhereInputSchema).optional()
}).strict();

export const SchedulingConstraintListRelationFilterSchema: z.ZodType<Prisma.SchedulingConstraintListRelationFilter> = z.object({
  every: z.lazy(() => SchedulingConstraintWhereInputSchema).optional(),
  some: z.lazy(() => SchedulingConstraintWhereInputSchema).optional(),
  none: z.lazy(() => SchedulingConstraintWhereInputSchema).optional()
}).strict();

export const InventoryWithdrawalListRelationFilterSchema: z.ZodType<Prisma.InventoryWithdrawalListRelationFilter> = z.object({
  every: z.lazy(() => InventoryWithdrawalWhereInputSchema).optional(),
  some: z.lazy(() => InventoryWithdrawalWhereInputSchema).optional(),
  none: z.lazy(() => InventoryWithdrawalWhereInputSchema).optional()
}).strict();

export const RecipeVersionListRelationFilterSchema: z.ZodType<Prisma.RecipeVersionListRelationFilter> = z.object({
  every: z.lazy(() => RecipeVersionWhereInputSchema).optional(),
  some: z.lazy(() => RecipeVersionWhereInputSchema).optional(),
  none: z.lazy(() => RecipeVersionWhereInputSchema).optional()
}).strict();

export const ShiftOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ShiftOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PrepItemOrderByRelationAggregateInputSchema: z.ZodType<Prisma.PrepItemOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SessionOrderByRelationAggregateInputSchema: z.ZodType<Prisma.SessionOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PasswordResetOrderByRelationAggregateInputSchema: z.ZodType<Prisma.PasswordResetOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AvailabilityOrderByRelationAggregateInputSchema: z.ZodType<Prisma.AvailabilityOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SchedulingConstraintOrderByRelationAggregateInputSchema: z.ZodType<Prisma.SchedulingConstraintOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const InventoryWithdrawalOrderByRelationAggregateInputSchema: z.ZodType<Prisma.InventoryWithdrawalOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeVersionOrderByRelationAggregateInputSchema: z.ZodType<Prisma.RecipeVersionOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserCountOrderByAggregateInputSchema: z.ZodType<Prisma.UserCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  sub: z.lazy(() => SortOrderSchema).optional(),
  passwordHash: z.lazy(() => SortOrderSchema).optional(),
  firstName: z.lazy(() => SortOrderSchema).optional(),
  lastName: z.lazy(() => SortOrderSchema).optional(),
  profileImage: z.lazy(() => SortOrderSchema).optional(),
  verified: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserAvgOrderByAggregateInputSchema: z.ZodType<Prisma.UserAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  sub: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserMaxOrderByAggregateInputSchema: z.ZodType<Prisma.UserMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  sub: z.lazy(() => SortOrderSchema).optional(),
  passwordHash: z.lazy(() => SortOrderSchema).optional(),
  firstName: z.lazy(() => SortOrderSchema).optional(),
  lastName: z.lazy(() => SortOrderSchema).optional(),
  profileImage: z.lazy(() => SortOrderSchema).optional(),
  verified: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserMinOrderByAggregateInputSchema: z.ZodType<Prisma.UserMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  sub: z.lazy(() => SortOrderSchema).optional(),
  passwordHash: z.lazy(() => SortOrderSchema).optional(),
  firstName: z.lazy(() => SortOrderSchema).optional(),
  lastName: z.lazy(() => SortOrderSchema).optional(),
  profileImage: z.lazy(() => SortOrderSchema).optional(),
  verified: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserSumOrderByAggregateInputSchema: z.ZodType<Prisma.UserSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  sub: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumUserRoleWithAggregatesFilterSchema: z.ZodType<Prisma.EnumUserRoleWithAggregatesFilter> = z.object({
  equals: z.lazy(() => UserRoleSchema).optional(),
  in: z.lazy(() => UserRoleSchema).array().optional(),
  notIn: z.lazy(() => UserRoleSchema).array().optional(),
  not: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => NestedEnumUserRoleWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumUserRoleFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumUserRoleFilterSchema).optional()
}).strict();

export const SessionCountOrderByAggregateInputSchema: z.ZodType<Prisma.SessionCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SessionAvgOrderByAggregateInputSchema: z.ZodType<Prisma.SessionAvgOrderByAggregateInput> = z.object({
  userId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SessionMaxOrderByAggregateInputSchema: z.ZodType<Prisma.SessionMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SessionMinOrderByAggregateInputSchema: z.ZodType<Prisma.SessionMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SessionSumOrderByAggregateInputSchema: z.ZodType<Prisma.SessionSumOrderByAggregateInput> = z.object({
  userId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CookBookCountOrderByAggregateInputSchema: z.ZodType<Prisma.CookBookCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  imageUrl: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CookBookAvgOrderByAggregateInputSchema: z.ZodType<Prisma.CookBookAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CookBookMaxOrderByAggregateInputSchema: z.ZodType<Prisma.CookBookMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  imageUrl: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CookBookMinOrderByAggregateInputSchema: z.ZodType<Prisma.CookBookMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  imageUrl: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CookBookSumOrderByAggregateInputSchema: z.ZodType<Prisma.CookBookSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumSkillLevelFilterSchema: z.ZodType<Prisma.EnumSkillLevelFilter> = z.object({
  equals: z.lazy(() => SkillLevelSchema).optional(),
  in: z.lazy(() => SkillLevelSchema).array().optional(),
  notIn: z.lazy(() => SkillLevelSchema).array().optional(),
  not: z.union([ z.lazy(() => SkillLevelSchema),z.lazy(() => NestedEnumSkillLevelFilterSchema) ]).optional(),
}).strict();

export const EnumCategoryFilterSchema: z.ZodType<Prisma.EnumCategoryFilter> = z.object({
  equals: z.lazy(() => CategorySchema).optional(),
  in: z.lazy(() => CategorySchema).array().optional(),
  notIn: z.lazy(() => CategorySchema).array().optional(),
  not: z.union([ z.lazy(() => CategorySchema),z.lazy(() => NestedEnumCategoryFilterSchema) ]).optional(),
}).strict();

export const CookBookScalarRelationFilterSchema: z.ZodType<Prisma.CookBookScalarRelationFilter> = z.object({
  is: z.lazy(() => CookBookWhereInputSchema).optional(),
  isNot: z.lazy(() => CookBookWhereInputSchema).optional()
}).strict();

export const FoodCostHistoryListRelationFilterSchema: z.ZodType<Prisma.FoodCostHistoryListRelationFilter> = z.object({
  every: z.lazy(() => FoodCostHistoryWhereInputSchema).optional(),
  some: z.lazy(() => FoodCostHistoryWhereInputSchema).optional(),
  none: z.lazy(() => FoodCostHistoryWhereInputSchema).optional()
}).strict();

export const PrepHistoryListRelationFilterSchema: z.ZodType<Prisma.PrepHistoryListRelationFilter> = z.object({
  every: z.lazy(() => PrepHistoryWhereInputSchema).optional(),
  some: z.lazy(() => PrepHistoryWhereInputSchema).optional(),
  none: z.lazy(() => PrepHistoryWhereInputSchema).optional()
}).strict();

export const PrepBoardListRelationFilterSchema: z.ZodType<Prisma.PrepBoardListRelationFilter> = z.object({
  every: z.lazy(() => PrepBoardWhereInputSchema).optional(),
  some: z.lazy(() => PrepBoardWhereInputSchema).optional(),
  none: z.lazy(() => PrepBoardWhereInputSchema).optional()
}).strict();

export const MenuItemRecipeListRelationFilterSchema: z.ZodType<Prisma.MenuItemRecipeListRelationFilter> = z.object({
  every: z.lazy(() => MenuItemRecipeWhereInputSchema).optional(),
  some: z.lazy(() => MenuItemRecipeWhereInputSchema).optional(),
  none: z.lazy(() => MenuItemRecipeWhereInputSchema).optional()
}).strict();

export const RecipeTagListRelationFilterSchema: z.ZodType<Prisma.RecipeTagListRelationFilter> = z.object({
  every: z.lazy(() => RecipeTagWhereInputSchema).optional(),
  some: z.lazy(() => RecipeTagWhereInputSchema).optional(),
  none: z.lazy(() => RecipeTagWhereInputSchema).optional()
}).strict();

export const DietaryRestrictionListRelationFilterSchema: z.ZodType<Prisma.DietaryRestrictionListRelationFilter> = z.object({
  every: z.lazy(() => DietaryRestrictionWhereInputSchema).optional(),
  some: z.lazy(() => DietaryRestrictionWhereInputSchema).optional(),
  none: z.lazy(() => DietaryRestrictionWhereInputSchema).optional()
}).strict();

export const RecipeTemperatureListRelationFilterSchema: z.ZodType<Prisma.RecipeTemperatureListRelationFilter> = z.object({
  every: z.lazy(() => RecipeTemperatureWhereInputSchema).optional(),
  some: z.lazy(() => RecipeTemperatureWhereInputSchema).optional(),
  none: z.lazy(() => RecipeTemperatureWhereInputSchema).optional()
}).strict();

export const RecipeYieldListRelationFilterSchema: z.ZodType<Prisma.RecipeYieldListRelationFilter> = z.object({
  every: z.lazy(() => RecipeYieldWhereInputSchema).optional(),
  some: z.lazy(() => RecipeYieldWhereInputSchema).optional(),
  none: z.lazy(() => RecipeYieldWhereInputSchema).optional()
}).strict();

export const RecipeLaborCostListRelationFilterSchema: z.ZodType<Prisma.RecipeLaborCostListRelationFilter> = z.object({
  every: z.lazy(() => RecipeLaborCostWhereInputSchema).optional(),
  some: z.lazy(() => RecipeLaborCostWhereInputSchema).optional(),
  none: z.lazy(() => RecipeLaborCostWhereInputSchema).optional()
}).strict();

export const RecipeNutritionNullableScalarRelationFilterSchema: z.ZodType<Prisma.RecipeNutritionNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => RecipeNutritionWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => RecipeNutritionWhereInputSchema).optional().nullable()
}).strict();

export const RecipeCriticalPointListRelationFilterSchema: z.ZodType<Prisma.RecipeCriticalPointListRelationFilter> = z.object({
  every: z.lazy(() => RecipeCriticalPointWhereInputSchema).optional(),
  some: z.lazy(() => RecipeCriticalPointWhereInputSchema).optional(),
  none: z.lazy(() => RecipeCriticalPointWhereInputSchema).optional()
}).strict();

export const RecipeStorageNullableScalarRelationFilterSchema: z.ZodType<Prisma.RecipeStorageNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => RecipeStorageWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => RecipeStorageWhereInputSchema).optional().nullable()
}).strict();

export const RecipePhotoListRelationFilterSchema: z.ZodType<Prisma.RecipePhotoListRelationFilter> = z.object({
  every: z.lazy(() => RecipePhotoWhereInputSchema).optional(),
  some: z.lazy(() => RecipePhotoWhereInputSchema).optional(),
  none: z.lazy(() => RecipePhotoWhereInputSchema).optional()
}).strict();

export const RecipeStatsNullableScalarRelationFilterSchema: z.ZodType<Prisma.RecipeStatsNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => RecipeStatsWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => RecipeStatsWhereInputSchema).optional().nullable()
}).strict();

export const FoodCostHistoryOrderByRelationAggregateInputSchema: z.ZodType<Prisma.FoodCostHistoryOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PrepHistoryOrderByRelationAggregateInputSchema: z.ZodType<Prisma.PrepHistoryOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PrepBoardOrderByRelationAggregateInputSchema: z.ZodType<Prisma.PrepBoardOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MenuItemRecipeOrderByRelationAggregateInputSchema: z.ZodType<Prisma.MenuItemRecipeOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeTagOrderByRelationAggregateInputSchema: z.ZodType<Prisma.RecipeTagOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DietaryRestrictionOrderByRelationAggregateInputSchema: z.ZodType<Prisma.DietaryRestrictionOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeTemperatureOrderByRelationAggregateInputSchema: z.ZodType<Prisma.RecipeTemperatureOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeYieldOrderByRelationAggregateInputSchema: z.ZodType<Prisma.RecipeYieldOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeLaborCostOrderByRelationAggregateInputSchema: z.ZodType<Prisma.RecipeLaborCostOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeCriticalPointOrderByRelationAggregateInputSchema: z.ZodType<Prisma.RecipeCriticalPointOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipePhotoOrderByRelationAggregateInputSchema: z.ZodType<Prisma.RecipePhotoOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeCountOrderByAggregateInputSchema: z.ZodType<Prisma.RecipeCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  imageUrls: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  servings: z.lazy(() => SortOrderSchema).optional(),
  cookTime: z.lazy(() => SortOrderSchema).optional(),
  prepTime: z.lazy(() => SortOrderSchema).optional(),
  frequency: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  cookBookId: z.lazy(() => SortOrderSchema).optional(),
  foodCost: z.lazy(() => SortOrderSchema).optional(),
  isDeleted: z.lazy(() => SortOrderSchema).optional(),
  isPublished: z.lazy(() => SortOrderSchema).optional(),
  publishedAt: z.lazy(() => SortOrderSchema).optional(),
  language: z.lazy(() => SortOrderSchema).optional(),
  skillLevel: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeAvgOrderByAggregateInputSchema: z.ZodType<Prisma.RecipeAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  servings: z.lazy(() => SortOrderSchema).optional(),
  cookTime: z.lazy(() => SortOrderSchema).optional(),
  prepTime: z.lazy(() => SortOrderSchema).optional(),
  frequency: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  cookBookId: z.lazy(() => SortOrderSchema).optional(),
  foodCost: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeMaxOrderByAggregateInputSchema: z.ZodType<Prisma.RecipeMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  servings: z.lazy(() => SortOrderSchema).optional(),
  cookTime: z.lazy(() => SortOrderSchema).optional(),
  prepTime: z.lazy(() => SortOrderSchema).optional(),
  frequency: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  cookBookId: z.lazy(() => SortOrderSchema).optional(),
  foodCost: z.lazy(() => SortOrderSchema).optional(),
  isDeleted: z.lazy(() => SortOrderSchema).optional(),
  isPublished: z.lazy(() => SortOrderSchema).optional(),
  publishedAt: z.lazy(() => SortOrderSchema).optional(),
  language: z.lazy(() => SortOrderSchema).optional(),
  skillLevel: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeMinOrderByAggregateInputSchema: z.ZodType<Prisma.RecipeMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  servings: z.lazy(() => SortOrderSchema).optional(),
  cookTime: z.lazy(() => SortOrderSchema).optional(),
  prepTime: z.lazy(() => SortOrderSchema).optional(),
  frequency: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  cookBookId: z.lazy(() => SortOrderSchema).optional(),
  foodCost: z.lazy(() => SortOrderSchema).optional(),
  isDeleted: z.lazy(() => SortOrderSchema).optional(),
  isPublished: z.lazy(() => SortOrderSchema).optional(),
  publishedAt: z.lazy(() => SortOrderSchema).optional(),
  language: z.lazy(() => SortOrderSchema).optional(),
  skillLevel: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeSumOrderByAggregateInputSchema: z.ZodType<Prisma.RecipeSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  servings: z.lazy(() => SortOrderSchema).optional(),
  cookTime: z.lazy(() => SortOrderSchema).optional(),
  prepTime: z.lazy(() => SortOrderSchema).optional(),
  frequency: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  cookBookId: z.lazy(() => SortOrderSchema).optional(),
  foodCost: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumSkillLevelWithAggregatesFilterSchema: z.ZodType<Prisma.EnumSkillLevelWithAggregatesFilter> = z.object({
  equals: z.lazy(() => SkillLevelSchema).optional(),
  in: z.lazy(() => SkillLevelSchema).array().optional(),
  notIn: z.lazy(() => SkillLevelSchema).array().optional(),
  not: z.union([ z.lazy(() => SkillLevelSchema),z.lazy(() => NestedEnumSkillLevelWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumSkillLevelFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumSkillLevelFilterSchema).optional()
}).strict();

export const EnumCategoryWithAggregatesFilterSchema: z.ZodType<Prisma.EnumCategoryWithAggregatesFilter> = z.object({
  equals: z.lazy(() => CategorySchema).optional(),
  in: z.lazy(() => CategorySchema).array().optional(),
  notIn: z.lazy(() => CategorySchema).array().optional(),
  not: z.union([ z.lazy(() => CategorySchema),z.lazy(() => NestedEnumCategoryWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumCategoryFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumCategoryFilterSchema).optional()
}).strict();

export const EnumNutritionSourceNullableFilterSchema: z.ZodType<Prisma.EnumNutritionSourceNullableFilter> = z.object({
  equals: z.lazy(() => NutritionSourceSchema).optional().nullable(),
  in: z.lazy(() => NutritionSourceSchema).array().optional().nullable(),
  notIn: z.lazy(() => NutritionSourceSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => NutritionSourceSchema),z.lazy(() => NestedEnumNutritionSourceNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const OrderItemListRelationFilterSchema: z.ZodType<Prisma.OrderItemListRelationFilter> = z.object({
  every: z.lazy(() => OrderItemWhereInputSchema).optional(),
  some: z.lazy(() => OrderItemWhereInputSchema).optional(),
  none: z.lazy(() => OrderItemWhereInputSchema).optional()
}).strict();

export const VendorListRelationFilterSchema: z.ZodType<Prisma.VendorListRelationFilter> = z.object({
  every: z.lazy(() => VendorWhereInputSchema).optional(),
  some: z.lazy(() => VendorWhereInputSchema).optional(),
  none: z.lazy(() => VendorWhereInputSchema).optional()
}).strict();

export const SupplierPriceHistoryListRelationFilterSchema: z.ZodType<Prisma.SupplierPriceHistoryListRelationFilter> = z.object({
  every: z.lazy(() => SupplierPriceHistoryWhereInputSchema).optional(),
  some: z.lazy(() => SupplierPriceHistoryWhereInputSchema).optional(),
  none: z.lazy(() => SupplierPriceHistoryWhereInputSchema).optional()
}).strict();

export const OrderItemOrderByRelationAggregateInputSchema: z.ZodType<Prisma.OrderItemOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const VendorOrderByRelationAggregateInputSchema: z.ZodType<Prisma.VendorOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SupplierPriceHistoryOrderByRelationAggregateInputSchema: z.ZodType<Prisma.SupplierPriceHistoryOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IngredientCountOrderByAggregateInputSchema: z.ZodType<Prisma.IngredientCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  density: z.lazy(() => SortOrderSchema).optional(),
  dietaryRestrictionId: z.lazy(() => SortOrderSchema).optional(),
  calories: z.lazy(() => SortOrderSchema).optional(),
  protein: z.lazy(() => SortOrderSchema).optional(),
  carbohydrates: z.lazy(() => SortOrderSchema).optional(),
  fat: z.lazy(() => SortOrderSchema).optional(),
  fiber: z.lazy(() => SortOrderSchema).optional(),
  sugar: z.lazy(() => SortOrderSchema).optional(),
  sodium: z.lazy(() => SortOrderSchema).optional(),
  usdaFoodId: z.lazy(() => SortOrderSchema).optional(),
  nutritionSource: z.lazy(() => SortOrderSchema).optional(),
  nutritionUpdatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IngredientAvgOrderByAggregateInputSchema: z.ZodType<Prisma.IngredientAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  density: z.lazy(() => SortOrderSchema).optional(),
  dietaryRestrictionId: z.lazy(() => SortOrderSchema).optional(),
  calories: z.lazy(() => SortOrderSchema).optional(),
  protein: z.lazy(() => SortOrderSchema).optional(),
  carbohydrates: z.lazy(() => SortOrderSchema).optional(),
  fat: z.lazy(() => SortOrderSchema).optional(),
  fiber: z.lazy(() => SortOrderSchema).optional(),
  sugar: z.lazy(() => SortOrderSchema).optional(),
  sodium: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IngredientMaxOrderByAggregateInputSchema: z.ZodType<Prisma.IngredientMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  density: z.lazy(() => SortOrderSchema).optional(),
  dietaryRestrictionId: z.lazy(() => SortOrderSchema).optional(),
  calories: z.lazy(() => SortOrderSchema).optional(),
  protein: z.lazy(() => SortOrderSchema).optional(),
  carbohydrates: z.lazy(() => SortOrderSchema).optional(),
  fat: z.lazy(() => SortOrderSchema).optional(),
  fiber: z.lazy(() => SortOrderSchema).optional(),
  sugar: z.lazy(() => SortOrderSchema).optional(),
  sodium: z.lazy(() => SortOrderSchema).optional(),
  usdaFoodId: z.lazy(() => SortOrderSchema).optional(),
  nutritionSource: z.lazy(() => SortOrderSchema).optional(),
  nutritionUpdatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IngredientMinOrderByAggregateInputSchema: z.ZodType<Prisma.IngredientMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  category: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  density: z.lazy(() => SortOrderSchema).optional(),
  dietaryRestrictionId: z.lazy(() => SortOrderSchema).optional(),
  calories: z.lazy(() => SortOrderSchema).optional(),
  protein: z.lazy(() => SortOrderSchema).optional(),
  carbohydrates: z.lazy(() => SortOrderSchema).optional(),
  fat: z.lazy(() => SortOrderSchema).optional(),
  fiber: z.lazy(() => SortOrderSchema).optional(),
  sugar: z.lazy(() => SortOrderSchema).optional(),
  sodium: z.lazy(() => SortOrderSchema).optional(),
  usdaFoodId: z.lazy(() => SortOrderSchema).optional(),
  nutritionSource: z.lazy(() => SortOrderSchema).optional(),
  nutritionUpdatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IngredientSumOrderByAggregateInputSchema: z.ZodType<Prisma.IngredientSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  density: z.lazy(() => SortOrderSchema).optional(),
  dietaryRestrictionId: z.lazy(() => SortOrderSchema).optional(),
  calories: z.lazy(() => SortOrderSchema).optional(),
  protein: z.lazy(() => SortOrderSchema).optional(),
  carbohydrates: z.lazy(() => SortOrderSchema).optional(),
  fat: z.lazy(() => SortOrderSchema).optional(),
  fiber: z.lazy(() => SortOrderSchema).optional(),
  sugar: z.lazy(() => SortOrderSchema).optional(),
  sodium: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumNutritionSourceNullableWithAggregatesFilterSchema: z.ZodType<Prisma.EnumNutritionSourceNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => NutritionSourceSchema).optional().nullable(),
  in: z.lazy(() => NutritionSourceSchema).array().optional().nullable(),
  notIn: z.lazy(() => NutritionSourceSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => NutritionSourceSchema),z.lazy(() => NestedEnumNutritionSourceNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumNutritionSourceNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumNutritionSourceNullableFilterSchema).optional()
}).strict();

export const IntNullableListFilterSchema: z.ZodType<Prisma.IntNullableListFilter> = z.object({
  equals: z.number().array().optional().nullable(),
  has: z.number().optional().nullable(),
  hasEvery: z.number().array().optional(),
  hasSome: z.number().array().optional(),
  isEmpty: z.boolean().optional()
}).strict();

export const RecipeVersionNullableScalarRelationFilterSchema: z.ZodType<Prisma.RecipeVersionNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => RecipeVersionWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => RecipeVersionWhereInputSchema).optional().nullable()
}).strict();

export const RecipeIngredientUnique_ingredient_per_versionCompoundUniqueInputSchema: z.ZodType<Prisma.RecipeIngredientUnique_ingredient_per_versionCompoundUniqueInput> = z.object({
  recipeId: z.number(),
  ingredientId: z.number(),
  recipeVersionId: z.number()
}).strict();

export const RecipeIngredientCountOrderByAggregateInputSchema: z.ZodType<Prisma.RecipeIngredientCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  ingredientId: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  processingInstructions: z.lazy(() => SortOrderSchema).optional(),
  substituteIngredients: z.lazy(() => SortOrderSchema).optional(),
  isOptional: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional(),
  cost: z.lazy(() => SortOrderSchema).optional(),
  density: z.lazy(() => SortOrderSchema).optional(),
  yield: z.lazy(() => SortOrderSchema).optional(),
  joinAt: z.lazy(() => SortOrderSchema).optional(),
  recipeVersionId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeIngredientAvgOrderByAggregateInputSchema: z.ZodType<Prisma.RecipeIngredientAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  ingredientId: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  substituteIngredients: z.lazy(() => SortOrderSchema).optional(),
  cost: z.lazy(() => SortOrderSchema).optional(),
  density: z.lazy(() => SortOrderSchema).optional(),
  yield: z.lazy(() => SortOrderSchema).optional(),
  recipeVersionId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeIngredientMaxOrderByAggregateInputSchema: z.ZodType<Prisma.RecipeIngredientMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  ingredientId: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  processingInstructions: z.lazy(() => SortOrderSchema).optional(),
  isOptional: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional(),
  cost: z.lazy(() => SortOrderSchema).optional(),
  density: z.lazy(() => SortOrderSchema).optional(),
  yield: z.lazy(() => SortOrderSchema).optional(),
  joinAt: z.lazy(() => SortOrderSchema).optional(),
  recipeVersionId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeIngredientMinOrderByAggregateInputSchema: z.ZodType<Prisma.RecipeIngredientMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  ingredientId: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  processingInstructions: z.lazy(() => SortOrderSchema).optional(),
  isOptional: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional(),
  cost: z.lazy(() => SortOrderSchema).optional(),
  density: z.lazy(() => SortOrderSchema).optional(),
  yield: z.lazy(() => SortOrderSchema).optional(),
  joinAt: z.lazy(() => SortOrderSchema).optional(),
  recipeVersionId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeIngredientSumOrderByAggregateInputSchema: z.ZodType<Prisma.RecipeIngredientSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  ingredientId: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  substituteIngredients: z.lazy(() => SortOrderSchema).optional(),
  cost: z.lazy(() => SortOrderSchema).optional(),
  density: z.lazy(() => SortOrderSchema).optional(),
  yield: z.lazy(() => SortOrderSchema).optional(),
  recipeVersionId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeInstructionRecipeIdStepNumberRecipeVersionIdCompoundUniqueInputSchema: z.ZodType<Prisma.RecipeInstructionRecipeIdStepNumberRecipeVersionIdCompoundUniqueInput> = z.object({
  recipeId: z.number(),
  stepNumber: z.number(),
  recipeVersionId: z.number()
}).strict();

export const RecipeInstructionCountOrderByAggregateInputSchema: z.ZodType<Prisma.RecipeInstructionCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  stepNumber: z.lazy(() => SortOrderSchema).optional(),
  instruction: z.lazy(() => SortOrderSchema).optional(),
  imageUrl: z.lazy(() => SortOrderSchema).optional(),
  recipeVersionId: z.lazy(() => SortOrderSchema).optional(),
  timeInMinutes: z.lazy(() => SortOrderSchema).optional(),
  temperature: z.lazy(() => SortOrderSchema).optional(),
  temperatureUnit: z.lazy(() => SortOrderSchema).optional(),
  isCritical: z.lazy(() => SortOrderSchema).optional(),
  techniqueTips: z.lazy(() => SortOrderSchema).optional(),
  warningNotes: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeInstructionAvgOrderByAggregateInputSchema: z.ZodType<Prisma.RecipeInstructionAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  stepNumber: z.lazy(() => SortOrderSchema).optional(),
  recipeVersionId: z.lazy(() => SortOrderSchema).optional(),
  timeInMinutes: z.lazy(() => SortOrderSchema).optional(),
  temperature: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeInstructionMaxOrderByAggregateInputSchema: z.ZodType<Prisma.RecipeInstructionMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  stepNumber: z.lazy(() => SortOrderSchema).optional(),
  instruction: z.lazy(() => SortOrderSchema).optional(),
  imageUrl: z.lazy(() => SortOrderSchema).optional(),
  recipeVersionId: z.lazy(() => SortOrderSchema).optional(),
  timeInMinutes: z.lazy(() => SortOrderSchema).optional(),
  temperature: z.lazy(() => SortOrderSchema).optional(),
  temperatureUnit: z.lazy(() => SortOrderSchema).optional(),
  isCritical: z.lazy(() => SortOrderSchema).optional(),
  techniqueTips: z.lazy(() => SortOrderSchema).optional(),
  warningNotes: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeInstructionMinOrderByAggregateInputSchema: z.ZodType<Prisma.RecipeInstructionMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  stepNumber: z.lazy(() => SortOrderSchema).optional(),
  instruction: z.lazy(() => SortOrderSchema).optional(),
  imageUrl: z.lazy(() => SortOrderSchema).optional(),
  recipeVersionId: z.lazy(() => SortOrderSchema).optional(),
  timeInMinutes: z.lazy(() => SortOrderSchema).optional(),
  temperature: z.lazy(() => SortOrderSchema).optional(),
  temperatureUnit: z.lazy(() => SortOrderSchema).optional(),
  isCritical: z.lazy(() => SortOrderSchema).optional(),
  techniqueTips: z.lazy(() => SortOrderSchema).optional(),
  warningNotes: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeInstructionSumOrderByAggregateInputSchema: z.ZodType<Prisma.RecipeInstructionSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  stepNumber: z.lazy(() => SortOrderSchema).optional(),
  recipeVersionId: z.lazy(() => SortOrderSchema).optional(),
  timeInMinutes: z.lazy(() => SortOrderSchema).optional(),
  temperature: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const InventoryScalarRelationFilterSchema: z.ZodType<Prisma.InventoryScalarRelationFilter> = z.object({
  is: z.lazy(() => InventoryWhereInputSchema).optional(),
  isNot: z.lazy(() => InventoryWhereInputSchema).optional()
}).strict();

export const StockCountItemListRelationFilterSchema: z.ZodType<Prisma.StockCountItemListRelationFilter> = z.object({
  every: z.lazy(() => StockCountItemWhereInputSchema).optional(),
  some: z.lazy(() => StockCountItemWhereInputSchema).optional(),
  none: z.lazy(() => StockCountItemWhereInputSchema).optional()
}).strict();

export const StockCountItemOrderByRelationAggregateInputSchema: z.ZodType<Prisma.StockCountItemOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const InventoryItemInventoryIdIngredientIdCompoundUniqueInputSchema: z.ZodType<Prisma.InventoryItemInventoryIdIngredientIdCompoundUniqueInput> = z.object({
  inventoryId: z.number(),
  ingredientId: z.number()
}).strict();

export const InventoryItemCountOrderByAggregateInputSchema: z.ZodType<Prisma.InventoryItemCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  inventoryId: z.lazy(() => SortOrderSchema).optional(),
  ingredientId: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  minQuantity: z.lazy(() => SortOrderSchema).optional(),
  restockThreshold: z.lazy(() => SortOrderSchema).optional(),
  lastCountDate: z.lazy(() => SortOrderSchema).optional(),
  lastOrderDate: z.lazy(() => SortOrderSchema).optional(),
  lastUpdatedById: z.lazy(() => SortOrderSchema).optional(),
  lastUpdated: z.lazy(() => SortOrderSchema).optional(),
  par: z.lazy(() => SortOrderSchema).optional(),
  reorderPoint: z.lazy(() => SortOrderSchema).optional(),
  maxQuantity: z.lazy(() => SortOrderSchema).optional(),
  location: z.lazy(() => SortOrderSchema).optional(),
  barcode: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional(),
  currentPrice: z.lazy(() => SortOrderSchema).optional(),
  averageCost: z.lazy(() => SortOrderSchema).optional(),
  lastPurchasePrice: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const InventoryItemAvgOrderByAggregateInputSchema: z.ZodType<Prisma.InventoryItemAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  inventoryId: z.lazy(() => SortOrderSchema).optional(),
  ingredientId: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  minQuantity: z.lazy(() => SortOrderSchema).optional(),
  restockThreshold: z.lazy(() => SortOrderSchema).optional(),
  lastUpdatedById: z.lazy(() => SortOrderSchema).optional(),
  par: z.lazy(() => SortOrderSchema).optional(),
  reorderPoint: z.lazy(() => SortOrderSchema).optional(),
  maxQuantity: z.lazy(() => SortOrderSchema).optional(),
  currentPrice: z.lazy(() => SortOrderSchema).optional(),
  averageCost: z.lazy(() => SortOrderSchema).optional(),
  lastPurchasePrice: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const InventoryItemMaxOrderByAggregateInputSchema: z.ZodType<Prisma.InventoryItemMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  inventoryId: z.lazy(() => SortOrderSchema).optional(),
  ingredientId: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  minQuantity: z.lazy(() => SortOrderSchema).optional(),
  restockThreshold: z.lazy(() => SortOrderSchema).optional(),
  lastCountDate: z.lazy(() => SortOrderSchema).optional(),
  lastOrderDate: z.lazy(() => SortOrderSchema).optional(),
  lastUpdatedById: z.lazy(() => SortOrderSchema).optional(),
  lastUpdated: z.lazy(() => SortOrderSchema).optional(),
  par: z.lazy(() => SortOrderSchema).optional(),
  reorderPoint: z.lazy(() => SortOrderSchema).optional(),
  maxQuantity: z.lazy(() => SortOrderSchema).optional(),
  location: z.lazy(() => SortOrderSchema).optional(),
  barcode: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional(),
  currentPrice: z.lazy(() => SortOrderSchema).optional(),
  averageCost: z.lazy(() => SortOrderSchema).optional(),
  lastPurchasePrice: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const InventoryItemMinOrderByAggregateInputSchema: z.ZodType<Prisma.InventoryItemMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  inventoryId: z.lazy(() => SortOrderSchema).optional(),
  ingredientId: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  minQuantity: z.lazy(() => SortOrderSchema).optional(),
  restockThreshold: z.lazy(() => SortOrderSchema).optional(),
  lastCountDate: z.lazy(() => SortOrderSchema).optional(),
  lastOrderDate: z.lazy(() => SortOrderSchema).optional(),
  lastUpdatedById: z.lazy(() => SortOrderSchema).optional(),
  lastUpdated: z.lazy(() => SortOrderSchema).optional(),
  par: z.lazy(() => SortOrderSchema).optional(),
  reorderPoint: z.lazy(() => SortOrderSchema).optional(),
  maxQuantity: z.lazy(() => SortOrderSchema).optional(),
  location: z.lazy(() => SortOrderSchema).optional(),
  barcode: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional(),
  currentPrice: z.lazy(() => SortOrderSchema).optional(),
  averageCost: z.lazy(() => SortOrderSchema).optional(),
  lastPurchasePrice: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const InventoryItemSumOrderByAggregateInputSchema: z.ZodType<Prisma.InventoryItemSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  inventoryId: z.lazy(() => SortOrderSchema).optional(),
  ingredientId: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  minQuantity: z.lazy(() => SortOrderSchema).optional(),
  restockThreshold: z.lazy(() => SortOrderSchema).optional(),
  lastUpdatedById: z.lazy(() => SortOrderSchema).optional(),
  par: z.lazy(() => SortOrderSchema).optional(),
  reorderPoint: z.lazy(() => SortOrderSchema).optional(),
  maxQuantity: z.lazy(() => SortOrderSchema).optional(),
  currentPrice: z.lazy(() => SortOrderSchema).optional(),
  averageCost: z.lazy(() => SortOrderSchema).optional(),
  lastPurchasePrice: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumTransactionTypeFilterSchema: z.ZodType<Prisma.EnumTransactionTypeFilter> = z.object({
  equals: z.lazy(() => TransactionTypeSchema).optional(),
  in: z.lazy(() => TransactionTypeSchema).array().optional(),
  notIn: z.lazy(() => TransactionTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => TransactionTypeSchema),z.lazy(() => NestedEnumTransactionTypeFilterSchema) ]).optional(),
}).strict();

export const InventoryTransactionCountOrderByAggregateInputSchema: z.ZodType<Prisma.InventoryTransactionCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  inventoryId: z.lazy(() => SortOrderSchema).optional(),
  itemId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  previousQty: z.lazy(() => SortOrderSchema).optional(),
  newQty: z.lazy(() => SortOrderSchema).optional(),
  cost: z.lazy(() => SortOrderSchema).optional(),
  reference: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const InventoryTransactionAvgOrderByAggregateInputSchema: z.ZodType<Prisma.InventoryTransactionAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  inventoryId: z.lazy(() => SortOrderSchema).optional(),
  itemId: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  previousQty: z.lazy(() => SortOrderSchema).optional(),
  newQty: z.lazy(() => SortOrderSchema).optional(),
  cost: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const InventoryTransactionMaxOrderByAggregateInputSchema: z.ZodType<Prisma.InventoryTransactionMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  inventoryId: z.lazy(() => SortOrderSchema).optional(),
  itemId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  previousQty: z.lazy(() => SortOrderSchema).optional(),
  newQty: z.lazy(() => SortOrderSchema).optional(),
  cost: z.lazy(() => SortOrderSchema).optional(),
  reference: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const InventoryTransactionMinOrderByAggregateInputSchema: z.ZodType<Prisma.InventoryTransactionMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  inventoryId: z.lazy(() => SortOrderSchema).optional(),
  itemId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  previousQty: z.lazy(() => SortOrderSchema).optional(),
  newQty: z.lazy(() => SortOrderSchema).optional(),
  cost: z.lazy(() => SortOrderSchema).optional(),
  reference: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const InventoryTransactionSumOrderByAggregateInputSchema: z.ZodType<Prisma.InventoryTransactionSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  inventoryId: z.lazy(() => SortOrderSchema).optional(),
  itemId: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  previousQty: z.lazy(() => SortOrderSchema).optional(),
  newQty: z.lazy(() => SortOrderSchema).optional(),
  cost: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumTransactionTypeWithAggregatesFilterSchema: z.ZodType<Prisma.EnumTransactionTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => TransactionTypeSchema).optional(),
  in: z.lazy(() => TransactionTypeSchema).array().optional(),
  notIn: z.lazy(() => TransactionTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => TransactionTypeSchema),z.lazy(() => NestedEnumTransactionTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumTransactionTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumTransactionTypeFilterSchema).optional()
}).strict();

export const EnumCountStatusFilterSchema: z.ZodType<Prisma.EnumCountStatusFilter> = z.object({
  equals: z.lazy(() => CountStatusSchema).optional(),
  in: z.lazy(() => CountStatusSchema).array().optional(),
  notIn: z.lazy(() => CountStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => CountStatusSchema),z.lazy(() => NestedEnumCountStatusFilterSchema) ]).optional(),
}).strict();

export const StockCountCountOrderByAggregateInputSchema: z.ZodType<Prisma.StockCountCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  inventoryId: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  startedAt: z.lazy(() => SortOrderSchema).optional(),
  completedAt: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const StockCountAvgOrderByAggregateInputSchema: z.ZodType<Prisma.StockCountAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  inventoryId: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const StockCountMaxOrderByAggregateInputSchema: z.ZodType<Prisma.StockCountMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  inventoryId: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  startedAt: z.lazy(() => SortOrderSchema).optional(),
  completedAt: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const StockCountMinOrderByAggregateInputSchema: z.ZodType<Prisma.StockCountMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  inventoryId: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  startedAt: z.lazy(() => SortOrderSchema).optional(),
  completedAt: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const StockCountSumOrderByAggregateInputSchema: z.ZodType<Prisma.StockCountSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  inventoryId: z.lazy(() => SortOrderSchema).optional(),
  createdById: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumCountStatusWithAggregatesFilterSchema: z.ZodType<Prisma.EnumCountStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => CountStatusSchema).optional(),
  in: z.lazy(() => CountStatusSchema).array().optional(),
  notIn: z.lazy(() => CountStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => CountStatusSchema),z.lazy(() => NestedEnumCountStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumCountStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumCountStatusFilterSchema).optional()
}).strict();

export const StockCountScalarRelationFilterSchema: z.ZodType<Prisma.StockCountScalarRelationFilter> = z.object({
  is: z.lazy(() => StockCountWhereInputSchema).optional(),
  isNot: z.lazy(() => StockCountWhereInputSchema).optional()
}).strict();

export const StockCountItemStockCountIdItemIdCompoundUniqueInputSchema: z.ZodType<Prisma.StockCountItemStockCountIdItemIdCompoundUniqueInput> = z.object({
  stockCountId: z.number(),
  itemId: z.number()
}).strict();

export const StockCountItemCountOrderByAggregateInputSchema: z.ZodType<Prisma.StockCountItemCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  stockCountId: z.lazy(() => SortOrderSchema).optional(),
  itemId: z.lazy(() => SortOrderSchema).optional(),
  expectedQty: z.lazy(() => SortOrderSchema).optional(),
  actualQty: z.lazy(() => SortOrderSchema).optional(),
  difference: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const StockCountItemAvgOrderByAggregateInputSchema: z.ZodType<Prisma.StockCountItemAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  stockCountId: z.lazy(() => SortOrderSchema).optional(),
  itemId: z.lazy(() => SortOrderSchema).optional(),
  expectedQty: z.lazy(() => SortOrderSchema).optional(),
  actualQty: z.lazy(() => SortOrderSchema).optional(),
  difference: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const StockCountItemMaxOrderByAggregateInputSchema: z.ZodType<Prisma.StockCountItemMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  stockCountId: z.lazy(() => SortOrderSchema).optional(),
  itemId: z.lazy(() => SortOrderSchema).optional(),
  expectedQty: z.lazy(() => SortOrderSchema).optional(),
  actualQty: z.lazy(() => SortOrderSchema).optional(),
  difference: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const StockCountItemMinOrderByAggregateInputSchema: z.ZodType<Prisma.StockCountItemMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  stockCountId: z.lazy(() => SortOrderSchema).optional(),
  itemId: z.lazy(() => SortOrderSchema).optional(),
  expectedQty: z.lazy(() => SortOrderSchema).optional(),
  actualQty: z.lazy(() => SortOrderSchema).optional(),
  difference: z.lazy(() => SortOrderSchema).optional(),
  notes: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const StockCountItemSumOrderByAggregateInputSchema: z.ZodType<Prisma.StockCountItemSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  stockCountId: z.lazy(() => SortOrderSchema).optional(),
  itemId: z.lazy(() => SortOrderSchema).optional(),
  expectedQty: z.lazy(() => SortOrderSchema).optional(),
  actualQty: z.lazy(() => SortOrderSchema).optional(),
  difference: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeStatsCountOrderByAggregateInputSchema: z.ZodType<Prisma.RecipeStatsCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  totalCost: z.lazy(() => SortOrderSchema).optional(),
  profitMargin: z.lazy(() => SortOrderSchema).optional(),
  averageRating: z.lazy(() => SortOrderSchema).optional(),
  preparationCount: z.lazy(() => SortOrderSchema).optional(),
  lastPrepared: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeStatsAvgOrderByAggregateInputSchema: z.ZodType<Prisma.RecipeStatsAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  totalCost: z.lazy(() => SortOrderSchema).optional(),
  profitMargin: z.lazy(() => SortOrderSchema).optional(),
  averageRating: z.lazy(() => SortOrderSchema).optional(),
  preparationCount: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeStatsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.RecipeStatsMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  totalCost: z.lazy(() => SortOrderSchema).optional(),
  profitMargin: z.lazy(() => SortOrderSchema).optional(),
  averageRating: z.lazy(() => SortOrderSchema).optional(),
  preparationCount: z.lazy(() => SortOrderSchema).optional(),
  lastPrepared: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeStatsMinOrderByAggregateInputSchema: z.ZodType<Prisma.RecipeStatsMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  totalCost: z.lazy(() => SortOrderSchema).optional(),
  profitMargin: z.lazy(() => SortOrderSchema).optional(),
  averageRating: z.lazy(() => SortOrderSchema).optional(),
  preparationCount: z.lazy(() => SortOrderSchema).optional(),
  lastPrepared: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeStatsSumOrderByAggregateInputSchema: z.ZodType<Prisma.RecipeStatsSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  totalCost: z.lazy(() => SortOrderSchema).optional(),
  profitMargin: z.lazy(() => SortOrderSchema).optional(),
  averageRating: z.lazy(() => SortOrderSchema).optional(),
  preparationCount: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumOrderStatusFilterSchema: z.ZodType<Prisma.EnumOrderStatusFilter> = z.object({
  equals: z.lazy(() => OrderStatusSchema).optional(),
  in: z.lazy(() => OrderStatusSchema).array().optional(),
  notIn: z.lazy(() => OrderStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => OrderStatusSchema),z.lazy(() => NestedEnumOrderStatusFilterSchema) ]).optional(),
}).strict();

export const OrderCountOrderByAggregateInputSchema: z.ZodType<Prisma.OrderCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  vendorId: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrderAvgOrderByAggregateInputSchema: z.ZodType<Prisma.OrderAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  vendorId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrderMaxOrderByAggregateInputSchema: z.ZodType<Prisma.OrderMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  vendorId: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrderMinOrderByAggregateInputSchema: z.ZodType<Prisma.OrderMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  vendorId: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrderSumOrderByAggregateInputSchema: z.ZodType<Prisma.OrderSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  vendorId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumOrderStatusWithAggregatesFilterSchema: z.ZodType<Prisma.EnumOrderStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => OrderStatusSchema).optional(),
  in: z.lazy(() => OrderStatusSchema).array().optional(),
  notIn: z.lazy(() => OrderStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => OrderStatusSchema),z.lazy(() => NestedEnumOrderStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumOrderStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumOrderStatusFilterSchema).optional()
}).strict();

export const OrderScalarRelationFilterSchema: z.ZodType<Prisma.OrderScalarRelationFilter> = z.object({
  is: z.lazy(() => OrderWhereInputSchema).optional(),
  isNot: z.lazy(() => OrderWhereInputSchema).optional()
}).strict();

export const OrderItemCountOrderByAggregateInputSchema: z.ZodType<Prisma.OrderItemCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  orderId: z.lazy(() => SortOrderSchema).optional(),
  ingredientId: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrderItemAvgOrderByAggregateInputSchema: z.ZodType<Prisma.OrderItemAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  orderId: z.lazy(() => SortOrderSchema).optional(),
  ingredientId: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrderItemMaxOrderByAggregateInputSchema: z.ZodType<Prisma.OrderItemMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  orderId: z.lazy(() => SortOrderSchema).optional(),
  ingredientId: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrderItemMinOrderByAggregateInputSchema: z.ZodType<Prisma.OrderItemMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  orderId: z.lazy(() => SortOrderSchema).optional(),
  ingredientId: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  unit: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrderItemSumOrderByAggregateInputSchema: z.ZodType<Prisma.OrderItemSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  orderId: z.lazy(() => SortOrderSchema).optional(),
  ingredientId: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const VendorCountOrderByAggregateInputSchema: z.ZodType<Prisma.VendorCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  contact: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const VendorAvgOrderByAggregateInputSchema: z.ZodType<Prisma.VendorAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const VendorMaxOrderByAggregateInputSchema: z.ZodType<Prisma.VendorMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  contact: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const VendorMinOrderByAggregateInputSchema: z.ZodType<Prisma.VendorMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  contact: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const VendorSumOrderByAggregateInputSchema: z.ZodType<Prisma.VendorSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumShiftStatusFilterSchema: z.ZodType<Prisma.EnumShiftStatusFilter> = z.object({
  equals: z.lazy(() => ShiftStatusSchema).optional(),
  in: z.lazy(() => ShiftStatusSchema).array().optional(),
  notIn: z.lazy(() => ShiftStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => ShiftStatusSchema),z.lazy(() => NestedEnumShiftStatusFilterSchema) ]).optional(),
}).strict();

export const ShiftTaskListRelationFilterSchema: z.ZodType<Prisma.ShiftTaskListRelationFilter> = z.object({
  every: z.lazy(() => ShiftTaskWhereInputSchema).optional(),
  some: z.lazy(() => ShiftTaskWhereInputSchema).optional(),
  none: z.lazy(() => ShiftTaskWhereInputSchema).optional()
}).strict();

export const ShiftTaskOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ShiftTaskOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ShiftCountOrderByAggregateInputSchema: z.ZodType<Prisma.ShiftCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  startTime: z.lazy(() => SortOrderSchema).optional(),
  endTime: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ShiftAvgOrderByAggregateInputSchema: z.ZodType<Prisma.ShiftAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ShiftMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ShiftMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  startTime: z.lazy(() => SortOrderSchema).optional(),
  endTime: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ShiftMinOrderByAggregateInputSchema: z.ZodType<Prisma.ShiftMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  startTime: z.lazy(() => SortOrderSchema).optional(),
  endTime: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ShiftSumOrderByAggregateInputSchema: z.ZodType<Prisma.ShiftSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumShiftStatusWithAggregatesFilterSchema: z.ZodType<Prisma.EnumShiftStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => ShiftStatusSchema).optional(),
  in: z.lazy(() => ShiftStatusSchema).array().optional(),
  notIn: z.lazy(() => ShiftStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => ShiftStatusSchema),z.lazy(() => NestedEnumShiftStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumShiftStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumShiftStatusFilterSchema).optional()
}).strict();

export const EnumPrepStatusFilterSchema: z.ZodType<Prisma.EnumPrepStatusFilter> = z.object({
  equals: z.lazy(() => PrepStatusSchema).optional(),
  in: z.lazy(() => PrepStatusSchema).array().optional(),
  notIn: z.lazy(() => PrepStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => PrepStatusSchema),z.lazy(() => NestedEnumPrepStatusFilterSchema) ]).optional(),
}).strict();

export const PrepBoardCountOrderByAggregateInputSchema: z.ZodType<Prisma.PrepBoardCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PrepBoardAvgOrderByAggregateInputSchema: z.ZodType<Prisma.PrepBoardAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PrepBoardMaxOrderByAggregateInputSchema: z.ZodType<Prisma.PrepBoardMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PrepBoardMinOrderByAggregateInputSchema: z.ZodType<Prisma.PrepBoardMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PrepBoardSumOrderByAggregateInputSchema: z.ZodType<Prisma.PrepBoardSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumPrepStatusWithAggregatesFilterSchema: z.ZodType<Prisma.EnumPrepStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => PrepStatusSchema).optional(),
  in: z.lazy(() => PrepStatusSchema).array().optional(),
  notIn: z.lazy(() => PrepStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => PrepStatusSchema),z.lazy(() => NestedEnumPrepStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumPrepStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumPrepStatusFilterSchema).optional()
}).strict();

export const PrepBoardScalarRelationFilterSchema: z.ZodType<Prisma.PrepBoardScalarRelationFilter> = z.object({
  is: z.lazy(() => PrepBoardWhereInputSchema).optional(),
  isNot: z.lazy(() => PrepBoardWhereInputSchema).optional()
}).strict();

export const PrepItemCountOrderByAggregateInputSchema: z.ZodType<Prisma.PrepItemCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  prepBoardId: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  assignedToId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PrepItemAvgOrderByAggregateInputSchema: z.ZodType<Prisma.PrepItemAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  prepBoardId: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  assignedToId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PrepItemMaxOrderByAggregateInputSchema: z.ZodType<Prisma.PrepItemMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  prepBoardId: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  assignedToId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PrepItemMinOrderByAggregateInputSchema: z.ZodType<Prisma.PrepItemMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  prepBoardId: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  assignedToId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PrepItemSumOrderByAggregateInputSchema: z.ZodType<Prisma.PrepItemSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  prepBoardId: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  assignedToId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PasswordResetCountOrderByAggregateInputSchema: z.ZodType<Prisma.PasswordResetCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PasswordResetAvgOrderByAggregateInputSchema: z.ZodType<Prisma.PasswordResetAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PasswordResetMaxOrderByAggregateInputSchema: z.ZodType<Prisma.PasswordResetMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PasswordResetMinOrderByAggregateInputSchema: z.ZodType<Prisma.PasswordResetMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PasswordResetSumOrderByAggregateInputSchema: z.ZodType<Prisma.PasswordResetSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MenuCategoryListRelationFilterSchema: z.ZodType<Prisma.MenuCategoryListRelationFilter> = z.object({
  every: z.lazy(() => MenuCategoryWhereInputSchema).optional(),
  some: z.lazy(() => MenuCategoryWhereInputSchema).optional(),
  none: z.lazy(() => MenuCategoryWhereInputSchema).optional()
}).strict();

export const MenuCategoryOrderByRelationAggregateInputSchema: z.ZodType<Prisma.MenuCategoryOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MenuCountOrderByAggregateInputSchema: z.ZodType<Prisma.MenuCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MenuAvgOrderByAggregateInputSchema: z.ZodType<Prisma.MenuAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MenuMaxOrderByAggregateInputSchema: z.ZodType<Prisma.MenuMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MenuMinOrderByAggregateInputSchema: z.ZodType<Prisma.MenuMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MenuSumOrderByAggregateInputSchema: z.ZodType<Prisma.MenuSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  restaurantId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MenuItemRecipeMenuItemIdRecipeIdCompoundUniqueInputSchema: z.ZodType<Prisma.MenuItemRecipeMenuItemIdRecipeIdCompoundUniqueInput> = z.object({
  menuItemId: z.number(),
  recipeId: z.number()
}).strict();

export const MenuItemRecipeCountOrderByAggregateInputSchema: z.ZodType<Prisma.MenuItemRecipeCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  menuItemId: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  joinAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MenuItemRecipeAvgOrderByAggregateInputSchema: z.ZodType<Prisma.MenuItemRecipeAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  menuItemId: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MenuItemRecipeMaxOrderByAggregateInputSchema: z.ZodType<Prisma.MenuItemRecipeMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  menuItemId: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  joinAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MenuItemRecipeMinOrderByAggregateInputSchema: z.ZodType<Prisma.MenuItemRecipeMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  menuItemId: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  joinAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MenuItemRecipeSumOrderByAggregateInputSchema: z.ZodType<Prisma.MenuItemRecipeSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  menuItemId: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FloatNullableListFilterSchema: z.ZodType<Prisma.FloatNullableListFilter> = z.object({
  equals: z.number().array().optional().nullable(),
  has: z.number().optional().nullable(),
  hasEvery: z.number().array().optional(),
  hasSome: z.number().array().optional(),
  isEmpty: z.boolean().optional()
}).strict();

export const MenuCategoryNullableScalarRelationFilterSchema: z.ZodType<Prisma.MenuCategoryNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => MenuCategoryWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => MenuCategoryWhereInputSchema).optional().nullable()
}).strict();

export const NutritionalInfoNullableScalarRelationFilterSchema: z.ZodType<Prisma.NutritionalInfoNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => NutritionalInfoWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => NutritionalInfoWhereInputSchema).optional().nullable()
}).strict();

export const NutritionalRecommendationListRelationFilterSchema: z.ZodType<Prisma.NutritionalRecommendationListRelationFilter> = z.object({
  every: z.lazy(() => NutritionalRecommendationWhereInputSchema).optional(),
  some: z.lazy(() => NutritionalRecommendationWhereInputSchema).optional(),
  none: z.lazy(() => NutritionalRecommendationWhereInputSchema).optional()
}).strict();

export const NutritionalRecommendationOrderByRelationAggregateInputSchema: z.ZodType<Prisma.NutritionalRecommendationOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MenuItemCountOrderByAggregateInputSchema: z.ZodType<Prisma.MenuItemCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  foodCost: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  recipeIds: z.lazy(() => SortOrderSchema).optional(),
  recipeServingsAmount: z.lazy(() => SortOrderSchema).optional(),
  recipeServingsCost: z.lazy(() => SortOrderSchema).optional(),
  allergens: z.lazy(() => SortOrderSchema).optional(),
  menuId: z.lazy(() => SortOrderSchema).optional(),
  categoryId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MenuItemAvgOrderByAggregateInputSchema: z.ZodType<Prisma.MenuItemAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  foodCost: z.lazy(() => SortOrderSchema).optional(),
  recipeIds: z.lazy(() => SortOrderSchema).optional(),
  recipeServingsAmount: z.lazy(() => SortOrderSchema).optional(),
  recipeServingsCost: z.lazy(() => SortOrderSchema).optional(),
  menuId: z.lazy(() => SortOrderSchema).optional(),
  categoryId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MenuItemMaxOrderByAggregateInputSchema: z.ZodType<Prisma.MenuItemMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  foodCost: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  menuId: z.lazy(() => SortOrderSchema).optional(),
  categoryId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MenuItemMinOrderByAggregateInputSchema: z.ZodType<Prisma.MenuItemMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  foodCost: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  menuId: z.lazy(() => SortOrderSchema).optional(),
  categoryId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MenuItemSumOrderByAggregateInputSchema: z.ZodType<Prisma.MenuItemSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  foodCost: z.lazy(() => SortOrderSchema).optional(),
  recipeIds: z.lazy(() => SortOrderSchema).optional(),
  recipeServingsAmount: z.lazy(() => SortOrderSchema).optional(),
  recipeServingsCost: z.lazy(() => SortOrderSchema).optional(),
  menuId: z.lazy(() => SortOrderSchema).optional(),
  categoryId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const NutritionalInfoCountOrderByAggregateInputSchema: z.ZodType<Prisma.NutritionalInfoCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  menuItemId: z.lazy(() => SortOrderSchema).optional(),
  calories: z.lazy(() => SortOrderSchema).optional(),
  fat: z.lazy(() => SortOrderSchema).optional(),
  saturatedFat: z.lazy(() => SortOrderSchema).optional(),
  transFat: z.lazy(() => SortOrderSchema).optional(),
  cholesterol: z.lazy(() => SortOrderSchema).optional(),
  sodium: z.lazy(() => SortOrderSchema).optional(),
  carbohydrates: z.lazy(() => SortOrderSchema).optional(),
  fiber: z.lazy(() => SortOrderSchema).optional(),
  sugar: z.lazy(() => SortOrderSchema).optional(),
  protein: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const NutritionalInfoAvgOrderByAggregateInputSchema: z.ZodType<Prisma.NutritionalInfoAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  menuItemId: z.lazy(() => SortOrderSchema).optional(),
  calories: z.lazy(() => SortOrderSchema).optional(),
  fat: z.lazy(() => SortOrderSchema).optional(),
  saturatedFat: z.lazy(() => SortOrderSchema).optional(),
  transFat: z.lazy(() => SortOrderSchema).optional(),
  cholesterol: z.lazy(() => SortOrderSchema).optional(),
  sodium: z.lazy(() => SortOrderSchema).optional(),
  carbohydrates: z.lazy(() => SortOrderSchema).optional(),
  fiber: z.lazy(() => SortOrderSchema).optional(),
  sugar: z.lazy(() => SortOrderSchema).optional(),
  protein: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const NutritionalInfoMaxOrderByAggregateInputSchema: z.ZodType<Prisma.NutritionalInfoMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  menuItemId: z.lazy(() => SortOrderSchema).optional(),
  calories: z.lazy(() => SortOrderSchema).optional(),
  fat: z.lazy(() => SortOrderSchema).optional(),
  saturatedFat: z.lazy(() => SortOrderSchema).optional(),
  transFat: z.lazy(() => SortOrderSchema).optional(),
  cholesterol: z.lazy(() => SortOrderSchema).optional(),
  sodium: z.lazy(() => SortOrderSchema).optional(),
  carbohydrates: z.lazy(() => SortOrderSchema).optional(),
  fiber: z.lazy(() => SortOrderSchema).optional(),
  sugar: z.lazy(() => SortOrderSchema).optional(),
  protein: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const NutritionalInfoMinOrderByAggregateInputSchema: z.ZodType<Prisma.NutritionalInfoMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  menuItemId: z.lazy(() => SortOrderSchema).optional(),
  calories: z.lazy(() => SortOrderSchema).optional(),
  fat: z.lazy(() => SortOrderSchema).optional(),
  saturatedFat: z.lazy(() => SortOrderSchema).optional(),
  transFat: z.lazy(() => SortOrderSchema).optional(),
  cholesterol: z.lazy(() => SortOrderSchema).optional(),
  sodium: z.lazy(() => SortOrderSchema).optional(),
  carbohydrates: z.lazy(() => SortOrderSchema).optional(),
  fiber: z.lazy(() => SortOrderSchema).optional(),
  sugar: z.lazy(() => SortOrderSchema).optional(),
  protein: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const NutritionalInfoSumOrderByAggregateInputSchema: z.ZodType<Prisma.NutritionalInfoSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  menuItemId: z.lazy(() => SortOrderSchema).optional(),
  calories: z.lazy(() => SortOrderSchema).optional(),
  fat: z.lazy(() => SortOrderSchema).optional(),
  saturatedFat: z.lazy(() => SortOrderSchema).optional(),
  transFat: z.lazy(() => SortOrderSchema).optional(),
  cholesterol: z.lazy(() => SortOrderSchema).optional(),
  sodium: z.lazy(() => SortOrderSchema).optional(),
  carbohydrates: z.lazy(() => SortOrderSchema).optional(),
  fiber: z.lazy(() => SortOrderSchema).optional(),
  sugar: z.lazy(() => SortOrderSchema).optional(),
  protein: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FoodCostHistoryCountOrderByAggregateInputSchema: z.ZodType<Prisma.FoodCostHistoryCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  cost: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FoodCostHistoryAvgOrderByAggregateInputSchema: z.ZodType<Prisma.FoodCostHistoryAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  cost: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FoodCostHistoryMaxOrderByAggregateInputSchema: z.ZodType<Prisma.FoodCostHistoryMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  cost: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FoodCostHistoryMinOrderByAggregateInputSchema: z.ZodType<Prisma.FoodCostHistoryMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  cost: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FoodCostHistorySumOrderByAggregateInputSchema: z.ZodType<Prisma.FoodCostHistorySumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  cost: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PrepHistoryCountOrderByAggregateInputSchema: z.ZodType<Prisma.PrepHistoryCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PrepHistoryAvgOrderByAggregateInputSchema: z.ZodType<Prisma.PrepHistoryAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PrepHistoryMaxOrderByAggregateInputSchema: z.ZodType<Prisma.PrepHistoryMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PrepHistoryMinOrderByAggregateInputSchema: z.ZodType<Prisma.PrepHistoryMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PrepHistorySumOrderByAggregateInputSchema: z.ZodType<Prisma.PrepHistorySumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  recipeId: z.lazy(() => SortOrderSchema).optional(),
  quantity: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RecipeCreateNestedOneWithoutNutritionalInfoInputSchema: z.ZodType<Prisma.RecipeCreateNestedOneWithoutNutritionalInfoInput> = z.object({
  create: z.union([ z.lazy(() => RecipeCreateWithoutNutritionalInfoInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutNutritionalInfoInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RecipeCreateOrConnectWithoutNutritionalInfoInputSchema).optional(),
  connect: z.lazy(() => RecipeWhereUniqueInputSchema).optional()
}).strict();

export const FloatFieldUpdateOperationsInputSchema: z.ZodType<Prisma.FloatFieldUpdateOperationsInput> = z.object({
  set: z.number().optional(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const StringFieldUpdateOperationsInputSchema: z.ZodType<Prisma.StringFieldUpdateOperationsInput> = z.object({
  set: z.string().optional()
}).strict();

export const BoolFieldUpdateOperationsInputSchema: z.ZodType<Prisma.BoolFieldUpdateOperationsInput> = z.object({
  set: z.boolean().optional()
}).strict();

export const RecipeUpdateOneRequiredWithoutNutritionalInfoNestedInputSchema: z.ZodType<Prisma.RecipeUpdateOneRequiredWithoutNutritionalInfoNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeCreateWithoutNutritionalInfoInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutNutritionalInfoInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RecipeCreateOrConnectWithoutNutritionalInfoInputSchema).optional(),
  upsert: z.lazy(() => RecipeUpsertWithoutNutritionalInfoInputSchema).optional(),
  connect: z.lazy(() => RecipeWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RecipeUpdateToOneWithWhereWithoutNutritionalInfoInputSchema),z.lazy(() => RecipeUpdateWithoutNutritionalInfoInputSchema),z.lazy(() => RecipeUncheckedUpdateWithoutNutritionalInfoInputSchema) ]).optional(),
}).strict();

export const IntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.IntFieldUpdateOperationsInput> = z.object({
  set: z.number().optional(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const RecipeCreateNestedOneWithoutCriticalPointsInputSchema: z.ZodType<Prisma.RecipeCreateNestedOneWithoutCriticalPointsInput> = z.object({
  create: z.union([ z.lazy(() => RecipeCreateWithoutCriticalPointsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutCriticalPointsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RecipeCreateOrConnectWithoutCriticalPointsInputSchema).optional(),
  connect: z.lazy(() => RecipeWhereUniqueInputSchema).optional()
}).strict();

export const NullableFloatFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableFloatFieldUpdateOperationsInput> = z.object({
  set: z.number().optional().nullable(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const NullableStringFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableStringFieldUpdateOperationsInput> = z.object({
  set: z.string().optional().nullable()
}).strict();

export const DateTimeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.DateTimeFieldUpdateOperationsInput> = z.object({
  set: z.coerce.date().optional()
}).strict();

export const RecipeUpdateOneRequiredWithoutCriticalPointsNestedInputSchema: z.ZodType<Prisma.RecipeUpdateOneRequiredWithoutCriticalPointsNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeCreateWithoutCriticalPointsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutCriticalPointsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RecipeCreateOrConnectWithoutCriticalPointsInputSchema).optional(),
  upsert: z.lazy(() => RecipeUpsertWithoutCriticalPointsInputSchema).optional(),
  connect: z.lazy(() => RecipeWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RecipeUpdateToOneWithWhereWithoutCriticalPointsInputSchema),z.lazy(() => RecipeUpdateWithoutCriticalPointsInputSchema),z.lazy(() => RecipeUncheckedUpdateWithoutCriticalPointsInputSchema) ]).optional(),
}).strict();

export const RecipeCreateNestedOneWithoutStorageInputSchema: z.ZodType<Prisma.RecipeCreateNestedOneWithoutStorageInput> = z.object({
  create: z.union([ z.lazy(() => RecipeCreateWithoutStorageInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutStorageInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RecipeCreateOrConnectWithoutStorageInputSchema).optional(),
  connect: z.lazy(() => RecipeWhereUniqueInputSchema).optional()
}).strict();

export const RecipeUpdateOneRequiredWithoutStorageNestedInputSchema: z.ZodType<Prisma.RecipeUpdateOneRequiredWithoutStorageNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeCreateWithoutStorageInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutStorageInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RecipeCreateOrConnectWithoutStorageInputSchema).optional(),
  upsert: z.lazy(() => RecipeUpsertWithoutStorageInputSchema).optional(),
  connect: z.lazy(() => RecipeWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RecipeUpdateToOneWithWhereWithoutStorageInputSchema),z.lazy(() => RecipeUpdateWithoutStorageInputSchema),z.lazy(() => RecipeUncheckedUpdateWithoutStorageInputSchema) ]).optional(),
}).strict();

export const RecipeCreateNestedOneWithoutPhotosInputSchema: z.ZodType<Prisma.RecipeCreateNestedOneWithoutPhotosInput> = z.object({
  create: z.union([ z.lazy(() => RecipeCreateWithoutPhotosInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutPhotosInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RecipeCreateOrConnectWithoutPhotosInputSchema).optional(),
  connect: z.lazy(() => RecipeWhereUniqueInputSchema).optional()
}).strict();

export const EnumPhotoTypeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumPhotoTypeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => PhotoTypeSchema).optional()
}).strict();

export const NullableIntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableIntFieldUpdateOperationsInput> = z.object({
  set: z.number().optional().nullable(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const RecipeUpdateOneRequiredWithoutPhotosNestedInputSchema: z.ZodType<Prisma.RecipeUpdateOneRequiredWithoutPhotosNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeCreateWithoutPhotosInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutPhotosInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RecipeCreateOrConnectWithoutPhotosInputSchema).optional(),
  upsert: z.lazy(() => RecipeUpsertWithoutPhotosInputSchema).optional(),
  connect: z.lazy(() => RecipeWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RecipeUpdateToOneWithWhereWithoutPhotosInputSchema),z.lazy(() => RecipeUpdateWithoutPhotosInputSchema),z.lazy(() => RecipeUncheckedUpdateWithoutPhotosInputSchema) ]).optional(),
}).strict();

export const RecipeCreateNestedOneWithoutTemperaturesInputSchema: z.ZodType<Prisma.RecipeCreateNestedOneWithoutTemperaturesInput> = z.object({
  create: z.union([ z.lazy(() => RecipeCreateWithoutTemperaturesInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutTemperaturesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RecipeCreateOrConnectWithoutTemperaturesInputSchema).optional(),
  connect: z.lazy(() => RecipeWhereUniqueInputSchema).optional()
}).strict();

export const RecipeUpdateOneRequiredWithoutTemperaturesNestedInputSchema: z.ZodType<Prisma.RecipeUpdateOneRequiredWithoutTemperaturesNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeCreateWithoutTemperaturesInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutTemperaturesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RecipeCreateOrConnectWithoutTemperaturesInputSchema).optional(),
  upsert: z.lazy(() => RecipeUpsertWithoutTemperaturesInputSchema).optional(),
  connect: z.lazy(() => RecipeWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RecipeUpdateToOneWithWhereWithoutTemperaturesInputSchema),z.lazy(() => RecipeUpdateWithoutTemperaturesInputSchema),z.lazy(() => RecipeUncheckedUpdateWithoutTemperaturesInputSchema) ]).optional(),
}).strict();

export const RecipeCreateNestedOneWithoutYieldsInputSchema: z.ZodType<Prisma.RecipeCreateNestedOneWithoutYieldsInput> = z.object({
  create: z.union([ z.lazy(() => RecipeCreateWithoutYieldsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutYieldsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RecipeCreateOrConnectWithoutYieldsInputSchema).optional(),
  connect: z.lazy(() => RecipeWhereUniqueInputSchema).optional()
}).strict();

export const RecipeUpdateOneRequiredWithoutYieldsNestedInputSchema: z.ZodType<Prisma.RecipeUpdateOneRequiredWithoutYieldsNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeCreateWithoutYieldsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutYieldsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RecipeCreateOrConnectWithoutYieldsInputSchema).optional(),
  upsert: z.lazy(() => RecipeUpsertWithoutYieldsInputSchema).optional(),
  connect: z.lazy(() => RecipeWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RecipeUpdateToOneWithWhereWithoutYieldsInputSchema),z.lazy(() => RecipeUpdateWithoutYieldsInputSchema),z.lazy(() => RecipeUncheckedUpdateWithoutYieldsInputSchema) ]).optional(),
}).strict();

export const RecipeCreateNestedOneWithoutLaborCostsInputSchema: z.ZodType<Prisma.RecipeCreateNestedOneWithoutLaborCostsInput> = z.object({
  create: z.union([ z.lazy(() => RecipeCreateWithoutLaborCostsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutLaborCostsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RecipeCreateOrConnectWithoutLaborCostsInputSchema).optional(),
  connect: z.lazy(() => RecipeWhereUniqueInputSchema).optional()
}).strict();

export const RecipeUpdateOneRequiredWithoutLaborCostsNestedInputSchema: z.ZodType<Prisma.RecipeUpdateOneRequiredWithoutLaborCostsNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeCreateWithoutLaborCostsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutLaborCostsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RecipeCreateOrConnectWithoutLaborCostsInputSchema).optional(),
  upsert: z.lazy(() => RecipeUpsertWithoutLaborCostsInputSchema).optional(),
  connect: z.lazy(() => RecipeWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RecipeUpdateToOneWithWhereWithoutLaborCostsInputSchema),z.lazy(() => RecipeUpdateWithoutLaborCostsInputSchema),z.lazy(() => RecipeUncheckedUpdateWithoutLaborCostsInputSchema) ]).optional(),
}).strict();

export const RestaurantCreateNestedOneWithoutSalesTransactionsInputSchema: z.ZodType<Prisma.RestaurantCreateNestedOneWithoutSalesTransactionsInput> = z.object({
  create: z.union([ z.lazy(() => RestaurantCreateWithoutSalesTransactionsInputSchema),z.lazy(() => RestaurantUncheckedCreateWithoutSalesTransactionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RestaurantCreateOrConnectWithoutSalesTransactionsInputSchema).optional(),
  connect: z.lazy(() => RestaurantWhereUniqueInputSchema).optional()
}).strict();

export const MenuItemCreateNestedOneWithoutSalesTransactionsInputSchema: z.ZodType<Prisma.MenuItemCreateNestedOneWithoutSalesTransactionsInput> = z.object({
  create: z.union([ z.lazy(() => MenuItemCreateWithoutSalesTransactionsInputSchema),z.lazy(() => MenuItemUncheckedCreateWithoutSalesTransactionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => MenuItemCreateOrConnectWithoutSalesTransactionsInputSchema).optional(),
  connect: z.lazy(() => MenuItemWhereUniqueInputSchema).optional()
}).strict();

export const RestaurantUpdateOneRequiredWithoutSalesTransactionsNestedInputSchema: z.ZodType<Prisma.RestaurantUpdateOneRequiredWithoutSalesTransactionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => RestaurantCreateWithoutSalesTransactionsInputSchema),z.lazy(() => RestaurantUncheckedCreateWithoutSalesTransactionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RestaurantCreateOrConnectWithoutSalesTransactionsInputSchema).optional(),
  upsert: z.lazy(() => RestaurantUpsertWithoutSalesTransactionsInputSchema).optional(),
  connect: z.lazy(() => RestaurantWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RestaurantUpdateToOneWithWhereWithoutSalesTransactionsInputSchema),z.lazy(() => RestaurantUpdateWithoutSalesTransactionsInputSchema),z.lazy(() => RestaurantUncheckedUpdateWithoutSalesTransactionsInputSchema) ]).optional(),
}).strict();

export const MenuItemUpdateOneRequiredWithoutSalesTransactionsNestedInputSchema: z.ZodType<Prisma.MenuItemUpdateOneRequiredWithoutSalesTransactionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => MenuItemCreateWithoutSalesTransactionsInputSchema),z.lazy(() => MenuItemUncheckedCreateWithoutSalesTransactionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => MenuItemCreateOrConnectWithoutSalesTransactionsInputSchema).optional(),
  upsert: z.lazy(() => MenuItemUpsertWithoutSalesTransactionsInputSchema).optional(),
  connect: z.lazy(() => MenuItemWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => MenuItemUpdateToOneWithWhereWithoutSalesTransactionsInputSchema),z.lazy(() => MenuItemUpdateWithoutSalesTransactionsInputSchema),z.lazy(() => MenuItemUncheckedUpdateWithoutSalesTransactionsInputSchema) ]).optional(),
}).strict();

export const MenuCreateNestedOneWithoutMenuCategoryInputSchema: z.ZodType<Prisma.MenuCreateNestedOneWithoutMenuCategoryInput> = z.object({
  create: z.union([ z.lazy(() => MenuCreateWithoutMenuCategoryInputSchema),z.lazy(() => MenuUncheckedCreateWithoutMenuCategoryInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => MenuCreateOrConnectWithoutMenuCategoryInputSchema).optional(),
  connect: z.lazy(() => MenuWhereUniqueInputSchema).optional()
}).strict();

export const MenuItemCreateNestedManyWithoutCategoryInputSchema: z.ZodType<Prisma.MenuItemCreateNestedManyWithoutCategoryInput> = z.object({
  create: z.union([ z.lazy(() => MenuItemCreateWithoutCategoryInputSchema),z.lazy(() => MenuItemCreateWithoutCategoryInputSchema).array(),z.lazy(() => MenuItemUncheckedCreateWithoutCategoryInputSchema),z.lazy(() => MenuItemUncheckedCreateWithoutCategoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MenuItemCreateOrConnectWithoutCategoryInputSchema),z.lazy(() => MenuItemCreateOrConnectWithoutCategoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MenuItemCreateManyCategoryInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => MenuItemWhereUniqueInputSchema),z.lazy(() => MenuItemWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const MenuItemUncheckedCreateNestedManyWithoutCategoryInputSchema: z.ZodType<Prisma.MenuItemUncheckedCreateNestedManyWithoutCategoryInput> = z.object({
  create: z.union([ z.lazy(() => MenuItemCreateWithoutCategoryInputSchema),z.lazy(() => MenuItemCreateWithoutCategoryInputSchema).array(),z.lazy(() => MenuItemUncheckedCreateWithoutCategoryInputSchema),z.lazy(() => MenuItemUncheckedCreateWithoutCategoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MenuItemCreateOrConnectWithoutCategoryInputSchema),z.lazy(() => MenuItemCreateOrConnectWithoutCategoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MenuItemCreateManyCategoryInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => MenuItemWhereUniqueInputSchema),z.lazy(() => MenuItemWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const MenuUpdateOneRequiredWithoutMenuCategoryNestedInputSchema: z.ZodType<Prisma.MenuUpdateOneRequiredWithoutMenuCategoryNestedInput> = z.object({
  create: z.union([ z.lazy(() => MenuCreateWithoutMenuCategoryInputSchema),z.lazy(() => MenuUncheckedCreateWithoutMenuCategoryInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => MenuCreateOrConnectWithoutMenuCategoryInputSchema).optional(),
  upsert: z.lazy(() => MenuUpsertWithoutMenuCategoryInputSchema).optional(),
  connect: z.lazy(() => MenuWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => MenuUpdateToOneWithWhereWithoutMenuCategoryInputSchema),z.lazy(() => MenuUpdateWithoutMenuCategoryInputSchema),z.lazy(() => MenuUncheckedUpdateWithoutMenuCategoryInputSchema) ]).optional(),
}).strict();

export const MenuItemUpdateManyWithoutCategoryNestedInputSchema: z.ZodType<Prisma.MenuItemUpdateManyWithoutCategoryNestedInput> = z.object({
  create: z.union([ z.lazy(() => MenuItemCreateWithoutCategoryInputSchema),z.lazy(() => MenuItemCreateWithoutCategoryInputSchema).array(),z.lazy(() => MenuItemUncheckedCreateWithoutCategoryInputSchema),z.lazy(() => MenuItemUncheckedCreateWithoutCategoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MenuItemCreateOrConnectWithoutCategoryInputSchema),z.lazy(() => MenuItemCreateOrConnectWithoutCategoryInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MenuItemUpsertWithWhereUniqueWithoutCategoryInputSchema),z.lazy(() => MenuItemUpsertWithWhereUniqueWithoutCategoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MenuItemCreateManyCategoryInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => MenuItemWhereUniqueInputSchema),z.lazy(() => MenuItemWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MenuItemWhereUniqueInputSchema),z.lazy(() => MenuItemWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MenuItemWhereUniqueInputSchema),z.lazy(() => MenuItemWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MenuItemWhereUniqueInputSchema),z.lazy(() => MenuItemWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MenuItemUpdateWithWhereUniqueWithoutCategoryInputSchema),z.lazy(() => MenuItemUpdateWithWhereUniqueWithoutCategoryInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MenuItemUpdateManyWithWhereWithoutCategoryInputSchema),z.lazy(() => MenuItemUpdateManyWithWhereWithoutCategoryInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MenuItemScalarWhereInputSchema),z.lazy(() => MenuItemScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const MenuItemUncheckedUpdateManyWithoutCategoryNestedInputSchema: z.ZodType<Prisma.MenuItemUncheckedUpdateManyWithoutCategoryNestedInput> = z.object({
  create: z.union([ z.lazy(() => MenuItemCreateWithoutCategoryInputSchema),z.lazy(() => MenuItemCreateWithoutCategoryInputSchema).array(),z.lazy(() => MenuItemUncheckedCreateWithoutCategoryInputSchema),z.lazy(() => MenuItemUncheckedCreateWithoutCategoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MenuItemCreateOrConnectWithoutCategoryInputSchema),z.lazy(() => MenuItemCreateOrConnectWithoutCategoryInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MenuItemUpsertWithWhereUniqueWithoutCategoryInputSchema),z.lazy(() => MenuItemUpsertWithWhereUniqueWithoutCategoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MenuItemCreateManyCategoryInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => MenuItemWhereUniqueInputSchema),z.lazy(() => MenuItemWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MenuItemWhereUniqueInputSchema),z.lazy(() => MenuItemWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MenuItemWhereUniqueInputSchema),z.lazy(() => MenuItemWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MenuItemWhereUniqueInputSchema),z.lazy(() => MenuItemWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MenuItemUpdateWithWhereUniqueWithoutCategoryInputSchema),z.lazy(() => MenuItemUpdateWithWhereUniqueWithoutCategoryInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MenuItemUpdateManyWithWhereWithoutCategoryInputSchema),z.lazy(() => MenuItemUpdateManyWithWhereWithoutCategoryInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MenuItemScalarWhereInputSchema),z.lazy(() => MenuItemScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RecipeCreateNestedOneWithoutVersionsInputSchema: z.ZodType<Prisma.RecipeCreateNestedOneWithoutVersionsInput> = z.object({
  create: z.union([ z.lazy(() => RecipeCreateWithoutVersionsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutVersionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RecipeCreateOrConnectWithoutVersionsInputSchema).optional(),
  connect: z.lazy(() => RecipeWhereUniqueInputSchema).optional()
}).strict();

export const RecipeIngredientCreateNestedManyWithoutRecipeVersionInputSchema: z.ZodType<Prisma.RecipeIngredientCreateNestedManyWithoutRecipeVersionInput> = z.object({
  create: z.union([ z.lazy(() => RecipeIngredientCreateWithoutRecipeVersionInputSchema),z.lazy(() => RecipeIngredientCreateWithoutRecipeVersionInputSchema).array(),z.lazy(() => RecipeIngredientUncheckedCreateWithoutRecipeVersionInputSchema),z.lazy(() => RecipeIngredientUncheckedCreateWithoutRecipeVersionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeIngredientCreateOrConnectWithoutRecipeVersionInputSchema),z.lazy(() => RecipeIngredientCreateOrConnectWithoutRecipeVersionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeIngredientCreateManyRecipeVersionInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RecipeIngredientWhereUniqueInputSchema),z.lazy(() => RecipeIngredientWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RecipeInstructionCreateNestedManyWithoutRecipeVersionInputSchema: z.ZodType<Prisma.RecipeInstructionCreateNestedManyWithoutRecipeVersionInput> = z.object({
  create: z.union([ z.lazy(() => RecipeInstructionCreateWithoutRecipeVersionInputSchema),z.lazy(() => RecipeInstructionCreateWithoutRecipeVersionInputSchema).array(),z.lazy(() => RecipeInstructionUncheckedCreateWithoutRecipeVersionInputSchema),z.lazy(() => RecipeInstructionUncheckedCreateWithoutRecipeVersionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeInstructionCreateOrConnectWithoutRecipeVersionInputSchema),z.lazy(() => RecipeInstructionCreateOrConnectWithoutRecipeVersionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeInstructionCreateManyRecipeVersionInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RecipeInstructionWhereUniqueInputSchema),z.lazy(() => RecipeInstructionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutRecipeVersionsCreatedInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutRecipeVersionsCreatedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutRecipeVersionsCreatedInputSchema),z.lazy(() => UserUncheckedCreateWithoutRecipeVersionsCreatedInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutRecipeVersionsCreatedInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutRecipeVersionsApprovedInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutRecipeVersionsApprovedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutRecipeVersionsApprovedInputSchema),z.lazy(() => UserUncheckedCreateWithoutRecipeVersionsApprovedInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutRecipeVersionsApprovedInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const RecipeIngredientUncheckedCreateNestedManyWithoutRecipeVersionInputSchema: z.ZodType<Prisma.RecipeIngredientUncheckedCreateNestedManyWithoutRecipeVersionInput> = z.object({
  create: z.union([ z.lazy(() => RecipeIngredientCreateWithoutRecipeVersionInputSchema),z.lazy(() => RecipeIngredientCreateWithoutRecipeVersionInputSchema).array(),z.lazy(() => RecipeIngredientUncheckedCreateWithoutRecipeVersionInputSchema),z.lazy(() => RecipeIngredientUncheckedCreateWithoutRecipeVersionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeIngredientCreateOrConnectWithoutRecipeVersionInputSchema),z.lazy(() => RecipeIngredientCreateOrConnectWithoutRecipeVersionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeIngredientCreateManyRecipeVersionInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RecipeIngredientWhereUniqueInputSchema),z.lazy(() => RecipeIngredientWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RecipeInstructionUncheckedCreateNestedManyWithoutRecipeVersionInputSchema: z.ZodType<Prisma.RecipeInstructionUncheckedCreateNestedManyWithoutRecipeVersionInput> = z.object({
  create: z.union([ z.lazy(() => RecipeInstructionCreateWithoutRecipeVersionInputSchema),z.lazy(() => RecipeInstructionCreateWithoutRecipeVersionInputSchema).array(),z.lazy(() => RecipeInstructionUncheckedCreateWithoutRecipeVersionInputSchema),z.lazy(() => RecipeInstructionUncheckedCreateWithoutRecipeVersionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeInstructionCreateOrConnectWithoutRecipeVersionInputSchema),z.lazy(() => RecipeInstructionCreateOrConnectWithoutRecipeVersionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeInstructionCreateManyRecipeVersionInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RecipeInstructionWhereUniqueInputSchema),z.lazy(() => RecipeInstructionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const NullableDateTimeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableDateTimeFieldUpdateOperationsInput> = z.object({
  set: z.coerce.date().optional().nullable()
}).strict();

export const RecipeUpdateOneRequiredWithoutVersionsNestedInputSchema: z.ZodType<Prisma.RecipeUpdateOneRequiredWithoutVersionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeCreateWithoutVersionsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutVersionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RecipeCreateOrConnectWithoutVersionsInputSchema).optional(),
  upsert: z.lazy(() => RecipeUpsertWithoutVersionsInputSchema).optional(),
  connect: z.lazy(() => RecipeWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RecipeUpdateToOneWithWhereWithoutVersionsInputSchema),z.lazy(() => RecipeUpdateWithoutVersionsInputSchema),z.lazy(() => RecipeUncheckedUpdateWithoutVersionsInputSchema) ]).optional(),
}).strict();

export const RecipeIngredientUpdateManyWithoutRecipeVersionNestedInputSchema: z.ZodType<Prisma.RecipeIngredientUpdateManyWithoutRecipeVersionNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeIngredientCreateWithoutRecipeVersionInputSchema),z.lazy(() => RecipeIngredientCreateWithoutRecipeVersionInputSchema).array(),z.lazy(() => RecipeIngredientUncheckedCreateWithoutRecipeVersionInputSchema),z.lazy(() => RecipeIngredientUncheckedCreateWithoutRecipeVersionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeIngredientCreateOrConnectWithoutRecipeVersionInputSchema),z.lazy(() => RecipeIngredientCreateOrConnectWithoutRecipeVersionInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RecipeIngredientUpsertWithWhereUniqueWithoutRecipeVersionInputSchema),z.lazy(() => RecipeIngredientUpsertWithWhereUniqueWithoutRecipeVersionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeIngredientCreateManyRecipeVersionInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RecipeIngredientWhereUniqueInputSchema),z.lazy(() => RecipeIngredientWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RecipeIngredientWhereUniqueInputSchema),z.lazy(() => RecipeIngredientWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RecipeIngredientWhereUniqueInputSchema),z.lazy(() => RecipeIngredientWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RecipeIngredientWhereUniqueInputSchema),z.lazy(() => RecipeIngredientWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RecipeIngredientUpdateWithWhereUniqueWithoutRecipeVersionInputSchema),z.lazy(() => RecipeIngredientUpdateWithWhereUniqueWithoutRecipeVersionInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RecipeIngredientUpdateManyWithWhereWithoutRecipeVersionInputSchema),z.lazy(() => RecipeIngredientUpdateManyWithWhereWithoutRecipeVersionInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RecipeIngredientScalarWhereInputSchema),z.lazy(() => RecipeIngredientScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RecipeInstructionUpdateManyWithoutRecipeVersionNestedInputSchema: z.ZodType<Prisma.RecipeInstructionUpdateManyWithoutRecipeVersionNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeInstructionCreateWithoutRecipeVersionInputSchema),z.lazy(() => RecipeInstructionCreateWithoutRecipeVersionInputSchema).array(),z.lazy(() => RecipeInstructionUncheckedCreateWithoutRecipeVersionInputSchema),z.lazy(() => RecipeInstructionUncheckedCreateWithoutRecipeVersionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeInstructionCreateOrConnectWithoutRecipeVersionInputSchema),z.lazy(() => RecipeInstructionCreateOrConnectWithoutRecipeVersionInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RecipeInstructionUpsertWithWhereUniqueWithoutRecipeVersionInputSchema),z.lazy(() => RecipeInstructionUpsertWithWhereUniqueWithoutRecipeVersionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeInstructionCreateManyRecipeVersionInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RecipeInstructionWhereUniqueInputSchema),z.lazy(() => RecipeInstructionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RecipeInstructionWhereUniqueInputSchema),z.lazy(() => RecipeInstructionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RecipeInstructionWhereUniqueInputSchema),z.lazy(() => RecipeInstructionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RecipeInstructionWhereUniqueInputSchema),z.lazy(() => RecipeInstructionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RecipeInstructionUpdateWithWhereUniqueWithoutRecipeVersionInputSchema),z.lazy(() => RecipeInstructionUpdateWithWhereUniqueWithoutRecipeVersionInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RecipeInstructionUpdateManyWithWhereWithoutRecipeVersionInputSchema),z.lazy(() => RecipeInstructionUpdateManyWithWhereWithoutRecipeVersionInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RecipeInstructionScalarWhereInputSchema),z.lazy(() => RecipeInstructionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutRecipeVersionsCreatedNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutRecipeVersionsCreatedNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutRecipeVersionsCreatedInputSchema),z.lazy(() => UserUncheckedCreateWithoutRecipeVersionsCreatedInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutRecipeVersionsCreatedInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutRecipeVersionsCreatedInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutRecipeVersionsCreatedInputSchema),z.lazy(() => UserUpdateWithoutRecipeVersionsCreatedInputSchema),z.lazy(() => UserUncheckedUpdateWithoutRecipeVersionsCreatedInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneWithoutRecipeVersionsApprovedNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutRecipeVersionsApprovedNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutRecipeVersionsApprovedInputSchema),z.lazy(() => UserUncheckedCreateWithoutRecipeVersionsApprovedInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutRecipeVersionsApprovedInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutRecipeVersionsApprovedInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutRecipeVersionsApprovedInputSchema),z.lazy(() => UserUpdateWithoutRecipeVersionsApprovedInputSchema),z.lazy(() => UserUncheckedUpdateWithoutRecipeVersionsApprovedInputSchema) ]).optional(),
}).strict();

export const RecipeIngredientUncheckedUpdateManyWithoutRecipeVersionNestedInputSchema: z.ZodType<Prisma.RecipeIngredientUncheckedUpdateManyWithoutRecipeVersionNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeIngredientCreateWithoutRecipeVersionInputSchema),z.lazy(() => RecipeIngredientCreateWithoutRecipeVersionInputSchema).array(),z.lazy(() => RecipeIngredientUncheckedCreateWithoutRecipeVersionInputSchema),z.lazy(() => RecipeIngredientUncheckedCreateWithoutRecipeVersionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeIngredientCreateOrConnectWithoutRecipeVersionInputSchema),z.lazy(() => RecipeIngredientCreateOrConnectWithoutRecipeVersionInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RecipeIngredientUpsertWithWhereUniqueWithoutRecipeVersionInputSchema),z.lazy(() => RecipeIngredientUpsertWithWhereUniqueWithoutRecipeVersionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeIngredientCreateManyRecipeVersionInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RecipeIngredientWhereUniqueInputSchema),z.lazy(() => RecipeIngredientWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RecipeIngredientWhereUniqueInputSchema),z.lazy(() => RecipeIngredientWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RecipeIngredientWhereUniqueInputSchema),z.lazy(() => RecipeIngredientWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RecipeIngredientWhereUniqueInputSchema),z.lazy(() => RecipeIngredientWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RecipeIngredientUpdateWithWhereUniqueWithoutRecipeVersionInputSchema),z.lazy(() => RecipeIngredientUpdateWithWhereUniqueWithoutRecipeVersionInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RecipeIngredientUpdateManyWithWhereWithoutRecipeVersionInputSchema),z.lazy(() => RecipeIngredientUpdateManyWithWhereWithoutRecipeVersionInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RecipeIngredientScalarWhereInputSchema),z.lazy(() => RecipeIngredientScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RecipeInstructionUncheckedUpdateManyWithoutRecipeVersionNestedInputSchema: z.ZodType<Prisma.RecipeInstructionUncheckedUpdateManyWithoutRecipeVersionNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeInstructionCreateWithoutRecipeVersionInputSchema),z.lazy(() => RecipeInstructionCreateWithoutRecipeVersionInputSchema).array(),z.lazy(() => RecipeInstructionUncheckedCreateWithoutRecipeVersionInputSchema),z.lazy(() => RecipeInstructionUncheckedCreateWithoutRecipeVersionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeInstructionCreateOrConnectWithoutRecipeVersionInputSchema),z.lazy(() => RecipeInstructionCreateOrConnectWithoutRecipeVersionInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RecipeInstructionUpsertWithWhereUniqueWithoutRecipeVersionInputSchema),z.lazy(() => RecipeInstructionUpsertWithWhereUniqueWithoutRecipeVersionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeInstructionCreateManyRecipeVersionInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RecipeInstructionWhereUniqueInputSchema),z.lazy(() => RecipeInstructionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RecipeInstructionWhereUniqueInputSchema),z.lazy(() => RecipeInstructionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RecipeInstructionWhereUniqueInputSchema),z.lazy(() => RecipeInstructionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RecipeInstructionWhereUniqueInputSchema),z.lazy(() => RecipeInstructionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RecipeInstructionUpdateWithWhereUniqueWithoutRecipeVersionInputSchema),z.lazy(() => RecipeInstructionUpdateWithWhereUniqueWithoutRecipeVersionInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RecipeInstructionUpdateManyWithWhereWithoutRecipeVersionInputSchema),z.lazy(() => RecipeInstructionUpdateManyWithWhereWithoutRecipeVersionInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RecipeInstructionScalarWhereInputSchema),z.lazy(() => RecipeInstructionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RestaurantCreateNestedOneWithoutEquipmentsInputSchema: z.ZodType<Prisma.RestaurantCreateNestedOneWithoutEquipmentsInput> = z.object({
  create: z.union([ z.lazy(() => RestaurantCreateWithoutEquipmentsInputSchema),z.lazy(() => RestaurantUncheckedCreateWithoutEquipmentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RestaurantCreateOrConnectWithoutEquipmentsInputSchema).optional(),
  connect: z.lazy(() => RestaurantWhereUniqueInputSchema).optional()
}).strict();

export const RecipeEquipmentCreateNestedManyWithoutEquipmentInputSchema: z.ZodType<Prisma.RecipeEquipmentCreateNestedManyWithoutEquipmentInput> = z.object({
  create: z.union([ z.lazy(() => RecipeEquipmentCreateWithoutEquipmentInputSchema),z.lazy(() => RecipeEquipmentCreateWithoutEquipmentInputSchema).array(),z.lazy(() => RecipeEquipmentUncheckedCreateWithoutEquipmentInputSchema),z.lazy(() => RecipeEquipmentUncheckedCreateWithoutEquipmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeEquipmentCreateOrConnectWithoutEquipmentInputSchema),z.lazy(() => RecipeEquipmentCreateOrConnectWithoutEquipmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeEquipmentCreateManyEquipmentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RecipeEquipmentWhereUniqueInputSchema),z.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const MaintenanceLogCreateNestedManyWithoutEquipmentInputSchema: z.ZodType<Prisma.MaintenanceLogCreateNestedManyWithoutEquipmentInput> = z.object({
  create: z.union([ z.lazy(() => MaintenanceLogCreateWithoutEquipmentInputSchema),z.lazy(() => MaintenanceLogCreateWithoutEquipmentInputSchema).array(),z.lazy(() => MaintenanceLogUncheckedCreateWithoutEquipmentInputSchema),z.lazy(() => MaintenanceLogUncheckedCreateWithoutEquipmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MaintenanceLogCreateOrConnectWithoutEquipmentInputSchema),z.lazy(() => MaintenanceLogCreateOrConnectWithoutEquipmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MaintenanceLogCreateManyEquipmentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => MaintenanceLogWhereUniqueInputSchema),z.lazy(() => MaintenanceLogWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RecipeEquipmentUncheckedCreateNestedManyWithoutEquipmentInputSchema: z.ZodType<Prisma.RecipeEquipmentUncheckedCreateNestedManyWithoutEquipmentInput> = z.object({
  create: z.union([ z.lazy(() => RecipeEquipmentCreateWithoutEquipmentInputSchema),z.lazy(() => RecipeEquipmentCreateWithoutEquipmentInputSchema).array(),z.lazy(() => RecipeEquipmentUncheckedCreateWithoutEquipmentInputSchema),z.lazy(() => RecipeEquipmentUncheckedCreateWithoutEquipmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeEquipmentCreateOrConnectWithoutEquipmentInputSchema),z.lazy(() => RecipeEquipmentCreateOrConnectWithoutEquipmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeEquipmentCreateManyEquipmentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RecipeEquipmentWhereUniqueInputSchema),z.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const MaintenanceLogUncheckedCreateNestedManyWithoutEquipmentInputSchema: z.ZodType<Prisma.MaintenanceLogUncheckedCreateNestedManyWithoutEquipmentInput> = z.object({
  create: z.union([ z.lazy(() => MaintenanceLogCreateWithoutEquipmentInputSchema),z.lazy(() => MaintenanceLogCreateWithoutEquipmentInputSchema).array(),z.lazy(() => MaintenanceLogUncheckedCreateWithoutEquipmentInputSchema),z.lazy(() => MaintenanceLogUncheckedCreateWithoutEquipmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MaintenanceLogCreateOrConnectWithoutEquipmentInputSchema),z.lazy(() => MaintenanceLogCreateOrConnectWithoutEquipmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MaintenanceLogCreateManyEquipmentInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => MaintenanceLogWhereUniqueInputSchema),z.lazy(() => MaintenanceLogWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EnumEquipmentStatusFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumEquipmentStatusFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => EquipmentStatusSchema).optional()
}).strict();

export const RestaurantUpdateOneRequiredWithoutEquipmentsNestedInputSchema: z.ZodType<Prisma.RestaurantUpdateOneRequiredWithoutEquipmentsNestedInput> = z.object({
  create: z.union([ z.lazy(() => RestaurantCreateWithoutEquipmentsInputSchema),z.lazy(() => RestaurantUncheckedCreateWithoutEquipmentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RestaurantCreateOrConnectWithoutEquipmentsInputSchema).optional(),
  upsert: z.lazy(() => RestaurantUpsertWithoutEquipmentsInputSchema).optional(),
  connect: z.lazy(() => RestaurantWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RestaurantUpdateToOneWithWhereWithoutEquipmentsInputSchema),z.lazy(() => RestaurantUpdateWithoutEquipmentsInputSchema),z.lazy(() => RestaurantUncheckedUpdateWithoutEquipmentsInputSchema) ]).optional(),
}).strict();

export const RecipeEquipmentUpdateManyWithoutEquipmentNestedInputSchema: z.ZodType<Prisma.RecipeEquipmentUpdateManyWithoutEquipmentNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeEquipmentCreateWithoutEquipmentInputSchema),z.lazy(() => RecipeEquipmentCreateWithoutEquipmentInputSchema).array(),z.lazy(() => RecipeEquipmentUncheckedCreateWithoutEquipmentInputSchema),z.lazy(() => RecipeEquipmentUncheckedCreateWithoutEquipmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeEquipmentCreateOrConnectWithoutEquipmentInputSchema),z.lazy(() => RecipeEquipmentCreateOrConnectWithoutEquipmentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RecipeEquipmentUpsertWithWhereUniqueWithoutEquipmentInputSchema),z.lazy(() => RecipeEquipmentUpsertWithWhereUniqueWithoutEquipmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeEquipmentCreateManyEquipmentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RecipeEquipmentWhereUniqueInputSchema),z.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RecipeEquipmentWhereUniqueInputSchema),z.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RecipeEquipmentWhereUniqueInputSchema),z.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RecipeEquipmentWhereUniqueInputSchema),z.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RecipeEquipmentUpdateWithWhereUniqueWithoutEquipmentInputSchema),z.lazy(() => RecipeEquipmentUpdateWithWhereUniqueWithoutEquipmentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RecipeEquipmentUpdateManyWithWhereWithoutEquipmentInputSchema),z.lazy(() => RecipeEquipmentUpdateManyWithWhereWithoutEquipmentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RecipeEquipmentScalarWhereInputSchema),z.lazy(() => RecipeEquipmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const MaintenanceLogUpdateManyWithoutEquipmentNestedInputSchema: z.ZodType<Prisma.MaintenanceLogUpdateManyWithoutEquipmentNestedInput> = z.object({
  create: z.union([ z.lazy(() => MaintenanceLogCreateWithoutEquipmentInputSchema),z.lazy(() => MaintenanceLogCreateWithoutEquipmentInputSchema).array(),z.lazy(() => MaintenanceLogUncheckedCreateWithoutEquipmentInputSchema),z.lazy(() => MaintenanceLogUncheckedCreateWithoutEquipmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MaintenanceLogCreateOrConnectWithoutEquipmentInputSchema),z.lazy(() => MaintenanceLogCreateOrConnectWithoutEquipmentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MaintenanceLogUpsertWithWhereUniqueWithoutEquipmentInputSchema),z.lazy(() => MaintenanceLogUpsertWithWhereUniqueWithoutEquipmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MaintenanceLogCreateManyEquipmentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => MaintenanceLogWhereUniqueInputSchema),z.lazy(() => MaintenanceLogWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MaintenanceLogWhereUniqueInputSchema),z.lazy(() => MaintenanceLogWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MaintenanceLogWhereUniqueInputSchema),z.lazy(() => MaintenanceLogWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MaintenanceLogWhereUniqueInputSchema),z.lazy(() => MaintenanceLogWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MaintenanceLogUpdateWithWhereUniqueWithoutEquipmentInputSchema),z.lazy(() => MaintenanceLogUpdateWithWhereUniqueWithoutEquipmentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MaintenanceLogUpdateManyWithWhereWithoutEquipmentInputSchema),z.lazy(() => MaintenanceLogUpdateManyWithWhereWithoutEquipmentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MaintenanceLogScalarWhereInputSchema),z.lazy(() => MaintenanceLogScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RecipeEquipmentUncheckedUpdateManyWithoutEquipmentNestedInputSchema: z.ZodType<Prisma.RecipeEquipmentUncheckedUpdateManyWithoutEquipmentNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeEquipmentCreateWithoutEquipmentInputSchema),z.lazy(() => RecipeEquipmentCreateWithoutEquipmentInputSchema).array(),z.lazy(() => RecipeEquipmentUncheckedCreateWithoutEquipmentInputSchema),z.lazy(() => RecipeEquipmentUncheckedCreateWithoutEquipmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeEquipmentCreateOrConnectWithoutEquipmentInputSchema),z.lazy(() => RecipeEquipmentCreateOrConnectWithoutEquipmentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RecipeEquipmentUpsertWithWhereUniqueWithoutEquipmentInputSchema),z.lazy(() => RecipeEquipmentUpsertWithWhereUniqueWithoutEquipmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeEquipmentCreateManyEquipmentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RecipeEquipmentWhereUniqueInputSchema),z.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RecipeEquipmentWhereUniqueInputSchema),z.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RecipeEquipmentWhereUniqueInputSchema),z.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RecipeEquipmentWhereUniqueInputSchema),z.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RecipeEquipmentUpdateWithWhereUniqueWithoutEquipmentInputSchema),z.lazy(() => RecipeEquipmentUpdateWithWhereUniqueWithoutEquipmentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RecipeEquipmentUpdateManyWithWhereWithoutEquipmentInputSchema),z.lazy(() => RecipeEquipmentUpdateManyWithWhereWithoutEquipmentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RecipeEquipmentScalarWhereInputSchema),z.lazy(() => RecipeEquipmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const MaintenanceLogUncheckedUpdateManyWithoutEquipmentNestedInputSchema: z.ZodType<Prisma.MaintenanceLogUncheckedUpdateManyWithoutEquipmentNestedInput> = z.object({
  create: z.union([ z.lazy(() => MaintenanceLogCreateWithoutEquipmentInputSchema),z.lazy(() => MaintenanceLogCreateWithoutEquipmentInputSchema).array(),z.lazy(() => MaintenanceLogUncheckedCreateWithoutEquipmentInputSchema),z.lazy(() => MaintenanceLogUncheckedCreateWithoutEquipmentInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MaintenanceLogCreateOrConnectWithoutEquipmentInputSchema),z.lazy(() => MaintenanceLogCreateOrConnectWithoutEquipmentInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MaintenanceLogUpsertWithWhereUniqueWithoutEquipmentInputSchema),z.lazy(() => MaintenanceLogUpsertWithWhereUniqueWithoutEquipmentInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MaintenanceLogCreateManyEquipmentInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => MaintenanceLogWhereUniqueInputSchema),z.lazy(() => MaintenanceLogWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MaintenanceLogWhereUniqueInputSchema),z.lazy(() => MaintenanceLogWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MaintenanceLogWhereUniqueInputSchema),z.lazy(() => MaintenanceLogWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MaintenanceLogWhereUniqueInputSchema),z.lazy(() => MaintenanceLogWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MaintenanceLogUpdateWithWhereUniqueWithoutEquipmentInputSchema),z.lazy(() => MaintenanceLogUpdateWithWhereUniqueWithoutEquipmentInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MaintenanceLogUpdateManyWithWhereWithoutEquipmentInputSchema),z.lazy(() => MaintenanceLogUpdateManyWithWhereWithoutEquipmentInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MaintenanceLogScalarWhereInputSchema),z.lazy(() => MaintenanceLogScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RecipeCreateNestedOneWithoutEquipmentsInputSchema: z.ZodType<Prisma.RecipeCreateNestedOneWithoutEquipmentsInput> = z.object({
  create: z.union([ z.lazy(() => RecipeCreateWithoutEquipmentsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutEquipmentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RecipeCreateOrConnectWithoutEquipmentsInputSchema).optional(),
  connect: z.lazy(() => RecipeWhereUniqueInputSchema).optional()
}).strict();

export const EquipmentCreateNestedOneWithoutRecipesInputSchema: z.ZodType<Prisma.EquipmentCreateNestedOneWithoutRecipesInput> = z.object({
  create: z.union([ z.lazy(() => EquipmentCreateWithoutRecipesInputSchema),z.lazy(() => EquipmentUncheckedCreateWithoutRecipesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EquipmentCreateOrConnectWithoutRecipesInputSchema).optional(),
  connect: z.lazy(() => EquipmentWhereUniqueInputSchema).optional()
}).strict();

export const RecipeInstructionCreateNestedOneWithoutEquipmentInputSchema: z.ZodType<Prisma.RecipeInstructionCreateNestedOneWithoutEquipmentInput> = z.object({
  create: z.union([ z.lazy(() => RecipeInstructionCreateWithoutEquipmentInputSchema),z.lazy(() => RecipeInstructionUncheckedCreateWithoutEquipmentInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RecipeInstructionCreateOrConnectWithoutEquipmentInputSchema).optional(),
  connect: z.lazy(() => RecipeInstructionWhereUniqueInputSchema).optional()
}).strict();

export const RecipeUpdateOneRequiredWithoutEquipmentsNestedInputSchema: z.ZodType<Prisma.RecipeUpdateOneRequiredWithoutEquipmentsNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeCreateWithoutEquipmentsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutEquipmentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RecipeCreateOrConnectWithoutEquipmentsInputSchema).optional(),
  upsert: z.lazy(() => RecipeUpsertWithoutEquipmentsInputSchema).optional(),
  connect: z.lazy(() => RecipeWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RecipeUpdateToOneWithWhereWithoutEquipmentsInputSchema),z.lazy(() => RecipeUpdateWithoutEquipmentsInputSchema),z.lazy(() => RecipeUncheckedUpdateWithoutEquipmentsInputSchema) ]).optional(),
}).strict();

export const EquipmentUpdateOneRequiredWithoutRecipesNestedInputSchema: z.ZodType<Prisma.EquipmentUpdateOneRequiredWithoutRecipesNestedInput> = z.object({
  create: z.union([ z.lazy(() => EquipmentCreateWithoutRecipesInputSchema),z.lazy(() => EquipmentUncheckedCreateWithoutRecipesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EquipmentCreateOrConnectWithoutRecipesInputSchema).optional(),
  upsert: z.lazy(() => EquipmentUpsertWithoutRecipesInputSchema).optional(),
  connect: z.lazy(() => EquipmentWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => EquipmentUpdateToOneWithWhereWithoutRecipesInputSchema),z.lazy(() => EquipmentUpdateWithoutRecipesInputSchema),z.lazy(() => EquipmentUncheckedUpdateWithoutRecipesInputSchema) ]).optional(),
}).strict();

export const RecipeInstructionUpdateOneWithoutEquipmentNestedInputSchema: z.ZodType<Prisma.RecipeInstructionUpdateOneWithoutEquipmentNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeInstructionCreateWithoutEquipmentInputSchema),z.lazy(() => RecipeInstructionUncheckedCreateWithoutEquipmentInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RecipeInstructionCreateOrConnectWithoutEquipmentInputSchema).optional(),
  upsert: z.lazy(() => RecipeInstructionUpsertWithoutEquipmentInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => RecipeInstructionWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => RecipeInstructionWhereInputSchema) ]).optional(),
  connect: z.lazy(() => RecipeInstructionWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RecipeInstructionUpdateToOneWithWhereWithoutEquipmentInputSchema),z.lazy(() => RecipeInstructionUpdateWithoutEquipmentInputSchema),z.lazy(() => RecipeInstructionUncheckedUpdateWithoutEquipmentInputSchema) ]).optional(),
}).strict();

export const EquipmentCreateNestedOneWithoutMaintenanceLogsInputSchema: z.ZodType<Prisma.EquipmentCreateNestedOneWithoutMaintenanceLogsInput> = z.object({
  create: z.union([ z.lazy(() => EquipmentCreateWithoutMaintenanceLogsInputSchema),z.lazy(() => EquipmentUncheckedCreateWithoutMaintenanceLogsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EquipmentCreateOrConnectWithoutMaintenanceLogsInputSchema).optional(),
  connect: z.lazy(() => EquipmentWhereUniqueInputSchema).optional()
}).strict();

export const EnumMaintenanceTypeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumMaintenanceTypeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => MaintenanceTypeSchema).optional()
}).strict();

export const EquipmentUpdateOneRequiredWithoutMaintenanceLogsNestedInputSchema: z.ZodType<Prisma.EquipmentUpdateOneRequiredWithoutMaintenanceLogsNestedInput> = z.object({
  create: z.union([ z.lazy(() => EquipmentCreateWithoutMaintenanceLogsInputSchema),z.lazy(() => EquipmentUncheckedCreateWithoutMaintenanceLogsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EquipmentCreateOrConnectWithoutMaintenanceLogsInputSchema).optional(),
  upsert: z.lazy(() => EquipmentUpsertWithoutMaintenanceLogsInputSchema).optional(),
  connect: z.lazy(() => EquipmentWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => EquipmentUpdateToOneWithWhereWithoutMaintenanceLogsInputSchema),z.lazy(() => EquipmentUpdateWithoutMaintenanceLogsInputSchema),z.lazy(() => EquipmentUncheckedUpdateWithoutMaintenanceLogsInputSchema) ]).optional(),
}).strict();

export const RestaurantCreateNestedOneWithoutQualityChecklistsInputSchema: z.ZodType<Prisma.RestaurantCreateNestedOneWithoutQualityChecklistsInput> = z.object({
  create: z.union([ z.lazy(() => RestaurantCreateWithoutQualityChecklistsInputSchema),z.lazy(() => RestaurantUncheckedCreateWithoutQualityChecklistsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RestaurantCreateOrConnectWithoutQualityChecklistsInputSchema).optional(),
  connect: z.lazy(() => RestaurantWhereUniqueInputSchema).optional()
}).strict();

export const ChecklistItemCreateNestedManyWithoutChecklistInputSchema: z.ZodType<Prisma.ChecklistItemCreateNestedManyWithoutChecklistInput> = z.object({
  create: z.union([ z.lazy(() => ChecklistItemCreateWithoutChecklistInputSchema),z.lazy(() => ChecklistItemCreateWithoutChecklistInputSchema).array(),z.lazy(() => ChecklistItemUncheckedCreateWithoutChecklistInputSchema),z.lazy(() => ChecklistItemUncheckedCreateWithoutChecklistInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ChecklistItemCreateOrConnectWithoutChecklistInputSchema),z.lazy(() => ChecklistItemCreateOrConnectWithoutChecklistInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ChecklistItemCreateManyChecklistInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ChecklistItemWhereUniqueInputSchema),z.lazy(() => ChecklistItemWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ChecklistCompleteCreateNestedManyWithoutChecklistInputSchema: z.ZodType<Prisma.ChecklistCompleteCreateNestedManyWithoutChecklistInput> = z.object({
  create: z.union([ z.lazy(() => ChecklistCompleteCreateWithoutChecklistInputSchema),z.lazy(() => ChecklistCompleteCreateWithoutChecklistInputSchema).array(),z.lazy(() => ChecklistCompleteUncheckedCreateWithoutChecklistInputSchema),z.lazy(() => ChecklistCompleteUncheckedCreateWithoutChecklistInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ChecklistCompleteCreateOrConnectWithoutChecklistInputSchema),z.lazy(() => ChecklistCompleteCreateOrConnectWithoutChecklistInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ChecklistCompleteCreateManyChecklistInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ChecklistCompleteWhereUniqueInputSchema),z.lazy(() => ChecklistCompleteWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ChecklistItemUncheckedCreateNestedManyWithoutChecklistInputSchema: z.ZodType<Prisma.ChecklistItemUncheckedCreateNestedManyWithoutChecklistInput> = z.object({
  create: z.union([ z.lazy(() => ChecklistItemCreateWithoutChecklistInputSchema),z.lazy(() => ChecklistItemCreateWithoutChecklistInputSchema).array(),z.lazy(() => ChecklistItemUncheckedCreateWithoutChecklistInputSchema),z.lazy(() => ChecklistItemUncheckedCreateWithoutChecklistInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ChecklistItemCreateOrConnectWithoutChecklistInputSchema),z.lazy(() => ChecklistItemCreateOrConnectWithoutChecklistInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ChecklistItemCreateManyChecklistInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ChecklistItemWhereUniqueInputSchema),z.lazy(() => ChecklistItemWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ChecklistCompleteUncheckedCreateNestedManyWithoutChecklistInputSchema: z.ZodType<Prisma.ChecklistCompleteUncheckedCreateNestedManyWithoutChecklistInput> = z.object({
  create: z.union([ z.lazy(() => ChecklistCompleteCreateWithoutChecklistInputSchema),z.lazy(() => ChecklistCompleteCreateWithoutChecklistInputSchema).array(),z.lazy(() => ChecklistCompleteUncheckedCreateWithoutChecklistInputSchema),z.lazy(() => ChecklistCompleteUncheckedCreateWithoutChecklistInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ChecklistCompleteCreateOrConnectWithoutChecklistInputSchema),z.lazy(() => ChecklistCompleteCreateOrConnectWithoutChecklistInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ChecklistCompleteCreateManyChecklistInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ChecklistCompleteWhereUniqueInputSchema),z.lazy(() => ChecklistCompleteWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EnumChecklistFrequencyFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumChecklistFrequencyFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => ChecklistFrequencySchema).optional()
}).strict();

export const RestaurantUpdateOneRequiredWithoutQualityChecklistsNestedInputSchema: z.ZodType<Prisma.RestaurantUpdateOneRequiredWithoutQualityChecklistsNestedInput> = z.object({
  create: z.union([ z.lazy(() => RestaurantCreateWithoutQualityChecklistsInputSchema),z.lazy(() => RestaurantUncheckedCreateWithoutQualityChecklistsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RestaurantCreateOrConnectWithoutQualityChecklistsInputSchema).optional(),
  upsert: z.lazy(() => RestaurantUpsertWithoutQualityChecklistsInputSchema).optional(),
  connect: z.lazy(() => RestaurantWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RestaurantUpdateToOneWithWhereWithoutQualityChecklistsInputSchema),z.lazy(() => RestaurantUpdateWithoutQualityChecklistsInputSchema),z.lazy(() => RestaurantUncheckedUpdateWithoutQualityChecklistsInputSchema) ]).optional(),
}).strict();

export const ChecklistItemUpdateManyWithoutChecklistNestedInputSchema: z.ZodType<Prisma.ChecklistItemUpdateManyWithoutChecklistNestedInput> = z.object({
  create: z.union([ z.lazy(() => ChecklistItemCreateWithoutChecklistInputSchema),z.lazy(() => ChecklistItemCreateWithoutChecklistInputSchema).array(),z.lazy(() => ChecklistItemUncheckedCreateWithoutChecklistInputSchema),z.lazy(() => ChecklistItemUncheckedCreateWithoutChecklistInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ChecklistItemCreateOrConnectWithoutChecklistInputSchema),z.lazy(() => ChecklistItemCreateOrConnectWithoutChecklistInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ChecklistItemUpsertWithWhereUniqueWithoutChecklistInputSchema),z.lazy(() => ChecklistItemUpsertWithWhereUniqueWithoutChecklistInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ChecklistItemCreateManyChecklistInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ChecklistItemWhereUniqueInputSchema),z.lazy(() => ChecklistItemWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ChecklistItemWhereUniqueInputSchema),z.lazy(() => ChecklistItemWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ChecklistItemWhereUniqueInputSchema),z.lazy(() => ChecklistItemWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ChecklistItemWhereUniqueInputSchema),z.lazy(() => ChecklistItemWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ChecklistItemUpdateWithWhereUniqueWithoutChecklistInputSchema),z.lazy(() => ChecklistItemUpdateWithWhereUniqueWithoutChecklistInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ChecklistItemUpdateManyWithWhereWithoutChecklistInputSchema),z.lazy(() => ChecklistItemUpdateManyWithWhereWithoutChecklistInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ChecklistItemScalarWhereInputSchema),z.lazy(() => ChecklistItemScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ChecklistCompleteUpdateManyWithoutChecklistNestedInputSchema: z.ZodType<Prisma.ChecklistCompleteUpdateManyWithoutChecklistNestedInput> = z.object({
  create: z.union([ z.lazy(() => ChecklistCompleteCreateWithoutChecklistInputSchema),z.lazy(() => ChecklistCompleteCreateWithoutChecklistInputSchema).array(),z.lazy(() => ChecklistCompleteUncheckedCreateWithoutChecklistInputSchema),z.lazy(() => ChecklistCompleteUncheckedCreateWithoutChecklistInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ChecklistCompleteCreateOrConnectWithoutChecklistInputSchema),z.lazy(() => ChecklistCompleteCreateOrConnectWithoutChecklistInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ChecklistCompleteUpsertWithWhereUniqueWithoutChecklistInputSchema),z.lazy(() => ChecklistCompleteUpsertWithWhereUniqueWithoutChecklistInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ChecklistCompleteCreateManyChecklistInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ChecklistCompleteWhereUniqueInputSchema),z.lazy(() => ChecklistCompleteWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ChecklistCompleteWhereUniqueInputSchema),z.lazy(() => ChecklistCompleteWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ChecklistCompleteWhereUniqueInputSchema),z.lazy(() => ChecklistCompleteWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ChecklistCompleteWhereUniqueInputSchema),z.lazy(() => ChecklistCompleteWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ChecklistCompleteUpdateWithWhereUniqueWithoutChecklistInputSchema),z.lazy(() => ChecklistCompleteUpdateWithWhereUniqueWithoutChecklistInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ChecklistCompleteUpdateManyWithWhereWithoutChecklistInputSchema),z.lazy(() => ChecklistCompleteUpdateManyWithWhereWithoutChecklistInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ChecklistCompleteScalarWhereInputSchema),z.lazy(() => ChecklistCompleteScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ChecklistItemUncheckedUpdateManyWithoutChecklistNestedInputSchema: z.ZodType<Prisma.ChecklistItemUncheckedUpdateManyWithoutChecklistNestedInput> = z.object({
  create: z.union([ z.lazy(() => ChecklistItemCreateWithoutChecklistInputSchema),z.lazy(() => ChecklistItemCreateWithoutChecklistInputSchema).array(),z.lazy(() => ChecklistItemUncheckedCreateWithoutChecklistInputSchema),z.lazy(() => ChecklistItemUncheckedCreateWithoutChecklistInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ChecklistItemCreateOrConnectWithoutChecklistInputSchema),z.lazy(() => ChecklistItemCreateOrConnectWithoutChecklistInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ChecklistItemUpsertWithWhereUniqueWithoutChecklistInputSchema),z.lazy(() => ChecklistItemUpsertWithWhereUniqueWithoutChecklistInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ChecklistItemCreateManyChecklistInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ChecklistItemWhereUniqueInputSchema),z.lazy(() => ChecklistItemWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ChecklistItemWhereUniqueInputSchema),z.lazy(() => ChecklistItemWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ChecklistItemWhereUniqueInputSchema),z.lazy(() => ChecklistItemWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ChecklistItemWhereUniqueInputSchema),z.lazy(() => ChecklistItemWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ChecklistItemUpdateWithWhereUniqueWithoutChecklistInputSchema),z.lazy(() => ChecklistItemUpdateWithWhereUniqueWithoutChecklistInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ChecklistItemUpdateManyWithWhereWithoutChecklistInputSchema),z.lazy(() => ChecklistItemUpdateManyWithWhereWithoutChecklistInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ChecklistItemScalarWhereInputSchema),z.lazy(() => ChecklistItemScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ChecklistCompleteUncheckedUpdateManyWithoutChecklistNestedInputSchema: z.ZodType<Prisma.ChecklistCompleteUncheckedUpdateManyWithoutChecklistNestedInput> = z.object({
  create: z.union([ z.lazy(() => ChecklistCompleteCreateWithoutChecklistInputSchema),z.lazy(() => ChecklistCompleteCreateWithoutChecklistInputSchema).array(),z.lazy(() => ChecklistCompleteUncheckedCreateWithoutChecklistInputSchema),z.lazy(() => ChecklistCompleteUncheckedCreateWithoutChecklistInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ChecklistCompleteCreateOrConnectWithoutChecklistInputSchema),z.lazy(() => ChecklistCompleteCreateOrConnectWithoutChecklistInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ChecklistCompleteUpsertWithWhereUniqueWithoutChecklistInputSchema),z.lazy(() => ChecklistCompleteUpsertWithWhereUniqueWithoutChecklistInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ChecklistCompleteCreateManyChecklistInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ChecklistCompleteWhereUniqueInputSchema),z.lazy(() => ChecklistCompleteWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ChecklistCompleteWhereUniqueInputSchema),z.lazy(() => ChecklistCompleteWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ChecklistCompleteWhereUniqueInputSchema),z.lazy(() => ChecklistCompleteWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ChecklistCompleteWhereUniqueInputSchema),z.lazy(() => ChecklistCompleteWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ChecklistCompleteUpdateWithWhereUniqueWithoutChecklistInputSchema),z.lazy(() => ChecklistCompleteUpdateWithWhereUniqueWithoutChecklistInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ChecklistCompleteUpdateManyWithWhereWithoutChecklistInputSchema),z.lazy(() => ChecklistCompleteUpdateManyWithWhereWithoutChecklistInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ChecklistCompleteScalarWhereInputSchema),z.lazy(() => ChecklistCompleteScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const QualityChecklistCreateNestedOneWithoutItemsInputSchema: z.ZodType<Prisma.QualityChecklistCreateNestedOneWithoutItemsInput> = z.object({
  create: z.union([ z.lazy(() => QualityChecklistCreateWithoutItemsInputSchema),z.lazy(() => QualityChecklistUncheckedCreateWithoutItemsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => QualityChecklistCreateOrConnectWithoutItemsInputSchema).optional(),
  connect: z.lazy(() => QualityChecklistWhereUniqueInputSchema).optional()
}).strict();

export const ChecklistItemCompleteCreateNestedManyWithoutChecklistItemInputSchema: z.ZodType<Prisma.ChecklistItemCompleteCreateNestedManyWithoutChecklistItemInput> = z.object({
  create: z.union([ z.lazy(() => ChecklistItemCompleteCreateWithoutChecklistItemInputSchema),z.lazy(() => ChecklistItemCompleteCreateWithoutChecklistItemInputSchema).array(),z.lazy(() => ChecklistItemCompleteUncheckedCreateWithoutChecklistItemInputSchema),z.lazy(() => ChecklistItemCompleteUncheckedCreateWithoutChecklistItemInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ChecklistItemCompleteCreateOrConnectWithoutChecklistItemInputSchema),z.lazy(() => ChecklistItemCompleteCreateOrConnectWithoutChecklistItemInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ChecklistItemCompleteCreateManyChecklistItemInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema),z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ChecklistItemCompleteUncheckedCreateNestedManyWithoutChecklistItemInputSchema: z.ZodType<Prisma.ChecklistItemCompleteUncheckedCreateNestedManyWithoutChecklistItemInput> = z.object({
  create: z.union([ z.lazy(() => ChecklistItemCompleteCreateWithoutChecklistItemInputSchema),z.lazy(() => ChecklistItemCompleteCreateWithoutChecklistItemInputSchema).array(),z.lazy(() => ChecklistItemCompleteUncheckedCreateWithoutChecklistItemInputSchema),z.lazy(() => ChecklistItemCompleteUncheckedCreateWithoutChecklistItemInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ChecklistItemCompleteCreateOrConnectWithoutChecklistItemInputSchema),z.lazy(() => ChecklistItemCompleteCreateOrConnectWithoutChecklistItemInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ChecklistItemCompleteCreateManyChecklistItemInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema),z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EnumChecklistItemTypeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumChecklistItemTypeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => ChecklistItemTypeSchema).optional()
}).strict();

export const QualityChecklistUpdateOneRequiredWithoutItemsNestedInputSchema: z.ZodType<Prisma.QualityChecklistUpdateOneRequiredWithoutItemsNestedInput> = z.object({
  create: z.union([ z.lazy(() => QualityChecklistCreateWithoutItemsInputSchema),z.lazy(() => QualityChecklistUncheckedCreateWithoutItemsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => QualityChecklistCreateOrConnectWithoutItemsInputSchema).optional(),
  upsert: z.lazy(() => QualityChecklistUpsertWithoutItemsInputSchema).optional(),
  connect: z.lazy(() => QualityChecklistWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => QualityChecklistUpdateToOneWithWhereWithoutItemsInputSchema),z.lazy(() => QualityChecklistUpdateWithoutItemsInputSchema),z.lazy(() => QualityChecklistUncheckedUpdateWithoutItemsInputSchema) ]).optional(),
}).strict();

export const ChecklistItemCompleteUpdateManyWithoutChecklistItemNestedInputSchema: z.ZodType<Prisma.ChecklistItemCompleteUpdateManyWithoutChecklistItemNestedInput> = z.object({
  create: z.union([ z.lazy(() => ChecklistItemCompleteCreateWithoutChecklistItemInputSchema),z.lazy(() => ChecklistItemCompleteCreateWithoutChecklistItemInputSchema).array(),z.lazy(() => ChecklistItemCompleteUncheckedCreateWithoutChecklistItemInputSchema),z.lazy(() => ChecklistItemCompleteUncheckedCreateWithoutChecklistItemInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ChecklistItemCompleteCreateOrConnectWithoutChecklistItemInputSchema),z.lazy(() => ChecklistItemCompleteCreateOrConnectWithoutChecklistItemInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ChecklistItemCompleteUpsertWithWhereUniqueWithoutChecklistItemInputSchema),z.lazy(() => ChecklistItemCompleteUpsertWithWhereUniqueWithoutChecklistItemInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ChecklistItemCompleteCreateManyChecklistItemInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema),z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema),z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema),z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema),z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ChecklistItemCompleteUpdateWithWhereUniqueWithoutChecklistItemInputSchema),z.lazy(() => ChecklistItemCompleteUpdateWithWhereUniqueWithoutChecklistItemInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ChecklistItemCompleteUpdateManyWithWhereWithoutChecklistItemInputSchema),z.lazy(() => ChecklistItemCompleteUpdateManyWithWhereWithoutChecklistItemInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ChecklistItemCompleteScalarWhereInputSchema),z.lazy(() => ChecklistItemCompleteScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ChecklistItemCompleteUncheckedUpdateManyWithoutChecklistItemNestedInputSchema: z.ZodType<Prisma.ChecklistItemCompleteUncheckedUpdateManyWithoutChecklistItemNestedInput> = z.object({
  create: z.union([ z.lazy(() => ChecklistItemCompleteCreateWithoutChecklistItemInputSchema),z.lazy(() => ChecklistItemCompleteCreateWithoutChecklistItemInputSchema).array(),z.lazy(() => ChecklistItemCompleteUncheckedCreateWithoutChecklistItemInputSchema),z.lazy(() => ChecklistItemCompleteUncheckedCreateWithoutChecklistItemInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ChecklistItemCompleteCreateOrConnectWithoutChecklistItemInputSchema),z.lazy(() => ChecklistItemCompleteCreateOrConnectWithoutChecklistItemInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ChecklistItemCompleteUpsertWithWhereUniqueWithoutChecklistItemInputSchema),z.lazy(() => ChecklistItemCompleteUpsertWithWhereUniqueWithoutChecklistItemInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ChecklistItemCompleteCreateManyChecklistItemInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema),z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema),z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema),z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema),z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ChecklistItemCompleteUpdateWithWhereUniqueWithoutChecklistItemInputSchema),z.lazy(() => ChecklistItemCompleteUpdateWithWhereUniqueWithoutChecklistItemInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ChecklistItemCompleteUpdateManyWithWhereWithoutChecklistItemInputSchema),z.lazy(() => ChecklistItemCompleteUpdateManyWithWhereWithoutChecklistItemInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ChecklistItemCompleteScalarWhereInputSchema),z.lazy(() => ChecklistItemCompleteScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const QualityChecklistCreateNestedOneWithoutCompletionsInputSchema: z.ZodType<Prisma.QualityChecklistCreateNestedOneWithoutCompletionsInput> = z.object({
  create: z.union([ z.lazy(() => QualityChecklistCreateWithoutCompletionsInputSchema),z.lazy(() => QualityChecklistUncheckedCreateWithoutCompletionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => QualityChecklistCreateOrConnectWithoutCompletionsInputSchema).optional(),
  connect: z.lazy(() => QualityChecklistWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutChecklistCompletesInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutChecklistCompletesInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutChecklistCompletesInputSchema),z.lazy(() => UserUncheckedCreateWithoutChecklistCompletesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutChecklistCompletesInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const ChecklistItemCompleteCreateNestedManyWithoutChecklistCompleteInputSchema: z.ZodType<Prisma.ChecklistItemCompleteCreateNestedManyWithoutChecklistCompleteInput> = z.object({
  create: z.union([ z.lazy(() => ChecklistItemCompleteCreateWithoutChecklistCompleteInputSchema),z.lazy(() => ChecklistItemCompleteCreateWithoutChecklistCompleteInputSchema).array(),z.lazy(() => ChecklistItemCompleteUncheckedCreateWithoutChecklistCompleteInputSchema),z.lazy(() => ChecklistItemCompleteUncheckedCreateWithoutChecklistCompleteInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ChecklistItemCompleteCreateOrConnectWithoutChecklistCompleteInputSchema),z.lazy(() => ChecklistItemCompleteCreateOrConnectWithoutChecklistCompleteInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ChecklistItemCompleteCreateManyChecklistCompleteInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema),z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ChecklistItemCompleteUncheckedCreateNestedManyWithoutChecklistCompleteInputSchema: z.ZodType<Prisma.ChecklistItemCompleteUncheckedCreateNestedManyWithoutChecklistCompleteInput> = z.object({
  create: z.union([ z.lazy(() => ChecklistItemCompleteCreateWithoutChecklistCompleteInputSchema),z.lazy(() => ChecklistItemCompleteCreateWithoutChecklistCompleteInputSchema).array(),z.lazy(() => ChecklistItemCompleteUncheckedCreateWithoutChecklistCompleteInputSchema),z.lazy(() => ChecklistItemCompleteUncheckedCreateWithoutChecklistCompleteInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ChecklistItemCompleteCreateOrConnectWithoutChecklistCompleteInputSchema),z.lazy(() => ChecklistItemCompleteCreateOrConnectWithoutChecklistCompleteInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ChecklistItemCompleteCreateManyChecklistCompleteInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema),z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const QualityChecklistUpdateOneRequiredWithoutCompletionsNestedInputSchema: z.ZodType<Prisma.QualityChecklistUpdateOneRequiredWithoutCompletionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => QualityChecklistCreateWithoutCompletionsInputSchema),z.lazy(() => QualityChecklistUncheckedCreateWithoutCompletionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => QualityChecklistCreateOrConnectWithoutCompletionsInputSchema).optional(),
  upsert: z.lazy(() => QualityChecklistUpsertWithoutCompletionsInputSchema).optional(),
  connect: z.lazy(() => QualityChecklistWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => QualityChecklistUpdateToOneWithWhereWithoutCompletionsInputSchema),z.lazy(() => QualityChecklistUpdateWithoutCompletionsInputSchema),z.lazy(() => QualityChecklistUncheckedUpdateWithoutCompletionsInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutChecklistCompletesNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutChecklistCompletesNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutChecklistCompletesInputSchema),z.lazy(() => UserUncheckedCreateWithoutChecklistCompletesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutChecklistCompletesInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutChecklistCompletesInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutChecklistCompletesInputSchema),z.lazy(() => UserUpdateWithoutChecklistCompletesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutChecklistCompletesInputSchema) ]).optional(),
}).strict();

export const ChecklistItemCompleteUpdateManyWithoutChecklistCompleteNestedInputSchema: z.ZodType<Prisma.ChecklistItemCompleteUpdateManyWithoutChecklistCompleteNestedInput> = z.object({
  create: z.union([ z.lazy(() => ChecklistItemCompleteCreateWithoutChecklistCompleteInputSchema),z.lazy(() => ChecklistItemCompleteCreateWithoutChecklistCompleteInputSchema).array(),z.lazy(() => ChecklistItemCompleteUncheckedCreateWithoutChecklistCompleteInputSchema),z.lazy(() => ChecklistItemCompleteUncheckedCreateWithoutChecklistCompleteInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ChecklistItemCompleteCreateOrConnectWithoutChecklistCompleteInputSchema),z.lazy(() => ChecklistItemCompleteCreateOrConnectWithoutChecklistCompleteInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ChecklistItemCompleteUpsertWithWhereUniqueWithoutChecklistCompleteInputSchema),z.lazy(() => ChecklistItemCompleteUpsertWithWhereUniqueWithoutChecklistCompleteInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ChecklistItemCompleteCreateManyChecklistCompleteInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema),z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema),z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema),z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema),z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ChecklistItemCompleteUpdateWithWhereUniqueWithoutChecklistCompleteInputSchema),z.lazy(() => ChecklistItemCompleteUpdateWithWhereUniqueWithoutChecklistCompleteInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ChecklistItemCompleteUpdateManyWithWhereWithoutChecklistCompleteInputSchema),z.lazy(() => ChecklistItemCompleteUpdateManyWithWhereWithoutChecklistCompleteInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ChecklistItemCompleteScalarWhereInputSchema),z.lazy(() => ChecklistItemCompleteScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ChecklistItemCompleteUncheckedUpdateManyWithoutChecklistCompleteNestedInputSchema: z.ZodType<Prisma.ChecklistItemCompleteUncheckedUpdateManyWithoutChecklistCompleteNestedInput> = z.object({
  create: z.union([ z.lazy(() => ChecklistItemCompleteCreateWithoutChecklistCompleteInputSchema),z.lazy(() => ChecklistItemCompleteCreateWithoutChecklistCompleteInputSchema).array(),z.lazy(() => ChecklistItemCompleteUncheckedCreateWithoutChecklistCompleteInputSchema),z.lazy(() => ChecklistItemCompleteUncheckedCreateWithoutChecklistCompleteInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ChecklistItemCompleteCreateOrConnectWithoutChecklistCompleteInputSchema),z.lazy(() => ChecklistItemCompleteCreateOrConnectWithoutChecklistCompleteInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ChecklistItemCompleteUpsertWithWhereUniqueWithoutChecklistCompleteInputSchema),z.lazy(() => ChecklistItemCompleteUpsertWithWhereUniqueWithoutChecklistCompleteInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ChecklistItemCompleteCreateManyChecklistCompleteInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema),z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema),z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema),z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema),z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ChecklistItemCompleteUpdateWithWhereUniqueWithoutChecklistCompleteInputSchema),z.lazy(() => ChecklistItemCompleteUpdateWithWhereUniqueWithoutChecklistCompleteInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ChecklistItemCompleteUpdateManyWithWhereWithoutChecklistCompleteInputSchema),z.lazy(() => ChecklistItemCompleteUpdateManyWithWhereWithoutChecklistCompleteInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ChecklistItemCompleteScalarWhereInputSchema),z.lazy(() => ChecklistItemCompleteScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ChecklistItemCompleteCreatephotoUrlsInputSchema: z.ZodType<Prisma.ChecklistItemCompleteCreatephotoUrlsInput> = z.object({
  set: z.string().array()
}).strict();

export const ChecklistCompleteCreateNestedOneWithoutItemsInputSchema: z.ZodType<Prisma.ChecklistCompleteCreateNestedOneWithoutItemsInput> = z.object({
  create: z.union([ z.lazy(() => ChecklistCompleteCreateWithoutItemsInputSchema),z.lazy(() => ChecklistCompleteUncheckedCreateWithoutItemsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ChecklistCompleteCreateOrConnectWithoutItemsInputSchema).optional(),
  connect: z.lazy(() => ChecklistCompleteWhereUniqueInputSchema).optional()
}).strict();

export const ChecklistItemCreateNestedOneWithoutCompletionsInputSchema: z.ZodType<Prisma.ChecklistItemCreateNestedOneWithoutCompletionsInput> = z.object({
  create: z.union([ z.lazy(() => ChecklistItemCreateWithoutCompletionsInputSchema),z.lazy(() => ChecklistItemUncheckedCreateWithoutCompletionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ChecklistItemCreateOrConnectWithoutCompletionsInputSchema).optional(),
  connect: z.lazy(() => ChecklistItemWhereUniqueInputSchema).optional()
}).strict();

export const EnumChecklistStatusFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumChecklistStatusFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => ChecklistStatusSchema).optional()
}).strict();

export const ChecklistItemCompleteUpdatephotoUrlsInputSchema: z.ZodType<Prisma.ChecklistItemCompleteUpdatephotoUrlsInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const ChecklistCompleteUpdateOneRequiredWithoutItemsNestedInputSchema: z.ZodType<Prisma.ChecklistCompleteUpdateOneRequiredWithoutItemsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ChecklistCompleteCreateWithoutItemsInputSchema),z.lazy(() => ChecklistCompleteUncheckedCreateWithoutItemsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ChecklistCompleteCreateOrConnectWithoutItemsInputSchema).optional(),
  upsert: z.lazy(() => ChecklistCompleteUpsertWithoutItemsInputSchema).optional(),
  connect: z.lazy(() => ChecklistCompleteWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ChecklistCompleteUpdateToOneWithWhereWithoutItemsInputSchema),z.lazy(() => ChecklistCompleteUpdateWithoutItemsInputSchema),z.lazy(() => ChecklistCompleteUncheckedUpdateWithoutItemsInputSchema) ]).optional(),
}).strict();

export const ChecklistItemUpdateOneRequiredWithoutCompletionsNestedInputSchema: z.ZodType<Prisma.ChecklistItemUpdateOneRequiredWithoutCompletionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ChecklistItemCreateWithoutCompletionsInputSchema),z.lazy(() => ChecklistItemUncheckedCreateWithoutCompletionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ChecklistItemCreateOrConnectWithoutCompletionsInputSchema).optional(),
  upsert: z.lazy(() => ChecklistItemUpsertWithoutCompletionsInputSchema).optional(),
  connect: z.lazy(() => ChecklistItemWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ChecklistItemUpdateToOneWithWhereWithoutCompletionsInputSchema),z.lazy(() => ChecklistItemUpdateWithoutCompletionsInputSchema),z.lazy(() => ChecklistItemUncheckedUpdateWithoutCompletionsInputSchema) ]).optional(),
}).strict();

export const VendorCreateNestedOneWithoutSupplierPriceHistoryInputSchema: z.ZodType<Prisma.VendorCreateNestedOneWithoutSupplierPriceHistoryInput> = z.object({
  create: z.union([ z.lazy(() => VendorCreateWithoutSupplierPriceHistoryInputSchema),z.lazy(() => VendorUncheckedCreateWithoutSupplierPriceHistoryInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => VendorCreateOrConnectWithoutSupplierPriceHistoryInputSchema).optional(),
  connect: z.lazy(() => VendorWhereUniqueInputSchema).optional()
}).strict();

export const IngredientCreateNestedOneWithoutPriceHistoryInputSchema: z.ZodType<Prisma.IngredientCreateNestedOneWithoutPriceHistoryInput> = z.object({
  create: z.union([ z.lazy(() => IngredientCreateWithoutPriceHistoryInputSchema),z.lazy(() => IngredientUncheckedCreateWithoutPriceHistoryInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => IngredientCreateOrConnectWithoutPriceHistoryInputSchema).optional(),
  connect: z.lazy(() => IngredientWhereUniqueInputSchema).optional()
}).strict();

export const VendorUpdateOneRequiredWithoutSupplierPriceHistoryNestedInputSchema: z.ZodType<Prisma.VendorUpdateOneRequiredWithoutSupplierPriceHistoryNestedInput> = z.object({
  create: z.union([ z.lazy(() => VendorCreateWithoutSupplierPriceHistoryInputSchema),z.lazy(() => VendorUncheckedCreateWithoutSupplierPriceHistoryInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => VendorCreateOrConnectWithoutSupplierPriceHistoryInputSchema).optional(),
  upsert: z.lazy(() => VendorUpsertWithoutSupplierPriceHistoryInputSchema).optional(),
  connect: z.lazy(() => VendorWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => VendorUpdateToOneWithWhereWithoutSupplierPriceHistoryInputSchema),z.lazy(() => VendorUpdateWithoutSupplierPriceHistoryInputSchema),z.lazy(() => VendorUncheckedUpdateWithoutSupplierPriceHistoryInputSchema) ]).optional(),
}).strict();

export const IngredientUpdateOneRequiredWithoutPriceHistoryNestedInputSchema: z.ZodType<Prisma.IngredientUpdateOneRequiredWithoutPriceHistoryNestedInput> = z.object({
  create: z.union([ z.lazy(() => IngredientCreateWithoutPriceHistoryInputSchema),z.lazy(() => IngredientUncheckedCreateWithoutPriceHistoryInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => IngredientCreateOrConnectWithoutPriceHistoryInputSchema).optional(),
  upsert: z.lazy(() => IngredientUpsertWithoutPriceHistoryInputSchema).optional(),
  connect: z.lazy(() => IngredientWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => IngredientUpdateToOneWithWhereWithoutPriceHistoryInputSchema),z.lazy(() => IngredientUpdateWithoutPriceHistoryInputSchema),z.lazy(() => IngredientUncheckedUpdateWithoutPriceHistoryInputSchema) ]).optional(),
}).strict();

export const CustomerFeedbackCreatetagsInputSchema: z.ZodType<Prisma.CustomerFeedbackCreatetagsInput> = z.object({
  set: z.string().array()
}).strict();

export const RestaurantCreateNestedOneWithoutCustomerFeedbacksInputSchema: z.ZodType<Prisma.RestaurantCreateNestedOneWithoutCustomerFeedbacksInput> = z.object({
  create: z.union([ z.lazy(() => RestaurantCreateWithoutCustomerFeedbacksInputSchema),z.lazy(() => RestaurantUncheckedCreateWithoutCustomerFeedbacksInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RestaurantCreateOrConnectWithoutCustomerFeedbacksInputSchema).optional(),
  connect: z.lazy(() => RestaurantWhereUniqueInputSchema).optional()
}).strict();

export const MenuItemCreateNestedOneWithoutFeedbackInputSchema: z.ZodType<Prisma.MenuItemCreateNestedOneWithoutFeedbackInput> = z.object({
  create: z.union([ z.lazy(() => MenuItemCreateWithoutFeedbackInputSchema),z.lazy(() => MenuItemUncheckedCreateWithoutFeedbackInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => MenuItemCreateOrConnectWithoutFeedbackInputSchema).optional(),
  connect: z.lazy(() => MenuItemWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutCustomerFeedbackResponsesInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutCustomerFeedbackResponsesInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutCustomerFeedbackResponsesInputSchema),z.lazy(() => UserUncheckedCreateWithoutCustomerFeedbackResponsesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutCustomerFeedbackResponsesInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const EnumFeedbackSourceFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumFeedbackSourceFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => FeedbackSourceSchema).optional()
}).strict();

export const CustomerFeedbackUpdatetagsInputSchema: z.ZodType<Prisma.CustomerFeedbackUpdatetagsInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const EnumFeedbackStatusFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumFeedbackStatusFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => FeedbackStatusSchema).optional()
}).strict();

export const RestaurantUpdateOneRequiredWithoutCustomerFeedbacksNestedInputSchema: z.ZodType<Prisma.RestaurantUpdateOneRequiredWithoutCustomerFeedbacksNestedInput> = z.object({
  create: z.union([ z.lazy(() => RestaurantCreateWithoutCustomerFeedbacksInputSchema),z.lazy(() => RestaurantUncheckedCreateWithoutCustomerFeedbacksInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RestaurantCreateOrConnectWithoutCustomerFeedbacksInputSchema).optional(),
  upsert: z.lazy(() => RestaurantUpsertWithoutCustomerFeedbacksInputSchema).optional(),
  connect: z.lazy(() => RestaurantWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RestaurantUpdateToOneWithWhereWithoutCustomerFeedbacksInputSchema),z.lazy(() => RestaurantUpdateWithoutCustomerFeedbacksInputSchema),z.lazy(() => RestaurantUncheckedUpdateWithoutCustomerFeedbacksInputSchema) ]).optional(),
}).strict();

export const MenuItemUpdateOneWithoutFeedbackNestedInputSchema: z.ZodType<Prisma.MenuItemUpdateOneWithoutFeedbackNestedInput> = z.object({
  create: z.union([ z.lazy(() => MenuItemCreateWithoutFeedbackInputSchema),z.lazy(() => MenuItemUncheckedCreateWithoutFeedbackInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => MenuItemCreateOrConnectWithoutFeedbackInputSchema).optional(),
  upsert: z.lazy(() => MenuItemUpsertWithoutFeedbackInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => MenuItemWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => MenuItemWhereInputSchema) ]).optional(),
  connect: z.lazy(() => MenuItemWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => MenuItemUpdateToOneWithWhereWithoutFeedbackInputSchema),z.lazy(() => MenuItemUpdateWithoutFeedbackInputSchema),z.lazy(() => MenuItemUncheckedUpdateWithoutFeedbackInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneWithoutCustomerFeedbackResponsesNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutCustomerFeedbackResponsesNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutCustomerFeedbackResponsesInputSchema),z.lazy(() => UserUncheckedCreateWithoutCustomerFeedbackResponsesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutCustomerFeedbackResponsesInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutCustomerFeedbackResponsesInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutCustomerFeedbackResponsesInputSchema),z.lazy(() => UserUpdateWithoutCustomerFeedbackResponsesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutCustomerFeedbackResponsesInputSchema) ]).optional(),
}).strict();

export const MenuItemCreateNestedManyWithoutDietaryRestrictionsInputSchema: z.ZodType<Prisma.MenuItemCreateNestedManyWithoutDietaryRestrictionsInput> = z.object({
  create: z.union([ z.lazy(() => MenuItemCreateWithoutDietaryRestrictionsInputSchema),z.lazy(() => MenuItemCreateWithoutDietaryRestrictionsInputSchema).array(),z.lazy(() => MenuItemUncheckedCreateWithoutDietaryRestrictionsInputSchema),z.lazy(() => MenuItemUncheckedCreateWithoutDietaryRestrictionsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MenuItemCreateOrConnectWithoutDietaryRestrictionsInputSchema),z.lazy(() => MenuItemCreateOrConnectWithoutDietaryRestrictionsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MenuItemWhereUniqueInputSchema),z.lazy(() => MenuItemWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RecipeCreateNestedManyWithoutDietaryRestrictionsInputSchema: z.ZodType<Prisma.RecipeCreateNestedManyWithoutDietaryRestrictionsInput> = z.object({
  create: z.union([ z.lazy(() => RecipeCreateWithoutDietaryRestrictionsInputSchema),z.lazy(() => RecipeCreateWithoutDietaryRestrictionsInputSchema).array(),z.lazy(() => RecipeUncheckedCreateWithoutDietaryRestrictionsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutDietaryRestrictionsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeCreateOrConnectWithoutDietaryRestrictionsInputSchema),z.lazy(() => RecipeCreateOrConnectWithoutDietaryRestrictionsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RecipeWhereUniqueInputSchema),z.lazy(() => RecipeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const IngredientCreateNestedManyWithoutDietaryRestrictionsInputSchema: z.ZodType<Prisma.IngredientCreateNestedManyWithoutDietaryRestrictionsInput> = z.object({
  create: z.union([ z.lazy(() => IngredientCreateWithoutDietaryRestrictionsInputSchema),z.lazy(() => IngredientCreateWithoutDietaryRestrictionsInputSchema).array(),z.lazy(() => IngredientUncheckedCreateWithoutDietaryRestrictionsInputSchema),z.lazy(() => IngredientUncheckedCreateWithoutDietaryRestrictionsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => IngredientCreateOrConnectWithoutDietaryRestrictionsInputSchema),z.lazy(() => IngredientCreateOrConnectWithoutDietaryRestrictionsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => IngredientWhereUniqueInputSchema),z.lazy(() => IngredientWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const MenuItemUncheckedCreateNestedManyWithoutDietaryRestrictionsInputSchema: z.ZodType<Prisma.MenuItemUncheckedCreateNestedManyWithoutDietaryRestrictionsInput> = z.object({
  create: z.union([ z.lazy(() => MenuItemCreateWithoutDietaryRestrictionsInputSchema),z.lazy(() => MenuItemCreateWithoutDietaryRestrictionsInputSchema).array(),z.lazy(() => MenuItemUncheckedCreateWithoutDietaryRestrictionsInputSchema),z.lazy(() => MenuItemUncheckedCreateWithoutDietaryRestrictionsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MenuItemCreateOrConnectWithoutDietaryRestrictionsInputSchema),z.lazy(() => MenuItemCreateOrConnectWithoutDietaryRestrictionsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MenuItemWhereUniqueInputSchema),z.lazy(() => MenuItemWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RecipeUncheckedCreateNestedManyWithoutDietaryRestrictionsInputSchema: z.ZodType<Prisma.RecipeUncheckedCreateNestedManyWithoutDietaryRestrictionsInput> = z.object({
  create: z.union([ z.lazy(() => RecipeCreateWithoutDietaryRestrictionsInputSchema),z.lazy(() => RecipeCreateWithoutDietaryRestrictionsInputSchema).array(),z.lazy(() => RecipeUncheckedCreateWithoutDietaryRestrictionsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutDietaryRestrictionsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeCreateOrConnectWithoutDietaryRestrictionsInputSchema),z.lazy(() => RecipeCreateOrConnectWithoutDietaryRestrictionsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RecipeWhereUniqueInputSchema),z.lazy(() => RecipeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const IngredientUncheckedCreateNestedManyWithoutDietaryRestrictionsInputSchema: z.ZodType<Prisma.IngredientUncheckedCreateNestedManyWithoutDietaryRestrictionsInput> = z.object({
  create: z.union([ z.lazy(() => IngredientCreateWithoutDietaryRestrictionsInputSchema),z.lazy(() => IngredientCreateWithoutDietaryRestrictionsInputSchema).array(),z.lazy(() => IngredientUncheckedCreateWithoutDietaryRestrictionsInputSchema),z.lazy(() => IngredientUncheckedCreateWithoutDietaryRestrictionsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => IngredientCreateOrConnectWithoutDietaryRestrictionsInputSchema),z.lazy(() => IngredientCreateOrConnectWithoutDietaryRestrictionsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => IngredientWhereUniqueInputSchema),z.lazy(() => IngredientWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const MenuItemUpdateManyWithoutDietaryRestrictionsNestedInputSchema: z.ZodType<Prisma.MenuItemUpdateManyWithoutDietaryRestrictionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => MenuItemCreateWithoutDietaryRestrictionsInputSchema),z.lazy(() => MenuItemCreateWithoutDietaryRestrictionsInputSchema).array(),z.lazy(() => MenuItemUncheckedCreateWithoutDietaryRestrictionsInputSchema),z.lazy(() => MenuItemUncheckedCreateWithoutDietaryRestrictionsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MenuItemCreateOrConnectWithoutDietaryRestrictionsInputSchema),z.lazy(() => MenuItemCreateOrConnectWithoutDietaryRestrictionsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MenuItemUpsertWithWhereUniqueWithoutDietaryRestrictionsInputSchema),z.lazy(() => MenuItemUpsertWithWhereUniqueWithoutDietaryRestrictionsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => MenuItemWhereUniqueInputSchema),z.lazy(() => MenuItemWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MenuItemWhereUniqueInputSchema),z.lazy(() => MenuItemWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MenuItemWhereUniqueInputSchema),z.lazy(() => MenuItemWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MenuItemWhereUniqueInputSchema),z.lazy(() => MenuItemWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MenuItemUpdateWithWhereUniqueWithoutDietaryRestrictionsInputSchema),z.lazy(() => MenuItemUpdateWithWhereUniqueWithoutDietaryRestrictionsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MenuItemUpdateManyWithWhereWithoutDietaryRestrictionsInputSchema),z.lazy(() => MenuItemUpdateManyWithWhereWithoutDietaryRestrictionsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MenuItemScalarWhereInputSchema),z.lazy(() => MenuItemScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RecipeUpdateManyWithoutDietaryRestrictionsNestedInputSchema: z.ZodType<Prisma.RecipeUpdateManyWithoutDietaryRestrictionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeCreateWithoutDietaryRestrictionsInputSchema),z.lazy(() => RecipeCreateWithoutDietaryRestrictionsInputSchema).array(),z.lazy(() => RecipeUncheckedCreateWithoutDietaryRestrictionsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutDietaryRestrictionsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeCreateOrConnectWithoutDietaryRestrictionsInputSchema),z.lazy(() => RecipeCreateOrConnectWithoutDietaryRestrictionsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RecipeUpsertWithWhereUniqueWithoutDietaryRestrictionsInputSchema),z.lazy(() => RecipeUpsertWithWhereUniqueWithoutDietaryRestrictionsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => RecipeWhereUniqueInputSchema),z.lazy(() => RecipeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RecipeWhereUniqueInputSchema),z.lazy(() => RecipeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RecipeWhereUniqueInputSchema),z.lazy(() => RecipeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RecipeWhereUniqueInputSchema),z.lazy(() => RecipeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RecipeUpdateWithWhereUniqueWithoutDietaryRestrictionsInputSchema),z.lazy(() => RecipeUpdateWithWhereUniqueWithoutDietaryRestrictionsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RecipeUpdateManyWithWhereWithoutDietaryRestrictionsInputSchema),z.lazy(() => RecipeUpdateManyWithWhereWithoutDietaryRestrictionsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RecipeScalarWhereInputSchema),z.lazy(() => RecipeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const IngredientUpdateManyWithoutDietaryRestrictionsNestedInputSchema: z.ZodType<Prisma.IngredientUpdateManyWithoutDietaryRestrictionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => IngredientCreateWithoutDietaryRestrictionsInputSchema),z.lazy(() => IngredientCreateWithoutDietaryRestrictionsInputSchema).array(),z.lazy(() => IngredientUncheckedCreateWithoutDietaryRestrictionsInputSchema),z.lazy(() => IngredientUncheckedCreateWithoutDietaryRestrictionsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => IngredientCreateOrConnectWithoutDietaryRestrictionsInputSchema),z.lazy(() => IngredientCreateOrConnectWithoutDietaryRestrictionsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => IngredientUpsertWithWhereUniqueWithoutDietaryRestrictionsInputSchema),z.lazy(() => IngredientUpsertWithWhereUniqueWithoutDietaryRestrictionsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => IngredientWhereUniqueInputSchema),z.lazy(() => IngredientWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => IngredientWhereUniqueInputSchema),z.lazy(() => IngredientWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => IngredientWhereUniqueInputSchema),z.lazy(() => IngredientWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => IngredientWhereUniqueInputSchema),z.lazy(() => IngredientWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => IngredientUpdateWithWhereUniqueWithoutDietaryRestrictionsInputSchema),z.lazy(() => IngredientUpdateWithWhereUniqueWithoutDietaryRestrictionsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => IngredientUpdateManyWithWhereWithoutDietaryRestrictionsInputSchema),z.lazy(() => IngredientUpdateManyWithWhereWithoutDietaryRestrictionsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => IngredientScalarWhereInputSchema),z.lazy(() => IngredientScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const MenuItemUncheckedUpdateManyWithoutDietaryRestrictionsNestedInputSchema: z.ZodType<Prisma.MenuItemUncheckedUpdateManyWithoutDietaryRestrictionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => MenuItemCreateWithoutDietaryRestrictionsInputSchema),z.lazy(() => MenuItemCreateWithoutDietaryRestrictionsInputSchema).array(),z.lazy(() => MenuItemUncheckedCreateWithoutDietaryRestrictionsInputSchema),z.lazy(() => MenuItemUncheckedCreateWithoutDietaryRestrictionsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MenuItemCreateOrConnectWithoutDietaryRestrictionsInputSchema),z.lazy(() => MenuItemCreateOrConnectWithoutDietaryRestrictionsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MenuItemUpsertWithWhereUniqueWithoutDietaryRestrictionsInputSchema),z.lazy(() => MenuItemUpsertWithWhereUniqueWithoutDietaryRestrictionsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => MenuItemWhereUniqueInputSchema),z.lazy(() => MenuItemWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MenuItemWhereUniqueInputSchema),z.lazy(() => MenuItemWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MenuItemWhereUniqueInputSchema),z.lazy(() => MenuItemWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MenuItemWhereUniqueInputSchema),z.lazy(() => MenuItemWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MenuItemUpdateWithWhereUniqueWithoutDietaryRestrictionsInputSchema),z.lazy(() => MenuItemUpdateWithWhereUniqueWithoutDietaryRestrictionsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MenuItemUpdateManyWithWhereWithoutDietaryRestrictionsInputSchema),z.lazy(() => MenuItemUpdateManyWithWhereWithoutDietaryRestrictionsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MenuItemScalarWhereInputSchema),z.lazy(() => MenuItemScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RecipeUncheckedUpdateManyWithoutDietaryRestrictionsNestedInputSchema: z.ZodType<Prisma.RecipeUncheckedUpdateManyWithoutDietaryRestrictionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeCreateWithoutDietaryRestrictionsInputSchema),z.lazy(() => RecipeCreateWithoutDietaryRestrictionsInputSchema).array(),z.lazy(() => RecipeUncheckedCreateWithoutDietaryRestrictionsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutDietaryRestrictionsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeCreateOrConnectWithoutDietaryRestrictionsInputSchema),z.lazy(() => RecipeCreateOrConnectWithoutDietaryRestrictionsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RecipeUpsertWithWhereUniqueWithoutDietaryRestrictionsInputSchema),z.lazy(() => RecipeUpsertWithWhereUniqueWithoutDietaryRestrictionsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => RecipeWhereUniqueInputSchema),z.lazy(() => RecipeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RecipeWhereUniqueInputSchema),z.lazy(() => RecipeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RecipeWhereUniqueInputSchema),z.lazy(() => RecipeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RecipeWhereUniqueInputSchema),z.lazy(() => RecipeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RecipeUpdateWithWhereUniqueWithoutDietaryRestrictionsInputSchema),z.lazy(() => RecipeUpdateWithWhereUniqueWithoutDietaryRestrictionsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RecipeUpdateManyWithWhereWithoutDietaryRestrictionsInputSchema),z.lazy(() => RecipeUpdateManyWithWhereWithoutDietaryRestrictionsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RecipeScalarWhereInputSchema),z.lazy(() => RecipeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const IngredientUncheckedUpdateManyWithoutDietaryRestrictionsNestedInputSchema: z.ZodType<Prisma.IngredientUncheckedUpdateManyWithoutDietaryRestrictionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => IngredientCreateWithoutDietaryRestrictionsInputSchema),z.lazy(() => IngredientCreateWithoutDietaryRestrictionsInputSchema).array(),z.lazy(() => IngredientUncheckedCreateWithoutDietaryRestrictionsInputSchema),z.lazy(() => IngredientUncheckedCreateWithoutDietaryRestrictionsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => IngredientCreateOrConnectWithoutDietaryRestrictionsInputSchema),z.lazy(() => IngredientCreateOrConnectWithoutDietaryRestrictionsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => IngredientUpsertWithWhereUniqueWithoutDietaryRestrictionsInputSchema),z.lazy(() => IngredientUpsertWithWhereUniqueWithoutDietaryRestrictionsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => IngredientWhereUniqueInputSchema),z.lazy(() => IngredientWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => IngredientWhereUniqueInputSchema),z.lazy(() => IngredientWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => IngredientWhereUniqueInputSchema),z.lazy(() => IngredientWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => IngredientWhereUniqueInputSchema),z.lazy(() => IngredientWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => IngredientUpdateWithWhereUniqueWithoutDietaryRestrictionsInputSchema),z.lazy(() => IngredientUpdateWithWhereUniqueWithoutDietaryRestrictionsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => IngredientUpdateManyWithWhereWithoutDietaryRestrictionsInputSchema),z.lazy(() => IngredientUpdateManyWithWhereWithoutDietaryRestrictionsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => IngredientScalarWhereInputSchema),z.lazy(() => IngredientScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RecipeCreateNestedManyWithoutTagsInputSchema: z.ZodType<Prisma.RecipeCreateNestedManyWithoutTagsInput> = z.object({
  create: z.union([ z.lazy(() => RecipeCreateWithoutTagsInputSchema),z.lazy(() => RecipeCreateWithoutTagsInputSchema).array(),z.lazy(() => RecipeUncheckedCreateWithoutTagsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutTagsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeCreateOrConnectWithoutTagsInputSchema),z.lazy(() => RecipeCreateOrConnectWithoutTagsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RecipeWhereUniqueInputSchema),z.lazy(() => RecipeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RecipeUncheckedCreateNestedManyWithoutTagsInputSchema: z.ZodType<Prisma.RecipeUncheckedCreateNestedManyWithoutTagsInput> = z.object({
  create: z.union([ z.lazy(() => RecipeCreateWithoutTagsInputSchema),z.lazy(() => RecipeCreateWithoutTagsInputSchema).array(),z.lazy(() => RecipeUncheckedCreateWithoutTagsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutTagsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeCreateOrConnectWithoutTagsInputSchema),z.lazy(() => RecipeCreateOrConnectWithoutTagsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RecipeWhereUniqueInputSchema),z.lazy(() => RecipeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RecipeUpdateManyWithoutTagsNestedInputSchema: z.ZodType<Prisma.RecipeUpdateManyWithoutTagsNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeCreateWithoutTagsInputSchema),z.lazy(() => RecipeCreateWithoutTagsInputSchema).array(),z.lazy(() => RecipeUncheckedCreateWithoutTagsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutTagsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeCreateOrConnectWithoutTagsInputSchema),z.lazy(() => RecipeCreateOrConnectWithoutTagsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RecipeUpsertWithWhereUniqueWithoutTagsInputSchema),z.lazy(() => RecipeUpsertWithWhereUniqueWithoutTagsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => RecipeWhereUniqueInputSchema),z.lazy(() => RecipeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RecipeWhereUniqueInputSchema),z.lazy(() => RecipeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RecipeWhereUniqueInputSchema),z.lazy(() => RecipeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RecipeWhereUniqueInputSchema),z.lazy(() => RecipeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RecipeUpdateWithWhereUniqueWithoutTagsInputSchema),z.lazy(() => RecipeUpdateWithWhereUniqueWithoutTagsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RecipeUpdateManyWithWhereWithoutTagsInputSchema),z.lazy(() => RecipeUpdateManyWithWhereWithoutTagsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RecipeScalarWhereInputSchema),z.lazy(() => RecipeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RecipeUncheckedUpdateManyWithoutTagsNestedInputSchema: z.ZodType<Prisma.RecipeUncheckedUpdateManyWithoutTagsNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeCreateWithoutTagsInputSchema),z.lazy(() => RecipeCreateWithoutTagsInputSchema).array(),z.lazy(() => RecipeUncheckedCreateWithoutTagsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutTagsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeCreateOrConnectWithoutTagsInputSchema),z.lazy(() => RecipeCreateOrConnectWithoutTagsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RecipeUpsertWithWhereUniqueWithoutTagsInputSchema),z.lazy(() => RecipeUpsertWithWhereUniqueWithoutTagsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => RecipeWhereUniqueInputSchema),z.lazy(() => RecipeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RecipeWhereUniqueInputSchema),z.lazy(() => RecipeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RecipeWhereUniqueInputSchema),z.lazy(() => RecipeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RecipeWhereUniqueInputSchema),z.lazy(() => RecipeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RecipeUpdateWithWhereUniqueWithoutTagsInputSchema),z.lazy(() => RecipeUpdateWithWhereUniqueWithoutTagsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RecipeUpdateManyWithWhereWithoutTagsInputSchema),z.lazy(() => RecipeUpdateManyWithWhereWithoutTagsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RecipeScalarWhereInputSchema),z.lazy(() => RecipeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RestaurantCreateNestedOneWithoutLeftoverItemsInputSchema: z.ZodType<Prisma.RestaurantCreateNestedOneWithoutLeftoverItemsInput> = z.object({
  create: z.union([ z.lazy(() => RestaurantCreateWithoutLeftoverItemsInputSchema),z.lazy(() => RestaurantUncheckedCreateWithoutLeftoverItemsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RestaurantCreateOrConnectWithoutLeftoverItemsInputSchema).optional(),
  connect: z.lazy(() => RestaurantWhereUniqueInputSchema).optional()
}).strict();

export const MenuItemCreateNestedOneWithoutLeftoverItemsInputSchema: z.ZodType<Prisma.MenuItemCreateNestedOneWithoutLeftoverItemsInput> = z.object({
  create: z.union([ z.lazy(() => MenuItemCreateWithoutLeftoverItemsInputSchema),z.lazy(() => MenuItemUncheckedCreateWithoutLeftoverItemsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => MenuItemCreateOrConnectWithoutLeftoverItemsInputSchema).optional(),
  connect: z.lazy(() => MenuItemWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutLeftoverItemsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutLeftoverItemsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutLeftoverItemsInputSchema),z.lazy(() => UserUncheckedCreateWithoutLeftoverItemsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutLeftoverItemsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const RestaurantUpdateOneRequiredWithoutLeftoverItemsNestedInputSchema: z.ZodType<Prisma.RestaurantUpdateOneRequiredWithoutLeftoverItemsNestedInput> = z.object({
  create: z.union([ z.lazy(() => RestaurantCreateWithoutLeftoverItemsInputSchema),z.lazy(() => RestaurantUncheckedCreateWithoutLeftoverItemsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RestaurantCreateOrConnectWithoutLeftoverItemsInputSchema).optional(),
  upsert: z.lazy(() => RestaurantUpsertWithoutLeftoverItemsInputSchema).optional(),
  connect: z.lazy(() => RestaurantWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RestaurantUpdateToOneWithWhereWithoutLeftoverItemsInputSchema),z.lazy(() => RestaurantUpdateWithoutLeftoverItemsInputSchema),z.lazy(() => RestaurantUncheckedUpdateWithoutLeftoverItemsInputSchema) ]).optional(),
}).strict();

export const MenuItemUpdateOneRequiredWithoutLeftoverItemsNestedInputSchema: z.ZodType<Prisma.MenuItemUpdateOneRequiredWithoutLeftoverItemsNestedInput> = z.object({
  create: z.union([ z.lazy(() => MenuItemCreateWithoutLeftoverItemsInputSchema),z.lazy(() => MenuItemUncheckedCreateWithoutLeftoverItemsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => MenuItemCreateOrConnectWithoutLeftoverItemsInputSchema).optional(),
  upsert: z.lazy(() => MenuItemUpsertWithoutLeftoverItemsInputSchema).optional(),
  connect: z.lazy(() => MenuItemWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => MenuItemUpdateToOneWithWhereWithoutLeftoverItemsInputSchema),z.lazy(() => MenuItemUpdateWithoutLeftoverItemsInputSchema),z.lazy(() => MenuItemUncheckedUpdateWithoutLeftoverItemsInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutLeftoverItemsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutLeftoverItemsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutLeftoverItemsInputSchema),z.lazy(() => UserUncheckedCreateWithoutLeftoverItemsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutLeftoverItemsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutLeftoverItemsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutLeftoverItemsInputSchema),z.lazy(() => UserUpdateWithoutLeftoverItemsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutLeftoverItemsInputSchema) ]).optional(),
}).strict();

export const RestaurantCreateNestedOneWithoutWasteRecordsInputSchema: z.ZodType<Prisma.RestaurantCreateNestedOneWithoutWasteRecordsInput> = z.object({
  create: z.union([ z.lazy(() => RestaurantCreateWithoutWasteRecordsInputSchema),z.lazy(() => RestaurantUncheckedCreateWithoutWasteRecordsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RestaurantCreateOrConnectWithoutWasteRecordsInputSchema).optional(),
  connect: z.lazy(() => RestaurantWhereUniqueInputSchema).optional()
}).strict();

export const IngredientCreateNestedOneWithoutWasteRecordsInputSchema: z.ZodType<Prisma.IngredientCreateNestedOneWithoutWasteRecordsInput> = z.object({
  create: z.union([ z.lazy(() => IngredientCreateWithoutWasteRecordsInputSchema),z.lazy(() => IngredientUncheckedCreateWithoutWasteRecordsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => IngredientCreateOrConnectWithoutWasteRecordsInputSchema).optional(),
  connect: z.lazy(() => IngredientWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutWasteRecordsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutWasteRecordsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutWasteRecordsInputSchema),z.lazy(() => UserUncheckedCreateWithoutWasteRecordsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutWasteRecordsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const RestaurantUpdateOneRequiredWithoutWasteRecordsNestedInputSchema: z.ZodType<Prisma.RestaurantUpdateOneRequiredWithoutWasteRecordsNestedInput> = z.object({
  create: z.union([ z.lazy(() => RestaurantCreateWithoutWasteRecordsInputSchema),z.lazy(() => RestaurantUncheckedCreateWithoutWasteRecordsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RestaurantCreateOrConnectWithoutWasteRecordsInputSchema).optional(),
  upsert: z.lazy(() => RestaurantUpsertWithoutWasteRecordsInputSchema).optional(),
  connect: z.lazy(() => RestaurantWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RestaurantUpdateToOneWithWhereWithoutWasteRecordsInputSchema),z.lazy(() => RestaurantUpdateWithoutWasteRecordsInputSchema),z.lazy(() => RestaurantUncheckedUpdateWithoutWasteRecordsInputSchema) ]).optional(),
}).strict();

export const IngredientUpdateOneRequiredWithoutWasteRecordsNestedInputSchema: z.ZodType<Prisma.IngredientUpdateOneRequiredWithoutWasteRecordsNestedInput> = z.object({
  create: z.union([ z.lazy(() => IngredientCreateWithoutWasteRecordsInputSchema),z.lazy(() => IngredientUncheckedCreateWithoutWasteRecordsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => IngredientCreateOrConnectWithoutWasteRecordsInputSchema).optional(),
  upsert: z.lazy(() => IngredientUpsertWithoutWasteRecordsInputSchema).optional(),
  connect: z.lazy(() => IngredientWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => IngredientUpdateToOneWithWhereWithoutWasteRecordsInputSchema),z.lazy(() => IngredientUpdateWithoutWasteRecordsInputSchema),z.lazy(() => IngredientUncheckedUpdateWithoutWasteRecordsInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutWasteRecordsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutWasteRecordsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutWasteRecordsInputSchema),z.lazy(() => UserUncheckedCreateWithoutWasteRecordsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutWasteRecordsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutWasteRecordsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutWasteRecordsInputSchema),z.lazy(() => UserUpdateWithoutWasteRecordsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutWasteRecordsInputSchema) ]).optional(),
}).strict();

export const RestaurantCreateNestedOneWithoutProductionPlansInputSchema: z.ZodType<Prisma.RestaurantCreateNestedOneWithoutProductionPlansInput> = z.object({
  create: z.union([ z.lazy(() => RestaurantCreateWithoutProductionPlansInputSchema),z.lazy(() => RestaurantUncheckedCreateWithoutProductionPlansInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RestaurantCreateOrConnectWithoutProductionPlansInputSchema).optional(),
  connect: z.lazy(() => RestaurantWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutProductionPlansInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutProductionPlansInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutProductionPlansInputSchema),z.lazy(() => UserUncheckedCreateWithoutProductionPlansInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutProductionPlansInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const ProductionPlanItemCreateNestedManyWithoutProductionPlanInputSchema: z.ZodType<Prisma.ProductionPlanItemCreateNestedManyWithoutProductionPlanInput> = z.object({
  create: z.union([ z.lazy(() => ProductionPlanItemCreateWithoutProductionPlanInputSchema),z.lazy(() => ProductionPlanItemCreateWithoutProductionPlanInputSchema).array(),z.lazy(() => ProductionPlanItemUncheckedCreateWithoutProductionPlanInputSchema),z.lazy(() => ProductionPlanItemUncheckedCreateWithoutProductionPlanInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductionPlanItemCreateOrConnectWithoutProductionPlanInputSchema),z.lazy(() => ProductionPlanItemCreateOrConnectWithoutProductionPlanInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductionPlanItemCreateManyProductionPlanInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProductionPlanItemWhereUniqueInputSchema),z.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProductionPlanItemUncheckedCreateNestedManyWithoutProductionPlanInputSchema: z.ZodType<Prisma.ProductionPlanItemUncheckedCreateNestedManyWithoutProductionPlanInput> = z.object({
  create: z.union([ z.lazy(() => ProductionPlanItemCreateWithoutProductionPlanInputSchema),z.lazy(() => ProductionPlanItemCreateWithoutProductionPlanInputSchema).array(),z.lazy(() => ProductionPlanItemUncheckedCreateWithoutProductionPlanInputSchema),z.lazy(() => ProductionPlanItemUncheckedCreateWithoutProductionPlanInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductionPlanItemCreateOrConnectWithoutProductionPlanInputSchema),z.lazy(() => ProductionPlanItemCreateOrConnectWithoutProductionPlanInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductionPlanItemCreateManyProductionPlanInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProductionPlanItemWhereUniqueInputSchema),z.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EnumProductionStatusFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumProductionStatusFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => ProductionStatusSchema).optional()
}).strict();

export const RestaurantUpdateOneRequiredWithoutProductionPlansNestedInputSchema: z.ZodType<Prisma.RestaurantUpdateOneRequiredWithoutProductionPlansNestedInput> = z.object({
  create: z.union([ z.lazy(() => RestaurantCreateWithoutProductionPlansInputSchema),z.lazy(() => RestaurantUncheckedCreateWithoutProductionPlansInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RestaurantCreateOrConnectWithoutProductionPlansInputSchema).optional(),
  upsert: z.lazy(() => RestaurantUpsertWithoutProductionPlansInputSchema).optional(),
  connect: z.lazy(() => RestaurantWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RestaurantUpdateToOneWithWhereWithoutProductionPlansInputSchema),z.lazy(() => RestaurantUpdateWithoutProductionPlansInputSchema),z.lazy(() => RestaurantUncheckedUpdateWithoutProductionPlansInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutProductionPlansNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutProductionPlansNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutProductionPlansInputSchema),z.lazy(() => UserUncheckedCreateWithoutProductionPlansInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutProductionPlansInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutProductionPlansInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutProductionPlansInputSchema),z.lazy(() => UserUpdateWithoutProductionPlansInputSchema),z.lazy(() => UserUncheckedUpdateWithoutProductionPlansInputSchema) ]).optional(),
}).strict();

export const ProductionPlanItemUpdateManyWithoutProductionPlanNestedInputSchema: z.ZodType<Prisma.ProductionPlanItemUpdateManyWithoutProductionPlanNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProductionPlanItemCreateWithoutProductionPlanInputSchema),z.lazy(() => ProductionPlanItemCreateWithoutProductionPlanInputSchema).array(),z.lazy(() => ProductionPlanItemUncheckedCreateWithoutProductionPlanInputSchema),z.lazy(() => ProductionPlanItemUncheckedCreateWithoutProductionPlanInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductionPlanItemCreateOrConnectWithoutProductionPlanInputSchema),z.lazy(() => ProductionPlanItemCreateOrConnectWithoutProductionPlanInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProductionPlanItemUpsertWithWhereUniqueWithoutProductionPlanInputSchema),z.lazy(() => ProductionPlanItemUpsertWithWhereUniqueWithoutProductionPlanInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductionPlanItemCreateManyProductionPlanInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProductionPlanItemWhereUniqueInputSchema),z.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProductionPlanItemWhereUniqueInputSchema),z.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProductionPlanItemWhereUniqueInputSchema),z.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProductionPlanItemWhereUniqueInputSchema),z.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProductionPlanItemUpdateWithWhereUniqueWithoutProductionPlanInputSchema),z.lazy(() => ProductionPlanItemUpdateWithWhereUniqueWithoutProductionPlanInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProductionPlanItemUpdateManyWithWhereWithoutProductionPlanInputSchema),z.lazy(() => ProductionPlanItemUpdateManyWithWhereWithoutProductionPlanInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProductionPlanItemScalarWhereInputSchema),z.lazy(() => ProductionPlanItemScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProductionPlanItemUncheckedUpdateManyWithoutProductionPlanNestedInputSchema: z.ZodType<Prisma.ProductionPlanItemUncheckedUpdateManyWithoutProductionPlanNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProductionPlanItemCreateWithoutProductionPlanInputSchema),z.lazy(() => ProductionPlanItemCreateWithoutProductionPlanInputSchema).array(),z.lazy(() => ProductionPlanItemUncheckedCreateWithoutProductionPlanInputSchema),z.lazy(() => ProductionPlanItemUncheckedCreateWithoutProductionPlanInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductionPlanItemCreateOrConnectWithoutProductionPlanInputSchema),z.lazy(() => ProductionPlanItemCreateOrConnectWithoutProductionPlanInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProductionPlanItemUpsertWithWhereUniqueWithoutProductionPlanInputSchema),z.lazy(() => ProductionPlanItemUpsertWithWhereUniqueWithoutProductionPlanInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductionPlanItemCreateManyProductionPlanInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProductionPlanItemWhereUniqueInputSchema),z.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProductionPlanItemWhereUniqueInputSchema),z.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProductionPlanItemWhereUniqueInputSchema),z.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProductionPlanItemWhereUniqueInputSchema),z.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProductionPlanItemUpdateWithWhereUniqueWithoutProductionPlanInputSchema),z.lazy(() => ProductionPlanItemUpdateWithWhereUniqueWithoutProductionPlanInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProductionPlanItemUpdateManyWithWhereWithoutProductionPlanInputSchema),z.lazy(() => ProductionPlanItemUpdateManyWithWhereWithoutProductionPlanInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProductionPlanItemScalarWhereInputSchema),z.lazy(() => ProductionPlanItemScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProductionPlanCreateNestedOneWithoutItemsInputSchema: z.ZodType<Prisma.ProductionPlanCreateNestedOneWithoutItemsInput> = z.object({
  create: z.union([ z.lazy(() => ProductionPlanCreateWithoutItemsInputSchema),z.lazy(() => ProductionPlanUncheckedCreateWithoutItemsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProductionPlanCreateOrConnectWithoutItemsInputSchema).optional(),
  connect: z.lazy(() => ProductionPlanWhereUniqueInputSchema).optional()
}).strict();

export const RecipeCreateNestedOneWithoutProductionPlanItemsInputSchema: z.ZodType<Prisma.RecipeCreateNestedOneWithoutProductionPlanItemsInput> = z.object({
  create: z.union([ z.lazy(() => RecipeCreateWithoutProductionPlanItemsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutProductionPlanItemsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RecipeCreateOrConnectWithoutProductionPlanItemsInputSchema).optional(),
  connect: z.lazy(() => RecipeWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutProductionPlanItemsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutProductionPlanItemsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutProductionPlanItemsInputSchema),z.lazy(() => UserUncheckedCreateWithoutProductionPlanItemsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutProductionPlanItemsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const ProductionPlanUpdateOneRequiredWithoutItemsNestedInputSchema: z.ZodType<Prisma.ProductionPlanUpdateOneRequiredWithoutItemsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProductionPlanCreateWithoutItemsInputSchema),z.lazy(() => ProductionPlanUncheckedCreateWithoutItemsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProductionPlanCreateOrConnectWithoutItemsInputSchema).optional(),
  upsert: z.lazy(() => ProductionPlanUpsertWithoutItemsInputSchema).optional(),
  connect: z.lazy(() => ProductionPlanWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProductionPlanUpdateToOneWithWhereWithoutItemsInputSchema),z.lazy(() => ProductionPlanUpdateWithoutItemsInputSchema),z.lazy(() => ProductionPlanUncheckedUpdateWithoutItemsInputSchema) ]).optional(),
}).strict();

export const RecipeUpdateOneRequiredWithoutProductionPlanItemsNestedInputSchema: z.ZodType<Prisma.RecipeUpdateOneRequiredWithoutProductionPlanItemsNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeCreateWithoutProductionPlanItemsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutProductionPlanItemsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RecipeCreateOrConnectWithoutProductionPlanItemsInputSchema).optional(),
  upsert: z.lazy(() => RecipeUpsertWithoutProductionPlanItemsInputSchema).optional(),
  connect: z.lazy(() => RecipeWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RecipeUpdateToOneWithWhereWithoutProductionPlanItemsInputSchema),z.lazy(() => RecipeUpdateWithoutProductionPlanItemsInputSchema),z.lazy(() => RecipeUncheckedUpdateWithoutProductionPlanItemsInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneWithoutProductionPlanItemsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutProductionPlanItemsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutProductionPlanItemsInputSchema),z.lazy(() => UserUncheckedCreateWithoutProductionPlanItemsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutProductionPlanItemsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutProductionPlanItemsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutProductionPlanItemsInputSchema),z.lazy(() => UserUpdateWithoutProductionPlanItemsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutProductionPlanItemsInputSchema) ]).optional(),
}).strict();

export const ShiftCreateNestedOneWithoutTasksInputSchema: z.ZodType<Prisma.ShiftCreateNestedOneWithoutTasksInput> = z.object({
  create: z.union([ z.lazy(() => ShiftCreateWithoutTasksInputSchema),z.lazy(() => ShiftUncheckedCreateWithoutTasksInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ShiftCreateOrConnectWithoutTasksInputSchema).optional(),
  connect: z.lazy(() => ShiftWhereUniqueInputSchema).optional()
}).strict();

export const EnumTaskTypeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumTaskTypeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => TaskTypeSchema).optional()
}).strict();

export const ShiftUpdateOneRequiredWithoutTasksNestedInputSchema: z.ZodType<Prisma.ShiftUpdateOneRequiredWithoutTasksNestedInput> = z.object({
  create: z.union([ z.lazy(() => ShiftCreateWithoutTasksInputSchema),z.lazy(() => ShiftUncheckedCreateWithoutTasksInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ShiftCreateOrConnectWithoutTasksInputSchema).optional(),
  upsert: z.lazy(() => ShiftUpsertWithoutTasksInputSchema).optional(),
  connect: z.lazy(() => ShiftWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ShiftUpdateToOneWithWhereWithoutTasksInputSchema),z.lazy(() => ShiftUpdateWithoutTasksInputSchema),z.lazy(() => ShiftUncheckedUpdateWithoutTasksInputSchema) ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutAvailabilityInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutAvailabilityInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutAvailabilityInputSchema),z.lazy(() => UserUncheckedCreateWithoutAvailabilityInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutAvailabilityInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const EnumDayOfWeekFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumDayOfWeekFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => DayOfWeekSchema).optional()
}).strict();

export const UserUpdateOneRequiredWithoutAvailabilityNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutAvailabilityNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutAvailabilityInputSchema),z.lazy(() => UserUncheckedCreateWithoutAvailabilityInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutAvailabilityInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutAvailabilityInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutAvailabilityInputSchema),z.lazy(() => UserUpdateWithoutAvailabilityInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAvailabilityInputSchema) ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutSchedulingConstraintsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutSchedulingConstraintsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutSchedulingConstraintsInputSchema),z.lazy(() => UserUncheckedCreateWithoutSchedulingConstraintsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutSchedulingConstraintsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const EnumConstraintTypeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumConstraintTypeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => ConstraintTypeSchema).optional()
}).strict();

export const UserUpdateOneRequiredWithoutSchedulingConstraintsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutSchedulingConstraintsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutSchedulingConstraintsInputSchema),z.lazy(() => UserUncheckedCreateWithoutSchedulingConstraintsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutSchedulingConstraintsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutSchedulingConstraintsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutSchedulingConstraintsInputSchema),z.lazy(() => UserUpdateWithoutSchedulingConstraintsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutSchedulingConstraintsInputSchema) ]).optional(),
}).strict();

export const InventoryItemCreateNestedOneWithoutWithdrawalsInputSchema: z.ZodType<Prisma.InventoryItemCreateNestedOneWithoutWithdrawalsInput> = z.object({
  create: z.union([ z.lazy(() => InventoryItemCreateWithoutWithdrawalsInputSchema),z.lazy(() => InventoryItemUncheckedCreateWithoutWithdrawalsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => InventoryItemCreateOrConnectWithoutWithdrawalsInputSchema).optional(),
  connect: z.lazy(() => InventoryItemWhereUniqueInputSchema).optional()
}).strict();

export const RecipeCreateNestedOneWithoutWithdrawalsInputSchema: z.ZodType<Prisma.RecipeCreateNestedOneWithoutWithdrawalsInput> = z.object({
  create: z.union([ z.lazy(() => RecipeCreateWithoutWithdrawalsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutWithdrawalsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RecipeCreateOrConnectWithoutWithdrawalsInputSchema).optional(),
  connect: z.lazy(() => RecipeWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutInventoryWithdrawalsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutInventoryWithdrawalsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutInventoryWithdrawalsInputSchema),z.lazy(() => UserUncheckedCreateWithoutInventoryWithdrawalsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutInventoryWithdrawalsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const InventoryItemUpdateOneRequiredWithoutWithdrawalsNestedInputSchema: z.ZodType<Prisma.InventoryItemUpdateOneRequiredWithoutWithdrawalsNestedInput> = z.object({
  create: z.union([ z.lazy(() => InventoryItemCreateWithoutWithdrawalsInputSchema),z.lazy(() => InventoryItemUncheckedCreateWithoutWithdrawalsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => InventoryItemCreateOrConnectWithoutWithdrawalsInputSchema).optional(),
  upsert: z.lazy(() => InventoryItemUpsertWithoutWithdrawalsInputSchema).optional(),
  connect: z.lazy(() => InventoryItemWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => InventoryItemUpdateToOneWithWhereWithoutWithdrawalsInputSchema),z.lazy(() => InventoryItemUpdateWithoutWithdrawalsInputSchema),z.lazy(() => InventoryItemUncheckedUpdateWithoutWithdrawalsInputSchema) ]).optional(),
}).strict();

export const RecipeUpdateOneWithoutWithdrawalsNestedInputSchema: z.ZodType<Prisma.RecipeUpdateOneWithoutWithdrawalsNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeCreateWithoutWithdrawalsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutWithdrawalsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RecipeCreateOrConnectWithoutWithdrawalsInputSchema).optional(),
  upsert: z.lazy(() => RecipeUpsertWithoutWithdrawalsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => RecipeWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => RecipeWhereInputSchema) ]).optional(),
  connect: z.lazy(() => RecipeWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RecipeUpdateToOneWithWhereWithoutWithdrawalsInputSchema),z.lazy(() => RecipeUpdateWithoutWithdrawalsInputSchema),z.lazy(() => RecipeUncheckedUpdateWithoutWithdrawalsInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutInventoryWithdrawalsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutInventoryWithdrawalsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutInventoryWithdrawalsInputSchema),z.lazy(() => UserUncheckedCreateWithoutInventoryWithdrawalsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutInventoryWithdrawalsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutInventoryWithdrawalsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutInventoryWithdrawalsInputSchema),z.lazy(() => UserUpdateWithoutInventoryWithdrawalsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutInventoryWithdrawalsInputSchema) ]).optional(),
}).strict();

export const IngredientAllergenCreateNestedManyWithoutAllergenInputSchema: z.ZodType<Prisma.IngredientAllergenCreateNestedManyWithoutAllergenInput> = z.object({
  create: z.union([ z.lazy(() => IngredientAllergenCreateWithoutAllergenInputSchema),z.lazy(() => IngredientAllergenCreateWithoutAllergenInputSchema).array(),z.lazy(() => IngredientAllergenUncheckedCreateWithoutAllergenInputSchema),z.lazy(() => IngredientAllergenUncheckedCreateWithoutAllergenInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => IngredientAllergenCreateOrConnectWithoutAllergenInputSchema),z.lazy(() => IngredientAllergenCreateOrConnectWithoutAllergenInputSchema).array() ]).optional(),
  createMany: z.lazy(() => IngredientAllergenCreateManyAllergenInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => IngredientAllergenWhereUniqueInputSchema),z.lazy(() => IngredientAllergenWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const IngredientAllergenUncheckedCreateNestedManyWithoutAllergenInputSchema: z.ZodType<Prisma.IngredientAllergenUncheckedCreateNestedManyWithoutAllergenInput> = z.object({
  create: z.union([ z.lazy(() => IngredientAllergenCreateWithoutAllergenInputSchema),z.lazy(() => IngredientAllergenCreateWithoutAllergenInputSchema).array(),z.lazy(() => IngredientAllergenUncheckedCreateWithoutAllergenInputSchema),z.lazy(() => IngredientAllergenUncheckedCreateWithoutAllergenInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => IngredientAllergenCreateOrConnectWithoutAllergenInputSchema),z.lazy(() => IngredientAllergenCreateOrConnectWithoutAllergenInputSchema).array() ]).optional(),
  createMany: z.lazy(() => IngredientAllergenCreateManyAllergenInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => IngredientAllergenWhereUniqueInputSchema),z.lazy(() => IngredientAllergenWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const IngredientAllergenUpdateManyWithoutAllergenNestedInputSchema: z.ZodType<Prisma.IngredientAllergenUpdateManyWithoutAllergenNestedInput> = z.object({
  create: z.union([ z.lazy(() => IngredientAllergenCreateWithoutAllergenInputSchema),z.lazy(() => IngredientAllergenCreateWithoutAllergenInputSchema).array(),z.lazy(() => IngredientAllergenUncheckedCreateWithoutAllergenInputSchema),z.lazy(() => IngredientAllergenUncheckedCreateWithoutAllergenInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => IngredientAllergenCreateOrConnectWithoutAllergenInputSchema),z.lazy(() => IngredientAllergenCreateOrConnectWithoutAllergenInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => IngredientAllergenUpsertWithWhereUniqueWithoutAllergenInputSchema),z.lazy(() => IngredientAllergenUpsertWithWhereUniqueWithoutAllergenInputSchema).array() ]).optional(),
  createMany: z.lazy(() => IngredientAllergenCreateManyAllergenInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => IngredientAllergenWhereUniqueInputSchema),z.lazy(() => IngredientAllergenWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => IngredientAllergenWhereUniqueInputSchema),z.lazy(() => IngredientAllergenWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => IngredientAllergenWhereUniqueInputSchema),z.lazy(() => IngredientAllergenWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => IngredientAllergenWhereUniqueInputSchema),z.lazy(() => IngredientAllergenWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => IngredientAllergenUpdateWithWhereUniqueWithoutAllergenInputSchema),z.lazy(() => IngredientAllergenUpdateWithWhereUniqueWithoutAllergenInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => IngredientAllergenUpdateManyWithWhereWithoutAllergenInputSchema),z.lazy(() => IngredientAllergenUpdateManyWithWhereWithoutAllergenInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => IngredientAllergenScalarWhereInputSchema),z.lazy(() => IngredientAllergenScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const IngredientAllergenUncheckedUpdateManyWithoutAllergenNestedInputSchema: z.ZodType<Prisma.IngredientAllergenUncheckedUpdateManyWithoutAllergenNestedInput> = z.object({
  create: z.union([ z.lazy(() => IngredientAllergenCreateWithoutAllergenInputSchema),z.lazy(() => IngredientAllergenCreateWithoutAllergenInputSchema).array(),z.lazy(() => IngredientAllergenUncheckedCreateWithoutAllergenInputSchema),z.lazy(() => IngredientAllergenUncheckedCreateWithoutAllergenInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => IngredientAllergenCreateOrConnectWithoutAllergenInputSchema),z.lazy(() => IngredientAllergenCreateOrConnectWithoutAllergenInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => IngredientAllergenUpsertWithWhereUniqueWithoutAllergenInputSchema),z.lazy(() => IngredientAllergenUpsertWithWhereUniqueWithoutAllergenInputSchema).array() ]).optional(),
  createMany: z.lazy(() => IngredientAllergenCreateManyAllergenInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => IngredientAllergenWhereUniqueInputSchema),z.lazy(() => IngredientAllergenWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => IngredientAllergenWhereUniqueInputSchema),z.lazy(() => IngredientAllergenWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => IngredientAllergenWhereUniqueInputSchema),z.lazy(() => IngredientAllergenWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => IngredientAllergenWhereUniqueInputSchema),z.lazy(() => IngredientAllergenWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => IngredientAllergenUpdateWithWhereUniqueWithoutAllergenInputSchema),z.lazy(() => IngredientAllergenUpdateWithWhereUniqueWithoutAllergenInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => IngredientAllergenUpdateManyWithWhereWithoutAllergenInputSchema),z.lazy(() => IngredientAllergenUpdateManyWithWhereWithoutAllergenInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => IngredientAllergenScalarWhereInputSchema),z.lazy(() => IngredientAllergenScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const IngredientCreateNestedOneWithoutIngredientAllergensInputSchema: z.ZodType<Prisma.IngredientCreateNestedOneWithoutIngredientAllergensInput> = z.object({
  create: z.union([ z.lazy(() => IngredientCreateWithoutIngredientAllergensInputSchema),z.lazy(() => IngredientUncheckedCreateWithoutIngredientAllergensInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => IngredientCreateOrConnectWithoutIngredientAllergensInputSchema).optional(),
  connect: z.lazy(() => IngredientWhereUniqueInputSchema).optional()
}).strict();

export const AllergenCreateNestedOneWithoutIngredientsInputSchema: z.ZodType<Prisma.AllergenCreateNestedOneWithoutIngredientsInput> = z.object({
  create: z.union([ z.lazy(() => AllergenCreateWithoutIngredientsInputSchema),z.lazy(() => AllergenUncheckedCreateWithoutIngredientsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AllergenCreateOrConnectWithoutIngredientsInputSchema).optional(),
  connect: z.lazy(() => AllergenWhereUniqueInputSchema).optional()
}).strict();

export const IngredientUpdateOneRequiredWithoutIngredientAllergensNestedInputSchema: z.ZodType<Prisma.IngredientUpdateOneRequiredWithoutIngredientAllergensNestedInput> = z.object({
  create: z.union([ z.lazy(() => IngredientCreateWithoutIngredientAllergensInputSchema),z.lazy(() => IngredientUncheckedCreateWithoutIngredientAllergensInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => IngredientCreateOrConnectWithoutIngredientAllergensInputSchema).optional(),
  upsert: z.lazy(() => IngredientUpsertWithoutIngredientAllergensInputSchema).optional(),
  connect: z.lazy(() => IngredientWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => IngredientUpdateToOneWithWhereWithoutIngredientAllergensInputSchema),z.lazy(() => IngredientUpdateWithoutIngredientAllergensInputSchema),z.lazy(() => IngredientUncheckedUpdateWithoutIngredientAllergensInputSchema) ]).optional(),
}).strict();

export const AllergenUpdateOneRequiredWithoutIngredientsNestedInputSchema: z.ZodType<Prisma.AllergenUpdateOneRequiredWithoutIngredientsNestedInput> = z.object({
  create: z.union([ z.lazy(() => AllergenCreateWithoutIngredientsInputSchema),z.lazy(() => AllergenUncheckedCreateWithoutIngredientsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AllergenCreateOrConnectWithoutIngredientsInputSchema).optional(),
  upsert: z.lazy(() => AllergenUpsertWithoutIngredientsInputSchema).optional(),
  connect: z.lazy(() => AllergenWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AllergenUpdateToOneWithWhereWithoutIngredientsInputSchema),z.lazy(() => AllergenUpdateWithoutIngredientsInputSchema),z.lazy(() => AllergenUncheckedUpdateWithoutIngredientsInputSchema) ]).optional(),
}).strict();

export const MenuItemCreateNestedOneWithoutRecommendationsInputSchema: z.ZodType<Prisma.MenuItemCreateNestedOneWithoutRecommendationsInput> = z.object({
  create: z.union([ z.lazy(() => MenuItemCreateWithoutRecommendationsInputSchema),z.lazy(() => MenuItemUncheckedCreateWithoutRecommendationsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => MenuItemCreateOrConnectWithoutRecommendationsInputSchema).optional(),
  connect: z.lazy(() => MenuItemWhereUniqueInputSchema).optional()
}).strict();

export const MenuItemUpdateOneRequiredWithoutRecommendationsNestedInputSchema: z.ZodType<Prisma.MenuItemUpdateOneRequiredWithoutRecommendationsNestedInput> = z.object({
  create: z.union([ z.lazy(() => MenuItemCreateWithoutRecommendationsInputSchema),z.lazy(() => MenuItemUncheckedCreateWithoutRecommendationsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => MenuItemCreateOrConnectWithoutRecommendationsInputSchema).optional(),
  upsert: z.lazy(() => MenuItemUpsertWithoutRecommendationsInputSchema).optional(),
  connect: z.lazy(() => MenuItemWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => MenuItemUpdateToOneWithWhereWithoutRecommendationsInputSchema),z.lazy(() => MenuItemUpdateWithoutRecommendationsInputSchema),z.lazy(() => MenuItemUncheckedUpdateWithoutRecommendationsInputSchema) ]).optional(),
}).strict();

export const RestaurantCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.RestaurantCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => RestaurantCreateWithoutOrganizationInputSchema),z.lazy(() => RestaurantCreateWithoutOrganizationInputSchema).array(),z.lazy(() => RestaurantUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => RestaurantUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RestaurantCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => RestaurantCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RestaurantCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RestaurantWhereUniqueInputSchema),z.lazy(() => RestaurantWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.UserCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutOrganizationInputSchema),z.lazy(() => UserCreateWithoutOrganizationInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => UserUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => UserCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RestaurantUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.RestaurantUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => RestaurantCreateWithoutOrganizationInputSchema),z.lazy(() => RestaurantCreateWithoutOrganizationInputSchema).array(),z.lazy(() => RestaurantUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => RestaurantUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RestaurantCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => RestaurantCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RestaurantCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RestaurantWhereUniqueInputSchema),z.lazy(() => RestaurantWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.UserUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutOrganizationInputSchema),z.lazy(() => UserCreateWithoutOrganizationInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => UserUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => UserCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RestaurantUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.RestaurantUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => RestaurantCreateWithoutOrganizationInputSchema),z.lazy(() => RestaurantCreateWithoutOrganizationInputSchema).array(),z.lazy(() => RestaurantUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => RestaurantUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RestaurantCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => RestaurantCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RestaurantUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => RestaurantUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RestaurantCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RestaurantWhereUniqueInputSchema),z.lazy(() => RestaurantWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RestaurantWhereUniqueInputSchema),z.lazy(() => RestaurantWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RestaurantWhereUniqueInputSchema),z.lazy(() => RestaurantWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RestaurantWhereUniqueInputSchema),z.lazy(() => RestaurantWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RestaurantUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => RestaurantUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RestaurantUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => RestaurantUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RestaurantScalarWhereInputSchema),z.lazy(() => RestaurantScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.UserUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutOrganizationInputSchema),z.lazy(() => UserCreateWithoutOrganizationInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => UserUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => UserCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => UserUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => UserUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => UserUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserScalarWhereInputSchema),z.lazy(() => UserScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RestaurantUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.RestaurantUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => RestaurantCreateWithoutOrganizationInputSchema),z.lazy(() => RestaurantCreateWithoutOrganizationInputSchema).array(),z.lazy(() => RestaurantUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => RestaurantUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RestaurantCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => RestaurantCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RestaurantUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => RestaurantUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RestaurantCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RestaurantWhereUniqueInputSchema),z.lazy(() => RestaurantWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RestaurantWhereUniqueInputSchema),z.lazy(() => RestaurantWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RestaurantWhereUniqueInputSchema),z.lazy(() => RestaurantWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RestaurantWhereUniqueInputSchema),z.lazy(() => RestaurantWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RestaurantUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => RestaurantUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RestaurantUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => RestaurantUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RestaurantScalarWhereInputSchema),z.lazy(() => RestaurantScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.UserUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutOrganizationInputSchema),z.lazy(() => UserCreateWithoutOrganizationInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => UserUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => UserCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => UserUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => UserUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => UserUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserScalarWhereInputSchema),z.lazy(() => UserScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RestaurantCreateNestedOneWithoutInventoryInputSchema: z.ZodType<Prisma.RestaurantCreateNestedOneWithoutInventoryInput> = z.object({
  create: z.union([ z.lazy(() => RestaurantCreateWithoutInventoryInputSchema),z.lazy(() => RestaurantUncheckedCreateWithoutInventoryInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RestaurantCreateOrConnectWithoutInventoryInputSchema).optional(),
  connect: z.lazy(() => RestaurantWhereUniqueInputSchema).optional()
}).strict();

export const InventoryItemCreateNestedManyWithoutInventoryInputSchema: z.ZodType<Prisma.InventoryItemCreateNestedManyWithoutInventoryInput> = z.object({
  create: z.union([ z.lazy(() => InventoryItemCreateWithoutInventoryInputSchema),z.lazy(() => InventoryItemCreateWithoutInventoryInputSchema).array(),z.lazy(() => InventoryItemUncheckedCreateWithoutInventoryInputSchema),z.lazy(() => InventoryItemUncheckedCreateWithoutInventoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InventoryItemCreateOrConnectWithoutInventoryInputSchema),z.lazy(() => InventoryItemCreateOrConnectWithoutInventoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InventoryItemCreateManyInventoryInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => InventoryItemWhereUniqueInputSchema),z.lazy(() => InventoryItemWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const InventoryTransactionCreateNestedManyWithoutInventoryInputSchema: z.ZodType<Prisma.InventoryTransactionCreateNestedManyWithoutInventoryInput> = z.object({
  create: z.union([ z.lazy(() => InventoryTransactionCreateWithoutInventoryInputSchema),z.lazy(() => InventoryTransactionCreateWithoutInventoryInputSchema).array(),z.lazy(() => InventoryTransactionUncheckedCreateWithoutInventoryInputSchema),z.lazy(() => InventoryTransactionUncheckedCreateWithoutInventoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InventoryTransactionCreateOrConnectWithoutInventoryInputSchema),z.lazy(() => InventoryTransactionCreateOrConnectWithoutInventoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InventoryTransactionCreateManyInventoryInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => InventoryTransactionWhereUniqueInputSchema),z.lazy(() => InventoryTransactionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const StockCountCreateNestedManyWithoutInventoryInputSchema: z.ZodType<Prisma.StockCountCreateNestedManyWithoutInventoryInput> = z.object({
  create: z.union([ z.lazy(() => StockCountCreateWithoutInventoryInputSchema),z.lazy(() => StockCountCreateWithoutInventoryInputSchema).array(),z.lazy(() => StockCountUncheckedCreateWithoutInventoryInputSchema),z.lazy(() => StockCountUncheckedCreateWithoutInventoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => StockCountCreateOrConnectWithoutInventoryInputSchema),z.lazy(() => StockCountCreateOrConnectWithoutInventoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => StockCountCreateManyInventoryInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => StockCountWhereUniqueInputSchema),z.lazy(() => StockCountWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const InventoryItemUncheckedCreateNestedManyWithoutInventoryInputSchema: z.ZodType<Prisma.InventoryItemUncheckedCreateNestedManyWithoutInventoryInput> = z.object({
  create: z.union([ z.lazy(() => InventoryItemCreateWithoutInventoryInputSchema),z.lazy(() => InventoryItemCreateWithoutInventoryInputSchema).array(),z.lazy(() => InventoryItemUncheckedCreateWithoutInventoryInputSchema),z.lazy(() => InventoryItemUncheckedCreateWithoutInventoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InventoryItemCreateOrConnectWithoutInventoryInputSchema),z.lazy(() => InventoryItemCreateOrConnectWithoutInventoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InventoryItemCreateManyInventoryInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => InventoryItemWhereUniqueInputSchema),z.lazy(() => InventoryItemWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const InventoryTransactionUncheckedCreateNestedManyWithoutInventoryInputSchema: z.ZodType<Prisma.InventoryTransactionUncheckedCreateNestedManyWithoutInventoryInput> = z.object({
  create: z.union([ z.lazy(() => InventoryTransactionCreateWithoutInventoryInputSchema),z.lazy(() => InventoryTransactionCreateWithoutInventoryInputSchema).array(),z.lazy(() => InventoryTransactionUncheckedCreateWithoutInventoryInputSchema),z.lazy(() => InventoryTransactionUncheckedCreateWithoutInventoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InventoryTransactionCreateOrConnectWithoutInventoryInputSchema),z.lazy(() => InventoryTransactionCreateOrConnectWithoutInventoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InventoryTransactionCreateManyInventoryInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => InventoryTransactionWhereUniqueInputSchema),z.lazy(() => InventoryTransactionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const StockCountUncheckedCreateNestedManyWithoutInventoryInputSchema: z.ZodType<Prisma.StockCountUncheckedCreateNestedManyWithoutInventoryInput> = z.object({
  create: z.union([ z.lazy(() => StockCountCreateWithoutInventoryInputSchema),z.lazy(() => StockCountCreateWithoutInventoryInputSchema).array(),z.lazy(() => StockCountUncheckedCreateWithoutInventoryInputSchema),z.lazy(() => StockCountUncheckedCreateWithoutInventoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => StockCountCreateOrConnectWithoutInventoryInputSchema),z.lazy(() => StockCountCreateOrConnectWithoutInventoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => StockCountCreateManyInventoryInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => StockCountWhereUniqueInputSchema),z.lazy(() => StockCountWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EnumInventoryTypeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumInventoryTypeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => InventoryTypeSchema).optional()
}).strict();

export const RestaurantUpdateOneRequiredWithoutInventoryNestedInputSchema: z.ZodType<Prisma.RestaurantUpdateOneRequiredWithoutInventoryNestedInput> = z.object({
  create: z.union([ z.lazy(() => RestaurantCreateWithoutInventoryInputSchema),z.lazy(() => RestaurantUncheckedCreateWithoutInventoryInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RestaurantCreateOrConnectWithoutInventoryInputSchema).optional(),
  upsert: z.lazy(() => RestaurantUpsertWithoutInventoryInputSchema).optional(),
  connect: z.lazy(() => RestaurantWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RestaurantUpdateToOneWithWhereWithoutInventoryInputSchema),z.lazy(() => RestaurantUpdateWithoutInventoryInputSchema),z.lazy(() => RestaurantUncheckedUpdateWithoutInventoryInputSchema) ]).optional(),
}).strict();

export const InventoryItemUpdateManyWithoutInventoryNestedInputSchema: z.ZodType<Prisma.InventoryItemUpdateManyWithoutInventoryNestedInput> = z.object({
  create: z.union([ z.lazy(() => InventoryItemCreateWithoutInventoryInputSchema),z.lazy(() => InventoryItemCreateWithoutInventoryInputSchema).array(),z.lazy(() => InventoryItemUncheckedCreateWithoutInventoryInputSchema),z.lazy(() => InventoryItemUncheckedCreateWithoutInventoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InventoryItemCreateOrConnectWithoutInventoryInputSchema),z.lazy(() => InventoryItemCreateOrConnectWithoutInventoryInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => InventoryItemUpsertWithWhereUniqueWithoutInventoryInputSchema),z.lazy(() => InventoryItemUpsertWithWhereUniqueWithoutInventoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InventoryItemCreateManyInventoryInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => InventoryItemWhereUniqueInputSchema),z.lazy(() => InventoryItemWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => InventoryItemWhereUniqueInputSchema),z.lazy(() => InventoryItemWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => InventoryItemWhereUniqueInputSchema),z.lazy(() => InventoryItemWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => InventoryItemWhereUniqueInputSchema),z.lazy(() => InventoryItemWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => InventoryItemUpdateWithWhereUniqueWithoutInventoryInputSchema),z.lazy(() => InventoryItemUpdateWithWhereUniqueWithoutInventoryInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => InventoryItemUpdateManyWithWhereWithoutInventoryInputSchema),z.lazy(() => InventoryItemUpdateManyWithWhereWithoutInventoryInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => InventoryItemScalarWhereInputSchema),z.lazy(() => InventoryItemScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const InventoryTransactionUpdateManyWithoutInventoryNestedInputSchema: z.ZodType<Prisma.InventoryTransactionUpdateManyWithoutInventoryNestedInput> = z.object({
  create: z.union([ z.lazy(() => InventoryTransactionCreateWithoutInventoryInputSchema),z.lazy(() => InventoryTransactionCreateWithoutInventoryInputSchema).array(),z.lazy(() => InventoryTransactionUncheckedCreateWithoutInventoryInputSchema),z.lazy(() => InventoryTransactionUncheckedCreateWithoutInventoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InventoryTransactionCreateOrConnectWithoutInventoryInputSchema),z.lazy(() => InventoryTransactionCreateOrConnectWithoutInventoryInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => InventoryTransactionUpsertWithWhereUniqueWithoutInventoryInputSchema),z.lazy(() => InventoryTransactionUpsertWithWhereUniqueWithoutInventoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InventoryTransactionCreateManyInventoryInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => InventoryTransactionWhereUniqueInputSchema),z.lazy(() => InventoryTransactionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => InventoryTransactionWhereUniqueInputSchema),z.lazy(() => InventoryTransactionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => InventoryTransactionWhereUniqueInputSchema),z.lazy(() => InventoryTransactionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => InventoryTransactionWhereUniqueInputSchema),z.lazy(() => InventoryTransactionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => InventoryTransactionUpdateWithWhereUniqueWithoutInventoryInputSchema),z.lazy(() => InventoryTransactionUpdateWithWhereUniqueWithoutInventoryInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => InventoryTransactionUpdateManyWithWhereWithoutInventoryInputSchema),z.lazy(() => InventoryTransactionUpdateManyWithWhereWithoutInventoryInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => InventoryTransactionScalarWhereInputSchema),z.lazy(() => InventoryTransactionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const StockCountUpdateManyWithoutInventoryNestedInputSchema: z.ZodType<Prisma.StockCountUpdateManyWithoutInventoryNestedInput> = z.object({
  create: z.union([ z.lazy(() => StockCountCreateWithoutInventoryInputSchema),z.lazy(() => StockCountCreateWithoutInventoryInputSchema).array(),z.lazy(() => StockCountUncheckedCreateWithoutInventoryInputSchema),z.lazy(() => StockCountUncheckedCreateWithoutInventoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => StockCountCreateOrConnectWithoutInventoryInputSchema),z.lazy(() => StockCountCreateOrConnectWithoutInventoryInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => StockCountUpsertWithWhereUniqueWithoutInventoryInputSchema),z.lazy(() => StockCountUpsertWithWhereUniqueWithoutInventoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => StockCountCreateManyInventoryInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => StockCountWhereUniqueInputSchema),z.lazy(() => StockCountWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => StockCountWhereUniqueInputSchema),z.lazy(() => StockCountWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => StockCountWhereUniqueInputSchema),z.lazy(() => StockCountWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => StockCountWhereUniqueInputSchema),z.lazy(() => StockCountWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => StockCountUpdateWithWhereUniqueWithoutInventoryInputSchema),z.lazy(() => StockCountUpdateWithWhereUniqueWithoutInventoryInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => StockCountUpdateManyWithWhereWithoutInventoryInputSchema),z.lazy(() => StockCountUpdateManyWithWhereWithoutInventoryInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => StockCountScalarWhereInputSchema),z.lazy(() => StockCountScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const InventoryItemUncheckedUpdateManyWithoutInventoryNestedInputSchema: z.ZodType<Prisma.InventoryItemUncheckedUpdateManyWithoutInventoryNestedInput> = z.object({
  create: z.union([ z.lazy(() => InventoryItemCreateWithoutInventoryInputSchema),z.lazy(() => InventoryItemCreateWithoutInventoryInputSchema).array(),z.lazy(() => InventoryItemUncheckedCreateWithoutInventoryInputSchema),z.lazy(() => InventoryItemUncheckedCreateWithoutInventoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InventoryItemCreateOrConnectWithoutInventoryInputSchema),z.lazy(() => InventoryItemCreateOrConnectWithoutInventoryInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => InventoryItemUpsertWithWhereUniqueWithoutInventoryInputSchema),z.lazy(() => InventoryItemUpsertWithWhereUniqueWithoutInventoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InventoryItemCreateManyInventoryInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => InventoryItemWhereUniqueInputSchema),z.lazy(() => InventoryItemWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => InventoryItemWhereUniqueInputSchema),z.lazy(() => InventoryItemWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => InventoryItemWhereUniqueInputSchema),z.lazy(() => InventoryItemWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => InventoryItemWhereUniqueInputSchema),z.lazy(() => InventoryItemWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => InventoryItemUpdateWithWhereUniqueWithoutInventoryInputSchema),z.lazy(() => InventoryItemUpdateWithWhereUniqueWithoutInventoryInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => InventoryItemUpdateManyWithWhereWithoutInventoryInputSchema),z.lazy(() => InventoryItemUpdateManyWithWhereWithoutInventoryInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => InventoryItemScalarWhereInputSchema),z.lazy(() => InventoryItemScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const InventoryTransactionUncheckedUpdateManyWithoutInventoryNestedInputSchema: z.ZodType<Prisma.InventoryTransactionUncheckedUpdateManyWithoutInventoryNestedInput> = z.object({
  create: z.union([ z.lazy(() => InventoryTransactionCreateWithoutInventoryInputSchema),z.lazy(() => InventoryTransactionCreateWithoutInventoryInputSchema).array(),z.lazy(() => InventoryTransactionUncheckedCreateWithoutInventoryInputSchema),z.lazy(() => InventoryTransactionUncheckedCreateWithoutInventoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InventoryTransactionCreateOrConnectWithoutInventoryInputSchema),z.lazy(() => InventoryTransactionCreateOrConnectWithoutInventoryInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => InventoryTransactionUpsertWithWhereUniqueWithoutInventoryInputSchema),z.lazy(() => InventoryTransactionUpsertWithWhereUniqueWithoutInventoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InventoryTransactionCreateManyInventoryInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => InventoryTransactionWhereUniqueInputSchema),z.lazy(() => InventoryTransactionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => InventoryTransactionWhereUniqueInputSchema),z.lazy(() => InventoryTransactionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => InventoryTransactionWhereUniqueInputSchema),z.lazy(() => InventoryTransactionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => InventoryTransactionWhereUniqueInputSchema),z.lazy(() => InventoryTransactionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => InventoryTransactionUpdateWithWhereUniqueWithoutInventoryInputSchema),z.lazy(() => InventoryTransactionUpdateWithWhereUniqueWithoutInventoryInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => InventoryTransactionUpdateManyWithWhereWithoutInventoryInputSchema),z.lazy(() => InventoryTransactionUpdateManyWithWhereWithoutInventoryInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => InventoryTransactionScalarWhereInputSchema),z.lazy(() => InventoryTransactionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const StockCountUncheckedUpdateManyWithoutInventoryNestedInputSchema: z.ZodType<Prisma.StockCountUncheckedUpdateManyWithoutInventoryNestedInput> = z.object({
  create: z.union([ z.lazy(() => StockCountCreateWithoutInventoryInputSchema),z.lazy(() => StockCountCreateWithoutInventoryInputSchema).array(),z.lazy(() => StockCountUncheckedCreateWithoutInventoryInputSchema),z.lazy(() => StockCountUncheckedCreateWithoutInventoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => StockCountCreateOrConnectWithoutInventoryInputSchema),z.lazy(() => StockCountCreateOrConnectWithoutInventoryInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => StockCountUpsertWithWhereUniqueWithoutInventoryInputSchema),z.lazy(() => StockCountUpsertWithWhereUniqueWithoutInventoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => StockCountCreateManyInventoryInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => StockCountWhereUniqueInputSchema),z.lazy(() => StockCountWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => StockCountWhereUniqueInputSchema),z.lazy(() => StockCountWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => StockCountWhereUniqueInputSchema),z.lazy(() => StockCountWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => StockCountWhereUniqueInputSchema),z.lazy(() => StockCountWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => StockCountUpdateWithWhereUniqueWithoutInventoryInputSchema),z.lazy(() => StockCountUpdateWithWhereUniqueWithoutInventoryInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => StockCountUpdateManyWithWhereWithoutInventoryInputSchema),z.lazy(() => StockCountUpdateManyWithWhereWithoutInventoryInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => StockCountScalarWhereInputSchema),z.lazy(() => StockCountScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrganizationCreateNestedOneWithoutRestaurantsInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutRestaurantsInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutRestaurantsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutRestaurantsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutRestaurantsInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedManyWithoutRestaurantInputSchema: z.ZodType<Prisma.UserCreateNestedManyWithoutRestaurantInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutRestaurantInputSchema),z.lazy(() => UserCreateWithoutRestaurantInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutRestaurantInputSchema),z.lazy(() => UserUncheckedCreateWithoutRestaurantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutRestaurantInputSchema),z.lazy(() => UserCreateOrConnectWithoutRestaurantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CookBookCreateNestedManyWithoutRestaurantInputSchema: z.ZodType<Prisma.CookBookCreateNestedManyWithoutRestaurantInput> = z.object({
  create: z.union([ z.lazy(() => CookBookCreateWithoutRestaurantInputSchema),z.lazy(() => CookBookCreateWithoutRestaurantInputSchema).array(),z.lazy(() => CookBookUncheckedCreateWithoutRestaurantInputSchema),z.lazy(() => CookBookUncheckedCreateWithoutRestaurantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CookBookCreateOrConnectWithoutRestaurantInputSchema),z.lazy(() => CookBookCreateOrConnectWithoutRestaurantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CookBookCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CookBookWhereUniqueInputSchema),z.lazy(() => CookBookWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const InventoryCreateNestedOneWithoutRestaurantInputSchema: z.ZodType<Prisma.InventoryCreateNestedOneWithoutRestaurantInput> = z.object({
  create: z.union([ z.lazy(() => InventoryCreateWithoutRestaurantInputSchema),z.lazy(() => InventoryUncheckedCreateWithoutRestaurantInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => InventoryCreateOrConnectWithoutRestaurantInputSchema).optional(),
  connect: z.lazy(() => InventoryWhereUniqueInputSchema).optional()
}).strict();

export const OrderCreateNestedManyWithoutRestaurantInputSchema: z.ZodType<Prisma.OrderCreateNestedManyWithoutRestaurantInput> = z.object({
  create: z.union([ z.lazy(() => OrderCreateWithoutRestaurantInputSchema),z.lazy(() => OrderCreateWithoutRestaurantInputSchema).array(),z.lazy(() => OrderUncheckedCreateWithoutRestaurantInputSchema),z.lazy(() => OrderUncheckedCreateWithoutRestaurantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrderCreateOrConnectWithoutRestaurantInputSchema),z.lazy(() => OrderCreateOrConnectWithoutRestaurantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrderCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => OrderWhereUniqueInputSchema),z.lazy(() => OrderWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RecipeCreateNestedManyWithoutRestaurantInputSchema: z.ZodType<Prisma.RecipeCreateNestedManyWithoutRestaurantInput> = z.object({
  create: z.union([ z.lazy(() => RecipeCreateWithoutRestaurantInputSchema),z.lazy(() => RecipeCreateWithoutRestaurantInputSchema).array(),z.lazy(() => RecipeUncheckedCreateWithoutRestaurantInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutRestaurantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeCreateOrConnectWithoutRestaurantInputSchema),z.lazy(() => RecipeCreateOrConnectWithoutRestaurantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RecipeWhereUniqueInputSchema),z.lazy(() => RecipeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const MenuCreateNestedManyWithoutRestaurantInputSchema: z.ZodType<Prisma.MenuCreateNestedManyWithoutRestaurantInput> = z.object({
  create: z.union([ z.lazy(() => MenuCreateWithoutRestaurantInputSchema),z.lazy(() => MenuCreateWithoutRestaurantInputSchema).array(),z.lazy(() => MenuUncheckedCreateWithoutRestaurantInputSchema),z.lazy(() => MenuUncheckedCreateWithoutRestaurantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MenuCreateOrConnectWithoutRestaurantInputSchema),z.lazy(() => MenuCreateOrConnectWithoutRestaurantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MenuCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => MenuWhereUniqueInputSchema),z.lazy(() => MenuWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SalesTransactionsCreateNestedManyWithoutRestaurantInputSchema: z.ZodType<Prisma.SalesTransactionsCreateNestedManyWithoutRestaurantInput> = z.object({
  create: z.union([ z.lazy(() => SalesTransactionsCreateWithoutRestaurantInputSchema),z.lazy(() => SalesTransactionsCreateWithoutRestaurantInputSchema).array(),z.lazy(() => SalesTransactionsUncheckedCreateWithoutRestaurantInputSchema),z.lazy(() => SalesTransactionsUncheckedCreateWithoutRestaurantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SalesTransactionsCreateOrConnectWithoutRestaurantInputSchema),z.lazy(() => SalesTransactionsCreateOrConnectWithoutRestaurantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SalesTransactionsCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SalesTransactionsWhereUniqueInputSchema),z.lazy(() => SalesTransactionsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LeftoverItemCreateNestedManyWithoutRestaurantInputSchema: z.ZodType<Prisma.LeftoverItemCreateNestedManyWithoutRestaurantInput> = z.object({
  create: z.union([ z.lazy(() => LeftoverItemCreateWithoutRestaurantInputSchema),z.lazy(() => LeftoverItemCreateWithoutRestaurantInputSchema).array(),z.lazy(() => LeftoverItemUncheckedCreateWithoutRestaurantInputSchema),z.lazy(() => LeftoverItemUncheckedCreateWithoutRestaurantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LeftoverItemCreateOrConnectWithoutRestaurantInputSchema),z.lazy(() => LeftoverItemCreateOrConnectWithoutRestaurantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LeftoverItemCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LeftoverItemWhereUniqueInputSchema),z.lazy(() => LeftoverItemWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const WasteRecordCreateNestedManyWithoutRestaurantInputSchema: z.ZodType<Prisma.WasteRecordCreateNestedManyWithoutRestaurantInput> = z.object({
  create: z.union([ z.lazy(() => WasteRecordCreateWithoutRestaurantInputSchema),z.lazy(() => WasteRecordCreateWithoutRestaurantInputSchema).array(),z.lazy(() => WasteRecordUncheckedCreateWithoutRestaurantInputSchema),z.lazy(() => WasteRecordUncheckedCreateWithoutRestaurantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => WasteRecordCreateOrConnectWithoutRestaurantInputSchema),z.lazy(() => WasteRecordCreateOrConnectWithoutRestaurantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => WasteRecordCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => WasteRecordWhereUniqueInputSchema),z.lazy(() => WasteRecordWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProductionPlanCreateNestedManyWithoutRestaurantInputSchema: z.ZodType<Prisma.ProductionPlanCreateNestedManyWithoutRestaurantInput> = z.object({
  create: z.union([ z.lazy(() => ProductionPlanCreateWithoutRestaurantInputSchema),z.lazy(() => ProductionPlanCreateWithoutRestaurantInputSchema).array(),z.lazy(() => ProductionPlanUncheckedCreateWithoutRestaurantInputSchema),z.lazy(() => ProductionPlanUncheckedCreateWithoutRestaurantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductionPlanCreateOrConnectWithoutRestaurantInputSchema),z.lazy(() => ProductionPlanCreateOrConnectWithoutRestaurantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductionPlanCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProductionPlanWhereUniqueInputSchema),z.lazy(() => ProductionPlanWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EquipmentCreateNestedManyWithoutRestaurantInputSchema: z.ZodType<Prisma.EquipmentCreateNestedManyWithoutRestaurantInput> = z.object({
  create: z.union([ z.lazy(() => EquipmentCreateWithoutRestaurantInputSchema),z.lazy(() => EquipmentCreateWithoutRestaurantInputSchema).array(),z.lazy(() => EquipmentUncheckedCreateWithoutRestaurantInputSchema),z.lazy(() => EquipmentUncheckedCreateWithoutRestaurantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EquipmentCreateOrConnectWithoutRestaurantInputSchema),z.lazy(() => EquipmentCreateOrConnectWithoutRestaurantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EquipmentCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EquipmentWhereUniqueInputSchema),z.lazy(() => EquipmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const QualityChecklistCreateNestedManyWithoutRestaurantInputSchema: z.ZodType<Prisma.QualityChecklistCreateNestedManyWithoutRestaurantInput> = z.object({
  create: z.union([ z.lazy(() => QualityChecklistCreateWithoutRestaurantInputSchema),z.lazy(() => QualityChecklistCreateWithoutRestaurantInputSchema).array(),z.lazy(() => QualityChecklistUncheckedCreateWithoutRestaurantInputSchema),z.lazy(() => QualityChecklistUncheckedCreateWithoutRestaurantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => QualityChecklistCreateOrConnectWithoutRestaurantInputSchema),z.lazy(() => QualityChecklistCreateOrConnectWithoutRestaurantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => QualityChecklistCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => QualityChecklistWhereUniqueInputSchema),z.lazy(() => QualityChecklistWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CustomerFeedbackCreateNestedManyWithoutRestaurantInputSchema: z.ZodType<Prisma.CustomerFeedbackCreateNestedManyWithoutRestaurantInput> = z.object({
  create: z.union([ z.lazy(() => CustomerFeedbackCreateWithoutRestaurantInputSchema),z.lazy(() => CustomerFeedbackCreateWithoutRestaurantInputSchema).array(),z.lazy(() => CustomerFeedbackUncheckedCreateWithoutRestaurantInputSchema),z.lazy(() => CustomerFeedbackUncheckedCreateWithoutRestaurantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomerFeedbackCreateOrConnectWithoutRestaurantInputSchema),z.lazy(() => CustomerFeedbackCreateOrConnectWithoutRestaurantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomerFeedbackCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CustomerFeedbackWhereUniqueInputSchema),z.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserUncheckedCreateNestedManyWithoutRestaurantInputSchema: z.ZodType<Prisma.UserUncheckedCreateNestedManyWithoutRestaurantInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutRestaurantInputSchema),z.lazy(() => UserCreateWithoutRestaurantInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutRestaurantInputSchema),z.lazy(() => UserUncheckedCreateWithoutRestaurantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutRestaurantInputSchema),z.lazy(() => UserCreateOrConnectWithoutRestaurantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CookBookUncheckedCreateNestedManyWithoutRestaurantInputSchema: z.ZodType<Prisma.CookBookUncheckedCreateNestedManyWithoutRestaurantInput> = z.object({
  create: z.union([ z.lazy(() => CookBookCreateWithoutRestaurantInputSchema),z.lazy(() => CookBookCreateWithoutRestaurantInputSchema).array(),z.lazy(() => CookBookUncheckedCreateWithoutRestaurantInputSchema),z.lazy(() => CookBookUncheckedCreateWithoutRestaurantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CookBookCreateOrConnectWithoutRestaurantInputSchema),z.lazy(() => CookBookCreateOrConnectWithoutRestaurantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CookBookCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CookBookWhereUniqueInputSchema),z.lazy(() => CookBookWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const InventoryUncheckedCreateNestedOneWithoutRestaurantInputSchema: z.ZodType<Prisma.InventoryUncheckedCreateNestedOneWithoutRestaurantInput> = z.object({
  create: z.union([ z.lazy(() => InventoryCreateWithoutRestaurantInputSchema),z.lazy(() => InventoryUncheckedCreateWithoutRestaurantInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => InventoryCreateOrConnectWithoutRestaurantInputSchema).optional(),
  connect: z.lazy(() => InventoryWhereUniqueInputSchema).optional()
}).strict();

export const OrderUncheckedCreateNestedManyWithoutRestaurantInputSchema: z.ZodType<Prisma.OrderUncheckedCreateNestedManyWithoutRestaurantInput> = z.object({
  create: z.union([ z.lazy(() => OrderCreateWithoutRestaurantInputSchema),z.lazy(() => OrderCreateWithoutRestaurantInputSchema).array(),z.lazy(() => OrderUncheckedCreateWithoutRestaurantInputSchema),z.lazy(() => OrderUncheckedCreateWithoutRestaurantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrderCreateOrConnectWithoutRestaurantInputSchema),z.lazy(() => OrderCreateOrConnectWithoutRestaurantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrderCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => OrderWhereUniqueInputSchema),z.lazy(() => OrderWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RecipeUncheckedCreateNestedManyWithoutRestaurantInputSchema: z.ZodType<Prisma.RecipeUncheckedCreateNestedManyWithoutRestaurantInput> = z.object({
  create: z.union([ z.lazy(() => RecipeCreateWithoutRestaurantInputSchema),z.lazy(() => RecipeCreateWithoutRestaurantInputSchema).array(),z.lazy(() => RecipeUncheckedCreateWithoutRestaurantInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutRestaurantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeCreateOrConnectWithoutRestaurantInputSchema),z.lazy(() => RecipeCreateOrConnectWithoutRestaurantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RecipeWhereUniqueInputSchema),z.lazy(() => RecipeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const MenuUncheckedCreateNestedManyWithoutRestaurantInputSchema: z.ZodType<Prisma.MenuUncheckedCreateNestedManyWithoutRestaurantInput> = z.object({
  create: z.union([ z.lazy(() => MenuCreateWithoutRestaurantInputSchema),z.lazy(() => MenuCreateWithoutRestaurantInputSchema).array(),z.lazy(() => MenuUncheckedCreateWithoutRestaurantInputSchema),z.lazy(() => MenuUncheckedCreateWithoutRestaurantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MenuCreateOrConnectWithoutRestaurantInputSchema),z.lazy(() => MenuCreateOrConnectWithoutRestaurantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MenuCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => MenuWhereUniqueInputSchema),z.lazy(() => MenuWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SalesTransactionsUncheckedCreateNestedManyWithoutRestaurantInputSchema: z.ZodType<Prisma.SalesTransactionsUncheckedCreateNestedManyWithoutRestaurantInput> = z.object({
  create: z.union([ z.lazy(() => SalesTransactionsCreateWithoutRestaurantInputSchema),z.lazy(() => SalesTransactionsCreateWithoutRestaurantInputSchema).array(),z.lazy(() => SalesTransactionsUncheckedCreateWithoutRestaurantInputSchema),z.lazy(() => SalesTransactionsUncheckedCreateWithoutRestaurantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SalesTransactionsCreateOrConnectWithoutRestaurantInputSchema),z.lazy(() => SalesTransactionsCreateOrConnectWithoutRestaurantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SalesTransactionsCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SalesTransactionsWhereUniqueInputSchema),z.lazy(() => SalesTransactionsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LeftoverItemUncheckedCreateNestedManyWithoutRestaurantInputSchema: z.ZodType<Prisma.LeftoverItemUncheckedCreateNestedManyWithoutRestaurantInput> = z.object({
  create: z.union([ z.lazy(() => LeftoverItemCreateWithoutRestaurantInputSchema),z.lazy(() => LeftoverItemCreateWithoutRestaurantInputSchema).array(),z.lazy(() => LeftoverItemUncheckedCreateWithoutRestaurantInputSchema),z.lazy(() => LeftoverItemUncheckedCreateWithoutRestaurantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LeftoverItemCreateOrConnectWithoutRestaurantInputSchema),z.lazy(() => LeftoverItemCreateOrConnectWithoutRestaurantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LeftoverItemCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LeftoverItemWhereUniqueInputSchema),z.lazy(() => LeftoverItemWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const WasteRecordUncheckedCreateNestedManyWithoutRestaurantInputSchema: z.ZodType<Prisma.WasteRecordUncheckedCreateNestedManyWithoutRestaurantInput> = z.object({
  create: z.union([ z.lazy(() => WasteRecordCreateWithoutRestaurantInputSchema),z.lazy(() => WasteRecordCreateWithoutRestaurantInputSchema).array(),z.lazy(() => WasteRecordUncheckedCreateWithoutRestaurantInputSchema),z.lazy(() => WasteRecordUncheckedCreateWithoutRestaurantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => WasteRecordCreateOrConnectWithoutRestaurantInputSchema),z.lazy(() => WasteRecordCreateOrConnectWithoutRestaurantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => WasteRecordCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => WasteRecordWhereUniqueInputSchema),z.lazy(() => WasteRecordWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProductionPlanUncheckedCreateNestedManyWithoutRestaurantInputSchema: z.ZodType<Prisma.ProductionPlanUncheckedCreateNestedManyWithoutRestaurantInput> = z.object({
  create: z.union([ z.lazy(() => ProductionPlanCreateWithoutRestaurantInputSchema),z.lazy(() => ProductionPlanCreateWithoutRestaurantInputSchema).array(),z.lazy(() => ProductionPlanUncheckedCreateWithoutRestaurantInputSchema),z.lazy(() => ProductionPlanUncheckedCreateWithoutRestaurantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductionPlanCreateOrConnectWithoutRestaurantInputSchema),z.lazy(() => ProductionPlanCreateOrConnectWithoutRestaurantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductionPlanCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProductionPlanWhereUniqueInputSchema),z.lazy(() => ProductionPlanWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EquipmentUncheckedCreateNestedManyWithoutRestaurantInputSchema: z.ZodType<Prisma.EquipmentUncheckedCreateNestedManyWithoutRestaurantInput> = z.object({
  create: z.union([ z.lazy(() => EquipmentCreateWithoutRestaurantInputSchema),z.lazy(() => EquipmentCreateWithoutRestaurantInputSchema).array(),z.lazy(() => EquipmentUncheckedCreateWithoutRestaurantInputSchema),z.lazy(() => EquipmentUncheckedCreateWithoutRestaurantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EquipmentCreateOrConnectWithoutRestaurantInputSchema),z.lazy(() => EquipmentCreateOrConnectWithoutRestaurantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EquipmentCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EquipmentWhereUniqueInputSchema),z.lazy(() => EquipmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const QualityChecklistUncheckedCreateNestedManyWithoutRestaurantInputSchema: z.ZodType<Prisma.QualityChecklistUncheckedCreateNestedManyWithoutRestaurantInput> = z.object({
  create: z.union([ z.lazy(() => QualityChecklistCreateWithoutRestaurantInputSchema),z.lazy(() => QualityChecklistCreateWithoutRestaurantInputSchema).array(),z.lazy(() => QualityChecklistUncheckedCreateWithoutRestaurantInputSchema),z.lazy(() => QualityChecklistUncheckedCreateWithoutRestaurantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => QualityChecklistCreateOrConnectWithoutRestaurantInputSchema),z.lazy(() => QualityChecklistCreateOrConnectWithoutRestaurantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => QualityChecklistCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => QualityChecklistWhereUniqueInputSchema),z.lazy(() => QualityChecklistWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CustomerFeedbackUncheckedCreateNestedManyWithoutRestaurantInputSchema: z.ZodType<Prisma.CustomerFeedbackUncheckedCreateNestedManyWithoutRestaurantInput> = z.object({
  create: z.union([ z.lazy(() => CustomerFeedbackCreateWithoutRestaurantInputSchema),z.lazy(() => CustomerFeedbackCreateWithoutRestaurantInputSchema).array(),z.lazy(() => CustomerFeedbackUncheckedCreateWithoutRestaurantInputSchema),z.lazy(() => CustomerFeedbackUncheckedCreateWithoutRestaurantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomerFeedbackCreateOrConnectWithoutRestaurantInputSchema),z.lazy(() => CustomerFeedbackCreateOrConnectWithoutRestaurantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomerFeedbackCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CustomerFeedbackWhereUniqueInputSchema),z.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OrganizationUpdateOneWithoutRestaurantsNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneWithoutRestaurantsNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutRestaurantsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutRestaurantsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutRestaurantsInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutRestaurantsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutRestaurantsInputSchema),z.lazy(() => OrganizationUpdateWithoutRestaurantsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutRestaurantsInputSchema) ]).optional(),
}).strict();

export const UserUpdateManyWithoutRestaurantNestedInputSchema: z.ZodType<Prisma.UserUpdateManyWithoutRestaurantNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutRestaurantInputSchema),z.lazy(() => UserCreateWithoutRestaurantInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutRestaurantInputSchema),z.lazy(() => UserUncheckedCreateWithoutRestaurantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutRestaurantInputSchema),z.lazy(() => UserCreateOrConnectWithoutRestaurantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserUpsertWithWhereUniqueWithoutRestaurantInputSchema),z.lazy(() => UserUpsertWithWhereUniqueWithoutRestaurantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserUpdateWithWhereUniqueWithoutRestaurantInputSchema),z.lazy(() => UserUpdateWithWhereUniqueWithoutRestaurantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserUpdateManyWithWhereWithoutRestaurantInputSchema),z.lazy(() => UserUpdateManyWithWhereWithoutRestaurantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserScalarWhereInputSchema),z.lazy(() => UserScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CookBookUpdateManyWithoutRestaurantNestedInputSchema: z.ZodType<Prisma.CookBookUpdateManyWithoutRestaurantNestedInput> = z.object({
  create: z.union([ z.lazy(() => CookBookCreateWithoutRestaurantInputSchema),z.lazy(() => CookBookCreateWithoutRestaurantInputSchema).array(),z.lazy(() => CookBookUncheckedCreateWithoutRestaurantInputSchema),z.lazy(() => CookBookUncheckedCreateWithoutRestaurantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CookBookCreateOrConnectWithoutRestaurantInputSchema),z.lazy(() => CookBookCreateOrConnectWithoutRestaurantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CookBookUpsertWithWhereUniqueWithoutRestaurantInputSchema),z.lazy(() => CookBookUpsertWithWhereUniqueWithoutRestaurantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CookBookCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CookBookWhereUniqueInputSchema),z.lazy(() => CookBookWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CookBookWhereUniqueInputSchema),z.lazy(() => CookBookWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CookBookWhereUniqueInputSchema),z.lazy(() => CookBookWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CookBookWhereUniqueInputSchema),z.lazy(() => CookBookWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CookBookUpdateWithWhereUniqueWithoutRestaurantInputSchema),z.lazy(() => CookBookUpdateWithWhereUniqueWithoutRestaurantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CookBookUpdateManyWithWhereWithoutRestaurantInputSchema),z.lazy(() => CookBookUpdateManyWithWhereWithoutRestaurantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CookBookScalarWhereInputSchema),z.lazy(() => CookBookScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const InventoryUpdateOneWithoutRestaurantNestedInputSchema: z.ZodType<Prisma.InventoryUpdateOneWithoutRestaurantNestedInput> = z.object({
  create: z.union([ z.lazy(() => InventoryCreateWithoutRestaurantInputSchema),z.lazy(() => InventoryUncheckedCreateWithoutRestaurantInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => InventoryCreateOrConnectWithoutRestaurantInputSchema).optional(),
  upsert: z.lazy(() => InventoryUpsertWithoutRestaurantInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => InventoryWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => InventoryWhereInputSchema) ]).optional(),
  connect: z.lazy(() => InventoryWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => InventoryUpdateToOneWithWhereWithoutRestaurantInputSchema),z.lazy(() => InventoryUpdateWithoutRestaurantInputSchema),z.lazy(() => InventoryUncheckedUpdateWithoutRestaurantInputSchema) ]).optional(),
}).strict();

export const OrderUpdateManyWithoutRestaurantNestedInputSchema: z.ZodType<Prisma.OrderUpdateManyWithoutRestaurantNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrderCreateWithoutRestaurantInputSchema),z.lazy(() => OrderCreateWithoutRestaurantInputSchema).array(),z.lazy(() => OrderUncheckedCreateWithoutRestaurantInputSchema),z.lazy(() => OrderUncheckedCreateWithoutRestaurantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrderCreateOrConnectWithoutRestaurantInputSchema),z.lazy(() => OrderCreateOrConnectWithoutRestaurantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => OrderUpsertWithWhereUniqueWithoutRestaurantInputSchema),z.lazy(() => OrderUpsertWithWhereUniqueWithoutRestaurantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrderCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => OrderWhereUniqueInputSchema),z.lazy(() => OrderWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => OrderWhereUniqueInputSchema),z.lazy(() => OrderWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => OrderWhereUniqueInputSchema),z.lazy(() => OrderWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => OrderWhereUniqueInputSchema),z.lazy(() => OrderWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => OrderUpdateWithWhereUniqueWithoutRestaurantInputSchema),z.lazy(() => OrderUpdateWithWhereUniqueWithoutRestaurantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => OrderUpdateManyWithWhereWithoutRestaurantInputSchema),z.lazy(() => OrderUpdateManyWithWhereWithoutRestaurantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => OrderScalarWhereInputSchema),z.lazy(() => OrderScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RecipeUpdateManyWithoutRestaurantNestedInputSchema: z.ZodType<Prisma.RecipeUpdateManyWithoutRestaurantNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeCreateWithoutRestaurantInputSchema),z.lazy(() => RecipeCreateWithoutRestaurantInputSchema).array(),z.lazy(() => RecipeUncheckedCreateWithoutRestaurantInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutRestaurantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeCreateOrConnectWithoutRestaurantInputSchema),z.lazy(() => RecipeCreateOrConnectWithoutRestaurantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RecipeUpsertWithWhereUniqueWithoutRestaurantInputSchema),z.lazy(() => RecipeUpsertWithWhereUniqueWithoutRestaurantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RecipeWhereUniqueInputSchema),z.lazy(() => RecipeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RecipeWhereUniqueInputSchema),z.lazy(() => RecipeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RecipeWhereUniqueInputSchema),z.lazy(() => RecipeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RecipeWhereUniqueInputSchema),z.lazy(() => RecipeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RecipeUpdateWithWhereUniqueWithoutRestaurantInputSchema),z.lazy(() => RecipeUpdateWithWhereUniqueWithoutRestaurantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RecipeUpdateManyWithWhereWithoutRestaurantInputSchema),z.lazy(() => RecipeUpdateManyWithWhereWithoutRestaurantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RecipeScalarWhereInputSchema),z.lazy(() => RecipeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const MenuUpdateManyWithoutRestaurantNestedInputSchema: z.ZodType<Prisma.MenuUpdateManyWithoutRestaurantNestedInput> = z.object({
  create: z.union([ z.lazy(() => MenuCreateWithoutRestaurantInputSchema),z.lazy(() => MenuCreateWithoutRestaurantInputSchema).array(),z.lazy(() => MenuUncheckedCreateWithoutRestaurantInputSchema),z.lazy(() => MenuUncheckedCreateWithoutRestaurantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MenuCreateOrConnectWithoutRestaurantInputSchema),z.lazy(() => MenuCreateOrConnectWithoutRestaurantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MenuUpsertWithWhereUniqueWithoutRestaurantInputSchema),z.lazy(() => MenuUpsertWithWhereUniqueWithoutRestaurantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MenuCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => MenuWhereUniqueInputSchema),z.lazy(() => MenuWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MenuWhereUniqueInputSchema),z.lazy(() => MenuWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MenuWhereUniqueInputSchema),z.lazy(() => MenuWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MenuWhereUniqueInputSchema),z.lazy(() => MenuWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MenuUpdateWithWhereUniqueWithoutRestaurantInputSchema),z.lazy(() => MenuUpdateWithWhereUniqueWithoutRestaurantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MenuUpdateManyWithWhereWithoutRestaurantInputSchema),z.lazy(() => MenuUpdateManyWithWhereWithoutRestaurantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MenuScalarWhereInputSchema),z.lazy(() => MenuScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SalesTransactionsUpdateManyWithoutRestaurantNestedInputSchema: z.ZodType<Prisma.SalesTransactionsUpdateManyWithoutRestaurantNestedInput> = z.object({
  create: z.union([ z.lazy(() => SalesTransactionsCreateWithoutRestaurantInputSchema),z.lazy(() => SalesTransactionsCreateWithoutRestaurantInputSchema).array(),z.lazy(() => SalesTransactionsUncheckedCreateWithoutRestaurantInputSchema),z.lazy(() => SalesTransactionsUncheckedCreateWithoutRestaurantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SalesTransactionsCreateOrConnectWithoutRestaurantInputSchema),z.lazy(() => SalesTransactionsCreateOrConnectWithoutRestaurantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SalesTransactionsUpsertWithWhereUniqueWithoutRestaurantInputSchema),z.lazy(() => SalesTransactionsUpsertWithWhereUniqueWithoutRestaurantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SalesTransactionsCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SalesTransactionsWhereUniqueInputSchema),z.lazy(() => SalesTransactionsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SalesTransactionsWhereUniqueInputSchema),z.lazy(() => SalesTransactionsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SalesTransactionsWhereUniqueInputSchema),z.lazy(() => SalesTransactionsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SalesTransactionsWhereUniqueInputSchema),z.lazy(() => SalesTransactionsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SalesTransactionsUpdateWithWhereUniqueWithoutRestaurantInputSchema),z.lazy(() => SalesTransactionsUpdateWithWhereUniqueWithoutRestaurantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SalesTransactionsUpdateManyWithWhereWithoutRestaurantInputSchema),z.lazy(() => SalesTransactionsUpdateManyWithWhereWithoutRestaurantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SalesTransactionsScalarWhereInputSchema),z.lazy(() => SalesTransactionsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LeftoverItemUpdateManyWithoutRestaurantNestedInputSchema: z.ZodType<Prisma.LeftoverItemUpdateManyWithoutRestaurantNestedInput> = z.object({
  create: z.union([ z.lazy(() => LeftoverItemCreateWithoutRestaurantInputSchema),z.lazy(() => LeftoverItemCreateWithoutRestaurantInputSchema).array(),z.lazy(() => LeftoverItemUncheckedCreateWithoutRestaurantInputSchema),z.lazy(() => LeftoverItemUncheckedCreateWithoutRestaurantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LeftoverItemCreateOrConnectWithoutRestaurantInputSchema),z.lazy(() => LeftoverItemCreateOrConnectWithoutRestaurantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LeftoverItemUpsertWithWhereUniqueWithoutRestaurantInputSchema),z.lazy(() => LeftoverItemUpsertWithWhereUniqueWithoutRestaurantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LeftoverItemCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LeftoverItemWhereUniqueInputSchema),z.lazy(() => LeftoverItemWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LeftoverItemWhereUniqueInputSchema),z.lazy(() => LeftoverItemWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LeftoverItemWhereUniqueInputSchema),z.lazy(() => LeftoverItemWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LeftoverItemWhereUniqueInputSchema),z.lazy(() => LeftoverItemWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LeftoverItemUpdateWithWhereUniqueWithoutRestaurantInputSchema),z.lazy(() => LeftoverItemUpdateWithWhereUniqueWithoutRestaurantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LeftoverItemUpdateManyWithWhereWithoutRestaurantInputSchema),z.lazy(() => LeftoverItemUpdateManyWithWhereWithoutRestaurantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LeftoverItemScalarWhereInputSchema),z.lazy(() => LeftoverItemScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const WasteRecordUpdateManyWithoutRestaurantNestedInputSchema: z.ZodType<Prisma.WasteRecordUpdateManyWithoutRestaurantNestedInput> = z.object({
  create: z.union([ z.lazy(() => WasteRecordCreateWithoutRestaurantInputSchema),z.lazy(() => WasteRecordCreateWithoutRestaurantInputSchema).array(),z.lazy(() => WasteRecordUncheckedCreateWithoutRestaurantInputSchema),z.lazy(() => WasteRecordUncheckedCreateWithoutRestaurantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => WasteRecordCreateOrConnectWithoutRestaurantInputSchema),z.lazy(() => WasteRecordCreateOrConnectWithoutRestaurantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => WasteRecordUpsertWithWhereUniqueWithoutRestaurantInputSchema),z.lazy(() => WasteRecordUpsertWithWhereUniqueWithoutRestaurantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => WasteRecordCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => WasteRecordWhereUniqueInputSchema),z.lazy(() => WasteRecordWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => WasteRecordWhereUniqueInputSchema),z.lazy(() => WasteRecordWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => WasteRecordWhereUniqueInputSchema),z.lazy(() => WasteRecordWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => WasteRecordWhereUniqueInputSchema),z.lazy(() => WasteRecordWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => WasteRecordUpdateWithWhereUniqueWithoutRestaurantInputSchema),z.lazy(() => WasteRecordUpdateWithWhereUniqueWithoutRestaurantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => WasteRecordUpdateManyWithWhereWithoutRestaurantInputSchema),z.lazy(() => WasteRecordUpdateManyWithWhereWithoutRestaurantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => WasteRecordScalarWhereInputSchema),z.lazy(() => WasteRecordScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProductionPlanUpdateManyWithoutRestaurantNestedInputSchema: z.ZodType<Prisma.ProductionPlanUpdateManyWithoutRestaurantNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProductionPlanCreateWithoutRestaurantInputSchema),z.lazy(() => ProductionPlanCreateWithoutRestaurantInputSchema).array(),z.lazy(() => ProductionPlanUncheckedCreateWithoutRestaurantInputSchema),z.lazy(() => ProductionPlanUncheckedCreateWithoutRestaurantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductionPlanCreateOrConnectWithoutRestaurantInputSchema),z.lazy(() => ProductionPlanCreateOrConnectWithoutRestaurantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProductionPlanUpsertWithWhereUniqueWithoutRestaurantInputSchema),z.lazy(() => ProductionPlanUpsertWithWhereUniqueWithoutRestaurantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductionPlanCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProductionPlanWhereUniqueInputSchema),z.lazy(() => ProductionPlanWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProductionPlanWhereUniqueInputSchema),z.lazy(() => ProductionPlanWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProductionPlanWhereUniqueInputSchema),z.lazy(() => ProductionPlanWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProductionPlanWhereUniqueInputSchema),z.lazy(() => ProductionPlanWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProductionPlanUpdateWithWhereUniqueWithoutRestaurantInputSchema),z.lazy(() => ProductionPlanUpdateWithWhereUniqueWithoutRestaurantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProductionPlanUpdateManyWithWhereWithoutRestaurantInputSchema),z.lazy(() => ProductionPlanUpdateManyWithWhereWithoutRestaurantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProductionPlanScalarWhereInputSchema),z.lazy(() => ProductionPlanScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EquipmentUpdateManyWithoutRestaurantNestedInputSchema: z.ZodType<Prisma.EquipmentUpdateManyWithoutRestaurantNestedInput> = z.object({
  create: z.union([ z.lazy(() => EquipmentCreateWithoutRestaurantInputSchema),z.lazy(() => EquipmentCreateWithoutRestaurantInputSchema).array(),z.lazy(() => EquipmentUncheckedCreateWithoutRestaurantInputSchema),z.lazy(() => EquipmentUncheckedCreateWithoutRestaurantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EquipmentCreateOrConnectWithoutRestaurantInputSchema),z.lazy(() => EquipmentCreateOrConnectWithoutRestaurantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EquipmentUpsertWithWhereUniqueWithoutRestaurantInputSchema),z.lazy(() => EquipmentUpsertWithWhereUniqueWithoutRestaurantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EquipmentCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EquipmentWhereUniqueInputSchema),z.lazy(() => EquipmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EquipmentWhereUniqueInputSchema),z.lazy(() => EquipmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EquipmentWhereUniqueInputSchema),z.lazy(() => EquipmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EquipmentWhereUniqueInputSchema),z.lazy(() => EquipmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EquipmentUpdateWithWhereUniqueWithoutRestaurantInputSchema),z.lazy(() => EquipmentUpdateWithWhereUniqueWithoutRestaurantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EquipmentUpdateManyWithWhereWithoutRestaurantInputSchema),z.lazy(() => EquipmentUpdateManyWithWhereWithoutRestaurantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EquipmentScalarWhereInputSchema),z.lazy(() => EquipmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const QualityChecklistUpdateManyWithoutRestaurantNestedInputSchema: z.ZodType<Prisma.QualityChecklistUpdateManyWithoutRestaurantNestedInput> = z.object({
  create: z.union([ z.lazy(() => QualityChecklistCreateWithoutRestaurantInputSchema),z.lazy(() => QualityChecklistCreateWithoutRestaurantInputSchema).array(),z.lazy(() => QualityChecklistUncheckedCreateWithoutRestaurantInputSchema),z.lazy(() => QualityChecklistUncheckedCreateWithoutRestaurantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => QualityChecklistCreateOrConnectWithoutRestaurantInputSchema),z.lazy(() => QualityChecklistCreateOrConnectWithoutRestaurantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => QualityChecklistUpsertWithWhereUniqueWithoutRestaurantInputSchema),z.lazy(() => QualityChecklistUpsertWithWhereUniqueWithoutRestaurantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => QualityChecklistCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => QualityChecklistWhereUniqueInputSchema),z.lazy(() => QualityChecklistWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => QualityChecklistWhereUniqueInputSchema),z.lazy(() => QualityChecklistWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => QualityChecklistWhereUniqueInputSchema),z.lazy(() => QualityChecklistWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => QualityChecklistWhereUniqueInputSchema),z.lazy(() => QualityChecklistWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => QualityChecklistUpdateWithWhereUniqueWithoutRestaurantInputSchema),z.lazy(() => QualityChecklistUpdateWithWhereUniqueWithoutRestaurantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => QualityChecklistUpdateManyWithWhereWithoutRestaurantInputSchema),z.lazy(() => QualityChecklistUpdateManyWithWhereWithoutRestaurantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => QualityChecklistScalarWhereInputSchema),z.lazy(() => QualityChecklistScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CustomerFeedbackUpdateManyWithoutRestaurantNestedInputSchema: z.ZodType<Prisma.CustomerFeedbackUpdateManyWithoutRestaurantNestedInput> = z.object({
  create: z.union([ z.lazy(() => CustomerFeedbackCreateWithoutRestaurantInputSchema),z.lazy(() => CustomerFeedbackCreateWithoutRestaurantInputSchema).array(),z.lazy(() => CustomerFeedbackUncheckedCreateWithoutRestaurantInputSchema),z.lazy(() => CustomerFeedbackUncheckedCreateWithoutRestaurantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomerFeedbackCreateOrConnectWithoutRestaurantInputSchema),z.lazy(() => CustomerFeedbackCreateOrConnectWithoutRestaurantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CustomerFeedbackUpsertWithWhereUniqueWithoutRestaurantInputSchema),z.lazy(() => CustomerFeedbackUpsertWithWhereUniqueWithoutRestaurantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomerFeedbackCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CustomerFeedbackWhereUniqueInputSchema),z.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CustomerFeedbackWhereUniqueInputSchema),z.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CustomerFeedbackWhereUniqueInputSchema),z.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CustomerFeedbackWhereUniqueInputSchema),z.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CustomerFeedbackUpdateWithWhereUniqueWithoutRestaurantInputSchema),z.lazy(() => CustomerFeedbackUpdateWithWhereUniqueWithoutRestaurantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CustomerFeedbackUpdateManyWithWhereWithoutRestaurantInputSchema),z.lazy(() => CustomerFeedbackUpdateManyWithWhereWithoutRestaurantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CustomerFeedbackScalarWhereInputSchema),z.lazy(() => CustomerFeedbackScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserUncheckedUpdateManyWithoutRestaurantNestedInputSchema: z.ZodType<Prisma.UserUncheckedUpdateManyWithoutRestaurantNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutRestaurantInputSchema),z.lazy(() => UserCreateWithoutRestaurantInputSchema).array(),z.lazy(() => UserUncheckedCreateWithoutRestaurantInputSchema),z.lazy(() => UserUncheckedCreateWithoutRestaurantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserCreateOrConnectWithoutRestaurantInputSchema),z.lazy(() => UserCreateOrConnectWithoutRestaurantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserUpsertWithWhereUniqueWithoutRestaurantInputSchema),z.lazy(() => UserUpsertWithWhereUniqueWithoutRestaurantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserWhereUniqueInputSchema),z.lazy(() => UserWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserUpdateWithWhereUniqueWithoutRestaurantInputSchema),z.lazy(() => UserUpdateWithWhereUniqueWithoutRestaurantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserUpdateManyWithWhereWithoutRestaurantInputSchema),z.lazy(() => UserUpdateManyWithWhereWithoutRestaurantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserScalarWhereInputSchema),z.lazy(() => UserScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CookBookUncheckedUpdateManyWithoutRestaurantNestedInputSchema: z.ZodType<Prisma.CookBookUncheckedUpdateManyWithoutRestaurantNestedInput> = z.object({
  create: z.union([ z.lazy(() => CookBookCreateWithoutRestaurantInputSchema),z.lazy(() => CookBookCreateWithoutRestaurantInputSchema).array(),z.lazy(() => CookBookUncheckedCreateWithoutRestaurantInputSchema),z.lazy(() => CookBookUncheckedCreateWithoutRestaurantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CookBookCreateOrConnectWithoutRestaurantInputSchema),z.lazy(() => CookBookCreateOrConnectWithoutRestaurantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CookBookUpsertWithWhereUniqueWithoutRestaurantInputSchema),z.lazy(() => CookBookUpsertWithWhereUniqueWithoutRestaurantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CookBookCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CookBookWhereUniqueInputSchema),z.lazy(() => CookBookWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CookBookWhereUniqueInputSchema),z.lazy(() => CookBookWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CookBookWhereUniqueInputSchema),z.lazy(() => CookBookWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CookBookWhereUniqueInputSchema),z.lazy(() => CookBookWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CookBookUpdateWithWhereUniqueWithoutRestaurantInputSchema),z.lazy(() => CookBookUpdateWithWhereUniqueWithoutRestaurantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CookBookUpdateManyWithWhereWithoutRestaurantInputSchema),z.lazy(() => CookBookUpdateManyWithWhereWithoutRestaurantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CookBookScalarWhereInputSchema),z.lazy(() => CookBookScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const InventoryUncheckedUpdateOneWithoutRestaurantNestedInputSchema: z.ZodType<Prisma.InventoryUncheckedUpdateOneWithoutRestaurantNestedInput> = z.object({
  create: z.union([ z.lazy(() => InventoryCreateWithoutRestaurantInputSchema),z.lazy(() => InventoryUncheckedCreateWithoutRestaurantInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => InventoryCreateOrConnectWithoutRestaurantInputSchema).optional(),
  upsert: z.lazy(() => InventoryUpsertWithoutRestaurantInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => InventoryWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => InventoryWhereInputSchema) ]).optional(),
  connect: z.lazy(() => InventoryWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => InventoryUpdateToOneWithWhereWithoutRestaurantInputSchema),z.lazy(() => InventoryUpdateWithoutRestaurantInputSchema),z.lazy(() => InventoryUncheckedUpdateWithoutRestaurantInputSchema) ]).optional(),
}).strict();

export const OrderUncheckedUpdateManyWithoutRestaurantNestedInputSchema: z.ZodType<Prisma.OrderUncheckedUpdateManyWithoutRestaurantNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrderCreateWithoutRestaurantInputSchema),z.lazy(() => OrderCreateWithoutRestaurantInputSchema).array(),z.lazy(() => OrderUncheckedCreateWithoutRestaurantInputSchema),z.lazy(() => OrderUncheckedCreateWithoutRestaurantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrderCreateOrConnectWithoutRestaurantInputSchema),z.lazy(() => OrderCreateOrConnectWithoutRestaurantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => OrderUpsertWithWhereUniqueWithoutRestaurantInputSchema),z.lazy(() => OrderUpsertWithWhereUniqueWithoutRestaurantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrderCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => OrderWhereUniqueInputSchema),z.lazy(() => OrderWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => OrderWhereUniqueInputSchema),z.lazy(() => OrderWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => OrderWhereUniqueInputSchema),z.lazy(() => OrderWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => OrderWhereUniqueInputSchema),z.lazy(() => OrderWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => OrderUpdateWithWhereUniqueWithoutRestaurantInputSchema),z.lazy(() => OrderUpdateWithWhereUniqueWithoutRestaurantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => OrderUpdateManyWithWhereWithoutRestaurantInputSchema),z.lazy(() => OrderUpdateManyWithWhereWithoutRestaurantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => OrderScalarWhereInputSchema),z.lazy(() => OrderScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RecipeUncheckedUpdateManyWithoutRestaurantNestedInputSchema: z.ZodType<Prisma.RecipeUncheckedUpdateManyWithoutRestaurantNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeCreateWithoutRestaurantInputSchema),z.lazy(() => RecipeCreateWithoutRestaurantInputSchema).array(),z.lazy(() => RecipeUncheckedCreateWithoutRestaurantInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutRestaurantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeCreateOrConnectWithoutRestaurantInputSchema),z.lazy(() => RecipeCreateOrConnectWithoutRestaurantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RecipeUpsertWithWhereUniqueWithoutRestaurantInputSchema),z.lazy(() => RecipeUpsertWithWhereUniqueWithoutRestaurantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RecipeWhereUniqueInputSchema),z.lazy(() => RecipeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RecipeWhereUniqueInputSchema),z.lazy(() => RecipeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RecipeWhereUniqueInputSchema),z.lazy(() => RecipeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RecipeWhereUniqueInputSchema),z.lazy(() => RecipeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RecipeUpdateWithWhereUniqueWithoutRestaurantInputSchema),z.lazy(() => RecipeUpdateWithWhereUniqueWithoutRestaurantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RecipeUpdateManyWithWhereWithoutRestaurantInputSchema),z.lazy(() => RecipeUpdateManyWithWhereWithoutRestaurantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RecipeScalarWhereInputSchema),z.lazy(() => RecipeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const MenuUncheckedUpdateManyWithoutRestaurantNestedInputSchema: z.ZodType<Prisma.MenuUncheckedUpdateManyWithoutRestaurantNestedInput> = z.object({
  create: z.union([ z.lazy(() => MenuCreateWithoutRestaurantInputSchema),z.lazy(() => MenuCreateWithoutRestaurantInputSchema).array(),z.lazy(() => MenuUncheckedCreateWithoutRestaurantInputSchema),z.lazy(() => MenuUncheckedCreateWithoutRestaurantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MenuCreateOrConnectWithoutRestaurantInputSchema),z.lazy(() => MenuCreateOrConnectWithoutRestaurantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MenuUpsertWithWhereUniqueWithoutRestaurantInputSchema),z.lazy(() => MenuUpsertWithWhereUniqueWithoutRestaurantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MenuCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => MenuWhereUniqueInputSchema),z.lazy(() => MenuWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MenuWhereUniqueInputSchema),z.lazy(() => MenuWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MenuWhereUniqueInputSchema),z.lazy(() => MenuWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MenuWhereUniqueInputSchema),z.lazy(() => MenuWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MenuUpdateWithWhereUniqueWithoutRestaurantInputSchema),z.lazy(() => MenuUpdateWithWhereUniqueWithoutRestaurantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MenuUpdateManyWithWhereWithoutRestaurantInputSchema),z.lazy(() => MenuUpdateManyWithWhereWithoutRestaurantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MenuScalarWhereInputSchema),z.lazy(() => MenuScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SalesTransactionsUncheckedUpdateManyWithoutRestaurantNestedInputSchema: z.ZodType<Prisma.SalesTransactionsUncheckedUpdateManyWithoutRestaurantNestedInput> = z.object({
  create: z.union([ z.lazy(() => SalesTransactionsCreateWithoutRestaurantInputSchema),z.lazy(() => SalesTransactionsCreateWithoutRestaurantInputSchema).array(),z.lazy(() => SalesTransactionsUncheckedCreateWithoutRestaurantInputSchema),z.lazy(() => SalesTransactionsUncheckedCreateWithoutRestaurantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SalesTransactionsCreateOrConnectWithoutRestaurantInputSchema),z.lazy(() => SalesTransactionsCreateOrConnectWithoutRestaurantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SalesTransactionsUpsertWithWhereUniqueWithoutRestaurantInputSchema),z.lazy(() => SalesTransactionsUpsertWithWhereUniqueWithoutRestaurantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SalesTransactionsCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SalesTransactionsWhereUniqueInputSchema),z.lazy(() => SalesTransactionsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SalesTransactionsWhereUniqueInputSchema),z.lazy(() => SalesTransactionsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SalesTransactionsWhereUniqueInputSchema),z.lazy(() => SalesTransactionsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SalesTransactionsWhereUniqueInputSchema),z.lazy(() => SalesTransactionsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SalesTransactionsUpdateWithWhereUniqueWithoutRestaurantInputSchema),z.lazy(() => SalesTransactionsUpdateWithWhereUniqueWithoutRestaurantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SalesTransactionsUpdateManyWithWhereWithoutRestaurantInputSchema),z.lazy(() => SalesTransactionsUpdateManyWithWhereWithoutRestaurantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SalesTransactionsScalarWhereInputSchema),z.lazy(() => SalesTransactionsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LeftoverItemUncheckedUpdateManyWithoutRestaurantNestedInputSchema: z.ZodType<Prisma.LeftoverItemUncheckedUpdateManyWithoutRestaurantNestedInput> = z.object({
  create: z.union([ z.lazy(() => LeftoverItemCreateWithoutRestaurantInputSchema),z.lazy(() => LeftoverItemCreateWithoutRestaurantInputSchema).array(),z.lazy(() => LeftoverItemUncheckedCreateWithoutRestaurantInputSchema),z.lazy(() => LeftoverItemUncheckedCreateWithoutRestaurantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LeftoverItemCreateOrConnectWithoutRestaurantInputSchema),z.lazy(() => LeftoverItemCreateOrConnectWithoutRestaurantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LeftoverItemUpsertWithWhereUniqueWithoutRestaurantInputSchema),z.lazy(() => LeftoverItemUpsertWithWhereUniqueWithoutRestaurantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LeftoverItemCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LeftoverItemWhereUniqueInputSchema),z.lazy(() => LeftoverItemWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LeftoverItemWhereUniqueInputSchema),z.lazy(() => LeftoverItemWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LeftoverItemWhereUniqueInputSchema),z.lazy(() => LeftoverItemWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LeftoverItemWhereUniqueInputSchema),z.lazy(() => LeftoverItemWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LeftoverItemUpdateWithWhereUniqueWithoutRestaurantInputSchema),z.lazy(() => LeftoverItemUpdateWithWhereUniqueWithoutRestaurantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LeftoverItemUpdateManyWithWhereWithoutRestaurantInputSchema),z.lazy(() => LeftoverItemUpdateManyWithWhereWithoutRestaurantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LeftoverItemScalarWhereInputSchema),z.lazy(() => LeftoverItemScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const WasteRecordUncheckedUpdateManyWithoutRestaurantNestedInputSchema: z.ZodType<Prisma.WasteRecordUncheckedUpdateManyWithoutRestaurantNestedInput> = z.object({
  create: z.union([ z.lazy(() => WasteRecordCreateWithoutRestaurantInputSchema),z.lazy(() => WasteRecordCreateWithoutRestaurantInputSchema).array(),z.lazy(() => WasteRecordUncheckedCreateWithoutRestaurantInputSchema),z.lazy(() => WasteRecordUncheckedCreateWithoutRestaurantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => WasteRecordCreateOrConnectWithoutRestaurantInputSchema),z.lazy(() => WasteRecordCreateOrConnectWithoutRestaurantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => WasteRecordUpsertWithWhereUniqueWithoutRestaurantInputSchema),z.lazy(() => WasteRecordUpsertWithWhereUniqueWithoutRestaurantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => WasteRecordCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => WasteRecordWhereUniqueInputSchema),z.lazy(() => WasteRecordWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => WasteRecordWhereUniqueInputSchema),z.lazy(() => WasteRecordWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => WasteRecordWhereUniqueInputSchema),z.lazy(() => WasteRecordWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => WasteRecordWhereUniqueInputSchema),z.lazy(() => WasteRecordWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => WasteRecordUpdateWithWhereUniqueWithoutRestaurantInputSchema),z.lazy(() => WasteRecordUpdateWithWhereUniqueWithoutRestaurantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => WasteRecordUpdateManyWithWhereWithoutRestaurantInputSchema),z.lazy(() => WasteRecordUpdateManyWithWhereWithoutRestaurantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => WasteRecordScalarWhereInputSchema),z.lazy(() => WasteRecordScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProductionPlanUncheckedUpdateManyWithoutRestaurantNestedInputSchema: z.ZodType<Prisma.ProductionPlanUncheckedUpdateManyWithoutRestaurantNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProductionPlanCreateWithoutRestaurantInputSchema),z.lazy(() => ProductionPlanCreateWithoutRestaurantInputSchema).array(),z.lazy(() => ProductionPlanUncheckedCreateWithoutRestaurantInputSchema),z.lazy(() => ProductionPlanUncheckedCreateWithoutRestaurantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductionPlanCreateOrConnectWithoutRestaurantInputSchema),z.lazy(() => ProductionPlanCreateOrConnectWithoutRestaurantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProductionPlanUpsertWithWhereUniqueWithoutRestaurantInputSchema),z.lazy(() => ProductionPlanUpsertWithWhereUniqueWithoutRestaurantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductionPlanCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProductionPlanWhereUniqueInputSchema),z.lazy(() => ProductionPlanWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProductionPlanWhereUniqueInputSchema),z.lazy(() => ProductionPlanWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProductionPlanWhereUniqueInputSchema),z.lazy(() => ProductionPlanWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProductionPlanWhereUniqueInputSchema),z.lazy(() => ProductionPlanWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProductionPlanUpdateWithWhereUniqueWithoutRestaurantInputSchema),z.lazy(() => ProductionPlanUpdateWithWhereUniqueWithoutRestaurantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProductionPlanUpdateManyWithWhereWithoutRestaurantInputSchema),z.lazy(() => ProductionPlanUpdateManyWithWhereWithoutRestaurantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProductionPlanScalarWhereInputSchema),z.lazy(() => ProductionPlanScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EquipmentUncheckedUpdateManyWithoutRestaurantNestedInputSchema: z.ZodType<Prisma.EquipmentUncheckedUpdateManyWithoutRestaurantNestedInput> = z.object({
  create: z.union([ z.lazy(() => EquipmentCreateWithoutRestaurantInputSchema),z.lazy(() => EquipmentCreateWithoutRestaurantInputSchema).array(),z.lazy(() => EquipmentUncheckedCreateWithoutRestaurantInputSchema),z.lazy(() => EquipmentUncheckedCreateWithoutRestaurantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EquipmentCreateOrConnectWithoutRestaurantInputSchema),z.lazy(() => EquipmentCreateOrConnectWithoutRestaurantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EquipmentUpsertWithWhereUniqueWithoutRestaurantInputSchema),z.lazy(() => EquipmentUpsertWithWhereUniqueWithoutRestaurantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EquipmentCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EquipmentWhereUniqueInputSchema),z.lazy(() => EquipmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EquipmentWhereUniqueInputSchema),z.lazy(() => EquipmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EquipmentWhereUniqueInputSchema),z.lazy(() => EquipmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EquipmentWhereUniqueInputSchema),z.lazy(() => EquipmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EquipmentUpdateWithWhereUniqueWithoutRestaurantInputSchema),z.lazy(() => EquipmentUpdateWithWhereUniqueWithoutRestaurantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EquipmentUpdateManyWithWhereWithoutRestaurantInputSchema),z.lazy(() => EquipmentUpdateManyWithWhereWithoutRestaurantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EquipmentScalarWhereInputSchema),z.lazy(() => EquipmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const QualityChecklistUncheckedUpdateManyWithoutRestaurantNestedInputSchema: z.ZodType<Prisma.QualityChecklistUncheckedUpdateManyWithoutRestaurantNestedInput> = z.object({
  create: z.union([ z.lazy(() => QualityChecklistCreateWithoutRestaurantInputSchema),z.lazy(() => QualityChecklistCreateWithoutRestaurantInputSchema).array(),z.lazy(() => QualityChecklistUncheckedCreateWithoutRestaurantInputSchema),z.lazy(() => QualityChecklistUncheckedCreateWithoutRestaurantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => QualityChecklistCreateOrConnectWithoutRestaurantInputSchema),z.lazy(() => QualityChecklistCreateOrConnectWithoutRestaurantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => QualityChecklistUpsertWithWhereUniqueWithoutRestaurantInputSchema),z.lazy(() => QualityChecklistUpsertWithWhereUniqueWithoutRestaurantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => QualityChecklistCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => QualityChecklistWhereUniqueInputSchema),z.lazy(() => QualityChecklistWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => QualityChecklistWhereUniqueInputSchema),z.lazy(() => QualityChecklistWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => QualityChecklistWhereUniqueInputSchema),z.lazy(() => QualityChecklistWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => QualityChecklistWhereUniqueInputSchema),z.lazy(() => QualityChecklistWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => QualityChecklistUpdateWithWhereUniqueWithoutRestaurantInputSchema),z.lazy(() => QualityChecklistUpdateWithWhereUniqueWithoutRestaurantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => QualityChecklistUpdateManyWithWhereWithoutRestaurantInputSchema),z.lazy(() => QualityChecklistUpdateManyWithWhereWithoutRestaurantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => QualityChecklistScalarWhereInputSchema),z.lazy(() => QualityChecklistScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CustomerFeedbackUncheckedUpdateManyWithoutRestaurantNestedInputSchema: z.ZodType<Prisma.CustomerFeedbackUncheckedUpdateManyWithoutRestaurantNestedInput> = z.object({
  create: z.union([ z.lazy(() => CustomerFeedbackCreateWithoutRestaurantInputSchema),z.lazy(() => CustomerFeedbackCreateWithoutRestaurantInputSchema).array(),z.lazy(() => CustomerFeedbackUncheckedCreateWithoutRestaurantInputSchema),z.lazy(() => CustomerFeedbackUncheckedCreateWithoutRestaurantInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomerFeedbackCreateOrConnectWithoutRestaurantInputSchema),z.lazy(() => CustomerFeedbackCreateOrConnectWithoutRestaurantInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CustomerFeedbackUpsertWithWhereUniqueWithoutRestaurantInputSchema),z.lazy(() => CustomerFeedbackUpsertWithWhereUniqueWithoutRestaurantInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomerFeedbackCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CustomerFeedbackWhereUniqueInputSchema),z.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CustomerFeedbackWhereUniqueInputSchema),z.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CustomerFeedbackWhereUniqueInputSchema),z.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CustomerFeedbackWhereUniqueInputSchema),z.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CustomerFeedbackUpdateWithWhereUniqueWithoutRestaurantInputSchema),z.lazy(() => CustomerFeedbackUpdateWithWhereUniqueWithoutRestaurantInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CustomerFeedbackUpdateManyWithWhereWithoutRestaurantInputSchema),z.lazy(() => CustomerFeedbackUpdateManyWithWhereWithoutRestaurantInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CustomerFeedbackScalarWhereInputSchema),z.lazy(() => CustomerFeedbackScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrganizationCreateNestedOneWithoutUsersInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutUsersInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutUsersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutUsersInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const RestaurantCreateNestedOneWithoutUsersInputSchema: z.ZodType<Prisma.RestaurantCreateNestedOneWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => RestaurantCreateWithoutUsersInputSchema),z.lazy(() => RestaurantUncheckedCreateWithoutUsersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RestaurantCreateOrConnectWithoutUsersInputSchema).optional(),
  connect: z.lazy(() => RestaurantWhereUniqueInputSchema).optional()
}).strict();

export const ShiftCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.ShiftCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => ShiftCreateWithoutUserInputSchema),z.lazy(() => ShiftCreateWithoutUserInputSchema).array(),z.lazy(() => ShiftUncheckedCreateWithoutUserInputSchema),z.lazy(() => ShiftUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ShiftCreateOrConnectWithoutUserInputSchema),z.lazy(() => ShiftCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ShiftCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ShiftWhereUniqueInputSchema),z.lazy(() => ShiftWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PrepItemCreateNestedManyWithoutAssignedToInputSchema: z.ZodType<Prisma.PrepItemCreateNestedManyWithoutAssignedToInput> = z.object({
  create: z.union([ z.lazy(() => PrepItemCreateWithoutAssignedToInputSchema),z.lazy(() => PrepItemCreateWithoutAssignedToInputSchema).array(),z.lazy(() => PrepItemUncheckedCreateWithoutAssignedToInputSchema),z.lazy(() => PrepItemUncheckedCreateWithoutAssignedToInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PrepItemCreateOrConnectWithoutAssignedToInputSchema),z.lazy(() => PrepItemCreateOrConnectWithoutAssignedToInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PrepItemCreateManyAssignedToInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PrepItemWhereUniqueInputSchema),z.lazy(() => PrepItemWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const InventoryItemCreateNestedManyWithoutLastUpdatedByInputSchema: z.ZodType<Prisma.InventoryItemCreateNestedManyWithoutLastUpdatedByInput> = z.object({
  create: z.union([ z.lazy(() => InventoryItemCreateWithoutLastUpdatedByInputSchema),z.lazy(() => InventoryItemCreateWithoutLastUpdatedByInputSchema).array(),z.lazy(() => InventoryItemUncheckedCreateWithoutLastUpdatedByInputSchema),z.lazy(() => InventoryItemUncheckedCreateWithoutLastUpdatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InventoryItemCreateOrConnectWithoutLastUpdatedByInputSchema),z.lazy(() => InventoryItemCreateOrConnectWithoutLastUpdatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InventoryItemCreateManyLastUpdatedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => InventoryItemWhereUniqueInputSchema),z.lazy(() => InventoryItemWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SessionCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.SessionCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionCreateWithoutUserInputSchema).array(),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema),z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SessionCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PasswordResetCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.PasswordResetCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => PasswordResetCreateWithoutUserInputSchema),z.lazy(() => PasswordResetCreateWithoutUserInputSchema).array(),z.lazy(() => PasswordResetUncheckedCreateWithoutUserInputSchema),z.lazy(() => PasswordResetUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PasswordResetCreateOrConnectWithoutUserInputSchema),z.lazy(() => PasswordResetCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PasswordResetCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PasswordResetWhereUniqueInputSchema),z.lazy(() => PasswordResetWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LeftoverItemCreateNestedManyWithoutRecordedByInputSchema: z.ZodType<Prisma.LeftoverItemCreateNestedManyWithoutRecordedByInput> = z.object({
  create: z.union([ z.lazy(() => LeftoverItemCreateWithoutRecordedByInputSchema),z.lazy(() => LeftoverItemCreateWithoutRecordedByInputSchema).array(),z.lazy(() => LeftoverItemUncheckedCreateWithoutRecordedByInputSchema),z.lazy(() => LeftoverItemUncheckedCreateWithoutRecordedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LeftoverItemCreateOrConnectWithoutRecordedByInputSchema),z.lazy(() => LeftoverItemCreateOrConnectWithoutRecordedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LeftoverItemCreateManyRecordedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LeftoverItemWhereUniqueInputSchema),z.lazy(() => LeftoverItemWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const WasteRecordCreateNestedManyWithoutRecordedByInputSchema: z.ZodType<Prisma.WasteRecordCreateNestedManyWithoutRecordedByInput> = z.object({
  create: z.union([ z.lazy(() => WasteRecordCreateWithoutRecordedByInputSchema),z.lazy(() => WasteRecordCreateWithoutRecordedByInputSchema).array(),z.lazy(() => WasteRecordUncheckedCreateWithoutRecordedByInputSchema),z.lazy(() => WasteRecordUncheckedCreateWithoutRecordedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => WasteRecordCreateOrConnectWithoutRecordedByInputSchema),z.lazy(() => WasteRecordCreateOrConnectWithoutRecordedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => WasteRecordCreateManyRecordedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => WasteRecordWhereUniqueInputSchema),z.lazy(() => WasteRecordWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProductionPlanCreateNestedManyWithoutCreatedByInputSchema: z.ZodType<Prisma.ProductionPlanCreateNestedManyWithoutCreatedByInput> = z.object({
  create: z.union([ z.lazy(() => ProductionPlanCreateWithoutCreatedByInputSchema),z.lazy(() => ProductionPlanCreateWithoutCreatedByInputSchema).array(),z.lazy(() => ProductionPlanUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => ProductionPlanUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductionPlanCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => ProductionPlanCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductionPlanCreateManyCreatedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProductionPlanWhereUniqueInputSchema),z.lazy(() => ProductionPlanWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProductionPlanItemCreateNestedManyWithoutAssignedToInputSchema: z.ZodType<Prisma.ProductionPlanItemCreateNestedManyWithoutAssignedToInput> = z.object({
  create: z.union([ z.lazy(() => ProductionPlanItemCreateWithoutAssignedToInputSchema),z.lazy(() => ProductionPlanItemCreateWithoutAssignedToInputSchema).array(),z.lazy(() => ProductionPlanItemUncheckedCreateWithoutAssignedToInputSchema),z.lazy(() => ProductionPlanItemUncheckedCreateWithoutAssignedToInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductionPlanItemCreateOrConnectWithoutAssignedToInputSchema),z.lazy(() => ProductionPlanItemCreateOrConnectWithoutAssignedToInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductionPlanItemCreateManyAssignedToInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProductionPlanItemWhereUniqueInputSchema),z.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AvailabilityCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.AvailabilityCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => AvailabilityCreateWithoutUserInputSchema),z.lazy(() => AvailabilityCreateWithoutUserInputSchema).array(),z.lazy(() => AvailabilityUncheckedCreateWithoutUserInputSchema),z.lazy(() => AvailabilityUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AvailabilityCreateOrConnectWithoutUserInputSchema),z.lazy(() => AvailabilityCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AvailabilityCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AvailabilityWhereUniqueInputSchema),z.lazy(() => AvailabilityWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SchedulingConstraintCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.SchedulingConstraintCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => SchedulingConstraintCreateWithoutUserInputSchema),z.lazy(() => SchedulingConstraintCreateWithoutUserInputSchema).array(),z.lazy(() => SchedulingConstraintUncheckedCreateWithoutUserInputSchema),z.lazy(() => SchedulingConstraintUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SchedulingConstraintCreateOrConnectWithoutUserInputSchema),z.lazy(() => SchedulingConstraintCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SchedulingConstraintCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SchedulingConstraintWhereUniqueInputSchema),z.lazy(() => SchedulingConstraintWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const InventoryWithdrawalCreateNestedManyWithoutCreatedByInputSchema: z.ZodType<Prisma.InventoryWithdrawalCreateNestedManyWithoutCreatedByInput> = z.object({
  create: z.union([ z.lazy(() => InventoryWithdrawalCreateWithoutCreatedByInputSchema),z.lazy(() => InventoryWithdrawalCreateWithoutCreatedByInputSchema).array(),z.lazy(() => InventoryWithdrawalUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => InventoryWithdrawalUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InventoryWithdrawalCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => InventoryWithdrawalCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InventoryWithdrawalCreateManyCreatedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema),z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ChecklistCompleteCreateNestedManyWithoutCompletedByInputSchema: z.ZodType<Prisma.ChecklistCompleteCreateNestedManyWithoutCompletedByInput> = z.object({
  create: z.union([ z.lazy(() => ChecklistCompleteCreateWithoutCompletedByInputSchema),z.lazy(() => ChecklistCompleteCreateWithoutCompletedByInputSchema).array(),z.lazy(() => ChecklistCompleteUncheckedCreateWithoutCompletedByInputSchema),z.lazy(() => ChecklistCompleteUncheckedCreateWithoutCompletedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ChecklistCompleteCreateOrConnectWithoutCompletedByInputSchema),z.lazy(() => ChecklistCompleteCreateOrConnectWithoutCompletedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ChecklistCompleteCreateManyCompletedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ChecklistCompleteWhereUniqueInputSchema),z.lazy(() => ChecklistCompleteWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CustomerFeedbackCreateNestedManyWithoutRespondedByInputSchema: z.ZodType<Prisma.CustomerFeedbackCreateNestedManyWithoutRespondedByInput> = z.object({
  create: z.union([ z.lazy(() => CustomerFeedbackCreateWithoutRespondedByInputSchema),z.lazy(() => CustomerFeedbackCreateWithoutRespondedByInputSchema).array(),z.lazy(() => CustomerFeedbackUncheckedCreateWithoutRespondedByInputSchema),z.lazy(() => CustomerFeedbackUncheckedCreateWithoutRespondedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomerFeedbackCreateOrConnectWithoutRespondedByInputSchema),z.lazy(() => CustomerFeedbackCreateOrConnectWithoutRespondedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomerFeedbackCreateManyRespondedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CustomerFeedbackWhereUniqueInputSchema),z.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RecipeVersionCreateNestedManyWithoutCreatedByInputSchema: z.ZodType<Prisma.RecipeVersionCreateNestedManyWithoutCreatedByInput> = z.object({
  create: z.union([ z.lazy(() => RecipeVersionCreateWithoutCreatedByInputSchema),z.lazy(() => RecipeVersionCreateWithoutCreatedByInputSchema).array(),z.lazy(() => RecipeVersionUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => RecipeVersionUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeVersionCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => RecipeVersionCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeVersionCreateManyCreatedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RecipeVersionWhereUniqueInputSchema),z.lazy(() => RecipeVersionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RecipeVersionCreateNestedManyWithoutApprovedByInputSchema: z.ZodType<Prisma.RecipeVersionCreateNestedManyWithoutApprovedByInput> = z.object({
  create: z.union([ z.lazy(() => RecipeVersionCreateWithoutApprovedByInputSchema),z.lazy(() => RecipeVersionCreateWithoutApprovedByInputSchema).array(),z.lazy(() => RecipeVersionUncheckedCreateWithoutApprovedByInputSchema),z.lazy(() => RecipeVersionUncheckedCreateWithoutApprovedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeVersionCreateOrConnectWithoutApprovedByInputSchema),z.lazy(() => RecipeVersionCreateOrConnectWithoutApprovedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeVersionCreateManyApprovedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RecipeVersionWhereUniqueInputSchema),z.lazy(() => RecipeVersionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const InventoryTransactionCreateNestedManyWithoutCreatedByInputSchema: z.ZodType<Prisma.InventoryTransactionCreateNestedManyWithoutCreatedByInput> = z.object({
  create: z.union([ z.lazy(() => InventoryTransactionCreateWithoutCreatedByInputSchema),z.lazy(() => InventoryTransactionCreateWithoutCreatedByInputSchema).array(),z.lazy(() => InventoryTransactionUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => InventoryTransactionUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InventoryTransactionCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => InventoryTransactionCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InventoryTransactionCreateManyCreatedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => InventoryTransactionWhereUniqueInputSchema),z.lazy(() => InventoryTransactionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const StockCountCreateNestedManyWithoutCreatedByInputSchema: z.ZodType<Prisma.StockCountCreateNestedManyWithoutCreatedByInput> = z.object({
  create: z.union([ z.lazy(() => StockCountCreateWithoutCreatedByInputSchema),z.lazy(() => StockCountCreateWithoutCreatedByInputSchema).array(),z.lazy(() => StockCountUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => StockCountUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => StockCountCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => StockCountCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => StockCountCreateManyCreatedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => StockCountWhereUniqueInputSchema),z.lazy(() => StockCountWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ShiftUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.ShiftUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => ShiftCreateWithoutUserInputSchema),z.lazy(() => ShiftCreateWithoutUserInputSchema).array(),z.lazy(() => ShiftUncheckedCreateWithoutUserInputSchema),z.lazy(() => ShiftUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ShiftCreateOrConnectWithoutUserInputSchema),z.lazy(() => ShiftCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ShiftCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ShiftWhereUniqueInputSchema),z.lazy(() => ShiftWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PrepItemUncheckedCreateNestedManyWithoutAssignedToInputSchema: z.ZodType<Prisma.PrepItemUncheckedCreateNestedManyWithoutAssignedToInput> = z.object({
  create: z.union([ z.lazy(() => PrepItemCreateWithoutAssignedToInputSchema),z.lazy(() => PrepItemCreateWithoutAssignedToInputSchema).array(),z.lazy(() => PrepItemUncheckedCreateWithoutAssignedToInputSchema),z.lazy(() => PrepItemUncheckedCreateWithoutAssignedToInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PrepItemCreateOrConnectWithoutAssignedToInputSchema),z.lazy(() => PrepItemCreateOrConnectWithoutAssignedToInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PrepItemCreateManyAssignedToInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PrepItemWhereUniqueInputSchema),z.lazy(() => PrepItemWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const InventoryItemUncheckedCreateNestedManyWithoutLastUpdatedByInputSchema: z.ZodType<Prisma.InventoryItemUncheckedCreateNestedManyWithoutLastUpdatedByInput> = z.object({
  create: z.union([ z.lazy(() => InventoryItemCreateWithoutLastUpdatedByInputSchema),z.lazy(() => InventoryItemCreateWithoutLastUpdatedByInputSchema).array(),z.lazy(() => InventoryItemUncheckedCreateWithoutLastUpdatedByInputSchema),z.lazy(() => InventoryItemUncheckedCreateWithoutLastUpdatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InventoryItemCreateOrConnectWithoutLastUpdatedByInputSchema),z.lazy(() => InventoryItemCreateOrConnectWithoutLastUpdatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InventoryItemCreateManyLastUpdatedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => InventoryItemWhereUniqueInputSchema),z.lazy(() => InventoryItemWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SessionUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.SessionUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionCreateWithoutUserInputSchema).array(),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema),z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SessionCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PasswordResetUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.PasswordResetUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => PasswordResetCreateWithoutUserInputSchema),z.lazy(() => PasswordResetCreateWithoutUserInputSchema).array(),z.lazy(() => PasswordResetUncheckedCreateWithoutUserInputSchema),z.lazy(() => PasswordResetUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PasswordResetCreateOrConnectWithoutUserInputSchema),z.lazy(() => PasswordResetCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PasswordResetCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PasswordResetWhereUniqueInputSchema),z.lazy(() => PasswordResetWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LeftoverItemUncheckedCreateNestedManyWithoutRecordedByInputSchema: z.ZodType<Prisma.LeftoverItemUncheckedCreateNestedManyWithoutRecordedByInput> = z.object({
  create: z.union([ z.lazy(() => LeftoverItemCreateWithoutRecordedByInputSchema),z.lazy(() => LeftoverItemCreateWithoutRecordedByInputSchema).array(),z.lazy(() => LeftoverItemUncheckedCreateWithoutRecordedByInputSchema),z.lazy(() => LeftoverItemUncheckedCreateWithoutRecordedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LeftoverItemCreateOrConnectWithoutRecordedByInputSchema),z.lazy(() => LeftoverItemCreateOrConnectWithoutRecordedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LeftoverItemCreateManyRecordedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LeftoverItemWhereUniqueInputSchema),z.lazy(() => LeftoverItemWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const WasteRecordUncheckedCreateNestedManyWithoutRecordedByInputSchema: z.ZodType<Prisma.WasteRecordUncheckedCreateNestedManyWithoutRecordedByInput> = z.object({
  create: z.union([ z.lazy(() => WasteRecordCreateWithoutRecordedByInputSchema),z.lazy(() => WasteRecordCreateWithoutRecordedByInputSchema).array(),z.lazy(() => WasteRecordUncheckedCreateWithoutRecordedByInputSchema),z.lazy(() => WasteRecordUncheckedCreateWithoutRecordedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => WasteRecordCreateOrConnectWithoutRecordedByInputSchema),z.lazy(() => WasteRecordCreateOrConnectWithoutRecordedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => WasteRecordCreateManyRecordedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => WasteRecordWhereUniqueInputSchema),z.lazy(() => WasteRecordWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProductionPlanUncheckedCreateNestedManyWithoutCreatedByInputSchema: z.ZodType<Prisma.ProductionPlanUncheckedCreateNestedManyWithoutCreatedByInput> = z.object({
  create: z.union([ z.lazy(() => ProductionPlanCreateWithoutCreatedByInputSchema),z.lazy(() => ProductionPlanCreateWithoutCreatedByInputSchema).array(),z.lazy(() => ProductionPlanUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => ProductionPlanUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductionPlanCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => ProductionPlanCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductionPlanCreateManyCreatedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProductionPlanWhereUniqueInputSchema),z.lazy(() => ProductionPlanWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProductionPlanItemUncheckedCreateNestedManyWithoutAssignedToInputSchema: z.ZodType<Prisma.ProductionPlanItemUncheckedCreateNestedManyWithoutAssignedToInput> = z.object({
  create: z.union([ z.lazy(() => ProductionPlanItemCreateWithoutAssignedToInputSchema),z.lazy(() => ProductionPlanItemCreateWithoutAssignedToInputSchema).array(),z.lazy(() => ProductionPlanItemUncheckedCreateWithoutAssignedToInputSchema),z.lazy(() => ProductionPlanItemUncheckedCreateWithoutAssignedToInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductionPlanItemCreateOrConnectWithoutAssignedToInputSchema),z.lazy(() => ProductionPlanItemCreateOrConnectWithoutAssignedToInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductionPlanItemCreateManyAssignedToInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProductionPlanItemWhereUniqueInputSchema),z.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AvailabilityUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.AvailabilityUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => AvailabilityCreateWithoutUserInputSchema),z.lazy(() => AvailabilityCreateWithoutUserInputSchema).array(),z.lazy(() => AvailabilityUncheckedCreateWithoutUserInputSchema),z.lazy(() => AvailabilityUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AvailabilityCreateOrConnectWithoutUserInputSchema),z.lazy(() => AvailabilityCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AvailabilityCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AvailabilityWhereUniqueInputSchema),z.lazy(() => AvailabilityWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SchedulingConstraintUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.SchedulingConstraintUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => SchedulingConstraintCreateWithoutUserInputSchema),z.lazy(() => SchedulingConstraintCreateWithoutUserInputSchema).array(),z.lazy(() => SchedulingConstraintUncheckedCreateWithoutUserInputSchema),z.lazy(() => SchedulingConstraintUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SchedulingConstraintCreateOrConnectWithoutUserInputSchema),z.lazy(() => SchedulingConstraintCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SchedulingConstraintCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SchedulingConstraintWhereUniqueInputSchema),z.lazy(() => SchedulingConstraintWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const InventoryWithdrawalUncheckedCreateNestedManyWithoutCreatedByInputSchema: z.ZodType<Prisma.InventoryWithdrawalUncheckedCreateNestedManyWithoutCreatedByInput> = z.object({
  create: z.union([ z.lazy(() => InventoryWithdrawalCreateWithoutCreatedByInputSchema),z.lazy(() => InventoryWithdrawalCreateWithoutCreatedByInputSchema).array(),z.lazy(() => InventoryWithdrawalUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => InventoryWithdrawalUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InventoryWithdrawalCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => InventoryWithdrawalCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InventoryWithdrawalCreateManyCreatedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema),z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ChecklistCompleteUncheckedCreateNestedManyWithoutCompletedByInputSchema: z.ZodType<Prisma.ChecklistCompleteUncheckedCreateNestedManyWithoutCompletedByInput> = z.object({
  create: z.union([ z.lazy(() => ChecklistCompleteCreateWithoutCompletedByInputSchema),z.lazy(() => ChecklistCompleteCreateWithoutCompletedByInputSchema).array(),z.lazy(() => ChecklistCompleteUncheckedCreateWithoutCompletedByInputSchema),z.lazy(() => ChecklistCompleteUncheckedCreateWithoutCompletedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ChecklistCompleteCreateOrConnectWithoutCompletedByInputSchema),z.lazy(() => ChecklistCompleteCreateOrConnectWithoutCompletedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ChecklistCompleteCreateManyCompletedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ChecklistCompleteWhereUniqueInputSchema),z.lazy(() => ChecklistCompleteWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CustomerFeedbackUncheckedCreateNestedManyWithoutRespondedByInputSchema: z.ZodType<Prisma.CustomerFeedbackUncheckedCreateNestedManyWithoutRespondedByInput> = z.object({
  create: z.union([ z.lazy(() => CustomerFeedbackCreateWithoutRespondedByInputSchema),z.lazy(() => CustomerFeedbackCreateWithoutRespondedByInputSchema).array(),z.lazy(() => CustomerFeedbackUncheckedCreateWithoutRespondedByInputSchema),z.lazy(() => CustomerFeedbackUncheckedCreateWithoutRespondedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomerFeedbackCreateOrConnectWithoutRespondedByInputSchema),z.lazy(() => CustomerFeedbackCreateOrConnectWithoutRespondedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomerFeedbackCreateManyRespondedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CustomerFeedbackWhereUniqueInputSchema),z.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RecipeVersionUncheckedCreateNestedManyWithoutCreatedByInputSchema: z.ZodType<Prisma.RecipeVersionUncheckedCreateNestedManyWithoutCreatedByInput> = z.object({
  create: z.union([ z.lazy(() => RecipeVersionCreateWithoutCreatedByInputSchema),z.lazy(() => RecipeVersionCreateWithoutCreatedByInputSchema).array(),z.lazy(() => RecipeVersionUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => RecipeVersionUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeVersionCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => RecipeVersionCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeVersionCreateManyCreatedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RecipeVersionWhereUniqueInputSchema),z.lazy(() => RecipeVersionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RecipeVersionUncheckedCreateNestedManyWithoutApprovedByInputSchema: z.ZodType<Prisma.RecipeVersionUncheckedCreateNestedManyWithoutApprovedByInput> = z.object({
  create: z.union([ z.lazy(() => RecipeVersionCreateWithoutApprovedByInputSchema),z.lazy(() => RecipeVersionCreateWithoutApprovedByInputSchema).array(),z.lazy(() => RecipeVersionUncheckedCreateWithoutApprovedByInputSchema),z.lazy(() => RecipeVersionUncheckedCreateWithoutApprovedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeVersionCreateOrConnectWithoutApprovedByInputSchema),z.lazy(() => RecipeVersionCreateOrConnectWithoutApprovedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeVersionCreateManyApprovedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RecipeVersionWhereUniqueInputSchema),z.lazy(() => RecipeVersionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInputSchema: z.ZodType<Prisma.InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInput> = z.object({
  create: z.union([ z.lazy(() => InventoryTransactionCreateWithoutCreatedByInputSchema),z.lazy(() => InventoryTransactionCreateWithoutCreatedByInputSchema).array(),z.lazy(() => InventoryTransactionUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => InventoryTransactionUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InventoryTransactionCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => InventoryTransactionCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InventoryTransactionCreateManyCreatedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => InventoryTransactionWhereUniqueInputSchema),z.lazy(() => InventoryTransactionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const StockCountUncheckedCreateNestedManyWithoutCreatedByInputSchema: z.ZodType<Prisma.StockCountUncheckedCreateNestedManyWithoutCreatedByInput> = z.object({
  create: z.union([ z.lazy(() => StockCountCreateWithoutCreatedByInputSchema),z.lazy(() => StockCountCreateWithoutCreatedByInputSchema).array(),z.lazy(() => StockCountUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => StockCountUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => StockCountCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => StockCountCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => StockCountCreateManyCreatedByInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => StockCountWhereUniqueInputSchema),z.lazy(() => StockCountWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EnumUserRoleFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumUserRoleFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => UserRoleSchema).optional()
}).strict();

export const OrganizationUpdateOneWithoutUsersNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutUsersInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutUsersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutUsersInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutUsersInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutUsersInputSchema),z.lazy(() => OrganizationUpdateWithoutUsersInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutUsersInputSchema) ]).optional(),
}).strict();

export const RestaurantUpdateOneWithoutUsersNestedInputSchema: z.ZodType<Prisma.RestaurantUpdateOneWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => RestaurantCreateWithoutUsersInputSchema),z.lazy(() => RestaurantUncheckedCreateWithoutUsersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RestaurantCreateOrConnectWithoutUsersInputSchema).optional(),
  upsert: z.lazy(() => RestaurantUpsertWithoutUsersInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => RestaurantWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => RestaurantWhereInputSchema) ]).optional(),
  connect: z.lazy(() => RestaurantWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RestaurantUpdateToOneWithWhereWithoutUsersInputSchema),z.lazy(() => RestaurantUpdateWithoutUsersInputSchema),z.lazy(() => RestaurantUncheckedUpdateWithoutUsersInputSchema) ]).optional(),
}).strict();

export const ShiftUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.ShiftUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => ShiftCreateWithoutUserInputSchema),z.lazy(() => ShiftCreateWithoutUserInputSchema).array(),z.lazy(() => ShiftUncheckedCreateWithoutUserInputSchema),z.lazy(() => ShiftUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ShiftCreateOrConnectWithoutUserInputSchema),z.lazy(() => ShiftCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ShiftUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => ShiftUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ShiftCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ShiftWhereUniqueInputSchema),z.lazy(() => ShiftWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ShiftWhereUniqueInputSchema),z.lazy(() => ShiftWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ShiftWhereUniqueInputSchema),z.lazy(() => ShiftWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ShiftWhereUniqueInputSchema),z.lazy(() => ShiftWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ShiftUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => ShiftUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ShiftUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => ShiftUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ShiftScalarWhereInputSchema),z.lazy(() => ShiftScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PrepItemUpdateManyWithoutAssignedToNestedInputSchema: z.ZodType<Prisma.PrepItemUpdateManyWithoutAssignedToNestedInput> = z.object({
  create: z.union([ z.lazy(() => PrepItemCreateWithoutAssignedToInputSchema),z.lazy(() => PrepItemCreateWithoutAssignedToInputSchema).array(),z.lazy(() => PrepItemUncheckedCreateWithoutAssignedToInputSchema),z.lazy(() => PrepItemUncheckedCreateWithoutAssignedToInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PrepItemCreateOrConnectWithoutAssignedToInputSchema),z.lazy(() => PrepItemCreateOrConnectWithoutAssignedToInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PrepItemUpsertWithWhereUniqueWithoutAssignedToInputSchema),z.lazy(() => PrepItemUpsertWithWhereUniqueWithoutAssignedToInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PrepItemCreateManyAssignedToInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PrepItemWhereUniqueInputSchema),z.lazy(() => PrepItemWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PrepItemWhereUniqueInputSchema),z.lazy(() => PrepItemWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PrepItemWhereUniqueInputSchema),z.lazy(() => PrepItemWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PrepItemWhereUniqueInputSchema),z.lazy(() => PrepItemWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PrepItemUpdateWithWhereUniqueWithoutAssignedToInputSchema),z.lazy(() => PrepItemUpdateWithWhereUniqueWithoutAssignedToInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PrepItemUpdateManyWithWhereWithoutAssignedToInputSchema),z.lazy(() => PrepItemUpdateManyWithWhereWithoutAssignedToInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PrepItemScalarWhereInputSchema),z.lazy(() => PrepItemScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const InventoryItemUpdateManyWithoutLastUpdatedByNestedInputSchema: z.ZodType<Prisma.InventoryItemUpdateManyWithoutLastUpdatedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => InventoryItemCreateWithoutLastUpdatedByInputSchema),z.lazy(() => InventoryItemCreateWithoutLastUpdatedByInputSchema).array(),z.lazy(() => InventoryItemUncheckedCreateWithoutLastUpdatedByInputSchema),z.lazy(() => InventoryItemUncheckedCreateWithoutLastUpdatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InventoryItemCreateOrConnectWithoutLastUpdatedByInputSchema),z.lazy(() => InventoryItemCreateOrConnectWithoutLastUpdatedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => InventoryItemUpsertWithWhereUniqueWithoutLastUpdatedByInputSchema),z.lazy(() => InventoryItemUpsertWithWhereUniqueWithoutLastUpdatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InventoryItemCreateManyLastUpdatedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => InventoryItemWhereUniqueInputSchema),z.lazy(() => InventoryItemWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => InventoryItemWhereUniqueInputSchema),z.lazy(() => InventoryItemWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => InventoryItemWhereUniqueInputSchema),z.lazy(() => InventoryItemWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => InventoryItemWhereUniqueInputSchema),z.lazy(() => InventoryItemWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => InventoryItemUpdateWithWhereUniqueWithoutLastUpdatedByInputSchema),z.lazy(() => InventoryItemUpdateWithWhereUniqueWithoutLastUpdatedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => InventoryItemUpdateManyWithWhereWithoutLastUpdatedByInputSchema),z.lazy(() => InventoryItemUpdateManyWithWhereWithoutLastUpdatedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => InventoryItemScalarWhereInputSchema),z.lazy(() => InventoryItemScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SessionUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.SessionUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionCreateWithoutUserInputSchema).array(),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema),z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SessionCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SessionScalarWhereInputSchema),z.lazy(() => SessionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PasswordResetUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.PasswordResetUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => PasswordResetCreateWithoutUserInputSchema),z.lazy(() => PasswordResetCreateWithoutUserInputSchema).array(),z.lazy(() => PasswordResetUncheckedCreateWithoutUserInputSchema),z.lazy(() => PasswordResetUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PasswordResetCreateOrConnectWithoutUserInputSchema),z.lazy(() => PasswordResetCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PasswordResetUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => PasswordResetUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PasswordResetCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PasswordResetWhereUniqueInputSchema),z.lazy(() => PasswordResetWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PasswordResetWhereUniqueInputSchema),z.lazy(() => PasswordResetWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PasswordResetWhereUniqueInputSchema),z.lazy(() => PasswordResetWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PasswordResetWhereUniqueInputSchema),z.lazy(() => PasswordResetWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PasswordResetUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => PasswordResetUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PasswordResetUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => PasswordResetUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PasswordResetScalarWhereInputSchema),z.lazy(() => PasswordResetScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LeftoverItemUpdateManyWithoutRecordedByNestedInputSchema: z.ZodType<Prisma.LeftoverItemUpdateManyWithoutRecordedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => LeftoverItemCreateWithoutRecordedByInputSchema),z.lazy(() => LeftoverItemCreateWithoutRecordedByInputSchema).array(),z.lazy(() => LeftoverItemUncheckedCreateWithoutRecordedByInputSchema),z.lazy(() => LeftoverItemUncheckedCreateWithoutRecordedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LeftoverItemCreateOrConnectWithoutRecordedByInputSchema),z.lazy(() => LeftoverItemCreateOrConnectWithoutRecordedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LeftoverItemUpsertWithWhereUniqueWithoutRecordedByInputSchema),z.lazy(() => LeftoverItemUpsertWithWhereUniqueWithoutRecordedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LeftoverItemCreateManyRecordedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LeftoverItemWhereUniqueInputSchema),z.lazy(() => LeftoverItemWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LeftoverItemWhereUniqueInputSchema),z.lazy(() => LeftoverItemWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LeftoverItemWhereUniqueInputSchema),z.lazy(() => LeftoverItemWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LeftoverItemWhereUniqueInputSchema),z.lazy(() => LeftoverItemWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LeftoverItemUpdateWithWhereUniqueWithoutRecordedByInputSchema),z.lazy(() => LeftoverItemUpdateWithWhereUniqueWithoutRecordedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LeftoverItemUpdateManyWithWhereWithoutRecordedByInputSchema),z.lazy(() => LeftoverItemUpdateManyWithWhereWithoutRecordedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LeftoverItemScalarWhereInputSchema),z.lazy(() => LeftoverItemScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const WasteRecordUpdateManyWithoutRecordedByNestedInputSchema: z.ZodType<Prisma.WasteRecordUpdateManyWithoutRecordedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => WasteRecordCreateWithoutRecordedByInputSchema),z.lazy(() => WasteRecordCreateWithoutRecordedByInputSchema).array(),z.lazy(() => WasteRecordUncheckedCreateWithoutRecordedByInputSchema),z.lazy(() => WasteRecordUncheckedCreateWithoutRecordedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => WasteRecordCreateOrConnectWithoutRecordedByInputSchema),z.lazy(() => WasteRecordCreateOrConnectWithoutRecordedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => WasteRecordUpsertWithWhereUniqueWithoutRecordedByInputSchema),z.lazy(() => WasteRecordUpsertWithWhereUniqueWithoutRecordedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => WasteRecordCreateManyRecordedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => WasteRecordWhereUniqueInputSchema),z.lazy(() => WasteRecordWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => WasteRecordWhereUniqueInputSchema),z.lazy(() => WasteRecordWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => WasteRecordWhereUniqueInputSchema),z.lazy(() => WasteRecordWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => WasteRecordWhereUniqueInputSchema),z.lazy(() => WasteRecordWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => WasteRecordUpdateWithWhereUniqueWithoutRecordedByInputSchema),z.lazy(() => WasteRecordUpdateWithWhereUniqueWithoutRecordedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => WasteRecordUpdateManyWithWhereWithoutRecordedByInputSchema),z.lazy(() => WasteRecordUpdateManyWithWhereWithoutRecordedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => WasteRecordScalarWhereInputSchema),z.lazy(() => WasteRecordScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProductionPlanUpdateManyWithoutCreatedByNestedInputSchema: z.ZodType<Prisma.ProductionPlanUpdateManyWithoutCreatedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProductionPlanCreateWithoutCreatedByInputSchema),z.lazy(() => ProductionPlanCreateWithoutCreatedByInputSchema).array(),z.lazy(() => ProductionPlanUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => ProductionPlanUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductionPlanCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => ProductionPlanCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProductionPlanUpsertWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => ProductionPlanUpsertWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductionPlanCreateManyCreatedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProductionPlanWhereUniqueInputSchema),z.lazy(() => ProductionPlanWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProductionPlanWhereUniqueInputSchema),z.lazy(() => ProductionPlanWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProductionPlanWhereUniqueInputSchema),z.lazy(() => ProductionPlanWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProductionPlanWhereUniqueInputSchema),z.lazy(() => ProductionPlanWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProductionPlanUpdateWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => ProductionPlanUpdateWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProductionPlanUpdateManyWithWhereWithoutCreatedByInputSchema),z.lazy(() => ProductionPlanUpdateManyWithWhereWithoutCreatedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProductionPlanScalarWhereInputSchema),z.lazy(() => ProductionPlanScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProductionPlanItemUpdateManyWithoutAssignedToNestedInputSchema: z.ZodType<Prisma.ProductionPlanItemUpdateManyWithoutAssignedToNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProductionPlanItemCreateWithoutAssignedToInputSchema),z.lazy(() => ProductionPlanItemCreateWithoutAssignedToInputSchema).array(),z.lazy(() => ProductionPlanItemUncheckedCreateWithoutAssignedToInputSchema),z.lazy(() => ProductionPlanItemUncheckedCreateWithoutAssignedToInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductionPlanItemCreateOrConnectWithoutAssignedToInputSchema),z.lazy(() => ProductionPlanItemCreateOrConnectWithoutAssignedToInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProductionPlanItemUpsertWithWhereUniqueWithoutAssignedToInputSchema),z.lazy(() => ProductionPlanItemUpsertWithWhereUniqueWithoutAssignedToInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductionPlanItemCreateManyAssignedToInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProductionPlanItemWhereUniqueInputSchema),z.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProductionPlanItemWhereUniqueInputSchema),z.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProductionPlanItemWhereUniqueInputSchema),z.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProductionPlanItemWhereUniqueInputSchema),z.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProductionPlanItemUpdateWithWhereUniqueWithoutAssignedToInputSchema),z.lazy(() => ProductionPlanItemUpdateWithWhereUniqueWithoutAssignedToInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProductionPlanItemUpdateManyWithWhereWithoutAssignedToInputSchema),z.lazy(() => ProductionPlanItemUpdateManyWithWhereWithoutAssignedToInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProductionPlanItemScalarWhereInputSchema),z.lazy(() => ProductionPlanItemScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AvailabilityUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.AvailabilityUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => AvailabilityCreateWithoutUserInputSchema),z.lazy(() => AvailabilityCreateWithoutUserInputSchema).array(),z.lazy(() => AvailabilityUncheckedCreateWithoutUserInputSchema),z.lazy(() => AvailabilityUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AvailabilityCreateOrConnectWithoutUserInputSchema),z.lazy(() => AvailabilityCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AvailabilityUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => AvailabilityUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AvailabilityCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AvailabilityWhereUniqueInputSchema),z.lazy(() => AvailabilityWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AvailabilityWhereUniqueInputSchema),z.lazy(() => AvailabilityWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AvailabilityWhereUniqueInputSchema),z.lazy(() => AvailabilityWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AvailabilityWhereUniqueInputSchema),z.lazy(() => AvailabilityWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AvailabilityUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => AvailabilityUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AvailabilityUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => AvailabilityUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AvailabilityScalarWhereInputSchema),z.lazy(() => AvailabilityScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SchedulingConstraintUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.SchedulingConstraintUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => SchedulingConstraintCreateWithoutUserInputSchema),z.lazy(() => SchedulingConstraintCreateWithoutUserInputSchema).array(),z.lazy(() => SchedulingConstraintUncheckedCreateWithoutUserInputSchema),z.lazy(() => SchedulingConstraintUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SchedulingConstraintCreateOrConnectWithoutUserInputSchema),z.lazy(() => SchedulingConstraintCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SchedulingConstraintUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SchedulingConstraintUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SchedulingConstraintCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SchedulingConstraintWhereUniqueInputSchema),z.lazy(() => SchedulingConstraintWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SchedulingConstraintWhereUniqueInputSchema),z.lazy(() => SchedulingConstraintWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SchedulingConstraintWhereUniqueInputSchema),z.lazy(() => SchedulingConstraintWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SchedulingConstraintWhereUniqueInputSchema),z.lazy(() => SchedulingConstraintWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SchedulingConstraintUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SchedulingConstraintUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SchedulingConstraintUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => SchedulingConstraintUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SchedulingConstraintScalarWhereInputSchema),z.lazy(() => SchedulingConstraintScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const InventoryWithdrawalUpdateManyWithoutCreatedByNestedInputSchema: z.ZodType<Prisma.InventoryWithdrawalUpdateManyWithoutCreatedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => InventoryWithdrawalCreateWithoutCreatedByInputSchema),z.lazy(() => InventoryWithdrawalCreateWithoutCreatedByInputSchema).array(),z.lazy(() => InventoryWithdrawalUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => InventoryWithdrawalUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InventoryWithdrawalCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => InventoryWithdrawalCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => InventoryWithdrawalUpsertWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => InventoryWithdrawalUpsertWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InventoryWithdrawalCreateManyCreatedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema),z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema),z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema),z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema),z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => InventoryWithdrawalUpdateWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => InventoryWithdrawalUpdateWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => InventoryWithdrawalUpdateManyWithWhereWithoutCreatedByInputSchema),z.lazy(() => InventoryWithdrawalUpdateManyWithWhereWithoutCreatedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => InventoryWithdrawalScalarWhereInputSchema),z.lazy(() => InventoryWithdrawalScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ChecklistCompleteUpdateManyWithoutCompletedByNestedInputSchema: z.ZodType<Prisma.ChecklistCompleteUpdateManyWithoutCompletedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => ChecklistCompleteCreateWithoutCompletedByInputSchema),z.lazy(() => ChecklistCompleteCreateWithoutCompletedByInputSchema).array(),z.lazy(() => ChecklistCompleteUncheckedCreateWithoutCompletedByInputSchema),z.lazy(() => ChecklistCompleteUncheckedCreateWithoutCompletedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ChecklistCompleteCreateOrConnectWithoutCompletedByInputSchema),z.lazy(() => ChecklistCompleteCreateOrConnectWithoutCompletedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ChecklistCompleteUpsertWithWhereUniqueWithoutCompletedByInputSchema),z.lazy(() => ChecklistCompleteUpsertWithWhereUniqueWithoutCompletedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ChecklistCompleteCreateManyCompletedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ChecklistCompleteWhereUniqueInputSchema),z.lazy(() => ChecklistCompleteWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ChecklistCompleteWhereUniqueInputSchema),z.lazy(() => ChecklistCompleteWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ChecklistCompleteWhereUniqueInputSchema),z.lazy(() => ChecklistCompleteWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ChecklistCompleteWhereUniqueInputSchema),z.lazy(() => ChecklistCompleteWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ChecklistCompleteUpdateWithWhereUniqueWithoutCompletedByInputSchema),z.lazy(() => ChecklistCompleteUpdateWithWhereUniqueWithoutCompletedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ChecklistCompleteUpdateManyWithWhereWithoutCompletedByInputSchema),z.lazy(() => ChecklistCompleteUpdateManyWithWhereWithoutCompletedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ChecklistCompleteScalarWhereInputSchema),z.lazy(() => ChecklistCompleteScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CustomerFeedbackUpdateManyWithoutRespondedByNestedInputSchema: z.ZodType<Prisma.CustomerFeedbackUpdateManyWithoutRespondedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => CustomerFeedbackCreateWithoutRespondedByInputSchema),z.lazy(() => CustomerFeedbackCreateWithoutRespondedByInputSchema).array(),z.lazy(() => CustomerFeedbackUncheckedCreateWithoutRespondedByInputSchema),z.lazy(() => CustomerFeedbackUncheckedCreateWithoutRespondedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomerFeedbackCreateOrConnectWithoutRespondedByInputSchema),z.lazy(() => CustomerFeedbackCreateOrConnectWithoutRespondedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CustomerFeedbackUpsertWithWhereUniqueWithoutRespondedByInputSchema),z.lazy(() => CustomerFeedbackUpsertWithWhereUniqueWithoutRespondedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomerFeedbackCreateManyRespondedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CustomerFeedbackWhereUniqueInputSchema),z.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CustomerFeedbackWhereUniqueInputSchema),z.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CustomerFeedbackWhereUniqueInputSchema),z.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CustomerFeedbackWhereUniqueInputSchema),z.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CustomerFeedbackUpdateWithWhereUniqueWithoutRespondedByInputSchema),z.lazy(() => CustomerFeedbackUpdateWithWhereUniqueWithoutRespondedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CustomerFeedbackUpdateManyWithWhereWithoutRespondedByInputSchema),z.lazy(() => CustomerFeedbackUpdateManyWithWhereWithoutRespondedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CustomerFeedbackScalarWhereInputSchema),z.lazy(() => CustomerFeedbackScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RecipeVersionUpdateManyWithoutCreatedByNestedInputSchema: z.ZodType<Prisma.RecipeVersionUpdateManyWithoutCreatedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeVersionCreateWithoutCreatedByInputSchema),z.lazy(() => RecipeVersionCreateWithoutCreatedByInputSchema).array(),z.lazy(() => RecipeVersionUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => RecipeVersionUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeVersionCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => RecipeVersionCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RecipeVersionUpsertWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => RecipeVersionUpsertWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeVersionCreateManyCreatedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RecipeVersionWhereUniqueInputSchema),z.lazy(() => RecipeVersionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RecipeVersionWhereUniqueInputSchema),z.lazy(() => RecipeVersionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RecipeVersionWhereUniqueInputSchema),z.lazy(() => RecipeVersionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RecipeVersionWhereUniqueInputSchema),z.lazy(() => RecipeVersionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RecipeVersionUpdateWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => RecipeVersionUpdateWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RecipeVersionUpdateManyWithWhereWithoutCreatedByInputSchema),z.lazy(() => RecipeVersionUpdateManyWithWhereWithoutCreatedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RecipeVersionScalarWhereInputSchema),z.lazy(() => RecipeVersionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RecipeVersionUpdateManyWithoutApprovedByNestedInputSchema: z.ZodType<Prisma.RecipeVersionUpdateManyWithoutApprovedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeVersionCreateWithoutApprovedByInputSchema),z.lazy(() => RecipeVersionCreateWithoutApprovedByInputSchema).array(),z.lazy(() => RecipeVersionUncheckedCreateWithoutApprovedByInputSchema),z.lazy(() => RecipeVersionUncheckedCreateWithoutApprovedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeVersionCreateOrConnectWithoutApprovedByInputSchema),z.lazy(() => RecipeVersionCreateOrConnectWithoutApprovedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RecipeVersionUpsertWithWhereUniqueWithoutApprovedByInputSchema),z.lazy(() => RecipeVersionUpsertWithWhereUniqueWithoutApprovedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeVersionCreateManyApprovedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RecipeVersionWhereUniqueInputSchema),z.lazy(() => RecipeVersionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RecipeVersionWhereUniqueInputSchema),z.lazy(() => RecipeVersionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RecipeVersionWhereUniqueInputSchema),z.lazy(() => RecipeVersionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RecipeVersionWhereUniqueInputSchema),z.lazy(() => RecipeVersionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RecipeVersionUpdateWithWhereUniqueWithoutApprovedByInputSchema),z.lazy(() => RecipeVersionUpdateWithWhereUniqueWithoutApprovedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RecipeVersionUpdateManyWithWhereWithoutApprovedByInputSchema),z.lazy(() => RecipeVersionUpdateManyWithWhereWithoutApprovedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RecipeVersionScalarWhereInputSchema),z.lazy(() => RecipeVersionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const InventoryTransactionUpdateManyWithoutCreatedByNestedInputSchema: z.ZodType<Prisma.InventoryTransactionUpdateManyWithoutCreatedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => InventoryTransactionCreateWithoutCreatedByInputSchema),z.lazy(() => InventoryTransactionCreateWithoutCreatedByInputSchema).array(),z.lazy(() => InventoryTransactionUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => InventoryTransactionUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InventoryTransactionCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => InventoryTransactionCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => InventoryTransactionUpsertWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => InventoryTransactionUpsertWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InventoryTransactionCreateManyCreatedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => InventoryTransactionWhereUniqueInputSchema),z.lazy(() => InventoryTransactionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => InventoryTransactionWhereUniqueInputSchema),z.lazy(() => InventoryTransactionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => InventoryTransactionWhereUniqueInputSchema),z.lazy(() => InventoryTransactionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => InventoryTransactionWhereUniqueInputSchema),z.lazy(() => InventoryTransactionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => InventoryTransactionUpdateWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => InventoryTransactionUpdateWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => InventoryTransactionUpdateManyWithWhereWithoutCreatedByInputSchema),z.lazy(() => InventoryTransactionUpdateManyWithWhereWithoutCreatedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => InventoryTransactionScalarWhereInputSchema),z.lazy(() => InventoryTransactionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const StockCountUpdateManyWithoutCreatedByNestedInputSchema: z.ZodType<Prisma.StockCountUpdateManyWithoutCreatedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => StockCountCreateWithoutCreatedByInputSchema),z.lazy(() => StockCountCreateWithoutCreatedByInputSchema).array(),z.lazy(() => StockCountUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => StockCountUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => StockCountCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => StockCountCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => StockCountUpsertWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => StockCountUpsertWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => StockCountCreateManyCreatedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => StockCountWhereUniqueInputSchema),z.lazy(() => StockCountWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => StockCountWhereUniqueInputSchema),z.lazy(() => StockCountWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => StockCountWhereUniqueInputSchema),z.lazy(() => StockCountWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => StockCountWhereUniqueInputSchema),z.lazy(() => StockCountWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => StockCountUpdateWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => StockCountUpdateWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => StockCountUpdateManyWithWhereWithoutCreatedByInputSchema),z.lazy(() => StockCountUpdateManyWithWhereWithoutCreatedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => StockCountScalarWhereInputSchema),z.lazy(() => StockCountScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ShiftUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.ShiftUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => ShiftCreateWithoutUserInputSchema),z.lazy(() => ShiftCreateWithoutUserInputSchema).array(),z.lazy(() => ShiftUncheckedCreateWithoutUserInputSchema),z.lazy(() => ShiftUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ShiftCreateOrConnectWithoutUserInputSchema),z.lazy(() => ShiftCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ShiftUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => ShiftUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ShiftCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ShiftWhereUniqueInputSchema),z.lazy(() => ShiftWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ShiftWhereUniqueInputSchema),z.lazy(() => ShiftWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ShiftWhereUniqueInputSchema),z.lazy(() => ShiftWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ShiftWhereUniqueInputSchema),z.lazy(() => ShiftWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ShiftUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => ShiftUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ShiftUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => ShiftUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ShiftScalarWhereInputSchema),z.lazy(() => ShiftScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PrepItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema: z.ZodType<Prisma.PrepItemUncheckedUpdateManyWithoutAssignedToNestedInput> = z.object({
  create: z.union([ z.lazy(() => PrepItemCreateWithoutAssignedToInputSchema),z.lazy(() => PrepItemCreateWithoutAssignedToInputSchema).array(),z.lazy(() => PrepItemUncheckedCreateWithoutAssignedToInputSchema),z.lazy(() => PrepItemUncheckedCreateWithoutAssignedToInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PrepItemCreateOrConnectWithoutAssignedToInputSchema),z.lazy(() => PrepItemCreateOrConnectWithoutAssignedToInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PrepItemUpsertWithWhereUniqueWithoutAssignedToInputSchema),z.lazy(() => PrepItemUpsertWithWhereUniqueWithoutAssignedToInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PrepItemCreateManyAssignedToInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PrepItemWhereUniqueInputSchema),z.lazy(() => PrepItemWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PrepItemWhereUniqueInputSchema),z.lazy(() => PrepItemWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PrepItemWhereUniqueInputSchema),z.lazy(() => PrepItemWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PrepItemWhereUniqueInputSchema),z.lazy(() => PrepItemWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PrepItemUpdateWithWhereUniqueWithoutAssignedToInputSchema),z.lazy(() => PrepItemUpdateWithWhereUniqueWithoutAssignedToInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PrepItemUpdateManyWithWhereWithoutAssignedToInputSchema),z.lazy(() => PrepItemUpdateManyWithWhereWithoutAssignedToInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PrepItemScalarWhereInputSchema),z.lazy(() => PrepItemScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const InventoryItemUncheckedUpdateManyWithoutLastUpdatedByNestedInputSchema: z.ZodType<Prisma.InventoryItemUncheckedUpdateManyWithoutLastUpdatedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => InventoryItemCreateWithoutLastUpdatedByInputSchema),z.lazy(() => InventoryItemCreateWithoutLastUpdatedByInputSchema).array(),z.lazy(() => InventoryItemUncheckedCreateWithoutLastUpdatedByInputSchema),z.lazy(() => InventoryItemUncheckedCreateWithoutLastUpdatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InventoryItemCreateOrConnectWithoutLastUpdatedByInputSchema),z.lazy(() => InventoryItemCreateOrConnectWithoutLastUpdatedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => InventoryItemUpsertWithWhereUniqueWithoutLastUpdatedByInputSchema),z.lazy(() => InventoryItemUpsertWithWhereUniqueWithoutLastUpdatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InventoryItemCreateManyLastUpdatedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => InventoryItemWhereUniqueInputSchema),z.lazy(() => InventoryItemWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => InventoryItemWhereUniqueInputSchema),z.lazy(() => InventoryItemWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => InventoryItemWhereUniqueInputSchema),z.lazy(() => InventoryItemWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => InventoryItemWhereUniqueInputSchema),z.lazy(() => InventoryItemWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => InventoryItemUpdateWithWhereUniqueWithoutLastUpdatedByInputSchema),z.lazy(() => InventoryItemUpdateWithWhereUniqueWithoutLastUpdatedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => InventoryItemUpdateManyWithWhereWithoutLastUpdatedByInputSchema),z.lazy(() => InventoryItemUpdateManyWithWhereWithoutLastUpdatedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => InventoryItemScalarWhereInputSchema),z.lazy(() => InventoryItemScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SessionUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionCreateWithoutUserInputSchema).array(),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema),z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SessionCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SessionScalarWhereInputSchema),z.lazy(() => SessionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PasswordResetUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.PasswordResetUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => PasswordResetCreateWithoutUserInputSchema),z.lazy(() => PasswordResetCreateWithoutUserInputSchema).array(),z.lazy(() => PasswordResetUncheckedCreateWithoutUserInputSchema),z.lazy(() => PasswordResetUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PasswordResetCreateOrConnectWithoutUserInputSchema),z.lazy(() => PasswordResetCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PasswordResetUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => PasswordResetUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PasswordResetCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PasswordResetWhereUniqueInputSchema),z.lazy(() => PasswordResetWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PasswordResetWhereUniqueInputSchema),z.lazy(() => PasswordResetWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PasswordResetWhereUniqueInputSchema),z.lazy(() => PasswordResetWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PasswordResetWhereUniqueInputSchema),z.lazy(() => PasswordResetWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PasswordResetUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => PasswordResetUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PasswordResetUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => PasswordResetUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PasswordResetScalarWhereInputSchema),z.lazy(() => PasswordResetScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LeftoverItemUncheckedUpdateManyWithoutRecordedByNestedInputSchema: z.ZodType<Prisma.LeftoverItemUncheckedUpdateManyWithoutRecordedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => LeftoverItemCreateWithoutRecordedByInputSchema),z.lazy(() => LeftoverItemCreateWithoutRecordedByInputSchema).array(),z.lazy(() => LeftoverItemUncheckedCreateWithoutRecordedByInputSchema),z.lazy(() => LeftoverItemUncheckedCreateWithoutRecordedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LeftoverItemCreateOrConnectWithoutRecordedByInputSchema),z.lazy(() => LeftoverItemCreateOrConnectWithoutRecordedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LeftoverItemUpsertWithWhereUniqueWithoutRecordedByInputSchema),z.lazy(() => LeftoverItemUpsertWithWhereUniqueWithoutRecordedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LeftoverItemCreateManyRecordedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LeftoverItemWhereUniqueInputSchema),z.lazy(() => LeftoverItemWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LeftoverItemWhereUniqueInputSchema),z.lazy(() => LeftoverItemWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LeftoverItemWhereUniqueInputSchema),z.lazy(() => LeftoverItemWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LeftoverItemWhereUniqueInputSchema),z.lazy(() => LeftoverItemWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LeftoverItemUpdateWithWhereUniqueWithoutRecordedByInputSchema),z.lazy(() => LeftoverItemUpdateWithWhereUniqueWithoutRecordedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LeftoverItemUpdateManyWithWhereWithoutRecordedByInputSchema),z.lazy(() => LeftoverItemUpdateManyWithWhereWithoutRecordedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LeftoverItemScalarWhereInputSchema),z.lazy(() => LeftoverItemScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const WasteRecordUncheckedUpdateManyWithoutRecordedByNestedInputSchema: z.ZodType<Prisma.WasteRecordUncheckedUpdateManyWithoutRecordedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => WasteRecordCreateWithoutRecordedByInputSchema),z.lazy(() => WasteRecordCreateWithoutRecordedByInputSchema).array(),z.lazy(() => WasteRecordUncheckedCreateWithoutRecordedByInputSchema),z.lazy(() => WasteRecordUncheckedCreateWithoutRecordedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => WasteRecordCreateOrConnectWithoutRecordedByInputSchema),z.lazy(() => WasteRecordCreateOrConnectWithoutRecordedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => WasteRecordUpsertWithWhereUniqueWithoutRecordedByInputSchema),z.lazy(() => WasteRecordUpsertWithWhereUniqueWithoutRecordedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => WasteRecordCreateManyRecordedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => WasteRecordWhereUniqueInputSchema),z.lazy(() => WasteRecordWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => WasteRecordWhereUniqueInputSchema),z.lazy(() => WasteRecordWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => WasteRecordWhereUniqueInputSchema),z.lazy(() => WasteRecordWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => WasteRecordWhereUniqueInputSchema),z.lazy(() => WasteRecordWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => WasteRecordUpdateWithWhereUniqueWithoutRecordedByInputSchema),z.lazy(() => WasteRecordUpdateWithWhereUniqueWithoutRecordedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => WasteRecordUpdateManyWithWhereWithoutRecordedByInputSchema),z.lazy(() => WasteRecordUpdateManyWithWhereWithoutRecordedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => WasteRecordScalarWhereInputSchema),z.lazy(() => WasteRecordScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProductionPlanUncheckedUpdateManyWithoutCreatedByNestedInputSchema: z.ZodType<Prisma.ProductionPlanUncheckedUpdateManyWithoutCreatedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProductionPlanCreateWithoutCreatedByInputSchema),z.lazy(() => ProductionPlanCreateWithoutCreatedByInputSchema).array(),z.lazy(() => ProductionPlanUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => ProductionPlanUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductionPlanCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => ProductionPlanCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProductionPlanUpsertWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => ProductionPlanUpsertWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductionPlanCreateManyCreatedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProductionPlanWhereUniqueInputSchema),z.lazy(() => ProductionPlanWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProductionPlanWhereUniqueInputSchema),z.lazy(() => ProductionPlanWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProductionPlanWhereUniqueInputSchema),z.lazy(() => ProductionPlanWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProductionPlanWhereUniqueInputSchema),z.lazy(() => ProductionPlanWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProductionPlanUpdateWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => ProductionPlanUpdateWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProductionPlanUpdateManyWithWhereWithoutCreatedByInputSchema),z.lazy(() => ProductionPlanUpdateManyWithWhereWithoutCreatedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProductionPlanScalarWhereInputSchema),z.lazy(() => ProductionPlanScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProductionPlanItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema: z.ZodType<Prisma.ProductionPlanItemUncheckedUpdateManyWithoutAssignedToNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProductionPlanItemCreateWithoutAssignedToInputSchema),z.lazy(() => ProductionPlanItemCreateWithoutAssignedToInputSchema).array(),z.lazy(() => ProductionPlanItemUncheckedCreateWithoutAssignedToInputSchema),z.lazy(() => ProductionPlanItemUncheckedCreateWithoutAssignedToInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductionPlanItemCreateOrConnectWithoutAssignedToInputSchema),z.lazy(() => ProductionPlanItemCreateOrConnectWithoutAssignedToInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProductionPlanItemUpsertWithWhereUniqueWithoutAssignedToInputSchema),z.lazy(() => ProductionPlanItemUpsertWithWhereUniqueWithoutAssignedToInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductionPlanItemCreateManyAssignedToInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProductionPlanItemWhereUniqueInputSchema),z.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProductionPlanItemWhereUniqueInputSchema),z.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProductionPlanItemWhereUniqueInputSchema),z.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProductionPlanItemWhereUniqueInputSchema),z.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProductionPlanItemUpdateWithWhereUniqueWithoutAssignedToInputSchema),z.lazy(() => ProductionPlanItemUpdateWithWhereUniqueWithoutAssignedToInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProductionPlanItemUpdateManyWithWhereWithoutAssignedToInputSchema),z.lazy(() => ProductionPlanItemUpdateManyWithWhereWithoutAssignedToInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProductionPlanItemScalarWhereInputSchema),z.lazy(() => ProductionPlanItemScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AvailabilityUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.AvailabilityUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => AvailabilityCreateWithoutUserInputSchema),z.lazy(() => AvailabilityCreateWithoutUserInputSchema).array(),z.lazy(() => AvailabilityUncheckedCreateWithoutUserInputSchema),z.lazy(() => AvailabilityUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AvailabilityCreateOrConnectWithoutUserInputSchema),z.lazy(() => AvailabilityCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AvailabilityUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => AvailabilityUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AvailabilityCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AvailabilityWhereUniqueInputSchema),z.lazy(() => AvailabilityWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AvailabilityWhereUniqueInputSchema),z.lazy(() => AvailabilityWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AvailabilityWhereUniqueInputSchema),z.lazy(() => AvailabilityWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AvailabilityWhereUniqueInputSchema),z.lazy(() => AvailabilityWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AvailabilityUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => AvailabilityUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AvailabilityUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => AvailabilityUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AvailabilityScalarWhereInputSchema),z.lazy(() => AvailabilityScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SchedulingConstraintUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.SchedulingConstraintUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => SchedulingConstraintCreateWithoutUserInputSchema),z.lazy(() => SchedulingConstraintCreateWithoutUserInputSchema).array(),z.lazy(() => SchedulingConstraintUncheckedCreateWithoutUserInputSchema),z.lazy(() => SchedulingConstraintUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SchedulingConstraintCreateOrConnectWithoutUserInputSchema),z.lazy(() => SchedulingConstraintCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SchedulingConstraintUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SchedulingConstraintUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SchedulingConstraintCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SchedulingConstraintWhereUniqueInputSchema),z.lazy(() => SchedulingConstraintWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SchedulingConstraintWhereUniqueInputSchema),z.lazy(() => SchedulingConstraintWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SchedulingConstraintWhereUniqueInputSchema),z.lazy(() => SchedulingConstraintWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SchedulingConstraintWhereUniqueInputSchema),z.lazy(() => SchedulingConstraintWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SchedulingConstraintUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SchedulingConstraintUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SchedulingConstraintUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => SchedulingConstraintUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SchedulingConstraintScalarWhereInputSchema),z.lazy(() => SchedulingConstraintScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByNestedInputSchema: z.ZodType<Prisma.InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => InventoryWithdrawalCreateWithoutCreatedByInputSchema),z.lazy(() => InventoryWithdrawalCreateWithoutCreatedByInputSchema).array(),z.lazy(() => InventoryWithdrawalUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => InventoryWithdrawalUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InventoryWithdrawalCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => InventoryWithdrawalCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => InventoryWithdrawalUpsertWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => InventoryWithdrawalUpsertWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InventoryWithdrawalCreateManyCreatedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema),z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema),z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema),z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema),z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => InventoryWithdrawalUpdateWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => InventoryWithdrawalUpdateWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => InventoryWithdrawalUpdateManyWithWhereWithoutCreatedByInputSchema),z.lazy(() => InventoryWithdrawalUpdateManyWithWhereWithoutCreatedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => InventoryWithdrawalScalarWhereInputSchema),z.lazy(() => InventoryWithdrawalScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ChecklistCompleteUncheckedUpdateManyWithoutCompletedByNestedInputSchema: z.ZodType<Prisma.ChecklistCompleteUncheckedUpdateManyWithoutCompletedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => ChecklistCompleteCreateWithoutCompletedByInputSchema),z.lazy(() => ChecklistCompleteCreateWithoutCompletedByInputSchema).array(),z.lazy(() => ChecklistCompleteUncheckedCreateWithoutCompletedByInputSchema),z.lazy(() => ChecklistCompleteUncheckedCreateWithoutCompletedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ChecklistCompleteCreateOrConnectWithoutCompletedByInputSchema),z.lazy(() => ChecklistCompleteCreateOrConnectWithoutCompletedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ChecklistCompleteUpsertWithWhereUniqueWithoutCompletedByInputSchema),z.lazy(() => ChecklistCompleteUpsertWithWhereUniqueWithoutCompletedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ChecklistCompleteCreateManyCompletedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ChecklistCompleteWhereUniqueInputSchema),z.lazy(() => ChecklistCompleteWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ChecklistCompleteWhereUniqueInputSchema),z.lazy(() => ChecklistCompleteWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ChecklistCompleteWhereUniqueInputSchema),z.lazy(() => ChecklistCompleteWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ChecklistCompleteWhereUniqueInputSchema),z.lazy(() => ChecklistCompleteWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ChecklistCompleteUpdateWithWhereUniqueWithoutCompletedByInputSchema),z.lazy(() => ChecklistCompleteUpdateWithWhereUniqueWithoutCompletedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ChecklistCompleteUpdateManyWithWhereWithoutCompletedByInputSchema),z.lazy(() => ChecklistCompleteUpdateManyWithWhereWithoutCompletedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ChecklistCompleteScalarWhereInputSchema),z.lazy(() => ChecklistCompleteScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CustomerFeedbackUncheckedUpdateManyWithoutRespondedByNestedInputSchema: z.ZodType<Prisma.CustomerFeedbackUncheckedUpdateManyWithoutRespondedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => CustomerFeedbackCreateWithoutRespondedByInputSchema),z.lazy(() => CustomerFeedbackCreateWithoutRespondedByInputSchema).array(),z.lazy(() => CustomerFeedbackUncheckedCreateWithoutRespondedByInputSchema),z.lazy(() => CustomerFeedbackUncheckedCreateWithoutRespondedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomerFeedbackCreateOrConnectWithoutRespondedByInputSchema),z.lazy(() => CustomerFeedbackCreateOrConnectWithoutRespondedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CustomerFeedbackUpsertWithWhereUniqueWithoutRespondedByInputSchema),z.lazy(() => CustomerFeedbackUpsertWithWhereUniqueWithoutRespondedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomerFeedbackCreateManyRespondedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CustomerFeedbackWhereUniqueInputSchema),z.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CustomerFeedbackWhereUniqueInputSchema),z.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CustomerFeedbackWhereUniqueInputSchema),z.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CustomerFeedbackWhereUniqueInputSchema),z.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CustomerFeedbackUpdateWithWhereUniqueWithoutRespondedByInputSchema),z.lazy(() => CustomerFeedbackUpdateWithWhereUniqueWithoutRespondedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CustomerFeedbackUpdateManyWithWhereWithoutRespondedByInputSchema),z.lazy(() => CustomerFeedbackUpdateManyWithWhereWithoutRespondedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CustomerFeedbackScalarWhereInputSchema),z.lazy(() => CustomerFeedbackScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RecipeVersionUncheckedUpdateManyWithoutCreatedByNestedInputSchema: z.ZodType<Prisma.RecipeVersionUncheckedUpdateManyWithoutCreatedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeVersionCreateWithoutCreatedByInputSchema),z.lazy(() => RecipeVersionCreateWithoutCreatedByInputSchema).array(),z.lazy(() => RecipeVersionUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => RecipeVersionUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeVersionCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => RecipeVersionCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RecipeVersionUpsertWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => RecipeVersionUpsertWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeVersionCreateManyCreatedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RecipeVersionWhereUniqueInputSchema),z.lazy(() => RecipeVersionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RecipeVersionWhereUniqueInputSchema),z.lazy(() => RecipeVersionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RecipeVersionWhereUniqueInputSchema),z.lazy(() => RecipeVersionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RecipeVersionWhereUniqueInputSchema),z.lazy(() => RecipeVersionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RecipeVersionUpdateWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => RecipeVersionUpdateWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RecipeVersionUpdateManyWithWhereWithoutCreatedByInputSchema),z.lazy(() => RecipeVersionUpdateManyWithWhereWithoutCreatedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RecipeVersionScalarWhereInputSchema),z.lazy(() => RecipeVersionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RecipeVersionUncheckedUpdateManyWithoutApprovedByNestedInputSchema: z.ZodType<Prisma.RecipeVersionUncheckedUpdateManyWithoutApprovedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeVersionCreateWithoutApprovedByInputSchema),z.lazy(() => RecipeVersionCreateWithoutApprovedByInputSchema).array(),z.lazy(() => RecipeVersionUncheckedCreateWithoutApprovedByInputSchema),z.lazy(() => RecipeVersionUncheckedCreateWithoutApprovedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeVersionCreateOrConnectWithoutApprovedByInputSchema),z.lazy(() => RecipeVersionCreateOrConnectWithoutApprovedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RecipeVersionUpsertWithWhereUniqueWithoutApprovedByInputSchema),z.lazy(() => RecipeVersionUpsertWithWhereUniqueWithoutApprovedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeVersionCreateManyApprovedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RecipeVersionWhereUniqueInputSchema),z.lazy(() => RecipeVersionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RecipeVersionWhereUniqueInputSchema),z.lazy(() => RecipeVersionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RecipeVersionWhereUniqueInputSchema),z.lazy(() => RecipeVersionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RecipeVersionWhereUniqueInputSchema),z.lazy(() => RecipeVersionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RecipeVersionUpdateWithWhereUniqueWithoutApprovedByInputSchema),z.lazy(() => RecipeVersionUpdateWithWhereUniqueWithoutApprovedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RecipeVersionUpdateManyWithWhereWithoutApprovedByInputSchema),z.lazy(() => RecipeVersionUpdateManyWithWhereWithoutApprovedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RecipeVersionScalarWhereInputSchema),z.lazy(() => RecipeVersionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInputSchema: z.ZodType<Prisma.InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => InventoryTransactionCreateWithoutCreatedByInputSchema),z.lazy(() => InventoryTransactionCreateWithoutCreatedByInputSchema).array(),z.lazy(() => InventoryTransactionUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => InventoryTransactionUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InventoryTransactionCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => InventoryTransactionCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => InventoryTransactionUpsertWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => InventoryTransactionUpsertWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InventoryTransactionCreateManyCreatedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => InventoryTransactionWhereUniqueInputSchema),z.lazy(() => InventoryTransactionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => InventoryTransactionWhereUniqueInputSchema),z.lazy(() => InventoryTransactionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => InventoryTransactionWhereUniqueInputSchema),z.lazy(() => InventoryTransactionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => InventoryTransactionWhereUniqueInputSchema),z.lazy(() => InventoryTransactionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => InventoryTransactionUpdateWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => InventoryTransactionUpdateWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => InventoryTransactionUpdateManyWithWhereWithoutCreatedByInputSchema),z.lazy(() => InventoryTransactionUpdateManyWithWhereWithoutCreatedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => InventoryTransactionScalarWhereInputSchema),z.lazy(() => InventoryTransactionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const StockCountUncheckedUpdateManyWithoutCreatedByNestedInputSchema: z.ZodType<Prisma.StockCountUncheckedUpdateManyWithoutCreatedByNestedInput> = z.object({
  create: z.union([ z.lazy(() => StockCountCreateWithoutCreatedByInputSchema),z.lazy(() => StockCountCreateWithoutCreatedByInputSchema).array(),z.lazy(() => StockCountUncheckedCreateWithoutCreatedByInputSchema),z.lazy(() => StockCountUncheckedCreateWithoutCreatedByInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => StockCountCreateOrConnectWithoutCreatedByInputSchema),z.lazy(() => StockCountCreateOrConnectWithoutCreatedByInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => StockCountUpsertWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => StockCountUpsertWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  createMany: z.lazy(() => StockCountCreateManyCreatedByInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => StockCountWhereUniqueInputSchema),z.lazy(() => StockCountWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => StockCountWhereUniqueInputSchema),z.lazy(() => StockCountWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => StockCountWhereUniqueInputSchema),z.lazy(() => StockCountWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => StockCountWhereUniqueInputSchema),z.lazy(() => StockCountWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => StockCountUpdateWithWhereUniqueWithoutCreatedByInputSchema),z.lazy(() => StockCountUpdateWithWhereUniqueWithoutCreatedByInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => StockCountUpdateManyWithWhereWithoutCreatedByInputSchema),z.lazy(() => StockCountUpdateManyWithWhereWithoutCreatedByInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => StockCountScalarWhereInputSchema),z.lazy(() => StockCountScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutSessionsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutSessionsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutSessionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutSessionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutSessionsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const UserUpdateOneRequiredWithoutSessionsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutSessionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutSessionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutSessionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutSessionsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutSessionsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutSessionsInputSchema),z.lazy(() => UserUpdateWithoutSessionsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutSessionsInputSchema) ]).optional(),
}).strict();

export const RecipeCreateNestedManyWithoutCookBookInputSchema: z.ZodType<Prisma.RecipeCreateNestedManyWithoutCookBookInput> = z.object({
  create: z.union([ z.lazy(() => RecipeCreateWithoutCookBookInputSchema),z.lazy(() => RecipeCreateWithoutCookBookInputSchema).array(),z.lazy(() => RecipeUncheckedCreateWithoutCookBookInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutCookBookInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeCreateOrConnectWithoutCookBookInputSchema),z.lazy(() => RecipeCreateOrConnectWithoutCookBookInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeCreateManyCookBookInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RecipeWhereUniqueInputSchema),z.lazy(() => RecipeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RestaurantCreateNestedOneWithoutCookbooksInputSchema: z.ZodType<Prisma.RestaurantCreateNestedOneWithoutCookbooksInput> = z.object({
  create: z.union([ z.lazy(() => RestaurantCreateWithoutCookbooksInputSchema),z.lazy(() => RestaurantUncheckedCreateWithoutCookbooksInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RestaurantCreateOrConnectWithoutCookbooksInputSchema).optional(),
  connect: z.lazy(() => RestaurantWhereUniqueInputSchema).optional()
}).strict();

export const RecipeUncheckedCreateNestedManyWithoutCookBookInputSchema: z.ZodType<Prisma.RecipeUncheckedCreateNestedManyWithoutCookBookInput> = z.object({
  create: z.union([ z.lazy(() => RecipeCreateWithoutCookBookInputSchema),z.lazy(() => RecipeCreateWithoutCookBookInputSchema).array(),z.lazy(() => RecipeUncheckedCreateWithoutCookBookInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutCookBookInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeCreateOrConnectWithoutCookBookInputSchema),z.lazy(() => RecipeCreateOrConnectWithoutCookBookInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeCreateManyCookBookInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RecipeWhereUniqueInputSchema),z.lazy(() => RecipeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RecipeUpdateManyWithoutCookBookNestedInputSchema: z.ZodType<Prisma.RecipeUpdateManyWithoutCookBookNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeCreateWithoutCookBookInputSchema),z.lazy(() => RecipeCreateWithoutCookBookInputSchema).array(),z.lazy(() => RecipeUncheckedCreateWithoutCookBookInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutCookBookInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeCreateOrConnectWithoutCookBookInputSchema),z.lazy(() => RecipeCreateOrConnectWithoutCookBookInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RecipeUpsertWithWhereUniqueWithoutCookBookInputSchema),z.lazy(() => RecipeUpsertWithWhereUniqueWithoutCookBookInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeCreateManyCookBookInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RecipeWhereUniqueInputSchema),z.lazy(() => RecipeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RecipeWhereUniqueInputSchema),z.lazy(() => RecipeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RecipeWhereUniqueInputSchema),z.lazy(() => RecipeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RecipeWhereUniqueInputSchema),z.lazy(() => RecipeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RecipeUpdateWithWhereUniqueWithoutCookBookInputSchema),z.lazy(() => RecipeUpdateWithWhereUniqueWithoutCookBookInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RecipeUpdateManyWithWhereWithoutCookBookInputSchema),z.lazy(() => RecipeUpdateManyWithWhereWithoutCookBookInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RecipeScalarWhereInputSchema),z.lazy(() => RecipeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RestaurantUpdateOneWithoutCookbooksNestedInputSchema: z.ZodType<Prisma.RestaurantUpdateOneWithoutCookbooksNestedInput> = z.object({
  create: z.union([ z.lazy(() => RestaurantCreateWithoutCookbooksInputSchema),z.lazy(() => RestaurantUncheckedCreateWithoutCookbooksInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RestaurantCreateOrConnectWithoutCookbooksInputSchema).optional(),
  upsert: z.lazy(() => RestaurantUpsertWithoutCookbooksInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => RestaurantWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => RestaurantWhereInputSchema) ]).optional(),
  connect: z.lazy(() => RestaurantWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RestaurantUpdateToOneWithWhereWithoutCookbooksInputSchema),z.lazy(() => RestaurantUpdateWithoutCookbooksInputSchema),z.lazy(() => RestaurantUncheckedUpdateWithoutCookbooksInputSchema) ]).optional(),
}).strict();

export const RecipeUncheckedUpdateManyWithoutCookBookNestedInputSchema: z.ZodType<Prisma.RecipeUncheckedUpdateManyWithoutCookBookNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeCreateWithoutCookBookInputSchema),z.lazy(() => RecipeCreateWithoutCookBookInputSchema).array(),z.lazy(() => RecipeUncheckedCreateWithoutCookBookInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutCookBookInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeCreateOrConnectWithoutCookBookInputSchema),z.lazy(() => RecipeCreateOrConnectWithoutCookBookInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RecipeUpsertWithWhereUniqueWithoutCookBookInputSchema),z.lazy(() => RecipeUpsertWithWhereUniqueWithoutCookBookInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeCreateManyCookBookInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RecipeWhereUniqueInputSchema),z.lazy(() => RecipeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RecipeWhereUniqueInputSchema),z.lazy(() => RecipeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RecipeWhereUniqueInputSchema),z.lazy(() => RecipeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RecipeWhereUniqueInputSchema),z.lazy(() => RecipeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RecipeUpdateWithWhereUniqueWithoutCookBookInputSchema),z.lazy(() => RecipeUpdateWithWhereUniqueWithoutCookBookInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RecipeUpdateManyWithWhereWithoutCookBookInputSchema),z.lazy(() => RecipeUpdateManyWithWhereWithoutCookBookInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RecipeScalarWhereInputSchema),z.lazy(() => RecipeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RecipeCreateimageUrlsInputSchema: z.ZodType<Prisma.RecipeCreateimageUrlsInput> = z.object({
  set: z.string().array()
}).strict();

export const RestaurantCreateNestedOneWithoutRecipesInputSchema: z.ZodType<Prisma.RestaurantCreateNestedOneWithoutRecipesInput> = z.object({
  create: z.union([ z.lazy(() => RestaurantCreateWithoutRecipesInputSchema),z.lazy(() => RestaurantUncheckedCreateWithoutRecipesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RestaurantCreateOrConnectWithoutRecipesInputSchema).optional(),
  connect: z.lazy(() => RestaurantWhereUniqueInputSchema).optional()
}).strict();

export const CookBookCreateNestedOneWithoutRecipesInputSchema: z.ZodType<Prisma.CookBookCreateNestedOneWithoutRecipesInput> = z.object({
  create: z.union([ z.lazy(() => CookBookCreateWithoutRecipesInputSchema),z.lazy(() => CookBookUncheckedCreateWithoutRecipesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CookBookCreateOrConnectWithoutRecipesInputSchema).optional(),
  connect: z.lazy(() => CookBookWhereUniqueInputSchema).optional()
}).strict();

export const RecipeIngredientCreateNestedManyWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeIngredientCreateNestedManyWithoutRecipeInput> = z.object({
  create: z.union([ z.lazy(() => RecipeIngredientCreateWithoutRecipeInputSchema),z.lazy(() => RecipeIngredientCreateWithoutRecipeInputSchema).array(),z.lazy(() => RecipeIngredientUncheckedCreateWithoutRecipeInputSchema),z.lazy(() => RecipeIngredientUncheckedCreateWithoutRecipeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeIngredientCreateOrConnectWithoutRecipeInputSchema),z.lazy(() => RecipeIngredientCreateOrConnectWithoutRecipeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeIngredientCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RecipeIngredientWhereUniqueInputSchema),z.lazy(() => RecipeIngredientWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RecipeInstructionCreateNestedManyWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeInstructionCreateNestedManyWithoutRecipeInput> = z.object({
  create: z.union([ z.lazy(() => RecipeInstructionCreateWithoutRecipeInputSchema),z.lazy(() => RecipeInstructionCreateWithoutRecipeInputSchema).array(),z.lazy(() => RecipeInstructionUncheckedCreateWithoutRecipeInputSchema),z.lazy(() => RecipeInstructionUncheckedCreateWithoutRecipeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeInstructionCreateOrConnectWithoutRecipeInputSchema),z.lazy(() => RecipeInstructionCreateOrConnectWithoutRecipeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeInstructionCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RecipeInstructionWhereUniqueInputSchema),z.lazy(() => RecipeInstructionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const MenuItemCreateNestedManyWithoutRecipesInputSchema: z.ZodType<Prisma.MenuItemCreateNestedManyWithoutRecipesInput> = z.object({
  create: z.union([ z.lazy(() => MenuItemCreateWithoutRecipesInputSchema),z.lazy(() => MenuItemCreateWithoutRecipesInputSchema).array(),z.lazy(() => MenuItemUncheckedCreateWithoutRecipesInputSchema),z.lazy(() => MenuItemUncheckedCreateWithoutRecipesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MenuItemCreateOrConnectWithoutRecipesInputSchema),z.lazy(() => MenuItemCreateOrConnectWithoutRecipesInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MenuItemWhereUniqueInputSchema),z.lazy(() => MenuItemWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FoodCostHistoryCreateNestedManyWithoutRecipeInputSchema: z.ZodType<Prisma.FoodCostHistoryCreateNestedManyWithoutRecipeInput> = z.object({
  create: z.union([ z.lazy(() => FoodCostHistoryCreateWithoutRecipeInputSchema),z.lazy(() => FoodCostHistoryCreateWithoutRecipeInputSchema).array(),z.lazy(() => FoodCostHistoryUncheckedCreateWithoutRecipeInputSchema),z.lazy(() => FoodCostHistoryUncheckedCreateWithoutRecipeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FoodCostHistoryCreateOrConnectWithoutRecipeInputSchema),z.lazy(() => FoodCostHistoryCreateOrConnectWithoutRecipeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FoodCostHistoryCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FoodCostHistoryWhereUniqueInputSchema),z.lazy(() => FoodCostHistoryWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PrepHistoryCreateNestedManyWithoutRecipeInputSchema: z.ZodType<Prisma.PrepHistoryCreateNestedManyWithoutRecipeInput> = z.object({
  create: z.union([ z.lazy(() => PrepHistoryCreateWithoutRecipeInputSchema),z.lazy(() => PrepHistoryCreateWithoutRecipeInputSchema).array(),z.lazy(() => PrepHistoryUncheckedCreateWithoutRecipeInputSchema),z.lazy(() => PrepHistoryUncheckedCreateWithoutRecipeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PrepHistoryCreateOrConnectWithoutRecipeInputSchema),z.lazy(() => PrepHistoryCreateOrConnectWithoutRecipeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PrepHistoryCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PrepHistoryWhereUniqueInputSchema),z.lazy(() => PrepHistoryWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PrepBoardCreateNestedManyWithoutRecipesInputSchema: z.ZodType<Prisma.PrepBoardCreateNestedManyWithoutRecipesInput> = z.object({
  create: z.union([ z.lazy(() => PrepBoardCreateWithoutRecipesInputSchema),z.lazy(() => PrepBoardCreateWithoutRecipesInputSchema).array(),z.lazy(() => PrepBoardUncheckedCreateWithoutRecipesInputSchema),z.lazy(() => PrepBoardUncheckedCreateWithoutRecipesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PrepBoardCreateOrConnectWithoutRecipesInputSchema),z.lazy(() => PrepBoardCreateOrConnectWithoutRecipesInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PrepBoardWhereUniqueInputSchema),z.lazy(() => PrepBoardWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PrepItemCreateNestedManyWithoutRecipeInputSchema: z.ZodType<Prisma.PrepItemCreateNestedManyWithoutRecipeInput> = z.object({
  create: z.union([ z.lazy(() => PrepItemCreateWithoutRecipeInputSchema),z.lazy(() => PrepItemCreateWithoutRecipeInputSchema).array(),z.lazy(() => PrepItemUncheckedCreateWithoutRecipeInputSchema),z.lazy(() => PrepItemUncheckedCreateWithoutRecipeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PrepItemCreateOrConnectWithoutRecipeInputSchema),z.lazy(() => PrepItemCreateOrConnectWithoutRecipeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PrepItemCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PrepItemWhereUniqueInputSchema),z.lazy(() => PrepItemWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const MenuItemRecipeCreateNestedManyWithoutRecipeInputSchema: z.ZodType<Prisma.MenuItemRecipeCreateNestedManyWithoutRecipeInput> = z.object({
  create: z.union([ z.lazy(() => MenuItemRecipeCreateWithoutRecipeInputSchema),z.lazy(() => MenuItemRecipeCreateWithoutRecipeInputSchema).array(),z.lazy(() => MenuItemRecipeUncheckedCreateWithoutRecipeInputSchema),z.lazy(() => MenuItemRecipeUncheckedCreateWithoutRecipeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MenuItemRecipeCreateOrConnectWithoutRecipeInputSchema),z.lazy(() => MenuItemRecipeCreateOrConnectWithoutRecipeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MenuItemRecipeCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => MenuItemRecipeWhereUniqueInputSchema),z.lazy(() => MenuItemRecipeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProductionPlanItemCreateNestedManyWithoutRecipeInputSchema: z.ZodType<Prisma.ProductionPlanItemCreateNestedManyWithoutRecipeInput> = z.object({
  create: z.union([ z.lazy(() => ProductionPlanItemCreateWithoutRecipeInputSchema),z.lazy(() => ProductionPlanItemCreateWithoutRecipeInputSchema).array(),z.lazy(() => ProductionPlanItemUncheckedCreateWithoutRecipeInputSchema),z.lazy(() => ProductionPlanItemUncheckedCreateWithoutRecipeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductionPlanItemCreateOrConnectWithoutRecipeInputSchema),z.lazy(() => ProductionPlanItemCreateOrConnectWithoutRecipeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductionPlanItemCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProductionPlanItemWhereUniqueInputSchema),z.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const InventoryWithdrawalCreateNestedManyWithoutRecipeInputSchema: z.ZodType<Prisma.InventoryWithdrawalCreateNestedManyWithoutRecipeInput> = z.object({
  create: z.union([ z.lazy(() => InventoryWithdrawalCreateWithoutRecipeInputSchema),z.lazy(() => InventoryWithdrawalCreateWithoutRecipeInputSchema).array(),z.lazy(() => InventoryWithdrawalUncheckedCreateWithoutRecipeInputSchema),z.lazy(() => InventoryWithdrawalUncheckedCreateWithoutRecipeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InventoryWithdrawalCreateOrConnectWithoutRecipeInputSchema),z.lazy(() => InventoryWithdrawalCreateOrConnectWithoutRecipeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InventoryWithdrawalCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema),z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RecipeTagCreateNestedManyWithoutRecipesInputSchema: z.ZodType<Prisma.RecipeTagCreateNestedManyWithoutRecipesInput> = z.object({
  create: z.union([ z.lazy(() => RecipeTagCreateWithoutRecipesInputSchema),z.lazy(() => RecipeTagCreateWithoutRecipesInputSchema).array(),z.lazy(() => RecipeTagUncheckedCreateWithoutRecipesInputSchema),z.lazy(() => RecipeTagUncheckedCreateWithoutRecipesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeTagCreateOrConnectWithoutRecipesInputSchema),z.lazy(() => RecipeTagCreateOrConnectWithoutRecipesInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RecipeTagWhereUniqueInputSchema),z.lazy(() => RecipeTagWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RecipeVersionCreateNestedManyWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeVersionCreateNestedManyWithoutRecipeInput> = z.object({
  create: z.union([ z.lazy(() => RecipeVersionCreateWithoutRecipeInputSchema),z.lazy(() => RecipeVersionCreateWithoutRecipeInputSchema).array(),z.lazy(() => RecipeVersionUncheckedCreateWithoutRecipeInputSchema),z.lazy(() => RecipeVersionUncheckedCreateWithoutRecipeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeVersionCreateOrConnectWithoutRecipeInputSchema),z.lazy(() => RecipeVersionCreateOrConnectWithoutRecipeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeVersionCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RecipeVersionWhereUniqueInputSchema),z.lazy(() => RecipeVersionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RecipeEquipmentCreateNestedManyWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeEquipmentCreateNestedManyWithoutRecipeInput> = z.object({
  create: z.union([ z.lazy(() => RecipeEquipmentCreateWithoutRecipeInputSchema),z.lazy(() => RecipeEquipmentCreateWithoutRecipeInputSchema).array(),z.lazy(() => RecipeEquipmentUncheckedCreateWithoutRecipeInputSchema),z.lazy(() => RecipeEquipmentUncheckedCreateWithoutRecipeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeEquipmentCreateOrConnectWithoutRecipeInputSchema),z.lazy(() => RecipeEquipmentCreateOrConnectWithoutRecipeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeEquipmentCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RecipeEquipmentWhereUniqueInputSchema),z.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const DietaryRestrictionCreateNestedManyWithoutRecipesInputSchema: z.ZodType<Prisma.DietaryRestrictionCreateNestedManyWithoutRecipesInput> = z.object({
  create: z.union([ z.lazy(() => DietaryRestrictionCreateWithoutRecipesInputSchema),z.lazy(() => DietaryRestrictionCreateWithoutRecipesInputSchema).array(),z.lazy(() => DietaryRestrictionUncheckedCreateWithoutRecipesInputSchema),z.lazy(() => DietaryRestrictionUncheckedCreateWithoutRecipesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DietaryRestrictionCreateOrConnectWithoutRecipesInputSchema),z.lazy(() => DietaryRestrictionCreateOrConnectWithoutRecipesInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => DietaryRestrictionWhereUniqueInputSchema),z.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RecipeTemperatureCreateNestedManyWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeTemperatureCreateNestedManyWithoutRecipeInput> = z.object({
  create: z.union([ z.lazy(() => RecipeTemperatureCreateWithoutRecipeInputSchema),z.lazy(() => RecipeTemperatureCreateWithoutRecipeInputSchema).array(),z.lazy(() => RecipeTemperatureUncheckedCreateWithoutRecipeInputSchema),z.lazy(() => RecipeTemperatureUncheckedCreateWithoutRecipeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeTemperatureCreateOrConnectWithoutRecipeInputSchema),z.lazy(() => RecipeTemperatureCreateOrConnectWithoutRecipeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeTemperatureCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RecipeTemperatureWhereUniqueInputSchema),z.lazy(() => RecipeTemperatureWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RecipeYieldCreateNestedManyWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeYieldCreateNestedManyWithoutRecipeInput> = z.object({
  create: z.union([ z.lazy(() => RecipeYieldCreateWithoutRecipeInputSchema),z.lazy(() => RecipeYieldCreateWithoutRecipeInputSchema).array(),z.lazy(() => RecipeYieldUncheckedCreateWithoutRecipeInputSchema),z.lazy(() => RecipeYieldUncheckedCreateWithoutRecipeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeYieldCreateOrConnectWithoutRecipeInputSchema),z.lazy(() => RecipeYieldCreateOrConnectWithoutRecipeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeYieldCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RecipeYieldWhereUniqueInputSchema),z.lazy(() => RecipeYieldWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RecipeLaborCostCreateNestedManyWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeLaborCostCreateNestedManyWithoutRecipeInput> = z.object({
  create: z.union([ z.lazy(() => RecipeLaborCostCreateWithoutRecipeInputSchema),z.lazy(() => RecipeLaborCostCreateWithoutRecipeInputSchema).array(),z.lazy(() => RecipeLaborCostUncheckedCreateWithoutRecipeInputSchema),z.lazy(() => RecipeLaborCostUncheckedCreateWithoutRecipeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeLaborCostCreateOrConnectWithoutRecipeInputSchema),z.lazy(() => RecipeLaborCostCreateOrConnectWithoutRecipeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeLaborCostCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RecipeLaborCostWhereUniqueInputSchema),z.lazy(() => RecipeLaborCostWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RecipeNutritionCreateNestedOneWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeNutritionCreateNestedOneWithoutRecipeInput> = z.object({
  create: z.union([ z.lazy(() => RecipeNutritionCreateWithoutRecipeInputSchema),z.lazy(() => RecipeNutritionUncheckedCreateWithoutRecipeInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RecipeNutritionCreateOrConnectWithoutRecipeInputSchema).optional(),
  connect: z.lazy(() => RecipeNutritionWhereUniqueInputSchema).optional()
}).strict();

export const RecipeCriticalPointCreateNestedManyWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeCriticalPointCreateNestedManyWithoutRecipeInput> = z.object({
  create: z.union([ z.lazy(() => RecipeCriticalPointCreateWithoutRecipeInputSchema),z.lazy(() => RecipeCriticalPointCreateWithoutRecipeInputSchema).array(),z.lazy(() => RecipeCriticalPointUncheckedCreateWithoutRecipeInputSchema),z.lazy(() => RecipeCriticalPointUncheckedCreateWithoutRecipeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeCriticalPointCreateOrConnectWithoutRecipeInputSchema),z.lazy(() => RecipeCriticalPointCreateOrConnectWithoutRecipeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeCriticalPointCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RecipeCriticalPointWhereUniqueInputSchema),z.lazy(() => RecipeCriticalPointWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RecipeStorageCreateNestedOneWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeStorageCreateNestedOneWithoutRecipeInput> = z.object({
  create: z.union([ z.lazy(() => RecipeStorageCreateWithoutRecipeInputSchema),z.lazy(() => RecipeStorageUncheckedCreateWithoutRecipeInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RecipeStorageCreateOrConnectWithoutRecipeInputSchema).optional(),
  connect: z.lazy(() => RecipeStorageWhereUniqueInputSchema).optional()
}).strict();

export const RecipePhotoCreateNestedManyWithoutRecipeInputSchema: z.ZodType<Prisma.RecipePhotoCreateNestedManyWithoutRecipeInput> = z.object({
  create: z.union([ z.lazy(() => RecipePhotoCreateWithoutRecipeInputSchema),z.lazy(() => RecipePhotoCreateWithoutRecipeInputSchema).array(),z.lazy(() => RecipePhotoUncheckedCreateWithoutRecipeInputSchema),z.lazy(() => RecipePhotoUncheckedCreateWithoutRecipeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipePhotoCreateOrConnectWithoutRecipeInputSchema),z.lazy(() => RecipePhotoCreateOrConnectWithoutRecipeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipePhotoCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RecipePhotoWhereUniqueInputSchema),z.lazy(() => RecipePhotoWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RecipeStatsCreateNestedOneWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeStatsCreateNestedOneWithoutRecipeInput> = z.object({
  create: z.union([ z.lazy(() => RecipeStatsCreateWithoutRecipeInputSchema),z.lazy(() => RecipeStatsUncheckedCreateWithoutRecipeInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RecipeStatsCreateOrConnectWithoutRecipeInputSchema).optional(),
  connect: z.lazy(() => RecipeStatsWhereUniqueInputSchema).optional()
}).strict();

export const RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInput> = z.object({
  create: z.union([ z.lazy(() => RecipeIngredientCreateWithoutRecipeInputSchema),z.lazy(() => RecipeIngredientCreateWithoutRecipeInputSchema).array(),z.lazy(() => RecipeIngredientUncheckedCreateWithoutRecipeInputSchema),z.lazy(() => RecipeIngredientUncheckedCreateWithoutRecipeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeIngredientCreateOrConnectWithoutRecipeInputSchema),z.lazy(() => RecipeIngredientCreateOrConnectWithoutRecipeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeIngredientCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RecipeIngredientWhereUniqueInputSchema),z.lazy(() => RecipeIngredientWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInput> = z.object({
  create: z.union([ z.lazy(() => RecipeInstructionCreateWithoutRecipeInputSchema),z.lazy(() => RecipeInstructionCreateWithoutRecipeInputSchema).array(),z.lazy(() => RecipeInstructionUncheckedCreateWithoutRecipeInputSchema),z.lazy(() => RecipeInstructionUncheckedCreateWithoutRecipeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeInstructionCreateOrConnectWithoutRecipeInputSchema),z.lazy(() => RecipeInstructionCreateOrConnectWithoutRecipeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeInstructionCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RecipeInstructionWhereUniqueInputSchema),z.lazy(() => RecipeInstructionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const MenuItemUncheckedCreateNestedManyWithoutRecipesInputSchema: z.ZodType<Prisma.MenuItemUncheckedCreateNestedManyWithoutRecipesInput> = z.object({
  create: z.union([ z.lazy(() => MenuItemCreateWithoutRecipesInputSchema),z.lazy(() => MenuItemCreateWithoutRecipesInputSchema).array(),z.lazy(() => MenuItemUncheckedCreateWithoutRecipesInputSchema),z.lazy(() => MenuItemUncheckedCreateWithoutRecipesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MenuItemCreateOrConnectWithoutRecipesInputSchema),z.lazy(() => MenuItemCreateOrConnectWithoutRecipesInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MenuItemWhereUniqueInputSchema),z.lazy(() => MenuItemWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FoodCostHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema: z.ZodType<Prisma.FoodCostHistoryUncheckedCreateNestedManyWithoutRecipeInput> = z.object({
  create: z.union([ z.lazy(() => FoodCostHistoryCreateWithoutRecipeInputSchema),z.lazy(() => FoodCostHistoryCreateWithoutRecipeInputSchema).array(),z.lazy(() => FoodCostHistoryUncheckedCreateWithoutRecipeInputSchema),z.lazy(() => FoodCostHistoryUncheckedCreateWithoutRecipeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FoodCostHistoryCreateOrConnectWithoutRecipeInputSchema),z.lazy(() => FoodCostHistoryCreateOrConnectWithoutRecipeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FoodCostHistoryCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FoodCostHistoryWhereUniqueInputSchema),z.lazy(() => FoodCostHistoryWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PrepHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema: z.ZodType<Prisma.PrepHistoryUncheckedCreateNestedManyWithoutRecipeInput> = z.object({
  create: z.union([ z.lazy(() => PrepHistoryCreateWithoutRecipeInputSchema),z.lazy(() => PrepHistoryCreateWithoutRecipeInputSchema).array(),z.lazy(() => PrepHistoryUncheckedCreateWithoutRecipeInputSchema),z.lazy(() => PrepHistoryUncheckedCreateWithoutRecipeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PrepHistoryCreateOrConnectWithoutRecipeInputSchema),z.lazy(() => PrepHistoryCreateOrConnectWithoutRecipeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PrepHistoryCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PrepHistoryWhereUniqueInputSchema),z.lazy(() => PrepHistoryWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PrepBoardUncheckedCreateNestedManyWithoutRecipesInputSchema: z.ZodType<Prisma.PrepBoardUncheckedCreateNestedManyWithoutRecipesInput> = z.object({
  create: z.union([ z.lazy(() => PrepBoardCreateWithoutRecipesInputSchema),z.lazy(() => PrepBoardCreateWithoutRecipesInputSchema).array(),z.lazy(() => PrepBoardUncheckedCreateWithoutRecipesInputSchema),z.lazy(() => PrepBoardUncheckedCreateWithoutRecipesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PrepBoardCreateOrConnectWithoutRecipesInputSchema),z.lazy(() => PrepBoardCreateOrConnectWithoutRecipesInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PrepBoardWhereUniqueInputSchema),z.lazy(() => PrepBoardWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PrepItemUncheckedCreateNestedManyWithoutRecipeInputSchema: z.ZodType<Prisma.PrepItemUncheckedCreateNestedManyWithoutRecipeInput> = z.object({
  create: z.union([ z.lazy(() => PrepItemCreateWithoutRecipeInputSchema),z.lazy(() => PrepItemCreateWithoutRecipeInputSchema).array(),z.lazy(() => PrepItemUncheckedCreateWithoutRecipeInputSchema),z.lazy(() => PrepItemUncheckedCreateWithoutRecipeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PrepItemCreateOrConnectWithoutRecipeInputSchema),z.lazy(() => PrepItemCreateOrConnectWithoutRecipeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PrepItemCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PrepItemWhereUniqueInputSchema),z.lazy(() => PrepItemWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const MenuItemRecipeUncheckedCreateNestedManyWithoutRecipeInputSchema: z.ZodType<Prisma.MenuItemRecipeUncheckedCreateNestedManyWithoutRecipeInput> = z.object({
  create: z.union([ z.lazy(() => MenuItemRecipeCreateWithoutRecipeInputSchema),z.lazy(() => MenuItemRecipeCreateWithoutRecipeInputSchema).array(),z.lazy(() => MenuItemRecipeUncheckedCreateWithoutRecipeInputSchema),z.lazy(() => MenuItemRecipeUncheckedCreateWithoutRecipeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MenuItemRecipeCreateOrConnectWithoutRecipeInputSchema),z.lazy(() => MenuItemRecipeCreateOrConnectWithoutRecipeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MenuItemRecipeCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => MenuItemRecipeWhereUniqueInputSchema),z.lazy(() => MenuItemRecipeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProductionPlanItemUncheckedCreateNestedManyWithoutRecipeInputSchema: z.ZodType<Prisma.ProductionPlanItemUncheckedCreateNestedManyWithoutRecipeInput> = z.object({
  create: z.union([ z.lazy(() => ProductionPlanItemCreateWithoutRecipeInputSchema),z.lazy(() => ProductionPlanItemCreateWithoutRecipeInputSchema).array(),z.lazy(() => ProductionPlanItemUncheckedCreateWithoutRecipeInputSchema),z.lazy(() => ProductionPlanItemUncheckedCreateWithoutRecipeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductionPlanItemCreateOrConnectWithoutRecipeInputSchema),z.lazy(() => ProductionPlanItemCreateOrConnectWithoutRecipeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductionPlanItemCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProductionPlanItemWhereUniqueInputSchema),z.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const InventoryWithdrawalUncheckedCreateNestedManyWithoutRecipeInputSchema: z.ZodType<Prisma.InventoryWithdrawalUncheckedCreateNestedManyWithoutRecipeInput> = z.object({
  create: z.union([ z.lazy(() => InventoryWithdrawalCreateWithoutRecipeInputSchema),z.lazy(() => InventoryWithdrawalCreateWithoutRecipeInputSchema).array(),z.lazy(() => InventoryWithdrawalUncheckedCreateWithoutRecipeInputSchema),z.lazy(() => InventoryWithdrawalUncheckedCreateWithoutRecipeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InventoryWithdrawalCreateOrConnectWithoutRecipeInputSchema),z.lazy(() => InventoryWithdrawalCreateOrConnectWithoutRecipeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InventoryWithdrawalCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema),z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RecipeTagUncheckedCreateNestedManyWithoutRecipesInputSchema: z.ZodType<Prisma.RecipeTagUncheckedCreateNestedManyWithoutRecipesInput> = z.object({
  create: z.union([ z.lazy(() => RecipeTagCreateWithoutRecipesInputSchema),z.lazy(() => RecipeTagCreateWithoutRecipesInputSchema).array(),z.lazy(() => RecipeTagUncheckedCreateWithoutRecipesInputSchema),z.lazy(() => RecipeTagUncheckedCreateWithoutRecipesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeTagCreateOrConnectWithoutRecipesInputSchema),z.lazy(() => RecipeTagCreateOrConnectWithoutRecipesInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RecipeTagWhereUniqueInputSchema),z.lazy(() => RecipeTagWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RecipeVersionUncheckedCreateNestedManyWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeVersionUncheckedCreateNestedManyWithoutRecipeInput> = z.object({
  create: z.union([ z.lazy(() => RecipeVersionCreateWithoutRecipeInputSchema),z.lazy(() => RecipeVersionCreateWithoutRecipeInputSchema).array(),z.lazy(() => RecipeVersionUncheckedCreateWithoutRecipeInputSchema),z.lazy(() => RecipeVersionUncheckedCreateWithoutRecipeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeVersionCreateOrConnectWithoutRecipeInputSchema),z.lazy(() => RecipeVersionCreateOrConnectWithoutRecipeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeVersionCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RecipeVersionWhereUniqueInputSchema),z.lazy(() => RecipeVersionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInput> = z.object({
  create: z.union([ z.lazy(() => RecipeEquipmentCreateWithoutRecipeInputSchema),z.lazy(() => RecipeEquipmentCreateWithoutRecipeInputSchema).array(),z.lazy(() => RecipeEquipmentUncheckedCreateWithoutRecipeInputSchema),z.lazy(() => RecipeEquipmentUncheckedCreateWithoutRecipeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeEquipmentCreateOrConnectWithoutRecipeInputSchema),z.lazy(() => RecipeEquipmentCreateOrConnectWithoutRecipeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeEquipmentCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RecipeEquipmentWhereUniqueInputSchema),z.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const DietaryRestrictionUncheckedCreateNestedManyWithoutRecipesInputSchema: z.ZodType<Prisma.DietaryRestrictionUncheckedCreateNestedManyWithoutRecipesInput> = z.object({
  create: z.union([ z.lazy(() => DietaryRestrictionCreateWithoutRecipesInputSchema),z.lazy(() => DietaryRestrictionCreateWithoutRecipesInputSchema).array(),z.lazy(() => DietaryRestrictionUncheckedCreateWithoutRecipesInputSchema),z.lazy(() => DietaryRestrictionUncheckedCreateWithoutRecipesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DietaryRestrictionCreateOrConnectWithoutRecipesInputSchema),z.lazy(() => DietaryRestrictionCreateOrConnectWithoutRecipesInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => DietaryRestrictionWhereUniqueInputSchema),z.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RecipeTemperatureUncheckedCreateNestedManyWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeTemperatureUncheckedCreateNestedManyWithoutRecipeInput> = z.object({
  create: z.union([ z.lazy(() => RecipeTemperatureCreateWithoutRecipeInputSchema),z.lazy(() => RecipeTemperatureCreateWithoutRecipeInputSchema).array(),z.lazy(() => RecipeTemperatureUncheckedCreateWithoutRecipeInputSchema),z.lazy(() => RecipeTemperatureUncheckedCreateWithoutRecipeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeTemperatureCreateOrConnectWithoutRecipeInputSchema),z.lazy(() => RecipeTemperatureCreateOrConnectWithoutRecipeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeTemperatureCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RecipeTemperatureWhereUniqueInputSchema),z.lazy(() => RecipeTemperatureWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RecipeYieldUncheckedCreateNestedManyWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeYieldUncheckedCreateNestedManyWithoutRecipeInput> = z.object({
  create: z.union([ z.lazy(() => RecipeYieldCreateWithoutRecipeInputSchema),z.lazy(() => RecipeYieldCreateWithoutRecipeInputSchema).array(),z.lazy(() => RecipeYieldUncheckedCreateWithoutRecipeInputSchema),z.lazy(() => RecipeYieldUncheckedCreateWithoutRecipeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeYieldCreateOrConnectWithoutRecipeInputSchema),z.lazy(() => RecipeYieldCreateOrConnectWithoutRecipeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeYieldCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RecipeYieldWhereUniqueInputSchema),z.lazy(() => RecipeYieldWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RecipeLaborCostUncheckedCreateNestedManyWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeLaborCostUncheckedCreateNestedManyWithoutRecipeInput> = z.object({
  create: z.union([ z.lazy(() => RecipeLaborCostCreateWithoutRecipeInputSchema),z.lazy(() => RecipeLaborCostCreateWithoutRecipeInputSchema).array(),z.lazy(() => RecipeLaborCostUncheckedCreateWithoutRecipeInputSchema),z.lazy(() => RecipeLaborCostUncheckedCreateWithoutRecipeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeLaborCostCreateOrConnectWithoutRecipeInputSchema),z.lazy(() => RecipeLaborCostCreateOrConnectWithoutRecipeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeLaborCostCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RecipeLaborCostWhereUniqueInputSchema),z.lazy(() => RecipeLaborCostWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RecipeNutritionUncheckedCreateNestedOneWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeNutritionUncheckedCreateNestedOneWithoutRecipeInput> = z.object({
  create: z.union([ z.lazy(() => RecipeNutritionCreateWithoutRecipeInputSchema),z.lazy(() => RecipeNutritionUncheckedCreateWithoutRecipeInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RecipeNutritionCreateOrConnectWithoutRecipeInputSchema).optional(),
  connect: z.lazy(() => RecipeNutritionWhereUniqueInputSchema).optional()
}).strict();

export const RecipeCriticalPointUncheckedCreateNestedManyWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeCriticalPointUncheckedCreateNestedManyWithoutRecipeInput> = z.object({
  create: z.union([ z.lazy(() => RecipeCriticalPointCreateWithoutRecipeInputSchema),z.lazy(() => RecipeCriticalPointCreateWithoutRecipeInputSchema).array(),z.lazy(() => RecipeCriticalPointUncheckedCreateWithoutRecipeInputSchema),z.lazy(() => RecipeCriticalPointUncheckedCreateWithoutRecipeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeCriticalPointCreateOrConnectWithoutRecipeInputSchema),z.lazy(() => RecipeCriticalPointCreateOrConnectWithoutRecipeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeCriticalPointCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RecipeCriticalPointWhereUniqueInputSchema),z.lazy(() => RecipeCriticalPointWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RecipeStorageUncheckedCreateNestedOneWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeStorageUncheckedCreateNestedOneWithoutRecipeInput> = z.object({
  create: z.union([ z.lazy(() => RecipeStorageCreateWithoutRecipeInputSchema),z.lazy(() => RecipeStorageUncheckedCreateWithoutRecipeInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RecipeStorageCreateOrConnectWithoutRecipeInputSchema).optional(),
  connect: z.lazy(() => RecipeStorageWhereUniqueInputSchema).optional()
}).strict();

export const RecipePhotoUncheckedCreateNestedManyWithoutRecipeInputSchema: z.ZodType<Prisma.RecipePhotoUncheckedCreateNestedManyWithoutRecipeInput> = z.object({
  create: z.union([ z.lazy(() => RecipePhotoCreateWithoutRecipeInputSchema),z.lazy(() => RecipePhotoCreateWithoutRecipeInputSchema).array(),z.lazy(() => RecipePhotoUncheckedCreateWithoutRecipeInputSchema),z.lazy(() => RecipePhotoUncheckedCreateWithoutRecipeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipePhotoCreateOrConnectWithoutRecipeInputSchema),z.lazy(() => RecipePhotoCreateOrConnectWithoutRecipeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipePhotoCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RecipePhotoWhereUniqueInputSchema),z.lazy(() => RecipePhotoWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RecipeStatsUncheckedCreateNestedOneWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeStatsUncheckedCreateNestedOneWithoutRecipeInput> = z.object({
  create: z.union([ z.lazy(() => RecipeStatsCreateWithoutRecipeInputSchema),z.lazy(() => RecipeStatsUncheckedCreateWithoutRecipeInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RecipeStatsCreateOrConnectWithoutRecipeInputSchema).optional(),
  connect: z.lazy(() => RecipeStatsWhereUniqueInputSchema).optional()
}).strict();

export const RecipeUpdateimageUrlsInputSchema: z.ZodType<Prisma.RecipeUpdateimageUrlsInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const EnumSkillLevelFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumSkillLevelFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => SkillLevelSchema).optional()
}).strict();

export const EnumCategoryFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumCategoryFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => CategorySchema).optional()
}).strict();

export const RestaurantUpdateOneRequiredWithoutRecipesNestedInputSchema: z.ZodType<Prisma.RestaurantUpdateOneRequiredWithoutRecipesNestedInput> = z.object({
  create: z.union([ z.lazy(() => RestaurantCreateWithoutRecipesInputSchema),z.lazy(() => RestaurantUncheckedCreateWithoutRecipesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RestaurantCreateOrConnectWithoutRecipesInputSchema).optional(),
  upsert: z.lazy(() => RestaurantUpsertWithoutRecipesInputSchema).optional(),
  connect: z.lazy(() => RestaurantWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RestaurantUpdateToOneWithWhereWithoutRecipesInputSchema),z.lazy(() => RestaurantUpdateWithoutRecipesInputSchema),z.lazy(() => RestaurantUncheckedUpdateWithoutRecipesInputSchema) ]).optional(),
}).strict();

export const CookBookUpdateOneRequiredWithoutRecipesNestedInputSchema: z.ZodType<Prisma.CookBookUpdateOneRequiredWithoutRecipesNestedInput> = z.object({
  create: z.union([ z.lazy(() => CookBookCreateWithoutRecipesInputSchema),z.lazy(() => CookBookUncheckedCreateWithoutRecipesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CookBookCreateOrConnectWithoutRecipesInputSchema).optional(),
  upsert: z.lazy(() => CookBookUpsertWithoutRecipesInputSchema).optional(),
  connect: z.lazy(() => CookBookWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => CookBookUpdateToOneWithWhereWithoutRecipesInputSchema),z.lazy(() => CookBookUpdateWithoutRecipesInputSchema),z.lazy(() => CookBookUncheckedUpdateWithoutRecipesInputSchema) ]).optional(),
}).strict();

export const RecipeIngredientUpdateManyWithoutRecipeNestedInputSchema: z.ZodType<Prisma.RecipeIngredientUpdateManyWithoutRecipeNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeIngredientCreateWithoutRecipeInputSchema),z.lazy(() => RecipeIngredientCreateWithoutRecipeInputSchema).array(),z.lazy(() => RecipeIngredientUncheckedCreateWithoutRecipeInputSchema),z.lazy(() => RecipeIngredientUncheckedCreateWithoutRecipeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeIngredientCreateOrConnectWithoutRecipeInputSchema),z.lazy(() => RecipeIngredientCreateOrConnectWithoutRecipeInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RecipeIngredientUpsertWithWhereUniqueWithoutRecipeInputSchema),z.lazy(() => RecipeIngredientUpsertWithWhereUniqueWithoutRecipeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeIngredientCreateManyRecipeInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RecipeIngredientWhereUniqueInputSchema),z.lazy(() => RecipeIngredientWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RecipeIngredientWhereUniqueInputSchema),z.lazy(() => RecipeIngredientWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RecipeIngredientWhereUniqueInputSchema),z.lazy(() => RecipeIngredientWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RecipeIngredientWhereUniqueInputSchema),z.lazy(() => RecipeIngredientWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RecipeIngredientUpdateWithWhereUniqueWithoutRecipeInputSchema),z.lazy(() => RecipeIngredientUpdateWithWhereUniqueWithoutRecipeInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RecipeIngredientUpdateManyWithWhereWithoutRecipeInputSchema),z.lazy(() => RecipeIngredientUpdateManyWithWhereWithoutRecipeInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RecipeIngredientScalarWhereInputSchema),z.lazy(() => RecipeIngredientScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RecipeInstructionUpdateManyWithoutRecipeNestedInputSchema: z.ZodType<Prisma.RecipeInstructionUpdateManyWithoutRecipeNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeInstructionCreateWithoutRecipeInputSchema),z.lazy(() => RecipeInstructionCreateWithoutRecipeInputSchema).array(),z.lazy(() => RecipeInstructionUncheckedCreateWithoutRecipeInputSchema),z.lazy(() => RecipeInstructionUncheckedCreateWithoutRecipeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeInstructionCreateOrConnectWithoutRecipeInputSchema),z.lazy(() => RecipeInstructionCreateOrConnectWithoutRecipeInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RecipeInstructionUpsertWithWhereUniqueWithoutRecipeInputSchema),z.lazy(() => RecipeInstructionUpsertWithWhereUniqueWithoutRecipeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeInstructionCreateManyRecipeInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RecipeInstructionWhereUniqueInputSchema),z.lazy(() => RecipeInstructionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RecipeInstructionWhereUniqueInputSchema),z.lazy(() => RecipeInstructionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RecipeInstructionWhereUniqueInputSchema),z.lazy(() => RecipeInstructionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RecipeInstructionWhereUniqueInputSchema),z.lazy(() => RecipeInstructionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RecipeInstructionUpdateWithWhereUniqueWithoutRecipeInputSchema),z.lazy(() => RecipeInstructionUpdateWithWhereUniqueWithoutRecipeInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RecipeInstructionUpdateManyWithWhereWithoutRecipeInputSchema),z.lazy(() => RecipeInstructionUpdateManyWithWhereWithoutRecipeInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RecipeInstructionScalarWhereInputSchema),z.lazy(() => RecipeInstructionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const MenuItemUpdateManyWithoutRecipesNestedInputSchema: z.ZodType<Prisma.MenuItemUpdateManyWithoutRecipesNestedInput> = z.object({
  create: z.union([ z.lazy(() => MenuItemCreateWithoutRecipesInputSchema),z.lazy(() => MenuItemCreateWithoutRecipesInputSchema).array(),z.lazy(() => MenuItemUncheckedCreateWithoutRecipesInputSchema),z.lazy(() => MenuItemUncheckedCreateWithoutRecipesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MenuItemCreateOrConnectWithoutRecipesInputSchema),z.lazy(() => MenuItemCreateOrConnectWithoutRecipesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MenuItemUpsertWithWhereUniqueWithoutRecipesInputSchema),z.lazy(() => MenuItemUpsertWithWhereUniqueWithoutRecipesInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => MenuItemWhereUniqueInputSchema),z.lazy(() => MenuItemWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MenuItemWhereUniqueInputSchema),z.lazy(() => MenuItemWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MenuItemWhereUniqueInputSchema),z.lazy(() => MenuItemWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MenuItemWhereUniqueInputSchema),z.lazy(() => MenuItemWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MenuItemUpdateWithWhereUniqueWithoutRecipesInputSchema),z.lazy(() => MenuItemUpdateWithWhereUniqueWithoutRecipesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MenuItemUpdateManyWithWhereWithoutRecipesInputSchema),z.lazy(() => MenuItemUpdateManyWithWhereWithoutRecipesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MenuItemScalarWhereInputSchema),z.lazy(() => MenuItemScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FoodCostHistoryUpdateManyWithoutRecipeNestedInputSchema: z.ZodType<Prisma.FoodCostHistoryUpdateManyWithoutRecipeNestedInput> = z.object({
  create: z.union([ z.lazy(() => FoodCostHistoryCreateWithoutRecipeInputSchema),z.lazy(() => FoodCostHistoryCreateWithoutRecipeInputSchema).array(),z.lazy(() => FoodCostHistoryUncheckedCreateWithoutRecipeInputSchema),z.lazy(() => FoodCostHistoryUncheckedCreateWithoutRecipeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FoodCostHistoryCreateOrConnectWithoutRecipeInputSchema),z.lazy(() => FoodCostHistoryCreateOrConnectWithoutRecipeInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FoodCostHistoryUpsertWithWhereUniqueWithoutRecipeInputSchema),z.lazy(() => FoodCostHistoryUpsertWithWhereUniqueWithoutRecipeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FoodCostHistoryCreateManyRecipeInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FoodCostHistoryWhereUniqueInputSchema),z.lazy(() => FoodCostHistoryWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FoodCostHistoryWhereUniqueInputSchema),z.lazy(() => FoodCostHistoryWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FoodCostHistoryWhereUniqueInputSchema),z.lazy(() => FoodCostHistoryWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FoodCostHistoryWhereUniqueInputSchema),z.lazy(() => FoodCostHistoryWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FoodCostHistoryUpdateWithWhereUniqueWithoutRecipeInputSchema),z.lazy(() => FoodCostHistoryUpdateWithWhereUniqueWithoutRecipeInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FoodCostHistoryUpdateManyWithWhereWithoutRecipeInputSchema),z.lazy(() => FoodCostHistoryUpdateManyWithWhereWithoutRecipeInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FoodCostHistoryScalarWhereInputSchema),z.lazy(() => FoodCostHistoryScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PrepHistoryUpdateManyWithoutRecipeNestedInputSchema: z.ZodType<Prisma.PrepHistoryUpdateManyWithoutRecipeNestedInput> = z.object({
  create: z.union([ z.lazy(() => PrepHistoryCreateWithoutRecipeInputSchema),z.lazy(() => PrepHistoryCreateWithoutRecipeInputSchema).array(),z.lazy(() => PrepHistoryUncheckedCreateWithoutRecipeInputSchema),z.lazy(() => PrepHistoryUncheckedCreateWithoutRecipeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PrepHistoryCreateOrConnectWithoutRecipeInputSchema),z.lazy(() => PrepHistoryCreateOrConnectWithoutRecipeInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PrepHistoryUpsertWithWhereUniqueWithoutRecipeInputSchema),z.lazy(() => PrepHistoryUpsertWithWhereUniqueWithoutRecipeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PrepHistoryCreateManyRecipeInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PrepHistoryWhereUniqueInputSchema),z.lazy(() => PrepHistoryWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PrepHistoryWhereUniqueInputSchema),z.lazy(() => PrepHistoryWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PrepHistoryWhereUniqueInputSchema),z.lazy(() => PrepHistoryWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PrepHistoryWhereUniqueInputSchema),z.lazy(() => PrepHistoryWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PrepHistoryUpdateWithWhereUniqueWithoutRecipeInputSchema),z.lazy(() => PrepHistoryUpdateWithWhereUniqueWithoutRecipeInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PrepHistoryUpdateManyWithWhereWithoutRecipeInputSchema),z.lazy(() => PrepHistoryUpdateManyWithWhereWithoutRecipeInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PrepHistoryScalarWhereInputSchema),z.lazy(() => PrepHistoryScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PrepBoardUpdateManyWithoutRecipesNestedInputSchema: z.ZodType<Prisma.PrepBoardUpdateManyWithoutRecipesNestedInput> = z.object({
  create: z.union([ z.lazy(() => PrepBoardCreateWithoutRecipesInputSchema),z.lazy(() => PrepBoardCreateWithoutRecipesInputSchema).array(),z.lazy(() => PrepBoardUncheckedCreateWithoutRecipesInputSchema),z.lazy(() => PrepBoardUncheckedCreateWithoutRecipesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PrepBoardCreateOrConnectWithoutRecipesInputSchema),z.lazy(() => PrepBoardCreateOrConnectWithoutRecipesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PrepBoardUpsertWithWhereUniqueWithoutRecipesInputSchema),z.lazy(() => PrepBoardUpsertWithWhereUniqueWithoutRecipesInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => PrepBoardWhereUniqueInputSchema),z.lazy(() => PrepBoardWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PrepBoardWhereUniqueInputSchema),z.lazy(() => PrepBoardWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PrepBoardWhereUniqueInputSchema),z.lazy(() => PrepBoardWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PrepBoardWhereUniqueInputSchema),z.lazy(() => PrepBoardWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PrepBoardUpdateWithWhereUniqueWithoutRecipesInputSchema),z.lazy(() => PrepBoardUpdateWithWhereUniqueWithoutRecipesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PrepBoardUpdateManyWithWhereWithoutRecipesInputSchema),z.lazy(() => PrepBoardUpdateManyWithWhereWithoutRecipesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PrepBoardScalarWhereInputSchema),z.lazy(() => PrepBoardScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PrepItemUpdateManyWithoutRecipeNestedInputSchema: z.ZodType<Prisma.PrepItemUpdateManyWithoutRecipeNestedInput> = z.object({
  create: z.union([ z.lazy(() => PrepItemCreateWithoutRecipeInputSchema),z.lazy(() => PrepItemCreateWithoutRecipeInputSchema).array(),z.lazy(() => PrepItemUncheckedCreateWithoutRecipeInputSchema),z.lazy(() => PrepItemUncheckedCreateWithoutRecipeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PrepItemCreateOrConnectWithoutRecipeInputSchema),z.lazy(() => PrepItemCreateOrConnectWithoutRecipeInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PrepItemUpsertWithWhereUniqueWithoutRecipeInputSchema),z.lazy(() => PrepItemUpsertWithWhereUniqueWithoutRecipeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PrepItemCreateManyRecipeInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PrepItemWhereUniqueInputSchema),z.lazy(() => PrepItemWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PrepItemWhereUniqueInputSchema),z.lazy(() => PrepItemWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PrepItemWhereUniqueInputSchema),z.lazy(() => PrepItemWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PrepItemWhereUniqueInputSchema),z.lazy(() => PrepItemWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PrepItemUpdateWithWhereUniqueWithoutRecipeInputSchema),z.lazy(() => PrepItemUpdateWithWhereUniqueWithoutRecipeInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PrepItemUpdateManyWithWhereWithoutRecipeInputSchema),z.lazy(() => PrepItemUpdateManyWithWhereWithoutRecipeInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PrepItemScalarWhereInputSchema),z.lazy(() => PrepItemScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const MenuItemRecipeUpdateManyWithoutRecipeNestedInputSchema: z.ZodType<Prisma.MenuItemRecipeUpdateManyWithoutRecipeNestedInput> = z.object({
  create: z.union([ z.lazy(() => MenuItemRecipeCreateWithoutRecipeInputSchema),z.lazy(() => MenuItemRecipeCreateWithoutRecipeInputSchema).array(),z.lazy(() => MenuItemRecipeUncheckedCreateWithoutRecipeInputSchema),z.lazy(() => MenuItemRecipeUncheckedCreateWithoutRecipeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MenuItemRecipeCreateOrConnectWithoutRecipeInputSchema),z.lazy(() => MenuItemRecipeCreateOrConnectWithoutRecipeInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MenuItemRecipeUpsertWithWhereUniqueWithoutRecipeInputSchema),z.lazy(() => MenuItemRecipeUpsertWithWhereUniqueWithoutRecipeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MenuItemRecipeCreateManyRecipeInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => MenuItemRecipeWhereUniqueInputSchema),z.lazy(() => MenuItemRecipeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MenuItemRecipeWhereUniqueInputSchema),z.lazy(() => MenuItemRecipeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MenuItemRecipeWhereUniqueInputSchema),z.lazy(() => MenuItemRecipeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MenuItemRecipeWhereUniqueInputSchema),z.lazy(() => MenuItemRecipeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MenuItemRecipeUpdateWithWhereUniqueWithoutRecipeInputSchema),z.lazy(() => MenuItemRecipeUpdateWithWhereUniqueWithoutRecipeInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MenuItemRecipeUpdateManyWithWhereWithoutRecipeInputSchema),z.lazy(() => MenuItemRecipeUpdateManyWithWhereWithoutRecipeInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MenuItemRecipeScalarWhereInputSchema),z.lazy(() => MenuItemRecipeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProductionPlanItemUpdateManyWithoutRecipeNestedInputSchema: z.ZodType<Prisma.ProductionPlanItemUpdateManyWithoutRecipeNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProductionPlanItemCreateWithoutRecipeInputSchema),z.lazy(() => ProductionPlanItemCreateWithoutRecipeInputSchema).array(),z.lazy(() => ProductionPlanItemUncheckedCreateWithoutRecipeInputSchema),z.lazy(() => ProductionPlanItemUncheckedCreateWithoutRecipeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductionPlanItemCreateOrConnectWithoutRecipeInputSchema),z.lazy(() => ProductionPlanItemCreateOrConnectWithoutRecipeInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProductionPlanItemUpsertWithWhereUniqueWithoutRecipeInputSchema),z.lazy(() => ProductionPlanItemUpsertWithWhereUniqueWithoutRecipeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductionPlanItemCreateManyRecipeInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProductionPlanItemWhereUniqueInputSchema),z.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProductionPlanItemWhereUniqueInputSchema),z.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProductionPlanItemWhereUniqueInputSchema),z.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProductionPlanItemWhereUniqueInputSchema),z.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProductionPlanItemUpdateWithWhereUniqueWithoutRecipeInputSchema),z.lazy(() => ProductionPlanItemUpdateWithWhereUniqueWithoutRecipeInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProductionPlanItemUpdateManyWithWhereWithoutRecipeInputSchema),z.lazy(() => ProductionPlanItemUpdateManyWithWhereWithoutRecipeInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProductionPlanItemScalarWhereInputSchema),z.lazy(() => ProductionPlanItemScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const InventoryWithdrawalUpdateManyWithoutRecipeNestedInputSchema: z.ZodType<Prisma.InventoryWithdrawalUpdateManyWithoutRecipeNestedInput> = z.object({
  create: z.union([ z.lazy(() => InventoryWithdrawalCreateWithoutRecipeInputSchema),z.lazy(() => InventoryWithdrawalCreateWithoutRecipeInputSchema).array(),z.lazy(() => InventoryWithdrawalUncheckedCreateWithoutRecipeInputSchema),z.lazy(() => InventoryWithdrawalUncheckedCreateWithoutRecipeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InventoryWithdrawalCreateOrConnectWithoutRecipeInputSchema),z.lazy(() => InventoryWithdrawalCreateOrConnectWithoutRecipeInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => InventoryWithdrawalUpsertWithWhereUniqueWithoutRecipeInputSchema),z.lazy(() => InventoryWithdrawalUpsertWithWhereUniqueWithoutRecipeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InventoryWithdrawalCreateManyRecipeInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema),z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema),z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema),z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema),z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => InventoryWithdrawalUpdateWithWhereUniqueWithoutRecipeInputSchema),z.lazy(() => InventoryWithdrawalUpdateWithWhereUniqueWithoutRecipeInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => InventoryWithdrawalUpdateManyWithWhereWithoutRecipeInputSchema),z.lazy(() => InventoryWithdrawalUpdateManyWithWhereWithoutRecipeInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => InventoryWithdrawalScalarWhereInputSchema),z.lazy(() => InventoryWithdrawalScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RecipeTagUpdateManyWithoutRecipesNestedInputSchema: z.ZodType<Prisma.RecipeTagUpdateManyWithoutRecipesNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeTagCreateWithoutRecipesInputSchema),z.lazy(() => RecipeTagCreateWithoutRecipesInputSchema).array(),z.lazy(() => RecipeTagUncheckedCreateWithoutRecipesInputSchema),z.lazy(() => RecipeTagUncheckedCreateWithoutRecipesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeTagCreateOrConnectWithoutRecipesInputSchema),z.lazy(() => RecipeTagCreateOrConnectWithoutRecipesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RecipeTagUpsertWithWhereUniqueWithoutRecipesInputSchema),z.lazy(() => RecipeTagUpsertWithWhereUniqueWithoutRecipesInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => RecipeTagWhereUniqueInputSchema),z.lazy(() => RecipeTagWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RecipeTagWhereUniqueInputSchema),z.lazy(() => RecipeTagWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RecipeTagWhereUniqueInputSchema),z.lazy(() => RecipeTagWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RecipeTagWhereUniqueInputSchema),z.lazy(() => RecipeTagWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RecipeTagUpdateWithWhereUniqueWithoutRecipesInputSchema),z.lazy(() => RecipeTagUpdateWithWhereUniqueWithoutRecipesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RecipeTagUpdateManyWithWhereWithoutRecipesInputSchema),z.lazy(() => RecipeTagUpdateManyWithWhereWithoutRecipesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RecipeTagScalarWhereInputSchema),z.lazy(() => RecipeTagScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RecipeVersionUpdateManyWithoutRecipeNestedInputSchema: z.ZodType<Prisma.RecipeVersionUpdateManyWithoutRecipeNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeVersionCreateWithoutRecipeInputSchema),z.lazy(() => RecipeVersionCreateWithoutRecipeInputSchema).array(),z.lazy(() => RecipeVersionUncheckedCreateWithoutRecipeInputSchema),z.lazy(() => RecipeVersionUncheckedCreateWithoutRecipeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeVersionCreateOrConnectWithoutRecipeInputSchema),z.lazy(() => RecipeVersionCreateOrConnectWithoutRecipeInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RecipeVersionUpsertWithWhereUniqueWithoutRecipeInputSchema),z.lazy(() => RecipeVersionUpsertWithWhereUniqueWithoutRecipeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeVersionCreateManyRecipeInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RecipeVersionWhereUniqueInputSchema),z.lazy(() => RecipeVersionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RecipeVersionWhereUniqueInputSchema),z.lazy(() => RecipeVersionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RecipeVersionWhereUniqueInputSchema),z.lazy(() => RecipeVersionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RecipeVersionWhereUniqueInputSchema),z.lazy(() => RecipeVersionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RecipeVersionUpdateWithWhereUniqueWithoutRecipeInputSchema),z.lazy(() => RecipeVersionUpdateWithWhereUniqueWithoutRecipeInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RecipeVersionUpdateManyWithWhereWithoutRecipeInputSchema),z.lazy(() => RecipeVersionUpdateManyWithWhereWithoutRecipeInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RecipeVersionScalarWhereInputSchema),z.lazy(() => RecipeVersionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RecipeEquipmentUpdateManyWithoutRecipeNestedInputSchema: z.ZodType<Prisma.RecipeEquipmentUpdateManyWithoutRecipeNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeEquipmentCreateWithoutRecipeInputSchema),z.lazy(() => RecipeEquipmentCreateWithoutRecipeInputSchema).array(),z.lazy(() => RecipeEquipmentUncheckedCreateWithoutRecipeInputSchema),z.lazy(() => RecipeEquipmentUncheckedCreateWithoutRecipeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeEquipmentCreateOrConnectWithoutRecipeInputSchema),z.lazy(() => RecipeEquipmentCreateOrConnectWithoutRecipeInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RecipeEquipmentUpsertWithWhereUniqueWithoutRecipeInputSchema),z.lazy(() => RecipeEquipmentUpsertWithWhereUniqueWithoutRecipeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeEquipmentCreateManyRecipeInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RecipeEquipmentWhereUniqueInputSchema),z.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RecipeEquipmentWhereUniqueInputSchema),z.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RecipeEquipmentWhereUniqueInputSchema),z.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RecipeEquipmentWhereUniqueInputSchema),z.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RecipeEquipmentUpdateWithWhereUniqueWithoutRecipeInputSchema),z.lazy(() => RecipeEquipmentUpdateWithWhereUniqueWithoutRecipeInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RecipeEquipmentUpdateManyWithWhereWithoutRecipeInputSchema),z.lazy(() => RecipeEquipmentUpdateManyWithWhereWithoutRecipeInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RecipeEquipmentScalarWhereInputSchema),z.lazy(() => RecipeEquipmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const DietaryRestrictionUpdateManyWithoutRecipesNestedInputSchema: z.ZodType<Prisma.DietaryRestrictionUpdateManyWithoutRecipesNestedInput> = z.object({
  create: z.union([ z.lazy(() => DietaryRestrictionCreateWithoutRecipesInputSchema),z.lazy(() => DietaryRestrictionCreateWithoutRecipesInputSchema).array(),z.lazy(() => DietaryRestrictionUncheckedCreateWithoutRecipesInputSchema),z.lazy(() => DietaryRestrictionUncheckedCreateWithoutRecipesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DietaryRestrictionCreateOrConnectWithoutRecipesInputSchema),z.lazy(() => DietaryRestrictionCreateOrConnectWithoutRecipesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => DietaryRestrictionUpsertWithWhereUniqueWithoutRecipesInputSchema),z.lazy(() => DietaryRestrictionUpsertWithWhereUniqueWithoutRecipesInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => DietaryRestrictionWhereUniqueInputSchema),z.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => DietaryRestrictionWhereUniqueInputSchema),z.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => DietaryRestrictionWhereUniqueInputSchema),z.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => DietaryRestrictionWhereUniqueInputSchema),z.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => DietaryRestrictionUpdateWithWhereUniqueWithoutRecipesInputSchema),z.lazy(() => DietaryRestrictionUpdateWithWhereUniqueWithoutRecipesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => DietaryRestrictionUpdateManyWithWhereWithoutRecipesInputSchema),z.lazy(() => DietaryRestrictionUpdateManyWithWhereWithoutRecipesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => DietaryRestrictionScalarWhereInputSchema),z.lazy(() => DietaryRestrictionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RecipeTemperatureUpdateManyWithoutRecipeNestedInputSchema: z.ZodType<Prisma.RecipeTemperatureUpdateManyWithoutRecipeNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeTemperatureCreateWithoutRecipeInputSchema),z.lazy(() => RecipeTemperatureCreateWithoutRecipeInputSchema).array(),z.lazy(() => RecipeTemperatureUncheckedCreateWithoutRecipeInputSchema),z.lazy(() => RecipeTemperatureUncheckedCreateWithoutRecipeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeTemperatureCreateOrConnectWithoutRecipeInputSchema),z.lazy(() => RecipeTemperatureCreateOrConnectWithoutRecipeInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RecipeTemperatureUpsertWithWhereUniqueWithoutRecipeInputSchema),z.lazy(() => RecipeTemperatureUpsertWithWhereUniqueWithoutRecipeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeTemperatureCreateManyRecipeInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RecipeTemperatureWhereUniqueInputSchema),z.lazy(() => RecipeTemperatureWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RecipeTemperatureWhereUniqueInputSchema),z.lazy(() => RecipeTemperatureWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RecipeTemperatureWhereUniqueInputSchema),z.lazy(() => RecipeTemperatureWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RecipeTemperatureWhereUniqueInputSchema),z.lazy(() => RecipeTemperatureWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RecipeTemperatureUpdateWithWhereUniqueWithoutRecipeInputSchema),z.lazy(() => RecipeTemperatureUpdateWithWhereUniqueWithoutRecipeInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RecipeTemperatureUpdateManyWithWhereWithoutRecipeInputSchema),z.lazy(() => RecipeTemperatureUpdateManyWithWhereWithoutRecipeInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RecipeTemperatureScalarWhereInputSchema),z.lazy(() => RecipeTemperatureScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RecipeYieldUpdateManyWithoutRecipeNestedInputSchema: z.ZodType<Prisma.RecipeYieldUpdateManyWithoutRecipeNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeYieldCreateWithoutRecipeInputSchema),z.lazy(() => RecipeYieldCreateWithoutRecipeInputSchema).array(),z.lazy(() => RecipeYieldUncheckedCreateWithoutRecipeInputSchema),z.lazy(() => RecipeYieldUncheckedCreateWithoutRecipeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeYieldCreateOrConnectWithoutRecipeInputSchema),z.lazy(() => RecipeYieldCreateOrConnectWithoutRecipeInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RecipeYieldUpsertWithWhereUniqueWithoutRecipeInputSchema),z.lazy(() => RecipeYieldUpsertWithWhereUniqueWithoutRecipeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeYieldCreateManyRecipeInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RecipeYieldWhereUniqueInputSchema),z.lazy(() => RecipeYieldWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RecipeYieldWhereUniqueInputSchema),z.lazy(() => RecipeYieldWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RecipeYieldWhereUniqueInputSchema),z.lazy(() => RecipeYieldWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RecipeYieldWhereUniqueInputSchema),z.lazy(() => RecipeYieldWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RecipeYieldUpdateWithWhereUniqueWithoutRecipeInputSchema),z.lazy(() => RecipeYieldUpdateWithWhereUniqueWithoutRecipeInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RecipeYieldUpdateManyWithWhereWithoutRecipeInputSchema),z.lazy(() => RecipeYieldUpdateManyWithWhereWithoutRecipeInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RecipeYieldScalarWhereInputSchema),z.lazy(() => RecipeYieldScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RecipeLaborCostUpdateManyWithoutRecipeNestedInputSchema: z.ZodType<Prisma.RecipeLaborCostUpdateManyWithoutRecipeNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeLaborCostCreateWithoutRecipeInputSchema),z.lazy(() => RecipeLaborCostCreateWithoutRecipeInputSchema).array(),z.lazy(() => RecipeLaborCostUncheckedCreateWithoutRecipeInputSchema),z.lazy(() => RecipeLaborCostUncheckedCreateWithoutRecipeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeLaborCostCreateOrConnectWithoutRecipeInputSchema),z.lazy(() => RecipeLaborCostCreateOrConnectWithoutRecipeInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RecipeLaborCostUpsertWithWhereUniqueWithoutRecipeInputSchema),z.lazy(() => RecipeLaborCostUpsertWithWhereUniqueWithoutRecipeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeLaborCostCreateManyRecipeInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RecipeLaborCostWhereUniqueInputSchema),z.lazy(() => RecipeLaborCostWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RecipeLaborCostWhereUniqueInputSchema),z.lazy(() => RecipeLaborCostWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RecipeLaborCostWhereUniqueInputSchema),z.lazy(() => RecipeLaborCostWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RecipeLaborCostWhereUniqueInputSchema),z.lazy(() => RecipeLaborCostWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RecipeLaborCostUpdateWithWhereUniqueWithoutRecipeInputSchema),z.lazy(() => RecipeLaborCostUpdateWithWhereUniqueWithoutRecipeInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RecipeLaborCostUpdateManyWithWhereWithoutRecipeInputSchema),z.lazy(() => RecipeLaborCostUpdateManyWithWhereWithoutRecipeInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RecipeLaborCostScalarWhereInputSchema),z.lazy(() => RecipeLaborCostScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RecipeNutritionUpdateOneWithoutRecipeNestedInputSchema: z.ZodType<Prisma.RecipeNutritionUpdateOneWithoutRecipeNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeNutritionCreateWithoutRecipeInputSchema),z.lazy(() => RecipeNutritionUncheckedCreateWithoutRecipeInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RecipeNutritionCreateOrConnectWithoutRecipeInputSchema).optional(),
  upsert: z.lazy(() => RecipeNutritionUpsertWithoutRecipeInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => RecipeNutritionWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => RecipeNutritionWhereInputSchema) ]).optional(),
  connect: z.lazy(() => RecipeNutritionWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RecipeNutritionUpdateToOneWithWhereWithoutRecipeInputSchema),z.lazy(() => RecipeNutritionUpdateWithoutRecipeInputSchema),z.lazy(() => RecipeNutritionUncheckedUpdateWithoutRecipeInputSchema) ]).optional(),
}).strict();

export const RecipeCriticalPointUpdateManyWithoutRecipeNestedInputSchema: z.ZodType<Prisma.RecipeCriticalPointUpdateManyWithoutRecipeNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeCriticalPointCreateWithoutRecipeInputSchema),z.lazy(() => RecipeCriticalPointCreateWithoutRecipeInputSchema).array(),z.lazy(() => RecipeCriticalPointUncheckedCreateWithoutRecipeInputSchema),z.lazy(() => RecipeCriticalPointUncheckedCreateWithoutRecipeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeCriticalPointCreateOrConnectWithoutRecipeInputSchema),z.lazy(() => RecipeCriticalPointCreateOrConnectWithoutRecipeInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RecipeCriticalPointUpsertWithWhereUniqueWithoutRecipeInputSchema),z.lazy(() => RecipeCriticalPointUpsertWithWhereUniqueWithoutRecipeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeCriticalPointCreateManyRecipeInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RecipeCriticalPointWhereUniqueInputSchema),z.lazy(() => RecipeCriticalPointWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RecipeCriticalPointWhereUniqueInputSchema),z.lazy(() => RecipeCriticalPointWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RecipeCriticalPointWhereUniqueInputSchema),z.lazy(() => RecipeCriticalPointWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RecipeCriticalPointWhereUniqueInputSchema),z.lazy(() => RecipeCriticalPointWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RecipeCriticalPointUpdateWithWhereUniqueWithoutRecipeInputSchema),z.lazy(() => RecipeCriticalPointUpdateWithWhereUniqueWithoutRecipeInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RecipeCriticalPointUpdateManyWithWhereWithoutRecipeInputSchema),z.lazy(() => RecipeCriticalPointUpdateManyWithWhereWithoutRecipeInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RecipeCriticalPointScalarWhereInputSchema),z.lazy(() => RecipeCriticalPointScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RecipeStorageUpdateOneWithoutRecipeNestedInputSchema: z.ZodType<Prisma.RecipeStorageUpdateOneWithoutRecipeNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeStorageCreateWithoutRecipeInputSchema),z.lazy(() => RecipeStorageUncheckedCreateWithoutRecipeInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RecipeStorageCreateOrConnectWithoutRecipeInputSchema).optional(),
  upsert: z.lazy(() => RecipeStorageUpsertWithoutRecipeInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => RecipeStorageWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => RecipeStorageWhereInputSchema) ]).optional(),
  connect: z.lazy(() => RecipeStorageWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RecipeStorageUpdateToOneWithWhereWithoutRecipeInputSchema),z.lazy(() => RecipeStorageUpdateWithoutRecipeInputSchema),z.lazy(() => RecipeStorageUncheckedUpdateWithoutRecipeInputSchema) ]).optional(),
}).strict();

export const RecipePhotoUpdateManyWithoutRecipeNestedInputSchema: z.ZodType<Prisma.RecipePhotoUpdateManyWithoutRecipeNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipePhotoCreateWithoutRecipeInputSchema),z.lazy(() => RecipePhotoCreateWithoutRecipeInputSchema).array(),z.lazy(() => RecipePhotoUncheckedCreateWithoutRecipeInputSchema),z.lazy(() => RecipePhotoUncheckedCreateWithoutRecipeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipePhotoCreateOrConnectWithoutRecipeInputSchema),z.lazy(() => RecipePhotoCreateOrConnectWithoutRecipeInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RecipePhotoUpsertWithWhereUniqueWithoutRecipeInputSchema),z.lazy(() => RecipePhotoUpsertWithWhereUniqueWithoutRecipeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipePhotoCreateManyRecipeInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RecipePhotoWhereUniqueInputSchema),z.lazy(() => RecipePhotoWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RecipePhotoWhereUniqueInputSchema),z.lazy(() => RecipePhotoWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RecipePhotoWhereUniqueInputSchema),z.lazy(() => RecipePhotoWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RecipePhotoWhereUniqueInputSchema),z.lazy(() => RecipePhotoWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RecipePhotoUpdateWithWhereUniqueWithoutRecipeInputSchema),z.lazy(() => RecipePhotoUpdateWithWhereUniqueWithoutRecipeInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RecipePhotoUpdateManyWithWhereWithoutRecipeInputSchema),z.lazy(() => RecipePhotoUpdateManyWithWhereWithoutRecipeInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RecipePhotoScalarWhereInputSchema),z.lazy(() => RecipePhotoScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RecipeStatsUpdateOneWithoutRecipeNestedInputSchema: z.ZodType<Prisma.RecipeStatsUpdateOneWithoutRecipeNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeStatsCreateWithoutRecipeInputSchema),z.lazy(() => RecipeStatsUncheckedCreateWithoutRecipeInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RecipeStatsCreateOrConnectWithoutRecipeInputSchema).optional(),
  upsert: z.lazy(() => RecipeStatsUpsertWithoutRecipeInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => RecipeStatsWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => RecipeStatsWhereInputSchema) ]).optional(),
  connect: z.lazy(() => RecipeStatsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RecipeStatsUpdateToOneWithWhereWithoutRecipeInputSchema),z.lazy(() => RecipeStatsUpdateWithoutRecipeInputSchema),z.lazy(() => RecipeStatsUncheckedUpdateWithoutRecipeInputSchema) ]).optional(),
}).strict();

export const RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInputSchema: z.ZodType<Prisma.RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeIngredientCreateWithoutRecipeInputSchema),z.lazy(() => RecipeIngredientCreateWithoutRecipeInputSchema).array(),z.lazy(() => RecipeIngredientUncheckedCreateWithoutRecipeInputSchema),z.lazy(() => RecipeIngredientUncheckedCreateWithoutRecipeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeIngredientCreateOrConnectWithoutRecipeInputSchema),z.lazy(() => RecipeIngredientCreateOrConnectWithoutRecipeInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RecipeIngredientUpsertWithWhereUniqueWithoutRecipeInputSchema),z.lazy(() => RecipeIngredientUpsertWithWhereUniqueWithoutRecipeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeIngredientCreateManyRecipeInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RecipeIngredientWhereUniqueInputSchema),z.lazy(() => RecipeIngredientWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RecipeIngredientWhereUniqueInputSchema),z.lazy(() => RecipeIngredientWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RecipeIngredientWhereUniqueInputSchema),z.lazy(() => RecipeIngredientWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RecipeIngredientWhereUniqueInputSchema),z.lazy(() => RecipeIngredientWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RecipeIngredientUpdateWithWhereUniqueWithoutRecipeInputSchema),z.lazy(() => RecipeIngredientUpdateWithWhereUniqueWithoutRecipeInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RecipeIngredientUpdateManyWithWhereWithoutRecipeInputSchema),z.lazy(() => RecipeIngredientUpdateManyWithWhereWithoutRecipeInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RecipeIngredientScalarWhereInputSchema),z.lazy(() => RecipeIngredientScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInputSchema: z.ZodType<Prisma.RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeInstructionCreateWithoutRecipeInputSchema),z.lazy(() => RecipeInstructionCreateWithoutRecipeInputSchema).array(),z.lazy(() => RecipeInstructionUncheckedCreateWithoutRecipeInputSchema),z.lazy(() => RecipeInstructionUncheckedCreateWithoutRecipeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeInstructionCreateOrConnectWithoutRecipeInputSchema),z.lazy(() => RecipeInstructionCreateOrConnectWithoutRecipeInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RecipeInstructionUpsertWithWhereUniqueWithoutRecipeInputSchema),z.lazy(() => RecipeInstructionUpsertWithWhereUniqueWithoutRecipeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeInstructionCreateManyRecipeInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RecipeInstructionWhereUniqueInputSchema),z.lazy(() => RecipeInstructionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RecipeInstructionWhereUniqueInputSchema),z.lazy(() => RecipeInstructionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RecipeInstructionWhereUniqueInputSchema),z.lazy(() => RecipeInstructionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RecipeInstructionWhereUniqueInputSchema),z.lazy(() => RecipeInstructionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RecipeInstructionUpdateWithWhereUniqueWithoutRecipeInputSchema),z.lazy(() => RecipeInstructionUpdateWithWhereUniqueWithoutRecipeInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RecipeInstructionUpdateManyWithWhereWithoutRecipeInputSchema),z.lazy(() => RecipeInstructionUpdateManyWithWhereWithoutRecipeInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RecipeInstructionScalarWhereInputSchema),z.lazy(() => RecipeInstructionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const MenuItemUncheckedUpdateManyWithoutRecipesNestedInputSchema: z.ZodType<Prisma.MenuItemUncheckedUpdateManyWithoutRecipesNestedInput> = z.object({
  create: z.union([ z.lazy(() => MenuItemCreateWithoutRecipesInputSchema),z.lazy(() => MenuItemCreateWithoutRecipesInputSchema).array(),z.lazy(() => MenuItemUncheckedCreateWithoutRecipesInputSchema),z.lazy(() => MenuItemUncheckedCreateWithoutRecipesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MenuItemCreateOrConnectWithoutRecipesInputSchema),z.lazy(() => MenuItemCreateOrConnectWithoutRecipesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MenuItemUpsertWithWhereUniqueWithoutRecipesInputSchema),z.lazy(() => MenuItemUpsertWithWhereUniqueWithoutRecipesInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => MenuItemWhereUniqueInputSchema),z.lazy(() => MenuItemWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MenuItemWhereUniqueInputSchema),z.lazy(() => MenuItemWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MenuItemWhereUniqueInputSchema),z.lazy(() => MenuItemWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MenuItemWhereUniqueInputSchema),z.lazy(() => MenuItemWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MenuItemUpdateWithWhereUniqueWithoutRecipesInputSchema),z.lazy(() => MenuItemUpdateWithWhereUniqueWithoutRecipesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MenuItemUpdateManyWithWhereWithoutRecipesInputSchema),z.lazy(() => MenuItemUpdateManyWithWhereWithoutRecipesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MenuItemScalarWhereInputSchema),z.lazy(() => MenuItemScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FoodCostHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema: z.ZodType<Prisma.FoodCostHistoryUncheckedUpdateManyWithoutRecipeNestedInput> = z.object({
  create: z.union([ z.lazy(() => FoodCostHistoryCreateWithoutRecipeInputSchema),z.lazy(() => FoodCostHistoryCreateWithoutRecipeInputSchema).array(),z.lazy(() => FoodCostHistoryUncheckedCreateWithoutRecipeInputSchema),z.lazy(() => FoodCostHistoryUncheckedCreateWithoutRecipeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FoodCostHistoryCreateOrConnectWithoutRecipeInputSchema),z.lazy(() => FoodCostHistoryCreateOrConnectWithoutRecipeInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FoodCostHistoryUpsertWithWhereUniqueWithoutRecipeInputSchema),z.lazy(() => FoodCostHistoryUpsertWithWhereUniqueWithoutRecipeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FoodCostHistoryCreateManyRecipeInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FoodCostHistoryWhereUniqueInputSchema),z.lazy(() => FoodCostHistoryWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FoodCostHistoryWhereUniqueInputSchema),z.lazy(() => FoodCostHistoryWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FoodCostHistoryWhereUniqueInputSchema),z.lazy(() => FoodCostHistoryWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FoodCostHistoryWhereUniqueInputSchema),z.lazy(() => FoodCostHistoryWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FoodCostHistoryUpdateWithWhereUniqueWithoutRecipeInputSchema),z.lazy(() => FoodCostHistoryUpdateWithWhereUniqueWithoutRecipeInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FoodCostHistoryUpdateManyWithWhereWithoutRecipeInputSchema),z.lazy(() => FoodCostHistoryUpdateManyWithWhereWithoutRecipeInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FoodCostHistoryScalarWhereInputSchema),z.lazy(() => FoodCostHistoryScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PrepHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema: z.ZodType<Prisma.PrepHistoryUncheckedUpdateManyWithoutRecipeNestedInput> = z.object({
  create: z.union([ z.lazy(() => PrepHistoryCreateWithoutRecipeInputSchema),z.lazy(() => PrepHistoryCreateWithoutRecipeInputSchema).array(),z.lazy(() => PrepHistoryUncheckedCreateWithoutRecipeInputSchema),z.lazy(() => PrepHistoryUncheckedCreateWithoutRecipeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PrepHistoryCreateOrConnectWithoutRecipeInputSchema),z.lazy(() => PrepHistoryCreateOrConnectWithoutRecipeInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PrepHistoryUpsertWithWhereUniqueWithoutRecipeInputSchema),z.lazy(() => PrepHistoryUpsertWithWhereUniqueWithoutRecipeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PrepHistoryCreateManyRecipeInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PrepHistoryWhereUniqueInputSchema),z.lazy(() => PrepHistoryWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PrepHistoryWhereUniqueInputSchema),z.lazy(() => PrepHistoryWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PrepHistoryWhereUniqueInputSchema),z.lazy(() => PrepHistoryWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PrepHistoryWhereUniqueInputSchema),z.lazy(() => PrepHistoryWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PrepHistoryUpdateWithWhereUniqueWithoutRecipeInputSchema),z.lazy(() => PrepHistoryUpdateWithWhereUniqueWithoutRecipeInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PrepHistoryUpdateManyWithWhereWithoutRecipeInputSchema),z.lazy(() => PrepHistoryUpdateManyWithWhereWithoutRecipeInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PrepHistoryScalarWhereInputSchema),z.lazy(() => PrepHistoryScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PrepBoardUncheckedUpdateManyWithoutRecipesNestedInputSchema: z.ZodType<Prisma.PrepBoardUncheckedUpdateManyWithoutRecipesNestedInput> = z.object({
  create: z.union([ z.lazy(() => PrepBoardCreateWithoutRecipesInputSchema),z.lazy(() => PrepBoardCreateWithoutRecipesInputSchema).array(),z.lazy(() => PrepBoardUncheckedCreateWithoutRecipesInputSchema),z.lazy(() => PrepBoardUncheckedCreateWithoutRecipesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PrepBoardCreateOrConnectWithoutRecipesInputSchema),z.lazy(() => PrepBoardCreateOrConnectWithoutRecipesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PrepBoardUpsertWithWhereUniqueWithoutRecipesInputSchema),z.lazy(() => PrepBoardUpsertWithWhereUniqueWithoutRecipesInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => PrepBoardWhereUniqueInputSchema),z.lazy(() => PrepBoardWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PrepBoardWhereUniqueInputSchema),z.lazy(() => PrepBoardWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PrepBoardWhereUniqueInputSchema),z.lazy(() => PrepBoardWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PrepBoardWhereUniqueInputSchema),z.lazy(() => PrepBoardWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PrepBoardUpdateWithWhereUniqueWithoutRecipesInputSchema),z.lazy(() => PrepBoardUpdateWithWhereUniqueWithoutRecipesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PrepBoardUpdateManyWithWhereWithoutRecipesInputSchema),z.lazy(() => PrepBoardUpdateManyWithWhereWithoutRecipesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PrepBoardScalarWhereInputSchema),z.lazy(() => PrepBoardScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PrepItemUncheckedUpdateManyWithoutRecipeNestedInputSchema: z.ZodType<Prisma.PrepItemUncheckedUpdateManyWithoutRecipeNestedInput> = z.object({
  create: z.union([ z.lazy(() => PrepItemCreateWithoutRecipeInputSchema),z.lazy(() => PrepItemCreateWithoutRecipeInputSchema).array(),z.lazy(() => PrepItemUncheckedCreateWithoutRecipeInputSchema),z.lazy(() => PrepItemUncheckedCreateWithoutRecipeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PrepItemCreateOrConnectWithoutRecipeInputSchema),z.lazy(() => PrepItemCreateOrConnectWithoutRecipeInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PrepItemUpsertWithWhereUniqueWithoutRecipeInputSchema),z.lazy(() => PrepItemUpsertWithWhereUniqueWithoutRecipeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PrepItemCreateManyRecipeInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PrepItemWhereUniqueInputSchema),z.lazy(() => PrepItemWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PrepItemWhereUniqueInputSchema),z.lazy(() => PrepItemWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PrepItemWhereUniqueInputSchema),z.lazy(() => PrepItemWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PrepItemWhereUniqueInputSchema),z.lazy(() => PrepItemWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PrepItemUpdateWithWhereUniqueWithoutRecipeInputSchema),z.lazy(() => PrepItemUpdateWithWhereUniqueWithoutRecipeInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PrepItemUpdateManyWithWhereWithoutRecipeInputSchema),z.lazy(() => PrepItemUpdateManyWithWhereWithoutRecipeInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PrepItemScalarWhereInputSchema),z.lazy(() => PrepItemScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const MenuItemRecipeUncheckedUpdateManyWithoutRecipeNestedInputSchema: z.ZodType<Prisma.MenuItemRecipeUncheckedUpdateManyWithoutRecipeNestedInput> = z.object({
  create: z.union([ z.lazy(() => MenuItemRecipeCreateWithoutRecipeInputSchema),z.lazy(() => MenuItemRecipeCreateWithoutRecipeInputSchema).array(),z.lazy(() => MenuItemRecipeUncheckedCreateWithoutRecipeInputSchema),z.lazy(() => MenuItemRecipeUncheckedCreateWithoutRecipeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MenuItemRecipeCreateOrConnectWithoutRecipeInputSchema),z.lazy(() => MenuItemRecipeCreateOrConnectWithoutRecipeInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MenuItemRecipeUpsertWithWhereUniqueWithoutRecipeInputSchema),z.lazy(() => MenuItemRecipeUpsertWithWhereUniqueWithoutRecipeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MenuItemRecipeCreateManyRecipeInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => MenuItemRecipeWhereUniqueInputSchema),z.lazy(() => MenuItemRecipeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MenuItemRecipeWhereUniqueInputSchema),z.lazy(() => MenuItemRecipeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MenuItemRecipeWhereUniqueInputSchema),z.lazy(() => MenuItemRecipeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MenuItemRecipeWhereUniqueInputSchema),z.lazy(() => MenuItemRecipeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MenuItemRecipeUpdateWithWhereUniqueWithoutRecipeInputSchema),z.lazy(() => MenuItemRecipeUpdateWithWhereUniqueWithoutRecipeInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MenuItemRecipeUpdateManyWithWhereWithoutRecipeInputSchema),z.lazy(() => MenuItemRecipeUpdateManyWithWhereWithoutRecipeInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MenuItemRecipeScalarWhereInputSchema),z.lazy(() => MenuItemRecipeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProductionPlanItemUncheckedUpdateManyWithoutRecipeNestedInputSchema: z.ZodType<Prisma.ProductionPlanItemUncheckedUpdateManyWithoutRecipeNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProductionPlanItemCreateWithoutRecipeInputSchema),z.lazy(() => ProductionPlanItemCreateWithoutRecipeInputSchema).array(),z.lazy(() => ProductionPlanItemUncheckedCreateWithoutRecipeInputSchema),z.lazy(() => ProductionPlanItemUncheckedCreateWithoutRecipeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProductionPlanItemCreateOrConnectWithoutRecipeInputSchema),z.lazy(() => ProductionPlanItemCreateOrConnectWithoutRecipeInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProductionPlanItemUpsertWithWhereUniqueWithoutRecipeInputSchema),z.lazy(() => ProductionPlanItemUpsertWithWhereUniqueWithoutRecipeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProductionPlanItemCreateManyRecipeInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProductionPlanItemWhereUniqueInputSchema),z.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProductionPlanItemWhereUniqueInputSchema),z.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProductionPlanItemWhereUniqueInputSchema),z.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProductionPlanItemWhereUniqueInputSchema),z.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProductionPlanItemUpdateWithWhereUniqueWithoutRecipeInputSchema),z.lazy(() => ProductionPlanItemUpdateWithWhereUniqueWithoutRecipeInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProductionPlanItemUpdateManyWithWhereWithoutRecipeInputSchema),z.lazy(() => ProductionPlanItemUpdateManyWithWhereWithoutRecipeInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProductionPlanItemScalarWhereInputSchema),z.lazy(() => ProductionPlanItemScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const InventoryWithdrawalUncheckedUpdateManyWithoutRecipeNestedInputSchema: z.ZodType<Prisma.InventoryWithdrawalUncheckedUpdateManyWithoutRecipeNestedInput> = z.object({
  create: z.union([ z.lazy(() => InventoryWithdrawalCreateWithoutRecipeInputSchema),z.lazy(() => InventoryWithdrawalCreateWithoutRecipeInputSchema).array(),z.lazy(() => InventoryWithdrawalUncheckedCreateWithoutRecipeInputSchema),z.lazy(() => InventoryWithdrawalUncheckedCreateWithoutRecipeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InventoryWithdrawalCreateOrConnectWithoutRecipeInputSchema),z.lazy(() => InventoryWithdrawalCreateOrConnectWithoutRecipeInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => InventoryWithdrawalUpsertWithWhereUniqueWithoutRecipeInputSchema),z.lazy(() => InventoryWithdrawalUpsertWithWhereUniqueWithoutRecipeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InventoryWithdrawalCreateManyRecipeInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema),z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema),z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema),z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema),z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => InventoryWithdrawalUpdateWithWhereUniqueWithoutRecipeInputSchema),z.lazy(() => InventoryWithdrawalUpdateWithWhereUniqueWithoutRecipeInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => InventoryWithdrawalUpdateManyWithWhereWithoutRecipeInputSchema),z.lazy(() => InventoryWithdrawalUpdateManyWithWhereWithoutRecipeInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => InventoryWithdrawalScalarWhereInputSchema),z.lazy(() => InventoryWithdrawalScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RecipeTagUncheckedUpdateManyWithoutRecipesNestedInputSchema: z.ZodType<Prisma.RecipeTagUncheckedUpdateManyWithoutRecipesNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeTagCreateWithoutRecipesInputSchema),z.lazy(() => RecipeTagCreateWithoutRecipesInputSchema).array(),z.lazy(() => RecipeTagUncheckedCreateWithoutRecipesInputSchema),z.lazy(() => RecipeTagUncheckedCreateWithoutRecipesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeTagCreateOrConnectWithoutRecipesInputSchema),z.lazy(() => RecipeTagCreateOrConnectWithoutRecipesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RecipeTagUpsertWithWhereUniqueWithoutRecipesInputSchema),z.lazy(() => RecipeTagUpsertWithWhereUniqueWithoutRecipesInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => RecipeTagWhereUniqueInputSchema),z.lazy(() => RecipeTagWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RecipeTagWhereUniqueInputSchema),z.lazy(() => RecipeTagWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RecipeTagWhereUniqueInputSchema),z.lazy(() => RecipeTagWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RecipeTagWhereUniqueInputSchema),z.lazy(() => RecipeTagWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RecipeTagUpdateWithWhereUniqueWithoutRecipesInputSchema),z.lazy(() => RecipeTagUpdateWithWhereUniqueWithoutRecipesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RecipeTagUpdateManyWithWhereWithoutRecipesInputSchema),z.lazy(() => RecipeTagUpdateManyWithWhereWithoutRecipesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RecipeTagScalarWhereInputSchema),z.lazy(() => RecipeTagScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RecipeVersionUncheckedUpdateManyWithoutRecipeNestedInputSchema: z.ZodType<Prisma.RecipeVersionUncheckedUpdateManyWithoutRecipeNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeVersionCreateWithoutRecipeInputSchema),z.lazy(() => RecipeVersionCreateWithoutRecipeInputSchema).array(),z.lazy(() => RecipeVersionUncheckedCreateWithoutRecipeInputSchema),z.lazy(() => RecipeVersionUncheckedCreateWithoutRecipeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeVersionCreateOrConnectWithoutRecipeInputSchema),z.lazy(() => RecipeVersionCreateOrConnectWithoutRecipeInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RecipeVersionUpsertWithWhereUniqueWithoutRecipeInputSchema),z.lazy(() => RecipeVersionUpsertWithWhereUniqueWithoutRecipeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeVersionCreateManyRecipeInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RecipeVersionWhereUniqueInputSchema),z.lazy(() => RecipeVersionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RecipeVersionWhereUniqueInputSchema),z.lazy(() => RecipeVersionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RecipeVersionWhereUniqueInputSchema),z.lazy(() => RecipeVersionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RecipeVersionWhereUniqueInputSchema),z.lazy(() => RecipeVersionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RecipeVersionUpdateWithWhereUniqueWithoutRecipeInputSchema),z.lazy(() => RecipeVersionUpdateWithWhereUniqueWithoutRecipeInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RecipeVersionUpdateManyWithWhereWithoutRecipeInputSchema),z.lazy(() => RecipeVersionUpdateManyWithWhereWithoutRecipeInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RecipeVersionScalarWhereInputSchema),z.lazy(() => RecipeVersionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RecipeEquipmentUncheckedUpdateManyWithoutRecipeNestedInputSchema: z.ZodType<Prisma.RecipeEquipmentUncheckedUpdateManyWithoutRecipeNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeEquipmentCreateWithoutRecipeInputSchema),z.lazy(() => RecipeEquipmentCreateWithoutRecipeInputSchema).array(),z.lazy(() => RecipeEquipmentUncheckedCreateWithoutRecipeInputSchema),z.lazy(() => RecipeEquipmentUncheckedCreateWithoutRecipeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeEquipmentCreateOrConnectWithoutRecipeInputSchema),z.lazy(() => RecipeEquipmentCreateOrConnectWithoutRecipeInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RecipeEquipmentUpsertWithWhereUniqueWithoutRecipeInputSchema),z.lazy(() => RecipeEquipmentUpsertWithWhereUniqueWithoutRecipeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeEquipmentCreateManyRecipeInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RecipeEquipmentWhereUniqueInputSchema),z.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RecipeEquipmentWhereUniqueInputSchema),z.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RecipeEquipmentWhereUniqueInputSchema),z.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RecipeEquipmentWhereUniqueInputSchema),z.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RecipeEquipmentUpdateWithWhereUniqueWithoutRecipeInputSchema),z.lazy(() => RecipeEquipmentUpdateWithWhereUniqueWithoutRecipeInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RecipeEquipmentUpdateManyWithWhereWithoutRecipeInputSchema),z.lazy(() => RecipeEquipmentUpdateManyWithWhereWithoutRecipeInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RecipeEquipmentScalarWhereInputSchema),z.lazy(() => RecipeEquipmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const DietaryRestrictionUncheckedUpdateManyWithoutRecipesNestedInputSchema: z.ZodType<Prisma.DietaryRestrictionUncheckedUpdateManyWithoutRecipesNestedInput> = z.object({
  create: z.union([ z.lazy(() => DietaryRestrictionCreateWithoutRecipesInputSchema),z.lazy(() => DietaryRestrictionCreateWithoutRecipesInputSchema).array(),z.lazy(() => DietaryRestrictionUncheckedCreateWithoutRecipesInputSchema),z.lazy(() => DietaryRestrictionUncheckedCreateWithoutRecipesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DietaryRestrictionCreateOrConnectWithoutRecipesInputSchema),z.lazy(() => DietaryRestrictionCreateOrConnectWithoutRecipesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => DietaryRestrictionUpsertWithWhereUniqueWithoutRecipesInputSchema),z.lazy(() => DietaryRestrictionUpsertWithWhereUniqueWithoutRecipesInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => DietaryRestrictionWhereUniqueInputSchema),z.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => DietaryRestrictionWhereUniqueInputSchema),z.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => DietaryRestrictionWhereUniqueInputSchema),z.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => DietaryRestrictionWhereUniqueInputSchema),z.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => DietaryRestrictionUpdateWithWhereUniqueWithoutRecipesInputSchema),z.lazy(() => DietaryRestrictionUpdateWithWhereUniqueWithoutRecipesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => DietaryRestrictionUpdateManyWithWhereWithoutRecipesInputSchema),z.lazy(() => DietaryRestrictionUpdateManyWithWhereWithoutRecipesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => DietaryRestrictionScalarWhereInputSchema),z.lazy(() => DietaryRestrictionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RecipeTemperatureUncheckedUpdateManyWithoutRecipeNestedInputSchema: z.ZodType<Prisma.RecipeTemperatureUncheckedUpdateManyWithoutRecipeNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeTemperatureCreateWithoutRecipeInputSchema),z.lazy(() => RecipeTemperatureCreateWithoutRecipeInputSchema).array(),z.lazy(() => RecipeTemperatureUncheckedCreateWithoutRecipeInputSchema),z.lazy(() => RecipeTemperatureUncheckedCreateWithoutRecipeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeTemperatureCreateOrConnectWithoutRecipeInputSchema),z.lazy(() => RecipeTemperatureCreateOrConnectWithoutRecipeInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RecipeTemperatureUpsertWithWhereUniqueWithoutRecipeInputSchema),z.lazy(() => RecipeTemperatureUpsertWithWhereUniqueWithoutRecipeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeTemperatureCreateManyRecipeInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RecipeTemperatureWhereUniqueInputSchema),z.lazy(() => RecipeTemperatureWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RecipeTemperatureWhereUniqueInputSchema),z.lazy(() => RecipeTemperatureWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RecipeTemperatureWhereUniqueInputSchema),z.lazy(() => RecipeTemperatureWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RecipeTemperatureWhereUniqueInputSchema),z.lazy(() => RecipeTemperatureWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RecipeTemperatureUpdateWithWhereUniqueWithoutRecipeInputSchema),z.lazy(() => RecipeTemperatureUpdateWithWhereUniqueWithoutRecipeInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RecipeTemperatureUpdateManyWithWhereWithoutRecipeInputSchema),z.lazy(() => RecipeTemperatureUpdateManyWithWhereWithoutRecipeInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RecipeTemperatureScalarWhereInputSchema),z.lazy(() => RecipeTemperatureScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RecipeYieldUncheckedUpdateManyWithoutRecipeNestedInputSchema: z.ZodType<Prisma.RecipeYieldUncheckedUpdateManyWithoutRecipeNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeYieldCreateWithoutRecipeInputSchema),z.lazy(() => RecipeYieldCreateWithoutRecipeInputSchema).array(),z.lazy(() => RecipeYieldUncheckedCreateWithoutRecipeInputSchema),z.lazy(() => RecipeYieldUncheckedCreateWithoutRecipeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeYieldCreateOrConnectWithoutRecipeInputSchema),z.lazy(() => RecipeYieldCreateOrConnectWithoutRecipeInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RecipeYieldUpsertWithWhereUniqueWithoutRecipeInputSchema),z.lazy(() => RecipeYieldUpsertWithWhereUniqueWithoutRecipeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeYieldCreateManyRecipeInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RecipeYieldWhereUniqueInputSchema),z.lazy(() => RecipeYieldWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RecipeYieldWhereUniqueInputSchema),z.lazy(() => RecipeYieldWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RecipeYieldWhereUniqueInputSchema),z.lazy(() => RecipeYieldWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RecipeYieldWhereUniqueInputSchema),z.lazy(() => RecipeYieldWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RecipeYieldUpdateWithWhereUniqueWithoutRecipeInputSchema),z.lazy(() => RecipeYieldUpdateWithWhereUniqueWithoutRecipeInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RecipeYieldUpdateManyWithWhereWithoutRecipeInputSchema),z.lazy(() => RecipeYieldUpdateManyWithWhereWithoutRecipeInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RecipeYieldScalarWhereInputSchema),z.lazy(() => RecipeYieldScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RecipeLaborCostUncheckedUpdateManyWithoutRecipeNestedInputSchema: z.ZodType<Prisma.RecipeLaborCostUncheckedUpdateManyWithoutRecipeNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeLaborCostCreateWithoutRecipeInputSchema),z.lazy(() => RecipeLaborCostCreateWithoutRecipeInputSchema).array(),z.lazy(() => RecipeLaborCostUncheckedCreateWithoutRecipeInputSchema),z.lazy(() => RecipeLaborCostUncheckedCreateWithoutRecipeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeLaborCostCreateOrConnectWithoutRecipeInputSchema),z.lazy(() => RecipeLaborCostCreateOrConnectWithoutRecipeInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RecipeLaborCostUpsertWithWhereUniqueWithoutRecipeInputSchema),z.lazy(() => RecipeLaborCostUpsertWithWhereUniqueWithoutRecipeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeLaborCostCreateManyRecipeInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RecipeLaborCostWhereUniqueInputSchema),z.lazy(() => RecipeLaborCostWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RecipeLaborCostWhereUniqueInputSchema),z.lazy(() => RecipeLaborCostWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RecipeLaborCostWhereUniqueInputSchema),z.lazy(() => RecipeLaborCostWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RecipeLaborCostWhereUniqueInputSchema),z.lazy(() => RecipeLaborCostWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RecipeLaborCostUpdateWithWhereUniqueWithoutRecipeInputSchema),z.lazy(() => RecipeLaborCostUpdateWithWhereUniqueWithoutRecipeInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RecipeLaborCostUpdateManyWithWhereWithoutRecipeInputSchema),z.lazy(() => RecipeLaborCostUpdateManyWithWhereWithoutRecipeInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RecipeLaborCostScalarWhereInputSchema),z.lazy(() => RecipeLaborCostScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RecipeNutritionUncheckedUpdateOneWithoutRecipeNestedInputSchema: z.ZodType<Prisma.RecipeNutritionUncheckedUpdateOneWithoutRecipeNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeNutritionCreateWithoutRecipeInputSchema),z.lazy(() => RecipeNutritionUncheckedCreateWithoutRecipeInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RecipeNutritionCreateOrConnectWithoutRecipeInputSchema).optional(),
  upsert: z.lazy(() => RecipeNutritionUpsertWithoutRecipeInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => RecipeNutritionWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => RecipeNutritionWhereInputSchema) ]).optional(),
  connect: z.lazy(() => RecipeNutritionWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RecipeNutritionUpdateToOneWithWhereWithoutRecipeInputSchema),z.lazy(() => RecipeNutritionUpdateWithoutRecipeInputSchema),z.lazy(() => RecipeNutritionUncheckedUpdateWithoutRecipeInputSchema) ]).optional(),
}).strict();

export const RecipeCriticalPointUncheckedUpdateManyWithoutRecipeNestedInputSchema: z.ZodType<Prisma.RecipeCriticalPointUncheckedUpdateManyWithoutRecipeNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeCriticalPointCreateWithoutRecipeInputSchema),z.lazy(() => RecipeCriticalPointCreateWithoutRecipeInputSchema).array(),z.lazy(() => RecipeCriticalPointUncheckedCreateWithoutRecipeInputSchema),z.lazy(() => RecipeCriticalPointUncheckedCreateWithoutRecipeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeCriticalPointCreateOrConnectWithoutRecipeInputSchema),z.lazy(() => RecipeCriticalPointCreateOrConnectWithoutRecipeInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RecipeCriticalPointUpsertWithWhereUniqueWithoutRecipeInputSchema),z.lazy(() => RecipeCriticalPointUpsertWithWhereUniqueWithoutRecipeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeCriticalPointCreateManyRecipeInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RecipeCriticalPointWhereUniqueInputSchema),z.lazy(() => RecipeCriticalPointWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RecipeCriticalPointWhereUniqueInputSchema),z.lazy(() => RecipeCriticalPointWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RecipeCriticalPointWhereUniqueInputSchema),z.lazy(() => RecipeCriticalPointWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RecipeCriticalPointWhereUniqueInputSchema),z.lazy(() => RecipeCriticalPointWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RecipeCriticalPointUpdateWithWhereUniqueWithoutRecipeInputSchema),z.lazy(() => RecipeCriticalPointUpdateWithWhereUniqueWithoutRecipeInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RecipeCriticalPointUpdateManyWithWhereWithoutRecipeInputSchema),z.lazy(() => RecipeCriticalPointUpdateManyWithWhereWithoutRecipeInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RecipeCriticalPointScalarWhereInputSchema),z.lazy(() => RecipeCriticalPointScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RecipeStorageUncheckedUpdateOneWithoutRecipeNestedInputSchema: z.ZodType<Prisma.RecipeStorageUncheckedUpdateOneWithoutRecipeNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeStorageCreateWithoutRecipeInputSchema),z.lazy(() => RecipeStorageUncheckedCreateWithoutRecipeInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RecipeStorageCreateOrConnectWithoutRecipeInputSchema).optional(),
  upsert: z.lazy(() => RecipeStorageUpsertWithoutRecipeInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => RecipeStorageWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => RecipeStorageWhereInputSchema) ]).optional(),
  connect: z.lazy(() => RecipeStorageWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RecipeStorageUpdateToOneWithWhereWithoutRecipeInputSchema),z.lazy(() => RecipeStorageUpdateWithoutRecipeInputSchema),z.lazy(() => RecipeStorageUncheckedUpdateWithoutRecipeInputSchema) ]).optional(),
}).strict();

export const RecipePhotoUncheckedUpdateManyWithoutRecipeNestedInputSchema: z.ZodType<Prisma.RecipePhotoUncheckedUpdateManyWithoutRecipeNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipePhotoCreateWithoutRecipeInputSchema),z.lazy(() => RecipePhotoCreateWithoutRecipeInputSchema).array(),z.lazy(() => RecipePhotoUncheckedCreateWithoutRecipeInputSchema),z.lazy(() => RecipePhotoUncheckedCreateWithoutRecipeInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipePhotoCreateOrConnectWithoutRecipeInputSchema),z.lazy(() => RecipePhotoCreateOrConnectWithoutRecipeInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RecipePhotoUpsertWithWhereUniqueWithoutRecipeInputSchema),z.lazy(() => RecipePhotoUpsertWithWhereUniqueWithoutRecipeInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipePhotoCreateManyRecipeInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RecipePhotoWhereUniqueInputSchema),z.lazy(() => RecipePhotoWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RecipePhotoWhereUniqueInputSchema),z.lazy(() => RecipePhotoWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RecipePhotoWhereUniqueInputSchema),z.lazy(() => RecipePhotoWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RecipePhotoWhereUniqueInputSchema),z.lazy(() => RecipePhotoWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RecipePhotoUpdateWithWhereUniqueWithoutRecipeInputSchema),z.lazy(() => RecipePhotoUpdateWithWhereUniqueWithoutRecipeInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RecipePhotoUpdateManyWithWhereWithoutRecipeInputSchema),z.lazy(() => RecipePhotoUpdateManyWithWhereWithoutRecipeInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RecipePhotoScalarWhereInputSchema),z.lazy(() => RecipePhotoScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RecipeStatsUncheckedUpdateOneWithoutRecipeNestedInputSchema: z.ZodType<Prisma.RecipeStatsUncheckedUpdateOneWithoutRecipeNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeStatsCreateWithoutRecipeInputSchema),z.lazy(() => RecipeStatsUncheckedCreateWithoutRecipeInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RecipeStatsCreateOrConnectWithoutRecipeInputSchema).optional(),
  upsert: z.lazy(() => RecipeStatsUpsertWithoutRecipeInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => RecipeStatsWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => RecipeStatsWhereInputSchema) ]).optional(),
  connect: z.lazy(() => RecipeStatsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RecipeStatsUpdateToOneWithWhereWithoutRecipeInputSchema),z.lazy(() => RecipeStatsUpdateWithoutRecipeInputSchema),z.lazy(() => RecipeStatsUncheckedUpdateWithoutRecipeInputSchema) ]).optional(),
}).strict();

export const RecipeIngredientCreateNestedManyWithoutIngredientInputSchema: z.ZodType<Prisma.RecipeIngredientCreateNestedManyWithoutIngredientInput> = z.object({
  create: z.union([ z.lazy(() => RecipeIngredientCreateWithoutIngredientInputSchema),z.lazy(() => RecipeIngredientCreateWithoutIngredientInputSchema).array(),z.lazy(() => RecipeIngredientUncheckedCreateWithoutIngredientInputSchema),z.lazy(() => RecipeIngredientUncheckedCreateWithoutIngredientInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeIngredientCreateOrConnectWithoutIngredientInputSchema),z.lazy(() => RecipeIngredientCreateOrConnectWithoutIngredientInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeIngredientCreateManyIngredientInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RecipeIngredientWhereUniqueInputSchema),z.lazy(() => RecipeIngredientWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const InventoryItemCreateNestedManyWithoutIngredientInputSchema: z.ZodType<Prisma.InventoryItemCreateNestedManyWithoutIngredientInput> = z.object({
  create: z.union([ z.lazy(() => InventoryItemCreateWithoutIngredientInputSchema),z.lazy(() => InventoryItemCreateWithoutIngredientInputSchema).array(),z.lazy(() => InventoryItemUncheckedCreateWithoutIngredientInputSchema),z.lazy(() => InventoryItemUncheckedCreateWithoutIngredientInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InventoryItemCreateOrConnectWithoutIngredientInputSchema),z.lazy(() => InventoryItemCreateOrConnectWithoutIngredientInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InventoryItemCreateManyIngredientInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => InventoryItemWhereUniqueInputSchema),z.lazy(() => InventoryItemWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OrderItemCreateNestedManyWithoutIngredientInputSchema: z.ZodType<Prisma.OrderItemCreateNestedManyWithoutIngredientInput> = z.object({
  create: z.union([ z.lazy(() => OrderItemCreateWithoutIngredientInputSchema),z.lazy(() => OrderItemCreateWithoutIngredientInputSchema).array(),z.lazy(() => OrderItemUncheckedCreateWithoutIngredientInputSchema),z.lazy(() => OrderItemUncheckedCreateWithoutIngredientInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrderItemCreateOrConnectWithoutIngredientInputSchema),z.lazy(() => OrderItemCreateOrConnectWithoutIngredientInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrderItemCreateManyIngredientInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => OrderItemWhereUniqueInputSchema),z.lazy(() => OrderItemWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const VendorCreateNestedManyWithoutIngredientsInputSchema: z.ZodType<Prisma.VendorCreateNestedManyWithoutIngredientsInput> = z.object({
  create: z.union([ z.lazy(() => VendorCreateWithoutIngredientsInputSchema),z.lazy(() => VendorCreateWithoutIngredientsInputSchema).array(),z.lazy(() => VendorUncheckedCreateWithoutIngredientsInputSchema),z.lazy(() => VendorUncheckedCreateWithoutIngredientsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => VendorCreateOrConnectWithoutIngredientsInputSchema),z.lazy(() => VendorCreateOrConnectWithoutIngredientsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => VendorWhereUniqueInputSchema),z.lazy(() => VendorWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const WasteRecordCreateNestedManyWithoutIngredienteInputSchema: z.ZodType<Prisma.WasteRecordCreateNestedManyWithoutIngredienteInput> = z.object({
  create: z.union([ z.lazy(() => WasteRecordCreateWithoutIngredienteInputSchema),z.lazy(() => WasteRecordCreateWithoutIngredienteInputSchema).array(),z.lazy(() => WasteRecordUncheckedCreateWithoutIngredienteInputSchema),z.lazy(() => WasteRecordUncheckedCreateWithoutIngredienteInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => WasteRecordCreateOrConnectWithoutIngredienteInputSchema),z.lazy(() => WasteRecordCreateOrConnectWithoutIngredienteInputSchema).array() ]).optional(),
  createMany: z.lazy(() => WasteRecordCreateManyIngredienteInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => WasteRecordWhereUniqueInputSchema),z.lazy(() => WasteRecordWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const IngredientAllergenCreateNestedManyWithoutIngredientInputSchema: z.ZodType<Prisma.IngredientAllergenCreateNestedManyWithoutIngredientInput> = z.object({
  create: z.union([ z.lazy(() => IngredientAllergenCreateWithoutIngredientInputSchema),z.lazy(() => IngredientAllergenCreateWithoutIngredientInputSchema).array(),z.lazy(() => IngredientAllergenUncheckedCreateWithoutIngredientInputSchema),z.lazy(() => IngredientAllergenUncheckedCreateWithoutIngredientInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => IngredientAllergenCreateOrConnectWithoutIngredientInputSchema),z.lazy(() => IngredientAllergenCreateOrConnectWithoutIngredientInputSchema).array() ]).optional(),
  createMany: z.lazy(() => IngredientAllergenCreateManyIngredientInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => IngredientAllergenWhereUniqueInputSchema),z.lazy(() => IngredientAllergenWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SupplierPriceHistoryCreateNestedManyWithoutIngredientInputSchema: z.ZodType<Prisma.SupplierPriceHistoryCreateNestedManyWithoutIngredientInput> = z.object({
  create: z.union([ z.lazy(() => SupplierPriceHistoryCreateWithoutIngredientInputSchema),z.lazy(() => SupplierPriceHistoryCreateWithoutIngredientInputSchema).array(),z.lazy(() => SupplierPriceHistoryUncheckedCreateWithoutIngredientInputSchema),z.lazy(() => SupplierPriceHistoryUncheckedCreateWithoutIngredientInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SupplierPriceHistoryCreateOrConnectWithoutIngredientInputSchema),z.lazy(() => SupplierPriceHistoryCreateOrConnectWithoutIngredientInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SupplierPriceHistoryCreateManyIngredientInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema),z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const DietaryRestrictionCreateNestedManyWithoutIngredientsInputSchema: z.ZodType<Prisma.DietaryRestrictionCreateNestedManyWithoutIngredientsInput> = z.object({
  create: z.union([ z.lazy(() => DietaryRestrictionCreateWithoutIngredientsInputSchema),z.lazy(() => DietaryRestrictionCreateWithoutIngredientsInputSchema).array(),z.lazy(() => DietaryRestrictionUncheckedCreateWithoutIngredientsInputSchema),z.lazy(() => DietaryRestrictionUncheckedCreateWithoutIngredientsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DietaryRestrictionCreateOrConnectWithoutIngredientsInputSchema),z.lazy(() => DietaryRestrictionCreateOrConnectWithoutIngredientsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => DietaryRestrictionWhereUniqueInputSchema),z.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RecipeIngredientUncheckedCreateNestedManyWithoutIngredientInputSchema: z.ZodType<Prisma.RecipeIngredientUncheckedCreateNestedManyWithoutIngredientInput> = z.object({
  create: z.union([ z.lazy(() => RecipeIngredientCreateWithoutIngredientInputSchema),z.lazy(() => RecipeIngredientCreateWithoutIngredientInputSchema).array(),z.lazy(() => RecipeIngredientUncheckedCreateWithoutIngredientInputSchema),z.lazy(() => RecipeIngredientUncheckedCreateWithoutIngredientInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeIngredientCreateOrConnectWithoutIngredientInputSchema),z.lazy(() => RecipeIngredientCreateOrConnectWithoutIngredientInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeIngredientCreateManyIngredientInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RecipeIngredientWhereUniqueInputSchema),z.lazy(() => RecipeIngredientWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const InventoryItemUncheckedCreateNestedManyWithoutIngredientInputSchema: z.ZodType<Prisma.InventoryItemUncheckedCreateNestedManyWithoutIngredientInput> = z.object({
  create: z.union([ z.lazy(() => InventoryItemCreateWithoutIngredientInputSchema),z.lazy(() => InventoryItemCreateWithoutIngredientInputSchema).array(),z.lazy(() => InventoryItemUncheckedCreateWithoutIngredientInputSchema),z.lazy(() => InventoryItemUncheckedCreateWithoutIngredientInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InventoryItemCreateOrConnectWithoutIngredientInputSchema),z.lazy(() => InventoryItemCreateOrConnectWithoutIngredientInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InventoryItemCreateManyIngredientInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => InventoryItemWhereUniqueInputSchema),z.lazy(() => InventoryItemWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OrderItemUncheckedCreateNestedManyWithoutIngredientInputSchema: z.ZodType<Prisma.OrderItemUncheckedCreateNestedManyWithoutIngredientInput> = z.object({
  create: z.union([ z.lazy(() => OrderItemCreateWithoutIngredientInputSchema),z.lazy(() => OrderItemCreateWithoutIngredientInputSchema).array(),z.lazy(() => OrderItemUncheckedCreateWithoutIngredientInputSchema),z.lazy(() => OrderItemUncheckedCreateWithoutIngredientInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrderItemCreateOrConnectWithoutIngredientInputSchema),z.lazy(() => OrderItemCreateOrConnectWithoutIngredientInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrderItemCreateManyIngredientInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => OrderItemWhereUniqueInputSchema),z.lazy(() => OrderItemWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const VendorUncheckedCreateNestedManyWithoutIngredientsInputSchema: z.ZodType<Prisma.VendorUncheckedCreateNestedManyWithoutIngredientsInput> = z.object({
  create: z.union([ z.lazy(() => VendorCreateWithoutIngredientsInputSchema),z.lazy(() => VendorCreateWithoutIngredientsInputSchema).array(),z.lazy(() => VendorUncheckedCreateWithoutIngredientsInputSchema),z.lazy(() => VendorUncheckedCreateWithoutIngredientsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => VendorCreateOrConnectWithoutIngredientsInputSchema),z.lazy(() => VendorCreateOrConnectWithoutIngredientsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => VendorWhereUniqueInputSchema),z.lazy(() => VendorWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const WasteRecordUncheckedCreateNestedManyWithoutIngredienteInputSchema: z.ZodType<Prisma.WasteRecordUncheckedCreateNestedManyWithoutIngredienteInput> = z.object({
  create: z.union([ z.lazy(() => WasteRecordCreateWithoutIngredienteInputSchema),z.lazy(() => WasteRecordCreateWithoutIngredienteInputSchema).array(),z.lazy(() => WasteRecordUncheckedCreateWithoutIngredienteInputSchema),z.lazy(() => WasteRecordUncheckedCreateWithoutIngredienteInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => WasteRecordCreateOrConnectWithoutIngredienteInputSchema),z.lazy(() => WasteRecordCreateOrConnectWithoutIngredienteInputSchema).array() ]).optional(),
  createMany: z.lazy(() => WasteRecordCreateManyIngredienteInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => WasteRecordWhereUniqueInputSchema),z.lazy(() => WasteRecordWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const IngredientAllergenUncheckedCreateNestedManyWithoutIngredientInputSchema: z.ZodType<Prisma.IngredientAllergenUncheckedCreateNestedManyWithoutIngredientInput> = z.object({
  create: z.union([ z.lazy(() => IngredientAllergenCreateWithoutIngredientInputSchema),z.lazy(() => IngredientAllergenCreateWithoutIngredientInputSchema).array(),z.lazy(() => IngredientAllergenUncheckedCreateWithoutIngredientInputSchema),z.lazy(() => IngredientAllergenUncheckedCreateWithoutIngredientInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => IngredientAllergenCreateOrConnectWithoutIngredientInputSchema),z.lazy(() => IngredientAllergenCreateOrConnectWithoutIngredientInputSchema).array() ]).optional(),
  createMany: z.lazy(() => IngredientAllergenCreateManyIngredientInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => IngredientAllergenWhereUniqueInputSchema),z.lazy(() => IngredientAllergenWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SupplierPriceHistoryUncheckedCreateNestedManyWithoutIngredientInputSchema: z.ZodType<Prisma.SupplierPriceHistoryUncheckedCreateNestedManyWithoutIngredientInput> = z.object({
  create: z.union([ z.lazy(() => SupplierPriceHistoryCreateWithoutIngredientInputSchema),z.lazy(() => SupplierPriceHistoryCreateWithoutIngredientInputSchema).array(),z.lazy(() => SupplierPriceHistoryUncheckedCreateWithoutIngredientInputSchema),z.lazy(() => SupplierPriceHistoryUncheckedCreateWithoutIngredientInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SupplierPriceHistoryCreateOrConnectWithoutIngredientInputSchema),z.lazy(() => SupplierPriceHistoryCreateOrConnectWithoutIngredientInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SupplierPriceHistoryCreateManyIngredientInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema),z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const DietaryRestrictionUncheckedCreateNestedManyWithoutIngredientsInputSchema: z.ZodType<Prisma.DietaryRestrictionUncheckedCreateNestedManyWithoutIngredientsInput> = z.object({
  create: z.union([ z.lazy(() => DietaryRestrictionCreateWithoutIngredientsInputSchema),z.lazy(() => DietaryRestrictionCreateWithoutIngredientsInputSchema).array(),z.lazy(() => DietaryRestrictionUncheckedCreateWithoutIngredientsInputSchema),z.lazy(() => DietaryRestrictionUncheckedCreateWithoutIngredientsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DietaryRestrictionCreateOrConnectWithoutIngredientsInputSchema),z.lazy(() => DietaryRestrictionCreateOrConnectWithoutIngredientsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => DietaryRestrictionWhereUniqueInputSchema),z.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const NullableEnumNutritionSourceFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableEnumNutritionSourceFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => NutritionSourceSchema).optional().nullable()
}).strict();

export const RecipeIngredientUpdateManyWithoutIngredientNestedInputSchema: z.ZodType<Prisma.RecipeIngredientUpdateManyWithoutIngredientNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeIngredientCreateWithoutIngredientInputSchema),z.lazy(() => RecipeIngredientCreateWithoutIngredientInputSchema).array(),z.lazy(() => RecipeIngredientUncheckedCreateWithoutIngredientInputSchema),z.lazy(() => RecipeIngredientUncheckedCreateWithoutIngredientInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeIngredientCreateOrConnectWithoutIngredientInputSchema),z.lazy(() => RecipeIngredientCreateOrConnectWithoutIngredientInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RecipeIngredientUpsertWithWhereUniqueWithoutIngredientInputSchema),z.lazy(() => RecipeIngredientUpsertWithWhereUniqueWithoutIngredientInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeIngredientCreateManyIngredientInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RecipeIngredientWhereUniqueInputSchema),z.lazy(() => RecipeIngredientWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RecipeIngredientWhereUniqueInputSchema),z.lazy(() => RecipeIngredientWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RecipeIngredientWhereUniqueInputSchema),z.lazy(() => RecipeIngredientWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RecipeIngredientWhereUniqueInputSchema),z.lazy(() => RecipeIngredientWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RecipeIngredientUpdateWithWhereUniqueWithoutIngredientInputSchema),z.lazy(() => RecipeIngredientUpdateWithWhereUniqueWithoutIngredientInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RecipeIngredientUpdateManyWithWhereWithoutIngredientInputSchema),z.lazy(() => RecipeIngredientUpdateManyWithWhereWithoutIngredientInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RecipeIngredientScalarWhereInputSchema),z.lazy(() => RecipeIngredientScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const InventoryItemUpdateManyWithoutIngredientNestedInputSchema: z.ZodType<Prisma.InventoryItemUpdateManyWithoutIngredientNestedInput> = z.object({
  create: z.union([ z.lazy(() => InventoryItemCreateWithoutIngredientInputSchema),z.lazy(() => InventoryItemCreateWithoutIngredientInputSchema).array(),z.lazy(() => InventoryItemUncheckedCreateWithoutIngredientInputSchema),z.lazy(() => InventoryItemUncheckedCreateWithoutIngredientInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InventoryItemCreateOrConnectWithoutIngredientInputSchema),z.lazy(() => InventoryItemCreateOrConnectWithoutIngredientInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => InventoryItemUpsertWithWhereUniqueWithoutIngredientInputSchema),z.lazy(() => InventoryItemUpsertWithWhereUniqueWithoutIngredientInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InventoryItemCreateManyIngredientInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => InventoryItemWhereUniqueInputSchema),z.lazy(() => InventoryItemWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => InventoryItemWhereUniqueInputSchema),z.lazy(() => InventoryItemWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => InventoryItemWhereUniqueInputSchema),z.lazy(() => InventoryItemWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => InventoryItemWhereUniqueInputSchema),z.lazy(() => InventoryItemWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => InventoryItemUpdateWithWhereUniqueWithoutIngredientInputSchema),z.lazy(() => InventoryItemUpdateWithWhereUniqueWithoutIngredientInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => InventoryItemUpdateManyWithWhereWithoutIngredientInputSchema),z.lazy(() => InventoryItemUpdateManyWithWhereWithoutIngredientInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => InventoryItemScalarWhereInputSchema),z.lazy(() => InventoryItemScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrderItemUpdateManyWithoutIngredientNestedInputSchema: z.ZodType<Prisma.OrderItemUpdateManyWithoutIngredientNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrderItemCreateWithoutIngredientInputSchema),z.lazy(() => OrderItemCreateWithoutIngredientInputSchema).array(),z.lazy(() => OrderItemUncheckedCreateWithoutIngredientInputSchema),z.lazy(() => OrderItemUncheckedCreateWithoutIngredientInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrderItemCreateOrConnectWithoutIngredientInputSchema),z.lazy(() => OrderItemCreateOrConnectWithoutIngredientInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => OrderItemUpsertWithWhereUniqueWithoutIngredientInputSchema),z.lazy(() => OrderItemUpsertWithWhereUniqueWithoutIngredientInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrderItemCreateManyIngredientInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => OrderItemWhereUniqueInputSchema),z.lazy(() => OrderItemWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => OrderItemWhereUniqueInputSchema),z.lazy(() => OrderItemWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => OrderItemWhereUniqueInputSchema),z.lazy(() => OrderItemWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => OrderItemWhereUniqueInputSchema),z.lazy(() => OrderItemWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => OrderItemUpdateWithWhereUniqueWithoutIngredientInputSchema),z.lazy(() => OrderItemUpdateWithWhereUniqueWithoutIngredientInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => OrderItemUpdateManyWithWhereWithoutIngredientInputSchema),z.lazy(() => OrderItemUpdateManyWithWhereWithoutIngredientInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => OrderItemScalarWhereInputSchema),z.lazy(() => OrderItemScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const VendorUpdateManyWithoutIngredientsNestedInputSchema: z.ZodType<Prisma.VendorUpdateManyWithoutIngredientsNestedInput> = z.object({
  create: z.union([ z.lazy(() => VendorCreateWithoutIngredientsInputSchema),z.lazy(() => VendorCreateWithoutIngredientsInputSchema).array(),z.lazy(() => VendorUncheckedCreateWithoutIngredientsInputSchema),z.lazy(() => VendorUncheckedCreateWithoutIngredientsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => VendorCreateOrConnectWithoutIngredientsInputSchema),z.lazy(() => VendorCreateOrConnectWithoutIngredientsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => VendorUpsertWithWhereUniqueWithoutIngredientsInputSchema),z.lazy(() => VendorUpsertWithWhereUniqueWithoutIngredientsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => VendorWhereUniqueInputSchema),z.lazy(() => VendorWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => VendorWhereUniqueInputSchema),z.lazy(() => VendorWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => VendorWhereUniqueInputSchema),z.lazy(() => VendorWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => VendorWhereUniqueInputSchema),z.lazy(() => VendorWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => VendorUpdateWithWhereUniqueWithoutIngredientsInputSchema),z.lazy(() => VendorUpdateWithWhereUniqueWithoutIngredientsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => VendorUpdateManyWithWhereWithoutIngredientsInputSchema),z.lazy(() => VendorUpdateManyWithWhereWithoutIngredientsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => VendorScalarWhereInputSchema),z.lazy(() => VendorScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const WasteRecordUpdateManyWithoutIngredienteNestedInputSchema: z.ZodType<Prisma.WasteRecordUpdateManyWithoutIngredienteNestedInput> = z.object({
  create: z.union([ z.lazy(() => WasteRecordCreateWithoutIngredienteInputSchema),z.lazy(() => WasteRecordCreateWithoutIngredienteInputSchema).array(),z.lazy(() => WasteRecordUncheckedCreateWithoutIngredienteInputSchema),z.lazy(() => WasteRecordUncheckedCreateWithoutIngredienteInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => WasteRecordCreateOrConnectWithoutIngredienteInputSchema),z.lazy(() => WasteRecordCreateOrConnectWithoutIngredienteInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => WasteRecordUpsertWithWhereUniqueWithoutIngredienteInputSchema),z.lazy(() => WasteRecordUpsertWithWhereUniqueWithoutIngredienteInputSchema).array() ]).optional(),
  createMany: z.lazy(() => WasteRecordCreateManyIngredienteInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => WasteRecordWhereUniqueInputSchema),z.lazy(() => WasteRecordWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => WasteRecordWhereUniqueInputSchema),z.lazy(() => WasteRecordWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => WasteRecordWhereUniqueInputSchema),z.lazy(() => WasteRecordWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => WasteRecordWhereUniqueInputSchema),z.lazy(() => WasteRecordWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => WasteRecordUpdateWithWhereUniqueWithoutIngredienteInputSchema),z.lazy(() => WasteRecordUpdateWithWhereUniqueWithoutIngredienteInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => WasteRecordUpdateManyWithWhereWithoutIngredienteInputSchema),z.lazy(() => WasteRecordUpdateManyWithWhereWithoutIngredienteInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => WasteRecordScalarWhereInputSchema),z.lazy(() => WasteRecordScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const IngredientAllergenUpdateManyWithoutIngredientNestedInputSchema: z.ZodType<Prisma.IngredientAllergenUpdateManyWithoutIngredientNestedInput> = z.object({
  create: z.union([ z.lazy(() => IngredientAllergenCreateWithoutIngredientInputSchema),z.lazy(() => IngredientAllergenCreateWithoutIngredientInputSchema).array(),z.lazy(() => IngredientAllergenUncheckedCreateWithoutIngredientInputSchema),z.lazy(() => IngredientAllergenUncheckedCreateWithoutIngredientInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => IngredientAllergenCreateOrConnectWithoutIngredientInputSchema),z.lazy(() => IngredientAllergenCreateOrConnectWithoutIngredientInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => IngredientAllergenUpsertWithWhereUniqueWithoutIngredientInputSchema),z.lazy(() => IngredientAllergenUpsertWithWhereUniqueWithoutIngredientInputSchema).array() ]).optional(),
  createMany: z.lazy(() => IngredientAllergenCreateManyIngredientInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => IngredientAllergenWhereUniqueInputSchema),z.lazy(() => IngredientAllergenWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => IngredientAllergenWhereUniqueInputSchema),z.lazy(() => IngredientAllergenWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => IngredientAllergenWhereUniqueInputSchema),z.lazy(() => IngredientAllergenWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => IngredientAllergenWhereUniqueInputSchema),z.lazy(() => IngredientAllergenWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => IngredientAllergenUpdateWithWhereUniqueWithoutIngredientInputSchema),z.lazy(() => IngredientAllergenUpdateWithWhereUniqueWithoutIngredientInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => IngredientAllergenUpdateManyWithWhereWithoutIngredientInputSchema),z.lazy(() => IngredientAllergenUpdateManyWithWhereWithoutIngredientInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => IngredientAllergenScalarWhereInputSchema),z.lazy(() => IngredientAllergenScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SupplierPriceHistoryUpdateManyWithoutIngredientNestedInputSchema: z.ZodType<Prisma.SupplierPriceHistoryUpdateManyWithoutIngredientNestedInput> = z.object({
  create: z.union([ z.lazy(() => SupplierPriceHistoryCreateWithoutIngredientInputSchema),z.lazy(() => SupplierPriceHistoryCreateWithoutIngredientInputSchema).array(),z.lazy(() => SupplierPriceHistoryUncheckedCreateWithoutIngredientInputSchema),z.lazy(() => SupplierPriceHistoryUncheckedCreateWithoutIngredientInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SupplierPriceHistoryCreateOrConnectWithoutIngredientInputSchema),z.lazy(() => SupplierPriceHistoryCreateOrConnectWithoutIngredientInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SupplierPriceHistoryUpsertWithWhereUniqueWithoutIngredientInputSchema),z.lazy(() => SupplierPriceHistoryUpsertWithWhereUniqueWithoutIngredientInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SupplierPriceHistoryCreateManyIngredientInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema),z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema),z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema),z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema),z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SupplierPriceHistoryUpdateWithWhereUniqueWithoutIngredientInputSchema),z.lazy(() => SupplierPriceHistoryUpdateWithWhereUniqueWithoutIngredientInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SupplierPriceHistoryUpdateManyWithWhereWithoutIngredientInputSchema),z.lazy(() => SupplierPriceHistoryUpdateManyWithWhereWithoutIngredientInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SupplierPriceHistoryScalarWhereInputSchema),z.lazy(() => SupplierPriceHistoryScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const DietaryRestrictionUpdateManyWithoutIngredientsNestedInputSchema: z.ZodType<Prisma.DietaryRestrictionUpdateManyWithoutIngredientsNestedInput> = z.object({
  create: z.union([ z.lazy(() => DietaryRestrictionCreateWithoutIngredientsInputSchema),z.lazy(() => DietaryRestrictionCreateWithoutIngredientsInputSchema).array(),z.lazy(() => DietaryRestrictionUncheckedCreateWithoutIngredientsInputSchema),z.lazy(() => DietaryRestrictionUncheckedCreateWithoutIngredientsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DietaryRestrictionCreateOrConnectWithoutIngredientsInputSchema),z.lazy(() => DietaryRestrictionCreateOrConnectWithoutIngredientsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => DietaryRestrictionUpsertWithWhereUniqueWithoutIngredientsInputSchema),z.lazy(() => DietaryRestrictionUpsertWithWhereUniqueWithoutIngredientsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => DietaryRestrictionWhereUniqueInputSchema),z.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => DietaryRestrictionWhereUniqueInputSchema),z.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => DietaryRestrictionWhereUniqueInputSchema),z.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => DietaryRestrictionWhereUniqueInputSchema),z.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => DietaryRestrictionUpdateWithWhereUniqueWithoutIngredientsInputSchema),z.lazy(() => DietaryRestrictionUpdateWithWhereUniqueWithoutIngredientsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => DietaryRestrictionUpdateManyWithWhereWithoutIngredientsInputSchema),z.lazy(() => DietaryRestrictionUpdateManyWithWhereWithoutIngredientsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => DietaryRestrictionScalarWhereInputSchema),z.lazy(() => DietaryRestrictionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RecipeIngredientUncheckedUpdateManyWithoutIngredientNestedInputSchema: z.ZodType<Prisma.RecipeIngredientUncheckedUpdateManyWithoutIngredientNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeIngredientCreateWithoutIngredientInputSchema),z.lazy(() => RecipeIngredientCreateWithoutIngredientInputSchema).array(),z.lazy(() => RecipeIngredientUncheckedCreateWithoutIngredientInputSchema),z.lazy(() => RecipeIngredientUncheckedCreateWithoutIngredientInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeIngredientCreateOrConnectWithoutIngredientInputSchema),z.lazy(() => RecipeIngredientCreateOrConnectWithoutIngredientInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RecipeIngredientUpsertWithWhereUniqueWithoutIngredientInputSchema),z.lazy(() => RecipeIngredientUpsertWithWhereUniqueWithoutIngredientInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeIngredientCreateManyIngredientInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RecipeIngredientWhereUniqueInputSchema),z.lazy(() => RecipeIngredientWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RecipeIngredientWhereUniqueInputSchema),z.lazy(() => RecipeIngredientWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RecipeIngredientWhereUniqueInputSchema),z.lazy(() => RecipeIngredientWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RecipeIngredientWhereUniqueInputSchema),z.lazy(() => RecipeIngredientWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RecipeIngredientUpdateWithWhereUniqueWithoutIngredientInputSchema),z.lazy(() => RecipeIngredientUpdateWithWhereUniqueWithoutIngredientInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RecipeIngredientUpdateManyWithWhereWithoutIngredientInputSchema),z.lazy(() => RecipeIngredientUpdateManyWithWhereWithoutIngredientInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RecipeIngredientScalarWhereInputSchema),z.lazy(() => RecipeIngredientScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const InventoryItemUncheckedUpdateManyWithoutIngredientNestedInputSchema: z.ZodType<Prisma.InventoryItemUncheckedUpdateManyWithoutIngredientNestedInput> = z.object({
  create: z.union([ z.lazy(() => InventoryItemCreateWithoutIngredientInputSchema),z.lazy(() => InventoryItemCreateWithoutIngredientInputSchema).array(),z.lazy(() => InventoryItemUncheckedCreateWithoutIngredientInputSchema),z.lazy(() => InventoryItemUncheckedCreateWithoutIngredientInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InventoryItemCreateOrConnectWithoutIngredientInputSchema),z.lazy(() => InventoryItemCreateOrConnectWithoutIngredientInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => InventoryItemUpsertWithWhereUniqueWithoutIngredientInputSchema),z.lazy(() => InventoryItemUpsertWithWhereUniqueWithoutIngredientInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InventoryItemCreateManyIngredientInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => InventoryItemWhereUniqueInputSchema),z.lazy(() => InventoryItemWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => InventoryItemWhereUniqueInputSchema),z.lazy(() => InventoryItemWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => InventoryItemWhereUniqueInputSchema),z.lazy(() => InventoryItemWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => InventoryItemWhereUniqueInputSchema),z.lazy(() => InventoryItemWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => InventoryItemUpdateWithWhereUniqueWithoutIngredientInputSchema),z.lazy(() => InventoryItemUpdateWithWhereUniqueWithoutIngredientInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => InventoryItemUpdateManyWithWhereWithoutIngredientInputSchema),z.lazy(() => InventoryItemUpdateManyWithWhereWithoutIngredientInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => InventoryItemScalarWhereInputSchema),z.lazy(() => InventoryItemScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrderItemUncheckedUpdateManyWithoutIngredientNestedInputSchema: z.ZodType<Prisma.OrderItemUncheckedUpdateManyWithoutIngredientNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrderItemCreateWithoutIngredientInputSchema),z.lazy(() => OrderItemCreateWithoutIngredientInputSchema).array(),z.lazy(() => OrderItemUncheckedCreateWithoutIngredientInputSchema),z.lazy(() => OrderItemUncheckedCreateWithoutIngredientInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrderItemCreateOrConnectWithoutIngredientInputSchema),z.lazy(() => OrderItemCreateOrConnectWithoutIngredientInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => OrderItemUpsertWithWhereUniqueWithoutIngredientInputSchema),z.lazy(() => OrderItemUpsertWithWhereUniqueWithoutIngredientInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrderItemCreateManyIngredientInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => OrderItemWhereUniqueInputSchema),z.lazy(() => OrderItemWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => OrderItemWhereUniqueInputSchema),z.lazy(() => OrderItemWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => OrderItemWhereUniqueInputSchema),z.lazy(() => OrderItemWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => OrderItemWhereUniqueInputSchema),z.lazy(() => OrderItemWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => OrderItemUpdateWithWhereUniqueWithoutIngredientInputSchema),z.lazy(() => OrderItemUpdateWithWhereUniqueWithoutIngredientInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => OrderItemUpdateManyWithWhereWithoutIngredientInputSchema),z.lazy(() => OrderItemUpdateManyWithWhereWithoutIngredientInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => OrderItemScalarWhereInputSchema),z.lazy(() => OrderItemScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const VendorUncheckedUpdateManyWithoutIngredientsNestedInputSchema: z.ZodType<Prisma.VendorUncheckedUpdateManyWithoutIngredientsNestedInput> = z.object({
  create: z.union([ z.lazy(() => VendorCreateWithoutIngredientsInputSchema),z.lazy(() => VendorCreateWithoutIngredientsInputSchema).array(),z.lazy(() => VendorUncheckedCreateWithoutIngredientsInputSchema),z.lazy(() => VendorUncheckedCreateWithoutIngredientsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => VendorCreateOrConnectWithoutIngredientsInputSchema),z.lazy(() => VendorCreateOrConnectWithoutIngredientsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => VendorUpsertWithWhereUniqueWithoutIngredientsInputSchema),z.lazy(() => VendorUpsertWithWhereUniqueWithoutIngredientsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => VendorWhereUniqueInputSchema),z.lazy(() => VendorWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => VendorWhereUniqueInputSchema),z.lazy(() => VendorWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => VendorWhereUniqueInputSchema),z.lazy(() => VendorWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => VendorWhereUniqueInputSchema),z.lazy(() => VendorWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => VendorUpdateWithWhereUniqueWithoutIngredientsInputSchema),z.lazy(() => VendorUpdateWithWhereUniqueWithoutIngredientsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => VendorUpdateManyWithWhereWithoutIngredientsInputSchema),z.lazy(() => VendorUpdateManyWithWhereWithoutIngredientsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => VendorScalarWhereInputSchema),z.lazy(() => VendorScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const WasteRecordUncheckedUpdateManyWithoutIngredienteNestedInputSchema: z.ZodType<Prisma.WasteRecordUncheckedUpdateManyWithoutIngredienteNestedInput> = z.object({
  create: z.union([ z.lazy(() => WasteRecordCreateWithoutIngredienteInputSchema),z.lazy(() => WasteRecordCreateWithoutIngredienteInputSchema).array(),z.lazy(() => WasteRecordUncheckedCreateWithoutIngredienteInputSchema),z.lazy(() => WasteRecordUncheckedCreateWithoutIngredienteInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => WasteRecordCreateOrConnectWithoutIngredienteInputSchema),z.lazy(() => WasteRecordCreateOrConnectWithoutIngredienteInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => WasteRecordUpsertWithWhereUniqueWithoutIngredienteInputSchema),z.lazy(() => WasteRecordUpsertWithWhereUniqueWithoutIngredienteInputSchema).array() ]).optional(),
  createMany: z.lazy(() => WasteRecordCreateManyIngredienteInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => WasteRecordWhereUniqueInputSchema),z.lazy(() => WasteRecordWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => WasteRecordWhereUniqueInputSchema),z.lazy(() => WasteRecordWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => WasteRecordWhereUniqueInputSchema),z.lazy(() => WasteRecordWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => WasteRecordWhereUniqueInputSchema),z.lazy(() => WasteRecordWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => WasteRecordUpdateWithWhereUniqueWithoutIngredienteInputSchema),z.lazy(() => WasteRecordUpdateWithWhereUniqueWithoutIngredienteInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => WasteRecordUpdateManyWithWhereWithoutIngredienteInputSchema),z.lazy(() => WasteRecordUpdateManyWithWhereWithoutIngredienteInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => WasteRecordScalarWhereInputSchema),z.lazy(() => WasteRecordScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const IngredientAllergenUncheckedUpdateManyWithoutIngredientNestedInputSchema: z.ZodType<Prisma.IngredientAllergenUncheckedUpdateManyWithoutIngredientNestedInput> = z.object({
  create: z.union([ z.lazy(() => IngredientAllergenCreateWithoutIngredientInputSchema),z.lazy(() => IngredientAllergenCreateWithoutIngredientInputSchema).array(),z.lazy(() => IngredientAllergenUncheckedCreateWithoutIngredientInputSchema),z.lazy(() => IngredientAllergenUncheckedCreateWithoutIngredientInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => IngredientAllergenCreateOrConnectWithoutIngredientInputSchema),z.lazy(() => IngredientAllergenCreateOrConnectWithoutIngredientInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => IngredientAllergenUpsertWithWhereUniqueWithoutIngredientInputSchema),z.lazy(() => IngredientAllergenUpsertWithWhereUniqueWithoutIngredientInputSchema).array() ]).optional(),
  createMany: z.lazy(() => IngredientAllergenCreateManyIngredientInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => IngredientAllergenWhereUniqueInputSchema),z.lazy(() => IngredientAllergenWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => IngredientAllergenWhereUniqueInputSchema),z.lazy(() => IngredientAllergenWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => IngredientAllergenWhereUniqueInputSchema),z.lazy(() => IngredientAllergenWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => IngredientAllergenWhereUniqueInputSchema),z.lazy(() => IngredientAllergenWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => IngredientAllergenUpdateWithWhereUniqueWithoutIngredientInputSchema),z.lazy(() => IngredientAllergenUpdateWithWhereUniqueWithoutIngredientInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => IngredientAllergenUpdateManyWithWhereWithoutIngredientInputSchema),z.lazy(() => IngredientAllergenUpdateManyWithWhereWithoutIngredientInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => IngredientAllergenScalarWhereInputSchema),z.lazy(() => IngredientAllergenScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SupplierPriceHistoryUncheckedUpdateManyWithoutIngredientNestedInputSchema: z.ZodType<Prisma.SupplierPriceHistoryUncheckedUpdateManyWithoutIngredientNestedInput> = z.object({
  create: z.union([ z.lazy(() => SupplierPriceHistoryCreateWithoutIngredientInputSchema),z.lazy(() => SupplierPriceHistoryCreateWithoutIngredientInputSchema).array(),z.lazy(() => SupplierPriceHistoryUncheckedCreateWithoutIngredientInputSchema),z.lazy(() => SupplierPriceHistoryUncheckedCreateWithoutIngredientInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SupplierPriceHistoryCreateOrConnectWithoutIngredientInputSchema),z.lazy(() => SupplierPriceHistoryCreateOrConnectWithoutIngredientInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SupplierPriceHistoryUpsertWithWhereUniqueWithoutIngredientInputSchema),z.lazy(() => SupplierPriceHistoryUpsertWithWhereUniqueWithoutIngredientInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SupplierPriceHistoryCreateManyIngredientInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema),z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema),z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema),z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema),z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SupplierPriceHistoryUpdateWithWhereUniqueWithoutIngredientInputSchema),z.lazy(() => SupplierPriceHistoryUpdateWithWhereUniqueWithoutIngredientInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SupplierPriceHistoryUpdateManyWithWhereWithoutIngredientInputSchema),z.lazy(() => SupplierPriceHistoryUpdateManyWithWhereWithoutIngredientInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SupplierPriceHistoryScalarWhereInputSchema),z.lazy(() => SupplierPriceHistoryScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const DietaryRestrictionUncheckedUpdateManyWithoutIngredientsNestedInputSchema: z.ZodType<Prisma.DietaryRestrictionUncheckedUpdateManyWithoutIngredientsNestedInput> = z.object({
  create: z.union([ z.lazy(() => DietaryRestrictionCreateWithoutIngredientsInputSchema),z.lazy(() => DietaryRestrictionCreateWithoutIngredientsInputSchema).array(),z.lazy(() => DietaryRestrictionUncheckedCreateWithoutIngredientsInputSchema),z.lazy(() => DietaryRestrictionUncheckedCreateWithoutIngredientsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DietaryRestrictionCreateOrConnectWithoutIngredientsInputSchema),z.lazy(() => DietaryRestrictionCreateOrConnectWithoutIngredientsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => DietaryRestrictionUpsertWithWhereUniqueWithoutIngredientsInputSchema),z.lazy(() => DietaryRestrictionUpsertWithWhereUniqueWithoutIngredientsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => DietaryRestrictionWhereUniqueInputSchema),z.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => DietaryRestrictionWhereUniqueInputSchema),z.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => DietaryRestrictionWhereUniqueInputSchema),z.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => DietaryRestrictionWhereUniqueInputSchema),z.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => DietaryRestrictionUpdateWithWhereUniqueWithoutIngredientsInputSchema),z.lazy(() => DietaryRestrictionUpdateWithWhereUniqueWithoutIngredientsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => DietaryRestrictionUpdateManyWithWhereWithoutIngredientsInputSchema),z.lazy(() => DietaryRestrictionUpdateManyWithWhereWithoutIngredientsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => DietaryRestrictionScalarWhereInputSchema),z.lazy(() => DietaryRestrictionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RecipeIngredientCreatesubstituteIngredientsInputSchema: z.ZodType<Prisma.RecipeIngredientCreatesubstituteIngredientsInput> = z.object({
  set: z.number().array()
}).strict();

export const RecipeCreateNestedOneWithoutIngredientsInputSchema: z.ZodType<Prisma.RecipeCreateNestedOneWithoutIngredientsInput> = z.object({
  create: z.union([ z.lazy(() => RecipeCreateWithoutIngredientsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutIngredientsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RecipeCreateOrConnectWithoutIngredientsInputSchema).optional(),
  connect: z.lazy(() => RecipeWhereUniqueInputSchema).optional()
}).strict();

export const IngredientCreateNestedOneWithoutRecipeIngredientsInputSchema: z.ZodType<Prisma.IngredientCreateNestedOneWithoutRecipeIngredientsInput> = z.object({
  create: z.union([ z.lazy(() => IngredientCreateWithoutRecipeIngredientsInputSchema),z.lazy(() => IngredientUncheckedCreateWithoutRecipeIngredientsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => IngredientCreateOrConnectWithoutRecipeIngredientsInputSchema).optional(),
  connect: z.lazy(() => IngredientWhereUniqueInputSchema).optional()
}).strict();

export const RecipeVersionCreateNestedOneWithoutIngredientsInputSchema: z.ZodType<Prisma.RecipeVersionCreateNestedOneWithoutIngredientsInput> = z.object({
  create: z.union([ z.lazy(() => RecipeVersionCreateWithoutIngredientsInputSchema),z.lazy(() => RecipeVersionUncheckedCreateWithoutIngredientsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RecipeVersionCreateOrConnectWithoutIngredientsInputSchema).optional(),
  connect: z.lazy(() => RecipeVersionWhereUniqueInputSchema).optional()
}).strict();

export const RecipeIngredientUpdatesubstituteIngredientsInputSchema: z.ZodType<Prisma.RecipeIngredientUpdatesubstituteIngredientsInput> = z.object({
  set: z.number().array().optional(),
  push: z.union([ z.number(),z.number().array() ]).optional(),
}).strict();

export const RecipeUpdateOneRequiredWithoutIngredientsNestedInputSchema: z.ZodType<Prisma.RecipeUpdateOneRequiredWithoutIngredientsNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeCreateWithoutIngredientsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutIngredientsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RecipeCreateOrConnectWithoutIngredientsInputSchema).optional(),
  upsert: z.lazy(() => RecipeUpsertWithoutIngredientsInputSchema).optional(),
  connect: z.lazy(() => RecipeWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RecipeUpdateToOneWithWhereWithoutIngredientsInputSchema),z.lazy(() => RecipeUpdateWithoutIngredientsInputSchema),z.lazy(() => RecipeUncheckedUpdateWithoutIngredientsInputSchema) ]).optional(),
}).strict();

export const IngredientUpdateOneRequiredWithoutRecipeIngredientsNestedInputSchema: z.ZodType<Prisma.IngredientUpdateOneRequiredWithoutRecipeIngredientsNestedInput> = z.object({
  create: z.union([ z.lazy(() => IngredientCreateWithoutRecipeIngredientsInputSchema),z.lazy(() => IngredientUncheckedCreateWithoutRecipeIngredientsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => IngredientCreateOrConnectWithoutRecipeIngredientsInputSchema).optional(),
  upsert: z.lazy(() => IngredientUpsertWithoutRecipeIngredientsInputSchema).optional(),
  connect: z.lazy(() => IngredientWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => IngredientUpdateToOneWithWhereWithoutRecipeIngredientsInputSchema),z.lazy(() => IngredientUpdateWithoutRecipeIngredientsInputSchema),z.lazy(() => IngredientUncheckedUpdateWithoutRecipeIngredientsInputSchema) ]).optional(),
}).strict();

export const RecipeVersionUpdateOneWithoutIngredientsNestedInputSchema: z.ZodType<Prisma.RecipeVersionUpdateOneWithoutIngredientsNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeVersionCreateWithoutIngredientsInputSchema),z.lazy(() => RecipeVersionUncheckedCreateWithoutIngredientsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RecipeVersionCreateOrConnectWithoutIngredientsInputSchema).optional(),
  upsert: z.lazy(() => RecipeVersionUpsertWithoutIngredientsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => RecipeVersionWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => RecipeVersionWhereInputSchema) ]).optional(),
  connect: z.lazy(() => RecipeVersionWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RecipeVersionUpdateToOneWithWhereWithoutIngredientsInputSchema),z.lazy(() => RecipeVersionUpdateWithoutIngredientsInputSchema),z.lazy(() => RecipeVersionUncheckedUpdateWithoutIngredientsInputSchema) ]).optional(),
}).strict();

export const RecipeCreateNestedOneWithoutInstructionsInputSchema: z.ZodType<Prisma.RecipeCreateNestedOneWithoutInstructionsInput> = z.object({
  create: z.union([ z.lazy(() => RecipeCreateWithoutInstructionsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutInstructionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RecipeCreateOrConnectWithoutInstructionsInputSchema).optional(),
  connect: z.lazy(() => RecipeWhereUniqueInputSchema).optional()
}).strict();

export const RecipeVersionCreateNestedOneWithoutInstructionsInputSchema: z.ZodType<Prisma.RecipeVersionCreateNestedOneWithoutInstructionsInput> = z.object({
  create: z.union([ z.lazy(() => RecipeVersionCreateWithoutInstructionsInputSchema),z.lazy(() => RecipeVersionUncheckedCreateWithoutInstructionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RecipeVersionCreateOrConnectWithoutInstructionsInputSchema).optional(),
  connect: z.lazy(() => RecipeVersionWhereUniqueInputSchema).optional()
}).strict();

export const RecipeEquipmentCreateNestedManyWithoutRecipeInstructionInputSchema: z.ZodType<Prisma.RecipeEquipmentCreateNestedManyWithoutRecipeInstructionInput> = z.object({
  create: z.union([ z.lazy(() => RecipeEquipmentCreateWithoutRecipeInstructionInputSchema),z.lazy(() => RecipeEquipmentCreateWithoutRecipeInstructionInputSchema).array(),z.lazy(() => RecipeEquipmentUncheckedCreateWithoutRecipeInstructionInputSchema),z.lazy(() => RecipeEquipmentUncheckedCreateWithoutRecipeInstructionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeEquipmentCreateOrConnectWithoutRecipeInstructionInputSchema),z.lazy(() => RecipeEquipmentCreateOrConnectWithoutRecipeInstructionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeEquipmentCreateManyRecipeInstructionInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RecipeEquipmentWhereUniqueInputSchema),z.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInstructionInputSchema: z.ZodType<Prisma.RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInstructionInput> = z.object({
  create: z.union([ z.lazy(() => RecipeEquipmentCreateWithoutRecipeInstructionInputSchema),z.lazy(() => RecipeEquipmentCreateWithoutRecipeInstructionInputSchema).array(),z.lazy(() => RecipeEquipmentUncheckedCreateWithoutRecipeInstructionInputSchema),z.lazy(() => RecipeEquipmentUncheckedCreateWithoutRecipeInstructionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeEquipmentCreateOrConnectWithoutRecipeInstructionInputSchema),z.lazy(() => RecipeEquipmentCreateOrConnectWithoutRecipeInstructionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeEquipmentCreateManyRecipeInstructionInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RecipeEquipmentWhereUniqueInputSchema),z.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RecipeUpdateOneRequiredWithoutInstructionsNestedInputSchema: z.ZodType<Prisma.RecipeUpdateOneRequiredWithoutInstructionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeCreateWithoutInstructionsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutInstructionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RecipeCreateOrConnectWithoutInstructionsInputSchema).optional(),
  upsert: z.lazy(() => RecipeUpsertWithoutInstructionsInputSchema).optional(),
  connect: z.lazy(() => RecipeWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RecipeUpdateToOneWithWhereWithoutInstructionsInputSchema),z.lazy(() => RecipeUpdateWithoutInstructionsInputSchema),z.lazy(() => RecipeUncheckedUpdateWithoutInstructionsInputSchema) ]).optional(),
}).strict();

export const RecipeVersionUpdateOneWithoutInstructionsNestedInputSchema: z.ZodType<Prisma.RecipeVersionUpdateOneWithoutInstructionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeVersionCreateWithoutInstructionsInputSchema),z.lazy(() => RecipeVersionUncheckedCreateWithoutInstructionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RecipeVersionCreateOrConnectWithoutInstructionsInputSchema).optional(),
  upsert: z.lazy(() => RecipeVersionUpsertWithoutInstructionsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => RecipeVersionWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => RecipeVersionWhereInputSchema) ]).optional(),
  connect: z.lazy(() => RecipeVersionWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RecipeVersionUpdateToOneWithWhereWithoutInstructionsInputSchema),z.lazy(() => RecipeVersionUpdateWithoutInstructionsInputSchema),z.lazy(() => RecipeVersionUncheckedUpdateWithoutInstructionsInputSchema) ]).optional(),
}).strict();

export const RecipeEquipmentUpdateManyWithoutRecipeInstructionNestedInputSchema: z.ZodType<Prisma.RecipeEquipmentUpdateManyWithoutRecipeInstructionNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeEquipmentCreateWithoutRecipeInstructionInputSchema),z.lazy(() => RecipeEquipmentCreateWithoutRecipeInstructionInputSchema).array(),z.lazy(() => RecipeEquipmentUncheckedCreateWithoutRecipeInstructionInputSchema),z.lazy(() => RecipeEquipmentUncheckedCreateWithoutRecipeInstructionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeEquipmentCreateOrConnectWithoutRecipeInstructionInputSchema),z.lazy(() => RecipeEquipmentCreateOrConnectWithoutRecipeInstructionInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RecipeEquipmentUpsertWithWhereUniqueWithoutRecipeInstructionInputSchema),z.lazy(() => RecipeEquipmentUpsertWithWhereUniqueWithoutRecipeInstructionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeEquipmentCreateManyRecipeInstructionInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RecipeEquipmentWhereUniqueInputSchema),z.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RecipeEquipmentWhereUniqueInputSchema),z.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RecipeEquipmentWhereUniqueInputSchema),z.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RecipeEquipmentWhereUniqueInputSchema),z.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RecipeEquipmentUpdateWithWhereUniqueWithoutRecipeInstructionInputSchema),z.lazy(() => RecipeEquipmentUpdateWithWhereUniqueWithoutRecipeInstructionInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RecipeEquipmentUpdateManyWithWhereWithoutRecipeInstructionInputSchema),z.lazy(() => RecipeEquipmentUpdateManyWithWhereWithoutRecipeInstructionInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RecipeEquipmentScalarWhereInputSchema),z.lazy(() => RecipeEquipmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RecipeEquipmentUncheckedUpdateManyWithoutRecipeInstructionNestedInputSchema: z.ZodType<Prisma.RecipeEquipmentUncheckedUpdateManyWithoutRecipeInstructionNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeEquipmentCreateWithoutRecipeInstructionInputSchema),z.lazy(() => RecipeEquipmentCreateWithoutRecipeInstructionInputSchema).array(),z.lazy(() => RecipeEquipmentUncheckedCreateWithoutRecipeInstructionInputSchema),z.lazy(() => RecipeEquipmentUncheckedCreateWithoutRecipeInstructionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeEquipmentCreateOrConnectWithoutRecipeInstructionInputSchema),z.lazy(() => RecipeEquipmentCreateOrConnectWithoutRecipeInstructionInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RecipeEquipmentUpsertWithWhereUniqueWithoutRecipeInstructionInputSchema),z.lazy(() => RecipeEquipmentUpsertWithWhereUniqueWithoutRecipeInstructionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RecipeEquipmentCreateManyRecipeInstructionInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RecipeEquipmentWhereUniqueInputSchema),z.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RecipeEquipmentWhereUniqueInputSchema),z.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RecipeEquipmentWhereUniqueInputSchema),z.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RecipeEquipmentWhereUniqueInputSchema),z.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RecipeEquipmentUpdateWithWhereUniqueWithoutRecipeInstructionInputSchema),z.lazy(() => RecipeEquipmentUpdateWithWhereUniqueWithoutRecipeInstructionInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RecipeEquipmentUpdateManyWithWhereWithoutRecipeInstructionInputSchema),z.lazy(() => RecipeEquipmentUpdateManyWithWhereWithoutRecipeInstructionInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RecipeEquipmentScalarWhereInputSchema),z.lazy(() => RecipeEquipmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const InventoryCreateNestedOneWithoutItemsInputSchema: z.ZodType<Prisma.InventoryCreateNestedOneWithoutItemsInput> = z.object({
  create: z.union([ z.lazy(() => InventoryCreateWithoutItemsInputSchema),z.lazy(() => InventoryUncheckedCreateWithoutItemsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => InventoryCreateOrConnectWithoutItemsInputSchema).optional(),
  connect: z.lazy(() => InventoryWhereUniqueInputSchema).optional()
}).strict();

export const IngredientCreateNestedOneWithoutInventoryItemsInputSchema: z.ZodType<Prisma.IngredientCreateNestedOneWithoutInventoryItemsInput> = z.object({
  create: z.union([ z.lazy(() => IngredientCreateWithoutInventoryItemsInputSchema),z.lazy(() => IngredientUncheckedCreateWithoutInventoryItemsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => IngredientCreateOrConnectWithoutInventoryItemsInputSchema).optional(),
  connect: z.lazy(() => IngredientWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutInventoryUpdatesInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutInventoryUpdatesInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutInventoryUpdatesInputSchema),z.lazy(() => UserUncheckedCreateWithoutInventoryUpdatesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutInventoryUpdatesInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const InventoryTransactionCreateNestedManyWithoutItemInputSchema: z.ZodType<Prisma.InventoryTransactionCreateNestedManyWithoutItemInput> = z.object({
  create: z.union([ z.lazy(() => InventoryTransactionCreateWithoutItemInputSchema),z.lazy(() => InventoryTransactionCreateWithoutItemInputSchema).array(),z.lazy(() => InventoryTransactionUncheckedCreateWithoutItemInputSchema),z.lazy(() => InventoryTransactionUncheckedCreateWithoutItemInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InventoryTransactionCreateOrConnectWithoutItemInputSchema),z.lazy(() => InventoryTransactionCreateOrConnectWithoutItemInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InventoryTransactionCreateManyItemInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => InventoryTransactionWhereUniqueInputSchema),z.lazy(() => InventoryTransactionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const InventoryWithdrawalCreateNestedManyWithoutInventoryItemInputSchema: z.ZodType<Prisma.InventoryWithdrawalCreateNestedManyWithoutInventoryItemInput> = z.object({
  create: z.union([ z.lazy(() => InventoryWithdrawalCreateWithoutInventoryItemInputSchema),z.lazy(() => InventoryWithdrawalCreateWithoutInventoryItemInputSchema).array(),z.lazy(() => InventoryWithdrawalUncheckedCreateWithoutInventoryItemInputSchema),z.lazy(() => InventoryWithdrawalUncheckedCreateWithoutInventoryItemInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InventoryWithdrawalCreateOrConnectWithoutInventoryItemInputSchema),z.lazy(() => InventoryWithdrawalCreateOrConnectWithoutInventoryItemInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InventoryWithdrawalCreateManyInventoryItemInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema),z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const StockCountItemCreateNestedManyWithoutItemInputSchema: z.ZodType<Prisma.StockCountItemCreateNestedManyWithoutItemInput> = z.object({
  create: z.union([ z.lazy(() => StockCountItemCreateWithoutItemInputSchema),z.lazy(() => StockCountItemCreateWithoutItemInputSchema).array(),z.lazy(() => StockCountItemUncheckedCreateWithoutItemInputSchema),z.lazy(() => StockCountItemUncheckedCreateWithoutItemInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => StockCountItemCreateOrConnectWithoutItemInputSchema),z.lazy(() => StockCountItemCreateOrConnectWithoutItemInputSchema).array() ]).optional(),
  createMany: z.lazy(() => StockCountItemCreateManyItemInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => StockCountItemWhereUniqueInputSchema),z.lazy(() => StockCountItemWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const InventoryTransactionUncheckedCreateNestedManyWithoutItemInputSchema: z.ZodType<Prisma.InventoryTransactionUncheckedCreateNestedManyWithoutItemInput> = z.object({
  create: z.union([ z.lazy(() => InventoryTransactionCreateWithoutItemInputSchema),z.lazy(() => InventoryTransactionCreateWithoutItemInputSchema).array(),z.lazy(() => InventoryTransactionUncheckedCreateWithoutItemInputSchema),z.lazy(() => InventoryTransactionUncheckedCreateWithoutItemInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InventoryTransactionCreateOrConnectWithoutItemInputSchema),z.lazy(() => InventoryTransactionCreateOrConnectWithoutItemInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InventoryTransactionCreateManyItemInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => InventoryTransactionWhereUniqueInputSchema),z.lazy(() => InventoryTransactionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const InventoryWithdrawalUncheckedCreateNestedManyWithoutInventoryItemInputSchema: z.ZodType<Prisma.InventoryWithdrawalUncheckedCreateNestedManyWithoutInventoryItemInput> = z.object({
  create: z.union([ z.lazy(() => InventoryWithdrawalCreateWithoutInventoryItemInputSchema),z.lazy(() => InventoryWithdrawalCreateWithoutInventoryItemInputSchema).array(),z.lazy(() => InventoryWithdrawalUncheckedCreateWithoutInventoryItemInputSchema),z.lazy(() => InventoryWithdrawalUncheckedCreateWithoutInventoryItemInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InventoryWithdrawalCreateOrConnectWithoutInventoryItemInputSchema),z.lazy(() => InventoryWithdrawalCreateOrConnectWithoutInventoryItemInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InventoryWithdrawalCreateManyInventoryItemInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema),z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const StockCountItemUncheckedCreateNestedManyWithoutItemInputSchema: z.ZodType<Prisma.StockCountItemUncheckedCreateNestedManyWithoutItemInput> = z.object({
  create: z.union([ z.lazy(() => StockCountItemCreateWithoutItemInputSchema),z.lazy(() => StockCountItemCreateWithoutItemInputSchema).array(),z.lazy(() => StockCountItemUncheckedCreateWithoutItemInputSchema),z.lazy(() => StockCountItemUncheckedCreateWithoutItemInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => StockCountItemCreateOrConnectWithoutItemInputSchema),z.lazy(() => StockCountItemCreateOrConnectWithoutItemInputSchema).array() ]).optional(),
  createMany: z.lazy(() => StockCountItemCreateManyItemInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => StockCountItemWhereUniqueInputSchema),z.lazy(() => StockCountItemWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const InventoryUpdateOneRequiredWithoutItemsNestedInputSchema: z.ZodType<Prisma.InventoryUpdateOneRequiredWithoutItemsNestedInput> = z.object({
  create: z.union([ z.lazy(() => InventoryCreateWithoutItemsInputSchema),z.lazy(() => InventoryUncheckedCreateWithoutItemsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => InventoryCreateOrConnectWithoutItemsInputSchema).optional(),
  upsert: z.lazy(() => InventoryUpsertWithoutItemsInputSchema).optional(),
  connect: z.lazy(() => InventoryWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => InventoryUpdateToOneWithWhereWithoutItemsInputSchema),z.lazy(() => InventoryUpdateWithoutItemsInputSchema),z.lazy(() => InventoryUncheckedUpdateWithoutItemsInputSchema) ]).optional(),
}).strict();

export const IngredientUpdateOneRequiredWithoutInventoryItemsNestedInputSchema: z.ZodType<Prisma.IngredientUpdateOneRequiredWithoutInventoryItemsNestedInput> = z.object({
  create: z.union([ z.lazy(() => IngredientCreateWithoutInventoryItemsInputSchema),z.lazy(() => IngredientUncheckedCreateWithoutInventoryItemsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => IngredientCreateOrConnectWithoutInventoryItemsInputSchema).optional(),
  upsert: z.lazy(() => IngredientUpsertWithoutInventoryItemsInputSchema).optional(),
  connect: z.lazy(() => IngredientWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => IngredientUpdateToOneWithWhereWithoutInventoryItemsInputSchema),z.lazy(() => IngredientUpdateWithoutInventoryItemsInputSchema),z.lazy(() => IngredientUncheckedUpdateWithoutInventoryItemsInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneWithoutInventoryUpdatesNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutInventoryUpdatesNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutInventoryUpdatesInputSchema),z.lazy(() => UserUncheckedCreateWithoutInventoryUpdatesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutInventoryUpdatesInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutInventoryUpdatesInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutInventoryUpdatesInputSchema),z.lazy(() => UserUpdateWithoutInventoryUpdatesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutInventoryUpdatesInputSchema) ]).optional(),
}).strict();

export const InventoryTransactionUpdateManyWithoutItemNestedInputSchema: z.ZodType<Prisma.InventoryTransactionUpdateManyWithoutItemNestedInput> = z.object({
  create: z.union([ z.lazy(() => InventoryTransactionCreateWithoutItemInputSchema),z.lazy(() => InventoryTransactionCreateWithoutItemInputSchema).array(),z.lazy(() => InventoryTransactionUncheckedCreateWithoutItemInputSchema),z.lazy(() => InventoryTransactionUncheckedCreateWithoutItemInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InventoryTransactionCreateOrConnectWithoutItemInputSchema),z.lazy(() => InventoryTransactionCreateOrConnectWithoutItemInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => InventoryTransactionUpsertWithWhereUniqueWithoutItemInputSchema),z.lazy(() => InventoryTransactionUpsertWithWhereUniqueWithoutItemInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InventoryTransactionCreateManyItemInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => InventoryTransactionWhereUniqueInputSchema),z.lazy(() => InventoryTransactionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => InventoryTransactionWhereUniqueInputSchema),z.lazy(() => InventoryTransactionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => InventoryTransactionWhereUniqueInputSchema),z.lazy(() => InventoryTransactionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => InventoryTransactionWhereUniqueInputSchema),z.lazy(() => InventoryTransactionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => InventoryTransactionUpdateWithWhereUniqueWithoutItemInputSchema),z.lazy(() => InventoryTransactionUpdateWithWhereUniqueWithoutItemInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => InventoryTransactionUpdateManyWithWhereWithoutItemInputSchema),z.lazy(() => InventoryTransactionUpdateManyWithWhereWithoutItemInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => InventoryTransactionScalarWhereInputSchema),z.lazy(() => InventoryTransactionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const InventoryWithdrawalUpdateManyWithoutInventoryItemNestedInputSchema: z.ZodType<Prisma.InventoryWithdrawalUpdateManyWithoutInventoryItemNestedInput> = z.object({
  create: z.union([ z.lazy(() => InventoryWithdrawalCreateWithoutInventoryItemInputSchema),z.lazy(() => InventoryWithdrawalCreateWithoutInventoryItemInputSchema).array(),z.lazy(() => InventoryWithdrawalUncheckedCreateWithoutInventoryItemInputSchema),z.lazy(() => InventoryWithdrawalUncheckedCreateWithoutInventoryItemInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InventoryWithdrawalCreateOrConnectWithoutInventoryItemInputSchema),z.lazy(() => InventoryWithdrawalCreateOrConnectWithoutInventoryItemInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => InventoryWithdrawalUpsertWithWhereUniqueWithoutInventoryItemInputSchema),z.lazy(() => InventoryWithdrawalUpsertWithWhereUniqueWithoutInventoryItemInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InventoryWithdrawalCreateManyInventoryItemInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema),z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema),z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema),z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema),z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => InventoryWithdrawalUpdateWithWhereUniqueWithoutInventoryItemInputSchema),z.lazy(() => InventoryWithdrawalUpdateWithWhereUniqueWithoutInventoryItemInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => InventoryWithdrawalUpdateManyWithWhereWithoutInventoryItemInputSchema),z.lazy(() => InventoryWithdrawalUpdateManyWithWhereWithoutInventoryItemInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => InventoryWithdrawalScalarWhereInputSchema),z.lazy(() => InventoryWithdrawalScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const StockCountItemUpdateManyWithoutItemNestedInputSchema: z.ZodType<Prisma.StockCountItemUpdateManyWithoutItemNestedInput> = z.object({
  create: z.union([ z.lazy(() => StockCountItemCreateWithoutItemInputSchema),z.lazy(() => StockCountItemCreateWithoutItemInputSchema).array(),z.lazy(() => StockCountItemUncheckedCreateWithoutItemInputSchema),z.lazy(() => StockCountItemUncheckedCreateWithoutItemInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => StockCountItemCreateOrConnectWithoutItemInputSchema),z.lazy(() => StockCountItemCreateOrConnectWithoutItemInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => StockCountItemUpsertWithWhereUniqueWithoutItemInputSchema),z.lazy(() => StockCountItemUpsertWithWhereUniqueWithoutItemInputSchema).array() ]).optional(),
  createMany: z.lazy(() => StockCountItemCreateManyItemInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => StockCountItemWhereUniqueInputSchema),z.lazy(() => StockCountItemWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => StockCountItemWhereUniqueInputSchema),z.lazy(() => StockCountItemWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => StockCountItemWhereUniqueInputSchema),z.lazy(() => StockCountItemWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => StockCountItemWhereUniqueInputSchema),z.lazy(() => StockCountItemWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => StockCountItemUpdateWithWhereUniqueWithoutItemInputSchema),z.lazy(() => StockCountItemUpdateWithWhereUniqueWithoutItemInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => StockCountItemUpdateManyWithWhereWithoutItemInputSchema),z.lazy(() => StockCountItemUpdateManyWithWhereWithoutItemInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => StockCountItemScalarWhereInputSchema),z.lazy(() => StockCountItemScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const InventoryTransactionUncheckedUpdateManyWithoutItemNestedInputSchema: z.ZodType<Prisma.InventoryTransactionUncheckedUpdateManyWithoutItemNestedInput> = z.object({
  create: z.union([ z.lazy(() => InventoryTransactionCreateWithoutItemInputSchema),z.lazy(() => InventoryTransactionCreateWithoutItemInputSchema).array(),z.lazy(() => InventoryTransactionUncheckedCreateWithoutItemInputSchema),z.lazy(() => InventoryTransactionUncheckedCreateWithoutItemInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InventoryTransactionCreateOrConnectWithoutItemInputSchema),z.lazy(() => InventoryTransactionCreateOrConnectWithoutItemInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => InventoryTransactionUpsertWithWhereUniqueWithoutItemInputSchema),z.lazy(() => InventoryTransactionUpsertWithWhereUniqueWithoutItemInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InventoryTransactionCreateManyItemInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => InventoryTransactionWhereUniqueInputSchema),z.lazy(() => InventoryTransactionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => InventoryTransactionWhereUniqueInputSchema),z.lazy(() => InventoryTransactionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => InventoryTransactionWhereUniqueInputSchema),z.lazy(() => InventoryTransactionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => InventoryTransactionWhereUniqueInputSchema),z.lazy(() => InventoryTransactionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => InventoryTransactionUpdateWithWhereUniqueWithoutItemInputSchema),z.lazy(() => InventoryTransactionUpdateWithWhereUniqueWithoutItemInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => InventoryTransactionUpdateManyWithWhereWithoutItemInputSchema),z.lazy(() => InventoryTransactionUpdateManyWithWhereWithoutItemInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => InventoryTransactionScalarWhereInputSchema),z.lazy(() => InventoryTransactionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const InventoryWithdrawalUncheckedUpdateManyWithoutInventoryItemNestedInputSchema: z.ZodType<Prisma.InventoryWithdrawalUncheckedUpdateManyWithoutInventoryItemNestedInput> = z.object({
  create: z.union([ z.lazy(() => InventoryWithdrawalCreateWithoutInventoryItemInputSchema),z.lazy(() => InventoryWithdrawalCreateWithoutInventoryItemInputSchema).array(),z.lazy(() => InventoryWithdrawalUncheckedCreateWithoutInventoryItemInputSchema),z.lazy(() => InventoryWithdrawalUncheckedCreateWithoutInventoryItemInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InventoryWithdrawalCreateOrConnectWithoutInventoryItemInputSchema),z.lazy(() => InventoryWithdrawalCreateOrConnectWithoutInventoryItemInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => InventoryWithdrawalUpsertWithWhereUniqueWithoutInventoryItemInputSchema),z.lazy(() => InventoryWithdrawalUpsertWithWhereUniqueWithoutInventoryItemInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InventoryWithdrawalCreateManyInventoryItemInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema),z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema),z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema),z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema),z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => InventoryWithdrawalUpdateWithWhereUniqueWithoutInventoryItemInputSchema),z.lazy(() => InventoryWithdrawalUpdateWithWhereUniqueWithoutInventoryItemInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => InventoryWithdrawalUpdateManyWithWhereWithoutInventoryItemInputSchema),z.lazy(() => InventoryWithdrawalUpdateManyWithWhereWithoutInventoryItemInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => InventoryWithdrawalScalarWhereInputSchema),z.lazy(() => InventoryWithdrawalScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const StockCountItemUncheckedUpdateManyWithoutItemNestedInputSchema: z.ZodType<Prisma.StockCountItemUncheckedUpdateManyWithoutItemNestedInput> = z.object({
  create: z.union([ z.lazy(() => StockCountItemCreateWithoutItemInputSchema),z.lazy(() => StockCountItemCreateWithoutItemInputSchema).array(),z.lazy(() => StockCountItemUncheckedCreateWithoutItemInputSchema),z.lazy(() => StockCountItemUncheckedCreateWithoutItemInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => StockCountItemCreateOrConnectWithoutItemInputSchema),z.lazy(() => StockCountItemCreateOrConnectWithoutItemInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => StockCountItemUpsertWithWhereUniqueWithoutItemInputSchema),z.lazy(() => StockCountItemUpsertWithWhereUniqueWithoutItemInputSchema).array() ]).optional(),
  createMany: z.lazy(() => StockCountItemCreateManyItemInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => StockCountItemWhereUniqueInputSchema),z.lazy(() => StockCountItemWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => StockCountItemWhereUniqueInputSchema),z.lazy(() => StockCountItemWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => StockCountItemWhereUniqueInputSchema),z.lazy(() => StockCountItemWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => StockCountItemWhereUniqueInputSchema),z.lazy(() => StockCountItemWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => StockCountItemUpdateWithWhereUniqueWithoutItemInputSchema),z.lazy(() => StockCountItemUpdateWithWhereUniqueWithoutItemInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => StockCountItemUpdateManyWithWhereWithoutItemInputSchema),z.lazy(() => StockCountItemUpdateManyWithWhereWithoutItemInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => StockCountItemScalarWhereInputSchema),z.lazy(() => StockCountItemScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const InventoryCreateNestedOneWithoutTransactionsInputSchema: z.ZodType<Prisma.InventoryCreateNestedOneWithoutTransactionsInput> = z.object({
  create: z.union([ z.lazy(() => InventoryCreateWithoutTransactionsInputSchema),z.lazy(() => InventoryUncheckedCreateWithoutTransactionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => InventoryCreateOrConnectWithoutTransactionsInputSchema).optional(),
  connect: z.lazy(() => InventoryWhereUniqueInputSchema).optional()
}).strict();

export const InventoryItemCreateNestedOneWithoutTransactionsInputSchema: z.ZodType<Prisma.InventoryItemCreateNestedOneWithoutTransactionsInput> = z.object({
  create: z.union([ z.lazy(() => InventoryItemCreateWithoutTransactionsInputSchema),z.lazy(() => InventoryItemUncheckedCreateWithoutTransactionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => InventoryItemCreateOrConnectWithoutTransactionsInputSchema).optional(),
  connect: z.lazy(() => InventoryItemWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutInventoryTransactionsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutInventoryTransactionsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutInventoryTransactionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutInventoryTransactionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutInventoryTransactionsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const EnumTransactionTypeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumTransactionTypeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => TransactionTypeSchema).optional()
}).strict();

export const InventoryUpdateOneRequiredWithoutTransactionsNestedInputSchema: z.ZodType<Prisma.InventoryUpdateOneRequiredWithoutTransactionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => InventoryCreateWithoutTransactionsInputSchema),z.lazy(() => InventoryUncheckedCreateWithoutTransactionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => InventoryCreateOrConnectWithoutTransactionsInputSchema).optional(),
  upsert: z.lazy(() => InventoryUpsertWithoutTransactionsInputSchema).optional(),
  connect: z.lazy(() => InventoryWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => InventoryUpdateToOneWithWhereWithoutTransactionsInputSchema),z.lazy(() => InventoryUpdateWithoutTransactionsInputSchema),z.lazy(() => InventoryUncheckedUpdateWithoutTransactionsInputSchema) ]).optional(),
}).strict();

export const InventoryItemUpdateOneRequiredWithoutTransactionsNestedInputSchema: z.ZodType<Prisma.InventoryItemUpdateOneRequiredWithoutTransactionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => InventoryItemCreateWithoutTransactionsInputSchema),z.lazy(() => InventoryItemUncheckedCreateWithoutTransactionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => InventoryItemCreateOrConnectWithoutTransactionsInputSchema).optional(),
  upsert: z.lazy(() => InventoryItemUpsertWithoutTransactionsInputSchema).optional(),
  connect: z.lazy(() => InventoryItemWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => InventoryItemUpdateToOneWithWhereWithoutTransactionsInputSchema),z.lazy(() => InventoryItemUpdateWithoutTransactionsInputSchema),z.lazy(() => InventoryItemUncheckedUpdateWithoutTransactionsInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutInventoryTransactionsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutInventoryTransactionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutInventoryTransactionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutInventoryTransactionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutInventoryTransactionsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutInventoryTransactionsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutInventoryTransactionsInputSchema),z.lazy(() => UserUpdateWithoutInventoryTransactionsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutInventoryTransactionsInputSchema) ]).optional(),
}).strict();

export const InventoryCreateNestedOneWithoutStockCountsInputSchema: z.ZodType<Prisma.InventoryCreateNestedOneWithoutStockCountsInput> = z.object({
  create: z.union([ z.lazy(() => InventoryCreateWithoutStockCountsInputSchema),z.lazy(() => InventoryUncheckedCreateWithoutStockCountsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => InventoryCreateOrConnectWithoutStockCountsInputSchema).optional(),
  connect: z.lazy(() => InventoryWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutStockCountsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutStockCountsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutStockCountsInputSchema),z.lazy(() => UserUncheckedCreateWithoutStockCountsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutStockCountsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const StockCountItemCreateNestedManyWithoutStockCountInputSchema: z.ZodType<Prisma.StockCountItemCreateNestedManyWithoutStockCountInput> = z.object({
  create: z.union([ z.lazy(() => StockCountItemCreateWithoutStockCountInputSchema),z.lazy(() => StockCountItemCreateWithoutStockCountInputSchema).array(),z.lazy(() => StockCountItemUncheckedCreateWithoutStockCountInputSchema),z.lazy(() => StockCountItemUncheckedCreateWithoutStockCountInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => StockCountItemCreateOrConnectWithoutStockCountInputSchema),z.lazy(() => StockCountItemCreateOrConnectWithoutStockCountInputSchema).array() ]).optional(),
  createMany: z.lazy(() => StockCountItemCreateManyStockCountInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => StockCountItemWhereUniqueInputSchema),z.lazy(() => StockCountItemWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const StockCountItemUncheckedCreateNestedManyWithoutStockCountInputSchema: z.ZodType<Prisma.StockCountItemUncheckedCreateNestedManyWithoutStockCountInput> = z.object({
  create: z.union([ z.lazy(() => StockCountItemCreateWithoutStockCountInputSchema),z.lazy(() => StockCountItemCreateWithoutStockCountInputSchema).array(),z.lazy(() => StockCountItemUncheckedCreateWithoutStockCountInputSchema),z.lazy(() => StockCountItemUncheckedCreateWithoutStockCountInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => StockCountItemCreateOrConnectWithoutStockCountInputSchema),z.lazy(() => StockCountItemCreateOrConnectWithoutStockCountInputSchema).array() ]).optional(),
  createMany: z.lazy(() => StockCountItemCreateManyStockCountInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => StockCountItemWhereUniqueInputSchema),z.lazy(() => StockCountItemWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EnumCountStatusFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumCountStatusFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => CountStatusSchema).optional()
}).strict();

export const InventoryUpdateOneRequiredWithoutStockCountsNestedInputSchema: z.ZodType<Prisma.InventoryUpdateOneRequiredWithoutStockCountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => InventoryCreateWithoutStockCountsInputSchema),z.lazy(() => InventoryUncheckedCreateWithoutStockCountsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => InventoryCreateOrConnectWithoutStockCountsInputSchema).optional(),
  upsert: z.lazy(() => InventoryUpsertWithoutStockCountsInputSchema).optional(),
  connect: z.lazy(() => InventoryWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => InventoryUpdateToOneWithWhereWithoutStockCountsInputSchema),z.lazy(() => InventoryUpdateWithoutStockCountsInputSchema),z.lazy(() => InventoryUncheckedUpdateWithoutStockCountsInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutStockCountsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutStockCountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutStockCountsInputSchema),z.lazy(() => UserUncheckedCreateWithoutStockCountsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutStockCountsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutStockCountsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutStockCountsInputSchema),z.lazy(() => UserUpdateWithoutStockCountsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutStockCountsInputSchema) ]).optional(),
}).strict();

export const StockCountItemUpdateManyWithoutStockCountNestedInputSchema: z.ZodType<Prisma.StockCountItemUpdateManyWithoutStockCountNestedInput> = z.object({
  create: z.union([ z.lazy(() => StockCountItemCreateWithoutStockCountInputSchema),z.lazy(() => StockCountItemCreateWithoutStockCountInputSchema).array(),z.lazy(() => StockCountItemUncheckedCreateWithoutStockCountInputSchema),z.lazy(() => StockCountItemUncheckedCreateWithoutStockCountInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => StockCountItemCreateOrConnectWithoutStockCountInputSchema),z.lazy(() => StockCountItemCreateOrConnectWithoutStockCountInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => StockCountItemUpsertWithWhereUniqueWithoutStockCountInputSchema),z.lazy(() => StockCountItemUpsertWithWhereUniqueWithoutStockCountInputSchema).array() ]).optional(),
  createMany: z.lazy(() => StockCountItemCreateManyStockCountInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => StockCountItemWhereUniqueInputSchema),z.lazy(() => StockCountItemWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => StockCountItemWhereUniqueInputSchema),z.lazy(() => StockCountItemWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => StockCountItemWhereUniqueInputSchema),z.lazy(() => StockCountItemWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => StockCountItemWhereUniqueInputSchema),z.lazy(() => StockCountItemWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => StockCountItemUpdateWithWhereUniqueWithoutStockCountInputSchema),z.lazy(() => StockCountItemUpdateWithWhereUniqueWithoutStockCountInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => StockCountItemUpdateManyWithWhereWithoutStockCountInputSchema),z.lazy(() => StockCountItemUpdateManyWithWhereWithoutStockCountInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => StockCountItemScalarWhereInputSchema),z.lazy(() => StockCountItemScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const StockCountItemUncheckedUpdateManyWithoutStockCountNestedInputSchema: z.ZodType<Prisma.StockCountItemUncheckedUpdateManyWithoutStockCountNestedInput> = z.object({
  create: z.union([ z.lazy(() => StockCountItemCreateWithoutStockCountInputSchema),z.lazy(() => StockCountItemCreateWithoutStockCountInputSchema).array(),z.lazy(() => StockCountItemUncheckedCreateWithoutStockCountInputSchema),z.lazy(() => StockCountItemUncheckedCreateWithoutStockCountInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => StockCountItemCreateOrConnectWithoutStockCountInputSchema),z.lazy(() => StockCountItemCreateOrConnectWithoutStockCountInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => StockCountItemUpsertWithWhereUniqueWithoutStockCountInputSchema),z.lazy(() => StockCountItemUpsertWithWhereUniqueWithoutStockCountInputSchema).array() ]).optional(),
  createMany: z.lazy(() => StockCountItemCreateManyStockCountInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => StockCountItemWhereUniqueInputSchema),z.lazy(() => StockCountItemWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => StockCountItemWhereUniqueInputSchema),z.lazy(() => StockCountItemWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => StockCountItemWhereUniqueInputSchema),z.lazy(() => StockCountItemWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => StockCountItemWhereUniqueInputSchema),z.lazy(() => StockCountItemWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => StockCountItemUpdateWithWhereUniqueWithoutStockCountInputSchema),z.lazy(() => StockCountItemUpdateWithWhereUniqueWithoutStockCountInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => StockCountItemUpdateManyWithWhereWithoutStockCountInputSchema),z.lazy(() => StockCountItemUpdateManyWithWhereWithoutStockCountInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => StockCountItemScalarWhereInputSchema),z.lazy(() => StockCountItemScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const StockCountCreateNestedOneWithoutItemsInputSchema: z.ZodType<Prisma.StockCountCreateNestedOneWithoutItemsInput> = z.object({
  create: z.union([ z.lazy(() => StockCountCreateWithoutItemsInputSchema),z.lazy(() => StockCountUncheckedCreateWithoutItemsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => StockCountCreateOrConnectWithoutItemsInputSchema).optional(),
  connect: z.lazy(() => StockCountWhereUniqueInputSchema).optional()
}).strict();

export const InventoryItemCreateNestedOneWithoutStockCountsInputSchema: z.ZodType<Prisma.InventoryItemCreateNestedOneWithoutStockCountsInput> = z.object({
  create: z.union([ z.lazy(() => InventoryItemCreateWithoutStockCountsInputSchema),z.lazy(() => InventoryItemUncheckedCreateWithoutStockCountsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => InventoryItemCreateOrConnectWithoutStockCountsInputSchema).optional(),
  connect: z.lazy(() => InventoryItemWhereUniqueInputSchema).optional()
}).strict();

export const StockCountUpdateOneRequiredWithoutItemsNestedInputSchema: z.ZodType<Prisma.StockCountUpdateOneRequiredWithoutItemsNestedInput> = z.object({
  create: z.union([ z.lazy(() => StockCountCreateWithoutItemsInputSchema),z.lazy(() => StockCountUncheckedCreateWithoutItemsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => StockCountCreateOrConnectWithoutItemsInputSchema).optional(),
  upsert: z.lazy(() => StockCountUpsertWithoutItemsInputSchema).optional(),
  connect: z.lazy(() => StockCountWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => StockCountUpdateToOneWithWhereWithoutItemsInputSchema),z.lazy(() => StockCountUpdateWithoutItemsInputSchema),z.lazy(() => StockCountUncheckedUpdateWithoutItemsInputSchema) ]).optional(),
}).strict();

export const InventoryItemUpdateOneRequiredWithoutStockCountsNestedInputSchema: z.ZodType<Prisma.InventoryItemUpdateOneRequiredWithoutStockCountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => InventoryItemCreateWithoutStockCountsInputSchema),z.lazy(() => InventoryItemUncheckedCreateWithoutStockCountsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => InventoryItemCreateOrConnectWithoutStockCountsInputSchema).optional(),
  upsert: z.lazy(() => InventoryItemUpsertWithoutStockCountsInputSchema).optional(),
  connect: z.lazy(() => InventoryItemWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => InventoryItemUpdateToOneWithWhereWithoutStockCountsInputSchema),z.lazy(() => InventoryItemUpdateWithoutStockCountsInputSchema),z.lazy(() => InventoryItemUncheckedUpdateWithoutStockCountsInputSchema) ]).optional(),
}).strict();

export const RecipeCreateNestedOneWithoutRecipeStatsInputSchema: z.ZodType<Prisma.RecipeCreateNestedOneWithoutRecipeStatsInput> = z.object({
  create: z.union([ z.lazy(() => RecipeCreateWithoutRecipeStatsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutRecipeStatsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RecipeCreateOrConnectWithoutRecipeStatsInputSchema).optional(),
  connect: z.lazy(() => RecipeWhereUniqueInputSchema).optional()
}).strict();

export const RecipeUpdateOneRequiredWithoutRecipeStatsNestedInputSchema: z.ZodType<Prisma.RecipeUpdateOneRequiredWithoutRecipeStatsNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeCreateWithoutRecipeStatsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutRecipeStatsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RecipeCreateOrConnectWithoutRecipeStatsInputSchema).optional(),
  upsert: z.lazy(() => RecipeUpsertWithoutRecipeStatsInputSchema).optional(),
  connect: z.lazy(() => RecipeWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RecipeUpdateToOneWithWhereWithoutRecipeStatsInputSchema),z.lazy(() => RecipeUpdateWithoutRecipeStatsInputSchema),z.lazy(() => RecipeUncheckedUpdateWithoutRecipeStatsInputSchema) ]).optional(),
}).strict();

export const RestaurantCreateNestedOneWithoutOrdersInputSchema: z.ZodType<Prisma.RestaurantCreateNestedOneWithoutOrdersInput> = z.object({
  create: z.union([ z.lazy(() => RestaurantCreateWithoutOrdersInputSchema),z.lazy(() => RestaurantUncheckedCreateWithoutOrdersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RestaurantCreateOrConnectWithoutOrdersInputSchema).optional(),
  connect: z.lazy(() => RestaurantWhereUniqueInputSchema).optional()
}).strict();

export const VendorCreateNestedOneWithoutOrdersInputSchema: z.ZodType<Prisma.VendorCreateNestedOneWithoutOrdersInput> = z.object({
  create: z.union([ z.lazy(() => VendorCreateWithoutOrdersInputSchema),z.lazy(() => VendorUncheckedCreateWithoutOrdersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => VendorCreateOrConnectWithoutOrdersInputSchema).optional(),
  connect: z.lazy(() => VendorWhereUniqueInputSchema).optional()
}).strict();

export const OrderItemCreateNestedManyWithoutOrderInputSchema: z.ZodType<Prisma.OrderItemCreateNestedManyWithoutOrderInput> = z.object({
  create: z.union([ z.lazy(() => OrderItemCreateWithoutOrderInputSchema),z.lazy(() => OrderItemCreateWithoutOrderInputSchema).array(),z.lazy(() => OrderItemUncheckedCreateWithoutOrderInputSchema),z.lazy(() => OrderItemUncheckedCreateWithoutOrderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrderItemCreateOrConnectWithoutOrderInputSchema),z.lazy(() => OrderItemCreateOrConnectWithoutOrderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrderItemCreateManyOrderInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => OrderItemWhereUniqueInputSchema),z.lazy(() => OrderItemWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OrderItemUncheckedCreateNestedManyWithoutOrderInputSchema: z.ZodType<Prisma.OrderItemUncheckedCreateNestedManyWithoutOrderInput> = z.object({
  create: z.union([ z.lazy(() => OrderItemCreateWithoutOrderInputSchema),z.lazy(() => OrderItemCreateWithoutOrderInputSchema).array(),z.lazy(() => OrderItemUncheckedCreateWithoutOrderInputSchema),z.lazy(() => OrderItemUncheckedCreateWithoutOrderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrderItemCreateOrConnectWithoutOrderInputSchema),z.lazy(() => OrderItemCreateOrConnectWithoutOrderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrderItemCreateManyOrderInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => OrderItemWhereUniqueInputSchema),z.lazy(() => OrderItemWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EnumOrderStatusFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumOrderStatusFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => OrderStatusSchema).optional()
}).strict();

export const RestaurantUpdateOneRequiredWithoutOrdersNestedInputSchema: z.ZodType<Prisma.RestaurantUpdateOneRequiredWithoutOrdersNestedInput> = z.object({
  create: z.union([ z.lazy(() => RestaurantCreateWithoutOrdersInputSchema),z.lazy(() => RestaurantUncheckedCreateWithoutOrdersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RestaurantCreateOrConnectWithoutOrdersInputSchema).optional(),
  upsert: z.lazy(() => RestaurantUpsertWithoutOrdersInputSchema).optional(),
  connect: z.lazy(() => RestaurantWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RestaurantUpdateToOneWithWhereWithoutOrdersInputSchema),z.lazy(() => RestaurantUpdateWithoutOrdersInputSchema),z.lazy(() => RestaurantUncheckedUpdateWithoutOrdersInputSchema) ]).optional(),
}).strict();

export const VendorUpdateOneRequiredWithoutOrdersNestedInputSchema: z.ZodType<Prisma.VendorUpdateOneRequiredWithoutOrdersNestedInput> = z.object({
  create: z.union([ z.lazy(() => VendorCreateWithoutOrdersInputSchema),z.lazy(() => VendorUncheckedCreateWithoutOrdersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => VendorCreateOrConnectWithoutOrdersInputSchema).optional(),
  upsert: z.lazy(() => VendorUpsertWithoutOrdersInputSchema).optional(),
  connect: z.lazy(() => VendorWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => VendorUpdateToOneWithWhereWithoutOrdersInputSchema),z.lazy(() => VendorUpdateWithoutOrdersInputSchema),z.lazy(() => VendorUncheckedUpdateWithoutOrdersInputSchema) ]).optional(),
}).strict();

export const OrderItemUpdateManyWithoutOrderNestedInputSchema: z.ZodType<Prisma.OrderItemUpdateManyWithoutOrderNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrderItemCreateWithoutOrderInputSchema),z.lazy(() => OrderItemCreateWithoutOrderInputSchema).array(),z.lazy(() => OrderItemUncheckedCreateWithoutOrderInputSchema),z.lazy(() => OrderItemUncheckedCreateWithoutOrderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrderItemCreateOrConnectWithoutOrderInputSchema),z.lazy(() => OrderItemCreateOrConnectWithoutOrderInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => OrderItemUpsertWithWhereUniqueWithoutOrderInputSchema),z.lazy(() => OrderItemUpsertWithWhereUniqueWithoutOrderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrderItemCreateManyOrderInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => OrderItemWhereUniqueInputSchema),z.lazy(() => OrderItemWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => OrderItemWhereUniqueInputSchema),z.lazy(() => OrderItemWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => OrderItemWhereUniqueInputSchema),z.lazy(() => OrderItemWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => OrderItemWhereUniqueInputSchema),z.lazy(() => OrderItemWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => OrderItemUpdateWithWhereUniqueWithoutOrderInputSchema),z.lazy(() => OrderItemUpdateWithWhereUniqueWithoutOrderInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => OrderItemUpdateManyWithWhereWithoutOrderInputSchema),z.lazy(() => OrderItemUpdateManyWithWhereWithoutOrderInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => OrderItemScalarWhereInputSchema),z.lazy(() => OrderItemScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrderItemUncheckedUpdateManyWithoutOrderNestedInputSchema: z.ZodType<Prisma.OrderItemUncheckedUpdateManyWithoutOrderNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrderItemCreateWithoutOrderInputSchema),z.lazy(() => OrderItemCreateWithoutOrderInputSchema).array(),z.lazy(() => OrderItemUncheckedCreateWithoutOrderInputSchema),z.lazy(() => OrderItemUncheckedCreateWithoutOrderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrderItemCreateOrConnectWithoutOrderInputSchema),z.lazy(() => OrderItemCreateOrConnectWithoutOrderInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => OrderItemUpsertWithWhereUniqueWithoutOrderInputSchema),z.lazy(() => OrderItemUpsertWithWhereUniqueWithoutOrderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrderItemCreateManyOrderInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => OrderItemWhereUniqueInputSchema),z.lazy(() => OrderItemWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => OrderItemWhereUniqueInputSchema),z.lazy(() => OrderItemWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => OrderItemWhereUniqueInputSchema),z.lazy(() => OrderItemWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => OrderItemWhereUniqueInputSchema),z.lazy(() => OrderItemWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => OrderItemUpdateWithWhereUniqueWithoutOrderInputSchema),z.lazy(() => OrderItemUpdateWithWhereUniqueWithoutOrderInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => OrderItemUpdateManyWithWhereWithoutOrderInputSchema),z.lazy(() => OrderItemUpdateManyWithWhereWithoutOrderInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => OrderItemScalarWhereInputSchema),z.lazy(() => OrderItemScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrderCreateNestedOneWithoutItemsInputSchema: z.ZodType<Prisma.OrderCreateNestedOneWithoutItemsInput> = z.object({
  create: z.union([ z.lazy(() => OrderCreateWithoutItemsInputSchema),z.lazy(() => OrderUncheckedCreateWithoutItemsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrderCreateOrConnectWithoutItemsInputSchema).optional(),
  connect: z.lazy(() => OrderWhereUniqueInputSchema).optional()
}).strict();

export const IngredientCreateNestedOneWithoutOrderItemsInputSchema: z.ZodType<Prisma.IngredientCreateNestedOneWithoutOrderItemsInput> = z.object({
  create: z.union([ z.lazy(() => IngredientCreateWithoutOrderItemsInputSchema),z.lazy(() => IngredientUncheckedCreateWithoutOrderItemsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => IngredientCreateOrConnectWithoutOrderItemsInputSchema).optional(),
  connect: z.lazy(() => IngredientWhereUniqueInputSchema).optional()
}).strict();

export const OrderUpdateOneRequiredWithoutItemsNestedInputSchema: z.ZodType<Prisma.OrderUpdateOneRequiredWithoutItemsNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrderCreateWithoutItemsInputSchema),z.lazy(() => OrderUncheckedCreateWithoutItemsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrderCreateOrConnectWithoutItemsInputSchema).optional(),
  upsert: z.lazy(() => OrderUpsertWithoutItemsInputSchema).optional(),
  connect: z.lazy(() => OrderWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrderUpdateToOneWithWhereWithoutItemsInputSchema),z.lazy(() => OrderUpdateWithoutItemsInputSchema),z.lazy(() => OrderUncheckedUpdateWithoutItemsInputSchema) ]).optional(),
}).strict();

export const IngredientUpdateOneRequiredWithoutOrderItemsNestedInputSchema: z.ZodType<Prisma.IngredientUpdateOneRequiredWithoutOrderItemsNestedInput> = z.object({
  create: z.union([ z.lazy(() => IngredientCreateWithoutOrderItemsInputSchema),z.lazy(() => IngredientUncheckedCreateWithoutOrderItemsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => IngredientCreateOrConnectWithoutOrderItemsInputSchema).optional(),
  upsert: z.lazy(() => IngredientUpsertWithoutOrderItemsInputSchema).optional(),
  connect: z.lazy(() => IngredientWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => IngredientUpdateToOneWithWhereWithoutOrderItemsInputSchema),z.lazy(() => IngredientUpdateWithoutOrderItemsInputSchema),z.lazy(() => IngredientUncheckedUpdateWithoutOrderItemsInputSchema) ]).optional(),
}).strict();

export const OrderCreateNestedManyWithoutVendorInputSchema: z.ZodType<Prisma.OrderCreateNestedManyWithoutVendorInput> = z.object({
  create: z.union([ z.lazy(() => OrderCreateWithoutVendorInputSchema),z.lazy(() => OrderCreateWithoutVendorInputSchema).array(),z.lazy(() => OrderUncheckedCreateWithoutVendorInputSchema),z.lazy(() => OrderUncheckedCreateWithoutVendorInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrderCreateOrConnectWithoutVendorInputSchema),z.lazy(() => OrderCreateOrConnectWithoutVendorInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrderCreateManyVendorInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => OrderWhereUniqueInputSchema),z.lazy(() => OrderWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const IngredientCreateNestedManyWithoutVendorsInputSchema: z.ZodType<Prisma.IngredientCreateNestedManyWithoutVendorsInput> = z.object({
  create: z.union([ z.lazy(() => IngredientCreateWithoutVendorsInputSchema),z.lazy(() => IngredientCreateWithoutVendorsInputSchema).array(),z.lazy(() => IngredientUncheckedCreateWithoutVendorsInputSchema),z.lazy(() => IngredientUncheckedCreateWithoutVendorsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => IngredientCreateOrConnectWithoutVendorsInputSchema),z.lazy(() => IngredientCreateOrConnectWithoutVendorsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => IngredientWhereUniqueInputSchema),z.lazy(() => IngredientWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SupplierPriceHistoryCreateNestedManyWithoutVendorInputSchema: z.ZodType<Prisma.SupplierPriceHistoryCreateNestedManyWithoutVendorInput> = z.object({
  create: z.union([ z.lazy(() => SupplierPriceHistoryCreateWithoutVendorInputSchema),z.lazy(() => SupplierPriceHistoryCreateWithoutVendorInputSchema).array(),z.lazy(() => SupplierPriceHistoryUncheckedCreateWithoutVendorInputSchema),z.lazy(() => SupplierPriceHistoryUncheckedCreateWithoutVendorInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SupplierPriceHistoryCreateOrConnectWithoutVendorInputSchema),z.lazy(() => SupplierPriceHistoryCreateOrConnectWithoutVendorInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SupplierPriceHistoryCreateManyVendorInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema),z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OrderUncheckedCreateNestedManyWithoutVendorInputSchema: z.ZodType<Prisma.OrderUncheckedCreateNestedManyWithoutVendorInput> = z.object({
  create: z.union([ z.lazy(() => OrderCreateWithoutVendorInputSchema),z.lazy(() => OrderCreateWithoutVendorInputSchema).array(),z.lazy(() => OrderUncheckedCreateWithoutVendorInputSchema),z.lazy(() => OrderUncheckedCreateWithoutVendorInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrderCreateOrConnectWithoutVendorInputSchema),z.lazy(() => OrderCreateOrConnectWithoutVendorInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrderCreateManyVendorInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => OrderWhereUniqueInputSchema),z.lazy(() => OrderWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const IngredientUncheckedCreateNestedManyWithoutVendorsInputSchema: z.ZodType<Prisma.IngredientUncheckedCreateNestedManyWithoutVendorsInput> = z.object({
  create: z.union([ z.lazy(() => IngredientCreateWithoutVendorsInputSchema),z.lazy(() => IngredientCreateWithoutVendorsInputSchema).array(),z.lazy(() => IngredientUncheckedCreateWithoutVendorsInputSchema),z.lazy(() => IngredientUncheckedCreateWithoutVendorsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => IngredientCreateOrConnectWithoutVendorsInputSchema),z.lazy(() => IngredientCreateOrConnectWithoutVendorsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => IngredientWhereUniqueInputSchema),z.lazy(() => IngredientWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SupplierPriceHistoryUncheckedCreateNestedManyWithoutVendorInputSchema: z.ZodType<Prisma.SupplierPriceHistoryUncheckedCreateNestedManyWithoutVendorInput> = z.object({
  create: z.union([ z.lazy(() => SupplierPriceHistoryCreateWithoutVendorInputSchema),z.lazy(() => SupplierPriceHistoryCreateWithoutVendorInputSchema).array(),z.lazy(() => SupplierPriceHistoryUncheckedCreateWithoutVendorInputSchema),z.lazy(() => SupplierPriceHistoryUncheckedCreateWithoutVendorInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SupplierPriceHistoryCreateOrConnectWithoutVendorInputSchema),z.lazy(() => SupplierPriceHistoryCreateOrConnectWithoutVendorInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SupplierPriceHistoryCreateManyVendorInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema),z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OrderUpdateManyWithoutVendorNestedInputSchema: z.ZodType<Prisma.OrderUpdateManyWithoutVendorNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrderCreateWithoutVendorInputSchema),z.lazy(() => OrderCreateWithoutVendorInputSchema).array(),z.lazy(() => OrderUncheckedCreateWithoutVendorInputSchema),z.lazy(() => OrderUncheckedCreateWithoutVendorInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrderCreateOrConnectWithoutVendorInputSchema),z.lazy(() => OrderCreateOrConnectWithoutVendorInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => OrderUpsertWithWhereUniqueWithoutVendorInputSchema),z.lazy(() => OrderUpsertWithWhereUniqueWithoutVendorInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrderCreateManyVendorInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => OrderWhereUniqueInputSchema),z.lazy(() => OrderWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => OrderWhereUniqueInputSchema),z.lazy(() => OrderWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => OrderWhereUniqueInputSchema),z.lazy(() => OrderWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => OrderWhereUniqueInputSchema),z.lazy(() => OrderWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => OrderUpdateWithWhereUniqueWithoutVendorInputSchema),z.lazy(() => OrderUpdateWithWhereUniqueWithoutVendorInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => OrderUpdateManyWithWhereWithoutVendorInputSchema),z.lazy(() => OrderUpdateManyWithWhereWithoutVendorInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => OrderScalarWhereInputSchema),z.lazy(() => OrderScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const IngredientUpdateManyWithoutVendorsNestedInputSchema: z.ZodType<Prisma.IngredientUpdateManyWithoutVendorsNestedInput> = z.object({
  create: z.union([ z.lazy(() => IngredientCreateWithoutVendorsInputSchema),z.lazy(() => IngredientCreateWithoutVendorsInputSchema).array(),z.lazy(() => IngredientUncheckedCreateWithoutVendorsInputSchema),z.lazy(() => IngredientUncheckedCreateWithoutVendorsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => IngredientCreateOrConnectWithoutVendorsInputSchema),z.lazy(() => IngredientCreateOrConnectWithoutVendorsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => IngredientUpsertWithWhereUniqueWithoutVendorsInputSchema),z.lazy(() => IngredientUpsertWithWhereUniqueWithoutVendorsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => IngredientWhereUniqueInputSchema),z.lazy(() => IngredientWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => IngredientWhereUniqueInputSchema),z.lazy(() => IngredientWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => IngredientWhereUniqueInputSchema),z.lazy(() => IngredientWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => IngredientWhereUniqueInputSchema),z.lazy(() => IngredientWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => IngredientUpdateWithWhereUniqueWithoutVendorsInputSchema),z.lazy(() => IngredientUpdateWithWhereUniqueWithoutVendorsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => IngredientUpdateManyWithWhereWithoutVendorsInputSchema),z.lazy(() => IngredientUpdateManyWithWhereWithoutVendorsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => IngredientScalarWhereInputSchema),z.lazy(() => IngredientScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SupplierPriceHistoryUpdateManyWithoutVendorNestedInputSchema: z.ZodType<Prisma.SupplierPriceHistoryUpdateManyWithoutVendorNestedInput> = z.object({
  create: z.union([ z.lazy(() => SupplierPriceHistoryCreateWithoutVendorInputSchema),z.lazy(() => SupplierPriceHistoryCreateWithoutVendorInputSchema).array(),z.lazy(() => SupplierPriceHistoryUncheckedCreateWithoutVendorInputSchema),z.lazy(() => SupplierPriceHistoryUncheckedCreateWithoutVendorInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SupplierPriceHistoryCreateOrConnectWithoutVendorInputSchema),z.lazy(() => SupplierPriceHistoryCreateOrConnectWithoutVendorInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SupplierPriceHistoryUpsertWithWhereUniqueWithoutVendorInputSchema),z.lazy(() => SupplierPriceHistoryUpsertWithWhereUniqueWithoutVendorInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SupplierPriceHistoryCreateManyVendorInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema),z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema),z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema),z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema),z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SupplierPriceHistoryUpdateWithWhereUniqueWithoutVendorInputSchema),z.lazy(() => SupplierPriceHistoryUpdateWithWhereUniqueWithoutVendorInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SupplierPriceHistoryUpdateManyWithWhereWithoutVendorInputSchema),z.lazy(() => SupplierPriceHistoryUpdateManyWithWhereWithoutVendorInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SupplierPriceHistoryScalarWhereInputSchema),z.lazy(() => SupplierPriceHistoryScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrderUncheckedUpdateManyWithoutVendorNestedInputSchema: z.ZodType<Prisma.OrderUncheckedUpdateManyWithoutVendorNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrderCreateWithoutVendorInputSchema),z.lazy(() => OrderCreateWithoutVendorInputSchema).array(),z.lazy(() => OrderUncheckedCreateWithoutVendorInputSchema),z.lazy(() => OrderUncheckedCreateWithoutVendorInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrderCreateOrConnectWithoutVendorInputSchema),z.lazy(() => OrderCreateOrConnectWithoutVendorInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => OrderUpsertWithWhereUniqueWithoutVendorInputSchema),z.lazy(() => OrderUpsertWithWhereUniqueWithoutVendorInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrderCreateManyVendorInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => OrderWhereUniqueInputSchema),z.lazy(() => OrderWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => OrderWhereUniqueInputSchema),z.lazy(() => OrderWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => OrderWhereUniqueInputSchema),z.lazy(() => OrderWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => OrderWhereUniqueInputSchema),z.lazy(() => OrderWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => OrderUpdateWithWhereUniqueWithoutVendorInputSchema),z.lazy(() => OrderUpdateWithWhereUniqueWithoutVendorInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => OrderUpdateManyWithWhereWithoutVendorInputSchema),z.lazy(() => OrderUpdateManyWithWhereWithoutVendorInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => OrderScalarWhereInputSchema),z.lazy(() => OrderScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const IngredientUncheckedUpdateManyWithoutVendorsNestedInputSchema: z.ZodType<Prisma.IngredientUncheckedUpdateManyWithoutVendorsNestedInput> = z.object({
  create: z.union([ z.lazy(() => IngredientCreateWithoutVendorsInputSchema),z.lazy(() => IngredientCreateWithoutVendorsInputSchema).array(),z.lazy(() => IngredientUncheckedCreateWithoutVendorsInputSchema),z.lazy(() => IngredientUncheckedCreateWithoutVendorsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => IngredientCreateOrConnectWithoutVendorsInputSchema),z.lazy(() => IngredientCreateOrConnectWithoutVendorsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => IngredientUpsertWithWhereUniqueWithoutVendorsInputSchema),z.lazy(() => IngredientUpsertWithWhereUniqueWithoutVendorsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => IngredientWhereUniqueInputSchema),z.lazy(() => IngredientWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => IngredientWhereUniqueInputSchema),z.lazy(() => IngredientWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => IngredientWhereUniqueInputSchema),z.lazy(() => IngredientWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => IngredientWhereUniqueInputSchema),z.lazy(() => IngredientWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => IngredientUpdateWithWhereUniqueWithoutVendorsInputSchema),z.lazy(() => IngredientUpdateWithWhereUniqueWithoutVendorsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => IngredientUpdateManyWithWhereWithoutVendorsInputSchema),z.lazy(() => IngredientUpdateManyWithWhereWithoutVendorsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => IngredientScalarWhereInputSchema),z.lazy(() => IngredientScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SupplierPriceHistoryUncheckedUpdateManyWithoutVendorNestedInputSchema: z.ZodType<Prisma.SupplierPriceHistoryUncheckedUpdateManyWithoutVendorNestedInput> = z.object({
  create: z.union([ z.lazy(() => SupplierPriceHistoryCreateWithoutVendorInputSchema),z.lazy(() => SupplierPriceHistoryCreateWithoutVendorInputSchema).array(),z.lazy(() => SupplierPriceHistoryUncheckedCreateWithoutVendorInputSchema),z.lazy(() => SupplierPriceHistoryUncheckedCreateWithoutVendorInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SupplierPriceHistoryCreateOrConnectWithoutVendorInputSchema),z.lazy(() => SupplierPriceHistoryCreateOrConnectWithoutVendorInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SupplierPriceHistoryUpsertWithWhereUniqueWithoutVendorInputSchema),z.lazy(() => SupplierPriceHistoryUpsertWithWhereUniqueWithoutVendorInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SupplierPriceHistoryCreateManyVendorInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema),z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema),z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema),z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema),z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SupplierPriceHistoryUpdateWithWhereUniqueWithoutVendorInputSchema),z.lazy(() => SupplierPriceHistoryUpdateWithWhereUniqueWithoutVendorInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SupplierPriceHistoryUpdateManyWithWhereWithoutVendorInputSchema),z.lazy(() => SupplierPriceHistoryUpdateManyWithWhereWithoutVendorInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SupplierPriceHistoryScalarWhereInputSchema),z.lazy(() => SupplierPriceHistoryScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutShiftsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutShiftsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutShiftsInputSchema),z.lazy(() => UserUncheckedCreateWithoutShiftsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutShiftsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const ShiftTaskCreateNestedManyWithoutShiftInputSchema: z.ZodType<Prisma.ShiftTaskCreateNestedManyWithoutShiftInput> = z.object({
  create: z.union([ z.lazy(() => ShiftTaskCreateWithoutShiftInputSchema),z.lazy(() => ShiftTaskCreateWithoutShiftInputSchema).array(),z.lazy(() => ShiftTaskUncheckedCreateWithoutShiftInputSchema),z.lazy(() => ShiftTaskUncheckedCreateWithoutShiftInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ShiftTaskCreateOrConnectWithoutShiftInputSchema),z.lazy(() => ShiftTaskCreateOrConnectWithoutShiftInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ShiftTaskCreateManyShiftInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ShiftTaskWhereUniqueInputSchema),z.lazy(() => ShiftTaskWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ShiftTaskUncheckedCreateNestedManyWithoutShiftInputSchema: z.ZodType<Prisma.ShiftTaskUncheckedCreateNestedManyWithoutShiftInput> = z.object({
  create: z.union([ z.lazy(() => ShiftTaskCreateWithoutShiftInputSchema),z.lazy(() => ShiftTaskCreateWithoutShiftInputSchema).array(),z.lazy(() => ShiftTaskUncheckedCreateWithoutShiftInputSchema),z.lazy(() => ShiftTaskUncheckedCreateWithoutShiftInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ShiftTaskCreateOrConnectWithoutShiftInputSchema),z.lazy(() => ShiftTaskCreateOrConnectWithoutShiftInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ShiftTaskCreateManyShiftInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ShiftTaskWhereUniqueInputSchema),z.lazy(() => ShiftTaskWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EnumShiftStatusFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumShiftStatusFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => ShiftStatusSchema).optional()
}).strict();

export const UserUpdateOneRequiredWithoutShiftsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutShiftsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutShiftsInputSchema),z.lazy(() => UserUncheckedCreateWithoutShiftsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutShiftsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutShiftsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutShiftsInputSchema),z.lazy(() => UserUpdateWithoutShiftsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutShiftsInputSchema) ]).optional(),
}).strict();

export const ShiftTaskUpdateManyWithoutShiftNestedInputSchema: z.ZodType<Prisma.ShiftTaskUpdateManyWithoutShiftNestedInput> = z.object({
  create: z.union([ z.lazy(() => ShiftTaskCreateWithoutShiftInputSchema),z.lazy(() => ShiftTaskCreateWithoutShiftInputSchema).array(),z.lazy(() => ShiftTaskUncheckedCreateWithoutShiftInputSchema),z.lazy(() => ShiftTaskUncheckedCreateWithoutShiftInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ShiftTaskCreateOrConnectWithoutShiftInputSchema),z.lazy(() => ShiftTaskCreateOrConnectWithoutShiftInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ShiftTaskUpsertWithWhereUniqueWithoutShiftInputSchema),z.lazy(() => ShiftTaskUpsertWithWhereUniqueWithoutShiftInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ShiftTaskCreateManyShiftInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ShiftTaskWhereUniqueInputSchema),z.lazy(() => ShiftTaskWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ShiftTaskWhereUniqueInputSchema),z.lazy(() => ShiftTaskWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ShiftTaskWhereUniqueInputSchema),z.lazy(() => ShiftTaskWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ShiftTaskWhereUniqueInputSchema),z.lazy(() => ShiftTaskWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ShiftTaskUpdateWithWhereUniqueWithoutShiftInputSchema),z.lazy(() => ShiftTaskUpdateWithWhereUniqueWithoutShiftInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ShiftTaskUpdateManyWithWhereWithoutShiftInputSchema),z.lazy(() => ShiftTaskUpdateManyWithWhereWithoutShiftInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ShiftTaskScalarWhereInputSchema),z.lazy(() => ShiftTaskScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ShiftTaskUncheckedUpdateManyWithoutShiftNestedInputSchema: z.ZodType<Prisma.ShiftTaskUncheckedUpdateManyWithoutShiftNestedInput> = z.object({
  create: z.union([ z.lazy(() => ShiftTaskCreateWithoutShiftInputSchema),z.lazy(() => ShiftTaskCreateWithoutShiftInputSchema).array(),z.lazy(() => ShiftTaskUncheckedCreateWithoutShiftInputSchema),z.lazy(() => ShiftTaskUncheckedCreateWithoutShiftInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ShiftTaskCreateOrConnectWithoutShiftInputSchema),z.lazy(() => ShiftTaskCreateOrConnectWithoutShiftInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ShiftTaskUpsertWithWhereUniqueWithoutShiftInputSchema),z.lazy(() => ShiftTaskUpsertWithWhereUniqueWithoutShiftInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ShiftTaskCreateManyShiftInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ShiftTaskWhereUniqueInputSchema),z.lazy(() => ShiftTaskWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ShiftTaskWhereUniqueInputSchema),z.lazy(() => ShiftTaskWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ShiftTaskWhereUniqueInputSchema),z.lazy(() => ShiftTaskWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ShiftTaskWhereUniqueInputSchema),z.lazy(() => ShiftTaskWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ShiftTaskUpdateWithWhereUniqueWithoutShiftInputSchema),z.lazy(() => ShiftTaskUpdateWithWhereUniqueWithoutShiftInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ShiftTaskUpdateManyWithWhereWithoutShiftInputSchema),z.lazy(() => ShiftTaskUpdateManyWithWhereWithoutShiftInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ShiftTaskScalarWhereInputSchema),z.lazy(() => ShiftTaskScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RecipeCreateNestedManyWithoutPrepBoardsInputSchema: z.ZodType<Prisma.RecipeCreateNestedManyWithoutPrepBoardsInput> = z.object({
  create: z.union([ z.lazy(() => RecipeCreateWithoutPrepBoardsInputSchema),z.lazy(() => RecipeCreateWithoutPrepBoardsInputSchema).array(),z.lazy(() => RecipeUncheckedCreateWithoutPrepBoardsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutPrepBoardsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeCreateOrConnectWithoutPrepBoardsInputSchema),z.lazy(() => RecipeCreateOrConnectWithoutPrepBoardsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RecipeWhereUniqueInputSchema),z.lazy(() => RecipeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PrepItemCreateNestedManyWithoutPrepBoardInputSchema: z.ZodType<Prisma.PrepItemCreateNestedManyWithoutPrepBoardInput> = z.object({
  create: z.union([ z.lazy(() => PrepItemCreateWithoutPrepBoardInputSchema),z.lazy(() => PrepItemCreateWithoutPrepBoardInputSchema).array(),z.lazy(() => PrepItemUncheckedCreateWithoutPrepBoardInputSchema),z.lazy(() => PrepItemUncheckedCreateWithoutPrepBoardInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PrepItemCreateOrConnectWithoutPrepBoardInputSchema),z.lazy(() => PrepItemCreateOrConnectWithoutPrepBoardInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PrepItemCreateManyPrepBoardInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PrepItemWhereUniqueInputSchema),z.lazy(() => PrepItemWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RecipeUncheckedCreateNestedManyWithoutPrepBoardsInputSchema: z.ZodType<Prisma.RecipeUncheckedCreateNestedManyWithoutPrepBoardsInput> = z.object({
  create: z.union([ z.lazy(() => RecipeCreateWithoutPrepBoardsInputSchema),z.lazy(() => RecipeCreateWithoutPrepBoardsInputSchema).array(),z.lazy(() => RecipeUncheckedCreateWithoutPrepBoardsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutPrepBoardsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeCreateOrConnectWithoutPrepBoardsInputSchema),z.lazy(() => RecipeCreateOrConnectWithoutPrepBoardsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RecipeWhereUniqueInputSchema),z.lazy(() => RecipeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PrepItemUncheckedCreateNestedManyWithoutPrepBoardInputSchema: z.ZodType<Prisma.PrepItemUncheckedCreateNestedManyWithoutPrepBoardInput> = z.object({
  create: z.union([ z.lazy(() => PrepItemCreateWithoutPrepBoardInputSchema),z.lazy(() => PrepItemCreateWithoutPrepBoardInputSchema).array(),z.lazy(() => PrepItemUncheckedCreateWithoutPrepBoardInputSchema),z.lazy(() => PrepItemUncheckedCreateWithoutPrepBoardInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PrepItemCreateOrConnectWithoutPrepBoardInputSchema),z.lazy(() => PrepItemCreateOrConnectWithoutPrepBoardInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PrepItemCreateManyPrepBoardInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PrepItemWhereUniqueInputSchema),z.lazy(() => PrepItemWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EnumPrepStatusFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumPrepStatusFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => PrepStatusSchema).optional()
}).strict();

export const RecipeUpdateManyWithoutPrepBoardsNestedInputSchema: z.ZodType<Prisma.RecipeUpdateManyWithoutPrepBoardsNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeCreateWithoutPrepBoardsInputSchema),z.lazy(() => RecipeCreateWithoutPrepBoardsInputSchema).array(),z.lazy(() => RecipeUncheckedCreateWithoutPrepBoardsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutPrepBoardsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeCreateOrConnectWithoutPrepBoardsInputSchema),z.lazy(() => RecipeCreateOrConnectWithoutPrepBoardsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RecipeUpsertWithWhereUniqueWithoutPrepBoardsInputSchema),z.lazy(() => RecipeUpsertWithWhereUniqueWithoutPrepBoardsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => RecipeWhereUniqueInputSchema),z.lazy(() => RecipeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RecipeWhereUniqueInputSchema),z.lazy(() => RecipeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RecipeWhereUniqueInputSchema),z.lazy(() => RecipeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RecipeWhereUniqueInputSchema),z.lazy(() => RecipeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RecipeUpdateWithWhereUniqueWithoutPrepBoardsInputSchema),z.lazy(() => RecipeUpdateWithWhereUniqueWithoutPrepBoardsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RecipeUpdateManyWithWhereWithoutPrepBoardsInputSchema),z.lazy(() => RecipeUpdateManyWithWhereWithoutPrepBoardsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RecipeScalarWhereInputSchema),z.lazy(() => RecipeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PrepItemUpdateManyWithoutPrepBoardNestedInputSchema: z.ZodType<Prisma.PrepItemUpdateManyWithoutPrepBoardNestedInput> = z.object({
  create: z.union([ z.lazy(() => PrepItemCreateWithoutPrepBoardInputSchema),z.lazy(() => PrepItemCreateWithoutPrepBoardInputSchema).array(),z.lazy(() => PrepItemUncheckedCreateWithoutPrepBoardInputSchema),z.lazy(() => PrepItemUncheckedCreateWithoutPrepBoardInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PrepItemCreateOrConnectWithoutPrepBoardInputSchema),z.lazy(() => PrepItemCreateOrConnectWithoutPrepBoardInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PrepItemUpsertWithWhereUniqueWithoutPrepBoardInputSchema),z.lazy(() => PrepItemUpsertWithWhereUniqueWithoutPrepBoardInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PrepItemCreateManyPrepBoardInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PrepItemWhereUniqueInputSchema),z.lazy(() => PrepItemWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PrepItemWhereUniqueInputSchema),z.lazy(() => PrepItemWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PrepItemWhereUniqueInputSchema),z.lazy(() => PrepItemWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PrepItemWhereUniqueInputSchema),z.lazy(() => PrepItemWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PrepItemUpdateWithWhereUniqueWithoutPrepBoardInputSchema),z.lazy(() => PrepItemUpdateWithWhereUniqueWithoutPrepBoardInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PrepItemUpdateManyWithWhereWithoutPrepBoardInputSchema),z.lazy(() => PrepItemUpdateManyWithWhereWithoutPrepBoardInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PrepItemScalarWhereInputSchema),z.lazy(() => PrepItemScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RecipeUncheckedUpdateManyWithoutPrepBoardsNestedInputSchema: z.ZodType<Prisma.RecipeUncheckedUpdateManyWithoutPrepBoardsNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeCreateWithoutPrepBoardsInputSchema),z.lazy(() => RecipeCreateWithoutPrepBoardsInputSchema).array(),z.lazy(() => RecipeUncheckedCreateWithoutPrepBoardsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutPrepBoardsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeCreateOrConnectWithoutPrepBoardsInputSchema),z.lazy(() => RecipeCreateOrConnectWithoutPrepBoardsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RecipeUpsertWithWhereUniqueWithoutPrepBoardsInputSchema),z.lazy(() => RecipeUpsertWithWhereUniqueWithoutPrepBoardsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => RecipeWhereUniqueInputSchema),z.lazy(() => RecipeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RecipeWhereUniqueInputSchema),z.lazy(() => RecipeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RecipeWhereUniqueInputSchema),z.lazy(() => RecipeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RecipeWhereUniqueInputSchema),z.lazy(() => RecipeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RecipeUpdateWithWhereUniqueWithoutPrepBoardsInputSchema),z.lazy(() => RecipeUpdateWithWhereUniqueWithoutPrepBoardsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RecipeUpdateManyWithWhereWithoutPrepBoardsInputSchema),z.lazy(() => RecipeUpdateManyWithWhereWithoutPrepBoardsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RecipeScalarWhereInputSchema),z.lazy(() => RecipeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PrepItemUncheckedUpdateManyWithoutPrepBoardNestedInputSchema: z.ZodType<Prisma.PrepItemUncheckedUpdateManyWithoutPrepBoardNestedInput> = z.object({
  create: z.union([ z.lazy(() => PrepItemCreateWithoutPrepBoardInputSchema),z.lazy(() => PrepItemCreateWithoutPrepBoardInputSchema).array(),z.lazy(() => PrepItemUncheckedCreateWithoutPrepBoardInputSchema),z.lazy(() => PrepItemUncheckedCreateWithoutPrepBoardInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PrepItemCreateOrConnectWithoutPrepBoardInputSchema),z.lazy(() => PrepItemCreateOrConnectWithoutPrepBoardInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PrepItemUpsertWithWhereUniqueWithoutPrepBoardInputSchema),z.lazy(() => PrepItemUpsertWithWhereUniqueWithoutPrepBoardInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PrepItemCreateManyPrepBoardInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PrepItemWhereUniqueInputSchema),z.lazy(() => PrepItemWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PrepItemWhereUniqueInputSchema),z.lazy(() => PrepItemWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PrepItemWhereUniqueInputSchema),z.lazy(() => PrepItemWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PrepItemWhereUniqueInputSchema),z.lazy(() => PrepItemWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PrepItemUpdateWithWhereUniqueWithoutPrepBoardInputSchema),z.lazy(() => PrepItemUpdateWithWhereUniqueWithoutPrepBoardInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PrepItemUpdateManyWithWhereWithoutPrepBoardInputSchema),z.lazy(() => PrepItemUpdateManyWithWhereWithoutPrepBoardInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PrepItemScalarWhereInputSchema),z.lazy(() => PrepItemScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PrepBoardCreateNestedOneWithoutPrepItemsInputSchema: z.ZodType<Prisma.PrepBoardCreateNestedOneWithoutPrepItemsInput> = z.object({
  create: z.union([ z.lazy(() => PrepBoardCreateWithoutPrepItemsInputSchema),z.lazy(() => PrepBoardUncheckedCreateWithoutPrepItemsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PrepBoardCreateOrConnectWithoutPrepItemsInputSchema).optional(),
  connect: z.lazy(() => PrepBoardWhereUniqueInputSchema).optional()
}).strict();

export const RecipeCreateNestedOneWithoutPrepItemsInputSchema: z.ZodType<Prisma.RecipeCreateNestedOneWithoutPrepItemsInput> = z.object({
  create: z.union([ z.lazy(() => RecipeCreateWithoutPrepItemsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutPrepItemsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RecipeCreateOrConnectWithoutPrepItemsInputSchema).optional(),
  connect: z.lazy(() => RecipeWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutPrepItemsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutPrepItemsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutPrepItemsInputSchema),z.lazy(() => UserUncheckedCreateWithoutPrepItemsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutPrepItemsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const PrepBoardUpdateOneRequiredWithoutPrepItemsNestedInputSchema: z.ZodType<Prisma.PrepBoardUpdateOneRequiredWithoutPrepItemsNestedInput> = z.object({
  create: z.union([ z.lazy(() => PrepBoardCreateWithoutPrepItemsInputSchema),z.lazy(() => PrepBoardUncheckedCreateWithoutPrepItemsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PrepBoardCreateOrConnectWithoutPrepItemsInputSchema).optional(),
  upsert: z.lazy(() => PrepBoardUpsertWithoutPrepItemsInputSchema).optional(),
  connect: z.lazy(() => PrepBoardWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => PrepBoardUpdateToOneWithWhereWithoutPrepItemsInputSchema),z.lazy(() => PrepBoardUpdateWithoutPrepItemsInputSchema),z.lazy(() => PrepBoardUncheckedUpdateWithoutPrepItemsInputSchema) ]).optional(),
}).strict();

export const RecipeUpdateOneRequiredWithoutPrepItemsNestedInputSchema: z.ZodType<Prisma.RecipeUpdateOneRequiredWithoutPrepItemsNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeCreateWithoutPrepItemsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutPrepItemsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RecipeCreateOrConnectWithoutPrepItemsInputSchema).optional(),
  upsert: z.lazy(() => RecipeUpsertWithoutPrepItemsInputSchema).optional(),
  connect: z.lazy(() => RecipeWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RecipeUpdateToOneWithWhereWithoutPrepItemsInputSchema),z.lazy(() => RecipeUpdateWithoutPrepItemsInputSchema),z.lazy(() => RecipeUncheckedUpdateWithoutPrepItemsInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutPrepItemsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutPrepItemsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutPrepItemsInputSchema),z.lazy(() => UserUncheckedCreateWithoutPrepItemsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutPrepItemsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutPrepItemsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutPrepItemsInputSchema),z.lazy(() => UserUpdateWithoutPrepItemsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutPrepItemsInputSchema) ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutPasswordResetsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutPasswordResetsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutPasswordResetsInputSchema),z.lazy(() => UserUncheckedCreateWithoutPasswordResetsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutPasswordResetsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const UserUpdateOneRequiredWithoutPasswordResetsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutPasswordResetsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutPasswordResetsInputSchema),z.lazy(() => UserUncheckedCreateWithoutPasswordResetsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutPasswordResetsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutPasswordResetsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutPasswordResetsInputSchema),z.lazy(() => UserUpdateWithoutPasswordResetsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutPasswordResetsInputSchema) ]).optional(),
}).strict();

export const RestaurantCreateNestedOneWithoutMenusInputSchema: z.ZodType<Prisma.RestaurantCreateNestedOneWithoutMenusInput> = z.object({
  create: z.union([ z.lazy(() => RestaurantCreateWithoutMenusInputSchema),z.lazy(() => RestaurantUncheckedCreateWithoutMenusInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RestaurantCreateOrConnectWithoutMenusInputSchema).optional(),
  connect: z.lazy(() => RestaurantWhereUniqueInputSchema).optional()
}).strict();

export const MenuItemCreateNestedManyWithoutMenuInputSchema: z.ZodType<Prisma.MenuItemCreateNestedManyWithoutMenuInput> = z.object({
  create: z.union([ z.lazy(() => MenuItemCreateWithoutMenuInputSchema),z.lazy(() => MenuItemCreateWithoutMenuInputSchema).array(),z.lazy(() => MenuItemUncheckedCreateWithoutMenuInputSchema),z.lazy(() => MenuItemUncheckedCreateWithoutMenuInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MenuItemCreateOrConnectWithoutMenuInputSchema),z.lazy(() => MenuItemCreateOrConnectWithoutMenuInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MenuItemCreateManyMenuInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => MenuItemWhereUniqueInputSchema),z.lazy(() => MenuItemWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const MenuCategoryCreateNestedManyWithoutMenuInputSchema: z.ZodType<Prisma.MenuCategoryCreateNestedManyWithoutMenuInput> = z.object({
  create: z.union([ z.lazy(() => MenuCategoryCreateWithoutMenuInputSchema),z.lazy(() => MenuCategoryCreateWithoutMenuInputSchema).array(),z.lazy(() => MenuCategoryUncheckedCreateWithoutMenuInputSchema),z.lazy(() => MenuCategoryUncheckedCreateWithoutMenuInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MenuCategoryCreateOrConnectWithoutMenuInputSchema),z.lazy(() => MenuCategoryCreateOrConnectWithoutMenuInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MenuCategoryCreateManyMenuInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => MenuCategoryWhereUniqueInputSchema),z.lazy(() => MenuCategoryWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const MenuItemUncheckedCreateNestedManyWithoutMenuInputSchema: z.ZodType<Prisma.MenuItemUncheckedCreateNestedManyWithoutMenuInput> = z.object({
  create: z.union([ z.lazy(() => MenuItemCreateWithoutMenuInputSchema),z.lazy(() => MenuItemCreateWithoutMenuInputSchema).array(),z.lazy(() => MenuItemUncheckedCreateWithoutMenuInputSchema),z.lazy(() => MenuItemUncheckedCreateWithoutMenuInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MenuItemCreateOrConnectWithoutMenuInputSchema),z.lazy(() => MenuItemCreateOrConnectWithoutMenuInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MenuItemCreateManyMenuInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => MenuItemWhereUniqueInputSchema),z.lazy(() => MenuItemWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const MenuCategoryUncheckedCreateNestedManyWithoutMenuInputSchema: z.ZodType<Prisma.MenuCategoryUncheckedCreateNestedManyWithoutMenuInput> = z.object({
  create: z.union([ z.lazy(() => MenuCategoryCreateWithoutMenuInputSchema),z.lazy(() => MenuCategoryCreateWithoutMenuInputSchema).array(),z.lazy(() => MenuCategoryUncheckedCreateWithoutMenuInputSchema),z.lazy(() => MenuCategoryUncheckedCreateWithoutMenuInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MenuCategoryCreateOrConnectWithoutMenuInputSchema),z.lazy(() => MenuCategoryCreateOrConnectWithoutMenuInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MenuCategoryCreateManyMenuInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => MenuCategoryWhereUniqueInputSchema),z.lazy(() => MenuCategoryWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RestaurantUpdateOneRequiredWithoutMenusNestedInputSchema: z.ZodType<Prisma.RestaurantUpdateOneRequiredWithoutMenusNestedInput> = z.object({
  create: z.union([ z.lazy(() => RestaurantCreateWithoutMenusInputSchema),z.lazy(() => RestaurantUncheckedCreateWithoutMenusInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RestaurantCreateOrConnectWithoutMenusInputSchema).optional(),
  upsert: z.lazy(() => RestaurantUpsertWithoutMenusInputSchema).optional(),
  connect: z.lazy(() => RestaurantWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RestaurantUpdateToOneWithWhereWithoutMenusInputSchema),z.lazy(() => RestaurantUpdateWithoutMenusInputSchema),z.lazy(() => RestaurantUncheckedUpdateWithoutMenusInputSchema) ]).optional(),
}).strict();

export const MenuItemUpdateManyWithoutMenuNestedInputSchema: z.ZodType<Prisma.MenuItemUpdateManyWithoutMenuNestedInput> = z.object({
  create: z.union([ z.lazy(() => MenuItemCreateWithoutMenuInputSchema),z.lazy(() => MenuItemCreateWithoutMenuInputSchema).array(),z.lazy(() => MenuItemUncheckedCreateWithoutMenuInputSchema),z.lazy(() => MenuItemUncheckedCreateWithoutMenuInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MenuItemCreateOrConnectWithoutMenuInputSchema),z.lazy(() => MenuItemCreateOrConnectWithoutMenuInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MenuItemUpsertWithWhereUniqueWithoutMenuInputSchema),z.lazy(() => MenuItemUpsertWithWhereUniqueWithoutMenuInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MenuItemCreateManyMenuInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => MenuItemWhereUniqueInputSchema),z.lazy(() => MenuItemWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MenuItemWhereUniqueInputSchema),z.lazy(() => MenuItemWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MenuItemWhereUniqueInputSchema),z.lazy(() => MenuItemWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MenuItemWhereUniqueInputSchema),z.lazy(() => MenuItemWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MenuItemUpdateWithWhereUniqueWithoutMenuInputSchema),z.lazy(() => MenuItemUpdateWithWhereUniqueWithoutMenuInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MenuItemUpdateManyWithWhereWithoutMenuInputSchema),z.lazy(() => MenuItemUpdateManyWithWhereWithoutMenuInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MenuItemScalarWhereInputSchema),z.lazy(() => MenuItemScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const MenuCategoryUpdateManyWithoutMenuNestedInputSchema: z.ZodType<Prisma.MenuCategoryUpdateManyWithoutMenuNestedInput> = z.object({
  create: z.union([ z.lazy(() => MenuCategoryCreateWithoutMenuInputSchema),z.lazy(() => MenuCategoryCreateWithoutMenuInputSchema).array(),z.lazy(() => MenuCategoryUncheckedCreateWithoutMenuInputSchema),z.lazy(() => MenuCategoryUncheckedCreateWithoutMenuInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MenuCategoryCreateOrConnectWithoutMenuInputSchema),z.lazy(() => MenuCategoryCreateOrConnectWithoutMenuInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MenuCategoryUpsertWithWhereUniqueWithoutMenuInputSchema),z.lazy(() => MenuCategoryUpsertWithWhereUniqueWithoutMenuInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MenuCategoryCreateManyMenuInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => MenuCategoryWhereUniqueInputSchema),z.lazy(() => MenuCategoryWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MenuCategoryWhereUniqueInputSchema),z.lazy(() => MenuCategoryWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MenuCategoryWhereUniqueInputSchema),z.lazy(() => MenuCategoryWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MenuCategoryWhereUniqueInputSchema),z.lazy(() => MenuCategoryWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MenuCategoryUpdateWithWhereUniqueWithoutMenuInputSchema),z.lazy(() => MenuCategoryUpdateWithWhereUniqueWithoutMenuInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MenuCategoryUpdateManyWithWhereWithoutMenuInputSchema),z.lazy(() => MenuCategoryUpdateManyWithWhereWithoutMenuInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MenuCategoryScalarWhereInputSchema),z.lazy(() => MenuCategoryScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const MenuItemUncheckedUpdateManyWithoutMenuNestedInputSchema: z.ZodType<Prisma.MenuItemUncheckedUpdateManyWithoutMenuNestedInput> = z.object({
  create: z.union([ z.lazy(() => MenuItemCreateWithoutMenuInputSchema),z.lazy(() => MenuItemCreateWithoutMenuInputSchema).array(),z.lazy(() => MenuItemUncheckedCreateWithoutMenuInputSchema),z.lazy(() => MenuItemUncheckedCreateWithoutMenuInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MenuItemCreateOrConnectWithoutMenuInputSchema),z.lazy(() => MenuItemCreateOrConnectWithoutMenuInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MenuItemUpsertWithWhereUniqueWithoutMenuInputSchema),z.lazy(() => MenuItemUpsertWithWhereUniqueWithoutMenuInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MenuItemCreateManyMenuInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => MenuItemWhereUniqueInputSchema),z.lazy(() => MenuItemWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MenuItemWhereUniqueInputSchema),z.lazy(() => MenuItemWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MenuItemWhereUniqueInputSchema),z.lazy(() => MenuItemWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MenuItemWhereUniqueInputSchema),z.lazy(() => MenuItemWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MenuItemUpdateWithWhereUniqueWithoutMenuInputSchema),z.lazy(() => MenuItemUpdateWithWhereUniqueWithoutMenuInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MenuItemUpdateManyWithWhereWithoutMenuInputSchema),z.lazy(() => MenuItemUpdateManyWithWhereWithoutMenuInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MenuItemScalarWhereInputSchema),z.lazy(() => MenuItemScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const MenuCategoryUncheckedUpdateManyWithoutMenuNestedInputSchema: z.ZodType<Prisma.MenuCategoryUncheckedUpdateManyWithoutMenuNestedInput> = z.object({
  create: z.union([ z.lazy(() => MenuCategoryCreateWithoutMenuInputSchema),z.lazy(() => MenuCategoryCreateWithoutMenuInputSchema).array(),z.lazy(() => MenuCategoryUncheckedCreateWithoutMenuInputSchema),z.lazy(() => MenuCategoryUncheckedCreateWithoutMenuInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MenuCategoryCreateOrConnectWithoutMenuInputSchema),z.lazy(() => MenuCategoryCreateOrConnectWithoutMenuInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MenuCategoryUpsertWithWhereUniqueWithoutMenuInputSchema),z.lazy(() => MenuCategoryUpsertWithWhereUniqueWithoutMenuInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MenuCategoryCreateManyMenuInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => MenuCategoryWhereUniqueInputSchema),z.lazy(() => MenuCategoryWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MenuCategoryWhereUniqueInputSchema),z.lazy(() => MenuCategoryWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MenuCategoryWhereUniqueInputSchema),z.lazy(() => MenuCategoryWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MenuCategoryWhereUniqueInputSchema),z.lazy(() => MenuCategoryWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MenuCategoryUpdateWithWhereUniqueWithoutMenuInputSchema),z.lazy(() => MenuCategoryUpdateWithWhereUniqueWithoutMenuInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MenuCategoryUpdateManyWithWhereWithoutMenuInputSchema),z.lazy(() => MenuCategoryUpdateManyWithWhereWithoutMenuInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MenuCategoryScalarWhereInputSchema),z.lazy(() => MenuCategoryScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const MenuItemCreateNestedOneWithoutMenuItemRecipesInputSchema: z.ZodType<Prisma.MenuItemCreateNestedOneWithoutMenuItemRecipesInput> = z.object({
  create: z.union([ z.lazy(() => MenuItemCreateWithoutMenuItemRecipesInputSchema),z.lazy(() => MenuItemUncheckedCreateWithoutMenuItemRecipesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => MenuItemCreateOrConnectWithoutMenuItemRecipesInputSchema).optional(),
  connect: z.lazy(() => MenuItemWhereUniqueInputSchema).optional()
}).strict();

export const RecipeCreateNestedOneWithoutMenuItemRecipesInputSchema: z.ZodType<Prisma.RecipeCreateNestedOneWithoutMenuItemRecipesInput> = z.object({
  create: z.union([ z.lazy(() => RecipeCreateWithoutMenuItemRecipesInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutMenuItemRecipesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RecipeCreateOrConnectWithoutMenuItemRecipesInputSchema).optional(),
  connect: z.lazy(() => RecipeWhereUniqueInputSchema).optional()
}).strict();

export const MenuItemUpdateOneRequiredWithoutMenuItemRecipesNestedInputSchema: z.ZodType<Prisma.MenuItemUpdateOneRequiredWithoutMenuItemRecipesNestedInput> = z.object({
  create: z.union([ z.lazy(() => MenuItemCreateWithoutMenuItemRecipesInputSchema),z.lazy(() => MenuItemUncheckedCreateWithoutMenuItemRecipesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => MenuItemCreateOrConnectWithoutMenuItemRecipesInputSchema).optional(),
  upsert: z.lazy(() => MenuItemUpsertWithoutMenuItemRecipesInputSchema).optional(),
  connect: z.lazy(() => MenuItemWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => MenuItemUpdateToOneWithWhereWithoutMenuItemRecipesInputSchema),z.lazy(() => MenuItemUpdateWithoutMenuItemRecipesInputSchema),z.lazy(() => MenuItemUncheckedUpdateWithoutMenuItemRecipesInputSchema) ]).optional(),
}).strict();

export const RecipeUpdateOneRequiredWithoutMenuItemRecipesNestedInputSchema: z.ZodType<Prisma.RecipeUpdateOneRequiredWithoutMenuItemRecipesNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeCreateWithoutMenuItemRecipesInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutMenuItemRecipesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RecipeCreateOrConnectWithoutMenuItemRecipesInputSchema).optional(),
  upsert: z.lazy(() => RecipeUpsertWithoutMenuItemRecipesInputSchema).optional(),
  connect: z.lazy(() => RecipeWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RecipeUpdateToOneWithWhereWithoutMenuItemRecipesInputSchema),z.lazy(() => RecipeUpdateWithoutMenuItemRecipesInputSchema),z.lazy(() => RecipeUncheckedUpdateWithoutMenuItemRecipesInputSchema) ]).optional(),
}).strict();

export const MenuItemCreaterecipeIdsInputSchema: z.ZodType<Prisma.MenuItemCreaterecipeIdsInput> = z.object({
  set: z.number().array()
}).strict();

export const MenuItemCreaterecipeServingsAmountInputSchema: z.ZodType<Prisma.MenuItemCreaterecipeServingsAmountInput> = z.object({
  set: z.number().array()
}).strict();

export const MenuItemCreaterecipeServingsCostInputSchema: z.ZodType<Prisma.MenuItemCreaterecipeServingsCostInput> = z.object({
  set: z.number().array()
}).strict();

export const MenuItemCreateallergensInputSchema: z.ZodType<Prisma.MenuItemCreateallergensInput> = z.object({
  set: z.string().array()
}).strict();

export const MenuCreateNestedOneWithoutMenuItemsInputSchema: z.ZodType<Prisma.MenuCreateNestedOneWithoutMenuItemsInput> = z.object({
  create: z.union([ z.lazy(() => MenuCreateWithoutMenuItemsInputSchema),z.lazy(() => MenuUncheckedCreateWithoutMenuItemsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => MenuCreateOrConnectWithoutMenuItemsInputSchema).optional(),
  connect: z.lazy(() => MenuWhereUniqueInputSchema).optional()
}).strict();

export const MenuCategoryCreateNestedOneWithoutMenuItemsInputSchema: z.ZodType<Prisma.MenuCategoryCreateNestedOneWithoutMenuItemsInput> = z.object({
  create: z.union([ z.lazy(() => MenuCategoryCreateWithoutMenuItemsInputSchema),z.lazy(() => MenuCategoryUncheckedCreateWithoutMenuItemsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => MenuCategoryCreateOrConnectWithoutMenuItemsInputSchema).optional(),
  connect: z.lazy(() => MenuCategoryWhereUniqueInputSchema).optional()
}).strict();

export const RecipeCreateNestedManyWithoutMenuItemsInputSchema: z.ZodType<Prisma.RecipeCreateNestedManyWithoutMenuItemsInput> = z.object({
  create: z.union([ z.lazy(() => RecipeCreateWithoutMenuItemsInputSchema),z.lazy(() => RecipeCreateWithoutMenuItemsInputSchema).array(),z.lazy(() => RecipeUncheckedCreateWithoutMenuItemsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutMenuItemsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeCreateOrConnectWithoutMenuItemsInputSchema),z.lazy(() => RecipeCreateOrConnectWithoutMenuItemsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RecipeWhereUniqueInputSchema),z.lazy(() => RecipeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const MenuItemRecipeCreateNestedManyWithoutMenuItemInputSchema: z.ZodType<Prisma.MenuItemRecipeCreateNestedManyWithoutMenuItemInput> = z.object({
  create: z.union([ z.lazy(() => MenuItemRecipeCreateWithoutMenuItemInputSchema),z.lazy(() => MenuItemRecipeCreateWithoutMenuItemInputSchema).array(),z.lazy(() => MenuItemRecipeUncheckedCreateWithoutMenuItemInputSchema),z.lazy(() => MenuItemRecipeUncheckedCreateWithoutMenuItemInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MenuItemRecipeCreateOrConnectWithoutMenuItemInputSchema),z.lazy(() => MenuItemRecipeCreateOrConnectWithoutMenuItemInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MenuItemRecipeCreateManyMenuItemInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => MenuItemRecipeWhereUniqueInputSchema),z.lazy(() => MenuItemRecipeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const NutritionalInfoCreateNestedOneWithoutMenuItemInputSchema: z.ZodType<Prisma.NutritionalInfoCreateNestedOneWithoutMenuItemInput> = z.object({
  create: z.union([ z.lazy(() => NutritionalInfoCreateWithoutMenuItemInputSchema),z.lazy(() => NutritionalInfoUncheckedCreateWithoutMenuItemInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => NutritionalInfoCreateOrConnectWithoutMenuItemInputSchema).optional(),
  connect: z.lazy(() => NutritionalInfoWhereUniqueInputSchema).optional()
}).strict();

export const NutritionalRecommendationCreateNestedManyWithoutMenuItemInputSchema: z.ZodType<Prisma.NutritionalRecommendationCreateNestedManyWithoutMenuItemInput> = z.object({
  create: z.union([ z.lazy(() => NutritionalRecommendationCreateWithoutMenuItemInputSchema),z.lazy(() => NutritionalRecommendationCreateWithoutMenuItemInputSchema).array(),z.lazy(() => NutritionalRecommendationUncheckedCreateWithoutMenuItemInputSchema),z.lazy(() => NutritionalRecommendationUncheckedCreateWithoutMenuItemInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => NutritionalRecommendationCreateOrConnectWithoutMenuItemInputSchema),z.lazy(() => NutritionalRecommendationCreateOrConnectWithoutMenuItemInputSchema).array() ]).optional(),
  createMany: z.lazy(() => NutritionalRecommendationCreateManyMenuItemInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => NutritionalRecommendationWhereUniqueInputSchema),z.lazy(() => NutritionalRecommendationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SalesTransactionsCreateNestedManyWithoutMenuItemInputSchema: z.ZodType<Prisma.SalesTransactionsCreateNestedManyWithoutMenuItemInput> = z.object({
  create: z.union([ z.lazy(() => SalesTransactionsCreateWithoutMenuItemInputSchema),z.lazy(() => SalesTransactionsCreateWithoutMenuItemInputSchema).array(),z.lazy(() => SalesTransactionsUncheckedCreateWithoutMenuItemInputSchema),z.lazy(() => SalesTransactionsUncheckedCreateWithoutMenuItemInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SalesTransactionsCreateOrConnectWithoutMenuItemInputSchema),z.lazy(() => SalesTransactionsCreateOrConnectWithoutMenuItemInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SalesTransactionsCreateManyMenuItemInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SalesTransactionsWhereUniqueInputSchema),z.lazy(() => SalesTransactionsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LeftoverItemCreateNestedManyWithoutMenuItemInputSchema: z.ZodType<Prisma.LeftoverItemCreateNestedManyWithoutMenuItemInput> = z.object({
  create: z.union([ z.lazy(() => LeftoverItemCreateWithoutMenuItemInputSchema),z.lazy(() => LeftoverItemCreateWithoutMenuItemInputSchema).array(),z.lazy(() => LeftoverItemUncheckedCreateWithoutMenuItemInputSchema),z.lazy(() => LeftoverItemUncheckedCreateWithoutMenuItemInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LeftoverItemCreateOrConnectWithoutMenuItemInputSchema),z.lazy(() => LeftoverItemCreateOrConnectWithoutMenuItemInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LeftoverItemCreateManyMenuItemInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LeftoverItemWhereUniqueInputSchema),z.lazy(() => LeftoverItemWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CustomerFeedbackCreateNestedManyWithoutMenuItemInputSchema: z.ZodType<Prisma.CustomerFeedbackCreateNestedManyWithoutMenuItemInput> = z.object({
  create: z.union([ z.lazy(() => CustomerFeedbackCreateWithoutMenuItemInputSchema),z.lazy(() => CustomerFeedbackCreateWithoutMenuItemInputSchema).array(),z.lazy(() => CustomerFeedbackUncheckedCreateWithoutMenuItemInputSchema),z.lazy(() => CustomerFeedbackUncheckedCreateWithoutMenuItemInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomerFeedbackCreateOrConnectWithoutMenuItemInputSchema),z.lazy(() => CustomerFeedbackCreateOrConnectWithoutMenuItemInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomerFeedbackCreateManyMenuItemInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CustomerFeedbackWhereUniqueInputSchema),z.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const DietaryRestrictionCreateNestedManyWithoutMenuItemsInputSchema: z.ZodType<Prisma.DietaryRestrictionCreateNestedManyWithoutMenuItemsInput> = z.object({
  create: z.union([ z.lazy(() => DietaryRestrictionCreateWithoutMenuItemsInputSchema),z.lazy(() => DietaryRestrictionCreateWithoutMenuItemsInputSchema).array(),z.lazy(() => DietaryRestrictionUncheckedCreateWithoutMenuItemsInputSchema),z.lazy(() => DietaryRestrictionUncheckedCreateWithoutMenuItemsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DietaryRestrictionCreateOrConnectWithoutMenuItemsInputSchema),z.lazy(() => DietaryRestrictionCreateOrConnectWithoutMenuItemsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => DietaryRestrictionWhereUniqueInputSchema),z.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RecipeUncheckedCreateNestedManyWithoutMenuItemsInputSchema: z.ZodType<Prisma.RecipeUncheckedCreateNestedManyWithoutMenuItemsInput> = z.object({
  create: z.union([ z.lazy(() => RecipeCreateWithoutMenuItemsInputSchema),z.lazy(() => RecipeCreateWithoutMenuItemsInputSchema).array(),z.lazy(() => RecipeUncheckedCreateWithoutMenuItemsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutMenuItemsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeCreateOrConnectWithoutMenuItemsInputSchema),z.lazy(() => RecipeCreateOrConnectWithoutMenuItemsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RecipeWhereUniqueInputSchema),z.lazy(() => RecipeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const MenuItemRecipeUncheckedCreateNestedManyWithoutMenuItemInputSchema: z.ZodType<Prisma.MenuItemRecipeUncheckedCreateNestedManyWithoutMenuItemInput> = z.object({
  create: z.union([ z.lazy(() => MenuItemRecipeCreateWithoutMenuItemInputSchema),z.lazy(() => MenuItemRecipeCreateWithoutMenuItemInputSchema).array(),z.lazy(() => MenuItemRecipeUncheckedCreateWithoutMenuItemInputSchema),z.lazy(() => MenuItemRecipeUncheckedCreateWithoutMenuItemInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MenuItemRecipeCreateOrConnectWithoutMenuItemInputSchema),z.lazy(() => MenuItemRecipeCreateOrConnectWithoutMenuItemInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MenuItemRecipeCreateManyMenuItemInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => MenuItemRecipeWhereUniqueInputSchema),z.lazy(() => MenuItemRecipeWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const NutritionalInfoUncheckedCreateNestedOneWithoutMenuItemInputSchema: z.ZodType<Prisma.NutritionalInfoUncheckedCreateNestedOneWithoutMenuItemInput> = z.object({
  create: z.union([ z.lazy(() => NutritionalInfoCreateWithoutMenuItemInputSchema),z.lazy(() => NutritionalInfoUncheckedCreateWithoutMenuItemInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => NutritionalInfoCreateOrConnectWithoutMenuItemInputSchema).optional(),
  connect: z.lazy(() => NutritionalInfoWhereUniqueInputSchema).optional()
}).strict();

export const NutritionalRecommendationUncheckedCreateNestedManyWithoutMenuItemInputSchema: z.ZodType<Prisma.NutritionalRecommendationUncheckedCreateNestedManyWithoutMenuItemInput> = z.object({
  create: z.union([ z.lazy(() => NutritionalRecommendationCreateWithoutMenuItemInputSchema),z.lazy(() => NutritionalRecommendationCreateWithoutMenuItemInputSchema).array(),z.lazy(() => NutritionalRecommendationUncheckedCreateWithoutMenuItemInputSchema),z.lazy(() => NutritionalRecommendationUncheckedCreateWithoutMenuItemInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => NutritionalRecommendationCreateOrConnectWithoutMenuItemInputSchema),z.lazy(() => NutritionalRecommendationCreateOrConnectWithoutMenuItemInputSchema).array() ]).optional(),
  createMany: z.lazy(() => NutritionalRecommendationCreateManyMenuItemInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => NutritionalRecommendationWhereUniqueInputSchema),z.lazy(() => NutritionalRecommendationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SalesTransactionsUncheckedCreateNestedManyWithoutMenuItemInputSchema: z.ZodType<Prisma.SalesTransactionsUncheckedCreateNestedManyWithoutMenuItemInput> = z.object({
  create: z.union([ z.lazy(() => SalesTransactionsCreateWithoutMenuItemInputSchema),z.lazy(() => SalesTransactionsCreateWithoutMenuItemInputSchema).array(),z.lazy(() => SalesTransactionsUncheckedCreateWithoutMenuItemInputSchema),z.lazy(() => SalesTransactionsUncheckedCreateWithoutMenuItemInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SalesTransactionsCreateOrConnectWithoutMenuItemInputSchema),z.lazy(() => SalesTransactionsCreateOrConnectWithoutMenuItemInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SalesTransactionsCreateManyMenuItemInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SalesTransactionsWhereUniqueInputSchema),z.lazy(() => SalesTransactionsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LeftoverItemUncheckedCreateNestedManyWithoutMenuItemInputSchema: z.ZodType<Prisma.LeftoverItemUncheckedCreateNestedManyWithoutMenuItemInput> = z.object({
  create: z.union([ z.lazy(() => LeftoverItemCreateWithoutMenuItemInputSchema),z.lazy(() => LeftoverItemCreateWithoutMenuItemInputSchema).array(),z.lazy(() => LeftoverItemUncheckedCreateWithoutMenuItemInputSchema),z.lazy(() => LeftoverItemUncheckedCreateWithoutMenuItemInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LeftoverItemCreateOrConnectWithoutMenuItemInputSchema),z.lazy(() => LeftoverItemCreateOrConnectWithoutMenuItemInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LeftoverItemCreateManyMenuItemInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LeftoverItemWhereUniqueInputSchema),z.lazy(() => LeftoverItemWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CustomerFeedbackUncheckedCreateNestedManyWithoutMenuItemInputSchema: z.ZodType<Prisma.CustomerFeedbackUncheckedCreateNestedManyWithoutMenuItemInput> = z.object({
  create: z.union([ z.lazy(() => CustomerFeedbackCreateWithoutMenuItemInputSchema),z.lazy(() => CustomerFeedbackCreateWithoutMenuItemInputSchema).array(),z.lazy(() => CustomerFeedbackUncheckedCreateWithoutMenuItemInputSchema),z.lazy(() => CustomerFeedbackUncheckedCreateWithoutMenuItemInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomerFeedbackCreateOrConnectWithoutMenuItemInputSchema),z.lazy(() => CustomerFeedbackCreateOrConnectWithoutMenuItemInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomerFeedbackCreateManyMenuItemInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CustomerFeedbackWhereUniqueInputSchema),z.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const DietaryRestrictionUncheckedCreateNestedManyWithoutMenuItemsInputSchema: z.ZodType<Prisma.DietaryRestrictionUncheckedCreateNestedManyWithoutMenuItemsInput> = z.object({
  create: z.union([ z.lazy(() => DietaryRestrictionCreateWithoutMenuItemsInputSchema),z.lazy(() => DietaryRestrictionCreateWithoutMenuItemsInputSchema).array(),z.lazy(() => DietaryRestrictionUncheckedCreateWithoutMenuItemsInputSchema),z.lazy(() => DietaryRestrictionUncheckedCreateWithoutMenuItemsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DietaryRestrictionCreateOrConnectWithoutMenuItemsInputSchema),z.lazy(() => DietaryRestrictionCreateOrConnectWithoutMenuItemsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => DietaryRestrictionWhereUniqueInputSchema),z.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const MenuItemUpdaterecipeIdsInputSchema: z.ZodType<Prisma.MenuItemUpdaterecipeIdsInput> = z.object({
  set: z.number().array().optional(),
  push: z.union([ z.number(),z.number().array() ]).optional(),
}).strict();

export const MenuItemUpdaterecipeServingsAmountInputSchema: z.ZodType<Prisma.MenuItemUpdaterecipeServingsAmountInput> = z.object({
  set: z.number().array().optional(),
  push: z.union([ z.number(),z.number().array() ]).optional(),
}).strict();

export const MenuItemUpdaterecipeServingsCostInputSchema: z.ZodType<Prisma.MenuItemUpdaterecipeServingsCostInput> = z.object({
  set: z.number().array().optional(),
  push: z.union([ z.number(),z.number().array() ]).optional(),
}).strict();

export const MenuItemUpdateallergensInputSchema: z.ZodType<Prisma.MenuItemUpdateallergensInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const MenuUpdateOneRequiredWithoutMenuItemsNestedInputSchema: z.ZodType<Prisma.MenuUpdateOneRequiredWithoutMenuItemsNestedInput> = z.object({
  create: z.union([ z.lazy(() => MenuCreateWithoutMenuItemsInputSchema),z.lazy(() => MenuUncheckedCreateWithoutMenuItemsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => MenuCreateOrConnectWithoutMenuItemsInputSchema).optional(),
  upsert: z.lazy(() => MenuUpsertWithoutMenuItemsInputSchema).optional(),
  connect: z.lazy(() => MenuWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => MenuUpdateToOneWithWhereWithoutMenuItemsInputSchema),z.lazy(() => MenuUpdateWithoutMenuItemsInputSchema),z.lazy(() => MenuUncheckedUpdateWithoutMenuItemsInputSchema) ]).optional(),
}).strict();

export const MenuCategoryUpdateOneWithoutMenuItemsNestedInputSchema: z.ZodType<Prisma.MenuCategoryUpdateOneWithoutMenuItemsNestedInput> = z.object({
  create: z.union([ z.lazy(() => MenuCategoryCreateWithoutMenuItemsInputSchema),z.lazy(() => MenuCategoryUncheckedCreateWithoutMenuItemsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => MenuCategoryCreateOrConnectWithoutMenuItemsInputSchema).optional(),
  upsert: z.lazy(() => MenuCategoryUpsertWithoutMenuItemsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => MenuCategoryWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => MenuCategoryWhereInputSchema) ]).optional(),
  connect: z.lazy(() => MenuCategoryWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => MenuCategoryUpdateToOneWithWhereWithoutMenuItemsInputSchema),z.lazy(() => MenuCategoryUpdateWithoutMenuItemsInputSchema),z.lazy(() => MenuCategoryUncheckedUpdateWithoutMenuItemsInputSchema) ]).optional(),
}).strict();

export const RecipeUpdateManyWithoutMenuItemsNestedInputSchema: z.ZodType<Prisma.RecipeUpdateManyWithoutMenuItemsNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeCreateWithoutMenuItemsInputSchema),z.lazy(() => RecipeCreateWithoutMenuItemsInputSchema).array(),z.lazy(() => RecipeUncheckedCreateWithoutMenuItemsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutMenuItemsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeCreateOrConnectWithoutMenuItemsInputSchema),z.lazy(() => RecipeCreateOrConnectWithoutMenuItemsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RecipeUpsertWithWhereUniqueWithoutMenuItemsInputSchema),z.lazy(() => RecipeUpsertWithWhereUniqueWithoutMenuItemsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => RecipeWhereUniqueInputSchema),z.lazy(() => RecipeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RecipeWhereUniqueInputSchema),z.lazy(() => RecipeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RecipeWhereUniqueInputSchema),z.lazy(() => RecipeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RecipeWhereUniqueInputSchema),z.lazy(() => RecipeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RecipeUpdateWithWhereUniqueWithoutMenuItemsInputSchema),z.lazy(() => RecipeUpdateWithWhereUniqueWithoutMenuItemsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RecipeUpdateManyWithWhereWithoutMenuItemsInputSchema),z.lazy(() => RecipeUpdateManyWithWhereWithoutMenuItemsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RecipeScalarWhereInputSchema),z.lazy(() => RecipeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const MenuItemRecipeUpdateManyWithoutMenuItemNestedInputSchema: z.ZodType<Prisma.MenuItemRecipeUpdateManyWithoutMenuItemNestedInput> = z.object({
  create: z.union([ z.lazy(() => MenuItemRecipeCreateWithoutMenuItemInputSchema),z.lazy(() => MenuItemRecipeCreateWithoutMenuItemInputSchema).array(),z.lazy(() => MenuItemRecipeUncheckedCreateWithoutMenuItemInputSchema),z.lazy(() => MenuItemRecipeUncheckedCreateWithoutMenuItemInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MenuItemRecipeCreateOrConnectWithoutMenuItemInputSchema),z.lazy(() => MenuItemRecipeCreateOrConnectWithoutMenuItemInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MenuItemRecipeUpsertWithWhereUniqueWithoutMenuItemInputSchema),z.lazy(() => MenuItemRecipeUpsertWithWhereUniqueWithoutMenuItemInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MenuItemRecipeCreateManyMenuItemInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => MenuItemRecipeWhereUniqueInputSchema),z.lazy(() => MenuItemRecipeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MenuItemRecipeWhereUniqueInputSchema),z.lazy(() => MenuItemRecipeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MenuItemRecipeWhereUniqueInputSchema),z.lazy(() => MenuItemRecipeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MenuItemRecipeWhereUniqueInputSchema),z.lazy(() => MenuItemRecipeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MenuItemRecipeUpdateWithWhereUniqueWithoutMenuItemInputSchema),z.lazy(() => MenuItemRecipeUpdateWithWhereUniqueWithoutMenuItemInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MenuItemRecipeUpdateManyWithWhereWithoutMenuItemInputSchema),z.lazy(() => MenuItemRecipeUpdateManyWithWhereWithoutMenuItemInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MenuItemRecipeScalarWhereInputSchema),z.lazy(() => MenuItemRecipeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const NutritionalInfoUpdateOneWithoutMenuItemNestedInputSchema: z.ZodType<Prisma.NutritionalInfoUpdateOneWithoutMenuItemNestedInput> = z.object({
  create: z.union([ z.lazy(() => NutritionalInfoCreateWithoutMenuItemInputSchema),z.lazy(() => NutritionalInfoUncheckedCreateWithoutMenuItemInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => NutritionalInfoCreateOrConnectWithoutMenuItemInputSchema).optional(),
  upsert: z.lazy(() => NutritionalInfoUpsertWithoutMenuItemInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => NutritionalInfoWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => NutritionalInfoWhereInputSchema) ]).optional(),
  connect: z.lazy(() => NutritionalInfoWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => NutritionalInfoUpdateToOneWithWhereWithoutMenuItemInputSchema),z.lazy(() => NutritionalInfoUpdateWithoutMenuItemInputSchema),z.lazy(() => NutritionalInfoUncheckedUpdateWithoutMenuItemInputSchema) ]).optional(),
}).strict();

export const NutritionalRecommendationUpdateManyWithoutMenuItemNestedInputSchema: z.ZodType<Prisma.NutritionalRecommendationUpdateManyWithoutMenuItemNestedInput> = z.object({
  create: z.union([ z.lazy(() => NutritionalRecommendationCreateWithoutMenuItemInputSchema),z.lazy(() => NutritionalRecommendationCreateWithoutMenuItemInputSchema).array(),z.lazy(() => NutritionalRecommendationUncheckedCreateWithoutMenuItemInputSchema),z.lazy(() => NutritionalRecommendationUncheckedCreateWithoutMenuItemInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => NutritionalRecommendationCreateOrConnectWithoutMenuItemInputSchema),z.lazy(() => NutritionalRecommendationCreateOrConnectWithoutMenuItemInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => NutritionalRecommendationUpsertWithWhereUniqueWithoutMenuItemInputSchema),z.lazy(() => NutritionalRecommendationUpsertWithWhereUniqueWithoutMenuItemInputSchema).array() ]).optional(),
  createMany: z.lazy(() => NutritionalRecommendationCreateManyMenuItemInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => NutritionalRecommendationWhereUniqueInputSchema),z.lazy(() => NutritionalRecommendationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => NutritionalRecommendationWhereUniqueInputSchema),z.lazy(() => NutritionalRecommendationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => NutritionalRecommendationWhereUniqueInputSchema),z.lazy(() => NutritionalRecommendationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => NutritionalRecommendationWhereUniqueInputSchema),z.lazy(() => NutritionalRecommendationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => NutritionalRecommendationUpdateWithWhereUniqueWithoutMenuItemInputSchema),z.lazy(() => NutritionalRecommendationUpdateWithWhereUniqueWithoutMenuItemInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => NutritionalRecommendationUpdateManyWithWhereWithoutMenuItemInputSchema),z.lazy(() => NutritionalRecommendationUpdateManyWithWhereWithoutMenuItemInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => NutritionalRecommendationScalarWhereInputSchema),z.lazy(() => NutritionalRecommendationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SalesTransactionsUpdateManyWithoutMenuItemNestedInputSchema: z.ZodType<Prisma.SalesTransactionsUpdateManyWithoutMenuItemNestedInput> = z.object({
  create: z.union([ z.lazy(() => SalesTransactionsCreateWithoutMenuItemInputSchema),z.lazy(() => SalesTransactionsCreateWithoutMenuItemInputSchema).array(),z.lazy(() => SalesTransactionsUncheckedCreateWithoutMenuItemInputSchema),z.lazy(() => SalesTransactionsUncheckedCreateWithoutMenuItemInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SalesTransactionsCreateOrConnectWithoutMenuItemInputSchema),z.lazy(() => SalesTransactionsCreateOrConnectWithoutMenuItemInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SalesTransactionsUpsertWithWhereUniqueWithoutMenuItemInputSchema),z.lazy(() => SalesTransactionsUpsertWithWhereUniqueWithoutMenuItemInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SalesTransactionsCreateManyMenuItemInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SalesTransactionsWhereUniqueInputSchema),z.lazy(() => SalesTransactionsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SalesTransactionsWhereUniqueInputSchema),z.lazy(() => SalesTransactionsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SalesTransactionsWhereUniqueInputSchema),z.lazy(() => SalesTransactionsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SalesTransactionsWhereUniqueInputSchema),z.lazy(() => SalesTransactionsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SalesTransactionsUpdateWithWhereUniqueWithoutMenuItemInputSchema),z.lazy(() => SalesTransactionsUpdateWithWhereUniqueWithoutMenuItemInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SalesTransactionsUpdateManyWithWhereWithoutMenuItemInputSchema),z.lazy(() => SalesTransactionsUpdateManyWithWhereWithoutMenuItemInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SalesTransactionsScalarWhereInputSchema),z.lazy(() => SalesTransactionsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LeftoverItemUpdateManyWithoutMenuItemNestedInputSchema: z.ZodType<Prisma.LeftoverItemUpdateManyWithoutMenuItemNestedInput> = z.object({
  create: z.union([ z.lazy(() => LeftoverItemCreateWithoutMenuItemInputSchema),z.lazy(() => LeftoverItemCreateWithoutMenuItemInputSchema).array(),z.lazy(() => LeftoverItemUncheckedCreateWithoutMenuItemInputSchema),z.lazy(() => LeftoverItemUncheckedCreateWithoutMenuItemInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LeftoverItemCreateOrConnectWithoutMenuItemInputSchema),z.lazy(() => LeftoverItemCreateOrConnectWithoutMenuItemInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LeftoverItemUpsertWithWhereUniqueWithoutMenuItemInputSchema),z.lazy(() => LeftoverItemUpsertWithWhereUniqueWithoutMenuItemInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LeftoverItemCreateManyMenuItemInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LeftoverItemWhereUniqueInputSchema),z.lazy(() => LeftoverItemWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LeftoverItemWhereUniqueInputSchema),z.lazy(() => LeftoverItemWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LeftoverItemWhereUniqueInputSchema),z.lazy(() => LeftoverItemWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LeftoverItemWhereUniqueInputSchema),z.lazy(() => LeftoverItemWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LeftoverItemUpdateWithWhereUniqueWithoutMenuItemInputSchema),z.lazy(() => LeftoverItemUpdateWithWhereUniqueWithoutMenuItemInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LeftoverItemUpdateManyWithWhereWithoutMenuItemInputSchema),z.lazy(() => LeftoverItemUpdateManyWithWhereWithoutMenuItemInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LeftoverItemScalarWhereInputSchema),z.lazy(() => LeftoverItemScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CustomerFeedbackUpdateManyWithoutMenuItemNestedInputSchema: z.ZodType<Prisma.CustomerFeedbackUpdateManyWithoutMenuItemNestedInput> = z.object({
  create: z.union([ z.lazy(() => CustomerFeedbackCreateWithoutMenuItemInputSchema),z.lazy(() => CustomerFeedbackCreateWithoutMenuItemInputSchema).array(),z.lazy(() => CustomerFeedbackUncheckedCreateWithoutMenuItemInputSchema),z.lazy(() => CustomerFeedbackUncheckedCreateWithoutMenuItemInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomerFeedbackCreateOrConnectWithoutMenuItemInputSchema),z.lazy(() => CustomerFeedbackCreateOrConnectWithoutMenuItemInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CustomerFeedbackUpsertWithWhereUniqueWithoutMenuItemInputSchema),z.lazy(() => CustomerFeedbackUpsertWithWhereUniqueWithoutMenuItemInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomerFeedbackCreateManyMenuItemInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CustomerFeedbackWhereUniqueInputSchema),z.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CustomerFeedbackWhereUniqueInputSchema),z.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CustomerFeedbackWhereUniqueInputSchema),z.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CustomerFeedbackWhereUniqueInputSchema),z.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CustomerFeedbackUpdateWithWhereUniqueWithoutMenuItemInputSchema),z.lazy(() => CustomerFeedbackUpdateWithWhereUniqueWithoutMenuItemInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CustomerFeedbackUpdateManyWithWhereWithoutMenuItemInputSchema),z.lazy(() => CustomerFeedbackUpdateManyWithWhereWithoutMenuItemInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CustomerFeedbackScalarWhereInputSchema),z.lazy(() => CustomerFeedbackScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const DietaryRestrictionUpdateManyWithoutMenuItemsNestedInputSchema: z.ZodType<Prisma.DietaryRestrictionUpdateManyWithoutMenuItemsNestedInput> = z.object({
  create: z.union([ z.lazy(() => DietaryRestrictionCreateWithoutMenuItemsInputSchema),z.lazy(() => DietaryRestrictionCreateWithoutMenuItemsInputSchema).array(),z.lazy(() => DietaryRestrictionUncheckedCreateWithoutMenuItemsInputSchema),z.lazy(() => DietaryRestrictionUncheckedCreateWithoutMenuItemsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DietaryRestrictionCreateOrConnectWithoutMenuItemsInputSchema),z.lazy(() => DietaryRestrictionCreateOrConnectWithoutMenuItemsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => DietaryRestrictionUpsertWithWhereUniqueWithoutMenuItemsInputSchema),z.lazy(() => DietaryRestrictionUpsertWithWhereUniqueWithoutMenuItemsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => DietaryRestrictionWhereUniqueInputSchema),z.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => DietaryRestrictionWhereUniqueInputSchema),z.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => DietaryRestrictionWhereUniqueInputSchema),z.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => DietaryRestrictionWhereUniqueInputSchema),z.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => DietaryRestrictionUpdateWithWhereUniqueWithoutMenuItemsInputSchema),z.lazy(() => DietaryRestrictionUpdateWithWhereUniqueWithoutMenuItemsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => DietaryRestrictionUpdateManyWithWhereWithoutMenuItemsInputSchema),z.lazy(() => DietaryRestrictionUpdateManyWithWhereWithoutMenuItemsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => DietaryRestrictionScalarWhereInputSchema),z.lazy(() => DietaryRestrictionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RecipeUncheckedUpdateManyWithoutMenuItemsNestedInputSchema: z.ZodType<Prisma.RecipeUncheckedUpdateManyWithoutMenuItemsNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeCreateWithoutMenuItemsInputSchema),z.lazy(() => RecipeCreateWithoutMenuItemsInputSchema).array(),z.lazy(() => RecipeUncheckedCreateWithoutMenuItemsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutMenuItemsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RecipeCreateOrConnectWithoutMenuItemsInputSchema),z.lazy(() => RecipeCreateOrConnectWithoutMenuItemsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RecipeUpsertWithWhereUniqueWithoutMenuItemsInputSchema),z.lazy(() => RecipeUpsertWithWhereUniqueWithoutMenuItemsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => RecipeWhereUniqueInputSchema),z.lazy(() => RecipeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RecipeWhereUniqueInputSchema),z.lazy(() => RecipeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RecipeWhereUniqueInputSchema),z.lazy(() => RecipeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RecipeWhereUniqueInputSchema),z.lazy(() => RecipeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RecipeUpdateWithWhereUniqueWithoutMenuItemsInputSchema),z.lazy(() => RecipeUpdateWithWhereUniqueWithoutMenuItemsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RecipeUpdateManyWithWhereWithoutMenuItemsInputSchema),z.lazy(() => RecipeUpdateManyWithWhereWithoutMenuItemsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RecipeScalarWhereInputSchema),z.lazy(() => RecipeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const MenuItemRecipeUncheckedUpdateManyWithoutMenuItemNestedInputSchema: z.ZodType<Prisma.MenuItemRecipeUncheckedUpdateManyWithoutMenuItemNestedInput> = z.object({
  create: z.union([ z.lazy(() => MenuItemRecipeCreateWithoutMenuItemInputSchema),z.lazy(() => MenuItemRecipeCreateWithoutMenuItemInputSchema).array(),z.lazy(() => MenuItemRecipeUncheckedCreateWithoutMenuItemInputSchema),z.lazy(() => MenuItemRecipeUncheckedCreateWithoutMenuItemInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MenuItemRecipeCreateOrConnectWithoutMenuItemInputSchema),z.lazy(() => MenuItemRecipeCreateOrConnectWithoutMenuItemInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MenuItemRecipeUpsertWithWhereUniqueWithoutMenuItemInputSchema),z.lazy(() => MenuItemRecipeUpsertWithWhereUniqueWithoutMenuItemInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MenuItemRecipeCreateManyMenuItemInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => MenuItemRecipeWhereUniqueInputSchema),z.lazy(() => MenuItemRecipeWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MenuItemRecipeWhereUniqueInputSchema),z.lazy(() => MenuItemRecipeWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MenuItemRecipeWhereUniqueInputSchema),z.lazy(() => MenuItemRecipeWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MenuItemRecipeWhereUniqueInputSchema),z.lazy(() => MenuItemRecipeWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MenuItemRecipeUpdateWithWhereUniqueWithoutMenuItemInputSchema),z.lazy(() => MenuItemRecipeUpdateWithWhereUniqueWithoutMenuItemInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MenuItemRecipeUpdateManyWithWhereWithoutMenuItemInputSchema),z.lazy(() => MenuItemRecipeUpdateManyWithWhereWithoutMenuItemInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MenuItemRecipeScalarWhereInputSchema),z.lazy(() => MenuItemRecipeScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const NutritionalInfoUncheckedUpdateOneWithoutMenuItemNestedInputSchema: z.ZodType<Prisma.NutritionalInfoUncheckedUpdateOneWithoutMenuItemNestedInput> = z.object({
  create: z.union([ z.lazy(() => NutritionalInfoCreateWithoutMenuItemInputSchema),z.lazy(() => NutritionalInfoUncheckedCreateWithoutMenuItemInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => NutritionalInfoCreateOrConnectWithoutMenuItemInputSchema).optional(),
  upsert: z.lazy(() => NutritionalInfoUpsertWithoutMenuItemInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => NutritionalInfoWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => NutritionalInfoWhereInputSchema) ]).optional(),
  connect: z.lazy(() => NutritionalInfoWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => NutritionalInfoUpdateToOneWithWhereWithoutMenuItemInputSchema),z.lazy(() => NutritionalInfoUpdateWithoutMenuItemInputSchema),z.lazy(() => NutritionalInfoUncheckedUpdateWithoutMenuItemInputSchema) ]).optional(),
}).strict();

export const NutritionalRecommendationUncheckedUpdateManyWithoutMenuItemNestedInputSchema: z.ZodType<Prisma.NutritionalRecommendationUncheckedUpdateManyWithoutMenuItemNestedInput> = z.object({
  create: z.union([ z.lazy(() => NutritionalRecommendationCreateWithoutMenuItemInputSchema),z.lazy(() => NutritionalRecommendationCreateWithoutMenuItemInputSchema).array(),z.lazy(() => NutritionalRecommendationUncheckedCreateWithoutMenuItemInputSchema),z.lazy(() => NutritionalRecommendationUncheckedCreateWithoutMenuItemInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => NutritionalRecommendationCreateOrConnectWithoutMenuItemInputSchema),z.lazy(() => NutritionalRecommendationCreateOrConnectWithoutMenuItemInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => NutritionalRecommendationUpsertWithWhereUniqueWithoutMenuItemInputSchema),z.lazy(() => NutritionalRecommendationUpsertWithWhereUniqueWithoutMenuItemInputSchema).array() ]).optional(),
  createMany: z.lazy(() => NutritionalRecommendationCreateManyMenuItemInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => NutritionalRecommendationWhereUniqueInputSchema),z.lazy(() => NutritionalRecommendationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => NutritionalRecommendationWhereUniqueInputSchema),z.lazy(() => NutritionalRecommendationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => NutritionalRecommendationWhereUniqueInputSchema),z.lazy(() => NutritionalRecommendationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => NutritionalRecommendationWhereUniqueInputSchema),z.lazy(() => NutritionalRecommendationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => NutritionalRecommendationUpdateWithWhereUniqueWithoutMenuItemInputSchema),z.lazy(() => NutritionalRecommendationUpdateWithWhereUniqueWithoutMenuItemInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => NutritionalRecommendationUpdateManyWithWhereWithoutMenuItemInputSchema),z.lazy(() => NutritionalRecommendationUpdateManyWithWhereWithoutMenuItemInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => NutritionalRecommendationScalarWhereInputSchema),z.lazy(() => NutritionalRecommendationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SalesTransactionsUncheckedUpdateManyWithoutMenuItemNestedInputSchema: z.ZodType<Prisma.SalesTransactionsUncheckedUpdateManyWithoutMenuItemNestedInput> = z.object({
  create: z.union([ z.lazy(() => SalesTransactionsCreateWithoutMenuItemInputSchema),z.lazy(() => SalesTransactionsCreateWithoutMenuItemInputSchema).array(),z.lazy(() => SalesTransactionsUncheckedCreateWithoutMenuItemInputSchema),z.lazy(() => SalesTransactionsUncheckedCreateWithoutMenuItemInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SalesTransactionsCreateOrConnectWithoutMenuItemInputSchema),z.lazy(() => SalesTransactionsCreateOrConnectWithoutMenuItemInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SalesTransactionsUpsertWithWhereUniqueWithoutMenuItemInputSchema),z.lazy(() => SalesTransactionsUpsertWithWhereUniqueWithoutMenuItemInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SalesTransactionsCreateManyMenuItemInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SalesTransactionsWhereUniqueInputSchema),z.lazy(() => SalesTransactionsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SalesTransactionsWhereUniqueInputSchema),z.lazy(() => SalesTransactionsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SalesTransactionsWhereUniqueInputSchema),z.lazy(() => SalesTransactionsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SalesTransactionsWhereUniqueInputSchema),z.lazy(() => SalesTransactionsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SalesTransactionsUpdateWithWhereUniqueWithoutMenuItemInputSchema),z.lazy(() => SalesTransactionsUpdateWithWhereUniqueWithoutMenuItemInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SalesTransactionsUpdateManyWithWhereWithoutMenuItemInputSchema),z.lazy(() => SalesTransactionsUpdateManyWithWhereWithoutMenuItemInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SalesTransactionsScalarWhereInputSchema),z.lazy(() => SalesTransactionsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LeftoverItemUncheckedUpdateManyWithoutMenuItemNestedInputSchema: z.ZodType<Prisma.LeftoverItemUncheckedUpdateManyWithoutMenuItemNestedInput> = z.object({
  create: z.union([ z.lazy(() => LeftoverItemCreateWithoutMenuItemInputSchema),z.lazy(() => LeftoverItemCreateWithoutMenuItemInputSchema).array(),z.lazy(() => LeftoverItemUncheckedCreateWithoutMenuItemInputSchema),z.lazy(() => LeftoverItemUncheckedCreateWithoutMenuItemInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LeftoverItemCreateOrConnectWithoutMenuItemInputSchema),z.lazy(() => LeftoverItemCreateOrConnectWithoutMenuItemInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LeftoverItemUpsertWithWhereUniqueWithoutMenuItemInputSchema),z.lazy(() => LeftoverItemUpsertWithWhereUniqueWithoutMenuItemInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LeftoverItemCreateManyMenuItemInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LeftoverItemWhereUniqueInputSchema),z.lazy(() => LeftoverItemWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LeftoverItemWhereUniqueInputSchema),z.lazy(() => LeftoverItemWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LeftoverItemWhereUniqueInputSchema),z.lazy(() => LeftoverItemWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LeftoverItemWhereUniqueInputSchema),z.lazy(() => LeftoverItemWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LeftoverItemUpdateWithWhereUniqueWithoutMenuItemInputSchema),z.lazy(() => LeftoverItemUpdateWithWhereUniqueWithoutMenuItemInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LeftoverItemUpdateManyWithWhereWithoutMenuItemInputSchema),z.lazy(() => LeftoverItemUpdateManyWithWhereWithoutMenuItemInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LeftoverItemScalarWhereInputSchema),z.lazy(() => LeftoverItemScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CustomerFeedbackUncheckedUpdateManyWithoutMenuItemNestedInputSchema: z.ZodType<Prisma.CustomerFeedbackUncheckedUpdateManyWithoutMenuItemNestedInput> = z.object({
  create: z.union([ z.lazy(() => CustomerFeedbackCreateWithoutMenuItemInputSchema),z.lazy(() => CustomerFeedbackCreateWithoutMenuItemInputSchema).array(),z.lazy(() => CustomerFeedbackUncheckedCreateWithoutMenuItemInputSchema),z.lazy(() => CustomerFeedbackUncheckedCreateWithoutMenuItemInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CustomerFeedbackCreateOrConnectWithoutMenuItemInputSchema),z.lazy(() => CustomerFeedbackCreateOrConnectWithoutMenuItemInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CustomerFeedbackUpsertWithWhereUniqueWithoutMenuItemInputSchema),z.lazy(() => CustomerFeedbackUpsertWithWhereUniqueWithoutMenuItemInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CustomerFeedbackCreateManyMenuItemInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CustomerFeedbackWhereUniqueInputSchema),z.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CustomerFeedbackWhereUniqueInputSchema),z.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CustomerFeedbackWhereUniqueInputSchema),z.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CustomerFeedbackWhereUniqueInputSchema),z.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CustomerFeedbackUpdateWithWhereUniqueWithoutMenuItemInputSchema),z.lazy(() => CustomerFeedbackUpdateWithWhereUniqueWithoutMenuItemInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CustomerFeedbackUpdateManyWithWhereWithoutMenuItemInputSchema),z.lazy(() => CustomerFeedbackUpdateManyWithWhereWithoutMenuItemInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CustomerFeedbackScalarWhereInputSchema),z.lazy(() => CustomerFeedbackScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const DietaryRestrictionUncheckedUpdateManyWithoutMenuItemsNestedInputSchema: z.ZodType<Prisma.DietaryRestrictionUncheckedUpdateManyWithoutMenuItemsNestedInput> = z.object({
  create: z.union([ z.lazy(() => DietaryRestrictionCreateWithoutMenuItemsInputSchema),z.lazy(() => DietaryRestrictionCreateWithoutMenuItemsInputSchema).array(),z.lazy(() => DietaryRestrictionUncheckedCreateWithoutMenuItemsInputSchema),z.lazy(() => DietaryRestrictionUncheckedCreateWithoutMenuItemsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => DietaryRestrictionCreateOrConnectWithoutMenuItemsInputSchema),z.lazy(() => DietaryRestrictionCreateOrConnectWithoutMenuItemsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => DietaryRestrictionUpsertWithWhereUniqueWithoutMenuItemsInputSchema),z.lazy(() => DietaryRestrictionUpsertWithWhereUniqueWithoutMenuItemsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => DietaryRestrictionWhereUniqueInputSchema),z.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => DietaryRestrictionWhereUniqueInputSchema),z.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => DietaryRestrictionWhereUniqueInputSchema),z.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => DietaryRestrictionWhereUniqueInputSchema),z.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => DietaryRestrictionUpdateWithWhereUniqueWithoutMenuItemsInputSchema),z.lazy(() => DietaryRestrictionUpdateWithWhereUniqueWithoutMenuItemsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => DietaryRestrictionUpdateManyWithWhereWithoutMenuItemsInputSchema),z.lazy(() => DietaryRestrictionUpdateManyWithWhereWithoutMenuItemsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => DietaryRestrictionScalarWhereInputSchema),z.lazy(() => DietaryRestrictionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const MenuItemCreateNestedOneWithoutNutritionalInfoInputSchema: z.ZodType<Prisma.MenuItemCreateNestedOneWithoutNutritionalInfoInput> = z.object({
  create: z.union([ z.lazy(() => MenuItemCreateWithoutNutritionalInfoInputSchema),z.lazy(() => MenuItemUncheckedCreateWithoutNutritionalInfoInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => MenuItemCreateOrConnectWithoutNutritionalInfoInputSchema).optional(),
  connect: z.lazy(() => MenuItemWhereUniqueInputSchema).optional()
}).strict();

export const MenuItemUpdateOneWithoutNutritionalInfoNestedInputSchema: z.ZodType<Prisma.MenuItemUpdateOneWithoutNutritionalInfoNestedInput> = z.object({
  create: z.union([ z.lazy(() => MenuItemCreateWithoutNutritionalInfoInputSchema),z.lazy(() => MenuItemUncheckedCreateWithoutNutritionalInfoInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => MenuItemCreateOrConnectWithoutNutritionalInfoInputSchema).optional(),
  upsert: z.lazy(() => MenuItemUpsertWithoutNutritionalInfoInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => MenuItemWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => MenuItemWhereInputSchema) ]).optional(),
  connect: z.lazy(() => MenuItemWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => MenuItemUpdateToOneWithWhereWithoutNutritionalInfoInputSchema),z.lazy(() => MenuItemUpdateWithoutNutritionalInfoInputSchema),z.lazy(() => MenuItemUncheckedUpdateWithoutNutritionalInfoInputSchema) ]).optional(),
}).strict();

export const RecipeCreateNestedOneWithoutFoodCostHistoryInputSchema: z.ZodType<Prisma.RecipeCreateNestedOneWithoutFoodCostHistoryInput> = z.object({
  create: z.union([ z.lazy(() => RecipeCreateWithoutFoodCostHistoryInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutFoodCostHistoryInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RecipeCreateOrConnectWithoutFoodCostHistoryInputSchema).optional(),
  connect: z.lazy(() => RecipeWhereUniqueInputSchema).optional()
}).strict();

export const RecipeUpdateOneRequiredWithoutFoodCostHistoryNestedInputSchema: z.ZodType<Prisma.RecipeUpdateOneRequiredWithoutFoodCostHistoryNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeCreateWithoutFoodCostHistoryInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutFoodCostHistoryInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RecipeCreateOrConnectWithoutFoodCostHistoryInputSchema).optional(),
  upsert: z.lazy(() => RecipeUpsertWithoutFoodCostHistoryInputSchema).optional(),
  connect: z.lazy(() => RecipeWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RecipeUpdateToOneWithWhereWithoutFoodCostHistoryInputSchema),z.lazy(() => RecipeUpdateWithoutFoodCostHistoryInputSchema),z.lazy(() => RecipeUncheckedUpdateWithoutFoodCostHistoryInputSchema) ]).optional(),
}).strict();

export const RecipeCreateNestedOneWithoutPrepHistoryInputSchema: z.ZodType<Prisma.RecipeCreateNestedOneWithoutPrepHistoryInput> = z.object({
  create: z.union([ z.lazy(() => RecipeCreateWithoutPrepHistoryInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutPrepHistoryInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RecipeCreateOrConnectWithoutPrepHistoryInputSchema).optional(),
  connect: z.lazy(() => RecipeWhereUniqueInputSchema).optional()
}).strict();

export const RecipeUpdateOneRequiredWithoutPrepHistoryNestedInputSchema: z.ZodType<Prisma.RecipeUpdateOneRequiredWithoutPrepHistoryNestedInput> = z.object({
  create: z.union([ z.lazy(() => RecipeCreateWithoutPrepHistoryInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutPrepHistoryInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RecipeCreateOrConnectWithoutPrepHistoryInputSchema).optional(),
  upsert: z.lazy(() => RecipeUpsertWithoutPrepHistoryInputSchema).optional(),
  connect: z.lazy(() => RecipeWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RecipeUpdateToOneWithWhereWithoutPrepHistoryInputSchema),z.lazy(() => RecipeUpdateWithoutPrepHistoryInputSchema),z.lazy(() => RecipeUncheckedUpdateWithoutPrepHistoryInputSchema) ]).optional(),
}).strict();

export const NestedIntFilterSchema: z.ZodType<Prisma.NestedIntFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntFilterSchema) ]).optional(),
}).strict();

export const NestedFloatFilterSchema: z.ZodType<Prisma.NestedFloatFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatFilterSchema) ]).optional(),
}).strict();

export const NestedStringFilterSchema: z.ZodType<Prisma.NestedStringFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringFilterSchema) ]).optional(),
}).strict();

export const NestedBoolFilterSchema: z.ZodType<Prisma.NestedBoolFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolFilterSchema) ]).optional(),
}).strict();

export const NestedIntWithAggregatesFilterSchema: z.ZodType<Prisma.NestedIntWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedIntFilterSchema).optional(),
  _max: z.lazy(() => NestedIntFilterSchema).optional()
}).strict();

export const NestedFloatWithAggregatesFilterSchema: z.ZodType<Prisma.NestedFloatWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedFloatFilterSchema).optional(),
  _min: z.lazy(() => NestedFloatFilterSchema).optional(),
  _max: z.lazy(() => NestedFloatFilterSchema).optional()
}).strict();

export const NestedStringWithAggregatesFilterSchema: z.ZodType<Prisma.NestedStringWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const NestedBoolWithAggregatesFilterSchema: z.ZodType<Prisma.NestedBoolWithAggregatesFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolFilterSchema).optional()
}).strict();

export const NestedFloatNullableFilterSchema: z.ZodType<Prisma.NestedFloatNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedStringNullableFilterSchema: z.ZodType<Prisma.NestedStringNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedDateTimeFilterSchema: z.ZodType<Prisma.NestedDateTimeFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeFilterSchema) ]).optional(),
}).strict();

export const NestedFloatNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedFloatNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedFloatNullableFilterSchema).optional()
}).strict();

export const NestedIntNullableFilterSchema: z.ZodType<Prisma.NestedIntNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedStringNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedStringNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();

export const NestedDateTimeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDateTimeWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeFilterSchema).optional()
}).strict();

export const NestedEnumPhotoTypeFilterSchema: z.ZodType<Prisma.NestedEnumPhotoTypeFilter> = z.object({
  equals: z.lazy(() => PhotoTypeSchema).optional(),
  in: z.lazy(() => PhotoTypeSchema).array().optional(),
  notIn: z.lazy(() => PhotoTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => PhotoTypeSchema),z.lazy(() => NestedEnumPhotoTypeFilterSchema) ]).optional(),
}).strict();

export const NestedEnumPhotoTypeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumPhotoTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => PhotoTypeSchema).optional(),
  in: z.lazy(() => PhotoTypeSchema).array().optional(),
  notIn: z.lazy(() => PhotoTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => PhotoTypeSchema),z.lazy(() => NestedEnumPhotoTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumPhotoTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumPhotoTypeFilterSchema).optional()
}).strict();

export const NestedIntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedIntNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedIntNullableFilterSchema).optional()
}).strict();

export const NestedDateTimeNullableFilterSchema: z.ZodType<Prisma.NestedDateTimeNullableFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedDateTimeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDateTimeNullableWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeNullableFilterSchema).optional()
}).strict();

export const NestedEnumEquipmentStatusFilterSchema: z.ZodType<Prisma.NestedEnumEquipmentStatusFilter> = z.object({
  equals: z.lazy(() => EquipmentStatusSchema).optional(),
  in: z.lazy(() => EquipmentStatusSchema).array().optional(),
  notIn: z.lazy(() => EquipmentStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => EquipmentStatusSchema),z.lazy(() => NestedEnumEquipmentStatusFilterSchema) ]).optional(),
}).strict();

export const NestedEnumEquipmentStatusWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumEquipmentStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => EquipmentStatusSchema).optional(),
  in: z.lazy(() => EquipmentStatusSchema).array().optional(),
  notIn: z.lazy(() => EquipmentStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => EquipmentStatusSchema),z.lazy(() => NestedEnumEquipmentStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumEquipmentStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumEquipmentStatusFilterSchema).optional()
}).strict();

export const NestedEnumMaintenanceTypeFilterSchema: z.ZodType<Prisma.NestedEnumMaintenanceTypeFilter> = z.object({
  equals: z.lazy(() => MaintenanceTypeSchema).optional(),
  in: z.lazy(() => MaintenanceTypeSchema).array().optional(),
  notIn: z.lazy(() => MaintenanceTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => MaintenanceTypeSchema),z.lazy(() => NestedEnumMaintenanceTypeFilterSchema) ]).optional(),
}).strict();

export const NestedEnumMaintenanceTypeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumMaintenanceTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => MaintenanceTypeSchema).optional(),
  in: z.lazy(() => MaintenanceTypeSchema).array().optional(),
  notIn: z.lazy(() => MaintenanceTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => MaintenanceTypeSchema),z.lazy(() => NestedEnumMaintenanceTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumMaintenanceTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumMaintenanceTypeFilterSchema).optional()
}).strict();

export const NestedEnumChecklistFrequencyFilterSchema: z.ZodType<Prisma.NestedEnumChecklistFrequencyFilter> = z.object({
  equals: z.lazy(() => ChecklistFrequencySchema).optional(),
  in: z.lazy(() => ChecklistFrequencySchema).array().optional(),
  notIn: z.lazy(() => ChecklistFrequencySchema).array().optional(),
  not: z.union([ z.lazy(() => ChecklistFrequencySchema),z.lazy(() => NestedEnumChecklistFrequencyFilterSchema) ]).optional(),
}).strict();

export const NestedEnumChecklistFrequencyWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumChecklistFrequencyWithAggregatesFilter> = z.object({
  equals: z.lazy(() => ChecklistFrequencySchema).optional(),
  in: z.lazy(() => ChecklistFrequencySchema).array().optional(),
  notIn: z.lazy(() => ChecklistFrequencySchema).array().optional(),
  not: z.union([ z.lazy(() => ChecklistFrequencySchema),z.lazy(() => NestedEnumChecklistFrequencyWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumChecklistFrequencyFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumChecklistFrequencyFilterSchema).optional()
}).strict();

export const NestedEnumChecklistItemTypeFilterSchema: z.ZodType<Prisma.NestedEnumChecklistItemTypeFilter> = z.object({
  equals: z.lazy(() => ChecklistItemTypeSchema).optional(),
  in: z.lazy(() => ChecklistItemTypeSchema).array().optional(),
  notIn: z.lazy(() => ChecklistItemTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => ChecklistItemTypeSchema),z.lazy(() => NestedEnumChecklistItemTypeFilterSchema) ]).optional(),
}).strict();

export const NestedEnumChecklistItemTypeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumChecklistItemTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => ChecklistItemTypeSchema).optional(),
  in: z.lazy(() => ChecklistItemTypeSchema).array().optional(),
  notIn: z.lazy(() => ChecklistItemTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => ChecklistItemTypeSchema),z.lazy(() => NestedEnumChecklistItemTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumChecklistItemTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumChecklistItemTypeFilterSchema).optional()
}).strict();

export const NestedEnumChecklistStatusFilterSchema: z.ZodType<Prisma.NestedEnumChecklistStatusFilter> = z.object({
  equals: z.lazy(() => ChecklistStatusSchema).optional(),
  in: z.lazy(() => ChecklistStatusSchema).array().optional(),
  notIn: z.lazy(() => ChecklistStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => ChecklistStatusSchema),z.lazy(() => NestedEnumChecklistStatusFilterSchema) ]).optional(),
}).strict();

export const NestedEnumChecklistStatusWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumChecklistStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => ChecklistStatusSchema).optional(),
  in: z.lazy(() => ChecklistStatusSchema).array().optional(),
  notIn: z.lazy(() => ChecklistStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => ChecklistStatusSchema),z.lazy(() => NestedEnumChecklistStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumChecklistStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumChecklistStatusFilterSchema).optional()
}).strict();

export const NestedEnumFeedbackSourceFilterSchema: z.ZodType<Prisma.NestedEnumFeedbackSourceFilter> = z.object({
  equals: z.lazy(() => FeedbackSourceSchema).optional(),
  in: z.lazy(() => FeedbackSourceSchema).array().optional(),
  notIn: z.lazy(() => FeedbackSourceSchema).array().optional(),
  not: z.union([ z.lazy(() => FeedbackSourceSchema),z.lazy(() => NestedEnumFeedbackSourceFilterSchema) ]).optional(),
}).strict();

export const NestedEnumFeedbackStatusFilterSchema: z.ZodType<Prisma.NestedEnumFeedbackStatusFilter> = z.object({
  equals: z.lazy(() => FeedbackStatusSchema).optional(),
  in: z.lazy(() => FeedbackStatusSchema).array().optional(),
  notIn: z.lazy(() => FeedbackStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => FeedbackStatusSchema),z.lazy(() => NestedEnumFeedbackStatusFilterSchema) ]).optional(),
}).strict();

export const NestedEnumFeedbackSourceWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumFeedbackSourceWithAggregatesFilter> = z.object({
  equals: z.lazy(() => FeedbackSourceSchema).optional(),
  in: z.lazy(() => FeedbackSourceSchema).array().optional(),
  notIn: z.lazy(() => FeedbackSourceSchema).array().optional(),
  not: z.union([ z.lazy(() => FeedbackSourceSchema),z.lazy(() => NestedEnumFeedbackSourceWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumFeedbackSourceFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumFeedbackSourceFilterSchema).optional()
}).strict();

export const NestedEnumFeedbackStatusWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumFeedbackStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => FeedbackStatusSchema).optional(),
  in: z.lazy(() => FeedbackStatusSchema).array().optional(),
  notIn: z.lazy(() => FeedbackStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => FeedbackStatusSchema),z.lazy(() => NestedEnumFeedbackStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumFeedbackStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumFeedbackStatusFilterSchema).optional()
}).strict();

export const NestedEnumProductionStatusFilterSchema: z.ZodType<Prisma.NestedEnumProductionStatusFilter> = z.object({
  equals: z.lazy(() => ProductionStatusSchema).optional(),
  in: z.lazy(() => ProductionStatusSchema).array().optional(),
  notIn: z.lazy(() => ProductionStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => ProductionStatusSchema),z.lazy(() => NestedEnumProductionStatusFilterSchema) ]).optional(),
}).strict();

export const NestedEnumProductionStatusWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumProductionStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => ProductionStatusSchema).optional(),
  in: z.lazy(() => ProductionStatusSchema).array().optional(),
  notIn: z.lazy(() => ProductionStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => ProductionStatusSchema),z.lazy(() => NestedEnumProductionStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumProductionStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumProductionStatusFilterSchema).optional()
}).strict();

export const NestedEnumTaskTypeFilterSchema: z.ZodType<Prisma.NestedEnumTaskTypeFilter> = z.object({
  equals: z.lazy(() => TaskTypeSchema).optional(),
  in: z.lazy(() => TaskTypeSchema).array().optional(),
  notIn: z.lazy(() => TaskTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => TaskTypeSchema),z.lazy(() => NestedEnumTaskTypeFilterSchema) ]).optional(),
}).strict();

export const NestedEnumTaskTypeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumTaskTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => TaskTypeSchema).optional(),
  in: z.lazy(() => TaskTypeSchema).array().optional(),
  notIn: z.lazy(() => TaskTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => TaskTypeSchema),z.lazy(() => NestedEnumTaskTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumTaskTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumTaskTypeFilterSchema).optional()
}).strict();

export const NestedEnumDayOfWeekFilterSchema: z.ZodType<Prisma.NestedEnumDayOfWeekFilter> = z.object({
  equals: z.lazy(() => DayOfWeekSchema).optional(),
  in: z.lazy(() => DayOfWeekSchema).array().optional(),
  notIn: z.lazy(() => DayOfWeekSchema).array().optional(),
  not: z.union([ z.lazy(() => DayOfWeekSchema),z.lazy(() => NestedEnumDayOfWeekFilterSchema) ]).optional(),
}).strict();

export const NestedEnumDayOfWeekWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumDayOfWeekWithAggregatesFilter> = z.object({
  equals: z.lazy(() => DayOfWeekSchema).optional(),
  in: z.lazy(() => DayOfWeekSchema).array().optional(),
  notIn: z.lazy(() => DayOfWeekSchema).array().optional(),
  not: z.union([ z.lazy(() => DayOfWeekSchema),z.lazy(() => NestedEnumDayOfWeekWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumDayOfWeekFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumDayOfWeekFilterSchema).optional()
}).strict();

export const NestedEnumConstraintTypeFilterSchema: z.ZodType<Prisma.NestedEnumConstraintTypeFilter> = z.object({
  equals: z.lazy(() => ConstraintTypeSchema).optional(),
  in: z.lazy(() => ConstraintTypeSchema).array().optional(),
  notIn: z.lazy(() => ConstraintTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => ConstraintTypeSchema),z.lazy(() => NestedEnumConstraintTypeFilterSchema) ]).optional(),
}).strict();

export const NestedEnumConstraintTypeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumConstraintTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => ConstraintTypeSchema).optional(),
  in: z.lazy(() => ConstraintTypeSchema).array().optional(),
  notIn: z.lazy(() => ConstraintTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => ConstraintTypeSchema),z.lazy(() => NestedEnumConstraintTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumConstraintTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumConstraintTypeFilterSchema).optional()
}).strict();

export const NestedEnumInventoryTypeFilterSchema: z.ZodType<Prisma.NestedEnumInventoryTypeFilter> = z.object({
  equals: z.lazy(() => InventoryTypeSchema).optional(),
  in: z.lazy(() => InventoryTypeSchema).array().optional(),
  notIn: z.lazy(() => InventoryTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => InventoryTypeSchema),z.lazy(() => NestedEnumInventoryTypeFilterSchema) ]).optional(),
}).strict();

export const NestedEnumInventoryTypeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumInventoryTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => InventoryTypeSchema).optional(),
  in: z.lazy(() => InventoryTypeSchema).array().optional(),
  notIn: z.lazy(() => InventoryTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => InventoryTypeSchema),z.lazy(() => NestedEnumInventoryTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumInventoryTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumInventoryTypeFilterSchema).optional()
}).strict();

export const NestedEnumUserRoleFilterSchema: z.ZodType<Prisma.NestedEnumUserRoleFilter> = z.object({
  equals: z.lazy(() => UserRoleSchema).optional(),
  in: z.lazy(() => UserRoleSchema).array().optional(),
  notIn: z.lazy(() => UserRoleSchema).array().optional(),
  not: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => NestedEnumUserRoleFilterSchema) ]).optional(),
}).strict();

export const NestedEnumUserRoleWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumUserRoleWithAggregatesFilter> = z.object({
  equals: z.lazy(() => UserRoleSchema).optional(),
  in: z.lazy(() => UserRoleSchema).array().optional(),
  notIn: z.lazy(() => UserRoleSchema).array().optional(),
  not: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => NestedEnumUserRoleWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumUserRoleFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumUserRoleFilterSchema).optional()
}).strict();

export const NestedEnumSkillLevelFilterSchema: z.ZodType<Prisma.NestedEnumSkillLevelFilter> = z.object({
  equals: z.lazy(() => SkillLevelSchema).optional(),
  in: z.lazy(() => SkillLevelSchema).array().optional(),
  notIn: z.lazy(() => SkillLevelSchema).array().optional(),
  not: z.union([ z.lazy(() => SkillLevelSchema),z.lazy(() => NestedEnumSkillLevelFilterSchema) ]).optional(),
}).strict();

export const NestedEnumCategoryFilterSchema: z.ZodType<Prisma.NestedEnumCategoryFilter> = z.object({
  equals: z.lazy(() => CategorySchema).optional(),
  in: z.lazy(() => CategorySchema).array().optional(),
  notIn: z.lazy(() => CategorySchema).array().optional(),
  not: z.union([ z.lazy(() => CategorySchema),z.lazy(() => NestedEnumCategoryFilterSchema) ]).optional(),
}).strict();

export const NestedEnumSkillLevelWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumSkillLevelWithAggregatesFilter> = z.object({
  equals: z.lazy(() => SkillLevelSchema).optional(),
  in: z.lazy(() => SkillLevelSchema).array().optional(),
  notIn: z.lazy(() => SkillLevelSchema).array().optional(),
  not: z.union([ z.lazy(() => SkillLevelSchema),z.lazy(() => NestedEnumSkillLevelWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumSkillLevelFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumSkillLevelFilterSchema).optional()
}).strict();

export const NestedEnumCategoryWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumCategoryWithAggregatesFilter> = z.object({
  equals: z.lazy(() => CategorySchema).optional(),
  in: z.lazy(() => CategorySchema).array().optional(),
  notIn: z.lazy(() => CategorySchema).array().optional(),
  not: z.union([ z.lazy(() => CategorySchema),z.lazy(() => NestedEnumCategoryWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumCategoryFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumCategoryFilterSchema).optional()
}).strict();

export const NestedEnumNutritionSourceNullableFilterSchema: z.ZodType<Prisma.NestedEnumNutritionSourceNullableFilter> = z.object({
  equals: z.lazy(() => NutritionSourceSchema).optional().nullable(),
  in: z.lazy(() => NutritionSourceSchema).array().optional().nullable(),
  notIn: z.lazy(() => NutritionSourceSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => NutritionSourceSchema),z.lazy(() => NestedEnumNutritionSourceNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedEnumNutritionSourceNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumNutritionSourceNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => NutritionSourceSchema).optional().nullable(),
  in: z.lazy(() => NutritionSourceSchema).array().optional().nullable(),
  notIn: z.lazy(() => NutritionSourceSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => NutritionSourceSchema),z.lazy(() => NestedEnumNutritionSourceNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumNutritionSourceNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumNutritionSourceNullableFilterSchema).optional()
}).strict();

export const NestedEnumTransactionTypeFilterSchema: z.ZodType<Prisma.NestedEnumTransactionTypeFilter> = z.object({
  equals: z.lazy(() => TransactionTypeSchema).optional(),
  in: z.lazy(() => TransactionTypeSchema).array().optional(),
  notIn: z.lazy(() => TransactionTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => TransactionTypeSchema),z.lazy(() => NestedEnumTransactionTypeFilterSchema) ]).optional(),
}).strict();

export const NestedEnumTransactionTypeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumTransactionTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => TransactionTypeSchema).optional(),
  in: z.lazy(() => TransactionTypeSchema).array().optional(),
  notIn: z.lazy(() => TransactionTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => TransactionTypeSchema),z.lazy(() => NestedEnumTransactionTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumTransactionTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumTransactionTypeFilterSchema).optional()
}).strict();

export const NestedEnumCountStatusFilterSchema: z.ZodType<Prisma.NestedEnumCountStatusFilter> = z.object({
  equals: z.lazy(() => CountStatusSchema).optional(),
  in: z.lazy(() => CountStatusSchema).array().optional(),
  notIn: z.lazy(() => CountStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => CountStatusSchema),z.lazy(() => NestedEnumCountStatusFilterSchema) ]).optional(),
}).strict();

export const NestedEnumCountStatusWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumCountStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => CountStatusSchema).optional(),
  in: z.lazy(() => CountStatusSchema).array().optional(),
  notIn: z.lazy(() => CountStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => CountStatusSchema),z.lazy(() => NestedEnumCountStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumCountStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumCountStatusFilterSchema).optional()
}).strict();

export const NestedEnumOrderStatusFilterSchema: z.ZodType<Prisma.NestedEnumOrderStatusFilter> = z.object({
  equals: z.lazy(() => OrderStatusSchema).optional(),
  in: z.lazy(() => OrderStatusSchema).array().optional(),
  notIn: z.lazy(() => OrderStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => OrderStatusSchema),z.lazy(() => NestedEnumOrderStatusFilterSchema) ]).optional(),
}).strict();

export const NestedEnumOrderStatusWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumOrderStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => OrderStatusSchema).optional(),
  in: z.lazy(() => OrderStatusSchema).array().optional(),
  notIn: z.lazy(() => OrderStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => OrderStatusSchema),z.lazy(() => NestedEnumOrderStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumOrderStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumOrderStatusFilterSchema).optional()
}).strict();

export const NestedEnumShiftStatusFilterSchema: z.ZodType<Prisma.NestedEnumShiftStatusFilter> = z.object({
  equals: z.lazy(() => ShiftStatusSchema).optional(),
  in: z.lazy(() => ShiftStatusSchema).array().optional(),
  notIn: z.lazy(() => ShiftStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => ShiftStatusSchema),z.lazy(() => NestedEnumShiftStatusFilterSchema) ]).optional(),
}).strict();

export const NestedEnumShiftStatusWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumShiftStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => ShiftStatusSchema).optional(),
  in: z.lazy(() => ShiftStatusSchema).array().optional(),
  notIn: z.lazy(() => ShiftStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => ShiftStatusSchema),z.lazy(() => NestedEnumShiftStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumShiftStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumShiftStatusFilterSchema).optional()
}).strict();

export const NestedEnumPrepStatusFilterSchema: z.ZodType<Prisma.NestedEnumPrepStatusFilter> = z.object({
  equals: z.lazy(() => PrepStatusSchema).optional(),
  in: z.lazy(() => PrepStatusSchema).array().optional(),
  notIn: z.lazy(() => PrepStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => PrepStatusSchema),z.lazy(() => NestedEnumPrepStatusFilterSchema) ]).optional(),
}).strict();

export const NestedEnumPrepStatusWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumPrepStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => PrepStatusSchema).optional(),
  in: z.lazy(() => PrepStatusSchema).array().optional(),
  notIn: z.lazy(() => PrepStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => PrepStatusSchema),z.lazy(() => NestedEnumPrepStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumPrepStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumPrepStatusFilterSchema).optional()
}).strict();

export const RecipeCreateWithoutNutritionalInfoInputSchema: z.ZodType<Prisma.RecipeCreateWithoutNutritionalInfoInput> = z.object({
  name: z.string(),
  imageUrls: z.union([ z.lazy(() => RecipeCreateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.string().optional().nullable(),
  servings: z.number().int(),
  cookTime: z.number().int(),
  prepTime: z.number().int(),
  frequency: z.number().int().optional().nullable(),
  foodCost: z.number().optional().nullable(),
  isDeleted: z.boolean().optional(),
  isPublished: z.boolean().optional(),
  publishedAt: z.coerce.date().optional().nullable(),
  language: z.string().optional(),
  skillLevel: z.lazy(() => SkillLevelSchema).optional(),
  category: z.lazy(() => CategorySchema).optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutRecipesInputSchema),
  cookBook: z.lazy(() => CookBookCreateNestedOneWithoutRecipesInputSchema),
  ingredients: z.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeCreateNestedManyWithoutRecipeInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z.lazy(() => RecipeTagCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionCreateNestedManyWithoutRecipesInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureCreateNestedManyWithoutRecipeInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldCreateNestedManyWithoutRecipeInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostCreateNestedManyWithoutRecipeInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointCreateNestedManyWithoutRecipeInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageCreateNestedOneWithoutRecipeInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoCreateNestedManyWithoutRecipeInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsCreateNestedOneWithoutRecipeInputSchema).optional()
}).strict();

export const RecipeUncheckedCreateWithoutNutritionalInfoInputSchema: z.ZodType<Prisma.RecipeUncheckedCreateWithoutNutritionalInfoInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  imageUrls: z.union([ z.lazy(() => RecipeCreateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.string().optional().nullable(),
  servings: z.number().int(),
  cookTime: z.number().int(),
  prepTime: z.number().int(),
  frequency: z.number().int().optional().nullable(),
  restaurantId: z.number().int(),
  cookBookId: z.number().int(),
  foodCost: z.number().optional().nullable(),
  isDeleted: z.boolean().optional(),
  isPublished: z.boolean().optional(),
  publishedAt: z.coerce.date().optional().nullable(),
  language: z.string().optional(),
  skillLevel: z.lazy(() => SkillLevelSchema).optional(),
  category: z.lazy(() => CategorySchema).optional(),
  ingredients: z.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUncheckedCreateNestedOneWithoutRecipeInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUncheckedCreateNestedOneWithoutRecipeInputSchema).optional()
}).strict();

export const RecipeCreateOrConnectWithoutNutritionalInfoInputSchema: z.ZodType<Prisma.RecipeCreateOrConnectWithoutNutritionalInfoInput> = z.object({
  where: z.lazy(() => RecipeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RecipeCreateWithoutNutritionalInfoInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutNutritionalInfoInputSchema) ]),
}).strict();

export const RecipeUpsertWithoutNutritionalInfoInputSchema: z.ZodType<Prisma.RecipeUpsertWithoutNutritionalInfoInput> = z.object({
  update: z.union([ z.lazy(() => RecipeUpdateWithoutNutritionalInfoInputSchema),z.lazy(() => RecipeUncheckedUpdateWithoutNutritionalInfoInputSchema) ]),
  create: z.union([ z.lazy(() => RecipeCreateWithoutNutritionalInfoInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutNutritionalInfoInputSchema) ]),
  where: z.lazy(() => RecipeWhereInputSchema).optional()
}).strict();

export const RecipeUpdateToOneWithWhereWithoutNutritionalInfoInputSchema: z.ZodType<Prisma.RecipeUpdateToOneWithWhereWithoutNutritionalInfoInput> = z.object({
  where: z.lazy(() => RecipeWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RecipeUpdateWithoutNutritionalInfoInputSchema),z.lazy(() => RecipeUncheckedUpdateWithoutNutritionalInfoInputSchema) ]),
}).strict();

export const RecipeUpdateWithoutNutritionalInfoInputSchema: z.ZodType<Prisma.RecipeUpdateWithoutNutritionalInfoInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrls: z.union([ z.lazy(() => RecipeUpdateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  servings: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isPublished: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  publishedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  skillLevel: z.union([ z.lazy(() => SkillLevelSchema),z.lazy(() => EnumSkillLevelFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => CategorySchema),z.lazy(() => EnumCategoryFieldUpdateOperationsInputSchema) ]).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  cookBook: z.lazy(() => CookBookUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  ingredients: z.lazy(() => RecipeIngredientUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUpdateManyWithoutRecipeNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUpdateManyWithoutRecipesNestedInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUpdateManyWithoutRecipeNestedInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUpdateManyWithoutRecipeNestedInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUpdateManyWithoutRecipeNestedInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUpdateManyWithoutRecipeNestedInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUpdateOneWithoutRecipeNestedInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUpdateManyWithoutRecipeNestedInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUpdateOneWithoutRecipeNestedInputSchema).optional()
}).strict();

export const RecipeUncheckedUpdateWithoutNutritionalInfoInputSchema: z.ZodType<Prisma.RecipeUncheckedUpdateWithoutNutritionalInfoInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrls: z.union([ z.lazy(() => RecipeUpdateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  servings: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookBookId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isPublished: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  publishedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  skillLevel: z.union([ z.lazy(() => SkillLevelSchema),z.lazy(() => EnumSkillLevelFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => CategorySchema),z.lazy(() => EnumCategoryFieldUpdateOperationsInputSchema) ]).optional(),
  ingredients: z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional()
}).strict();

export const RecipeCreateWithoutCriticalPointsInputSchema: z.ZodType<Prisma.RecipeCreateWithoutCriticalPointsInput> = z.object({
  name: z.string(),
  imageUrls: z.union([ z.lazy(() => RecipeCreateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.string().optional().nullable(),
  servings: z.number().int(),
  cookTime: z.number().int(),
  prepTime: z.number().int(),
  frequency: z.number().int().optional().nullable(),
  foodCost: z.number().optional().nullable(),
  isDeleted: z.boolean().optional(),
  isPublished: z.boolean().optional(),
  publishedAt: z.coerce.date().optional().nullable(),
  language: z.string().optional(),
  skillLevel: z.lazy(() => SkillLevelSchema).optional(),
  category: z.lazy(() => CategorySchema).optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutRecipesInputSchema),
  cookBook: z.lazy(() => CookBookCreateNestedOneWithoutRecipesInputSchema),
  ingredients: z.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeCreateNestedManyWithoutRecipeInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z.lazy(() => RecipeTagCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionCreateNestedManyWithoutRecipesInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureCreateNestedManyWithoutRecipeInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldCreateNestedManyWithoutRecipeInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostCreateNestedManyWithoutRecipeInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionCreateNestedOneWithoutRecipeInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageCreateNestedOneWithoutRecipeInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoCreateNestedManyWithoutRecipeInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsCreateNestedOneWithoutRecipeInputSchema).optional()
}).strict();

export const RecipeUncheckedCreateWithoutCriticalPointsInputSchema: z.ZodType<Prisma.RecipeUncheckedCreateWithoutCriticalPointsInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  imageUrls: z.union([ z.lazy(() => RecipeCreateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.string().optional().nullable(),
  servings: z.number().int(),
  cookTime: z.number().int(),
  prepTime: z.number().int(),
  frequency: z.number().int().optional().nullable(),
  restaurantId: z.number().int(),
  cookBookId: z.number().int(),
  foodCost: z.number().optional().nullable(),
  isDeleted: z.boolean().optional(),
  isPublished: z.boolean().optional(),
  publishedAt: z.coerce.date().optional().nullable(),
  language: z.string().optional(),
  skillLevel: z.lazy(() => SkillLevelSchema).optional(),
  category: z.lazy(() => CategorySchema).optional(),
  ingredients: z.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUncheckedCreateNestedOneWithoutRecipeInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUncheckedCreateNestedOneWithoutRecipeInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUncheckedCreateNestedOneWithoutRecipeInputSchema).optional()
}).strict();

export const RecipeCreateOrConnectWithoutCriticalPointsInputSchema: z.ZodType<Prisma.RecipeCreateOrConnectWithoutCriticalPointsInput> = z.object({
  where: z.lazy(() => RecipeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RecipeCreateWithoutCriticalPointsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutCriticalPointsInputSchema) ]),
}).strict();

export const RecipeUpsertWithoutCriticalPointsInputSchema: z.ZodType<Prisma.RecipeUpsertWithoutCriticalPointsInput> = z.object({
  update: z.union([ z.lazy(() => RecipeUpdateWithoutCriticalPointsInputSchema),z.lazy(() => RecipeUncheckedUpdateWithoutCriticalPointsInputSchema) ]),
  create: z.union([ z.lazy(() => RecipeCreateWithoutCriticalPointsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutCriticalPointsInputSchema) ]),
  where: z.lazy(() => RecipeWhereInputSchema).optional()
}).strict();

export const RecipeUpdateToOneWithWhereWithoutCriticalPointsInputSchema: z.ZodType<Prisma.RecipeUpdateToOneWithWhereWithoutCriticalPointsInput> = z.object({
  where: z.lazy(() => RecipeWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RecipeUpdateWithoutCriticalPointsInputSchema),z.lazy(() => RecipeUncheckedUpdateWithoutCriticalPointsInputSchema) ]),
}).strict();

export const RecipeUpdateWithoutCriticalPointsInputSchema: z.ZodType<Prisma.RecipeUpdateWithoutCriticalPointsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrls: z.union([ z.lazy(() => RecipeUpdateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  servings: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isPublished: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  publishedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  skillLevel: z.union([ z.lazy(() => SkillLevelSchema),z.lazy(() => EnumSkillLevelFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => CategorySchema),z.lazy(() => EnumCategoryFieldUpdateOperationsInputSchema) ]).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  cookBook: z.lazy(() => CookBookUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  ingredients: z.lazy(() => RecipeIngredientUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUpdateManyWithoutRecipeNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUpdateManyWithoutRecipesNestedInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUpdateManyWithoutRecipeNestedInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUpdateManyWithoutRecipeNestedInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUpdateManyWithoutRecipeNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUpdateOneWithoutRecipeNestedInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUpdateOneWithoutRecipeNestedInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUpdateManyWithoutRecipeNestedInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUpdateOneWithoutRecipeNestedInputSchema).optional()
}).strict();

export const RecipeUncheckedUpdateWithoutCriticalPointsInputSchema: z.ZodType<Prisma.RecipeUncheckedUpdateWithoutCriticalPointsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrls: z.union([ z.lazy(() => RecipeUpdateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  servings: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookBookId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isPublished: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  publishedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  skillLevel: z.union([ z.lazy(() => SkillLevelSchema),z.lazy(() => EnumSkillLevelFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => CategorySchema),z.lazy(() => EnumCategoryFieldUpdateOperationsInputSchema) ]).optional(),
  ingredients: z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional()
}).strict();

export const RecipeCreateWithoutStorageInputSchema: z.ZodType<Prisma.RecipeCreateWithoutStorageInput> = z.object({
  name: z.string(),
  imageUrls: z.union([ z.lazy(() => RecipeCreateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.string().optional().nullable(),
  servings: z.number().int(),
  cookTime: z.number().int(),
  prepTime: z.number().int(),
  frequency: z.number().int().optional().nullable(),
  foodCost: z.number().optional().nullable(),
  isDeleted: z.boolean().optional(),
  isPublished: z.boolean().optional(),
  publishedAt: z.coerce.date().optional().nullable(),
  language: z.string().optional(),
  skillLevel: z.lazy(() => SkillLevelSchema).optional(),
  category: z.lazy(() => CategorySchema).optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutRecipesInputSchema),
  cookBook: z.lazy(() => CookBookCreateNestedOneWithoutRecipesInputSchema),
  ingredients: z.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeCreateNestedManyWithoutRecipeInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z.lazy(() => RecipeTagCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionCreateNestedManyWithoutRecipesInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureCreateNestedManyWithoutRecipeInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldCreateNestedManyWithoutRecipeInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostCreateNestedManyWithoutRecipeInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionCreateNestedOneWithoutRecipeInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointCreateNestedManyWithoutRecipeInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoCreateNestedManyWithoutRecipeInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsCreateNestedOneWithoutRecipeInputSchema).optional()
}).strict();

export const RecipeUncheckedCreateWithoutStorageInputSchema: z.ZodType<Prisma.RecipeUncheckedCreateWithoutStorageInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  imageUrls: z.union([ z.lazy(() => RecipeCreateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.string().optional().nullable(),
  servings: z.number().int(),
  cookTime: z.number().int(),
  prepTime: z.number().int(),
  frequency: z.number().int().optional().nullable(),
  restaurantId: z.number().int(),
  cookBookId: z.number().int(),
  foodCost: z.number().optional().nullable(),
  isDeleted: z.boolean().optional(),
  isPublished: z.boolean().optional(),
  publishedAt: z.coerce.date().optional().nullable(),
  language: z.string().optional(),
  skillLevel: z.lazy(() => SkillLevelSchema).optional(),
  category: z.lazy(() => CategorySchema).optional(),
  ingredients: z.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUncheckedCreateNestedOneWithoutRecipeInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUncheckedCreateNestedOneWithoutRecipeInputSchema).optional()
}).strict();

export const RecipeCreateOrConnectWithoutStorageInputSchema: z.ZodType<Prisma.RecipeCreateOrConnectWithoutStorageInput> = z.object({
  where: z.lazy(() => RecipeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RecipeCreateWithoutStorageInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutStorageInputSchema) ]),
}).strict();

export const RecipeUpsertWithoutStorageInputSchema: z.ZodType<Prisma.RecipeUpsertWithoutStorageInput> = z.object({
  update: z.union([ z.lazy(() => RecipeUpdateWithoutStorageInputSchema),z.lazy(() => RecipeUncheckedUpdateWithoutStorageInputSchema) ]),
  create: z.union([ z.lazy(() => RecipeCreateWithoutStorageInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutStorageInputSchema) ]),
  where: z.lazy(() => RecipeWhereInputSchema).optional()
}).strict();

export const RecipeUpdateToOneWithWhereWithoutStorageInputSchema: z.ZodType<Prisma.RecipeUpdateToOneWithWhereWithoutStorageInput> = z.object({
  where: z.lazy(() => RecipeWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RecipeUpdateWithoutStorageInputSchema),z.lazy(() => RecipeUncheckedUpdateWithoutStorageInputSchema) ]),
}).strict();

export const RecipeUpdateWithoutStorageInputSchema: z.ZodType<Prisma.RecipeUpdateWithoutStorageInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrls: z.union([ z.lazy(() => RecipeUpdateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  servings: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isPublished: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  publishedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  skillLevel: z.union([ z.lazy(() => SkillLevelSchema),z.lazy(() => EnumSkillLevelFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => CategorySchema),z.lazy(() => EnumCategoryFieldUpdateOperationsInputSchema) ]).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  cookBook: z.lazy(() => CookBookUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  ingredients: z.lazy(() => RecipeIngredientUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUpdateManyWithoutRecipeNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUpdateManyWithoutRecipesNestedInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUpdateManyWithoutRecipeNestedInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUpdateManyWithoutRecipeNestedInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUpdateManyWithoutRecipeNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUpdateOneWithoutRecipeNestedInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUpdateManyWithoutRecipeNestedInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUpdateManyWithoutRecipeNestedInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUpdateOneWithoutRecipeNestedInputSchema).optional()
}).strict();

export const RecipeUncheckedUpdateWithoutStorageInputSchema: z.ZodType<Prisma.RecipeUncheckedUpdateWithoutStorageInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrls: z.union([ z.lazy(() => RecipeUpdateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  servings: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookBookId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isPublished: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  publishedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  skillLevel: z.union([ z.lazy(() => SkillLevelSchema),z.lazy(() => EnumSkillLevelFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => CategorySchema),z.lazy(() => EnumCategoryFieldUpdateOperationsInputSchema) ]).optional(),
  ingredients: z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional()
}).strict();

export const RecipeCreateWithoutPhotosInputSchema: z.ZodType<Prisma.RecipeCreateWithoutPhotosInput> = z.object({
  name: z.string(),
  imageUrls: z.union([ z.lazy(() => RecipeCreateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.string().optional().nullable(),
  servings: z.number().int(),
  cookTime: z.number().int(),
  prepTime: z.number().int(),
  frequency: z.number().int().optional().nullable(),
  foodCost: z.number().optional().nullable(),
  isDeleted: z.boolean().optional(),
  isPublished: z.boolean().optional(),
  publishedAt: z.coerce.date().optional().nullable(),
  language: z.string().optional(),
  skillLevel: z.lazy(() => SkillLevelSchema).optional(),
  category: z.lazy(() => CategorySchema).optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutRecipesInputSchema),
  cookBook: z.lazy(() => CookBookCreateNestedOneWithoutRecipesInputSchema),
  ingredients: z.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeCreateNestedManyWithoutRecipeInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z.lazy(() => RecipeTagCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionCreateNestedManyWithoutRecipesInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureCreateNestedManyWithoutRecipeInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldCreateNestedManyWithoutRecipeInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostCreateNestedManyWithoutRecipeInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionCreateNestedOneWithoutRecipeInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointCreateNestedManyWithoutRecipeInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageCreateNestedOneWithoutRecipeInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsCreateNestedOneWithoutRecipeInputSchema).optional()
}).strict();

export const RecipeUncheckedCreateWithoutPhotosInputSchema: z.ZodType<Prisma.RecipeUncheckedCreateWithoutPhotosInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  imageUrls: z.union([ z.lazy(() => RecipeCreateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.string().optional().nullable(),
  servings: z.number().int(),
  cookTime: z.number().int(),
  prepTime: z.number().int(),
  frequency: z.number().int().optional().nullable(),
  restaurantId: z.number().int(),
  cookBookId: z.number().int(),
  foodCost: z.number().optional().nullable(),
  isDeleted: z.boolean().optional(),
  isPublished: z.boolean().optional(),
  publishedAt: z.coerce.date().optional().nullable(),
  language: z.string().optional(),
  skillLevel: z.lazy(() => SkillLevelSchema).optional(),
  category: z.lazy(() => CategorySchema).optional(),
  ingredients: z.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUncheckedCreateNestedOneWithoutRecipeInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUncheckedCreateNestedOneWithoutRecipeInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUncheckedCreateNestedOneWithoutRecipeInputSchema).optional()
}).strict();

export const RecipeCreateOrConnectWithoutPhotosInputSchema: z.ZodType<Prisma.RecipeCreateOrConnectWithoutPhotosInput> = z.object({
  where: z.lazy(() => RecipeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RecipeCreateWithoutPhotosInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutPhotosInputSchema) ]),
}).strict();

export const RecipeUpsertWithoutPhotosInputSchema: z.ZodType<Prisma.RecipeUpsertWithoutPhotosInput> = z.object({
  update: z.union([ z.lazy(() => RecipeUpdateWithoutPhotosInputSchema),z.lazy(() => RecipeUncheckedUpdateWithoutPhotosInputSchema) ]),
  create: z.union([ z.lazy(() => RecipeCreateWithoutPhotosInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutPhotosInputSchema) ]),
  where: z.lazy(() => RecipeWhereInputSchema).optional()
}).strict();

export const RecipeUpdateToOneWithWhereWithoutPhotosInputSchema: z.ZodType<Prisma.RecipeUpdateToOneWithWhereWithoutPhotosInput> = z.object({
  where: z.lazy(() => RecipeWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RecipeUpdateWithoutPhotosInputSchema),z.lazy(() => RecipeUncheckedUpdateWithoutPhotosInputSchema) ]),
}).strict();

export const RecipeUpdateWithoutPhotosInputSchema: z.ZodType<Prisma.RecipeUpdateWithoutPhotosInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrls: z.union([ z.lazy(() => RecipeUpdateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  servings: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isPublished: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  publishedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  skillLevel: z.union([ z.lazy(() => SkillLevelSchema),z.lazy(() => EnumSkillLevelFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => CategorySchema),z.lazy(() => EnumCategoryFieldUpdateOperationsInputSchema) ]).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  cookBook: z.lazy(() => CookBookUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  ingredients: z.lazy(() => RecipeIngredientUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUpdateManyWithoutRecipeNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUpdateManyWithoutRecipesNestedInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUpdateManyWithoutRecipeNestedInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUpdateManyWithoutRecipeNestedInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUpdateManyWithoutRecipeNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUpdateOneWithoutRecipeNestedInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUpdateManyWithoutRecipeNestedInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUpdateOneWithoutRecipeNestedInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUpdateOneWithoutRecipeNestedInputSchema).optional()
}).strict();

export const RecipeUncheckedUpdateWithoutPhotosInputSchema: z.ZodType<Prisma.RecipeUncheckedUpdateWithoutPhotosInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrls: z.union([ z.lazy(() => RecipeUpdateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  servings: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookBookId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isPublished: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  publishedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  skillLevel: z.union([ z.lazy(() => SkillLevelSchema),z.lazy(() => EnumSkillLevelFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => CategorySchema),z.lazy(() => EnumCategoryFieldUpdateOperationsInputSchema) ]).optional(),
  ingredients: z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional()
}).strict();

export const RecipeCreateWithoutTemperaturesInputSchema: z.ZodType<Prisma.RecipeCreateWithoutTemperaturesInput> = z.object({
  name: z.string(),
  imageUrls: z.union([ z.lazy(() => RecipeCreateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.string().optional().nullable(),
  servings: z.number().int(),
  cookTime: z.number().int(),
  prepTime: z.number().int(),
  frequency: z.number().int().optional().nullable(),
  foodCost: z.number().optional().nullable(),
  isDeleted: z.boolean().optional(),
  isPublished: z.boolean().optional(),
  publishedAt: z.coerce.date().optional().nullable(),
  language: z.string().optional(),
  skillLevel: z.lazy(() => SkillLevelSchema).optional(),
  category: z.lazy(() => CategorySchema).optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutRecipesInputSchema),
  cookBook: z.lazy(() => CookBookCreateNestedOneWithoutRecipesInputSchema),
  ingredients: z.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeCreateNestedManyWithoutRecipeInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z.lazy(() => RecipeTagCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionCreateNestedManyWithoutRecipesInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldCreateNestedManyWithoutRecipeInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostCreateNestedManyWithoutRecipeInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionCreateNestedOneWithoutRecipeInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointCreateNestedManyWithoutRecipeInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageCreateNestedOneWithoutRecipeInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoCreateNestedManyWithoutRecipeInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsCreateNestedOneWithoutRecipeInputSchema).optional()
}).strict();

export const RecipeUncheckedCreateWithoutTemperaturesInputSchema: z.ZodType<Prisma.RecipeUncheckedCreateWithoutTemperaturesInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  imageUrls: z.union([ z.lazy(() => RecipeCreateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.string().optional().nullable(),
  servings: z.number().int(),
  cookTime: z.number().int(),
  prepTime: z.number().int(),
  frequency: z.number().int().optional().nullable(),
  restaurantId: z.number().int(),
  cookBookId: z.number().int(),
  foodCost: z.number().optional().nullable(),
  isDeleted: z.boolean().optional(),
  isPublished: z.boolean().optional(),
  publishedAt: z.coerce.date().optional().nullable(),
  language: z.string().optional(),
  skillLevel: z.lazy(() => SkillLevelSchema).optional(),
  category: z.lazy(() => CategorySchema).optional(),
  ingredients: z.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUncheckedCreateNestedOneWithoutRecipeInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUncheckedCreateNestedOneWithoutRecipeInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUncheckedCreateNestedOneWithoutRecipeInputSchema).optional()
}).strict();

export const RecipeCreateOrConnectWithoutTemperaturesInputSchema: z.ZodType<Prisma.RecipeCreateOrConnectWithoutTemperaturesInput> = z.object({
  where: z.lazy(() => RecipeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RecipeCreateWithoutTemperaturesInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutTemperaturesInputSchema) ]),
}).strict();

export const RecipeUpsertWithoutTemperaturesInputSchema: z.ZodType<Prisma.RecipeUpsertWithoutTemperaturesInput> = z.object({
  update: z.union([ z.lazy(() => RecipeUpdateWithoutTemperaturesInputSchema),z.lazy(() => RecipeUncheckedUpdateWithoutTemperaturesInputSchema) ]),
  create: z.union([ z.lazy(() => RecipeCreateWithoutTemperaturesInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutTemperaturesInputSchema) ]),
  where: z.lazy(() => RecipeWhereInputSchema).optional()
}).strict();

export const RecipeUpdateToOneWithWhereWithoutTemperaturesInputSchema: z.ZodType<Prisma.RecipeUpdateToOneWithWhereWithoutTemperaturesInput> = z.object({
  where: z.lazy(() => RecipeWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RecipeUpdateWithoutTemperaturesInputSchema),z.lazy(() => RecipeUncheckedUpdateWithoutTemperaturesInputSchema) ]),
}).strict();

export const RecipeUpdateWithoutTemperaturesInputSchema: z.ZodType<Prisma.RecipeUpdateWithoutTemperaturesInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrls: z.union([ z.lazy(() => RecipeUpdateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  servings: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isPublished: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  publishedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  skillLevel: z.union([ z.lazy(() => SkillLevelSchema),z.lazy(() => EnumSkillLevelFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => CategorySchema),z.lazy(() => EnumCategoryFieldUpdateOperationsInputSchema) ]).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  cookBook: z.lazy(() => CookBookUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  ingredients: z.lazy(() => RecipeIngredientUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUpdateManyWithoutRecipeNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUpdateManyWithoutRecipesNestedInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUpdateManyWithoutRecipeNestedInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUpdateManyWithoutRecipeNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUpdateOneWithoutRecipeNestedInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUpdateManyWithoutRecipeNestedInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUpdateOneWithoutRecipeNestedInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUpdateManyWithoutRecipeNestedInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUpdateOneWithoutRecipeNestedInputSchema).optional()
}).strict();

export const RecipeUncheckedUpdateWithoutTemperaturesInputSchema: z.ZodType<Prisma.RecipeUncheckedUpdateWithoutTemperaturesInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrls: z.union([ z.lazy(() => RecipeUpdateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  servings: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookBookId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isPublished: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  publishedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  skillLevel: z.union([ z.lazy(() => SkillLevelSchema),z.lazy(() => EnumSkillLevelFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => CategorySchema),z.lazy(() => EnumCategoryFieldUpdateOperationsInputSchema) ]).optional(),
  ingredients: z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional()
}).strict();

export const RecipeCreateWithoutYieldsInputSchema: z.ZodType<Prisma.RecipeCreateWithoutYieldsInput> = z.object({
  name: z.string(),
  imageUrls: z.union([ z.lazy(() => RecipeCreateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.string().optional().nullable(),
  servings: z.number().int(),
  cookTime: z.number().int(),
  prepTime: z.number().int(),
  frequency: z.number().int().optional().nullable(),
  foodCost: z.number().optional().nullable(),
  isDeleted: z.boolean().optional(),
  isPublished: z.boolean().optional(),
  publishedAt: z.coerce.date().optional().nullable(),
  language: z.string().optional(),
  skillLevel: z.lazy(() => SkillLevelSchema).optional(),
  category: z.lazy(() => CategorySchema).optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutRecipesInputSchema),
  cookBook: z.lazy(() => CookBookCreateNestedOneWithoutRecipesInputSchema),
  ingredients: z.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeCreateNestedManyWithoutRecipeInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z.lazy(() => RecipeTagCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionCreateNestedManyWithoutRecipesInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureCreateNestedManyWithoutRecipeInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostCreateNestedManyWithoutRecipeInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionCreateNestedOneWithoutRecipeInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointCreateNestedManyWithoutRecipeInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageCreateNestedOneWithoutRecipeInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoCreateNestedManyWithoutRecipeInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsCreateNestedOneWithoutRecipeInputSchema).optional()
}).strict();

export const RecipeUncheckedCreateWithoutYieldsInputSchema: z.ZodType<Prisma.RecipeUncheckedCreateWithoutYieldsInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  imageUrls: z.union([ z.lazy(() => RecipeCreateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.string().optional().nullable(),
  servings: z.number().int(),
  cookTime: z.number().int(),
  prepTime: z.number().int(),
  frequency: z.number().int().optional().nullable(),
  restaurantId: z.number().int(),
  cookBookId: z.number().int(),
  foodCost: z.number().optional().nullable(),
  isDeleted: z.boolean().optional(),
  isPublished: z.boolean().optional(),
  publishedAt: z.coerce.date().optional().nullable(),
  language: z.string().optional(),
  skillLevel: z.lazy(() => SkillLevelSchema).optional(),
  category: z.lazy(() => CategorySchema).optional(),
  ingredients: z.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUncheckedCreateNestedOneWithoutRecipeInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUncheckedCreateNestedOneWithoutRecipeInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUncheckedCreateNestedOneWithoutRecipeInputSchema).optional()
}).strict();

export const RecipeCreateOrConnectWithoutYieldsInputSchema: z.ZodType<Prisma.RecipeCreateOrConnectWithoutYieldsInput> = z.object({
  where: z.lazy(() => RecipeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RecipeCreateWithoutYieldsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutYieldsInputSchema) ]),
}).strict();

export const RecipeUpsertWithoutYieldsInputSchema: z.ZodType<Prisma.RecipeUpsertWithoutYieldsInput> = z.object({
  update: z.union([ z.lazy(() => RecipeUpdateWithoutYieldsInputSchema),z.lazy(() => RecipeUncheckedUpdateWithoutYieldsInputSchema) ]),
  create: z.union([ z.lazy(() => RecipeCreateWithoutYieldsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutYieldsInputSchema) ]),
  where: z.lazy(() => RecipeWhereInputSchema).optional()
}).strict();

export const RecipeUpdateToOneWithWhereWithoutYieldsInputSchema: z.ZodType<Prisma.RecipeUpdateToOneWithWhereWithoutYieldsInput> = z.object({
  where: z.lazy(() => RecipeWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RecipeUpdateWithoutYieldsInputSchema),z.lazy(() => RecipeUncheckedUpdateWithoutYieldsInputSchema) ]),
}).strict();

export const RecipeUpdateWithoutYieldsInputSchema: z.ZodType<Prisma.RecipeUpdateWithoutYieldsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrls: z.union([ z.lazy(() => RecipeUpdateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  servings: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isPublished: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  publishedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  skillLevel: z.union([ z.lazy(() => SkillLevelSchema),z.lazy(() => EnumSkillLevelFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => CategorySchema),z.lazy(() => EnumCategoryFieldUpdateOperationsInputSchema) ]).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  cookBook: z.lazy(() => CookBookUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  ingredients: z.lazy(() => RecipeIngredientUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUpdateManyWithoutRecipeNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUpdateManyWithoutRecipesNestedInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUpdateManyWithoutRecipeNestedInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUpdateManyWithoutRecipeNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUpdateOneWithoutRecipeNestedInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUpdateManyWithoutRecipeNestedInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUpdateOneWithoutRecipeNestedInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUpdateManyWithoutRecipeNestedInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUpdateOneWithoutRecipeNestedInputSchema).optional()
}).strict();

export const RecipeUncheckedUpdateWithoutYieldsInputSchema: z.ZodType<Prisma.RecipeUncheckedUpdateWithoutYieldsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrls: z.union([ z.lazy(() => RecipeUpdateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  servings: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookBookId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isPublished: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  publishedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  skillLevel: z.union([ z.lazy(() => SkillLevelSchema),z.lazy(() => EnumSkillLevelFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => CategorySchema),z.lazy(() => EnumCategoryFieldUpdateOperationsInputSchema) ]).optional(),
  ingredients: z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional()
}).strict();

export const RecipeCreateWithoutLaborCostsInputSchema: z.ZodType<Prisma.RecipeCreateWithoutLaborCostsInput> = z.object({
  name: z.string(),
  imageUrls: z.union([ z.lazy(() => RecipeCreateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.string().optional().nullable(),
  servings: z.number().int(),
  cookTime: z.number().int(),
  prepTime: z.number().int(),
  frequency: z.number().int().optional().nullable(),
  foodCost: z.number().optional().nullable(),
  isDeleted: z.boolean().optional(),
  isPublished: z.boolean().optional(),
  publishedAt: z.coerce.date().optional().nullable(),
  language: z.string().optional(),
  skillLevel: z.lazy(() => SkillLevelSchema).optional(),
  category: z.lazy(() => CategorySchema).optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutRecipesInputSchema),
  cookBook: z.lazy(() => CookBookCreateNestedOneWithoutRecipesInputSchema),
  ingredients: z.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeCreateNestedManyWithoutRecipeInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z.lazy(() => RecipeTagCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionCreateNestedManyWithoutRecipesInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureCreateNestedManyWithoutRecipeInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldCreateNestedManyWithoutRecipeInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionCreateNestedOneWithoutRecipeInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointCreateNestedManyWithoutRecipeInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageCreateNestedOneWithoutRecipeInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoCreateNestedManyWithoutRecipeInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsCreateNestedOneWithoutRecipeInputSchema).optional()
}).strict();

export const RecipeUncheckedCreateWithoutLaborCostsInputSchema: z.ZodType<Prisma.RecipeUncheckedCreateWithoutLaborCostsInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  imageUrls: z.union([ z.lazy(() => RecipeCreateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.string().optional().nullable(),
  servings: z.number().int(),
  cookTime: z.number().int(),
  prepTime: z.number().int(),
  frequency: z.number().int().optional().nullable(),
  restaurantId: z.number().int(),
  cookBookId: z.number().int(),
  foodCost: z.number().optional().nullable(),
  isDeleted: z.boolean().optional(),
  isPublished: z.boolean().optional(),
  publishedAt: z.coerce.date().optional().nullable(),
  language: z.string().optional(),
  skillLevel: z.lazy(() => SkillLevelSchema).optional(),
  category: z.lazy(() => CategorySchema).optional(),
  ingredients: z.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUncheckedCreateNestedOneWithoutRecipeInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUncheckedCreateNestedOneWithoutRecipeInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUncheckedCreateNestedOneWithoutRecipeInputSchema).optional()
}).strict();

export const RecipeCreateOrConnectWithoutLaborCostsInputSchema: z.ZodType<Prisma.RecipeCreateOrConnectWithoutLaborCostsInput> = z.object({
  where: z.lazy(() => RecipeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RecipeCreateWithoutLaborCostsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutLaborCostsInputSchema) ]),
}).strict();

export const RecipeUpsertWithoutLaborCostsInputSchema: z.ZodType<Prisma.RecipeUpsertWithoutLaborCostsInput> = z.object({
  update: z.union([ z.lazy(() => RecipeUpdateWithoutLaborCostsInputSchema),z.lazy(() => RecipeUncheckedUpdateWithoutLaborCostsInputSchema) ]),
  create: z.union([ z.lazy(() => RecipeCreateWithoutLaborCostsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutLaborCostsInputSchema) ]),
  where: z.lazy(() => RecipeWhereInputSchema).optional()
}).strict();

export const RecipeUpdateToOneWithWhereWithoutLaborCostsInputSchema: z.ZodType<Prisma.RecipeUpdateToOneWithWhereWithoutLaborCostsInput> = z.object({
  where: z.lazy(() => RecipeWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RecipeUpdateWithoutLaborCostsInputSchema),z.lazy(() => RecipeUncheckedUpdateWithoutLaborCostsInputSchema) ]),
}).strict();

export const RecipeUpdateWithoutLaborCostsInputSchema: z.ZodType<Prisma.RecipeUpdateWithoutLaborCostsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrls: z.union([ z.lazy(() => RecipeUpdateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  servings: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isPublished: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  publishedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  skillLevel: z.union([ z.lazy(() => SkillLevelSchema),z.lazy(() => EnumSkillLevelFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => CategorySchema),z.lazy(() => EnumCategoryFieldUpdateOperationsInputSchema) ]).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  cookBook: z.lazy(() => CookBookUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  ingredients: z.lazy(() => RecipeIngredientUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUpdateManyWithoutRecipeNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUpdateManyWithoutRecipesNestedInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUpdateManyWithoutRecipeNestedInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUpdateManyWithoutRecipeNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUpdateOneWithoutRecipeNestedInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUpdateManyWithoutRecipeNestedInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUpdateOneWithoutRecipeNestedInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUpdateManyWithoutRecipeNestedInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUpdateOneWithoutRecipeNestedInputSchema).optional()
}).strict();

export const RecipeUncheckedUpdateWithoutLaborCostsInputSchema: z.ZodType<Prisma.RecipeUncheckedUpdateWithoutLaborCostsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrls: z.union([ z.lazy(() => RecipeUpdateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  servings: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookBookId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isPublished: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  publishedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  skillLevel: z.union([ z.lazy(() => SkillLevelSchema),z.lazy(() => EnumSkillLevelFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => CategorySchema),z.lazy(() => EnumCategoryFieldUpdateOperationsInputSchema) ]).optional(),
  ingredients: z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional()
}).strict();

export const RestaurantCreateWithoutSalesTransactionsInputSchema: z.ZodType<Prisma.RestaurantCreateWithoutSalesTransactionsInput> = z.object({
  name: z.string(),
  imageUrl: z.string().optional().nullable(),
  address: z.string(),
  city: z.string(),
  zipCode: z.string(),
  state: z.string(),
  owner: z.string(),
  foodCost: z.number().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  isDeleted: z.boolean().optional(),
  deleted: z.coerce.date().optional().nullable(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutRestaurantsInputSchema).optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: z.lazy(() => CookBookCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: z.lazy(() => InventoryCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: z.lazy(() => OrderCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: z.lazy(() => RecipeCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: z.lazy(() => MenuCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipments: z.lazy(() => EquipmentCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklists: z.lazy(() => QualityChecklistCreateNestedManyWithoutRestaurantInputSchema).optional(),
  customerFeedbacks: z.lazy(() => CustomerFeedbackCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();

export const RestaurantUncheckedCreateWithoutSalesTransactionsInputSchema: z.ZodType<Prisma.RestaurantUncheckedCreateWithoutSalesTransactionsInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  imageUrl: z.string().optional().nullable(),
  address: z.string(),
  city: z.string(),
  zipCode: z.string(),
  state: z.string(),
  owner: z.string(),
  organizationId: z.number().int().optional().nullable(),
  foodCost: z.number().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  isDeleted: z.boolean().optional(),
  deleted: z.coerce.date().optional().nullable(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: z.lazy(() => CookBookUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: z.lazy(() => InventoryUncheckedCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: z.lazy(() => OrderUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: z.lazy(() => RecipeUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: z.lazy(() => MenuUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipments: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklists: z.lazy(() => QualityChecklistUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  customerFeedbacks: z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();

export const RestaurantCreateOrConnectWithoutSalesTransactionsInputSchema: z.ZodType<Prisma.RestaurantCreateOrConnectWithoutSalesTransactionsInput> = z.object({
  where: z.lazy(() => RestaurantWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RestaurantCreateWithoutSalesTransactionsInputSchema),z.lazy(() => RestaurantUncheckedCreateWithoutSalesTransactionsInputSchema) ]),
}).strict();

export const MenuItemCreateWithoutSalesTransactionsInputSchema: z.ZodType<Prisma.MenuItemCreateWithoutSalesTransactionsInput> = z.object({
  name: z.string(),
  description: z.string().optional().nullable(),
  price: z.number(),
  foodCost: z.number(),
  isActive: z.boolean().optional(),
  recipeIds: z.union([ z.lazy(() => MenuItemCreaterecipeIdsInputSchema),z.number().int().array() ]).optional(),
  recipeServingsAmount: z.union([ z.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema),z.number().array() ]).optional(),
  recipeServingsCost: z.union([ z.lazy(() => MenuItemCreaterecipeServingsCostInputSchema),z.number().array() ]).optional(),
  allergens: z.union([ z.lazy(() => MenuItemCreateallergensInputSchema),z.string().array() ]).optional(),
  menu: z.lazy(() => MenuCreateNestedOneWithoutMenuItemsInputSchema),
  category: z.lazy(() => MenuCategoryCreateNestedOneWithoutMenuItemsInputSchema).optional(),
  recipes: z.lazy(() => RecipeCreateNestedManyWithoutMenuItemsInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeCreateNestedManyWithoutMenuItemInputSchema).optional(),
  nutritionalInfo: z.lazy(() => NutritionalInfoCreateNestedOneWithoutMenuItemInputSchema).optional(),
  recommendations: z.lazy(() => NutritionalRecommendationCreateNestedManyWithoutMenuItemInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemCreateNestedManyWithoutMenuItemInputSchema).optional(),
  feedback: z.lazy(() => CustomerFeedbackCreateNestedManyWithoutMenuItemInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionCreateNestedManyWithoutMenuItemsInputSchema).optional()
}).strict();

export const MenuItemUncheckedCreateWithoutSalesTransactionsInputSchema: z.ZodType<Prisma.MenuItemUncheckedCreateWithoutSalesTransactionsInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  price: z.number(),
  foodCost: z.number(),
  isActive: z.boolean().optional(),
  recipeIds: z.union([ z.lazy(() => MenuItemCreaterecipeIdsInputSchema),z.number().int().array() ]).optional(),
  recipeServingsAmount: z.union([ z.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema),z.number().array() ]).optional(),
  recipeServingsCost: z.union([ z.lazy(() => MenuItemCreaterecipeServingsCostInputSchema),z.number().array() ]).optional(),
  allergens: z.union([ z.lazy(() => MenuItemCreateallergensInputSchema),z.string().array() ]).optional(),
  menuId: z.number().int(),
  categoryId: z.number().int().optional().nullable(),
  recipes: z.lazy(() => RecipeUncheckedCreateNestedManyWithoutMenuItemsInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  nutritionalInfo: z.lazy(() => NutritionalInfoUncheckedCreateNestedOneWithoutMenuItemInputSchema).optional(),
  recommendations: z.lazy(() => NutritionalRecommendationUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  feedback: z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutMenuItemsInputSchema).optional()
}).strict();

export const MenuItemCreateOrConnectWithoutSalesTransactionsInputSchema: z.ZodType<Prisma.MenuItemCreateOrConnectWithoutSalesTransactionsInput> = z.object({
  where: z.lazy(() => MenuItemWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => MenuItemCreateWithoutSalesTransactionsInputSchema),z.lazy(() => MenuItemUncheckedCreateWithoutSalesTransactionsInputSchema) ]),
}).strict();

export const RestaurantUpsertWithoutSalesTransactionsInputSchema: z.ZodType<Prisma.RestaurantUpsertWithoutSalesTransactionsInput> = z.object({
  update: z.union([ z.lazy(() => RestaurantUpdateWithoutSalesTransactionsInputSchema),z.lazy(() => RestaurantUncheckedUpdateWithoutSalesTransactionsInputSchema) ]),
  create: z.union([ z.lazy(() => RestaurantCreateWithoutSalesTransactionsInputSchema),z.lazy(() => RestaurantUncheckedCreateWithoutSalesTransactionsInputSchema) ]),
  where: z.lazy(() => RestaurantWhereInputSchema).optional()
}).strict();

export const RestaurantUpdateToOneWithWhereWithoutSalesTransactionsInputSchema: z.ZodType<Prisma.RestaurantUpdateToOneWithWhereWithoutSalesTransactionsInput> = z.object({
  where: z.lazy(() => RestaurantWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RestaurantUpdateWithoutSalesTransactionsInputSchema),z.lazy(() => RestaurantUncheckedUpdateWithoutSalesTransactionsInputSchema) ]),
}).strict();

export const RestaurantUpdateWithoutSalesTransactionsInputSchema: z.ZodType<Prisma.RestaurantUpdateWithoutSalesTransactionsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zipCode: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  owner: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deleted: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organization: z.lazy(() => OrganizationUpdateOneWithoutRestaurantsNestedInputSchema).optional(),
  users: z.lazy(() => UserUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: z.lazy(() => CookBookUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: z.lazy(() => InventoryUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: z.lazy(() => OrderUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: z.lazy(() => RecipeUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: z.lazy(() => MenuUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipments: z.lazy(() => EquipmentUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklists: z.lazy(() => QualityChecklistUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  customerFeedbacks: z.lazy(() => CustomerFeedbackUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();

export const RestaurantUncheckedUpdateWithoutSalesTransactionsInputSchema: z.ZodType<Prisma.RestaurantUncheckedUpdateWithoutSalesTransactionsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zipCode: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  owner: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deleted: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: z.lazy(() => CookBookUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: z.lazy(() => InventoryUncheckedUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: z.lazy(() => OrderUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: z.lazy(() => RecipeUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: z.lazy(() => MenuUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipments: z.lazy(() => EquipmentUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklists: z.lazy(() => QualityChecklistUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  customerFeedbacks: z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();

export const MenuItemUpsertWithoutSalesTransactionsInputSchema: z.ZodType<Prisma.MenuItemUpsertWithoutSalesTransactionsInput> = z.object({
  update: z.union([ z.lazy(() => MenuItemUpdateWithoutSalesTransactionsInputSchema),z.lazy(() => MenuItemUncheckedUpdateWithoutSalesTransactionsInputSchema) ]),
  create: z.union([ z.lazy(() => MenuItemCreateWithoutSalesTransactionsInputSchema),z.lazy(() => MenuItemUncheckedCreateWithoutSalesTransactionsInputSchema) ]),
  where: z.lazy(() => MenuItemWhereInputSchema).optional()
}).strict();

export const MenuItemUpdateToOneWithWhereWithoutSalesTransactionsInputSchema: z.ZodType<Prisma.MenuItemUpdateToOneWithWhereWithoutSalesTransactionsInput> = z.object({
  where: z.lazy(() => MenuItemWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => MenuItemUpdateWithoutSalesTransactionsInputSchema),z.lazy(() => MenuItemUncheckedUpdateWithoutSalesTransactionsInputSchema) ]),
}).strict();

export const MenuItemUpdateWithoutSalesTransactionsInputSchema: z.ZodType<Prisma.MenuItemUpdateWithoutSalesTransactionsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  recipeIds: z.union([ z.lazy(() => MenuItemUpdaterecipeIdsInputSchema),z.number().int().array() ]).optional(),
  recipeServingsAmount: z.union([ z.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema),z.number().array() ]).optional(),
  recipeServingsCost: z.union([ z.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema),z.number().array() ]).optional(),
  allergens: z.union([ z.lazy(() => MenuItemUpdateallergensInputSchema),z.string().array() ]).optional(),
  menu: z.lazy(() => MenuUpdateOneRequiredWithoutMenuItemsNestedInputSchema).optional(),
  category: z.lazy(() => MenuCategoryUpdateOneWithoutMenuItemsNestedInputSchema).optional(),
  recipes: z.lazy(() => RecipeUpdateManyWithoutMenuItemsNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => NutritionalInfoUpdateOneWithoutMenuItemNestedInputSchema).optional(),
  recommendations: z.lazy(() => NutritionalRecommendationUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  feedback: z.lazy(() => CustomerFeedbackUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUpdateManyWithoutMenuItemsNestedInputSchema).optional()
}).strict();

export const MenuItemUncheckedUpdateWithoutSalesTransactionsInputSchema: z.ZodType<Prisma.MenuItemUncheckedUpdateWithoutSalesTransactionsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  recipeIds: z.union([ z.lazy(() => MenuItemUpdaterecipeIdsInputSchema),z.number().int().array() ]).optional(),
  recipeServingsAmount: z.union([ z.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema),z.number().array() ]).optional(),
  recipeServingsCost: z.union([ z.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema),z.number().array() ]).optional(),
  allergens: z.union([ z.lazy(() => MenuItemUpdateallergensInputSchema),z.string().array() ]).optional(),
  menuId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  categoryId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recipes: z.lazy(() => RecipeUncheckedUpdateManyWithoutMenuItemsNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => NutritionalInfoUncheckedUpdateOneWithoutMenuItemNestedInputSchema).optional(),
  recommendations: z.lazy(() => NutritionalRecommendationUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  feedback: z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutMenuItemsNestedInputSchema).optional()
}).strict();

export const MenuCreateWithoutMenuCategoryInputSchema: z.ZodType<Prisma.MenuCreateWithoutMenuCategoryInput> = z.object({
  name: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutMenusInputSchema),
  menuItems: z.lazy(() => MenuItemCreateNestedManyWithoutMenuInputSchema).optional()
}).strict();

export const MenuUncheckedCreateWithoutMenuCategoryInputSchema: z.ZodType<Prisma.MenuUncheckedCreateWithoutMenuCategoryInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  restaurantId: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  menuItems: z.lazy(() => MenuItemUncheckedCreateNestedManyWithoutMenuInputSchema).optional()
}).strict();

export const MenuCreateOrConnectWithoutMenuCategoryInputSchema: z.ZodType<Prisma.MenuCreateOrConnectWithoutMenuCategoryInput> = z.object({
  where: z.lazy(() => MenuWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => MenuCreateWithoutMenuCategoryInputSchema),z.lazy(() => MenuUncheckedCreateWithoutMenuCategoryInputSchema) ]),
}).strict();

export const MenuItemCreateWithoutCategoryInputSchema: z.ZodType<Prisma.MenuItemCreateWithoutCategoryInput> = z.object({
  name: z.string(),
  description: z.string().optional().nullable(),
  price: z.number(),
  foodCost: z.number(),
  isActive: z.boolean().optional(),
  recipeIds: z.union([ z.lazy(() => MenuItemCreaterecipeIdsInputSchema),z.number().int().array() ]).optional(),
  recipeServingsAmount: z.union([ z.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema),z.number().array() ]).optional(),
  recipeServingsCost: z.union([ z.lazy(() => MenuItemCreaterecipeServingsCostInputSchema),z.number().array() ]).optional(),
  allergens: z.union([ z.lazy(() => MenuItemCreateallergensInputSchema),z.string().array() ]).optional(),
  menu: z.lazy(() => MenuCreateNestedOneWithoutMenuItemsInputSchema),
  recipes: z.lazy(() => RecipeCreateNestedManyWithoutMenuItemsInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeCreateNestedManyWithoutMenuItemInputSchema).optional(),
  nutritionalInfo: z.lazy(() => NutritionalInfoCreateNestedOneWithoutMenuItemInputSchema).optional(),
  recommendations: z.lazy(() => NutritionalRecommendationCreateNestedManyWithoutMenuItemInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsCreateNestedManyWithoutMenuItemInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemCreateNestedManyWithoutMenuItemInputSchema).optional(),
  feedback: z.lazy(() => CustomerFeedbackCreateNestedManyWithoutMenuItemInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionCreateNestedManyWithoutMenuItemsInputSchema).optional()
}).strict();

export const MenuItemUncheckedCreateWithoutCategoryInputSchema: z.ZodType<Prisma.MenuItemUncheckedCreateWithoutCategoryInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  price: z.number(),
  foodCost: z.number(),
  isActive: z.boolean().optional(),
  recipeIds: z.union([ z.lazy(() => MenuItemCreaterecipeIdsInputSchema),z.number().int().array() ]).optional(),
  recipeServingsAmount: z.union([ z.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema),z.number().array() ]).optional(),
  recipeServingsCost: z.union([ z.lazy(() => MenuItemCreaterecipeServingsCostInputSchema),z.number().array() ]).optional(),
  allergens: z.union([ z.lazy(() => MenuItemCreateallergensInputSchema),z.string().array() ]).optional(),
  menuId: z.number().int(),
  recipes: z.lazy(() => RecipeUncheckedCreateNestedManyWithoutMenuItemsInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  nutritionalInfo: z.lazy(() => NutritionalInfoUncheckedCreateNestedOneWithoutMenuItemInputSchema).optional(),
  recommendations: z.lazy(() => NutritionalRecommendationUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  feedback: z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutMenuItemsInputSchema).optional()
}).strict();

export const MenuItemCreateOrConnectWithoutCategoryInputSchema: z.ZodType<Prisma.MenuItemCreateOrConnectWithoutCategoryInput> = z.object({
  where: z.lazy(() => MenuItemWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => MenuItemCreateWithoutCategoryInputSchema),z.lazy(() => MenuItemUncheckedCreateWithoutCategoryInputSchema) ]),
}).strict();

export const MenuItemCreateManyCategoryInputEnvelopeSchema: z.ZodType<Prisma.MenuItemCreateManyCategoryInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => MenuItemCreateManyCategoryInputSchema),z.lazy(() => MenuItemCreateManyCategoryInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const MenuUpsertWithoutMenuCategoryInputSchema: z.ZodType<Prisma.MenuUpsertWithoutMenuCategoryInput> = z.object({
  update: z.union([ z.lazy(() => MenuUpdateWithoutMenuCategoryInputSchema),z.lazy(() => MenuUncheckedUpdateWithoutMenuCategoryInputSchema) ]),
  create: z.union([ z.lazy(() => MenuCreateWithoutMenuCategoryInputSchema),z.lazy(() => MenuUncheckedCreateWithoutMenuCategoryInputSchema) ]),
  where: z.lazy(() => MenuWhereInputSchema).optional()
}).strict();

export const MenuUpdateToOneWithWhereWithoutMenuCategoryInputSchema: z.ZodType<Prisma.MenuUpdateToOneWithWhereWithoutMenuCategoryInput> = z.object({
  where: z.lazy(() => MenuWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => MenuUpdateWithoutMenuCategoryInputSchema),z.lazy(() => MenuUncheckedUpdateWithoutMenuCategoryInputSchema) ]),
}).strict();

export const MenuUpdateWithoutMenuCategoryInputSchema: z.ZodType<Prisma.MenuUpdateWithoutMenuCategoryInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneRequiredWithoutMenusNestedInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUpdateManyWithoutMenuNestedInputSchema).optional()
}).strict();

export const MenuUncheckedUpdateWithoutMenuCategoryInputSchema: z.ZodType<Prisma.MenuUncheckedUpdateWithoutMenuCategoryInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  menuItems: z.lazy(() => MenuItemUncheckedUpdateManyWithoutMenuNestedInputSchema).optional()
}).strict();

export const MenuItemUpsertWithWhereUniqueWithoutCategoryInputSchema: z.ZodType<Prisma.MenuItemUpsertWithWhereUniqueWithoutCategoryInput> = z.object({
  where: z.lazy(() => MenuItemWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => MenuItemUpdateWithoutCategoryInputSchema),z.lazy(() => MenuItemUncheckedUpdateWithoutCategoryInputSchema) ]),
  create: z.union([ z.lazy(() => MenuItemCreateWithoutCategoryInputSchema),z.lazy(() => MenuItemUncheckedCreateWithoutCategoryInputSchema) ]),
}).strict();

export const MenuItemUpdateWithWhereUniqueWithoutCategoryInputSchema: z.ZodType<Prisma.MenuItemUpdateWithWhereUniqueWithoutCategoryInput> = z.object({
  where: z.lazy(() => MenuItemWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => MenuItemUpdateWithoutCategoryInputSchema),z.lazy(() => MenuItemUncheckedUpdateWithoutCategoryInputSchema) ]),
}).strict();

export const MenuItemUpdateManyWithWhereWithoutCategoryInputSchema: z.ZodType<Prisma.MenuItemUpdateManyWithWhereWithoutCategoryInput> = z.object({
  where: z.lazy(() => MenuItemScalarWhereInputSchema),
  data: z.union([ z.lazy(() => MenuItemUpdateManyMutationInputSchema),z.lazy(() => MenuItemUncheckedUpdateManyWithoutCategoryInputSchema) ]),
}).strict();

export const MenuItemScalarWhereInputSchema: z.ZodType<Prisma.MenuItemScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => MenuItemScalarWhereInputSchema),z.lazy(() => MenuItemScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MenuItemScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MenuItemScalarWhereInputSchema),z.lazy(() => MenuItemScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  price: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  foodCost: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  isActive: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  recipeIds: z.lazy(() => IntNullableListFilterSchema).optional(),
  recipeServingsAmount: z.lazy(() => FloatNullableListFilterSchema).optional(),
  recipeServingsCost: z.lazy(() => FloatNullableListFilterSchema).optional(),
  allergens: z.lazy(() => StringNullableListFilterSchema).optional(),
  menuId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  categoryId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
}).strict();

export const RecipeCreateWithoutVersionsInputSchema: z.ZodType<Prisma.RecipeCreateWithoutVersionsInput> = z.object({
  name: z.string(),
  imageUrls: z.union([ z.lazy(() => RecipeCreateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.string().optional().nullable(),
  servings: z.number().int(),
  cookTime: z.number().int(),
  prepTime: z.number().int(),
  frequency: z.number().int().optional().nullable(),
  foodCost: z.number().optional().nullable(),
  isDeleted: z.boolean().optional(),
  isPublished: z.boolean().optional(),
  publishedAt: z.coerce.date().optional().nullable(),
  language: z.string().optional(),
  skillLevel: z.lazy(() => SkillLevelSchema).optional(),
  category: z.lazy(() => CategorySchema).optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutRecipesInputSchema),
  cookBook: z.lazy(() => CookBookCreateNestedOneWithoutRecipesInputSchema),
  ingredients: z.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeCreateNestedManyWithoutRecipeInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z.lazy(() => RecipeTagCreateNestedManyWithoutRecipesInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionCreateNestedManyWithoutRecipesInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureCreateNestedManyWithoutRecipeInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldCreateNestedManyWithoutRecipeInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostCreateNestedManyWithoutRecipeInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionCreateNestedOneWithoutRecipeInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointCreateNestedManyWithoutRecipeInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageCreateNestedOneWithoutRecipeInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoCreateNestedManyWithoutRecipeInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsCreateNestedOneWithoutRecipeInputSchema).optional()
}).strict();

export const RecipeUncheckedCreateWithoutVersionsInputSchema: z.ZodType<Prisma.RecipeUncheckedCreateWithoutVersionsInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  imageUrls: z.union([ z.lazy(() => RecipeCreateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.string().optional().nullable(),
  servings: z.number().int(),
  cookTime: z.number().int(),
  prepTime: z.number().int(),
  frequency: z.number().int().optional().nullable(),
  restaurantId: z.number().int(),
  cookBookId: z.number().int(),
  foodCost: z.number().optional().nullable(),
  isDeleted: z.boolean().optional(),
  isPublished: z.boolean().optional(),
  publishedAt: z.coerce.date().optional().nullable(),
  language: z.string().optional(),
  skillLevel: z.lazy(() => SkillLevelSchema).optional(),
  category: z.lazy(() => CategorySchema).optional(),
  ingredients: z.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUncheckedCreateNestedOneWithoutRecipeInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUncheckedCreateNestedOneWithoutRecipeInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUncheckedCreateNestedOneWithoutRecipeInputSchema).optional()
}).strict();

export const RecipeCreateOrConnectWithoutVersionsInputSchema: z.ZodType<Prisma.RecipeCreateOrConnectWithoutVersionsInput> = z.object({
  where: z.lazy(() => RecipeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RecipeCreateWithoutVersionsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutVersionsInputSchema) ]),
}).strict();

export const RecipeIngredientCreateWithoutRecipeVersionInputSchema: z.ZodType<Prisma.RecipeIngredientCreateWithoutRecipeVersionInput> = z.object({
  quantity: z.number(),
  unit: z.string(),
  processingInstructions: z.string().optional().nullable(),
  substituteIngredients: z.union([ z.lazy(() => RecipeIngredientCreatesubstituteIngredientsInputSchema),z.number().int().array() ]).optional(),
  isOptional: z.boolean().optional(),
  notes: z.string().optional().nullable(),
  cost: z.number().optional().nullable(),
  density: z.number().optional().nullable(),
  yield: z.number().optional().nullable(),
  joinAt: z.coerce.date().optional(),
  recipe: z.lazy(() => RecipeCreateNestedOneWithoutIngredientsInputSchema),
  ingredient: z.lazy(() => IngredientCreateNestedOneWithoutRecipeIngredientsInputSchema)
}).strict();

export const RecipeIngredientUncheckedCreateWithoutRecipeVersionInputSchema: z.ZodType<Prisma.RecipeIngredientUncheckedCreateWithoutRecipeVersionInput> = z.object({
  id: z.number().int().optional(),
  recipeId: z.number().int(),
  ingredientId: z.number().int(),
  quantity: z.number(),
  unit: z.string(),
  processingInstructions: z.string().optional().nullable(),
  substituteIngredients: z.union([ z.lazy(() => RecipeIngredientCreatesubstituteIngredientsInputSchema),z.number().int().array() ]).optional(),
  isOptional: z.boolean().optional(),
  notes: z.string().optional().nullable(),
  cost: z.number().optional().nullable(),
  density: z.number().optional().nullable(),
  yield: z.number().optional().nullable(),
  joinAt: z.coerce.date().optional()
}).strict();

export const RecipeIngredientCreateOrConnectWithoutRecipeVersionInputSchema: z.ZodType<Prisma.RecipeIngredientCreateOrConnectWithoutRecipeVersionInput> = z.object({
  where: z.lazy(() => RecipeIngredientWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RecipeIngredientCreateWithoutRecipeVersionInputSchema),z.lazy(() => RecipeIngredientUncheckedCreateWithoutRecipeVersionInputSchema) ]),
}).strict();

export const RecipeIngredientCreateManyRecipeVersionInputEnvelopeSchema: z.ZodType<Prisma.RecipeIngredientCreateManyRecipeVersionInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => RecipeIngredientCreateManyRecipeVersionInputSchema),z.lazy(() => RecipeIngredientCreateManyRecipeVersionInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const RecipeInstructionCreateWithoutRecipeVersionInputSchema: z.ZodType<Prisma.RecipeInstructionCreateWithoutRecipeVersionInput> = z.object({
  stepNumber: z.number().int(),
  instruction: z.string(),
  imageUrl: z.string().optional().nullable(),
  timeInMinutes: z.number().int().optional().nullable(),
  temperature: z.number().optional().nullable(),
  temperatureUnit: z.string().optional().nullable(),
  isCritical: z.boolean().optional(),
  techniqueTips: z.string().optional().nullable(),
  warningNotes: z.string().optional().nullable(),
  recipe: z.lazy(() => RecipeCreateNestedOneWithoutInstructionsInputSchema),
  equipment: z.lazy(() => RecipeEquipmentCreateNestedManyWithoutRecipeInstructionInputSchema).optional()
}).strict();

export const RecipeInstructionUncheckedCreateWithoutRecipeVersionInputSchema: z.ZodType<Prisma.RecipeInstructionUncheckedCreateWithoutRecipeVersionInput> = z.object({
  id: z.number().int().optional(),
  recipeId: z.number().int(),
  stepNumber: z.number().int(),
  instruction: z.string(),
  imageUrl: z.string().optional().nullable(),
  timeInMinutes: z.number().int().optional().nullable(),
  temperature: z.number().optional().nullable(),
  temperatureUnit: z.string().optional().nullable(),
  isCritical: z.boolean().optional(),
  techniqueTips: z.string().optional().nullable(),
  warningNotes: z.string().optional().nullable(),
  equipment: z.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInstructionInputSchema).optional()
}).strict();

export const RecipeInstructionCreateOrConnectWithoutRecipeVersionInputSchema: z.ZodType<Prisma.RecipeInstructionCreateOrConnectWithoutRecipeVersionInput> = z.object({
  where: z.lazy(() => RecipeInstructionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RecipeInstructionCreateWithoutRecipeVersionInputSchema),z.lazy(() => RecipeInstructionUncheckedCreateWithoutRecipeVersionInputSchema) ]),
}).strict();

export const RecipeInstructionCreateManyRecipeVersionInputEnvelopeSchema: z.ZodType<Prisma.RecipeInstructionCreateManyRecipeVersionInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => RecipeInstructionCreateManyRecipeVersionInputSchema),z.lazy(() => RecipeInstructionCreateManyRecipeVersionInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UserCreateWithoutRecipeVersionsCreatedInputSchema: z.ZodType<Prisma.UserCreateWithoutRecipeVersionsCreatedInput> = z.object({
  email: z.string(),
  sub: z.number().int().optional().nullable(),
  passwordHash: z.string(),
  firstName: z.string(),
  lastName: z.string(),
  profileImage: z.string().optional().nullable(),
  verified: z.boolean().optional(),
  role: z.lazy(() => UserRoleSchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema).optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutUsersInputSchema).optional(),
  shifts: z.lazy(() => ShiftCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z.lazy(() => AvailabilityCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionCreateNestedManyWithoutApprovedByInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountCreateNestedManyWithoutCreatedByInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutRecipeVersionsCreatedInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutRecipeVersionsCreatedInput> = z.object({
  id: z.number().int().optional(),
  email: z.string(),
  sub: z.number().int().optional().nullable(),
  passwordHash: z.string(),
  firstName: z.string(),
  lastName: z.string(),
  profileImage: z.string().optional().nullable(),
  verified: z.boolean().optional(),
  role: z.lazy(() => UserRoleSchema),
  organizationId: z.number().int().optional().nullable(),
  restaurantId: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  shifts: z.lazy(() => ShiftUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteUncheckedCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutApprovedByInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutRecipeVersionsCreatedInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutRecipeVersionsCreatedInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutRecipeVersionsCreatedInputSchema),z.lazy(() => UserUncheckedCreateWithoutRecipeVersionsCreatedInputSchema) ]),
}).strict();

export const UserCreateWithoutRecipeVersionsApprovedInputSchema: z.ZodType<Prisma.UserCreateWithoutRecipeVersionsApprovedInput> = z.object({
  email: z.string(),
  sub: z.number().int().optional().nullable(),
  passwordHash: z.string(),
  firstName: z.string(),
  lastName: z.string(),
  profileImage: z.string().optional().nullable(),
  verified: z.boolean().optional(),
  role: z.lazy(() => UserRoleSchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema).optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutUsersInputSchema).optional(),
  shifts: z.lazy(() => ShiftCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z.lazy(() => AvailabilityCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountCreateNestedManyWithoutCreatedByInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutRecipeVersionsApprovedInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutRecipeVersionsApprovedInput> = z.object({
  id: z.number().int().optional(),
  email: z.string(),
  sub: z.number().int().optional().nullable(),
  passwordHash: z.string(),
  firstName: z.string(),
  lastName: z.string(),
  profileImage: z.string().optional().nullable(),
  verified: z.boolean().optional(),
  role: z.lazy(() => UserRoleSchema),
  organizationId: z.number().int().optional().nullable(),
  restaurantId: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  shifts: z.lazy(() => ShiftUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteUncheckedCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutRecipeVersionsApprovedInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutRecipeVersionsApprovedInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutRecipeVersionsApprovedInputSchema),z.lazy(() => UserUncheckedCreateWithoutRecipeVersionsApprovedInputSchema) ]),
}).strict();

export const RecipeUpsertWithoutVersionsInputSchema: z.ZodType<Prisma.RecipeUpsertWithoutVersionsInput> = z.object({
  update: z.union([ z.lazy(() => RecipeUpdateWithoutVersionsInputSchema),z.lazy(() => RecipeUncheckedUpdateWithoutVersionsInputSchema) ]),
  create: z.union([ z.lazy(() => RecipeCreateWithoutVersionsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutVersionsInputSchema) ]),
  where: z.lazy(() => RecipeWhereInputSchema).optional()
}).strict();

export const RecipeUpdateToOneWithWhereWithoutVersionsInputSchema: z.ZodType<Prisma.RecipeUpdateToOneWithWhereWithoutVersionsInput> = z.object({
  where: z.lazy(() => RecipeWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RecipeUpdateWithoutVersionsInputSchema),z.lazy(() => RecipeUncheckedUpdateWithoutVersionsInputSchema) ]),
}).strict();

export const RecipeUpdateWithoutVersionsInputSchema: z.ZodType<Prisma.RecipeUpdateWithoutVersionsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrls: z.union([ z.lazy(() => RecipeUpdateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  servings: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isPublished: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  publishedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  skillLevel: z.union([ z.lazy(() => SkillLevelSchema),z.lazy(() => EnumSkillLevelFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => CategorySchema),z.lazy(() => EnumCategoryFieldUpdateOperationsInputSchema) ]).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  cookBook: z.lazy(() => CookBookUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  ingredients: z.lazy(() => RecipeIngredientUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUpdateManyWithoutRecipeNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUpdateManyWithoutRecipesNestedInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUpdateManyWithoutRecipesNestedInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUpdateManyWithoutRecipeNestedInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUpdateManyWithoutRecipeNestedInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUpdateManyWithoutRecipeNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUpdateOneWithoutRecipeNestedInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUpdateManyWithoutRecipeNestedInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUpdateOneWithoutRecipeNestedInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUpdateManyWithoutRecipeNestedInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUpdateOneWithoutRecipeNestedInputSchema).optional()
}).strict();

export const RecipeUncheckedUpdateWithoutVersionsInputSchema: z.ZodType<Prisma.RecipeUncheckedUpdateWithoutVersionsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrls: z.union([ z.lazy(() => RecipeUpdateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  servings: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookBookId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isPublished: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  publishedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  skillLevel: z.union([ z.lazy(() => SkillLevelSchema),z.lazy(() => EnumSkillLevelFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => CategorySchema),z.lazy(() => EnumCategoryFieldUpdateOperationsInputSchema) ]).optional(),
  ingredients: z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional()
}).strict();

export const RecipeIngredientUpsertWithWhereUniqueWithoutRecipeVersionInputSchema: z.ZodType<Prisma.RecipeIngredientUpsertWithWhereUniqueWithoutRecipeVersionInput> = z.object({
  where: z.lazy(() => RecipeIngredientWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => RecipeIngredientUpdateWithoutRecipeVersionInputSchema),z.lazy(() => RecipeIngredientUncheckedUpdateWithoutRecipeVersionInputSchema) ]),
  create: z.union([ z.lazy(() => RecipeIngredientCreateWithoutRecipeVersionInputSchema),z.lazy(() => RecipeIngredientUncheckedCreateWithoutRecipeVersionInputSchema) ]),
}).strict();

export const RecipeIngredientUpdateWithWhereUniqueWithoutRecipeVersionInputSchema: z.ZodType<Prisma.RecipeIngredientUpdateWithWhereUniqueWithoutRecipeVersionInput> = z.object({
  where: z.lazy(() => RecipeIngredientWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => RecipeIngredientUpdateWithoutRecipeVersionInputSchema),z.lazy(() => RecipeIngredientUncheckedUpdateWithoutRecipeVersionInputSchema) ]),
}).strict();

export const RecipeIngredientUpdateManyWithWhereWithoutRecipeVersionInputSchema: z.ZodType<Prisma.RecipeIngredientUpdateManyWithWhereWithoutRecipeVersionInput> = z.object({
  where: z.lazy(() => RecipeIngredientScalarWhereInputSchema),
  data: z.union([ z.lazy(() => RecipeIngredientUpdateManyMutationInputSchema),z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeVersionInputSchema) ]),
}).strict();

export const RecipeIngredientScalarWhereInputSchema: z.ZodType<Prisma.RecipeIngredientScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RecipeIngredientScalarWhereInputSchema),z.lazy(() => RecipeIngredientScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RecipeIngredientScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RecipeIngredientScalarWhereInputSchema),z.lazy(() => RecipeIngredientScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  recipeId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  ingredientId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  quantity: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  unit: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  processingInstructions: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  substituteIngredients: z.lazy(() => IntNullableListFilterSchema).optional(),
  isOptional: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  cost: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  density: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  yield: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  joinAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  recipeVersionId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
}).strict();

export const RecipeInstructionUpsertWithWhereUniqueWithoutRecipeVersionInputSchema: z.ZodType<Prisma.RecipeInstructionUpsertWithWhereUniqueWithoutRecipeVersionInput> = z.object({
  where: z.lazy(() => RecipeInstructionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => RecipeInstructionUpdateWithoutRecipeVersionInputSchema),z.lazy(() => RecipeInstructionUncheckedUpdateWithoutRecipeVersionInputSchema) ]),
  create: z.union([ z.lazy(() => RecipeInstructionCreateWithoutRecipeVersionInputSchema),z.lazy(() => RecipeInstructionUncheckedCreateWithoutRecipeVersionInputSchema) ]),
}).strict();

export const RecipeInstructionUpdateWithWhereUniqueWithoutRecipeVersionInputSchema: z.ZodType<Prisma.RecipeInstructionUpdateWithWhereUniqueWithoutRecipeVersionInput> = z.object({
  where: z.lazy(() => RecipeInstructionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => RecipeInstructionUpdateWithoutRecipeVersionInputSchema),z.lazy(() => RecipeInstructionUncheckedUpdateWithoutRecipeVersionInputSchema) ]),
}).strict();

export const RecipeInstructionUpdateManyWithWhereWithoutRecipeVersionInputSchema: z.ZodType<Prisma.RecipeInstructionUpdateManyWithWhereWithoutRecipeVersionInput> = z.object({
  where: z.lazy(() => RecipeInstructionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => RecipeInstructionUpdateManyMutationInputSchema),z.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeVersionInputSchema) ]),
}).strict();

export const RecipeInstructionScalarWhereInputSchema: z.ZodType<Prisma.RecipeInstructionScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RecipeInstructionScalarWhereInputSchema),z.lazy(() => RecipeInstructionScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RecipeInstructionScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RecipeInstructionScalarWhereInputSchema),z.lazy(() => RecipeInstructionScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  recipeId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  stepNumber: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  instruction: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  imageUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  recipeVersionId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  timeInMinutes: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  temperature: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  temperatureUnit: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  isCritical: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  techniqueTips: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  warningNotes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const UserUpsertWithoutRecipeVersionsCreatedInputSchema: z.ZodType<Prisma.UserUpsertWithoutRecipeVersionsCreatedInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutRecipeVersionsCreatedInputSchema),z.lazy(() => UserUncheckedUpdateWithoutRecipeVersionsCreatedInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutRecipeVersionsCreatedInputSchema),z.lazy(() => UserUncheckedCreateWithoutRecipeVersionsCreatedInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutRecipeVersionsCreatedInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutRecipeVersionsCreatedInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutRecipeVersionsCreatedInputSchema),z.lazy(() => UserUncheckedUpdateWithoutRecipeVersionsCreatedInputSchema) ]),
}).strict();

export const UserUpdateWithoutRecipeVersionsCreatedInputSchema: z.ZodType<Prisma.UserUpdateWithoutRecipeVersionsCreatedInput> = z.object({
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sub: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passwordHash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  verified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneWithoutUsersNestedInputSchema).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneWithoutUsersNestedInputSchema).optional(),
  shifts: z.lazy(() => ShiftUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionUpdateManyWithoutApprovedByNestedInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountUpdateManyWithoutCreatedByNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutRecipeVersionsCreatedInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutRecipeVersionsCreatedInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sub: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passwordHash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  verified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  shifts: z.lazy(() => ShiftUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemUncheckedUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutApprovedByNestedInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutRecipeVersionsApprovedInputSchema: z.ZodType<Prisma.UserUpsertWithoutRecipeVersionsApprovedInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutRecipeVersionsApprovedInputSchema),z.lazy(() => UserUncheckedUpdateWithoutRecipeVersionsApprovedInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutRecipeVersionsApprovedInputSchema),z.lazy(() => UserUncheckedCreateWithoutRecipeVersionsApprovedInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutRecipeVersionsApprovedInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutRecipeVersionsApprovedInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutRecipeVersionsApprovedInputSchema),z.lazy(() => UserUncheckedUpdateWithoutRecipeVersionsApprovedInputSchema) ]),
}).strict();

export const UserUpdateWithoutRecipeVersionsApprovedInputSchema: z.ZodType<Prisma.UserUpdateWithoutRecipeVersionsApprovedInput> = z.object({
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sub: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passwordHash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  verified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneWithoutUsersNestedInputSchema).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneWithoutUsersNestedInputSchema).optional(),
  shifts: z.lazy(() => ShiftUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountUpdateManyWithoutCreatedByNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutRecipeVersionsApprovedInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutRecipeVersionsApprovedInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sub: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passwordHash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  verified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  shifts: z.lazy(() => ShiftUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemUncheckedUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional()
}).strict();

export const RestaurantCreateWithoutEquipmentsInputSchema: z.ZodType<Prisma.RestaurantCreateWithoutEquipmentsInput> = z.object({
  name: z.string(),
  imageUrl: z.string().optional().nullable(),
  address: z.string(),
  city: z.string(),
  zipCode: z.string(),
  state: z.string(),
  owner: z.string(),
  foodCost: z.number().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  isDeleted: z.boolean().optional(),
  deleted: z.coerce.date().optional().nullable(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutRestaurantsInputSchema).optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: z.lazy(() => CookBookCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: z.lazy(() => InventoryCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: z.lazy(() => OrderCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: z.lazy(() => RecipeCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: z.lazy(() => MenuCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklists: z.lazy(() => QualityChecklistCreateNestedManyWithoutRestaurantInputSchema).optional(),
  customerFeedbacks: z.lazy(() => CustomerFeedbackCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();

export const RestaurantUncheckedCreateWithoutEquipmentsInputSchema: z.ZodType<Prisma.RestaurantUncheckedCreateWithoutEquipmentsInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  imageUrl: z.string().optional().nullable(),
  address: z.string(),
  city: z.string(),
  zipCode: z.string(),
  state: z.string(),
  owner: z.string(),
  organizationId: z.number().int().optional().nullable(),
  foodCost: z.number().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  isDeleted: z.boolean().optional(),
  deleted: z.coerce.date().optional().nullable(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: z.lazy(() => CookBookUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: z.lazy(() => InventoryUncheckedCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: z.lazy(() => OrderUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: z.lazy(() => RecipeUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: z.lazy(() => MenuUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklists: z.lazy(() => QualityChecklistUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  customerFeedbacks: z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();

export const RestaurantCreateOrConnectWithoutEquipmentsInputSchema: z.ZodType<Prisma.RestaurantCreateOrConnectWithoutEquipmentsInput> = z.object({
  where: z.lazy(() => RestaurantWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RestaurantCreateWithoutEquipmentsInputSchema),z.lazy(() => RestaurantUncheckedCreateWithoutEquipmentsInputSchema) ]),
}).strict();

export const RecipeEquipmentCreateWithoutEquipmentInputSchema: z.ZodType<Prisma.RecipeEquipmentCreateWithoutEquipmentInput> = z.object({
  notes: z.string().optional().nullable(),
  recipe: z.lazy(() => RecipeCreateNestedOneWithoutEquipmentsInputSchema),
  RecipeInstruction: z.lazy(() => RecipeInstructionCreateNestedOneWithoutEquipmentInputSchema).optional()
}).strict();

export const RecipeEquipmentUncheckedCreateWithoutEquipmentInputSchema: z.ZodType<Prisma.RecipeEquipmentUncheckedCreateWithoutEquipmentInput> = z.object({
  id: z.number().int().optional(),
  recipeId: z.number().int(),
  notes: z.string().optional().nullable(),
  recipeInstructionId: z.number().int().optional().nullable()
}).strict();

export const RecipeEquipmentCreateOrConnectWithoutEquipmentInputSchema: z.ZodType<Prisma.RecipeEquipmentCreateOrConnectWithoutEquipmentInput> = z.object({
  where: z.lazy(() => RecipeEquipmentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RecipeEquipmentCreateWithoutEquipmentInputSchema),z.lazy(() => RecipeEquipmentUncheckedCreateWithoutEquipmentInputSchema) ]),
}).strict();

export const RecipeEquipmentCreateManyEquipmentInputEnvelopeSchema: z.ZodType<Prisma.RecipeEquipmentCreateManyEquipmentInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => RecipeEquipmentCreateManyEquipmentInputSchema),z.lazy(() => RecipeEquipmentCreateManyEquipmentInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const MaintenanceLogCreateWithoutEquipmentInputSchema: z.ZodType<Prisma.MaintenanceLogCreateWithoutEquipmentInput> = z.object({
  date: z.coerce.date().optional(),
  type: z.lazy(() => MaintenanceTypeSchema),
  description: z.string(),
  cost: z.number().optional().nullable(),
  performedBy: z.string(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const MaintenanceLogUncheckedCreateWithoutEquipmentInputSchema: z.ZodType<Prisma.MaintenanceLogUncheckedCreateWithoutEquipmentInput> = z.object({
  id: z.number().int().optional(),
  date: z.coerce.date().optional(),
  type: z.lazy(() => MaintenanceTypeSchema),
  description: z.string(),
  cost: z.number().optional().nullable(),
  performedBy: z.string(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const MaintenanceLogCreateOrConnectWithoutEquipmentInputSchema: z.ZodType<Prisma.MaintenanceLogCreateOrConnectWithoutEquipmentInput> = z.object({
  where: z.lazy(() => MaintenanceLogWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => MaintenanceLogCreateWithoutEquipmentInputSchema),z.lazy(() => MaintenanceLogUncheckedCreateWithoutEquipmentInputSchema) ]),
}).strict();

export const MaintenanceLogCreateManyEquipmentInputEnvelopeSchema: z.ZodType<Prisma.MaintenanceLogCreateManyEquipmentInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => MaintenanceLogCreateManyEquipmentInputSchema),z.lazy(() => MaintenanceLogCreateManyEquipmentInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const RestaurantUpsertWithoutEquipmentsInputSchema: z.ZodType<Prisma.RestaurantUpsertWithoutEquipmentsInput> = z.object({
  update: z.union([ z.lazy(() => RestaurantUpdateWithoutEquipmentsInputSchema),z.lazy(() => RestaurantUncheckedUpdateWithoutEquipmentsInputSchema) ]),
  create: z.union([ z.lazy(() => RestaurantCreateWithoutEquipmentsInputSchema),z.lazy(() => RestaurantUncheckedCreateWithoutEquipmentsInputSchema) ]),
  where: z.lazy(() => RestaurantWhereInputSchema).optional()
}).strict();

export const RestaurantUpdateToOneWithWhereWithoutEquipmentsInputSchema: z.ZodType<Prisma.RestaurantUpdateToOneWithWhereWithoutEquipmentsInput> = z.object({
  where: z.lazy(() => RestaurantWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RestaurantUpdateWithoutEquipmentsInputSchema),z.lazy(() => RestaurantUncheckedUpdateWithoutEquipmentsInputSchema) ]),
}).strict();

export const RestaurantUpdateWithoutEquipmentsInputSchema: z.ZodType<Prisma.RestaurantUpdateWithoutEquipmentsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zipCode: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  owner: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deleted: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organization: z.lazy(() => OrganizationUpdateOneWithoutRestaurantsNestedInputSchema).optional(),
  users: z.lazy(() => UserUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: z.lazy(() => CookBookUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: z.lazy(() => InventoryUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: z.lazy(() => OrderUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: z.lazy(() => RecipeUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: z.lazy(() => MenuUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklists: z.lazy(() => QualityChecklistUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  customerFeedbacks: z.lazy(() => CustomerFeedbackUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();

export const RestaurantUncheckedUpdateWithoutEquipmentsInputSchema: z.ZodType<Prisma.RestaurantUncheckedUpdateWithoutEquipmentsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zipCode: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  owner: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deleted: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: z.lazy(() => CookBookUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: z.lazy(() => InventoryUncheckedUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: z.lazy(() => OrderUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: z.lazy(() => RecipeUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: z.lazy(() => MenuUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklists: z.lazy(() => QualityChecklistUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  customerFeedbacks: z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();

export const RecipeEquipmentUpsertWithWhereUniqueWithoutEquipmentInputSchema: z.ZodType<Prisma.RecipeEquipmentUpsertWithWhereUniqueWithoutEquipmentInput> = z.object({
  where: z.lazy(() => RecipeEquipmentWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => RecipeEquipmentUpdateWithoutEquipmentInputSchema),z.lazy(() => RecipeEquipmentUncheckedUpdateWithoutEquipmentInputSchema) ]),
  create: z.union([ z.lazy(() => RecipeEquipmentCreateWithoutEquipmentInputSchema),z.lazy(() => RecipeEquipmentUncheckedCreateWithoutEquipmentInputSchema) ]),
}).strict();

export const RecipeEquipmentUpdateWithWhereUniqueWithoutEquipmentInputSchema: z.ZodType<Prisma.RecipeEquipmentUpdateWithWhereUniqueWithoutEquipmentInput> = z.object({
  where: z.lazy(() => RecipeEquipmentWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => RecipeEquipmentUpdateWithoutEquipmentInputSchema),z.lazy(() => RecipeEquipmentUncheckedUpdateWithoutEquipmentInputSchema) ]),
}).strict();

export const RecipeEquipmentUpdateManyWithWhereWithoutEquipmentInputSchema: z.ZodType<Prisma.RecipeEquipmentUpdateManyWithWhereWithoutEquipmentInput> = z.object({
  where: z.lazy(() => RecipeEquipmentScalarWhereInputSchema),
  data: z.union([ z.lazy(() => RecipeEquipmentUpdateManyMutationInputSchema),z.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutEquipmentInputSchema) ]),
}).strict();

export const RecipeEquipmentScalarWhereInputSchema: z.ZodType<Prisma.RecipeEquipmentScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RecipeEquipmentScalarWhereInputSchema),z.lazy(() => RecipeEquipmentScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RecipeEquipmentScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RecipeEquipmentScalarWhereInputSchema),z.lazy(() => RecipeEquipmentScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  recipeId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  equipmentId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  recipeInstructionId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
}).strict();

export const MaintenanceLogUpsertWithWhereUniqueWithoutEquipmentInputSchema: z.ZodType<Prisma.MaintenanceLogUpsertWithWhereUniqueWithoutEquipmentInput> = z.object({
  where: z.lazy(() => MaintenanceLogWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => MaintenanceLogUpdateWithoutEquipmentInputSchema),z.lazy(() => MaintenanceLogUncheckedUpdateWithoutEquipmentInputSchema) ]),
  create: z.union([ z.lazy(() => MaintenanceLogCreateWithoutEquipmentInputSchema),z.lazy(() => MaintenanceLogUncheckedCreateWithoutEquipmentInputSchema) ]),
}).strict();

export const MaintenanceLogUpdateWithWhereUniqueWithoutEquipmentInputSchema: z.ZodType<Prisma.MaintenanceLogUpdateWithWhereUniqueWithoutEquipmentInput> = z.object({
  where: z.lazy(() => MaintenanceLogWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => MaintenanceLogUpdateWithoutEquipmentInputSchema),z.lazy(() => MaintenanceLogUncheckedUpdateWithoutEquipmentInputSchema) ]),
}).strict();

export const MaintenanceLogUpdateManyWithWhereWithoutEquipmentInputSchema: z.ZodType<Prisma.MaintenanceLogUpdateManyWithWhereWithoutEquipmentInput> = z.object({
  where: z.lazy(() => MaintenanceLogScalarWhereInputSchema),
  data: z.union([ z.lazy(() => MaintenanceLogUpdateManyMutationInputSchema),z.lazy(() => MaintenanceLogUncheckedUpdateManyWithoutEquipmentInputSchema) ]),
}).strict();

export const MaintenanceLogScalarWhereInputSchema: z.ZodType<Prisma.MaintenanceLogScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => MaintenanceLogScalarWhereInputSchema),z.lazy(() => MaintenanceLogScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MaintenanceLogScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MaintenanceLogScalarWhereInputSchema),z.lazy(() => MaintenanceLogScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  equipmentId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  type: z.union([ z.lazy(() => EnumMaintenanceTypeFilterSchema),z.lazy(() => MaintenanceTypeSchema) ]).optional(),
  description: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  cost: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  performedBy: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const RecipeCreateWithoutEquipmentsInputSchema: z.ZodType<Prisma.RecipeCreateWithoutEquipmentsInput> = z.object({
  name: z.string(),
  imageUrls: z.union([ z.lazy(() => RecipeCreateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.string().optional().nullable(),
  servings: z.number().int(),
  cookTime: z.number().int(),
  prepTime: z.number().int(),
  frequency: z.number().int().optional().nullable(),
  foodCost: z.number().optional().nullable(),
  isDeleted: z.boolean().optional(),
  isPublished: z.boolean().optional(),
  publishedAt: z.coerce.date().optional().nullable(),
  language: z.string().optional(),
  skillLevel: z.lazy(() => SkillLevelSchema).optional(),
  category: z.lazy(() => CategorySchema).optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutRecipesInputSchema),
  cookBook: z.lazy(() => CookBookCreateNestedOneWithoutRecipesInputSchema),
  ingredients: z.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeCreateNestedManyWithoutRecipeInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z.lazy(() => RecipeTagCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionCreateNestedManyWithoutRecipesInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureCreateNestedManyWithoutRecipeInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldCreateNestedManyWithoutRecipeInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostCreateNestedManyWithoutRecipeInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionCreateNestedOneWithoutRecipeInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointCreateNestedManyWithoutRecipeInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageCreateNestedOneWithoutRecipeInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoCreateNestedManyWithoutRecipeInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsCreateNestedOneWithoutRecipeInputSchema).optional()
}).strict();

export const RecipeUncheckedCreateWithoutEquipmentsInputSchema: z.ZodType<Prisma.RecipeUncheckedCreateWithoutEquipmentsInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  imageUrls: z.union([ z.lazy(() => RecipeCreateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.string().optional().nullable(),
  servings: z.number().int(),
  cookTime: z.number().int(),
  prepTime: z.number().int(),
  frequency: z.number().int().optional().nullable(),
  restaurantId: z.number().int(),
  cookBookId: z.number().int(),
  foodCost: z.number().optional().nullable(),
  isDeleted: z.boolean().optional(),
  isPublished: z.boolean().optional(),
  publishedAt: z.coerce.date().optional().nullable(),
  language: z.string().optional(),
  skillLevel: z.lazy(() => SkillLevelSchema).optional(),
  category: z.lazy(() => CategorySchema).optional(),
  ingredients: z.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUncheckedCreateNestedOneWithoutRecipeInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUncheckedCreateNestedOneWithoutRecipeInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUncheckedCreateNestedOneWithoutRecipeInputSchema).optional()
}).strict();

export const RecipeCreateOrConnectWithoutEquipmentsInputSchema: z.ZodType<Prisma.RecipeCreateOrConnectWithoutEquipmentsInput> = z.object({
  where: z.lazy(() => RecipeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RecipeCreateWithoutEquipmentsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutEquipmentsInputSchema) ]),
}).strict();

export const EquipmentCreateWithoutRecipesInputSchema: z.ZodType<Prisma.EquipmentCreateWithoutRecipesInput> = z.object({
  name: z.string(),
  description: z.string().optional().nullable(),
  model: z.string().optional().nullable(),
  serialNumber: z.string().optional().nullable(),
  purchaseDate: z.coerce.date().optional().nullable(),
  lastMaintenance: z.coerce.date().optional().nullable(),
  nextMaintenance: z.coerce.date().optional().nullable(),
  status: z.lazy(() => EquipmentStatusSchema).optional(),
  location: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutEquipmentsInputSchema),
  maintenanceLogs: z.lazy(() => MaintenanceLogCreateNestedManyWithoutEquipmentInputSchema).optional()
}).strict();

export const EquipmentUncheckedCreateWithoutRecipesInputSchema: z.ZodType<Prisma.EquipmentUncheckedCreateWithoutRecipesInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  model: z.string().optional().nullable(),
  serialNumber: z.string().optional().nullable(),
  purchaseDate: z.coerce.date().optional().nullable(),
  lastMaintenance: z.coerce.date().optional().nullable(),
  nextMaintenance: z.coerce.date().optional().nullable(),
  status: z.lazy(() => EquipmentStatusSchema).optional(),
  location: z.string().optional().nullable(),
  restaurantId: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  maintenanceLogs: z.lazy(() => MaintenanceLogUncheckedCreateNestedManyWithoutEquipmentInputSchema).optional()
}).strict();

export const EquipmentCreateOrConnectWithoutRecipesInputSchema: z.ZodType<Prisma.EquipmentCreateOrConnectWithoutRecipesInput> = z.object({
  where: z.lazy(() => EquipmentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EquipmentCreateWithoutRecipesInputSchema),z.lazy(() => EquipmentUncheckedCreateWithoutRecipesInputSchema) ]),
}).strict();

export const RecipeInstructionCreateWithoutEquipmentInputSchema: z.ZodType<Prisma.RecipeInstructionCreateWithoutEquipmentInput> = z.object({
  stepNumber: z.number().int(),
  instruction: z.string(),
  imageUrl: z.string().optional().nullable(),
  timeInMinutes: z.number().int().optional().nullable(),
  temperature: z.number().optional().nullable(),
  temperatureUnit: z.string().optional().nullable(),
  isCritical: z.boolean().optional(),
  techniqueTips: z.string().optional().nullable(),
  warningNotes: z.string().optional().nullable(),
  recipe: z.lazy(() => RecipeCreateNestedOneWithoutInstructionsInputSchema),
  RecipeVersion: z.lazy(() => RecipeVersionCreateNestedOneWithoutInstructionsInputSchema).optional()
}).strict();

export const RecipeInstructionUncheckedCreateWithoutEquipmentInputSchema: z.ZodType<Prisma.RecipeInstructionUncheckedCreateWithoutEquipmentInput> = z.object({
  id: z.number().int().optional(),
  recipeId: z.number().int(),
  stepNumber: z.number().int(),
  instruction: z.string(),
  imageUrl: z.string().optional().nullable(),
  recipeVersionId: z.number().int().optional().nullable(),
  timeInMinutes: z.number().int().optional().nullable(),
  temperature: z.number().optional().nullable(),
  temperatureUnit: z.string().optional().nullable(),
  isCritical: z.boolean().optional(),
  techniqueTips: z.string().optional().nullable(),
  warningNotes: z.string().optional().nullable()
}).strict();

export const RecipeInstructionCreateOrConnectWithoutEquipmentInputSchema: z.ZodType<Prisma.RecipeInstructionCreateOrConnectWithoutEquipmentInput> = z.object({
  where: z.lazy(() => RecipeInstructionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RecipeInstructionCreateWithoutEquipmentInputSchema),z.lazy(() => RecipeInstructionUncheckedCreateWithoutEquipmentInputSchema) ]),
}).strict();

export const RecipeUpsertWithoutEquipmentsInputSchema: z.ZodType<Prisma.RecipeUpsertWithoutEquipmentsInput> = z.object({
  update: z.union([ z.lazy(() => RecipeUpdateWithoutEquipmentsInputSchema),z.lazy(() => RecipeUncheckedUpdateWithoutEquipmentsInputSchema) ]),
  create: z.union([ z.lazy(() => RecipeCreateWithoutEquipmentsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutEquipmentsInputSchema) ]),
  where: z.lazy(() => RecipeWhereInputSchema).optional()
}).strict();

export const RecipeUpdateToOneWithWhereWithoutEquipmentsInputSchema: z.ZodType<Prisma.RecipeUpdateToOneWithWhereWithoutEquipmentsInput> = z.object({
  where: z.lazy(() => RecipeWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RecipeUpdateWithoutEquipmentsInputSchema),z.lazy(() => RecipeUncheckedUpdateWithoutEquipmentsInputSchema) ]),
}).strict();

export const RecipeUpdateWithoutEquipmentsInputSchema: z.ZodType<Prisma.RecipeUpdateWithoutEquipmentsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrls: z.union([ z.lazy(() => RecipeUpdateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  servings: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isPublished: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  publishedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  skillLevel: z.union([ z.lazy(() => SkillLevelSchema),z.lazy(() => EnumSkillLevelFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => CategorySchema),z.lazy(() => EnumCategoryFieldUpdateOperationsInputSchema) ]).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  cookBook: z.lazy(() => CookBookUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  ingredients: z.lazy(() => RecipeIngredientUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUpdateManyWithoutRecipeNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUpdateManyWithoutRecipesNestedInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUpdateManyWithoutRecipeNestedInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUpdateManyWithoutRecipeNestedInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUpdateManyWithoutRecipeNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUpdateOneWithoutRecipeNestedInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUpdateManyWithoutRecipeNestedInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUpdateOneWithoutRecipeNestedInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUpdateManyWithoutRecipeNestedInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUpdateOneWithoutRecipeNestedInputSchema).optional()
}).strict();

export const RecipeUncheckedUpdateWithoutEquipmentsInputSchema: z.ZodType<Prisma.RecipeUncheckedUpdateWithoutEquipmentsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrls: z.union([ z.lazy(() => RecipeUpdateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  servings: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookBookId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isPublished: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  publishedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  skillLevel: z.union([ z.lazy(() => SkillLevelSchema),z.lazy(() => EnumSkillLevelFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => CategorySchema),z.lazy(() => EnumCategoryFieldUpdateOperationsInputSchema) ]).optional(),
  ingredients: z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional()
}).strict();

export const EquipmentUpsertWithoutRecipesInputSchema: z.ZodType<Prisma.EquipmentUpsertWithoutRecipesInput> = z.object({
  update: z.union([ z.lazy(() => EquipmentUpdateWithoutRecipesInputSchema),z.lazy(() => EquipmentUncheckedUpdateWithoutRecipesInputSchema) ]),
  create: z.union([ z.lazy(() => EquipmentCreateWithoutRecipesInputSchema),z.lazy(() => EquipmentUncheckedCreateWithoutRecipesInputSchema) ]),
  where: z.lazy(() => EquipmentWhereInputSchema).optional()
}).strict();

export const EquipmentUpdateToOneWithWhereWithoutRecipesInputSchema: z.ZodType<Prisma.EquipmentUpdateToOneWithWhereWithoutRecipesInput> = z.object({
  where: z.lazy(() => EquipmentWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => EquipmentUpdateWithoutRecipesInputSchema),z.lazy(() => EquipmentUncheckedUpdateWithoutRecipesInputSchema) ]),
}).strict();

export const EquipmentUpdateWithoutRecipesInputSchema: z.ZodType<Prisma.EquipmentUpdateWithoutRecipesInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serialNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  purchaseDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastMaintenance: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nextMaintenance: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => EquipmentStatusSchema),z.lazy(() => EnumEquipmentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneRequiredWithoutEquipmentsNestedInputSchema).optional(),
  maintenanceLogs: z.lazy(() => MaintenanceLogUpdateManyWithoutEquipmentNestedInputSchema).optional()
}).strict();

export const EquipmentUncheckedUpdateWithoutRecipesInputSchema: z.ZodType<Prisma.EquipmentUncheckedUpdateWithoutRecipesInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serialNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  purchaseDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastMaintenance: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nextMaintenance: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => EquipmentStatusSchema),z.lazy(() => EnumEquipmentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  maintenanceLogs: z.lazy(() => MaintenanceLogUncheckedUpdateManyWithoutEquipmentNestedInputSchema).optional()
}).strict();

export const RecipeInstructionUpsertWithoutEquipmentInputSchema: z.ZodType<Prisma.RecipeInstructionUpsertWithoutEquipmentInput> = z.object({
  update: z.union([ z.lazy(() => RecipeInstructionUpdateWithoutEquipmentInputSchema),z.lazy(() => RecipeInstructionUncheckedUpdateWithoutEquipmentInputSchema) ]),
  create: z.union([ z.lazy(() => RecipeInstructionCreateWithoutEquipmentInputSchema),z.lazy(() => RecipeInstructionUncheckedCreateWithoutEquipmentInputSchema) ]),
  where: z.lazy(() => RecipeInstructionWhereInputSchema).optional()
}).strict();

export const RecipeInstructionUpdateToOneWithWhereWithoutEquipmentInputSchema: z.ZodType<Prisma.RecipeInstructionUpdateToOneWithWhereWithoutEquipmentInput> = z.object({
  where: z.lazy(() => RecipeInstructionWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RecipeInstructionUpdateWithoutEquipmentInputSchema),z.lazy(() => RecipeInstructionUncheckedUpdateWithoutEquipmentInputSchema) ]),
}).strict();

export const RecipeInstructionUpdateWithoutEquipmentInputSchema: z.ZodType<Prisma.RecipeInstructionUpdateWithoutEquipmentInput> = z.object({
  stepNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  instruction: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timeInMinutes: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  temperature: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  temperatureUnit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isCritical: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  techniqueTips: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  warningNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recipe: z.lazy(() => RecipeUpdateOneRequiredWithoutInstructionsNestedInputSchema).optional(),
  RecipeVersion: z.lazy(() => RecipeVersionUpdateOneWithoutInstructionsNestedInputSchema).optional()
}).strict();

export const RecipeInstructionUncheckedUpdateWithoutEquipmentInputSchema: z.ZodType<Prisma.RecipeInstructionUncheckedUpdateWithoutEquipmentInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  stepNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  instruction: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recipeVersionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timeInMinutes: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  temperature: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  temperatureUnit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isCritical: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  techniqueTips: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  warningNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const EquipmentCreateWithoutMaintenanceLogsInputSchema: z.ZodType<Prisma.EquipmentCreateWithoutMaintenanceLogsInput> = z.object({
  name: z.string(),
  description: z.string().optional().nullable(),
  model: z.string().optional().nullable(),
  serialNumber: z.string().optional().nullable(),
  purchaseDate: z.coerce.date().optional().nullable(),
  lastMaintenance: z.coerce.date().optional().nullable(),
  nextMaintenance: z.coerce.date().optional().nullable(),
  status: z.lazy(() => EquipmentStatusSchema).optional(),
  location: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutEquipmentsInputSchema),
  recipes: z.lazy(() => RecipeEquipmentCreateNestedManyWithoutEquipmentInputSchema).optional()
}).strict();

export const EquipmentUncheckedCreateWithoutMaintenanceLogsInputSchema: z.ZodType<Prisma.EquipmentUncheckedCreateWithoutMaintenanceLogsInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  model: z.string().optional().nullable(),
  serialNumber: z.string().optional().nullable(),
  purchaseDate: z.coerce.date().optional().nullable(),
  lastMaintenance: z.coerce.date().optional().nullable(),
  nextMaintenance: z.coerce.date().optional().nullable(),
  status: z.lazy(() => EquipmentStatusSchema).optional(),
  location: z.string().optional().nullable(),
  restaurantId: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  recipes: z.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutEquipmentInputSchema).optional()
}).strict();

export const EquipmentCreateOrConnectWithoutMaintenanceLogsInputSchema: z.ZodType<Prisma.EquipmentCreateOrConnectWithoutMaintenanceLogsInput> = z.object({
  where: z.lazy(() => EquipmentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EquipmentCreateWithoutMaintenanceLogsInputSchema),z.lazy(() => EquipmentUncheckedCreateWithoutMaintenanceLogsInputSchema) ]),
}).strict();

export const EquipmentUpsertWithoutMaintenanceLogsInputSchema: z.ZodType<Prisma.EquipmentUpsertWithoutMaintenanceLogsInput> = z.object({
  update: z.union([ z.lazy(() => EquipmentUpdateWithoutMaintenanceLogsInputSchema),z.lazy(() => EquipmentUncheckedUpdateWithoutMaintenanceLogsInputSchema) ]),
  create: z.union([ z.lazy(() => EquipmentCreateWithoutMaintenanceLogsInputSchema),z.lazy(() => EquipmentUncheckedCreateWithoutMaintenanceLogsInputSchema) ]),
  where: z.lazy(() => EquipmentWhereInputSchema).optional()
}).strict();

export const EquipmentUpdateToOneWithWhereWithoutMaintenanceLogsInputSchema: z.ZodType<Prisma.EquipmentUpdateToOneWithWhereWithoutMaintenanceLogsInput> = z.object({
  where: z.lazy(() => EquipmentWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => EquipmentUpdateWithoutMaintenanceLogsInputSchema),z.lazy(() => EquipmentUncheckedUpdateWithoutMaintenanceLogsInputSchema) ]),
}).strict();

export const EquipmentUpdateWithoutMaintenanceLogsInputSchema: z.ZodType<Prisma.EquipmentUpdateWithoutMaintenanceLogsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serialNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  purchaseDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastMaintenance: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nextMaintenance: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => EquipmentStatusSchema),z.lazy(() => EnumEquipmentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneRequiredWithoutEquipmentsNestedInputSchema).optional(),
  recipes: z.lazy(() => RecipeEquipmentUpdateManyWithoutEquipmentNestedInputSchema).optional()
}).strict();

export const EquipmentUncheckedUpdateWithoutMaintenanceLogsInputSchema: z.ZodType<Prisma.EquipmentUncheckedUpdateWithoutMaintenanceLogsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serialNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  purchaseDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastMaintenance: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nextMaintenance: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => EquipmentStatusSchema),z.lazy(() => EnumEquipmentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  recipes: z.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutEquipmentNestedInputSchema).optional()
}).strict();

export const RestaurantCreateWithoutQualityChecklistsInputSchema: z.ZodType<Prisma.RestaurantCreateWithoutQualityChecklistsInput> = z.object({
  name: z.string(),
  imageUrl: z.string().optional().nullable(),
  address: z.string(),
  city: z.string(),
  zipCode: z.string(),
  state: z.string(),
  owner: z.string(),
  foodCost: z.number().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  isDeleted: z.boolean().optional(),
  deleted: z.coerce.date().optional().nullable(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutRestaurantsInputSchema).optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: z.lazy(() => CookBookCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: z.lazy(() => InventoryCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: z.lazy(() => OrderCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: z.lazy(() => RecipeCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: z.lazy(() => MenuCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipments: z.lazy(() => EquipmentCreateNestedManyWithoutRestaurantInputSchema).optional(),
  customerFeedbacks: z.lazy(() => CustomerFeedbackCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();

export const RestaurantUncheckedCreateWithoutQualityChecklistsInputSchema: z.ZodType<Prisma.RestaurantUncheckedCreateWithoutQualityChecklistsInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  imageUrl: z.string().optional().nullable(),
  address: z.string(),
  city: z.string(),
  zipCode: z.string(),
  state: z.string(),
  owner: z.string(),
  organizationId: z.number().int().optional().nullable(),
  foodCost: z.number().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  isDeleted: z.boolean().optional(),
  deleted: z.coerce.date().optional().nullable(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: z.lazy(() => CookBookUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: z.lazy(() => InventoryUncheckedCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: z.lazy(() => OrderUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: z.lazy(() => RecipeUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: z.lazy(() => MenuUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipments: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  customerFeedbacks: z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();

export const RestaurantCreateOrConnectWithoutQualityChecklistsInputSchema: z.ZodType<Prisma.RestaurantCreateOrConnectWithoutQualityChecklistsInput> = z.object({
  where: z.lazy(() => RestaurantWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RestaurantCreateWithoutQualityChecklistsInputSchema),z.lazy(() => RestaurantUncheckedCreateWithoutQualityChecklistsInputSchema) ]),
}).strict();

export const ChecklistItemCreateWithoutChecklistInputSchema: z.ZodType<Prisma.ChecklistItemCreateWithoutChecklistInput> = z.object({
  description: z.string(),
  order: z.number().int(),
  type: z.lazy(() => ChecklistItemTypeSchema),
  requiredPhotos: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  completions: z.lazy(() => ChecklistItemCompleteCreateNestedManyWithoutChecklistItemInputSchema).optional()
}).strict();

export const ChecklistItemUncheckedCreateWithoutChecklistInputSchema: z.ZodType<Prisma.ChecklistItemUncheckedCreateWithoutChecklistInput> = z.object({
  id: z.number().int().optional(),
  description: z.string(),
  order: z.number().int(),
  type: z.lazy(() => ChecklistItemTypeSchema),
  requiredPhotos: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  completions: z.lazy(() => ChecklistItemCompleteUncheckedCreateNestedManyWithoutChecklistItemInputSchema).optional()
}).strict();

export const ChecklistItemCreateOrConnectWithoutChecklistInputSchema: z.ZodType<Prisma.ChecklistItemCreateOrConnectWithoutChecklistInput> = z.object({
  where: z.lazy(() => ChecklistItemWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ChecklistItemCreateWithoutChecklistInputSchema),z.lazy(() => ChecklistItemUncheckedCreateWithoutChecklistInputSchema) ]),
}).strict();

export const ChecklistItemCreateManyChecklistInputEnvelopeSchema: z.ZodType<Prisma.ChecklistItemCreateManyChecklistInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ChecklistItemCreateManyChecklistInputSchema),z.lazy(() => ChecklistItemCreateManyChecklistInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ChecklistCompleteCreateWithoutChecklistInputSchema: z.ZodType<Prisma.ChecklistCompleteCreateWithoutChecklistInput> = z.object({
  date: z.coerce.date(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  completedBy: z.lazy(() => UserCreateNestedOneWithoutChecklistCompletesInputSchema),
  items: z.lazy(() => ChecklistItemCompleteCreateNestedManyWithoutChecklistCompleteInputSchema).optional()
}).strict();

export const ChecklistCompleteUncheckedCreateWithoutChecklistInputSchema: z.ZodType<Prisma.ChecklistCompleteUncheckedCreateWithoutChecklistInput> = z.object({
  id: z.number().int().optional(),
  completedById: z.number().int(),
  date: z.coerce.date(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  items: z.lazy(() => ChecklistItemCompleteUncheckedCreateNestedManyWithoutChecklistCompleteInputSchema).optional()
}).strict();

export const ChecklistCompleteCreateOrConnectWithoutChecklistInputSchema: z.ZodType<Prisma.ChecklistCompleteCreateOrConnectWithoutChecklistInput> = z.object({
  where: z.lazy(() => ChecklistCompleteWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ChecklistCompleteCreateWithoutChecklistInputSchema),z.lazy(() => ChecklistCompleteUncheckedCreateWithoutChecklistInputSchema) ]),
}).strict();

export const ChecklistCompleteCreateManyChecklistInputEnvelopeSchema: z.ZodType<Prisma.ChecklistCompleteCreateManyChecklistInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ChecklistCompleteCreateManyChecklistInputSchema),z.lazy(() => ChecklistCompleteCreateManyChecklistInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const RestaurantUpsertWithoutQualityChecklistsInputSchema: z.ZodType<Prisma.RestaurantUpsertWithoutQualityChecklistsInput> = z.object({
  update: z.union([ z.lazy(() => RestaurantUpdateWithoutQualityChecklistsInputSchema),z.lazy(() => RestaurantUncheckedUpdateWithoutQualityChecklistsInputSchema) ]),
  create: z.union([ z.lazy(() => RestaurantCreateWithoutQualityChecklistsInputSchema),z.lazy(() => RestaurantUncheckedCreateWithoutQualityChecklistsInputSchema) ]),
  where: z.lazy(() => RestaurantWhereInputSchema).optional()
}).strict();

export const RestaurantUpdateToOneWithWhereWithoutQualityChecklistsInputSchema: z.ZodType<Prisma.RestaurantUpdateToOneWithWhereWithoutQualityChecklistsInput> = z.object({
  where: z.lazy(() => RestaurantWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RestaurantUpdateWithoutQualityChecklistsInputSchema),z.lazy(() => RestaurantUncheckedUpdateWithoutQualityChecklistsInputSchema) ]),
}).strict();

export const RestaurantUpdateWithoutQualityChecklistsInputSchema: z.ZodType<Prisma.RestaurantUpdateWithoutQualityChecklistsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zipCode: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  owner: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deleted: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organization: z.lazy(() => OrganizationUpdateOneWithoutRestaurantsNestedInputSchema).optional(),
  users: z.lazy(() => UserUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: z.lazy(() => CookBookUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: z.lazy(() => InventoryUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: z.lazy(() => OrderUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: z.lazy(() => RecipeUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: z.lazy(() => MenuUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipments: z.lazy(() => EquipmentUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  customerFeedbacks: z.lazy(() => CustomerFeedbackUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();

export const RestaurantUncheckedUpdateWithoutQualityChecklistsInputSchema: z.ZodType<Prisma.RestaurantUncheckedUpdateWithoutQualityChecklistsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zipCode: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  owner: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deleted: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: z.lazy(() => CookBookUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: z.lazy(() => InventoryUncheckedUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: z.lazy(() => OrderUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: z.lazy(() => RecipeUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: z.lazy(() => MenuUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipments: z.lazy(() => EquipmentUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  customerFeedbacks: z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();

export const ChecklistItemUpsertWithWhereUniqueWithoutChecklistInputSchema: z.ZodType<Prisma.ChecklistItemUpsertWithWhereUniqueWithoutChecklistInput> = z.object({
  where: z.lazy(() => ChecklistItemWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ChecklistItemUpdateWithoutChecklistInputSchema),z.lazy(() => ChecklistItemUncheckedUpdateWithoutChecklistInputSchema) ]),
  create: z.union([ z.lazy(() => ChecklistItemCreateWithoutChecklistInputSchema),z.lazy(() => ChecklistItemUncheckedCreateWithoutChecklistInputSchema) ]),
}).strict();

export const ChecklistItemUpdateWithWhereUniqueWithoutChecklistInputSchema: z.ZodType<Prisma.ChecklistItemUpdateWithWhereUniqueWithoutChecklistInput> = z.object({
  where: z.lazy(() => ChecklistItemWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ChecklistItemUpdateWithoutChecklistInputSchema),z.lazy(() => ChecklistItemUncheckedUpdateWithoutChecklistInputSchema) ]),
}).strict();

export const ChecklistItemUpdateManyWithWhereWithoutChecklistInputSchema: z.ZodType<Prisma.ChecklistItemUpdateManyWithWhereWithoutChecklistInput> = z.object({
  where: z.lazy(() => ChecklistItemScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ChecklistItemUpdateManyMutationInputSchema),z.lazy(() => ChecklistItemUncheckedUpdateManyWithoutChecklistInputSchema) ]),
}).strict();

export const ChecklistItemScalarWhereInputSchema: z.ZodType<Prisma.ChecklistItemScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ChecklistItemScalarWhereInputSchema),z.lazy(() => ChecklistItemScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ChecklistItemScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ChecklistItemScalarWhereInputSchema),z.lazy(() => ChecklistItemScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  checklistId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  description: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  order: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  type: z.union([ z.lazy(() => EnumChecklistItemTypeFilterSchema),z.lazy(() => ChecklistItemTypeSchema) ]).optional(),
  requiredPhotos: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ChecklistCompleteUpsertWithWhereUniqueWithoutChecklistInputSchema: z.ZodType<Prisma.ChecklistCompleteUpsertWithWhereUniqueWithoutChecklistInput> = z.object({
  where: z.lazy(() => ChecklistCompleteWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ChecklistCompleteUpdateWithoutChecklistInputSchema),z.lazy(() => ChecklistCompleteUncheckedUpdateWithoutChecklistInputSchema) ]),
  create: z.union([ z.lazy(() => ChecklistCompleteCreateWithoutChecklistInputSchema),z.lazy(() => ChecklistCompleteUncheckedCreateWithoutChecklistInputSchema) ]),
}).strict();

export const ChecklistCompleteUpdateWithWhereUniqueWithoutChecklistInputSchema: z.ZodType<Prisma.ChecklistCompleteUpdateWithWhereUniqueWithoutChecklistInput> = z.object({
  where: z.lazy(() => ChecklistCompleteWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ChecklistCompleteUpdateWithoutChecklistInputSchema),z.lazy(() => ChecklistCompleteUncheckedUpdateWithoutChecklistInputSchema) ]),
}).strict();

export const ChecklistCompleteUpdateManyWithWhereWithoutChecklistInputSchema: z.ZodType<Prisma.ChecklistCompleteUpdateManyWithWhereWithoutChecklistInput> = z.object({
  where: z.lazy(() => ChecklistCompleteScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ChecklistCompleteUpdateManyMutationInputSchema),z.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutChecklistInputSchema) ]),
}).strict();

export const ChecklistCompleteScalarWhereInputSchema: z.ZodType<Prisma.ChecklistCompleteScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ChecklistCompleteScalarWhereInputSchema),z.lazy(() => ChecklistCompleteScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ChecklistCompleteScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ChecklistCompleteScalarWhereInputSchema),z.lazy(() => ChecklistCompleteScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  checklistId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  completedById: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const QualityChecklistCreateWithoutItemsInputSchema: z.ZodType<Prisma.QualityChecklistCreateWithoutItemsInput> = z.object({
  name: z.string(),
  description: z.string().optional().nullable(),
  frequency: z.lazy(() => ChecklistFrequencySchema).optional(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutQualityChecklistsInputSchema),
  completions: z.lazy(() => ChecklistCompleteCreateNestedManyWithoutChecklistInputSchema).optional()
}).strict();

export const QualityChecklistUncheckedCreateWithoutItemsInputSchema: z.ZodType<Prisma.QualityChecklistUncheckedCreateWithoutItemsInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  restaurantId: z.number().int(),
  frequency: z.lazy(() => ChecklistFrequencySchema).optional(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  completions: z.lazy(() => ChecklistCompleteUncheckedCreateNestedManyWithoutChecklistInputSchema).optional()
}).strict();

export const QualityChecklistCreateOrConnectWithoutItemsInputSchema: z.ZodType<Prisma.QualityChecklistCreateOrConnectWithoutItemsInput> = z.object({
  where: z.lazy(() => QualityChecklistWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => QualityChecklistCreateWithoutItemsInputSchema),z.lazy(() => QualityChecklistUncheckedCreateWithoutItemsInputSchema) ]),
}).strict();

export const ChecklistItemCompleteCreateWithoutChecklistItemInputSchema: z.ZodType<Prisma.ChecklistItemCompleteCreateWithoutChecklistItemInput> = z.object({
  status: z.lazy(() => ChecklistStatusSchema),
  notes: z.string().optional().nullable(),
  photoUrls: z.union([ z.lazy(() => ChecklistItemCompleteCreatephotoUrlsInputSchema),z.string().array() ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  checklistComplete: z.lazy(() => ChecklistCompleteCreateNestedOneWithoutItemsInputSchema)
}).strict();

export const ChecklistItemCompleteUncheckedCreateWithoutChecklistItemInputSchema: z.ZodType<Prisma.ChecklistItemCompleteUncheckedCreateWithoutChecklistItemInput> = z.object({
  id: z.number().int().optional(),
  checklistCompleteId: z.number().int(),
  status: z.lazy(() => ChecklistStatusSchema),
  notes: z.string().optional().nullable(),
  photoUrls: z.union([ z.lazy(() => ChecklistItemCompleteCreatephotoUrlsInputSchema),z.string().array() ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ChecklistItemCompleteCreateOrConnectWithoutChecklistItemInputSchema: z.ZodType<Prisma.ChecklistItemCompleteCreateOrConnectWithoutChecklistItemInput> = z.object({
  where: z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ChecklistItemCompleteCreateWithoutChecklistItemInputSchema),z.lazy(() => ChecklistItemCompleteUncheckedCreateWithoutChecklistItemInputSchema) ]),
}).strict();

export const ChecklistItemCompleteCreateManyChecklistItemInputEnvelopeSchema: z.ZodType<Prisma.ChecklistItemCompleteCreateManyChecklistItemInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ChecklistItemCompleteCreateManyChecklistItemInputSchema),z.lazy(() => ChecklistItemCompleteCreateManyChecklistItemInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const QualityChecklistUpsertWithoutItemsInputSchema: z.ZodType<Prisma.QualityChecklistUpsertWithoutItemsInput> = z.object({
  update: z.union([ z.lazy(() => QualityChecklistUpdateWithoutItemsInputSchema),z.lazy(() => QualityChecklistUncheckedUpdateWithoutItemsInputSchema) ]),
  create: z.union([ z.lazy(() => QualityChecklistCreateWithoutItemsInputSchema),z.lazy(() => QualityChecklistUncheckedCreateWithoutItemsInputSchema) ]),
  where: z.lazy(() => QualityChecklistWhereInputSchema).optional()
}).strict();

export const QualityChecklistUpdateToOneWithWhereWithoutItemsInputSchema: z.ZodType<Prisma.QualityChecklistUpdateToOneWithWhereWithoutItemsInput> = z.object({
  where: z.lazy(() => QualityChecklistWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => QualityChecklistUpdateWithoutItemsInputSchema),z.lazy(() => QualityChecklistUncheckedUpdateWithoutItemsInputSchema) ]),
}).strict();

export const QualityChecklistUpdateWithoutItemsInputSchema: z.ZodType<Prisma.QualityChecklistUpdateWithoutItemsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  frequency: z.union([ z.lazy(() => ChecklistFrequencySchema),z.lazy(() => EnumChecklistFrequencyFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneRequiredWithoutQualityChecklistsNestedInputSchema).optional(),
  completions: z.lazy(() => ChecklistCompleteUpdateManyWithoutChecklistNestedInputSchema).optional()
}).strict();

export const QualityChecklistUncheckedUpdateWithoutItemsInputSchema: z.ZodType<Prisma.QualityChecklistUncheckedUpdateWithoutItemsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.lazy(() => ChecklistFrequencySchema),z.lazy(() => EnumChecklistFrequencyFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  completions: z.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutChecklistNestedInputSchema).optional()
}).strict();

export const ChecklistItemCompleteUpsertWithWhereUniqueWithoutChecklistItemInputSchema: z.ZodType<Prisma.ChecklistItemCompleteUpsertWithWhereUniqueWithoutChecklistItemInput> = z.object({
  where: z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ChecklistItemCompleteUpdateWithoutChecklistItemInputSchema),z.lazy(() => ChecklistItemCompleteUncheckedUpdateWithoutChecklistItemInputSchema) ]),
  create: z.union([ z.lazy(() => ChecklistItemCompleteCreateWithoutChecklistItemInputSchema),z.lazy(() => ChecklistItemCompleteUncheckedCreateWithoutChecklistItemInputSchema) ]),
}).strict();

export const ChecklistItemCompleteUpdateWithWhereUniqueWithoutChecklistItemInputSchema: z.ZodType<Prisma.ChecklistItemCompleteUpdateWithWhereUniqueWithoutChecklistItemInput> = z.object({
  where: z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ChecklistItemCompleteUpdateWithoutChecklistItemInputSchema),z.lazy(() => ChecklistItemCompleteUncheckedUpdateWithoutChecklistItemInputSchema) ]),
}).strict();

export const ChecklistItemCompleteUpdateManyWithWhereWithoutChecklistItemInputSchema: z.ZodType<Prisma.ChecklistItemCompleteUpdateManyWithWhereWithoutChecklistItemInput> = z.object({
  where: z.lazy(() => ChecklistItemCompleteScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ChecklistItemCompleteUpdateManyMutationInputSchema),z.lazy(() => ChecklistItemCompleteUncheckedUpdateManyWithoutChecklistItemInputSchema) ]),
}).strict();

export const ChecklistItemCompleteScalarWhereInputSchema: z.ZodType<Prisma.ChecklistItemCompleteScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ChecklistItemCompleteScalarWhereInputSchema),z.lazy(() => ChecklistItemCompleteScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ChecklistItemCompleteScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ChecklistItemCompleteScalarWhereInputSchema),z.lazy(() => ChecklistItemCompleteScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  checklistCompleteId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  checklistItemId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  status: z.union([ z.lazy(() => EnumChecklistStatusFilterSchema),z.lazy(() => ChecklistStatusSchema) ]).optional(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  photoUrls: z.lazy(() => StringNullableListFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const QualityChecklistCreateWithoutCompletionsInputSchema: z.ZodType<Prisma.QualityChecklistCreateWithoutCompletionsInput> = z.object({
  name: z.string(),
  description: z.string().optional().nullable(),
  frequency: z.lazy(() => ChecklistFrequencySchema).optional(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutQualityChecklistsInputSchema),
  items: z.lazy(() => ChecklistItemCreateNestedManyWithoutChecklistInputSchema).optional()
}).strict();

export const QualityChecklistUncheckedCreateWithoutCompletionsInputSchema: z.ZodType<Prisma.QualityChecklistUncheckedCreateWithoutCompletionsInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  restaurantId: z.number().int(),
  frequency: z.lazy(() => ChecklistFrequencySchema).optional(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  items: z.lazy(() => ChecklistItemUncheckedCreateNestedManyWithoutChecklistInputSchema).optional()
}).strict();

export const QualityChecklistCreateOrConnectWithoutCompletionsInputSchema: z.ZodType<Prisma.QualityChecklistCreateOrConnectWithoutCompletionsInput> = z.object({
  where: z.lazy(() => QualityChecklistWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => QualityChecklistCreateWithoutCompletionsInputSchema),z.lazy(() => QualityChecklistUncheckedCreateWithoutCompletionsInputSchema) ]),
}).strict();

export const UserCreateWithoutChecklistCompletesInputSchema: z.ZodType<Prisma.UserCreateWithoutChecklistCompletesInput> = z.object({
  email: z.string(),
  sub: z.number().int().optional().nullable(),
  passwordHash: z.string(),
  firstName: z.string(),
  lastName: z.string(),
  profileImage: z.string().optional().nullable(),
  verified: z.boolean().optional(),
  role: z.lazy(() => UserRoleSchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema).optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutUsersInputSchema).optional(),
  shifts: z.lazy(() => ShiftCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z.lazy(() => AvailabilityCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutCreatedByInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionCreateNestedManyWithoutApprovedByInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountCreateNestedManyWithoutCreatedByInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutChecklistCompletesInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutChecklistCompletesInput> = z.object({
  id: z.number().int().optional(),
  email: z.string(),
  sub: z.number().int().optional().nullable(),
  passwordHash: z.string(),
  firstName: z.string(),
  lastName: z.string(),
  profileImage: z.string().optional().nullable(),
  verified: z.boolean().optional(),
  role: z.lazy(() => UserRoleSchema),
  organizationId: z.number().int().optional().nullable(),
  restaurantId: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  shifts: z.lazy(() => ShiftUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutApprovedByInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutChecklistCompletesInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutChecklistCompletesInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutChecklistCompletesInputSchema),z.lazy(() => UserUncheckedCreateWithoutChecklistCompletesInputSchema) ]),
}).strict();

export const ChecklistItemCompleteCreateWithoutChecklistCompleteInputSchema: z.ZodType<Prisma.ChecklistItemCompleteCreateWithoutChecklistCompleteInput> = z.object({
  status: z.lazy(() => ChecklistStatusSchema),
  notes: z.string().optional().nullable(),
  photoUrls: z.union([ z.lazy(() => ChecklistItemCompleteCreatephotoUrlsInputSchema),z.string().array() ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  checklistItem: z.lazy(() => ChecklistItemCreateNestedOneWithoutCompletionsInputSchema)
}).strict();

export const ChecklistItemCompleteUncheckedCreateWithoutChecklistCompleteInputSchema: z.ZodType<Prisma.ChecklistItemCompleteUncheckedCreateWithoutChecklistCompleteInput> = z.object({
  id: z.number().int().optional(),
  checklistItemId: z.number().int(),
  status: z.lazy(() => ChecklistStatusSchema),
  notes: z.string().optional().nullable(),
  photoUrls: z.union([ z.lazy(() => ChecklistItemCompleteCreatephotoUrlsInputSchema),z.string().array() ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ChecklistItemCompleteCreateOrConnectWithoutChecklistCompleteInputSchema: z.ZodType<Prisma.ChecklistItemCompleteCreateOrConnectWithoutChecklistCompleteInput> = z.object({
  where: z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ChecklistItemCompleteCreateWithoutChecklistCompleteInputSchema),z.lazy(() => ChecklistItemCompleteUncheckedCreateWithoutChecklistCompleteInputSchema) ]),
}).strict();

export const ChecklistItemCompleteCreateManyChecklistCompleteInputEnvelopeSchema: z.ZodType<Prisma.ChecklistItemCompleteCreateManyChecklistCompleteInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ChecklistItemCompleteCreateManyChecklistCompleteInputSchema),z.lazy(() => ChecklistItemCompleteCreateManyChecklistCompleteInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const QualityChecklistUpsertWithoutCompletionsInputSchema: z.ZodType<Prisma.QualityChecklistUpsertWithoutCompletionsInput> = z.object({
  update: z.union([ z.lazy(() => QualityChecklistUpdateWithoutCompletionsInputSchema),z.lazy(() => QualityChecklistUncheckedUpdateWithoutCompletionsInputSchema) ]),
  create: z.union([ z.lazy(() => QualityChecklistCreateWithoutCompletionsInputSchema),z.lazy(() => QualityChecklistUncheckedCreateWithoutCompletionsInputSchema) ]),
  where: z.lazy(() => QualityChecklistWhereInputSchema).optional()
}).strict();

export const QualityChecklistUpdateToOneWithWhereWithoutCompletionsInputSchema: z.ZodType<Prisma.QualityChecklistUpdateToOneWithWhereWithoutCompletionsInput> = z.object({
  where: z.lazy(() => QualityChecklistWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => QualityChecklistUpdateWithoutCompletionsInputSchema),z.lazy(() => QualityChecklistUncheckedUpdateWithoutCompletionsInputSchema) ]),
}).strict();

export const QualityChecklistUpdateWithoutCompletionsInputSchema: z.ZodType<Prisma.QualityChecklistUpdateWithoutCompletionsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  frequency: z.union([ z.lazy(() => ChecklistFrequencySchema),z.lazy(() => EnumChecklistFrequencyFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneRequiredWithoutQualityChecklistsNestedInputSchema).optional(),
  items: z.lazy(() => ChecklistItemUpdateManyWithoutChecklistNestedInputSchema).optional()
}).strict();

export const QualityChecklistUncheckedUpdateWithoutCompletionsInputSchema: z.ZodType<Prisma.QualityChecklistUncheckedUpdateWithoutCompletionsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.lazy(() => ChecklistFrequencySchema),z.lazy(() => EnumChecklistFrequencyFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  items: z.lazy(() => ChecklistItemUncheckedUpdateManyWithoutChecklistNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutChecklistCompletesInputSchema: z.ZodType<Prisma.UserUpsertWithoutChecklistCompletesInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutChecklistCompletesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutChecklistCompletesInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutChecklistCompletesInputSchema),z.lazy(() => UserUncheckedCreateWithoutChecklistCompletesInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutChecklistCompletesInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutChecklistCompletesInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutChecklistCompletesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutChecklistCompletesInputSchema) ]),
}).strict();

export const UserUpdateWithoutChecklistCompletesInputSchema: z.ZodType<Prisma.UserUpdateWithoutChecklistCompletesInput> = z.object({
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sub: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passwordHash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  verified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneWithoutUsersNestedInputSchema).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneWithoutUsersNestedInputSchema).optional(),
  shifts: z.lazy(() => ShiftUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionUpdateManyWithoutApprovedByNestedInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountUpdateManyWithoutCreatedByNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutChecklistCompletesInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutChecklistCompletesInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sub: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passwordHash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  verified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  shifts: z.lazy(() => ShiftUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemUncheckedUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutApprovedByNestedInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional()
}).strict();

export const ChecklistItemCompleteUpsertWithWhereUniqueWithoutChecklistCompleteInputSchema: z.ZodType<Prisma.ChecklistItemCompleteUpsertWithWhereUniqueWithoutChecklistCompleteInput> = z.object({
  where: z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ChecklistItemCompleteUpdateWithoutChecklistCompleteInputSchema),z.lazy(() => ChecklistItemCompleteUncheckedUpdateWithoutChecklistCompleteInputSchema) ]),
  create: z.union([ z.lazy(() => ChecklistItemCompleteCreateWithoutChecklistCompleteInputSchema),z.lazy(() => ChecklistItemCompleteUncheckedCreateWithoutChecklistCompleteInputSchema) ]),
}).strict();

export const ChecklistItemCompleteUpdateWithWhereUniqueWithoutChecklistCompleteInputSchema: z.ZodType<Prisma.ChecklistItemCompleteUpdateWithWhereUniqueWithoutChecklistCompleteInput> = z.object({
  where: z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ChecklistItemCompleteUpdateWithoutChecklistCompleteInputSchema),z.lazy(() => ChecklistItemCompleteUncheckedUpdateWithoutChecklistCompleteInputSchema) ]),
}).strict();

export const ChecklistItemCompleteUpdateManyWithWhereWithoutChecklistCompleteInputSchema: z.ZodType<Prisma.ChecklistItemCompleteUpdateManyWithWhereWithoutChecklistCompleteInput> = z.object({
  where: z.lazy(() => ChecklistItemCompleteScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ChecklistItemCompleteUpdateManyMutationInputSchema),z.lazy(() => ChecklistItemCompleteUncheckedUpdateManyWithoutChecklistCompleteInputSchema) ]),
}).strict();

export const ChecklistCompleteCreateWithoutItemsInputSchema: z.ZodType<Prisma.ChecklistCompleteCreateWithoutItemsInput> = z.object({
  date: z.coerce.date(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  checklist: z.lazy(() => QualityChecklistCreateNestedOneWithoutCompletionsInputSchema),
  completedBy: z.lazy(() => UserCreateNestedOneWithoutChecklistCompletesInputSchema)
}).strict();

export const ChecklistCompleteUncheckedCreateWithoutItemsInputSchema: z.ZodType<Prisma.ChecklistCompleteUncheckedCreateWithoutItemsInput> = z.object({
  id: z.number().int().optional(),
  checklistId: z.number().int(),
  completedById: z.number().int(),
  date: z.coerce.date(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ChecklistCompleteCreateOrConnectWithoutItemsInputSchema: z.ZodType<Prisma.ChecklistCompleteCreateOrConnectWithoutItemsInput> = z.object({
  where: z.lazy(() => ChecklistCompleteWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ChecklistCompleteCreateWithoutItemsInputSchema),z.lazy(() => ChecklistCompleteUncheckedCreateWithoutItemsInputSchema) ]),
}).strict();

export const ChecklistItemCreateWithoutCompletionsInputSchema: z.ZodType<Prisma.ChecklistItemCreateWithoutCompletionsInput> = z.object({
  description: z.string(),
  order: z.number().int(),
  type: z.lazy(() => ChecklistItemTypeSchema),
  requiredPhotos: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  checklist: z.lazy(() => QualityChecklistCreateNestedOneWithoutItemsInputSchema)
}).strict();

export const ChecklistItemUncheckedCreateWithoutCompletionsInputSchema: z.ZodType<Prisma.ChecklistItemUncheckedCreateWithoutCompletionsInput> = z.object({
  id: z.number().int().optional(),
  checklistId: z.number().int(),
  description: z.string(),
  order: z.number().int(),
  type: z.lazy(() => ChecklistItemTypeSchema),
  requiredPhotos: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ChecklistItemCreateOrConnectWithoutCompletionsInputSchema: z.ZodType<Prisma.ChecklistItemCreateOrConnectWithoutCompletionsInput> = z.object({
  where: z.lazy(() => ChecklistItemWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ChecklistItemCreateWithoutCompletionsInputSchema),z.lazy(() => ChecklistItemUncheckedCreateWithoutCompletionsInputSchema) ]),
}).strict();

export const ChecklistCompleteUpsertWithoutItemsInputSchema: z.ZodType<Prisma.ChecklistCompleteUpsertWithoutItemsInput> = z.object({
  update: z.union([ z.lazy(() => ChecklistCompleteUpdateWithoutItemsInputSchema),z.lazy(() => ChecklistCompleteUncheckedUpdateWithoutItemsInputSchema) ]),
  create: z.union([ z.lazy(() => ChecklistCompleteCreateWithoutItemsInputSchema),z.lazy(() => ChecklistCompleteUncheckedCreateWithoutItemsInputSchema) ]),
  where: z.lazy(() => ChecklistCompleteWhereInputSchema).optional()
}).strict();

export const ChecklistCompleteUpdateToOneWithWhereWithoutItemsInputSchema: z.ZodType<Prisma.ChecklistCompleteUpdateToOneWithWhereWithoutItemsInput> = z.object({
  where: z.lazy(() => ChecklistCompleteWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ChecklistCompleteUpdateWithoutItemsInputSchema),z.lazy(() => ChecklistCompleteUncheckedUpdateWithoutItemsInputSchema) ]),
}).strict();

export const ChecklistCompleteUpdateWithoutItemsInputSchema: z.ZodType<Prisma.ChecklistCompleteUpdateWithoutItemsInput> = z.object({
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  checklist: z.lazy(() => QualityChecklistUpdateOneRequiredWithoutCompletionsNestedInputSchema).optional(),
  completedBy: z.lazy(() => UserUpdateOneRequiredWithoutChecklistCompletesNestedInputSchema).optional()
}).strict();

export const ChecklistCompleteUncheckedUpdateWithoutItemsInputSchema: z.ZodType<Prisma.ChecklistCompleteUncheckedUpdateWithoutItemsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  checklistId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  completedById: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ChecklistItemUpsertWithoutCompletionsInputSchema: z.ZodType<Prisma.ChecklistItemUpsertWithoutCompletionsInput> = z.object({
  update: z.union([ z.lazy(() => ChecklistItemUpdateWithoutCompletionsInputSchema),z.lazy(() => ChecklistItemUncheckedUpdateWithoutCompletionsInputSchema) ]),
  create: z.union([ z.lazy(() => ChecklistItemCreateWithoutCompletionsInputSchema),z.lazy(() => ChecklistItemUncheckedCreateWithoutCompletionsInputSchema) ]),
  where: z.lazy(() => ChecklistItemWhereInputSchema).optional()
}).strict();

export const ChecklistItemUpdateToOneWithWhereWithoutCompletionsInputSchema: z.ZodType<Prisma.ChecklistItemUpdateToOneWithWhereWithoutCompletionsInput> = z.object({
  where: z.lazy(() => ChecklistItemWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ChecklistItemUpdateWithoutCompletionsInputSchema),z.lazy(() => ChecklistItemUncheckedUpdateWithoutCompletionsInputSchema) ]),
}).strict();

export const ChecklistItemUpdateWithoutCompletionsInputSchema: z.ZodType<Prisma.ChecklistItemUpdateWithoutCompletionsInput> = z.object({
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => ChecklistItemTypeSchema),z.lazy(() => EnumChecklistItemTypeFieldUpdateOperationsInputSchema) ]).optional(),
  requiredPhotos: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  checklist: z.lazy(() => QualityChecklistUpdateOneRequiredWithoutItemsNestedInputSchema).optional()
}).strict();

export const ChecklistItemUncheckedUpdateWithoutCompletionsInputSchema: z.ZodType<Prisma.ChecklistItemUncheckedUpdateWithoutCompletionsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  checklistId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => ChecklistItemTypeSchema),z.lazy(() => EnumChecklistItemTypeFieldUpdateOperationsInputSchema) ]).optional(),
  requiredPhotos: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const VendorCreateWithoutSupplierPriceHistoryInputSchema: z.ZodType<Prisma.VendorCreateWithoutSupplierPriceHistoryInput> = z.object({
  name: z.string(),
  contact: z.string(),
  email: z.string(),
  phone: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  orders: z.lazy(() => OrderCreateNestedManyWithoutVendorInputSchema).optional(),
  ingredients: z.lazy(() => IngredientCreateNestedManyWithoutVendorsInputSchema).optional()
}).strict();

export const VendorUncheckedCreateWithoutSupplierPriceHistoryInputSchema: z.ZodType<Prisma.VendorUncheckedCreateWithoutSupplierPriceHistoryInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  contact: z.string(),
  email: z.string(),
  phone: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  orders: z.lazy(() => OrderUncheckedCreateNestedManyWithoutVendorInputSchema).optional(),
  ingredients: z.lazy(() => IngredientUncheckedCreateNestedManyWithoutVendorsInputSchema).optional()
}).strict();

export const VendorCreateOrConnectWithoutSupplierPriceHistoryInputSchema: z.ZodType<Prisma.VendorCreateOrConnectWithoutSupplierPriceHistoryInput> = z.object({
  where: z.lazy(() => VendorWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => VendorCreateWithoutSupplierPriceHistoryInputSchema),z.lazy(() => VendorUncheckedCreateWithoutSupplierPriceHistoryInputSchema) ]),
}).strict();

export const IngredientCreateWithoutPriceHistoryInputSchema: z.ZodType<Prisma.IngredientCreateWithoutPriceHistoryInput> = z.object({
  name: z.string(),
  category: z.string(),
  price: z.number(),
  density: z.number().optional().nullable(),
  dietaryRestrictionId: z.number().int().optional().nullable(),
  calories: z.number().optional().nullable(),
  protein: z.number().optional().nullable(),
  carbohydrates: z.number().optional().nullable(),
  fat: z.number().optional().nullable(),
  fiber: z.number().optional().nullable(),
  sugar: z.number().optional().nullable(),
  sodium: z.number().optional().nullable(),
  usdaFoodId: z.string().optional().nullable(),
  nutritionSource: z.lazy(() => NutritionSourceSchema).optional().nullable(),
  nutritionUpdatedAt: z.coerce.date().optional().nullable(),
  recipeIngredients: z.lazy(() => RecipeIngredientCreateNestedManyWithoutIngredientInputSchema).optional(),
  inventoryItems: z.lazy(() => InventoryItemCreateNestedManyWithoutIngredientInputSchema).optional(),
  orderItems: z.lazy(() => OrderItemCreateNestedManyWithoutIngredientInputSchema).optional(),
  vendors: z.lazy(() => VendorCreateNestedManyWithoutIngredientsInputSchema).optional(),
  WasteRecords: z.lazy(() => WasteRecordCreateNestedManyWithoutIngredienteInputSchema).optional(),
  IngredientAllergens: z.lazy(() => IngredientAllergenCreateNestedManyWithoutIngredientInputSchema).optional(),
  DietaryRestrictions: z.lazy(() => DietaryRestrictionCreateNestedManyWithoutIngredientsInputSchema).optional()
}).strict();

export const IngredientUncheckedCreateWithoutPriceHistoryInputSchema: z.ZodType<Prisma.IngredientUncheckedCreateWithoutPriceHistoryInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  category: z.string(),
  price: z.number(),
  density: z.number().optional().nullable(),
  dietaryRestrictionId: z.number().int().optional().nullable(),
  calories: z.number().optional().nullable(),
  protein: z.number().optional().nullable(),
  carbohydrates: z.number().optional().nullable(),
  fat: z.number().optional().nullable(),
  fiber: z.number().optional().nullable(),
  sugar: z.number().optional().nullable(),
  sodium: z.number().optional().nullable(),
  usdaFoodId: z.string().optional().nullable(),
  nutritionSource: z.lazy(() => NutritionSourceSchema).optional().nullable(),
  nutritionUpdatedAt: z.coerce.date().optional().nullable(),
  recipeIngredients: z.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  inventoryItems: z.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  orderItems: z.lazy(() => OrderItemUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  vendors: z.lazy(() => VendorUncheckedCreateNestedManyWithoutIngredientsInputSchema).optional(),
  WasteRecords: z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutIngredienteInputSchema).optional(),
  IngredientAllergens: z.lazy(() => IngredientAllergenUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  DietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutIngredientsInputSchema).optional()
}).strict();

export const IngredientCreateOrConnectWithoutPriceHistoryInputSchema: z.ZodType<Prisma.IngredientCreateOrConnectWithoutPriceHistoryInput> = z.object({
  where: z.lazy(() => IngredientWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => IngredientCreateWithoutPriceHistoryInputSchema),z.lazy(() => IngredientUncheckedCreateWithoutPriceHistoryInputSchema) ]),
}).strict();

export const VendorUpsertWithoutSupplierPriceHistoryInputSchema: z.ZodType<Prisma.VendorUpsertWithoutSupplierPriceHistoryInput> = z.object({
  update: z.union([ z.lazy(() => VendorUpdateWithoutSupplierPriceHistoryInputSchema),z.lazy(() => VendorUncheckedUpdateWithoutSupplierPriceHistoryInputSchema) ]),
  create: z.union([ z.lazy(() => VendorCreateWithoutSupplierPriceHistoryInputSchema),z.lazy(() => VendorUncheckedCreateWithoutSupplierPriceHistoryInputSchema) ]),
  where: z.lazy(() => VendorWhereInputSchema).optional()
}).strict();

export const VendorUpdateToOneWithWhereWithoutSupplierPriceHistoryInputSchema: z.ZodType<Prisma.VendorUpdateToOneWithWhereWithoutSupplierPriceHistoryInput> = z.object({
  where: z.lazy(() => VendorWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => VendorUpdateWithoutSupplierPriceHistoryInputSchema),z.lazy(() => VendorUncheckedUpdateWithoutSupplierPriceHistoryInputSchema) ]),
}).strict();

export const VendorUpdateWithoutSupplierPriceHistoryInputSchema: z.ZodType<Prisma.VendorUpdateWithoutSupplierPriceHistoryInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  contact: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  orders: z.lazy(() => OrderUpdateManyWithoutVendorNestedInputSchema).optional(),
  ingredients: z.lazy(() => IngredientUpdateManyWithoutVendorsNestedInputSchema).optional()
}).strict();

export const VendorUncheckedUpdateWithoutSupplierPriceHistoryInputSchema: z.ZodType<Prisma.VendorUncheckedUpdateWithoutSupplierPriceHistoryInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  contact: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  orders: z.lazy(() => OrderUncheckedUpdateManyWithoutVendorNestedInputSchema).optional(),
  ingredients: z.lazy(() => IngredientUncheckedUpdateManyWithoutVendorsNestedInputSchema).optional()
}).strict();

export const IngredientUpsertWithoutPriceHistoryInputSchema: z.ZodType<Prisma.IngredientUpsertWithoutPriceHistoryInput> = z.object({
  update: z.union([ z.lazy(() => IngredientUpdateWithoutPriceHistoryInputSchema),z.lazy(() => IngredientUncheckedUpdateWithoutPriceHistoryInputSchema) ]),
  create: z.union([ z.lazy(() => IngredientCreateWithoutPriceHistoryInputSchema),z.lazy(() => IngredientUncheckedCreateWithoutPriceHistoryInputSchema) ]),
  where: z.lazy(() => IngredientWhereInputSchema).optional()
}).strict();

export const IngredientUpdateToOneWithWhereWithoutPriceHistoryInputSchema: z.ZodType<Prisma.IngredientUpdateToOneWithWhereWithoutPriceHistoryInput> = z.object({
  where: z.lazy(() => IngredientWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => IngredientUpdateWithoutPriceHistoryInputSchema),z.lazy(() => IngredientUncheckedUpdateWithoutPriceHistoryInputSchema) ]),
}).strict();

export const IngredientUpdateWithoutPriceHistoryInputSchema: z.ZodType<Prisma.IngredientUpdateWithoutPriceHistoryInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  density: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dietaryRestrictionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  calories: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  protein: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  carbohydrates: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fat: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fiber: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sugar: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sodium: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  usdaFoodId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nutritionSource: z.union([ z.lazy(() => NutritionSourceSchema),z.lazy(() => NullableEnumNutritionSourceFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nutritionUpdatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recipeIngredients: z.lazy(() => RecipeIngredientUpdateManyWithoutIngredientNestedInputSchema).optional(),
  inventoryItems: z.lazy(() => InventoryItemUpdateManyWithoutIngredientNestedInputSchema).optional(),
  orderItems: z.lazy(() => OrderItemUpdateManyWithoutIngredientNestedInputSchema).optional(),
  vendors: z.lazy(() => VendorUpdateManyWithoutIngredientsNestedInputSchema).optional(),
  WasteRecords: z.lazy(() => WasteRecordUpdateManyWithoutIngredienteNestedInputSchema).optional(),
  IngredientAllergens: z.lazy(() => IngredientAllergenUpdateManyWithoutIngredientNestedInputSchema).optional(),
  DietaryRestrictions: z.lazy(() => DietaryRestrictionUpdateManyWithoutIngredientsNestedInputSchema).optional()
}).strict();

export const IngredientUncheckedUpdateWithoutPriceHistoryInputSchema: z.ZodType<Prisma.IngredientUncheckedUpdateWithoutPriceHistoryInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  density: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dietaryRestrictionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  calories: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  protein: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  carbohydrates: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fat: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fiber: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sugar: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sodium: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  usdaFoodId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nutritionSource: z.union([ z.lazy(() => NutritionSourceSchema),z.lazy(() => NullableEnumNutritionSourceFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nutritionUpdatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recipeIngredients: z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  inventoryItems: z.lazy(() => InventoryItemUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  orderItems: z.lazy(() => OrderItemUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  vendors: z.lazy(() => VendorUncheckedUpdateManyWithoutIngredientsNestedInputSchema).optional(),
  WasteRecords: z.lazy(() => WasteRecordUncheckedUpdateManyWithoutIngredienteNestedInputSchema).optional(),
  IngredientAllergens: z.lazy(() => IngredientAllergenUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  DietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutIngredientsNestedInputSchema).optional()
}).strict();

export const RestaurantCreateWithoutCustomerFeedbacksInputSchema: z.ZodType<Prisma.RestaurantCreateWithoutCustomerFeedbacksInput> = z.object({
  name: z.string(),
  imageUrl: z.string().optional().nullable(),
  address: z.string(),
  city: z.string(),
  zipCode: z.string(),
  state: z.string(),
  owner: z.string(),
  foodCost: z.number().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  isDeleted: z.boolean().optional(),
  deleted: z.coerce.date().optional().nullable(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutRestaurantsInputSchema).optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: z.lazy(() => CookBookCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: z.lazy(() => InventoryCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: z.lazy(() => OrderCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: z.lazy(() => RecipeCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: z.lazy(() => MenuCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipments: z.lazy(() => EquipmentCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklists: z.lazy(() => QualityChecklistCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();

export const RestaurantUncheckedCreateWithoutCustomerFeedbacksInputSchema: z.ZodType<Prisma.RestaurantUncheckedCreateWithoutCustomerFeedbacksInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  imageUrl: z.string().optional().nullable(),
  address: z.string(),
  city: z.string(),
  zipCode: z.string(),
  state: z.string(),
  owner: z.string(),
  organizationId: z.number().int().optional().nullable(),
  foodCost: z.number().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  isDeleted: z.boolean().optional(),
  deleted: z.coerce.date().optional().nullable(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: z.lazy(() => CookBookUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: z.lazy(() => InventoryUncheckedCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: z.lazy(() => OrderUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: z.lazy(() => RecipeUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: z.lazy(() => MenuUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipments: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklists: z.lazy(() => QualityChecklistUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();

export const RestaurantCreateOrConnectWithoutCustomerFeedbacksInputSchema: z.ZodType<Prisma.RestaurantCreateOrConnectWithoutCustomerFeedbacksInput> = z.object({
  where: z.lazy(() => RestaurantWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RestaurantCreateWithoutCustomerFeedbacksInputSchema),z.lazy(() => RestaurantUncheckedCreateWithoutCustomerFeedbacksInputSchema) ]),
}).strict();

export const MenuItemCreateWithoutFeedbackInputSchema: z.ZodType<Prisma.MenuItemCreateWithoutFeedbackInput> = z.object({
  name: z.string(),
  description: z.string().optional().nullable(),
  price: z.number(),
  foodCost: z.number(),
  isActive: z.boolean().optional(),
  recipeIds: z.union([ z.lazy(() => MenuItemCreaterecipeIdsInputSchema),z.number().int().array() ]).optional(),
  recipeServingsAmount: z.union([ z.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema),z.number().array() ]).optional(),
  recipeServingsCost: z.union([ z.lazy(() => MenuItemCreaterecipeServingsCostInputSchema),z.number().array() ]).optional(),
  allergens: z.union([ z.lazy(() => MenuItemCreateallergensInputSchema),z.string().array() ]).optional(),
  menu: z.lazy(() => MenuCreateNestedOneWithoutMenuItemsInputSchema),
  category: z.lazy(() => MenuCategoryCreateNestedOneWithoutMenuItemsInputSchema).optional(),
  recipes: z.lazy(() => RecipeCreateNestedManyWithoutMenuItemsInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeCreateNestedManyWithoutMenuItemInputSchema).optional(),
  nutritionalInfo: z.lazy(() => NutritionalInfoCreateNestedOneWithoutMenuItemInputSchema).optional(),
  recommendations: z.lazy(() => NutritionalRecommendationCreateNestedManyWithoutMenuItemInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsCreateNestedManyWithoutMenuItemInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemCreateNestedManyWithoutMenuItemInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionCreateNestedManyWithoutMenuItemsInputSchema).optional()
}).strict();

export const MenuItemUncheckedCreateWithoutFeedbackInputSchema: z.ZodType<Prisma.MenuItemUncheckedCreateWithoutFeedbackInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  price: z.number(),
  foodCost: z.number(),
  isActive: z.boolean().optional(),
  recipeIds: z.union([ z.lazy(() => MenuItemCreaterecipeIdsInputSchema),z.number().int().array() ]).optional(),
  recipeServingsAmount: z.union([ z.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema),z.number().array() ]).optional(),
  recipeServingsCost: z.union([ z.lazy(() => MenuItemCreaterecipeServingsCostInputSchema),z.number().array() ]).optional(),
  allergens: z.union([ z.lazy(() => MenuItemCreateallergensInputSchema),z.string().array() ]).optional(),
  menuId: z.number().int(),
  categoryId: z.number().int().optional().nullable(),
  recipes: z.lazy(() => RecipeUncheckedCreateNestedManyWithoutMenuItemsInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  nutritionalInfo: z.lazy(() => NutritionalInfoUncheckedCreateNestedOneWithoutMenuItemInputSchema).optional(),
  recommendations: z.lazy(() => NutritionalRecommendationUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutMenuItemsInputSchema).optional()
}).strict();

export const MenuItemCreateOrConnectWithoutFeedbackInputSchema: z.ZodType<Prisma.MenuItemCreateOrConnectWithoutFeedbackInput> = z.object({
  where: z.lazy(() => MenuItemWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => MenuItemCreateWithoutFeedbackInputSchema),z.lazy(() => MenuItemUncheckedCreateWithoutFeedbackInputSchema) ]),
}).strict();

export const UserCreateWithoutCustomerFeedbackResponsesInputSchema: z.ZodType<Prisma.UserCreateWithoutCustomerFeedbackResponsesInput> = z.object({
  email: z.string(),
  sub: z.number().int().optional().nullable(),
  passwordHash: z.string(),
  firstName: z.string(),
  lastName: z.string(),
  profileImage: z.string().optional().nullable(),
  verified: z.boolean().optional(),
  role: z.lazy(() => UserRoleSchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema).optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutUsersInputSchema).optional(),
  shifts: z.lazy(() => ShiftCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z.lazy(() => AvailabilityCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteCreateNestedManyWithoutCompletedByInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionCreateNestedManyWithoutApprovedByInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountCreateNestedManyWithoutCreatedByInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutCustomerFeedbackResponsesInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutCustomerFeedbackResponsesInput> = z.object({
  id: z.number().int().optional(),
  email: z.string(),
  sub: z.number().int().optional().nullable(),
  passwordHash: z.string(),
  firstName: z.string(),
  lastName: z.string(),
  profileImage: z.string().optional().nullable(),
  verified: z.boolean().optional(),
  role: z.lazy(() => UserRoleSchema),
  organizationId: z.number().int().optional().nullable(),
  restaurantId: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  shifts: z.lazy(() => ShiftUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteUncheckedCreateNestedManyWithoutCompletedByInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutApprovedByInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutCustomerFeedbackResponsesInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutCustomerFeedbackResponsesInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutCustomerFeedbackResponsesInputSchema),z.lazy(() => UserUncheckedCreateWithoutCustomerFeedbackResponsesInputSchema) ]),
}).strict();

export const RestaurantUpsertWithoutCustomerFeedbacksInputSchema: z.ZodType<Prisma.RestaurantUpsertWithoutCustomerFeedbacksInput> = z.object({
  update: z.union([ z.lazy(() => RestaurantUpdateWithoutCustomerFeedbacksInputSchema),z.lazy(() => RestaurantUncheckedUpdateWithoutCustomerFeedbacksInputSchema) ]),
  create: z.union([ z.lazy(() => RestaurantCreateWithoutCustomerFeedbacksInputSchema),z.lazy(() => RestaurantUncheckedCreateWithoutCustomerFeedbacksInputSchema) ]),
  where: z.lazy(() => RestaurantWhereInputSchema).optional()
}).strict();

export const RestaurantUpdateToOneWithWhereWithoutCustomerFeedbacksInputSchema: z.ZodType<Prisma.RestaurantUpdateToOneWithWhereWithoutCustomerFeedbacksInput> = z.object({
  where: z.lazy(() => RestaurantWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RestaurantUpdateWithoutCustomerFeedbacksInputSchema),z.lazy(() => RestaurantUncheckedUpdateWithoutCustomerFeedbacksInputSchema) ]),
}).strict();

export const RestaurantUpdateWithoutCustomerFeedbacksInputSchema: z.ZodType<Prisma.RestaurantUpdateWithoutCustomerFeedbacksInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zipCode: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  owner: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deleted: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organization: z.lazy(() => OrganizationUpdateOneWithoutRestaurantsNestedInputSchema).optional(),
  users: z.lazy(() => UserUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: z.lazy(() => CookBookUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: z.lazy(() => InventoryUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: z.lazy(() => OrderUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: z.lazy(() => RecipeUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: z.lazy(() => MenuUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipments: z.lazy(() => EquipmentUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklists: z.lazy(() => QualityChecklistUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();

export const RestaurantUncheckedUpdateWithoutCustomerFeedbacksInputSchema: z.ZodType<Prisma.RestaurantUncheckedUpdateWithoutCustomerFeedbacksInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zipCode: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  owner: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deleted: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: z.lazy(() => CookBookUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: z.lazy(() => InventoryUncheckedUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: z.lazy(() => OrderUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: z.lazy(() => RecipeUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: z.lazy(() => MenuUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipments: z.lazy(() => EquipmentUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklists: z.lazy(() => QualityChecklistUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();

export const MenuItemUpsertWithoutFeedbackInputSchema: z.ZodType<Prisma.MenuItemUpsertWithoutFeedbackInput> = z.object({
  update: z.union([ z.lazy(() => MenuItemUpdateWithoutFeedbackInputSchema),z.lazy(() => MenuItemUncheckedUpdateWithoutFeedbackInputSchema) ]),
  create: z.union([ z.lazy(() => MenuItemCreateWithoutFeedbackInputSchema),z.lazy(() => MenuItemUncheckedCreateWithoutFeedbackInputSchema) ]),
  where: z.lazy(() => MenuItemWhereInputSchema).optional()
}).strict();

export const MenuItemUpdateToOneWithWhereWithoutFeedbackInputSchema: z.ZodType<Prisma.MenuItemUpdateToOneWithWhereWithoutFeedbackInput> = z.object({
  where: z.lazy(() => MenuItemWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => MenuItemUpdateWithoutFeedbackInputSchema),z.lazy(() => MenuItemUncheckedUpdateWithoutFeedbackInputSchema) ]),
}).strict();

export const MenuItemUpdateWithoutFeedbackInputSchema: z.ZodType<Prisma.MenuItemUpdateWithoutFeedbackInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  recipeIds: z.union([ z.lazy(() => MenuItemUpdaterecipeIdsInputSchema),z.number().int().array() ]).optional(),
  recipeServingsAmount: z.union([ z.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema),z.number().array() ]).optional(),
  recipeServingsCost: z.union([ z.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema),z.number().array() ]).optional(),
  allergens: z.union([ z.lazy(() => MenuItemUpdateallergensInputSchema),z.string().array() ]).optional(),
  menu: z.lazy(() => MenuUpdateOneRequiredWithoutMenuItemsNestedInputSchema).optional(),
  category: z.lazy(() => MenuCategoryUpdateOneWithoutMenuItemsNestedInputSchema).optional(),
  recipes: z.lazy(() => RecipeUpdateManyWithoutMenuItemsNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => NutritionalInfoUpdateOneWithoutMenuItemNestedInputSchema).optional(),
  recommendations: z.lazy(() => NutritionalRecommendationUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUpdateManyWithoutMenuItemsNestedInputSchema).optional()
}).strict();

export const MenuItemUncheckedUpdateWithoutFeedbackInputSchema: z.ZodType<Prisma.MenuItemUncheckedUpdateWithoutFeedbackInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  recipeIds: z.union([ z.lazy(() => MenuItemUpdaterecipeIdsInputSchema),z.number().int().array() ]).optional(),
  recipeServingsAmount: z.union([ z.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema),z.number().array() ]).optional(),
  recipeServingsCost: z.union([ z.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema),z.number().array() ]).optional(),
  allergens: z.union([ z.lazy(() => MenuItemUpdateallergensInputSchema),z.string().array() ]).optional(),
  menuId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  categoryId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recipes: z.lazy(() => RecipeUncheckedUpdateManyWithoutMenuItemsNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => NutritionalInfoUncheckedUpdateOneWithoutMenuItemNestedInputSchema).optional(),
  recommendations: z.lazy(() => NutritionalRecommendationUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutMenuItemsNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutCustomerFeedbackResponsesInputSchema: z.ZodType<Prisma.UserUpsertWithoutCustomerFeedbackResponsesInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutCustomerFeedbackResponsesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutCustomerFeedbackResponsesInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutCustomerFeedbackResponsesInputSchema),z.lazy(() => UserUncheckedCreateWithoutCustomerFeedbackResponsesInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutCustomerFeedbackResponsesInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutCustomerFeedbackResponsesInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutCustomerFeedbackResponsesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutCustomerFeedbackResponsesInputSchema) ]),
}).strict();

export const UserUpdateWithoutCustomerFeedbackResponsesInputSchema: z.ZodType<Prisma.UserUpdateWithoutCustomerFeedbackResponsesInput> = z.object({
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sub: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passwordHash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  verified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneWithoutUsersNestedInputSchema).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneWithoutUsersNestedInputSchema).optional(),
  shifts: z.lazy(() => ShiftUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionUpdateManyWithoutApprovedByNestedInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountUpdateManyWithoutCreatedByNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutCustomerFeedbackResponsesInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutCustomerFeedbackResponsesInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sub: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passwordHash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  verified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  shifts: z.lazy(() => ShiftUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemUncheckedUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutApprovedByNestedInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional()
}).strict();

export const MenuItemCreateWithoutDietaryRestrictionsInputSchema: z.ZodType<Prisma.MenuItemCreateWithoutDietaryRestrictionsInput> = z.object({
  name: z.string(),
  description: z.string().optional().nullable(),
  price: z.number(),
  foodCost: z.number(),
  isActive: z.boolean().optional(),
  recipeIds: z.union([ z.lazy(() => MenuItemCreaterecipeIdsInputSchema),z.number().int().array() ]).optional(),
  recipeServingsAmount: z.union([ z.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema),z.number().array() ]).optional(),
  recipeServingsCost: z.union([ z.lazy(() => MenuItemCreaterecipeServingsCostInputSchema),z.number().array() ]).optional(),
  allergens: z.union([ z.lazy(() => MenuItemCreateallergensInputSchema),z.string().array() ]).optional(),
  menu: z.lazy(() => MenuCreateNestedOneWithoutMenuItemsInputSchema),
  category: z.lazy(() => MenuCategoryCreateNestedOneWithoutMenuItemsInputSchema).optional(),
  recipes: z.lazy(() => RecipeCreateNestedManyWithoutMenuItemsInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeCreateNestedManyWithoutMenuItemInputSchema).optional(),
  nutritionalInfo: z.lazy(() => NutritionalInfoCreateNestedOneWithoutMenuItemInputSchema).optional(),
  recommendations: z.lazy(() => NutritionalRecommendationCreateNestedManyWithoutMenuItemInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsCreateNestedManyWithoutMenuItemInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemCreateNestedManyWithoutMenuItemInputSchema).optional(),
  feedback: z.lazy(() => CustomerFeedbackCreateNestedManyWithoutMenuItemInputSchema).optional()
}).strict();

export const MenuItemUncheckedCreateWithoutDietaryRestrictionsInputSchema: z.ZodType<Prisma.MenuItemUncheckedCreateWithoutDietaryRestrictionsInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  price: z.number(),
  foodCost: z.number(),
  isActive: z.boolean().optional(),
  recipeIds: z.union([ z.lazy(() => MenuItemCreaterecipeIdsInputSchema),z.number().int().array() ]).optional(),
  recipeServingsAmount: z.union([ z.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema),z.number().array() ]).optional(),
  recipeServingsCost: z.union([ z.lazy(() => MenuItemCreaterecipeServingsCostInputSchema),z.number().array() ]).optional(),
  allergens: z.union([ z.lazy(() => MenuItemCreateallergensInputSchema),z.string().array() ]).optional(),
  menuId: z.number().int(),
  categoryId: z.number().int().optional().nullable(),
  recipes: z.lazy(() => RecipeUncheckedCreateNestedManyWithoutMenuItemsInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  nutritionalInfo: z.lazy(() => NutritionalInfoUncheckedCreateNestedOneWithoutMenuItemInputSchema).optional(),
  recommendations: z.lazy(() => NutritionalRecommendationUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  feedback: z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional()
}).strict();

export const MenuItemCreateOrConnectWithoutDietaryRestrictionsInputSchema: z.ZodType<Prisma.MenuItemCreateOrConnectWithoutDietaryRestrictionsInput> = z.object({
  where: z.lazy(() => MenuItemWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => MenuItemCreateWithoutDietaryRestrictionsInputSchema),z.lazy(() => MenuItemUncheckedCreateWithoutDietaryRestrictionsInputSchema) ]),
}).strict();

export const RecipeCreateWithoutDietaryRestrictionsInputSchema: z.ZodType<Prisma.RecipeCreateWithoutDietaryRestrictionsInput> = z.object({
  name: z.string(),
  imageUrls: z.union([ z.lazy(() => RecipeCreateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.string().optional().nullable(),
  servings: z.number().int(),
  cookTime: z.number().int(),
  prepTime: z.number().int(),
  frequency: z.number().int().optional().nullable(),
  foodCost: z.number().optional().nullable(),
  isDeleted: z.boolean().optional(),
  isPublished: z.boolean().optional(),
  publishedAt: z.coerce.date().optional().nullable(),
  language: z.string().optional(),
  skillLevel: z.lazy(() => SkillLevelSchema).optional(),
  category: z.lazy(() => CategorySchema).optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutRecipesInputSchema),
  cookBook: z.lazy(() => CookBookCreateNestedOneWithoutRecipesInputSchema),
  ingredients: z.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeCreateNestedManyWithoutRecipeInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z.lazy(() => RecipeTagCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentCreateNestedManyWithoutRecipeInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureCreateNestedManyWithoutRecipeInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldCreateNestedManyWithoutRecipeInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostCreateNestedManyWithoutRecipeInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionCreateNestedOneWithoutRecipeInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointCreateNestedManyWithoutRecipeInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageCreateNestedOneWithoutRecipeInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoCreateNestedManyWithoutRecipeInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsCreateNestedOneWithoutRecipeInputSchema).optional()
}).strict();

export const RecipeUncheckedCreateWithoutDietaryRestrictionsInputSchema: z.ZodType<Prisma.RecipeUncheckedCreateWithoutDietaryRestrictionsInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  imageUrls: z.union([ z.lazy(() => RecipeCreateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.string().optional().nullable(),
  servings: z.number().int(),
  cookTime: z.number().int(),
  prepTime: z.number().int(),
  frequency: z.number().int().optional().nullable(),
  restaurantId: z.number().int(),
  cookBookId: z.number().int(),
  foodCost: z.number().optional().nullable(),
  isDeleted: z.boolean().optional(),
  isPublished: z.boolean().optional(),
  publishedAt: z.coerce.date().optional().nullable(),
  language: z.string().optional(),
  skillLevel: z.lazy(() => SkillLevelSchema).optional(),
  category: z.lazy(() => CategorySchema).optional(),
  ingredients: z.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUncheckedCreateNestedOneWithoutRecipeInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUncheckedCreateNestedOneWithoutRecipeInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUncheckedCreateNestedOneWithoutRecipeInputSchema).optional()
}).strict();

export const RecipeCreateOrConnectWithoutDietaryRestrictionsInputSchema: z.ZodType<Prisma.RecipeCreateOrConnectWithoutDietaryRestrictionsInput> = z.object({
  where: z.lazy(() => RecipeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RecipeCreateWithoutDietaryRestrictionsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutDietaryRestrictionsInputSchema) ]),
}).strict();

export const IngredientCreateWithoutDietaryRestrictionsInputSchema: z.ZodType<Prisma.IngredientCreateWithoutDietaryRestrictionsInput> = z.object({
  name: z.string(),
  category: z.string(),
  price: z.number(),
  density: z.number().optional().nullable(),
  dietaryRestrictionId: z.number().int().optional().nullable(),
  calories: z.number().optional().nullable(),
  protein: z.number().optional().nullable(),
  carbohydrates: z.number().optional().nullable(),
  fat: z.number().optional().nullable(),
  fiber: z.number().optional().nullable(),
  sugar: z.number().optional().nullable(),
  sodium: z.number().optional().nullable(),
  usdaFoodId: z.string().optional().nullable(),
  nutritionSource: z.lazy(() => NutritionSourceSchema).optional().nullable(),
  nutritionUpdatedAt: z.coerce.date().optional().nullable(),
  recipeIngredients: z.lazy(() => RecipeIngredientCreateNestedManyWithoutIngredientInputSchema).optional(),
  inventoryItems: z.lazy(() => InventoryItemCreateNestedManyWithoutIngredientInputSchema).optional(),
  orderItems: z.lazy(() => OrderItemCreateNestedManyWithoutIngredientInputSchema).optional(),
  vendors: z.lazy(() => VendorCreateNestedManyWithoutIngredientsInputSchema).optional(),
  WasteRecords: z.lazy(() => WasteRecordCreateNestedManyWithoutIngredienteInputSchema).optional(),
  IngredientAllergens: z.lazy(() => IngredientAllergenCreateNestedManyWithoutIngredientInputSchema).optional(),
  priceHistory: z.lazy(() => SupplierPriceHistoryCreateNestedManyWithoutIngredientInputSchema).optional()
}).strict();

export const IngredientUncheckedCreateWithoutDietaryRestrictionsInputSchema: z.ZodType<Prisma.IngredientUncheckedCreateWithoutDietaryRestrictionsInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  category: z.string(),
  price: z.number(),
  density: z.number().optional().nullable(),
  dietaryRestrictionId: z.number().int().optional().nullable(),
  calories: z.number().optional().nullable(),
  protein: z.number().optional().nullable(),
  carbohydrates: z.number().optional().nullable(),
  fat: z.number().optional().nullable(),
  fiber: z.number().optional().nullable(),
  sugar: z.number().optional().nullable(),
  sodium: z.number().optional().nullable(),
  usdaFoodId: z.string().optional().nullable(),
  nutritionSource: z.lazy(() => NutritionSourceSchema).optional().nullable(),
  nutritionUpdatedAt: z.coerce.date().optional().nullable(),
  recipeIngredients: z.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  inventoryItems: z.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  orderItems: z.lazy(() => OrderItemUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  vendors: z.lazy(() => VendorUncheckedCreateNestedManyWithoutIngredientsInputSchema).optional(),
  WasteRecords: z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutIngredienteInputSchema).optional(),
  IngredientAllergens: z.lazy(() => IngredientAllergenUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  priceHistory: z.lazy(() => SupplierPriceHistoryUncheckedCreateNestedManyWithoutIngredientInputSchema).optional()
}).strict();

export const IngredientCreateOrConnectWithoutDietaryRestrictionsInputSchema: z.ZodType<Prisma.IngredientCreateOrConnectWithoutDietaryRestrictionsInput> = z.object({
  where: z.lazy(() => IngredientWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => IngredientCreateWithoutDietaryRestrictionsInputSchema),z.lazy(() => IngredientUncheckedCreateWithoutDietaryRestrictionsInputSchema) ]),
}).strict();

export const MenuItemUpsertWithWhereUniqueWithoutDietaryRestrictionsInputSchema: z.ZodType<Prisma.MenuItemUpsertWithWhereUniqueWithoutDietaryRestrictionsInput> = z.object({
  where: z.lazy(() => MenuItemWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => MenuItemUpdateWithoutDietaryRestrictionsInputSchema),z.lazy(() => MenuItemUncheckedUpdateWithoutDietaryRestrictionsInputSchema) ]),
  create: z.union([ z.lazy(() => MenuItemCreateWithoutDietaryRestrictionsInputSchema),z.lazy(() => MenuItemUncheckedCreateWithoutDietaryRestrictionsInputSchema) ]),
}).strict();

export const MenuItemUpdateWithWhereUniqueWithoutDietaryRestrictionsInputSchema: z.ZodType<Prisma.MenuItemUpdateWithWhereUniqueWithoutDietaryRestrictionsInput> = z.object({
  where: z.lazy(() => MenuItemWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => MenuItemUpdateWithoutDietaryRestrictionsInputSchema),z.lazy(() => MenuItemUncheckedUpdateWithoutDietaryRestrictionsInputSchema) ]),
}).strict();

export const MenuItemUpdateManyWithWhereWithoutDietaryRestrictionsInputSchema: z.ZodType<Prisma.MenuItemUpdateManyWithWhereWithoutDietaryRestrictionsInput> = z.object({
  where: z.lazy(() => MenuItemScalarWhereInputSchema),
  data: z.union([ z.lazy(() => MenuItemUpdateManyMutationInputSchema),z.lazy(() => MenuItemUncheckedUpdateManyWithoutDietaryRestrictionsInputSchema) ]),
}).strict();

export const RecipeUpsertWithWhereUniqueWithoutDietaryRestrictionsInputSchema: z.ZodType<Prisma.RecipeUpsertWithWhereUniqueWithoutDietaryRestrictionsInput> = z.object({
  where: z.lazy(() => RecipeWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => RecipeUpdateWithoutDietaryRestrictionsInputSchema),z.lazy(() => RecipeUncheckedUpdateWithoutDietaryRestrictionsInputSchema) ]),
  create: z.union([ z.lazy(() => RecipeCreateWithoutDietaryRestrictionsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutDietaryRestrictionsInputSchema) ]),
}).strict();

export const RecipeUpdateWithWhereUniqueWithoutDietaryRestrictionsInputSchema: z.ZodType<Prisma.RecipeUpdateWithWhereUniqueWithoutDietaryRestrictionsInput> = z.object({
  where: z.lazy(() => RecipeWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => RecipeUpdateWithoutDietaryRestrictionsInputSchema),z.lazy(() => RecipeUncheckedUpdateWithoutDietaryRestrictionsInputSchema) ]),
}).strict();

export const RecipeUpdateManyWithWhereWithoutDietaryRestrictionsInputSchema: z.ZodType<Prisma.RecipeUpdateManyWithWhereWithoutDietaryRestrictionsInput> = z.object({
  where: z.lazy(() => RecipeScalarWhereInputSchema),
  data: z.union([ z.lazy(() => RecipeUpdateManyMutationInputSchema),z.lazy(() => RecipeUncheckedUpdateManyWithoutDietaryRestrictionsInputSchema) ]),
}).strict();

export const RecipeScalarWhereInputSchema: z.ZodType<Prisma.RecipeScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RecipeScalarWhereInputSchema),z.lazy(() => RecipeScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RecipeScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RecipeScalarWhereInputSchema),z.lazy(() => RecipeScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  imageUrls: z.lazy(() => StringNullableListFilterSchema).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  servings: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  cookTime: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  prepTime: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  frequency: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  restaurantId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  cookBookId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  foodCost: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  isDeleted: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  isPublished: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  publishedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  language: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  skillLevel: z.union([ z.lazy(() => EnumSkillLevelFilterSchema),z.lazy(() => SkillLevelSchema) ]).optional(),
  category: z.union([ z.lazy(() => EnumCategoryFilterSchema),z.lazy(() => CategorySchema) ]).optional(),
}).strict();

export const IngredientUpsertWithWhereUniqueWithoutDietaryRestrictionsInputSchema: z.ZodType<Prisma.IngredientUpsertWithWhereUniqueWithoutDietaryRestrictionsInput> = z.object({
  where: z.lazy(() => IngredientWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => IngredientUpdateWithoutDietaryRestrictionsInputSchema),z.lazy(() => IngredientUncheckedUpdateWithoutDietaryRestrictionsInputSchema) ]),
  create: z.union([ z.lazy(() => IngredientCreateWithoutDietaryRestrictionsInputSchema),z.lazy(() => IngredientUncheckedCreateWithoutDietaryRestrictionsInputSchema) ]),
}).strict();

export const IngredientUpdateWithWhereUniqueWithoutDietaryRestrictionsInputSchema: z.ZodType<Prisma.IngredientUpdateWithWhereUniqueWithoutDietaryRestrictionsInput> = z.object({
  where: z.lazy(() => IngredientWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => IngredientUpdateWithoutDietaryRestrictionsInputSchema),z.lazy(() => IngredientUncheckedUpdateWithoutDietaryRestrictionsInputSchema) ]),
}).strict();

export const IngredientUpdateManyWithWhereWithoutDietaryRestrictionsInputSchema: z.ZodType<Prisma.IngredientUpdateManyWithWhereWithoutDietaryRestrictionsInput> = z.object({
  where: z.lazy(() => IngredientScalarWhereInputSchema),
  data: z.union([ z.lazy(() => IngredientUpdateManyMutationInputSchema),z.lazy(() => IngredientUncheckedUpdateManyWithoutDietaryRestrictionsInputSchema) ]),
}).strict();

export const IngredientScalarWhereInputSchema: z.ZodType<Prisma.IngredientScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => IngredientScalarWhereInputSchema),z.lazy(() => IngredientScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => IngredientScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => IngredientScalarWhereInputSchema),z.lazy(() => IngredientScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  category: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  price: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  density: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  dietaryRestrictionId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  calories: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  protein: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  carbohydrates: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  fat: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  fiber: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  sugar: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  sodium: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  usdaFoodId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  nutritionSource: z.union([ z.lazy(() => EnumNutritionSourceNullableFilterSchema),z.lazy(() => NutritionSourceSchema) ]).optional().nullable(),
  nutritionUpdatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const RecipeCreateWithoutTagsInputSchema: z.ZodType<Prisma.RecipeCreateWithoutTagsInput> = z.object({
  name: z.string(),
  imageUrls: z.union([ z.lazy(() => RecipeCreateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.string().optional().nullable(),
  servings: z.number().int(),
  cookTime: z.number().int(),
  prepTime: z.number().int(),
  frequency: z.number().int().optional().nullable(),
  foodCost: z.number().optional().nullable(),
  isDeleted: z.boolean().optional(),
  isPublished: z.boolean().optional(),
  publishedAt: z.coerce.date().optional().nullable(),
  language: z.string().optional(),
  skillLevel: z.lazy(() => SkillLevelSchema).optional(),
  category: z.lazy(() => CategorySchema).optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutRecipesInputSchema),
  cookBook: z.lazy(() => CookBookCreateNestedOneWithoutRecipesInputSchema),
  ingredients: z.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeCreateNestedManyWithoutRecipeInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutRecipeInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionCreateNestedManyWithoutRecipesInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureCreateNestedManyWithoutRecipeInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldCreateNestedManyWithoutRecipeInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostCreateNestedManyWithoutRecipeInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionCreateNestedOneWithoutRecipeInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointCreateNestedManyWithoutRecipeInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageCreateNestedOneWithoutRecipeInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoCreateNestedManyWithoutRecipeInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsCreateNestedOneWithoutRecipeInputSchema).optional()
}).strict();

export const RecipeUncheckedCreateWithoutTagsInputSchema: z.ZodType<Prisma.RecipeUncheckedCreateWithoutTagsInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  imageUrls: z.union([ z.lazy(() => RecipeCreateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.string().optional().nullable(),
  servings: z.number().int(),
  cookTime: z.number().int(),
  prepTime: z.number().int(),
  frequency: z.number().int().optional().nullable(),
  restaurantId: z.number().int(),
  cookBookId: z.number().int(),
  foodCost: z.number().optional().nullable(),
  isDeleted: z.boolean().optional(),
  isPublished: z.boolean().optional(),
  publishedAt: z.coerce.date().optional().nullable(),
  language: z.string().optional(),
  skillLevel: z.lazy(() => SkillLevelSchema).optional(),
  category: z.lazy(() => CategorySchema).optional(),
  ingredients: z.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUncheckedCreateNestedOneWithoutRecipeInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUncheckedCreateNestedOneWithoutRecipeInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUncheckedCreateNestedOneWithoutRecipeInputSchema).optional()
}).strict();

export const RecipeCreateOrConnectWithoutTagsInputSchema: z.ZodType<Prisma.RecipeCreateOrConnectWithoutTagsInput> = z.object({
  where: z.lazy(() => RecipeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RecipeCreateWithoutTagsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutTagsInputSchema) ]),
}).strict();

export const RecipeUpsertWithWhereUniqueWithoutTagsInputSchema: z.ZodType<Prisma.RecipeUpsertWithWhereUniqueWithoutTagsInput> = z.object({
  where: z.lazy(() => RecipeWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => RecipeUpdateWithoutTagsInputSchema),z.lazy(() => RecipeUncheckedUpdateWithoutTagsInputSchema) ]),
  create: z.union([ z.lazy(() => RecipeCreateWithoutTagsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutTagsInputSchema) ]),
}).strict();

export const RecipeUpdateWithWhereUniqueWithoutTagsInputSchema: z.ZodType<Prisma.RecipeUpdateWithWhereUniqueWithoutTagsInput> = z.object({
  where: z.lazy(() => RecipeWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => RecipeUpdateWithoutTagsInputSchema),z.lazy(() => RecipeUncheckedUpdateWithoutTagsInputSchema) ]),
}).strict();

export const RecipeUpdateManyWithWhereWithoutTagsInputSchema: z.ZodType<Prisma.RecipeUpdateManyWithWhereWithoutTagsInput> = z.object({
  where: z.lazy(() => RecipeScalarWhereInputSchema),
  data: z.union([ z.lazy(() => RecipeUpdateManyMutationInputSchema),z.lazy(() => RecipeUncheckedUpdateManyWithoutTagsInputSchema) ]),
}).strict();

export const RestaurantCreateWithoutLeftoverItemsInputSchema: z.ZodType<Prisma.RestaurantCreateWithoutLeftoverItemsInput> = z.object({
  name: z.string(),
  imageUrl: z.string().optional().nullable(),
  address: z.string(),
  city: z.string(),
  zipCode: z.string(),
  state: z.string(),
  owner: z.string(),
  foodCost: z.number().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  isDeleted: z.boolean().optional(),
  deleted: z.coerce.date().optional().nullable(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutRestaurantsInputSchema).optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: z.lazy(() => CookBookCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: z.lazy(() => InventoryCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: z.lazy(() => OrderCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: z.lazy(() => RecipeCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: z.lazy(() => MenuCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipments: z.lazy(() => EquipmentCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklists: z.lazy(() => QualityChecklistCreateNestedManyWithoutRestaurantInputSchema).optional(),
  customerFeedbacks: z.lazy(() => CustomerFeedbackCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();

export const RestaurantUncheckedCreateWithoutLeftoverItemsInputSchema: z.ZodType<Prisma.RestaurantUncheckedCreateWithoutLeftoverItemsInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  imageUrl: z.string().optional().nullable(),
  address: z.string(),
  city: z.string(),
  zipCode: z.string(),
  state: z.string(),
  owner: z.string(),
  organizationId: z.number().int().optional().nullable(),
  foodCost: z.number().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  isDeleted: z.boolean().optional(),
  deleted: z.coerce.date().optional().nullable(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: z.lazy(() => CookBookUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: z.lazy(() => InventoryUncheckedCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: z.lazy(() => OrderUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: z.lazy(() => RecipeUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: z.lazy(() => MenuUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipments: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklists: z.lazy(() => QualityChecklistUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  customerFeedbacks: z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();

export const RestaurantCreateOrConnectWithoutLeftoverItemsInputSchema: z.ZodType<Prisma.RestaurantCreateOrConnectWithoutLeftoverItemsInput> = z.object({
  where: z.lazy(() => RestaurantWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RestaurantCreateWithoutLeftoverItemsInputSchema),z.lazy(() => RestaurantUncheckedCreateWithoutLeftoverItemsInputSchema) ]),
}).strict();

export const MenuItemCreateWithoutLeftoverItemsInputSchema: z.ZodType<Prisma.MenuItemCreateWithoutLeftoverItemsInput> = z.object({
  name: z.string(),
  description: z.string().optional().nullable(),
  price: z.number(),
  foodCost: z.number(),
  isActive: z.boolean().optional(),
  recipeIds: z.union([ z.lazy(() => MenuItemCreaterecipeIdsInputSchema),z.number().int().array() ]).optional(),
  recipeServingsAmount: z.union([ z.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema),z.number().array() ]).optional(),
  recipeServingsCost: z.union([ z.lazy(() => MenuItemCreaterecipeServingsCostInputSchema),z.number().array() ]).optional(),
  allergens: z.union([ z.lazy(() => MenuItemCreateallergensInputSchema),z.string().array() ]).optional(),
  menu: z.lazy(() => MenuCreateNestedOneWithoutMenuItemsInputSchema),
  category: z.lazy(() => MenuCategoryCreateNestedOneWithoutMenuItemsInputSchema).optional(),
  recipes: z.lazy(() => RecipeCreateNestedManyWithoutMenuItemsInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeCreateNestedManyWithoutMenuItemInputSchema).optional(),
  nutritionalInfo: z.lazy(() => NutritionalInfoCreateNestedOneWithoutMenuItemInputSchema).optional(),
  recommendations: z.lazy(() => NutritionalRecommendationCreateNestedManyWithoutMenuItemInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsCreateNestedManyWithoutMenuItemInputSchema).optional(),
  feedback: z.lazy(() => CustomerFeedbackCreateNestedManyWithoutMenuItemInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionCreateNestedManyWithoutMenuItemsInputSchema).optional()
}).strict();

export const MenuItemUncheckedCreateWithoutLeftoverItemsInputSchema: z.ZodType<Prisma.MenuItemUncheckedCreateWithoutLeftoverItemsInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  price: z.number(),
  foodCost: z.number(),
  isActive: z.boolean().optional(),
  recipeIds: z.union([ z.lazy(() => MenuItemCreaterecipeIdsInputSchema),z.number().int().array() ]).optional(),
  recipeServingsAmount: z.union([ z.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema),z.number().array() ]).optional(),
  recipeServingsCost: z.union([ z.lazy(() => MenuItemCreaterecipeServingsCostInputSchema),z.number().array() ]).optional(),
  allergens: z.union([ z.lazy(() => MenuItemCreateallergensInputSchema),z.string().array() ]).optional(),
  menuId: z.number().int(),
  categoryId: z.number().int().optional().nullable(),
  recipes: z.lazy(() => RecipeUncheckedCreateNestedManyWithoutMenuItemsInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  nutritionalInfo: z.lazy(() => NutritionalInfoUncheckedCreateNestedOneWithoutMenuItemInputSchema).optional(),
  recommendations: z.lazy(() => NutritionalRecommendationUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  feedback: z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutMenuItemsInputSchema).optional()
}).strict();

export const MenuItemCreateOrConnectWithoutLeftoverItemsInputSchema: z.ZodType<Prisma.MenuItemCreateOrConnectWithoutLeftoverItemsInput> = z.object({
  where: z.lazy(() => MenuItemWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => MenuItemCreateWithoutLeftoverItemsInputSchema),z.lazy(() => MenuItemUncheckedCreateWithoutLeftoverItemsInputSchema) ]),
}).strict();

export const UserCreateWithoutLeftoverItemsInputSchema: z.ZodType<Prisma.UserCreateWithoutLeftoverItemsInput> = z.object({
  email: z.string(),
  sub: z.number().int().optional().nullable(),
  passwordHash: z.string(),
  firstName: z.string(),
  lastName: z.string(),
  profileImage: z.string().optional().nullable(),
  verified: z.boolean().optional(),
  role: z.lazy(() => UserRoleSchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema).optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutUsersInputSchema).optional(),
  shifts: z.lazy(() => ShiftCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetCreateNestedManyWithoutUserInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z.lazy(() => AvailabilityCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionCreateNestedManyWithoutApprovedByInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountCreateNestedManyWithoutCreatedByInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutLeftoverItemsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutLeftoverItemsInput> = z.object({
  id: z.number().int().optional(),
  email: z.string(),
  sub: z.number().int().optional().nullable(),
  passwordHash: z.string(),
  firstName: z.string(),
  lastName: z.string(),
  profileImage: z.string().optional().nullable(),
  verified: z.boolean().optional(),
  role: z.lazy(() => UserRoleSchema),
  organizationId: z.number().int().optional().nullable(),
  restaurantId: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  shifts: z.lazy(() => ShiftUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteUncheckedCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutApprovedByInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutLeftoverItemsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutLeftoverItemsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutLeftoverItemsInputSchema),z.lazy(() => UserUncheckedCreateWithoutLeftoverItemsInputSchema) ]),
}).strict();

export const RestaurantUpsertWithoutLeftoverItemsInputSchema: z.ZodType<Prisma.RestaurantUpsertWithoutLeftoverItemsInput> = z.object({
  update: z.union([ z.lazy(() => RestaurantUpdateWithoutLeftoverItemsInputSchema),z.lazy(() => RestaurantUncheckedUpdateWithoutLeftoverItemsInputSchema) ]),
  create: z.union([ z.lazy(() => RestaurantCreateWithoutLeftoverItemsInputSchema),z.lazy(() => RestaurantUncheckedCreateWithoutLeftoverItemsInputSchema) ]),
  where: z.lazy(() => RestaurantWhereInputSchema).optional()
}).strict();

export const RestaurantUpdateToOneWithWhereWithoutLeftoverItemsInputSchema: z.ZodType<Prisma.RestaurantUpdateToOneWithWhereWithoutLeftoverItemsInput> = z.object({
  where: z.lazy(() => RestaurantWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RestaurantUpdateWithoutLeftoverItemsInputSchema),z.lazy(() => RestaurantUncheckedUpdateWithoutLeftoverItemsInputSchema) ]),
}).strict();

export const RestaurantUpdateWithoutLeftoverItemsInputSchema: z.ZodType<Prisma.RestaurantUpdateWithoutLeftoverItemsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zipCode: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  owner: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deleted: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organization: z.lazy(() => OrganizationUpdateOneWithoutRestaurantsNestedInputSchema).optional(),
  users: z.lazy(() => UserUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: z.lazy(() => CookBookUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: z.lazy(() => InventoryUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: z.lazy(() => OrderUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: z.lazy(() => RecipeUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: z.lazy(() => MenuUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipments: z.lazy(() => EquipmentUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklists: z.lazy(() => QualityChecklistUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  customerFeedbacks: z.lazy(() => CustomerFeedbackUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();

export const RestaurantUncheckedUpdateWithoutLeftoverItemsInputSchema: z.ZodType<Prisma.RestaurantUncheckedUpdateWithoutLeftoverItemsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zipCode: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  owner: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deleted: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: z.lazy(() => CookBookUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: z.lazy(() => InventoryUncheckedUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: z.lazy(() => OrderUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: z.lazy(() => RecipeUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: z.lazy(() => MenuUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipments: z.lazy(() => EquipmentUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklists: z.lazy(() => QualityChecklistUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  customerFeedbacks: z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();

export const MenuItemUpsertWithoutLeftoverItemsInputSchema: z.ZodType<Prisma.MenuItemUpsertWithoutLeftoverItemsInput> = z.object({
  update: z.union([ z.lazy(() => MenuItemUpdateWithoutLeftoverItemsInputSchema),z.lazy(() => MenuItemUncheckedUpdateWithoutLeftoverItemsInputSchema) ]),
  create: z.union([ z.lazy(() => MenuItemCreateWithoutLeftoverItemsInputSchema),z.lazy(() => MenuItemUncheckedCreateWithoutLeftoverItemsInputSchema) ]),
  where: z.lazy(() => MenuItemWhereInputSchema).optional()
}).strict();

export const MenuItemUpdateToOneWithWhereWithoutLeftoverItemsInputSchema: z.ZodType<Prisma.MenuItemUpdateToOneWithWhereWithoutLeftoverItemsInput> = z.object({
  where: z.lazy(() => MenuItemWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => MenuItemUpdateWithoutLeftoverItemsInputSchema),z.lazy(() => MenuItemUncheckedUpdateWithoutLeftoverItemsInputSchema) ]),
}).strict();

export const MenuItemUpdateWithoutLeftoverItemsInputSchema: z.ZodType<Prisma.MenuItemUpdateWithoutLeftoverItemsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  recipeIds: z.union([ z.lazy(() => MenuItemUpdaterecipeIdsInputSchema),z.number().int().array() ]).optional(),
  recipeServingsAmount: z.union([ z.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema),z.number().array() ]).optional(),
  recipeServingsCost: z.union([ z.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema),z.number().array() ]).optional(),
  allergens: z.union([ z.lazy(() => MenuItemUpdateallergensInputSchema),z.string().array() ]).optional(),
  menu: z.lazy(() => MenuUpdateOneRequiredWithoutMenuItemsNestedInputSchema).optional(),
  category: z.lazy(() => MenuCategoryUpdateOneWithoutMenuItemsNestedInputSchema).optional(),
  recipes: z.lazy(() => RecipeUpdateManyWithoutMenuItemsNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => NutritionalInfoUpdateOneWithoutMenuItemNestedInputSchema).optional(),
  recommendations: z.lazy(() => NutritionalRecommendationUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  feedback: z.lazy(() => CustomerFeedbackUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUpdateManyWithoutMenuItemsNestedInputSchema).optional()
}).strict();

export const MenuItemUncheckedUpdateWithoutLeftoverItemsInputSchema: z.ZodType<Prisma.MenuItemUncheckedUpdateWithoutLeftoverItemsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  recipeIds: z.union([ z.lazy(() => MenuItemUpdaterecipeIdsInputSchema),z.number().int().array() ]).optional(),
  recipeServingsAmount: z.union([ z.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema),z.number().array() ]).optional(),
  recipeServingsCost: z.union([ z.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema),z.number().array() ]).optional(),
  allergens: z.union([ z.lazy(() => MenuItemUpdateallergensInputSchema),z.string().array() ]).optional(),
  menuId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  categoryId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recipes: z.lazy(() => RecipeUncheckedUpdateManyWithoutMenuItemsNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => NutritionalInfoUncheckedUpdateOneWithoutMenuItemNestedInputSchema).optional(),
  recommendations: z.lazy(() => NutritionalRecommendationUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  feedback: z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutMenuItemsNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutLeftoverItemsInputSchema: z.ZodType<Prisma.UserUpsertWithoutLeftoverItemsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutLeftoverItemsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutLeftoverItemsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutLeftoverItemsInputSchema),z.lazy(() => UserUncheckedCreateWithoutLeftoverItemsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutLeftoverItemsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutLeftoverItemsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutLeftoverItemsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutLeftoverItemsInputSchema) ]),
}).strict();

export const UserUpdateWithoutLeftoverItemsInputSchema: z.ZodType<Prisma.UserUpdateWithoutLeftoverItemsInput> = z.object({
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sub: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passwordHash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  verified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneWithoutUsersNestedInputSchema).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneWithoutUsersNestedInputSchema).optional(),
  shifts: z.lazy(() => ShiftUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetUpdateManyWithoutUserNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionUpdateManyWithoutApprovedByNestedInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountUpdateManyWithoutCreatedByNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutLeftoverItemsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutLeftoverItemsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sub: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passwordHash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  verified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  shifts: z.lazy(() => ShiftUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemUncheckedUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutApprovedByNestedInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional()
}).strict();

export const RestaurantCreateWithoutWasteRecordsInputSchema: z.ZodType<Prisma.RestaurantCreateWithoutWasteRecordsInput> = z.object({
  name: z.string(),
  imageUrl: z.string().optional().nullable(),
  address: z.string(),
  city: z.string(),
  zipCode: z.string(),
  state: z.string(),
  owner: z.string(),
  foodCost: z.number().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  isDeleted: z.boolean().optional(),
  deleted: z.coerce.date().optional().nullable(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutRestaurantsInputSchema).optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: z.lazy(() => CookBookCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: z.lazy(() => InventoryCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: z.lazy(() => OrderCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: z.lazy(() => RecipeCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: z.lazy(() => MenuCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipments: z.lazy(() => EquipmentCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklists: z.lazy(() => QualityChecklistCreateNestedManyWithoutRestaurantInputSchema).optional(),
  customerFeedbacks: z.lazy(() => CustomerFeedbackCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();

export const RestaurantUncheckedCreateWithoutWasteRecordsInputSchema: z.ZodType<Prisma.RestaurantUncheckedCreateWithoutWasteRecordsInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  imageUrl: z.string().optional().nullable(),
  address: z.string(),
  city: z.string(),
  zipCode: z.string(),
  state: z.string(),
  owner: z.string(),
  organizationId: z.number().int().optional().nullable(),
  foodCost: z.number().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  isDeleted: z.boolean().optional(),
  deleted: z.coerce.date().optional().nullable(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: z.lazy(() => CookBookUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: z.lazy(() => InventoryUncheckedCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: z.lazy(() => OrderUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: z.lazy(() => RecipeUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: z.lazy(() => MenuUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipments: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklists: z.lazy(() => QualityChecklistUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  customerFeedbacks: z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();

export const RestaurantCreateOrConnectWithoutWasteRecordsInputSchema: z.ZodType<Prisma.RestaurantCreateOrConnectWithoutWasteRecordsInput> = z.object({
  where: z.lazy(() => RestaurantWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RestaurantCreateWithoutWasteRecordsInputSchema),z.lazy(() => RestaurantUncheckedCreateWithoutWasteRecordsInputSchema) ]),
}).strict();

export const IngredientCreateWithoutWasteRecordsInputSchema: z.ZodType<Prisma.IngredientCreateWithoutWasteRecordsInput> = z.object({
  name: z.string(),
  category: z.string(),
  price: z.number(),
  density: z.number().optional().nullable(),
  dietaryRestrictionId: z.number().int().optional().nullable(),
  calories: z.number().optional().nullable(),
  protein: z.number().optional().nullable(),
  carbohydrates: z.number().optional().nullable(),
  fat: z.number().optional().nullable(),
  fiber: z.number().optional().nullable(),
  sugar: z.number().optional().nullable(),
  sodium: z.number().optional().nullable(),
  usdaFoodId: z.string().optional().nullable(),
  nutritionSource: z.lazy(() => NutritionSourceSchema).optional().nullable(),
  nutritionUpdatedAt: z.coerce.date().optional().nullable(),
  recipeIngredients: z.lazy(() => RecipeIngredientCreateNestedManyWithoutIngredientInputSchema).optional(),
  inventoryItems: z.lazy(() => InventoryItemCreateNestedManyWithoutIngredientInputSchema).optional(),
  orderItems: z.lazy(() => OrderItemCreateNestedManyWithoutIngredientInputSchema).optional(),
  vendors: z.lazy(() => VendorCreateNestedManyWithoutIngredientsInputSchema).optional(),
  IngredientAllergens: z.lazy(() => IngredientAllergenCreateNestedManyWithoutIngredientInputSchema).optional(),
  priceHistory: z.lazy(() => SupplierPriceHistoryCreateNestedManyWithoutIngredientInputSchema).optional(),
  DietaryRestrictions: z.lazy(() => DietaryRestrictionCreateNestedManyWithoutIngredientsInputSchema).optional()
}).strict();

export const IngredientUncheckedCreateWithoutWasteRecordsInputSchema: z.ZodType<Prisma.IngredientUncheckedCreateWithoutWasteRecordsInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  category: z.string(),
  price: z.number(),
  density: z.number().optional().nullable(),
  dietaryRestrictionId: z.number().int().optional().nullable(),
  calories: z.number().optional().nullable(),
  protein: z.number().optional().nullable(),
  carbohydrates: z.number().optional().nullable(),
  fat: z.number().optional().nullable(),
  fiber: z.number().optional().nullable(),
  sugar: z.number().optional().nullable(),
  sodium: z.number().optional().nullable(),
  usdaFoodId: z.string().optional().nullable(),
  nutritionSource: z.lazy(() => NutritionSourceSchema).optional().nullable(),
  nutritionUpdatedAt: z.coerce.date().optional().nullable(),
  recipeIngredients: z.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  inventoryItems: z.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  orderItems: z.lazy(() => OrderItemUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  vendors: z.lazy(() => VendorUncheckedCreateNestedManyWithoutIngredientsInputSchema).optional(),
  IngredientAllergens: z.lazy(() => IngredientAllergenUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  priceHistory: z.lazy(() => SupplierPriceHistoryUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  DietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutIngredientsInputSchema).optional()
}).strict();

export const IngredientCreateOrConnectWithoutWasteRecordsInputSchema: z.ZodType<Prisma.IngredientCreateOrConnectWithoutWasteRecordsInput> = z.object({
  where: z.lazy(() => IngredientWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => IngredientCreateWithoutWasteRecordsInputSchema),z.lazy(() => IngredientUncheckedCreateWithoutWasteRecordsInputSchema) ]),
}).strict();

export const UserCreateWithoutWasteRecordsInputSchema: z.ZodType<Prisma.UserCreateWithoutWasteRecordsInput> = z.object({
  email: z.string(),
  sub: z.number().int().optional().nullable(),
  passwordHash: z.string(),
  firstName: z.string(),
  lastName: z.string(),
  profileImage: z.string().optional().nullable(),
  verified: z.boolean().optional(),
  role: z.lazy(() => UserRoleSchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema).optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutUsersInputSchema).optional(),
  shifts: z.lazy(() => ShiftCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z.lazy(() => AvailabilityCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionCreateNestedManyWithoutApprovedByInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountCreateNestedManyWithoutCreatedByInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutWasteRecordsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutWasteRecordsInput> = z.object({
  id: z.number().int().optional(),
  email: z.string(),
  sub: z.number().int().optional().nullable(),
  passwordHash: z.string(),
  firstName: z.string(),
  lastName: z.string(),
  profileImage: z.string().optional().nullable(),
  verified: z.boolean().optional(),
  role: z.lazy(() => UserRoleSchema),
  organizationId: z.number().int().optional().nullable(),
  restaurantId: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  shifts: z.lazy(() => ShiftUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteUncheckedCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutApprovedByInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutWasteRecordsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutWasteRecordsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutWasteRecordsInputSchema),z.lazy(() => UserUncheckedCreateWithoutWasteRecordsInputSchema) ]),
}).strict();

export const RestaurantUpsertWithoutWasteRecordsInputSchema: z.ZodType<Prisma.RestaurantUpsertWithoutWasteRecordsInput> = z.object({
  update: z.union([ z.lazy(() => RestaurantUpdateWithoutWasteRecordsInputSchema),z.lazy(() => RestaurantUncheckedUpdateWithoutWasteRecordsInputSchema) ]),
  create: z.union([ z.lazy(() => RestaurantCreateWithoutWasteRecordsInputSchema),z.lazy(() => RestaurantUncheckedCreateWithoutWasteRecordsInputSchema) ]),
  where: z.lazy(() => RestaurantWhereInputSchema).optional()
}).strict();

export const RestaurantUpdateToOneWithWhereWithoutWasteRecordsInputSchema: z.ZodType<Prisma.RestaurantUpdateToOneWithWhereWithoutWasteRecordsInput> = z.object({
  where: z.lazy(() => RestaurantWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RestaurantUpdateWithoutWasteRecordsInputSchema),z.lazy(() => RestaurantUncheckedUpdateWithoutWasteRecordsInputSchema) ]),
}).strict();

export const RestaurantUpdateWithoutWasteRecordsInputSchema: z.ZodType<Prisma.RestaurantUpdateWithoutWasteRecordsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zipCode: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  owner: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deleted: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organization: z.lazy(() => OrganizationUpdateOneWithoutRestaurantsNestedInputSchema).optional(),
  users: z.lazy(() => UserUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: z.lazy(() => CookBookUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: z.lazy(() => InventoryUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: z.lazy(() => OrderUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: z.lazy(() => RecipeUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: z.lazy(() => MenuUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipments: z.lazy(() => EquipmentUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklists: z.lazy(() => QualityChecklistUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  customerFeedbacks: z.lazy(() => CustomerFeedbackUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();

export const RestaurantUncheckedUpdateWithoutWasteRecordsInputSchema: z.ZodType<Prisma.RestaurantUncheckedUpdateWithoutWasteRecordsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zipCode: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  owner: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deleted: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: z.lazy(() => CookBookUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: z.lazy(() => InventoryUncheckedUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: z.lazy(() => OrderUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: z.lazy(() => RecipeUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: z.lazy(() => MenuUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipments: z.lazy(() => EquipmentUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklists: z.lazy(() => QualityChecklistUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  customerFeedbacks: z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();

export const IngredientUpsertWithoutWasteRecordsInputSchema: z.ZodType<Prisma.IngredientUpsertWithoutWasteRecordsInput> = z.object({
  update: z.union([ z.lazy(() => IngredientUpdateWithoutWasteRecordsInputSchema),z.lazy(() => IngredientUncheckedUpdateWithoutWasteRecordsInputSchema) ]),
  create: z.union([ z.lazy(() => IngredientCreateWithoutWasteRecordsInputSchema),z.lazy(() => IngredientUncheckedCreateWithoutWasteRecordsInputSchema) ]),
  where: z.lazy(() => IngredientWhereInputSchema).optional()
}).strict();

export const IngredientUpdateToOneWithWhereWithoutWasteRecordsInputSchema: z.ZodType<Prisma.IngredientUpdateToOneWithWhereWithoutWasteRecordsInput> = z.object({
  where: z.lazy(() => IngredientWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => IngredientUpdateWithoutWasteRecordsInputSchema),z.lazy(() => IngredientUncheckedUpdateWithoutWasteRecordsInputSchema) ]),
}).strict();

export const IngredientUpdateWithoutWasteRecordsInputSchema: z.ZodType<Prisma.IngredientUpdateWithoutWasteRecordsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  density: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dietaryRestrictionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  calories: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  protein: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  carbohydrates: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fat: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fiber: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sugar: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sodium: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  usdaFoodId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nutritionSource: z.union([ z.lazy(() => NutritionSourceSchema),z.lazy(() => NullableEnumNutritionSourceFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nutritionUpdatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recipeIngredients: z.lazy(() => RecipeIngredientUpdateManyWithoutIngredientNestedInputSchema).optional(),
  inventoryItems: z.lazy(() => InventoryItemUpdateManyWithoutIngredientNestedInputSchema).optional(),
  orderItems: z.lazy(() => OrderItemUpdateManyWithoutIngredientNestedInputSchema).optional(),
  vendors: z.lazy(() => VendorUpdateManyWithoutIngredientsNestedInputSchema).optional(),
  IngredientAllergens: z.lazy(() => IngredientAllergenUpdateManyWithoutIngredientNestedInputSchema).optional(),
  priceHistory: z.lazy(() => SupplierPriceHistoryUpdateManyWithoutIngredientNestedInputSchema).optional(),
  DietaryRestrictions: z.lazy(() => DietaryRestrictionUpdateManyWithoutIngredientsNestedInputSchema).optional()
}).strict();

export const IngredientUncheckedUpdateWithoutWasteRecordsInputSchema: z.ZodType<Prisma.IngredientUncheckedUpdateWithoutWasteRecordsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  density: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dietaryRestrictionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  calories: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  protein: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  carbohydrates: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fat: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fiber: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sugar: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sodium: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  usdaFoodId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nutritionSource: z.union([ z.lazy(() => NutritionSourceSchema),z.lazy(() => NullableEnumNutritionSourceFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nutritionUpdatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recipeIngredients: z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  inventoryItems: z.lazy(() => InventoryItemUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  orderItems: z.lazy(() => OrderItemUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  vendors: z.lazy(() => VendorUncheckedUpdateManyWithoutIngredientsNestedInputSchema).optional(),
  IngredientAllergens: z.lazy(() => IngredientAllergenUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  priceHistory: z.lazy(() => SupplierPriceHistoryUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  DietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutIngredientsNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutWasteRecordsInputSchema: z.ZodType<Prisma.UserUpsertWithoutWasteRecordsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutWasteRecordsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutWasteRecordsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutWasteRecordsInputSchema),z.lazy(() => UserUncheckedCreateWithoutWasteRecordsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutWasteRecordsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutWasteRecordsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutWasteRecordsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutWasteRecordsInputSchema) ]),
}).strict();

export const UserUpdateWithoutWasteRecordsInputSchema: z.ZodType<Prisma.UserUpdateWithoutWasteRecordsInput> = z.object({
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sub: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passwordHash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  verified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneWithoutUsersNestedInputSchema).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneWithoutUsersNestedInputSchema).optional(),
  shifts: z.lazy(() => ShiftUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionUpdateManyWithoutApprovedByNestedInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountUpdateManyWithoutCreatedByNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutWasteRecordsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutWasteRecordsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sub: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passwordHash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  verified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  shifts: z.lazy(() => ShiftUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemUncheckedUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutApprovedByNestedInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional()
}).strict();

export const RestaurantCreateWithoutProductionPlansInputSchema: z.ZodType<Prisma.RestaurantCreateWithoutProductionPlansInput> = z.object({
  name: z.string(),
  imageUrl: z.string().optional().nullable(),
  address: z.string(),
  city: z.string(),
  zipCode: z.string(),
  state: z.string(),
  owner: z.string(),
  foodCost: z.number().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  isDeleted: z.boolean().optional(),
  deleted: z.coerce.date().optional().nullable(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutRestaurantsInputSchema).optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: z.lazy(() => CookBookCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: z.lazy(() => InventoryCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: z.lazy(() => OrderCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: z.lazy(() => RecipeCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: z.lazy(() => MenuCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipments: z.lazy(() => EquipmentCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklists: z.lazy(() => QualityChecklistCreateNestedManyWithoutRestaurantInputSchema).optional(),
  customerFeedbacks: z.lazy(() => CustomerFeedbackCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();

export const RestaurantUncheckedCreateWithoutProductionPlansInputSchema: z.ZodType<Prisma.RestaurantUncheckedCreateWithoutProductionPlansInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  imageUrl: z.string().optional().nullable(),
  address: z.string(),
  city: z.string(),
  zipCode: z.string(),
  state: z.string(),
  owner: z.string(),
  organizationId: z.number().int().optional().nullable(),
  foodCost: z.number().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  isDeleted: z.boolean().optional(),
  deleted: z.coerce.date().optional().nullable(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: z.lazy(() => CookBookUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: z.lazy(() => InventoryUncheckedCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: z.lazy(() => OrderUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: z.lazy(() => RecipeUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: z.lazy(() => MenuUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipments: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklists: z.lazy(() => QualityChecklistUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  customerFeedbacks: z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();

export const RestaurantCreateOrConnectWithoutProductionPlansInputSchema: z.ZodType<Prisma.RestaurantCreateOrConnectWithoutProductionPlansInput> = z.object({
  where: z.lazy(() => RestaurantWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RestaurantCreateWithoutProductionPlansInputSchema),z.lazy(() => RestaurantUncheckedCreateWithoutProductionPlansInputSchema) ]),
}).strict();

export const UserCreateWithoutProductionPlansInputSchema: z.ZodType<Prisma.UserCreateWithoutProductionPlansInput> = z.object({
  email: z.string(),
  sub: z.number().int().optional().nullable(),
  passwordHash: z.string(),
  firstName: z.string(),
  lastName: z.string(),
  profileImage: z.string().optional().nullable(),
  verified: z.boolean().optional(),
  role: z.lazy(() => UserRoleSchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema).optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutUsersInputSchema).optional(),
  shifts: z.lazy(() => ShiftCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z.lazy(() => AvailabilityCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionCreateNestedManyWithoutApprovedByInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountCreateNestedManyWithoutCreatedByInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutProductionPlansInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutProductionPlansInput> = z.object({
  id: z.number().int().optional(),
  email: z.string(),
  sub: z.number().int().optional().nullable(),
  passwordHash: z.string(),
  firstName: z.string(),
  lastName: z.string(),
  profileImage: z.string().optional().nullable(),
  verified: z.boolean().optional(),
  role: z.lazy(() => UserRoleSchema),
  organizationId: z.number().int().optional().nullable(),
  restaurantId: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  shifts: z.lazy(() => ShiftUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteUncheckedCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutApprovedByInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutProductionPlansInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutProductionPlansInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutProductionPlansInputSchema),z.lazy(() => UserUncheckedCreateWithoutProductionPlansInputSchema) ]),
}).strict();

export const ProductionPlanItemCreateWithoutProductionPlanInputSchema: z.ZodType<Prisma.ProductionPlanItemCreateWithoutProductionPlanInput> = z.object({
  quantity: z.number().int(),
  unit: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  recipe: z.lazy(() => RecipeCreateNestedOneWithoutProductionPlanItemsInputSchema),
  assignedTo: z.lazy(() => UserCreateNestedOneWithoutProductionPlanItemsInputSchema).optional()
}).strict();

export const ProductionPlanItemUncheckedCreateWithoutProductionPlanInputSchema: z.ZodType<Prisma.ProductionPlanItemUncheckedCreateWithoutProductionPlanInput> = z.object({
  id: z.number().int().optional(),
  recipeId: z.number().int(),
  quantity: z.number().int(),
  unit: z.string(),
  assignedToId: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ProductionPlanItemCreateOrConnectWithoutProductionPlanInputSchema: z.ZodType<Prisma.ProductionPlanItemCreateOrConnectWithoutProductionPlanInput> = z.object({
  where: z.lazy(() => ProductionPlanItemWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProductionPlanItemCreateWithoutProductionPlanInputSchema),z.lazy(() => ProductionPlanItemUncheckedCreateWithoutProductionPlanInputSchema) ]),
}).strict();

export const ProductionPlanItemCreateManyProductionPlanInputEnvelopeSchema: z.ZodType<Prisma.ProductionPlanItemCreateManyProductionPlanInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ProductionPlanItemCreateManyProductionPlanInputSchema),z.lazy(() => ProductionPlanItemCreateManyProductionPlanInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const RestaurantUpsertWithoutProductionPlansInputSchema: z.ZodType<Prisma.RestaurantUpsertWithoutProductionPlansInput> = z.object({
  update: z.union([ z.lazy(() => RestaurantUpdateWithoutProductionPlansInputSchema),z.lazy(() => RestaurantUncheckedUpdateWithoutProductionPlansInputSchema) ]),
  create: z.union([ z.lazy(() => RestaurantCreateWithoutProductionPlansInputSchema),z.lazy(() => RestaurantUncheckedCreateWithoutProductionPlansInputSchema) ]),
  where: z.lazy(() => RestaurantWhereInputSchema).optional()
}).strict();

export const RestaurantUpdateToOneWithWhereWithoutProductionPlansInputSchema: z.ZodType<Prisma.RestaurantUpdateToOneWithWhereWithoutProductionPlansInput> = z.object({
  where: z.lazy(() => RestaurantWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RestaurantUpdateWithoutProductionPlansInputSchema),z.lazy(() => RestaurantUncheckedUpdateWithoutProductionPlansInputSchema) ]),
}).strict();

export const RestaurantUpdateWithoutProductionPlansInputSchema: z.ZodType<Prisma.RestaurantUpdateWithoutProductionPlansInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zipCode: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  owner: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deleted: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organization: z.lazy(() => OrganizationUpdateOneWithoutRestaurantsNestedInputSchema).optional(),
  users: z.lazy(() => UserUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: z.lazy(() => CookBookUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: z.lazy(() => InventoryUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: z.lazy(() => OrderUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: z.lazy(() => RecipeUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: z.lazy(() => MenuUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipments: z.lazy(() => EquipmentUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklists: z.lazy(() => QualityChecklistUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  customerFeedbacks: z.lazy(() => CustomerFeedbackUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();

export const RestaurantUncheckedUpdateWithoutProductionPlansInputSchema: z.ZodType<Prisma.RestaurantUncheckedUpdateWithoutProductionPlansInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zipCode: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  owner: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deleted: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: z.lazy(() => CookBookUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: z.lazy(() => InventoryUncheckedUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: z.lazy(() => OrderUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: z.lazy(() => RecipeUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: z.lazy(() => MenuUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipments: z.lazy(() => EquipmentUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklists: z.lazy(() => QualityChecklistUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  customerFeedbacks: z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutProductionPlansInputSchema: z.ZodType<Prisma.UserUpsertWithoutProductionPlansInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutProductionPlansInputSchema),z.lazy(() => UserUncheckedUpdateWithoutProductionPlansInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutProductionPlansInputSchema),z.lazy(() => UserUncheckedCreateWithoutProductionPlansInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutProductionPlansInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutProductionPlansInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutProductionPlansInputSchema),z.lazy(() => UserUncheckedUpdateWithoutProductionPlansInputSchema) ]),
}).strict();

export const UserUpdateWithoutProductionPlansInputSchema: z.ZodType<Prisma.UserUpdateWithoutProductionPlansInput> = z.object({
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sub: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passwordHash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  verified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneWithoutUsersNestedInputSchema).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneWithoutUsersNestedInputSchema).optional(),
  shifts: z.lazy(() => ShiftUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionUpdateManyWithoutApprovedByNestedInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountUpdateManyWithoutCreatedByNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutProductionPlansInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutProductionPlansInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sub: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passwordHash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  verified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  shifts: z.lazy(() => ShiftUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemUncheckedUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutApprovedByNestedInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional()
}).strict();

export const ProductionPlanItemUpsertWithWhereUniqueWithoutProductionPlanInputSchema: z.ZodType<Prisma.ProductionPlanItemUpsertWithWhereUniqueWithoutProductionPlanInput> = z.object({
  where: z.lazy(() => ProductionPlanItemWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ProductionPlanItemUpdateWithoutProductionPlanInputSchema),z.lazy(() => ProductionPlanItemUncheckedUpdateWithoutProductionPlanInputSchema) ]),
  create: z.union([ z.lazy(() => ProductionPlanItemCreateWithoutProductionPlanInputSchema),z.lazy(() => ProductionPlanItemUncheckedCreateWithoutProductionPlanInputSchema) ]),
}).strict();

export const ProductionPlanItemUpdateWithWhereUniqueWithoutProductionPlanInputSchema: z.ZodType<Prisma.ProductionPlanItemUpdateWithWhereUniqueWithoutProductionPlanInput> = z.object({
  where: z.lazy(() => ProductionPlanItemWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ProductionPlanItemUpdateWithoutProductionPlanInputSchema),z.lazy(() => ProductionPlanItemUncheckedUpdateWithoutProductionPlanInputSchema) ]),
}).strict();

export const ProductionPlanItemUpdateManyWithWhereWithoutProductionPlanInputSchema: z.ZodType<Prisma.ProductionPlanItemUpdateManyWithWhereWithoutProductionPlanInput> = z.object({
  where: z.lazy(() => ProductionPlanItemScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ProductionPlanItemUpdateManyMutationInputSchema),z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutProductionPlanInputSchema) ]),
}).strict();

export const ProductionPlanItemScalarWhereInputSchema: z.ZodType<Prisma.ProductionPlanItemScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ProductionPlanItemScalarWhereInputSchema),z.lazy(() => ProductionPlanItemScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProductionPlanItemScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProductionPlanItemScalarWhereInputSchema),z.lazy(() => ProductionPlanItemScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  productionPlanId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  recipeId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  quantity: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  unit: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  assignedToId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ProductionPlanCreateWithoutItemsInputSchema: z.ZodType<Prisma.ProductionPlanCreateWithoutItemsInput> = z.object({
  date: z.coerce.date(),
  status: z.lazy(() => ProductionStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutProductionPlansInputSchema),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutProductionPlansInputSchema)
}).strict();

export const ProductionPlanUncheckedCreateWithoutItemsInputSchema: z.ZodType<Prisma.ProductionPlanUncheckedCreateWithoutItemsInput> = z.object({
  id: z.number().int().optional(),
  restaurantId: z.number().int(),
  date: z.coerce.date(),
  status: z.lazy(() => ProductionStatusSchema).optional(),
  createdById: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ProductionPlanCreateOrConnectWithoutItemsInputSchema: z.ZodType<Prisma.ProductionPlanCreateOrConnectWithoutItemsInput> = z.object({
  where: z.lazy(() => ProductionPlanWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProductionPlanCreateWithoutItemsInputSchema),z.lazy(() => ProductionPlanUncheckedCreateWithoutItemsInputSchema) ]),
}).strict();

export const RecipeCreateWithoutProductionPlanItemsInputSchema: z.ZodType<Prisma.RecipeCreateWithoutProductionPlanItemsInput> = z.object({
  name: z.string(),
  imageUrls: z.union([ z.lazy(() => RecipeCreateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.string().optional().nullable(),
  servings: z.number().int(),
  cookTime: z.number().int(),
  prepTime: z.number().int(),
  frequency: z.number().int().optional().nullable(),
  foodCost: z.number().optional().nullable(),
  isDeleted: z.boolean().optional(),
  isPublished: z.boolean().optional(),
  publishedAt: z.coerce.date().optional().nullable(),
  language: z.string().optional(),
  skillLevel: z.lazy(() => SkillLevelSchema).optional(),
  category: z.lazy(() => CategorySchema).optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutRecipesInputSchema),
  cookBook: z.lazy(() => CookBookCreateNestedOneWithoutRecipesInputSchema),
  ingredients: z.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeCreateNestedManyWithoutRecipeInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z.lazy(() => RecipeTagCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionCreateNestedManyWithoutRecipesInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureCreateNestedManyWithoutRecipeInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldCreateNestedManyWithoutRecipeInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostCreateNestedManyWithoutRecipeInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionCreateNestedOneWithoutRecipeInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointCreateNestedManyWithoutRecipeInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageCreateNestedOneWithoutRecipeInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoCreateNestedManyWithoutRecipeInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsCreateNestedOneWithoutRecipeInputSchema).optional()
}).strict();

export const RecipeUncheckedCreateWithoutProductionPlanItemsInputSchema: z.ZodType<Prisma.RecipeUncheckedCreateWithoutProductionPlanItemsInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  imageUrls: z.union([ z.lazy(() => RecipeCreateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.string().optional().nullable(),
  servings: z.number().int(),
  cookTime: z.number().int(),
  prepTime: z.number().int(),
  frequency: z.number().int().optional().nullable(),
  restaurantId: z.number().int(),
  cookBookId: z.number().int(),
  foodCost: z.number().optional().nullable(),
  isDeleted: z.boolean().optional(),
  isPublished: z.boolean().optional(),
  publishedAt: z.coerce.date().optional().nullable(),
  language: z.string().optional(),
  skillLevel: z.lazy(() => SkillLevelSchema).optional(),
  category: z.lazy(() => CategorySchema).optional(),
  ingredients: z.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUncheckedCreateNestedOneWithoutRecipeInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUncheckedCreateNestedOneWithoutRecipeInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUncheckedCreateNestedOneWithoutRecipeInputSchema).optional()
}).strict();

export const RecipeCreateOrConnectWithoutProductionPlanItemsInputSchema: z.ZodType<Prisma.RecipeCreateOrConnectWithoutProductionPlanItemsInput> = z.object({
  where: z.lazy(() => RecipeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RecipeCreateWithoutProductionPlanItemsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutProductionPlanItemsInputSchema) ]),
}).strict();

export const UserCreateWithoutProductionPlanItemsInputSchema: z.ZodType<Prisma.UserCreateWithoutProductionPlanItemsInput> = z.object({
  email: z.string(),
  sub: z.number().int().optional().nullable(),
  passwordHash: z.string(),
  firstName: z.string(),
  lastName: z.string(),
  profileImage: z.string().optional().nullable(),
  verified: z.boolean().optional(),
  role: z.lazy(() => UserRoleSchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema).optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutUsersInputSchema).optional(),
  shifts: z.lazy(() => ShiftCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanCreateNestedManyWithoutCreatedByInputSchema).optional(),
  availability: z.lazy(() => AvailabilityCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionCreateNestedManyWithoutApprovedByInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountCreateNestedManyWithoutCreatedByInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutProductionPlanItemsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutProductionPlanItemsInput> = z.object({
  id: z.number().int().optional(),
  email: z.string(),
  sub: z.number().int().optional().nullable(),
  passwordHash: z.string(),
  firstName: z.string(),
  lastName: z.string(),
  profileImage: z.string().optional().nullable(),
  verified: z.boolean().optional(),
  role: z.lazy(() => UserRoleSchema),
  organizationId: z.number().int().optional().nullable(),
  restaurantId: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  shifts: z.lazy(() => ShiftUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteUncheckedCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutApprovedByInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutProductionPlanItemsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutProductionPlanItemsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutProductionPlanItemsInputSchema),z.lazy(() => UserUncheckedCreateWithoutProductionPlanItemsInputSchema) ]),
}).strict();

export const ProductionPlanUpsertWithoutItemsInputSchema: z.ZodType<Prisma.ProductionPlanUpsertWithoutItemsInput> = z.object({
  update: z.union([ z.lazy(() => ProductionPlanUpdateWithoutItemsInputSchema),z.lazy(() => ProductionPlanUncheckedUpdateWithoutItemsInputSchema) ]),
  create: z.union([ z.lazy(() => ProductionPlanCreateWithoutItemsInputSchema),z.lazy(() => ProductionPlanUncheckedCreateWithoutItemsInputSchema) ]),
  where: z.lazy(() => ProductionPlanWhereInputSchema).optional()
}).strict();

export const ProductionPlanUpdateToOneWithWhereWithoutItemsInputSchema: z.ZodType<Prisma.ProductionPlanUpdateToOneWithWhereWithoutItemsInput> = z.object({
  where: z.lazy(() => ProductionPlanWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ProductionPlanUpdateWithoutItemsInputSchema),z.lazy(() => ProductionPlanUncheckedUpdateWithoutItemsInputSchema) ]),
}).strict();

export const ProductionPlanUpdateWithoutItemsInputSchema: z.ZodType<Prisma.ProductionPlanUpdateWithoutItemsInput> = z.object({
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ProductionStatusSchema),z.lazy(() => EnumProductionStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneRequiredWithoutProductionPlansNestedInputSchema).optional(),
  createdBy: z.lazy(() => UserUpdateOneRequiredWithoutProductionPlansNestedInputSchema).optional()
}).strict();

export const ProductionPlanUncheckedUpdateWithoutItemsInputSchema: z.ZodType<Prisma.ProductionPlanUncheckedUpdateWithoutItemsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ProductionStatusSchema),z.lazy(() => EnumProductionStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RecipeUpsertWithoutProductionPlanItemsInputSchema: z.ZodType<Prisma.RecipeUpsertWithoutProductionPlanItemsInput> = z.object({
  update: z.union([ z.lazy(() => RecipeUpdateWithoutProductionPlanItemsInputSchema),z.lazy(() => RecipeUncheckedUpdateWithoutProductionPlanItemsInputSchema) ]),
  create: z.union([ z.lazy(() => RecipeCreateWithoutProductionPlanItemsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutProductionPlanItemsInputSchema) ]),
  where: z.lazy(() => RecipeWhereInputSchema).optional()
}).strict();

export const RecipeUpdateToOneWithWhereWithoutProductionPlanItemsInputSchema: z.ZodType<Prisma.RecipeUpdateToOneWithWhereWithoutProductionPlanItemsInput> = z.object({
  where: z.lazy(() => RecipeWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RecipeUpdateWithoutProductionPlanItemsInputSchema),z.lazy(() => RecipeUncheckedUpdateWithoutProductionPlanItemsInputSchema) ]),
}).strict();

export const RecipeUpdateWithoutProductionPlanItemsInputSchema: z.ZodType<Prisma.RecipeUpdateWithoutProductionPlanItemsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrls: z.union([ z.lazy(() => RecipeUpdateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  servings: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isPublished: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  publishedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  skillLevel: z.union([ z.lazy(() => SkillLevelSchema),z.lazy(() => EnumSkillLevelFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => CategorySchema),z.lazy(() => EnumCategoryFieldUpdateOperationsInputSchema) ]).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  cookBook: z.lazy(() => CookBookUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  ingredients: z.lazy(() => RecipeIngredientUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUpdateManyWithoutRecipeNestedInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUpdateManyWithoutRecipesNestedInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUpdateManyWithoutRecipeNestedInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUpdateManyWithoutRecipeNestedInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUpdateManyWithoutRecipeNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUpdateOneWithoutRecipeNestedInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUpdateManyWithoutRecipeNestedInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUpdateOneWithoutRecipeNestedInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUpdateManyWithoutRecipeNestedInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUpdateOneWithoutRecipeNestedInputSchema).optional()
}).strict();

export const RecipeUncheckedUpdateWithoutProductionPlanItemsInputSchema: z.ZodType<Prisma.RecipeUncheckedUpdateWithoutProductionPlanItemsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrls: z.union([ z.lazy(() => RecipeUpdateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  servings: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookBookId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isPublished: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  publishedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  skillLevel: z.union([ z.lazy(() => SkillLevelSchema),z.lazy(() => EnumSkillLevelFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => CategorySchema),z.lazy(() => EnumCategoryFieldUpdateOperationsInputSchema) ]).optional(),
  ingredients: z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutProductionPlanItemsInputSchema: z.ZodType<Prisma.UserUpsertWithoutProductionPlanItemsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutProductionPlanItemsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutProductionPlanItemsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutProductionPlanItemsInputSchema),z.lazy(() => UserUncheckedCreateWithoutProductionPlanItemsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutProductionPlanItemsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutProductionPlanItemsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutProductionPlanItemsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutProductionPlanItemsInputSchema) ]),
}).strict();

export const UserUpdateWithoutProductionPlanItemsInputSchema: z.ZodType<Prisma.UserUpdateWithoutProductionPlanItemsInput> = z.object({
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sub: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passwordHash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  verified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneWithoutUsersNestedInputSchema).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneWithoutUsersNestedInputSchema).optional(),
  shifts: z.lazy(() => ShiftUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionUpdateManyWithoutApprovedByNestedInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountUpdateManyWithoutCreatedByNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutProductionPlanItemsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutProductionPlanItemsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sub: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passwordHash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  verified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  shifts: z.lazy(() => ShiftUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemUncheckedUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutApprovedByNestedInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional()
}).strict();

export const ShiftCreateWithoutTasksInputSchema: z.ZodType<Prisma.ShiftCreateWithoutTasksInput> = z.object({
  startTime: z.coerce.date(),
  endTime: z.coerce.date(),
  status: z.lazy(() => ShiftStatusSchema),
  user: z.lazy(() => UserCreateNestedOneWithoutShiftsInputSchema)
}).strict();

export const ShiftUncheckedCreateWithoutTasksInputSchema: z.ZodType<Prisma.ShiftUncheckedCreateWithoutTasksInput> = z.object({
  id: z.number().int().optional(),
  userId: z.number().int(),
  startTime: z.coerce.date(),
  endTime: z.coerce.date(),
  status: z.lazy(() => ShiftStatusSchema)
}).strict();

export const ShiftCreateOrConnectWithoutTasksInputSchema: z.ZodType<Prisma.ShiftCreateOrConnectWithoutTasksInput> = z.object({
  where: z.lazy(() => ShiftWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ShiftCreateWithoutTasksInputSchema),z.lazy(() => ShiftUncheckedCreateWithoutTasksInputSchema) ]),
}).strict();

export const ShiftUpsertWithoutTasksInputSchema: z.ZodType<Prisma.ShiftUpsertWithoutTasksInput> = z.object({
  update: z.union([ z.lazy(() => ShiftUpdateWithoutTasksInputSchema),z.lazy(() => ShiftUncheckedUpdateWithoutTasksInputSchema) ]),
  create: z.union([ z.lazy(() => ShiftCreateWithoutTasksInputSchema),z.lazy(() => ShiftUncheckedCreateWithoutTasksInputSchema) ]),
  where: z.lazy(() => ShiftWhereInputSchema).optional()
}).strict();

export const ShiftUpdateToOneWithWhereWithoutTasksInputSchema: z.ZodType<Prisma.ShiftUpdateToOneWithWhereWithoutTasksInput> = z.object({
  where: z.lazy(() => ShiftWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ShiftUpdateWithoutTasksInputSchema),z.lazy(() => ShiftUncheckedUpdateWithoutTasksInputSchema) ]),
}).strict();

export const ShiftUpdateWithoutTasksInputSchema: z.ZodType<Prisma.ShiftUpdateWithoutTasksInput> = z.object({
  startTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ShiftStatusSchema),z.lazy(() => EnumShiftStatusFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutShiftsNestedInputSchema).optional()
}).strict();

export const ShiftUncheckedUpdateWithoutTasksInputSchema: z.ZodType<Prisma.ShiftUncheckedUpdateWithoutTasksInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  startTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ShiftStatusSchema),z.lazy(() => EnumShiftStatusFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserCreateWithoutAvailabilityInputSchema: z.ZodType<Prisma.UserCreateWithoutAvailabilityInput> = z.object({
  email: z.string(),
  sub: z.number().int().optional().nullable(),
  passwordHash: z.string(),
  firstName: z.string(),
  lastName: z.string(),
  profileImage: z.string().optional().nullable(),
  verified: z.boolean().optional(),
  role: z.lazy(() => UserRoleSchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema).optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutUsersInputSchema).optional(),
  shifts: z.lazy(() => ShiftCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionCreateNestedManyWithoutApprovedByInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountCreateNestedManyWithoutCreatedByInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutAvailabilityInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutAvailabilityInput> = z.object({
  id: z.number().int().optional(),
  email: z.string(),
  sub: z.number().int().optional().nullable(),
  passwordHash: z.string(),
  firstName: z.string(),
  lastName: z.string(),
  profileImage: z.string().optional().nullable(),
  verified: z.boolean().optional(),
  role: z.lazy(() => UserRoleSchema),
  organizationId: z.number().int().optional().nullable(),
  restaurantId: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  shifts: z.lazy(() => ShiftUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteUncheckedCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutApprovedByInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutAvailabilityInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutAvailabilityInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutAvailabilityInputSchema),z.lazy(() => UserUncheckedCreateWithoutAvailabilityInputSchema) ]),
}).strict();

export const UserUpsertWithoutAvailabilityInputSchema: z.ZodType<Prisma.UserUpsertWithoutAvailabilityInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutAvailabilityInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAvailabilityInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutAvailabilityInputSchema),z.lazy(() => UserUncheckedCreateWithoutAvailabilityInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutAvailabilityInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutAvailabilityInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutAvailabilityInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAvailabilityInputSchema) ]),
}).strict();

export const UserUpdateWithoutAvailabilityInputSchema: z.ZodType<Prisma.UserUpdateWithoutAvailabilityInput> = z.object({
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sub: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passwordHash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  verified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneWithoutUsersNestedInputSchema).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneWithoutUsersNestedInputSchema).optional(),
  shifts: z.lazy(() => ShiftUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionUpdateManyWithoutApprovedByNestedInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountUpdateManyWithoutCreatedByNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutAvailabilityInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutAvailabilityInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sub: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passwordHash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  verified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  shifts: z.lazy(() => ShiftUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemUncheckedUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutApprovedByNestedInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional()
}).strict();

export const UserCreateWithoutSchedulingConstraintsInputSchema: z.ZodType<Prisma.UserCreateWithoutSchedulingConstraintsInput> = z.object({
  email: z.string(),
  sub: z.number().int().optional().nullable(),
  passwordHash: z.string(),
  firstName: z.string(),
  lastName: z.string(),
  profileImage: z.string().optional().nullable(),
  verified: z.boolean().optional(),
  role: z.lazy(() => UserRoleSchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema).optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutUsersInputSchema).optional(),
  shifts: z.lazy(() => ShiftCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z.lazy(() => AvailabilityCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionCreateNestedManyWithoutApprovedByInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountCreateNestedManyWithoutCreatedByInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutSchedulingConstraintsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutSchedulingConstraintsInput> = z.object({
  id: z.number().int().optional(),
  email: z.string(),
  sub: z.number().int().optional().nullable(),
  passwordHash: z.string(),
  firstName: z.string(),
  lastName: z.string(),
  profileImage: z.string().optional().nullable(),
  verified: z.boolean().optional(),
  role: z.lazy(() => UserRoleSchema),
  organizationId: z.number().int().optional().nullable(),
  restaurantId: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  shifts: z.lazy(() => ShiftUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteUncheckedCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutApprovedByInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutSchedulingConstraintsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutSchedulingConstraintsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutSchedulingConstraintsInputSchema),z.lazy(() => UserUncheckedCreateWithoutSchedulingConstraintsInputSchema) ]),
}).strict();

export const UserUpsertWithoutSchedulingConstraintsInputSchema: z.ZodType<Prisma.UserUpsertWithoutSchedulingConstraintsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutSchedulingConstraintsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutSchedulingConstraintsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutSchedulingConstraintsInputSchema),z.lazy(() => UserUncheckedCreateWithoutSchedulingConstraintsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutSchedulingConstraintsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutSchedulingConstraintsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutSchedulingConstraintsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutSchedulingConstraintsInputSchema) ]),
}).strict();

export const UserUpdateWithoutSchedulingConstraintsInputSchema: z.ZodType<Prisma.UserUpdateWithoutSchedulingConstraintsInput> = z.object({
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sub: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passwordHash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  verified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneWithoutUsersNestedInputSchema).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneWithoutUsersNestedInputSchema).optional(),
  shifts: z.lazy(() => ShiftUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionUpdateManyWithoutApprovedByNestedInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountUpdateManyWithoutCreatedByNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutSchedulingConstraintsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutSchedulingConstraintsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sub: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passwordHash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  verified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  shifts: z.lazy(() => ShiftUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemUncheckedUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutApprovedByNestedInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional()
}).strict();

export const InventoryItemCreateWithoutWithdrawalsInputSchema: z.ZodType<Prisma.InventoryItemCreateWithoutWithdrawalsInput> = z.object({
  quantity: z.number(),
  unit: z.string(),
  minQuantity: z.number(),
  restockThreshold: z.number(),
  lastCountDate: z.coerce.date().optional().nullable(),
  lastOrderDate: z.coerce.date().optional().nullable(),
  lastUpdated: z.coerce.date().optional(),
  par: z.number(),
  reorderPoint: z.number(),
  maxQuantity: z.number().optional().nullable(),
  location: z.string().optional().nullable(),
  barcode: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  currentPrice: z.number(),
  averageCost: z.number(),
  lastPurchasePrice: z.number().optional().nullable(),
  inventory: z.lazy(() => InventoryCreateNestedOneWithoutItemsInputSchema),
  ingredient: z.lazy(() => IngredientCreateNestedOneWithoutInventoryItemsInputSchema),
  lastUpdatedBy: z.lazy(() => UserCreateNestedOneWithoutInventoryUpdatesInputSchema).optional(),
  transactions: z.lazy(() => InventoryTransactionCreateNestedManyWithoutItemInputSchema).optional(),
  stockCounts: z.lazy(() => StockCountItemCreateNestedManyWithoutItemInputSchema).optional()
}).strict();

export const InventoryItemUncheckedCreateWithoutWithdrawalsInputSchema: z.ZodType<Prisma.InventoryItemUncheckedCreateWithoutWithdrawalsInput> = z.object({
  id: z.number().int().optional(),
  inventoryId: z.number().int(),
  ingredientId: z.number().int(),
  quantity: z.number(),
  unit: z.string(),
  minQuantity: z.number(),
  restockThreshold: z.number(),
  lastCountDate: z.coerce.date().optional().nullable(),
  lastOrderDate: z.coerce.date().optional().nullable(),
  lastUpdatedById: z.number().int().optional().nullable(),
  lastUpdated: z.coerce.date().optional(),
  par: z.number(),
  reorderPoint: z.number(),
  maxQuantity: z.number().optional().nullable(),
  location: z.string().optional().nullable(),
  barcode: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  currentPrice: z.number(),
  averageCost: z.number(),
  lastPurchasePrice: z.number().optional().nullable(),
  transactions: z.lazy(() => InventoryTransactionUncheckedCreateNestedManyWithoutItemInputSchema).optional(),
  stockCounts: z.lazy(() => StockCountItemUncheckedCreateNestedManyWithoutItemInputSchema).optional()
}).strict();

export const InventoryItemCreateOrConnectWithoutWithdrawalsInputSchema: z.ZodType<Prisma.InventoryItemCreateOrConnectWithoutWithdrawalsInput> = z.object({
  where: z.lazy(() => InventoryItemWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => InventoryItemCreateWithoutWithdrawalsInputSchema),z.lazy(() => InventoryItemUncheckedCreateWithoutWithdrawalsInputSchema) ]),
}).strict();

export const RecipeCreateWithoutWithdrawalsInputSchema: z.ZodType<Prisma.RecipeCreateWithoutWithdrawalsInput> = z.object({
  name: z.string(),
  imageUrls: z.union([ z.lazy(() => RecipeCreateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.string().optional().nullable(),
  servings: z.number().int(),
  cookTime: z.number().int(),
  prepTime: z.number().int(),
  frequency: z.number().int().optional().nullable(),
  foodCost: z.number().optional().nullable(),
  isDeleted: z.boolean().optional(),
  isPublished: z.boolean().optional(),
  publishedAt: z.coerce.date().optional().nullable(),
  language: z.string().optional(),
  skillLevel: z.lazy(() => SkillLevelSchema).optional(),
  category: z.lazy(() => CategorySchema).optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutRecipesInputSchema),
  cookBook: z.lazy(() => CookBookCreateNestedOneWithoutRecipesInputSchema),
  ingredients: z.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeCreateNestedManyWithoutRecipeInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z.lazy(() => RecipeTagCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionCreateNestedManyWithoutRecipesInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureCreateNestedManyWithoutRecipeInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldCreateNestedManyWithoutRecipeInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostCreateNestedManyWithoutRecipeInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionCreateNestedOneWithoutRecipeInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointCreateNestedManyWithoutRecipeInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageCreateNestedOneWithoutRecipeInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoCreateNestedManyWithoutRecipeInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsCreateNestedOneWithoutRecipeInputSchema).optional()
}).strict();

export const RecipeUncheckedCreateWithoutWithdrawalsInputSchema: z.ZodType<Prisma.RecipeUncheckedCreateWithoutWithdrawalsInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  imageUrls: z.union([ z.lazy(() => RecipeCreateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.string().optional().nullable(),
  servings: z.number().int(),
  cookTime: z.number().int(),
  prepTime: z.number().int(),
  frequency: z.number().int().optional().nullable(),
  restaurantId: z.number().int(),
  cookBookId: z.number().int(),
  foodCost: z.number().optional().nullable(),
  isDeleted: z.boolean().optional(),
  isPublished: z.boolean().optional(),
  publishedAt: z.coerce.date().optional().nullable(),
  language: z.string().optional(),
  skillLevel: z.lazy(() => SkillLevelSchema).optional(),
  category: z.lazy(() => CategorySchema).optional(),
  ingredients: z.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUncheckedCreateNestedOneWithoutRecipeInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUncheckedCreateNestedOneWithoutRecipeInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUncheckedCreateNestedOneWithoutRecipeInputSchema).optional()
}).strict();

export const RecipeCreateOrConnectWithoutWithdrawalsInputSchema: z.ZodType<Prisma.RecipeCreateOrConnectWithoutWithdrawalsInput> = z.object({
  where: z.lazy(() => RecipeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RecipeCreateWithoutWithdrawalsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutWithdrawalsInputSchema) ]),
}).strict();

export const UserCreateWithoutInventoryWithdrawalsInputSchema: z.ZodType<Prisma.UserCreateWithoutInventoryWithdrawalsInput> = z.object({
  email: z.string(),
  sub: z.number().int().optional().nullable(),
  passwordHash: z.string(),
  firstName: z.string(),
  lastName: z.string(),
  profileImage: z.string().optional().nullable(),
  verified: z.boolean().optional(),
  role: z.lazy(() => UserRoleSchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema).optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutUsersInputSchema).optional(),
  shifts: z.lazy(() => ShiftCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z.lazy(() => AvailabilityCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintCreateNestedManyWithoutUserInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionCreateNestedManyWithoutApprovedByInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountCreateNestedManyWithoutCreatedByInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutInventoryWithdrawalsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutInventoryWithdrawalsInput> = z.object({
  id: z.number().int().optional(),
  email: z.string(),
  sub: z.number().int().optional().nullable(),
  passwordHash: z.string(),
  firstName: z.string(),
  lastName: z.string(),
  profileImage: z.string().optional().nullable(),
  verified: z.boolean().optional(),
  role: z.lazy(() => UserRoleSchema),
  organizationId: z.number().int().optional().nullable(),
  restaurantId: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  shifts: z.lazy(() => ShiftUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteUncheckedCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutApprovedByInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutInventoryWithdrawalsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutInventoryWithdrawalsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutInventoryWithdrawalsInputSchema),z.lazy(() => UserUncheckedCreateWithoutInventoryWithdrawalsInputSchema) ]),
}).strict();

export const InventoryItemUpsertWithoutWithdrawalsInputSchema: z.ZodType<Prisma.InventoryItemUpsertWithoutWithdrawalsInput> = z.object({
  update: z.union([ z.lazy(() => InventoryItemUpdateWithoutWithdrawalsInputSchema),z.lazy(() => InventoryItemUncheckedUpdateWithoutWithdrawalsInputSchema) ]),
  create: z.union([ z.lazy(() => InventoryItemCreateWithoutWithdrawalsInputSchema),z.lazy(() => InventoryItemUncheckedCreateWithoutWithdrawalsInputSchema) ]),
  where: z.lazy(() => InventoryItemWhereInputSchema).optional()
}).strict();

export const InventoryItemUpdateToOneWithWhereWithoutWithdrawalsInputSchema: z.ZodType<Prisma.InventoryItemUpdateToOneWithWhereWithoutWithdrawalsInput> = z.object({
  where: z.lazy(() => InventoryItemWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => InventoryItemUpdateWithoutWithdrawalsInputSchema),z.lazy(() => InventoryItemUncheckedUpdateWithoutWithdrawalsInputSchema) ]),
}).strict();

export const InventoryItemUpdateWithoutWithdrawalsInputSchema: z.ZodType<Prisma.InventoryItemUpdateWithoutWithdrawalsInput> = z.object({
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  minQuantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  restockThreshold: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lastCountDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastOrderDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastUpdated: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  par: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  reorderPoint: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  maxQuantity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  barcode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currentPrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  averageCost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lastPurchasePrice: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inventory: z.lazy(() => InventoryUpdateOneRequiredWithoutItemsNestedInputSchema).optional(),
  ingredient: z.lazy(() => IngredientUpdateOneRequiredWithoutInventoryItemsNestedInputSchema).optional(),
  lastUpdatedBy: z.lazy(() => UserUpdateOneWithoutInventoryUpdatesNestedInputSchema).optional(),
  transactions: z.lazy(() => InventoryTransactionUpdateManyWithoutItemNestedInputSchema).optional(),
  stockCounts: z.lazy(() => StockCountItemUpdateManyWithoutItemNestedInputSchema).optional()
}).strict();

export const InventoryItemUncheckedUpdateWithoutWithdrawalsInputSchema: z.ZodType<Prisma.InventoryItemUncheckedUpdateWithoutWithdrawalsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inventoryId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ingredientId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  minQuantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  restockThreshold: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lastCountDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastOrderDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastUpdatedById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastUpdated: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  par: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  reorderPoint: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  maxQuantity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  barcode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currentPrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  averageCost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lastPurchasePrice: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  transactions: z.lazy(() => InventoryTransactionUncheckedUpdateManyWithoutItemNestedInputSchema).optional(),
  stockCounts: z.lazy(() => StockCountItemUncheckedUpdateManyWithoutItemNestedInputSchema).optional()
}).strict();

export const RecipeUpsertWithoutWithdrawalsInputSchema: z.ZodType<Prisma.RecipeUpsertWithoutWithdrawalsInput> = z.object({
  update: z.union([ z.lazy(() => RecipeUpdateWithoutWithdrawalsInputSchema),z.lazy(() => RecipeUncheckedUpdateWithoutWithdrawalsInputSchema) ]),
  create: z.union([ z.lazy(() => RecipeCreateWithoutWithdrawalsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutWithdrawalsInputSchema) ]),
  where: z.lazy(() => RecipeWhereInputSchema).optional()
}).strict();

export const RecipeUpdateToOneWithWhereWithoutWithdrawalsInputSchema: z.ZodType<Prisma.RecipeUpdateToOneWithWhereWithoutWithdrawalsInput> = z.object({
  where: z.lazy(() => RecipeWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RecipeUpdateWithoutWithdrawalsInputSchema),z.lazy(() => RecipeUncheckedUpdateWithoutWithdrawalsInputSchema) ]),
}).strict();

export const RecipeUpdateWithoutWithdrawalsInputSchema: z.ZodType<Prisma.RecipeUpdateWithoutWithdrawalsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrls: z.union([ z.lazy(() => RecipeUpdateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  servings: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isPublished: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  publishedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  skillLevel: z.union([ z.lazy(() => SkillLevelSchema),z.lazy(() => EnumSkillLevelFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => CategorySchema),z.lazy(() => EnumCategoryFieldUpdateOperationsInputSchema) ]).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  cookBook: z.lazy(() => CookBookUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  ingredients: z.lazy(() => RecipeIngredientUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUpdateManyWithoutRecipeNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUpdateManyWithoutRecipesNestedInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUpdateManyWithoutRecipeNestedInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUpdateManyWithoutRecipeNestedInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUpdateManyWithoutRecipeNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUpdateOneWithoutRecipeNestedInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUpdateManyWithoutRecipeNestedInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUpdateOneWithoutRecipeNestedInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUpdateManyWithoutRecipeNestedInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUpdateOneWithoutRecipeNestedInputSchema).optional()
}).strict();

export const RecipeUncheckedUpdateWithoutWithdrawalsInputSchema: z.ZodType<Prisma.RecipeUncheckedUpdateWithoutWithdrawalsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrls: z.union([ z.lazy(() => RecipeUpdateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  servings: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookBookId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isPublished: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  publishedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  skillLevel: z.union([ z.lazy(() => SkillLevelSchema),z.lazy(() => EnumSkillLevelFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => CategorySchema),z.lazy(() => EnumCategoryFieldUpdateOperationsInputSchema) ]).optional(),
  ingredients: z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutInventoryWithdrawalsInputSchema: z.ZodType<Prisma.UserUpsertWithoutInventoryWithdrawalsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutInventoryWithdrawalsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutInventoryWithdrawalsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutInventoryWithdrawalsInputSchema),z.lazy(() => UserUncheckedCreateWithoutInventoryWithdrawalsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutInventoryWithdrawalsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutInventoryWithdrawalsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutInventoryWithdrawalsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutInventoryWithdrawalsInputSchema) ]),
}).strict();

export const UserUpdateWithoutInventoryWithdrawalsInputSchema: z.ZodType<Prisma.UserUpdateWithoutInventoryWithdrawalsInput> = z.object({
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sub: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passwordHash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  verified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneWithoutUsersNestedInputSchema).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneWithoutUsersNestedInputSchema).optional(),
  shifts: z.lazy(() => ShiftUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintUpdateManyWithoutUserNestedInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionUpdateManyWithoutApprovedByNestedInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountUpdateManyWithoutCreatedByNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutInventoryWithdrawalsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutInventoryWithdrawalsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sub: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passwordHash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  verified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  shifts: z.lazy(() => ShiftUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemUncheckedUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutApprovedByNestedInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional()
}).strict();

export const IngredientAllergenCreateWithoutAllergenInputSchema: z.ZodType<Prisma.IngredientAllergenCreateWithoutAllergenInput> = z.object({
  ingredient: z.lazy(() => IngredientCreateNestedOneWithoutIngredientAllergensInputSchema)
}).strict();

export const IngredientAllergenUncheckedCreateWithoutAllergenInputSchema: z.ZodType<Prisma.IngredientAllergenUncheckedCreateWithoutAllergenInput> = z.object({
  id: z.number().int().optional(),
  ingredientId: z.number().int()
}).strict();

export const IngredientAllergenCreateOrConnectWithoutAllergenInputSchema: z.ZodType<Prisma.IngredientAllergenCreateOrConnectWithoutAllergenInput> = z.object({
  where: z.lazy(() => IngredientAllergenWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => IngredientAllergenCreateWithoutAllergenInputSchema),z.lazy(() => IngredientAllergenUncheckedCreateWithoutAllergenInputSchema) ]),
}).strict();

export const IngredientAllergenCreateManyAllergenInputEnvelopeSchema: z.ZodType<Prisma.IngredientAllergenCreateManyAllergenInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => IngredientAllergenCreateManyAllergenInputSchema),z.lazy(() => IngredientAllergenCreateManyAllergenInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const IngredientAllergenUpsertWithWhereUniqueWithoutAllergenInputSchema: z.ZodType<Prisma.IngredientAllergenUpsertWithWhereUniqueWithoutAllergenInput> = z.object({
  where: z.lazy(() => IngredientAllergenWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => IngredientAllergenUpdateWithoutAllergenInputSchema),z.lazy(() => IngredientAllergenUncheckedUpdateWithoutAllergenInputSchema) ]),
  create: z.union([ z.lazy(() => IngredientAllergenCreateWithoutAllergenInputSchema),z.lazy(() => IngredientAllergenUncheckedCreateWithoutAllergenInputSchema) ]),
}).strict();

export const IngredientAllergenUpdateWithWhereUniqueWithoutAllergenInputSchema: z.ZodType<Prisma.IngredientAllergenUpdateWithWhereUniqueWithoutAllergenInput> = z.object({
  where: z.lazy(() => IngredientAllergenWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => IngredientAllergenUpdateWithoutAllergenInputSchema),z.lazy(() => IngredientAllergenUncheckedUpdateWithoutAllergenInputSchema) ]),
}).strict();

export const IngredientAllergenUpdateManyWithWhereWithoutAllergenInputSchema: z.ZodType<Prisma.IngredientAllergenUpdateManyWithWhereWithoutAllergenInput> = z.object({
  where: z.lazy(() => IngredientAllergenScalarWhereInputSchema),
  data: z.union([ z.lazy(() => IngredientAllergenUpdateManyMutationInputSchema),z.lazy(() => IngredientAllergenUncheckedUpdateManyWithoutAllergenInputSchema) ]),
}).strict();

export const IngredientAllergenScalarWhereInputSchema: z.ZodType<Prisma.IngredientAllergenScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => IngredientAllergenScalarWhereInputSchema),z.lazy(() => IngredientAllergenScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => IngredientAllergenScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => IngredientAllergenScalarWhereInputSchema),z.lazy(() => IngredientAllergenScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  ingredientId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  allergenId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
}).strict();

export const IngredientCreateWithoutIngredientAllergensInputSchema: z.ZodType<Prisma.IngredientCreateWithoutIngredientAllergensInput> = z.object({
  name: z.string(),
  category: z.string(),
  price: z.number(),
  density: z.number().optional().nullable(),
  dietaryRestrictionId: z.number().int().optional().nullable(),
  calories: z.number().optional().nullable(),
  protein: z.number().optional().nullable(),
  carbohydrates: z.number().optional().nullable(),
  fat: z.number().optional().nullable(),
  fiber: z.number().optional().nullable(),
  sugar: z.number().optional().nullable(),
  sodium: z.number().optional().nullable(),
  usdaFoodId: z.string().optional().nullable(),
  nutritionSource: z.lazy(() => NutritionSourceSchema).optional().nullable(),
  nutritionUpdatedAt: z.coerce.date().optional().nullable(),
  recipeIngredients: z.lazy(() => RecipeIngredientCreateNestedManyWithoutIngredientInputSchema).optional(),
  inventoryItems: z.lazy(() => InventoryItemCreateNestedManyWithoutIngredientInputSchema).optional(),
  orderItems: z.lazy(() => OrderItemCreateNestedManyWithoutIngredientInputSchema).optional(),
  vendors: z.lazy(() => VendorCreateNestedManyWithoutIngredientsInputSchema).optional(),
  WasteRecords: z.lazy(() => WasteRecordCreateNestedManyWithoutIngredienteInputSchema).optional(),
  priceHistory: z.lazy(() => SupplierPriceHistoryCreateNestedManyWithoutIngredientInputSchema).optional(),
  DietaryRestrictions: z.lazy(() => DietaryRestrictionCreateNestedManyWithoutIngredientsInputSchema).optional()
}).strict();

export const IngredientUncheckedCreateWithoutIngredientAllergensInputSchema: z.ZodType<Prisma.IngredientUncheckedCreateWithoutIngredientAllergensInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  category: z.string(),
  price: z.number(),
  density: z.number().optional().nullable(),
  dietaryRestrictionId: z.number().int().optional().nullable(),
  calories: z.number().optional().nullable(),
  protein: z.number().optional().nullable(),
  carbohydrates: z.number().optional().nullable(),
  fat: z.number().optional().nullable(),
  fiber: z.number().optional().nullable(),
  sugar: z.number().optional().nullable(),
  sodium: z.number().optional().nullable(),
  usdaFoodId: z.string().optional().nullable(),
  nutritionSource: z.lazy(() => NutritionSourceSchema).optional().nullable(),
  nutritionUpdatedAt: z.coerce.date().optional().nullable(),
  recipeIngredients: z.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  inventoryItems: z.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  orderItems: z.lazy(() => OrderItemUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  vendors: z.lazy(() => VendorUncheckedCreateNestedManyWithoutIngredientsInputSchema).optional(),
  WasteRecords: z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutIngredienteInputSchema).optional(),
  priceHistory: z.lazy(() => SupplierPriceHistoryUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  DietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutIngredientsInputSchema).optional()
}).strict();

export const IngredientCreateOrConnectWithoutIngredientAllergensInputSchema: z.ZodType<Prisma.IngredientCreateOrConnectWithoutIngredientAllergensInput> = z.object({
  where: z.lazy(() => IngredientWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => IngredientCreateWithoutIngredientAllergensInputSchema),z.lazy(() => IngredientUncheckedCreateWithoutIngredientAllergensInputSchema) ]),
}).strict();

export const AllergenCreateWithoutIngredientsInputSchema: z.ZodType<Prisma.AllergenCreateWithoutIngredientsInput> = z.object({
  name: z.string(),
  description: z.string().optional().nullable()
}).strict();

export const AllergenUncheckedCreateWithoutIngredientsInputSchema: z.ZodType<Prisma.AllergenUncheckedCreateWithoutIngredientsInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable()
}).strict();

export const AllergenCreateOrConnectWithoutIngredientsInputSchema: z.ZodType<Prisma.AllergenCreateOrConnectWithoutIngredientsInput> = z.object({
  where: z.lazy(() => AllergenWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AllergenCreateWithoutIngredientsInputSchema),z.lazy(() => AllergenUncheckedCreateWithoutIngredientsInputSchema) ]),
}).strict();

export const IngredientUpsertWithoutIngredientAllergensInputSchema: z.ZodType<Prisma.IngredientUpsertWithoutIngredientAllergensInput> = z.object({
  update: z.union([ z.lazy(() => IngredientUpdateWithoutIngredientAllergensInputSchema),z.lazy(() => IngredientUncheckedUpdateWithoutIngredientAllergensInputSchema) ]),
  create: z.union([ z.lazy(() => IngredientCreateWithoutIngredientAllergensInputSchema),z.lazy(() => IngredientUncheckedCreateWithoutIngredientAllergensInputSchema) ]),
  where: z.lazy(() => IngredientWhereInputSchema).optional()
}).strict();

export const IngredientUpdateToOneWithWhereWithoutIngredientAllergensInputSchema: z.ZodType<Prisma.IngredientUpdateToOneWithWhereWithoutIngredientAllergensInput> = z.object({
  where: z.lazy(() => IngredientWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => IngredientUpdateWithoutIngredientAllergensInputSchema),z.lazy(() => IngredientUncheckedUpdateWithoutIngredientAllergensInputSchema) ]),
}).strict();

export const IngredientUpdateWithoutIngredientAllergensInputSchema: z.ZodType<Prisma.IngredientUpdateWithoutIngredientAllergensInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  density: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dietaryRestrictionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  calories: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  protein: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  carbohydrates: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fat: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fiber: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sugar: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sodium: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  usdaFoodId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nutritionSource: z.union([ z.lazy(() => NutritionSourceSchema),z.lazy(() => NullableEnumNutritionSourceFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nutritionUpdatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recipeIngredients: z.lazy(() => RecipeIngredientUpdateManyWithoutIngredientNestedInputSchema).optional(),
  inventoryItems: z.lazy(() => InventoryItemUpdateManyWithoutIngredientNestedInputSchema).optional(),
  orderItems: z.lazy(() => OrderItemUpdateManyWithoutIngredientNestedInputSchema).optional(),
  vendors: z.lazy(() => VendorUpdateManyWithoutIngredientsNestedInputSchema).optional(),
  WasteRecords: z.lazy(() => WasteRecordUpdateManyWithoutIngredienteNestedInputSchema).optional(),
  priceHistory: z.lazy(() => SupplierPriceHistoryUpdateManyWithoutIngredientNestedInputSchema).optional(),
  DietaryRestrictions: z.lazy(() => DietaryRestrictionUpdateManyWithoutIngredientsNestedInputSchema).optional()
}).strict();

export const IngredientUncheckedUpdateWithoutIngredientAllergensInputSchema: z.ZodType<Prisma.IngredientUncheckedUpdateWithoutIngredientAllergensInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  density: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dietaryRestrictionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  calories: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  protein: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  carbohydrates: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fat: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fiber: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sugar: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sodium: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  usdaFoodId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nutritionSource: z.union([ z.lazy(() => NutritionSourceSchema),z.lazy(() => NullableEnumNutritionSourceFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nutritionUpdatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recipeIngredients: z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  inventoryItems: z.lazy(() => InventoryItemUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  orderItems: z.lazy(() => OrderItemUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  vendors: z.lazy(() => VendorUncheckedUpdateManyWithoutIngredientsNestedInputSchema).optional(),
  WasteRecords: z.lazy(() => WasteRecordUncheckedUpdateManyWithoutIngredienteNestedInputSchema).optional(),
  priceHistory: z.lazy(() => SupplierPriceHistoryUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  DietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutIngredientsNestedInputSchema).optional()
}).strict();

export const AllergenUpsertWithoutIngredientsInputSchema: z.ZodType<Prisma.AllergenUpsertWithoutIngredientsInput> = z.object({
  update: z.union([ z.lazy(() => AllergenUpdateWithoutIngredientsInputSchema),z.lazy(() => AllergenUncheckedUpdateWithoutIngredientsInputSchema) ]),
  create: z.union([ z.lazy(() => AllergenCreateWithoutIngredientsInputSchema),z.lazy(() => AllergenUncheckedCreateWithoutIngredientsInputSchema) ]),
  where: z.lazy(() => AllergenWhereInputSchema).optional()
}).strict();

export const AllergenUpdateToOneWithWhereWithoutIngredientsInputSchema: z.ZodType<Prisma.AllergenUpdateToOneWithWhereWithoutIngredientsInput> = z.object({
  where: z.lazy(() => AllergenWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => AllergenUpdateWithoutIngredientsInputSchema),z.lazy(() => AllergenUncheckedUpdateWithoutIngredientsInputSchema) ]),
}).strict();

export const AllergenUpdateWithoutIngredientsInputSchema: z.ZodType<Prisma.AllergenUpdateWithoutIngredientsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AllergenUncheckedUpdateWithoutIngredientsInputSchema: z.ZodType<Prisma.AllergenUncheckedUpdateWithoutIngredientsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const MenuItemCreateWithoutRecommendationsInputSchema: z.ZodType<Prisma.MenuItemCreateWithoutRecommendationsInput> = z.object({
  name: z.string(),
  description: z.string().optional().nullable(),
  price: z.number(),
  foodCost: z.number(),
  isActive: z.boolean().optional(),
  recipeIds: z.union([ z.lazy(() => MenuItemCreaterecipeIdsInputSchema),z.number().int().array() ]).optional(),
  recipeServingsAmount: z.union([ z.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema),z.number().array() ]).optional(),
  recipeServingsCost: z.union([ z.lazy(() => MenuItemCreaterecipeServingsCostInputSchema),z.number().array() ]).optional(),
  allergens: z.union([ z.lazy(() => MenuItemCreateallergensInputSchema),z.string().array() ]).optional(),
  menu: z.lazy(() => MenuCreateNestedOneWithoutMenuItemsInputSchema),
  category: z.lazy(() => MenuCategoryCreateNestedOneWithoutMenuItemsInputSchema).optional(),
  recipes: z.lazy(() => RecipeCreateNestedManyWithoutMenuItemsInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeCreateNestedManyWithoutMenuItemInputSchema).optional(),
  nutritionalInfo: z.lazy(() => NutritionalInfoCreateNestedOneWithoutMenuItemInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsCreateNestedManyWithoutMenuItemInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemCreateNestedManyWithoutMenuItemInputSchema).optional(),
  feedback: z.lazy(() => CustomerFeedbackCreateNestedManyWithoutMenuItemInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionCreateNestedManyWithoutMenuItemsInputSchema).optional()
}).strict();

export const MenuItemUncheckedCreateWithoutRecommendationsInputSchema: z.ZodType<Prisma.MenuItemUncheckedCreateWithoutRecommendationsInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  price: z.number(),
  foodCost: z.number(),
  isActive: z.boolean().optional(),
  recipeIds: z.union([ z.lazy(() => MenuItemCreaterecipeIdsInputSchema),z.number().int().array() ]).optional(),
  recipeServingsAmount: z.union([ z.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema),z.number().array() ]).optional(),
  recipeServingsCost: z.union([ z.lazy(() => MenuItemCreaterecipeServingsCostInputSchema),z.number().array() ]).optional(),
  allergens: z.union([ z.lazy(() => MenuItemCreateallergensInputSchema),z.string().array() ]).optional(),
  menuId: z.number().int(),
  categoryId: z.number().int().optional().nullable(),
  recipes: z.lazy(() => RecipeUncheckedCreateNestedManyWithoutMenuItemsInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  nutritionalInfo: z.lazy(() => NutritionalInfoUncheckedCreateNestedOneWithoutMenuItemInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  feedback: z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutMenuItemsInputSchema).optional()
}).strict();

export const MenuItemCreateOrConnectWithoutRecommendationsInputSchema: z.ZodType<Prisma.MenuItemCreateOrConnectWithoutRecommendationsInput> = z.object({
  where: z.lazy(() => MenuItemWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => MenuItemCreateWithoutRecommendationsInputSchema),z.lazy(() => MenuItemUncheckedCreateWithoutRecommendationsInputSchema) ]),
}).strict();

export const MenuItemUpsertWithoutRecommendationsInputSchema: z.ZodType<Prisma.MenuItemUpsertWithoutRecommendationsInput> = z.object({
  update: z.union([ z.lazy(() => MenuItemUpdateWithoutRecommendationsInputSchema),z.lazy(() => MenuItemUncheckedUpdateWithoutRecommendationsInputSchema) ]),
  create: z.union([ z.lazy(() => MenuItemCreateWithoutRecommendationsInputSchema),z.lazy(() => MenuItemUncheckedCreateWithoutRecommendationsInputSchema) ]),
  where: z.lazy(() => MenuItemWhereInputSchema).optional()
}).strict();

export const MenuItemUpdateToOneWithWhereWithoutRecommendationsInputSchema: z.ZodType<Prisma.MenuItemUpdateToOneWithWhereWithoutRecommendationsInput> = z.object({
  where: z.lazy(() => MenuItemWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => MenuItemUpdateWithoutRecommendationsInputSchema),z.lazy(() => MenuItemUncheckedUpdateWithoutRecommendationsInputSchema) ]),
}).strict();

export const MenuItemUpdateWithoutRecommendationsInputSchema: z.ZodType<Prisma.MenuItemUpdateWithoutRecommendationsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  recipeIds: z.union([ z.lazy(() => MenuItemUpdaterecipeIdsInputSchema),z.number().int().array() ]).optional(),
  recipeServingsAmount: z.union([ z.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema),z.number().array() ]).optional(),
  recipeServingsCost: z.union([ z.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema),z.number().array() ]).optional(),
  allergens: z.union([ z.lazy(() => MenuItemUpdateallergensInputSchema),z.string().array() ]).optional(),
  menu: z.lazy(() => MenuUpdateOneRequiredWithoutMenuItemsNestedInputSchema).optional(),
  category: z.lazy(() => MenuCategoryUpdateOneWithoutMenuItemsNestedInputSchema).optional(),
  recipes: z.lazy(() => RecipeUpdateManyWithoutMenuItemsNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => NutritionalInfoUpdateOneWithoutMenuItemNestedInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  feedback: z.lazy(() => CustomerFeedbackUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUpdateManyWithoutMenuItemsNestedInputSchema).optional()
}).strict();

export const MenuItemUncheckedUpdateWithoutRecommendationsInputSchema: z.ZodType<Prisma.MenuItemUncheckedUpdateWithoutRecommendationsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  recipeIds: z.union([ z.lazy(() => MenuItemUpdaterecipeIdsInputSchema),z.number().int().array() ]).optional(),
  recipeServingsAmount: z.union([ z.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema),z.number().array() ]).optional(),
  recipeServingsCost: z.union([ z.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema),z.number().array() ]).optional(),
  allergens: z.union([ z.lazy(() => MenuItemUpdateallergensInputSchema),z.string().array() ]).optional(),
  menuId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  categoryId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recipes: z.lazy(() => RecipeUncheckedUpdateManyWithoutMenuItemsNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => NutritionalInfoUncheckedUpdateOneWithoutMenuItemNestedInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  feedback: z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutMenuItemsNestedInputSchema).optional()
}).strict();

export const RestaurantCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.RestaurantCreateWithoutOrganizationInput> = z.object({
  name: z.string(),
  imageUrl: z.string().optional().nullable(),
  address: z.string(),
  city: z.string(),
  zipCode: z.string(),
  state: z.string(),
  owner: z.string(),
  foodCost: z.number().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  isDeleted: z.boolean().optional(),
  deleted: z.coerce.date().optional().nullable(),
  users: z.lazy(() => UserCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: z.lazy(() => CookBookCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: z.lazy(() => InventoryCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: z.lazy(() => OrderCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: z.lazy(() => RecipeCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: z.lazy(() => MenuCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipments: z.lazy(() => EquipmentCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklists: z.lazy(() => QualityChecklistCreateNestedManyWithoutRestaurantInputSchema).optional(),
  customerFeedbacks: z.lazy(() => CustomerFeedbackCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();

export const RestaurantUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.RestaurantUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  imageUrl: z.string().optional().nullable(),
  address: z.string(),
  city: z.string(),
  zipCode: z.string(),
  state: z.string(),
  owner: z.string(),
  foodCost: z.number().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  isDeleted: z.boolean().optional(),
  deleted: z.coerce.date().optional().nullable(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: z.lazy(() => CookBookUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: z.lazy(() => InventoryUncheckedCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: z.lazy(() => OrderUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: z.lazy(() => RecipeUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: z.lazy(() => MenuUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipments: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklists: z.lazy(() => QualityChecklistUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  customerFeedbacks: z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();

export const RestaurantCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.RestaurantCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => RestaurantWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RestaurantCreateWithoutOrganizationInputSchema),z.lazy(() => RestaurantUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const RestaurantCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.RestaurantCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => RestaurantCreateManyOrganizationInputSchema),z.lazy(() => RestaurantCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UserCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.UserCreateWithoutOrganizationInput> = z.object({
  email: z.string(),
  sub: z.number().int().optional().nullable(),
  passwordHash: z.string(),
  firstName: z.string(),
  lastName: z.string(),
  profileImage: z.string().optional().nullable(),
  verified: z.boolean().optional(),
  role: z.lazy(() => UserRoleSchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutUsersInputSchema).optional(),
  shifts: z.lazy(() => ShiftCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z.lazy(() => AvailabilityCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionCreateNestedManyWithoutApprovedByInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountCreateNestedManyWithoutCreatedByInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.number().int().optional(),
  email: z.string(),
  sub: z.number().int().optional().nullable(),
  passwordHash: z.string(),
  firstName: z.string(),
  lastName: z.string(),
  profileImage: z.string().optional().nullable(),
  verified: z.boolean().optional(),
  role: z.lazy(() => UserRoleSchema),
  restaurantId: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  shifts: z.lazy(() => ShiftUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteUncheckedCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutApprovedByInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutOrganizationInputSchema),z.lazy(() => UserUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const UserCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.UserCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => UserCreateManyOrganizationInputSchema),z.lazy(() => UserCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const RestaurantUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.RestaurantUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => RestaurantWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => RestaurantUpdateWithoutOrganizationInputSchema),z.lazy(() => RestaurantUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => RestaurantCreateWithoutOrganizationInputSchema),z.lazy(() => RestaurantUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const RestaurantUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.RestaurantUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => RestaurantWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => RestaurantUpdateWithoutOrganizationInputSchema),z.lazy(() => RestaurantUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const RestaurantUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.RestaurantUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => RestaurantScalarWhereInputSchema),
  data: z.union([ z.lazy(() => RestaurantUpdateManyMutationInputSchema),z.lazy(() => RestaurantUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const RestaurantScalarWhereInputSchema: z.ZodType<Prisma.RestaurantScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RestaurantScalarWhereInputSchema),z.lazy(() => RestaurantScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RestaurantScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RestaurantScalarWhereInputSchema),z.lazy(() => RestaurantScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  imageUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  address: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  city: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  zipCode: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  state: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  owner: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  foodCost: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  isDeleted: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  deleted: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const UserUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.UserUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => UserUpdateWithoutOrganizationInputSchema),z.lazy(() => UserUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutOrganizationInputSchema),z.lazy(() => UserUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const UserUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.UserUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => UserUpdateWithoutOrganizationInputSchema),z.lazy(() => UserUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const UserUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.UserUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => UserScalarWhereInputSchema),
  data: z.union([ z.lazy(() => UserUpdateManyMutationInputSchema),z.lazy(() => UserUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const UserScalarWhereInputSchema: z.ZodType<Prisma.UserScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => UserScalarWhereInputSchema),z.lazy(() => UserScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserScalarWhereInputSchema),z.lazy(() => UserScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  sub: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  passwordHash: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  firstName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  lastName: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  profileImage: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  verified: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  role: z.union([ z.lazy(() => EnumUserRoleFilterSchema),z.lazy(() => UserRoleSchema) ]).optional(),
  organizationId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  restaurantId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const RestaurantCreateWithoutInventoryInputSchema: z.ZodType<Prisma.RestaurantCreateWithoutInventoryInput> = z.object({
  name: z.string(),
  imageUrl: z.string().optional().nullable(),
  address: z.string(),
  city: z.string(),
  zipCode: z.string(),
  state: z.string(),
  owner: z.string(),
  foodCost: z.number().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  isDeleted: z.boolean().optional(),
  deleted: z.coerce.date().optional().nullable(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutRestaurantsInputSchema).optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: z.lazy(() => CookBookCreateNestedManyWithoutRestaurantInputSchema).optional(),
  orders: z.lazy(() => OrderCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: z.lazy(() => RecipeCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: z.lazy(() => MenuCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipments: z.lazy(() => EquipmentCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklists: z.lazy(() => QualityChecklistCreateNestedManyWithoutRestaurantInputSchema).optional(),
  customerFeedbacks: z.lazy(() => CustomerFeedbackCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();

export const RestaurantUncheckedCreateWithoutInventoryInputSchema: z.ZodType<Prisma.RestaurantUncheckedCreateWithoutInventoryInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  imageUrl: z.string().optional().nullable(),
  address: z.string(),
  city: z.string(),
  zipCode: z.string(),
  state: z.string(),
  owner: z.string(),
  organizationId: z.number().int().optional().nullable(),
  foodCost: z.number().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  isDeleted: z.boolean().optional(),
  deleted: z.coerce.date().optional().nullable(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: z.lazy(() => CookBookUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  orders: z.lazy(() => OrderUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: z.lazy(() => RecipeUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: z.lazy(() => MenuUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipments: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklists: z.lazy(() => QualityChecklistUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  customerFeedbacks: z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();

export const RestaurantCreateOrConnectWithoutInventoryInputSchema: z.ZodType<Prisma.RestaurantCreateOrConnectWithoutInventoryInput> = z.object({
  where: z.lazy(() => RestaurantWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RestaurantCreateWithoutInventoryInputSchema),z.lazy(() => RestaurantUncheckedCreateWithoutInventoryInputSchema) ]),
}).strict();

export const InventoryItemCreateWithoutInventoryInputSchema: z.ZodType<Prisma.InventoryItemCreateWithoutInventoryInput> = z.object({
  quantity: z.number(),
  unit: z.string(),
  minQuantity: z.number(),
  restockThreshold: z.number(),
  lastCountDate: z.coerce.date().optional().nullable(),
  lastOrderDate: z.coerce.date().optional().nullable(),
  lastUpdated: z.coerce.date().optional(),
  par: z.number(),
  reorderPoint: z.number(),
  maxQuantity: z.number().optional().nullable(),
  location: z.string().optional().nullable(),
  barcode: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  currentPrice: z.number(),
  averageCost: z.number(),
  lastPurchasePrice: z.number().optional().nullable(),
  ingredient: z.lazy(() => IngredientCreateNestedOneWithoutInventoryItemsInputSchema),
  lastUpdatedBy: z.lazy(() => UserCreateNestedOneWithoutInventoryUpdatesInputSchema).optional(),
  transactions: z.lazy(() => InventoryTransactionCreateNestedManyWithoutItemInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutInventoryItemInputSchema).optional(),
  stockCounts: z.lazy(() => StockCountItemCreateNestedManyWithoutItemInputSchema).optional()
}).strict();

export const InventoryItemUncheckedCreateWithoutInventoryInputSchema: z.ZodType<Prisma.InventoryItemUncheckedCreateWithoutInventoryInput> = z.object({
  id: z.number().int().optional(),
  ingredientId: z.number().int(),
  quantity: z.number(),
  unit: z.string(),
  minQuantity: z.number(),
  restockThreshold: z.number(),
  lastCountDate: z.coerce.date().optional().nullable(),
  lastOrderDate: z.coerce.date().optional().nullable(),
  lastUpdatedById: z.number().int().optional().nullable(),
  lastUpdated: z.coerce.date().optional(),
  par: z.number(),
  reorderPoint: z.number(),
  maxQuantity: z.number().optional().nullable(),
  location: z.string().optional().nullable(),
  barcode: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  currentPrice: z.number(),
  averageCost: z.number(),
  lastPurchasePrice: z.number().optional().nullable(),
  transactions: z.lazy(() => InventoryTransactionUncheckedCreateNestedManyWithoutItemInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutInventoryItemInputSchema).optional(),
  stockCounts: z.lazy(() => StockCountItemUncheckedCreateNestedManyWithoutItemInputSchema).optional()
}).strict();

export const InventoryItemCreateOrConnectWithoutInventoryInputSchema: z.ZodType<Prisma.InventoryItemCreateOrConnectWithoutInventoryInput> = z.object({
  where: z.lazy(() => InventoryItemWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => InventoryItemCreateWithoutInventoryInputSchema),z.lazy(() => InventoryItemUncheckedCreateWithoutInventoryInputSchema) ]),
}).strict();

export const InventoryItemCreateManyInventoryInputEnvelopeSchema: z.ZodType<Prisma.InventoryItemCreateManyInventoryInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => InventoryItemCreateManyInventoryInputSchema),z.lazy(() => InventoryItemCreateManyInventoryInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const InventoryTransactionCreateWithoutInventoryInputSchema: z.ZodType<Prisma.InventoryTransactionCreateWithoutInventoryInput> = z.object({
  type: z.lazy(() => TransactionTypeSchema),
  quantity: z.number(),
  unit: z.string(),
  previousQty: z.number(),
  newQty: z.number(),
  cost: z.number().optional().nullable(),
  reference: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  item: z.lazy(() => InventoryItemCreateNestedOneWithoutTransactionsInputSchema),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutInventoryTransactionsInputSchema)
}).strict();

export const InventoryTransactionUncheckedCreateWithoutInventoryInputSchema: z.ZodType<Prisma.InventoryTransactionUncheckedCreateWithoutInventoryInput> = z.object({
  id: z.number().int().optional(),
  itemId: z.number().int(),
  type: z.lazy(() => TransactionTypeSchema),
  quantity: z.number(),
  unit: z.string(),
  previousQty: z.number(),
  newQty: z.number(),
  cost: z.number().optional().nullable(),
  reference: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  createdById: z.number().int(),
  createdAt: z.coerce.date().optional()
}).strict();

export const InventoryTransactionCreateOrConnectWithoutInventoryInputSchema: z.ZodType<Prisma.InventoryTransactionCreateOrConnectWithoutInventoryInput> = z.object({
  where: z.lazy(() => InventoryTransactionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => InventoryTransactionCreateWithoutInventoryInputSchema),z.lazy(() => InventoryTransactionUncheckedCreateWithoutInventoryInputSchema) ]),
}).strict();

export const InventoryTransactionCreateManyInventoryInputEnvelopeSchema: z.ZodType<Prisma.InventoryTransactionCreateManyInventoryInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => InventoryTransactionCreateManyInventoryInputSchema),z.lazy(() => InventoryTransactionCreateManyInventoryInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const StockCountCreateWithoutInventoryInputSchema: z.ZodType<Prisma.StockCountCreateWithoutInventoryInput> = z.object({
  status: z.lazy(() => CountStatusSchema),
  startedAt: z.coerce.date(),
  completedAt: z.coerce.date().optional().nullable(),
  notes: z.string().optional().nullable(),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutStockCountsInputSchema),
  items: z.lazy(() => StockCountItemCreateNestedManyWithoutStockCountInputSchema).optional()
}).strict();

export const StockCountUncheckedCreateWithoutInventoryInputSchema: z.ZodType<Prisma.StockCountUncheckedCreateWithoutInventoryInput> = z.object({
  id: z.number().int().optional(),
  status: z.lazy(() => CountStatusSchema),
  startedAt: z.coerce.date(),
  completedAt: z.coerce.date().optional().nullable(),
  createdById: z.number().int(),
  notes: z.string().optional().nullable(),
  items: z.lazy(() => StockCountItemUncheckedCreateNestedManyWithoutStockCountInputSchema).optional()
}).strict();

export const StockCountCreateOrConnectWithoutInventoryInputSchema: z.ZodType<Prisma.StockCountCreateOrConnectWithoutInventoryInput> = z.object({
  where: z.lazy(() => StockCountWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => StockCountCreateWithoutInventoryInputSchema),z.lazy(() => StockCountUncheckedCreateWithoutInventoryInputSchema) ]),
}).strict();

export const StockCountCreateManyInventoryInputEnvelopeSchema: z.ZodType<Prisma.StockCountCreateManyInventoryInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => StockCountCreateManyInventoryInputSchema),z.lazy(() => StockCountCreateManyInventoryInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const RestaurantUpsertWithoutInventoryInputSchema: z.ZodType<Prisma.RestaurantUpsertWithoutInventoryInput> = z.object({
  update: z.union([ z.lazy(() => RestaurantUpdateWithoutInventoryInputSchema),z.lazy(() => RestaurantUncheckedUpdateWithoutInventoryInputSchema) ]),
  create: z.union([ z.lazy(() => RestaurantCreateWithoutInventoryInputSchema),z.lazy(() => RestaurantUncheckedCreateWithoutInventoryInputSchema) ]),
  where: z.lazy(() => RestaurantWhereInputSchema).optional()
}).strict();

export const RestaurantUpdateToOneWithWhereWithoutInventoryInputSchema: z.ZodType<Prisma.RestaurantUpdateToOneWithWhereWithoutInventoryInput> = z.object({
  where: z.lazy(() => RestaurantWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RestaurantUpdateWithoutInventoryInputSchema),z.lazy(() => RestaurantUncheckedUpdateWithoutInventoryInputSchema) ]),
}).strict();

export const RestaurantUpdateWithoutInventoryInputSchema: z.ZodType<Prisma.RestaurantUpdateWithoutInventoryInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zipCode: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  owner: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deleted: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organization: z.lazy(() => OrganizationUpdateOneWithoutRestaurantsNestedInputSchema).optional(),
  users: z.lazy(() => UserUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: z.lazy(() => CookBookUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  orders: z.lazy(() => OrderUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: z.lazy(() => RecipeUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: z.lazy(() => MenuUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipments: z.lazy(() => EquipmentUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklists: z.lazy(() => QualityChecklistUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  customerFeedbacks: z.lazy(() => CustomerFeedbackUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();

export const RestaurantUncheckedUpdateWithoutInventoryInputSchema: z.ZodType<Prisma.RestaurantUncheckedUpdateWithoutInventoryInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zipCode: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  owner: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deleted: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: z.lazy(() => CookBookUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  orders: z.lazy(() => OrderUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: z.lazy(() => RecipeUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: z.lazy(() => MenuUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipments: z.lazy(() => EquipmentUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklists: z.lazy(() => QualityChecklistUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  customerFeedbacks: z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();

export const InventoryItemUpsertWithWhereUniqueWithoutInventoryInputSchema: z.ZodType<Prisma.InventoryItemUpsertWithWhereUniqueWithoutInventoryInput> = z.object({
  where: z.lazy(() => InventoryItemWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => InventoryItemUpdateWithoutInventoryInputSchema),z.lazy(() => InventoryItemUncheckedUpdateWithoutInventoryInputSchema) ]),
  create: z.union([ z.lazy(() => InventoryItemCreateWithoutInventoryInputSchema),z.lazy(() => InventoryItemUncheckedCreateWithoutInventoryInputSchema) ]),
}).strict();

export const InventoryItemUpdateWithWhereUniqueWithoutInventoryInputSchema: z.ZodType<Prisma.InventoryItemUpdateWithWhereUniqueWithoutInventoryInput> = z.object({
  where: z.lazy(() => InventoryItemWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => InventoryItemUpdateWithoutInventoryInputSchema),z.lazy(() => InventoryItemUncheckedUpdateWithoutInventoryInputSchema) ]),
}).strict();

export const InventoryItemUpdateManyWithWhereWithoutInventoryInputSchema: z.ZodType<Prisma.InventoryItemUpdateManyWithWhereWithoutInventoryInput> = z.object({
  where: z.lazy(() => InventoryItemScalarWhereInputSchema),
  data: z.union([ z.lazy(() => InventoryItemUpdateManyMutationInputSchema),z.lazy(() => InventoryItemUncheckedUpdateManyWithoutInventoryInputSchema) ]),
}).strict();

export const InventoryItemScalarWhereInputSchema: z.ZodType<Prisma.InventoryItemScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => InventoryItemScalarWhereInputSchema),z.lazy(() => InventoryItemScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => InventoryItemScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => InventoryItemScalarWhereInputSchema),z.lazy(() => InventoryItemScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  inventoryId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  ingredientId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  quantity: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  unit: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  minQuantity: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  restockThreshold: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  lastCountDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  lastOrderDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  lastUpdatedById: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  lastUpdated: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  par: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  reorderPoint: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  maxQuantity: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  location: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  barcode: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  currentPrice: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  averageCost: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  lastPurchasePrice: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
}).strict();

export const InventoryTransactionUpsertWithWhereUniqueWithoutInventoryInputSchema: z.ZodType<Prisma.InventoryTransactionUpsertWithWhereUniqueWithoutInventoryInput> = z.object({
  where: z.lazy(() => InventoryTransactionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => InventoryTransactionUpdateWithoutInventoryInputSchema),z.lazy(() => InventoryTransactionUncheckedUpdateWithoutInventoryInputSchema) ]),
  create: z.union([ z.lazy(() => InventoryTransactionCreateWithoutInventoryInputSchema),z.lazy(() => InventoryTransactionUncheckedCreateWithoutInventoryInputSchema) ]),
}).strict();

export const InventoryTransactionUpdateWithWhereUniqueWithoutInventoryInputSchema: z.ZodType<Prisma.InventoryTransactionUpdateWithWhereUniqueWithoutInventoryInput> = z.object({
  where: z.lazy(() => InventoryTransactionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => InventoryTransactionUpdateWithoutInventoryInputSchema),z.lazy(() => InventoryTransactionUncheckedUpdateWithoutInventoryInputSchema) ]),
}).strict();

export const InventoryTransactionUpdateManyWithWhereWithoutInventoryInputSchema: z.ZodType<Prisma.InventoryTransactionUpdateManyWithWhereWithoutInventoryInput> = z.object({
  where: z.lazy(() => InventoryTransactionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => InventoryTransactionUpdateManyMutationInputSchema),z.lazy(() => InventoryTransactionUncheckedUpdateManyWithoutInventoryInputSchema) ]),
}).strict();

export const InventoryTransactionScalarWhereInputSchema: z.ZodType<Prisma.InventoryTransactionScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => InventoryTransactionScalarWhereInputSchema),z.lazy(() => InventoryTransactionScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => InventoryTransactionScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => InventoryTransactionScalarWhereInputSchema),z.lazy(() => InventoryTransactionScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  inventoryId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  itemId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  type: z.union([ z.lazy(() => EnumTransactionTypeFilterSchema),z.lazy(() => TransactionTypeSchema) ]).optional(),
  quantity: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  unit: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  previousQty: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  newQty: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  cost: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  reference: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdById: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const StockCountUpsertWithWhereUniqueWithoutInventoryInputSchema: z.ZodType<Prisma.StockCountUpsertWithWhereUniqueWithoutInventoryInput> = z.object({
  where: z.lazy(() => StockCountWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => StockCountUpdateWithoutInventoryInputSchema),z.lazy(() => StockCountUncheckedUpdateWithoutInventoryInputSchema) ]),
  create: z.union([ z.lazy(() => StockCountCreateWithoutInventoryInputSchema),z.lazy(() => StockCountUncheckedCreateWithoutInventoryInputSchema) ]),
}).strict();

export const StockCountUpdateWithWhereUniqueWithoutInventoryInputSchema: z.ZodType<Prisma.StockCountUpdateWithWhereUniqueWithoutInventoryInput> = z.object({
  where: z.lazy(() => StockCountWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => StockCountUpdateWithoutInventoryInputSchema),z.lazy(() => StockCountUncheckedUpdateWithoutInventoryInputSchema) ]),
}).strict();

export const StockCountUpdateManyWithWhereWithoutInventoryInputSchema: z.ZodType<Prisma.StockCountUpdateManyWithWhereWithoutInventoryInput> = z.object({
  where: z.lazy(() => StockCountScalarWhereInputSchema),
  data: z.union([ z.lazy(() => StockCountUpdateManyMutationInputSchema),z.lazy(() => StockCountUncheckedUpdateManyWithoutInventoryInputSchema) ]),
}).strict();

export const StockCountScalarWhereInputSchema: z.ZodType<Prisma.StockCountScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => StockCountScalarWhereInputSchema),z.lazy(() => StockCountScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => StockCountScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => StockCountScalarWhereInputSchema),z.lazy(() => StockCountScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  inventoryId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  status: z.union([ z.lazy(() => EnumCountStatusFilterSchema),z.lazy(() => CountStatusSchema) ]).optional(),
  startedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  completedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdById: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const OrganizationCreateWithoutRestaurantsInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutRestaurantsInput> = z.object({
  name: z.string(),
  imageUrl: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutRestaurantsInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutRestaurantsInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  imageUrl: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutRestaurantsInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutRestaurantsInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutRestaurantsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutRestaurantsInputSchema) ]),
}).strict();

export const UserCreateWithoutRestaurantInputSchema: z.ZodType<Prisma.UserCreateWithoutRestaurantInput> = z.object({
  email: z.string(),
  sub: z.number().int().optional().nullable(),
  passwordHash: z.string(),
  firstName: z.string(),
  lastName: z.string(),
  profileImage: z.string().optional().nullable(),
  verified: z.boolean().optional(),
  role: z.lazy(() => UserRoleSchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema).optional(),
  shifts: z.lazy(() => ShiftCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z.lazy(() => AvailabilityCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionCreateNestedManyWithoutApprovedByInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountCreateNestedManyWithoutCreatedByInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutRestaurantInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutRestaurantInput> = z.object({
  id: z.number().int().optional(),
  email: z.string(),
  sub: z.number().int().optional().nullable(),
  passwordHash: z.string(),
  firstName: z.string(),
  lastName: z.string(),
  profileImage: z.string().optional().nullable(),
  verified: z.boolean().optional(),
  role: z.lazy(() => UserRoleSchema),
  organizationId: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  shifts: z.lazy(() => ShiftUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteUncheckedCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutApprovedByInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutRestaurantInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutRestaurantInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutRestaurantInputSchema),z.lazy(() => UserUncheckedCreateWithoutRestaurantInputSchema) ]),
}).strict();

export const UserCreateManyRestaurantInputEnvelopeSchema: z.ZodType<Prisma.UserCreateManyRestaurantInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => UserCreateManyRestaurantInputSchema),z.lazy(() => UserCreateManyRestaurantInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const CookBookCreateWithoutRestaurantInputSchema: z.ZodType<Prisma.CookBookCreateWithoutRestaurantInput> = z.object({
  name: z.string(),
  imageUrl: z.string().optional().nullable(),
  category: z.string(),
  recipes: z.lazy(() => RecipeCreateNestedManyWithoutCookBookInputSchema).optional()
}).strict();

export const CookBookUncheckedCreateWithoutRestaurantInputSchema: z.ZodType<Prisma.CookBookUncheckedCreateWithoutRestaurantInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  imageUrl: z.string().optional().nullable(),
  category: z.string(),
  recipes: z.lazy(() => RecipeUncheckedCreateNestedManyWithoutCookBookInputSchema).optional()
}).strict();

export const CookBookCreateOrConnectWithoutRestaurantInputSchema: z.ZodType<Prisma.CookBookCreateOrConnectWithoutRestaurantInput> = z.object({
  where: z.lazy(() => CookBookWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CookBookCreateWithoutRestaurantInputSchema),z.lazy(() => CookBookUncheckedCreateWithoutRestaurantInputSchema) ]),
}).strict();

export const CookBookCreateManyRestaurantInputEnvelopeSchema: z.ZodType<Prisma.CookBookCreateManyRestaurantInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => CookBookCreateManyRestaurantInputSchema),z.lazy(() => CookBookCreateManyRestaurantInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const InventoryCreateWithoutRestaurantInputSchema: z.ZodType<Prisma.InventoryCreateWithoutRestaurantInput> = z.object({
  name: z.string().optional().nullable(),
  type: z.lazy(() => InventoryTypeSchema).optional(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  items: z.lazy(() => InventoryItemCreateNestedManyWithoutInventoryInputSchema).optional(),
  transactions: z.lazy(() => InventoryTransactionCreateNestedManyWithoutInventoryInputSchema).optional(),
  stockCounts: z.lazy(() => StockCountCreateNestedManyWithoutInventoryInputSchema).optional()
}).strict();

export const InventoryUncheckedCreateWithoutRestaurantInputSchema: z.ZodType<Prisma.InventoryUncheckedCreateWithoutRestaurantInput> = z.object({
  id: z.number().int().optional(),
  name: z.string().optional().nullable(),
  type: z.lazy(() => InventoryTypeSchema).optional(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  items: z.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutInventoryInputSchema).optional(),
  transactions: z.lazy(() => InventoryTransactionUncheckedCreateNestedManyWithoutInventoryInputSchema).optional(),
  stockCounts: z.lazy(() => StockCountUncheckedCreateNestedManyWithoutInventoryInputSchema).optional()
}).strict();

export const InventoryCreateOrConnectWithoutRestaurantInputSchema: z.ZodType<Prisma.InventoryCreateOrConnectWithoutRestaurantInput> = z.object({
  where: z.lazy(() => InventoryWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => InventoryCreateWithoutRestaurantInputSchema),z.lazy(() => InventoryUncheckedCreateWithoutRestaurantInputSchema) ]),
}).strict();

export const OrderCreateWithoutRestaurantInputSchema: z.ZodType<Prisma.OrderCreateWithoutRestaurantInput> = z.object({
  status: z.lazy(() => OrderStatusSchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  vendor: z.lazy(() => VendorCreateNestedOneWithoutOrdersInputSchema),
  items: z.lazy(() => OrderItemCreateNestedManyWithoutOrderInputSchema).optional()
}).strict();

export const OrderUncheckedCreateWithoutRestaurantInputSchema: z.ZodType<Prisma.OrderUncheckedCreateWithoutRestaurantInput> = z.object({
  id: z.number().int().optional(),
  vendorId: z.number().int(),
  status: z.lazy(() => OrderStatusSchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  items: z.lazy(() => OrderItemUncheckedCreateNestedManyWithoutOrderInputSchema).optional()
}).strict();

export const OrderCreateOrConnectWithoutRestaurantInputSchema: z.ZodType<Prisma.OrderCreateOrConnectWithoutRestaurantInput> = z.object({
  where: z.lazy(() => OrderWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrderCreateWithoutRestaurantInputSchema),z.lazy(() => OrderUncheckedCreateWithoutRestaurantInputSchema) ]),
}).strict();

export const OrderCreateManyRestaurantInputEnvelopeSchema: z.ZodType<Prisma.OrderCreateManyRestaurantInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => OrderCreateManyRestaurantInputSchema),z.lazy(() => OrderCreateManyRestaurantInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const RecipeCreateWithoutRestaurantInputSchema: z.ZodType<Prisma.RecipeCreateWithoutRestaurantInput> = z.object({
  name: z.string(),
  imageUrls: z.union([ z.lazy(() => RecipeCreateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.string().optional().nullable(),
  servings: z.number().int(),
  cookTime: z.number().int(),
  prepTime: z.number().int(),
  frequency: z.number().int().optional().nullable(),
  foodCost: z.number().optional().nullable(),
  isDeleted: z.boolean().optional(),
  isPublished: z.boolean().optional(),
  publishedAt: z.coerce.date().optional().nullable(),
  language: z.string().optional(),
  skillLevel: z.lazy(() => SkillLevelSchema).optional(),
  category: z.lazy(() => CategorySchema).optional(),
  cookBook: z.lazy(() => CookBookCreateNestedOneWithoutRecipesInputSchema),
  ingredients: z.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeCreateNestedManyWithoutRecipeInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z.lazy(() => RecipeTagCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionCreateNestedManyWithoutRecipesInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureCreateNestedManyWithoutRecipeInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldCreateNestedManyWithoutRecipeInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostCreateNestedManyWithoutRecipeInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionCreateNestedOneWithoutRecipeInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointCreateNestedManyWithoutRecipeInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageCreateNestedOneWithoutRecipeInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoCreateNestedManyWithoutRecipeInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsCreateNestedOneWithoutRecipeInputSchema).optional()
}).strict();

export const RecipeUncheckedCreateWithoutRestaurantInputSchema: z.ZodType<Prisma.RecipeUncheckedCreateWithoutRestaurantInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  imageUrls: z.union([ z.lazy(() => RecipeCreateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.string().optional().nullable(),
  servings: z.number().int(),
  cookTime: z.number().int(),
  prepTime: z.number().int(),
  frequency: z.number().int().optional().nullable(),
  cookBookId: z.number().int(),
  foodCost: z.number().optional().nullable(),
  isDeleted: z.boolean().optional(),
  isPublished: z.boolean().optional(),
  publishedAt: z.coerce.date().optional().nullable(),
  language: z.string().optional(),
  skillLevel: z.lazy(() => SkillLevelSchema).optional(),
  category: z.lazy(() => CategorySchema).optional(),
  ingredients: z.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUncheckedCreateNestedOneWithoutRecipeInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUncheckedCreateNestedOneWithoutRecipeInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUncheckedCreateNestedOneWithoutRecipeInputSchema).optional()
}).strict();

export const RecipeCreateOrConnectWithoutRestaurantInputSchema: z.ZodType<Prisma.RecipeCreateOrConnectWithoutRestaurantInput> = z.object({
  where: z.lazy(() => RecipeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RecipeCreateWithoutRestaurantInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutRestaurantInputSchema) ]),
}).strict();

export const RecipeCreateManyRestaurantInputEnvelopeSchema: z.ZodType<Prisma.RecipeCreateManyRestaurantInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => RecipeCreateManyRestaurantInputSchema),z.lazy(() => RecipeCreateManyRestaurantInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const MenuCreateWithoutRestaurantInputSchema: z.ZodType<Prisma.MenuCreateWithoutRestaurantInput> = z.object({
  name: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  menuItems: z.lazy(() => MenuItemCreateNestedManyWithoutMenuInputSchema).optional(),
  MenuCategory: z.lazy(() => MenuCategoryCreateNestedManyWithoutMenuInputSchema).optional()
}).strict();

export const MenuUncheckedCreateWithoutRestaurantInputSchema: z.ZodType<Prisma.MenuUncheckedCreateWithoutRestaurantInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  menuItems: z.lazy(() => MenuItemUncheckedCreateNestedManyWithoutMenuInputSchema).optional(),
  MenuCategory: z.lazy(() => MenuCategoryUncheckedCreateNestedManyWithoutMenuInputSchema).optional()
}).strict();

export const MenuCreateOrConnectWithoutRestaurantInputSchema: z.ZodType<Prisma.MenuCreateOrConnectWithoutRestaurantInput> = z.object({
  where: z.lazy(() => MenuWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => MenuCreateWithoutRestaurantInputSchema),z.lazy(() => MenuUncheckedCreateWithoutRestaurantInputSchema) ]),
}).strict();

export const MenuCreateManyRestaurantInputEnvelopeSchema: z.ZodType<Prisma.MenuCreateManyRestaurantInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => MenuCreateManyRestaurantInputSchema),z.lazy(() => MenuCreateManyRestaurantInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const SalesTransactionsCreateWithoutRestaurantInputSchema: z.ZodType<Prisma.SalesTransactionsCreateWithoutRestaurantInput> = z.object({
  posTransactionID: z.string().optional().nullable(),
  price: z.number(),
  total: z.number(),
  transactionDate: z.coerce.date(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  menuItem: z.lazy(() => MenuItemCreateNestedOneWithoutSalesTransactionsInputSchema)
}).strict();

export const SalesTransactionsUncheckedCreateWithoutRestaurantInputSchema: z.ZodType<Prisma.SalesTransactionsUncheckedCreateWithoutRestaurantInput> = z.object({
  id: z.number().int().optional(),
  posTransactionID: z.string().optional().nullable(),
  menuItemId: z.number().int(),
  price: z.number(),
  total: z.number(),
  transactionDate: z.coerce.date(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const SalesTransactionsCreateOrConnectWithoutRestaurantInputSchema: z.ZodType<Prisma.SalesTransactionsCreateOrConnectWithoutRestaurantInput> = z.object({
  where: z.lazy(() => SalesTransactionsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SalesTransactionsCreateWithoutRestaurantInputSchema),z.lazy(() => SalesTransactionsUncheckedCreateWithoutRestaurantInputSchema) ]),
}).strict();

export const SalesTransactionsCreateManyRestaurantInputEnvelopeSchema: z.ZodType<Prisma.SalesTransactionsCreateManyRestaurantInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => SalesTransactionsCreateManyRestaurantInputSchema),z.lazy(() => SalesTransactionsCreateManyRestaurantInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const LeftoverItemCreateWithoutRestaurantInputSchema: z.ZodType<Prisma.LeftoverItemCreateWithoutRestaurantInput> = z.object({
  date: z.coerce.date(),
  quantity: z.number().int(),
  reason: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  menuItem: z.lazy(() => MenuItemCreateNestedOneWithoutLeftoverItemsInputSchema),
  recordedBy: z.lazy(() => UserCreateNestedOneWithoutLeftoverItemsInputSchema)
}).strict();

export const LeftoverItemUncheckedCreateWithoutRestaurantInputSchema: z.ZodType<Prisma.LeftoverItemUncheckedCreateWithoutRestaurantInput> = z.object({
  id: z.number().int().optional(),
  date: z.coerce.date(),
  menuItemId: z.number().int(),
  quantity: z.number().int(),
  reason: z.string(),
  recordedById: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const LeftoverItemCreateOrConnectWithoutRestaurantInputSchema: z.ZodType<Prisma.LeftoverItemCreateOrConnectWithoutRestaurantInput> = z.object({
  where: z.lazy(() => LeftoverItemWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => LeftoverItemCreateWithoutRestaurantInputSchema),z.lazy(() => LeftoverItemUncheckedCreateWithoutRestaurantInputSchema) ]),
}).strict();

export const LeftoverItemCreateManyRestaurantInputEnvelopeSchema: z.ZodType<Prisma.LeftoverItemCreateManyRestaurantInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => LeftoverItemCreateManyRestaurantInputSchema),z.lazy(() => LeftoverItemCreateManyRestaurantInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const WasteRecordCreateWithoutRestaurantInputSchema: z.ZodType<Prisma.WasteRecordCreateWithoutRestaurantInput> = z.object({
  date: z.coerce.date(),
  quantity: z.number(),
  unit: z.string(),
  reason: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  ingrediente: z.lazy(() => IngredientCreateNestedOneWithoutWasteRecordsInputSchema),
  recordedBy: z.lazy(() => UserCreateNestedOneWithoutWasteRecordsInputSchema)
}).strict();

export const WasteRecordUncheckedCreateWithoutRestaurantInputSchema: z.ZodType<Prisma.WasteRecordUncheckedCreateWithoutRestaurantInput> = z.object({
  id: z.number().int().optional(),
  date: z.coerce.date(),
  ingredientId: z.number().int(),
  quantity: z.number(),
  unit: z.string(),
  reason: z.string(),
  recordedById: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const WasteRecordCreateOrConnectWithoutRestaurantInputSchema: z.ZodType<Prisma.WasteRecordCreateOrConnectWithoutRestaurantInput> = z.object({
  where: z.lazy(() => WasteRecordWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => WasteRecordCreateWithoutRestaurantInputSchema),z.lazy(() => WasteRecordUncheckedCreateWithoutRestaurantInputSchema) ]),
}).strict();

export const WasteRecordCreateManyRestaurantInputEnvelopeSchema: z.ZodType<Prisma.WasteRecordCreateManyRestaurantInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => WasteRecordCreateManyRestaurantInputSchema),z.lazy(() => WasteRecordCreateManyRestaurantInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ProductionPlanCreateWithoutRestaurantInputSchema: z.ZodType<Prisma.ProductionPlanCreateWithoutRestaurantInput> = z.object({
  date: z.coerce.date(),
  status: z.lazy(() => ProductionStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutProductionPlansInputSchema),
  items: z.lazy(() => ProductionPlanItemCreateNestedManyWithoutProductionPlanInputSchema).optional()
}).strict();

export const ProductionPlanUncheckedCreateWithoutRestaurantInputSchema: z.ZodType<Prisma.ProductionPlanUncheckedCreateWithoutRestaurantInput> = z.object({
  id: z.number().int().optional(),
  date: z.coerce.date(),
  status: z.lazy(() => ProductionStatusSchema).optional(),
  createdById: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  items: z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutProductionPlanInputSchema).optional()
}).strict();

export const ProductionPlanCreateOrConnectWithoutRestaurantInputSchema: z.ZodType<Prisma.ProductionPlanCreateOrConnectWithoutRestaurantInput> = z.object({
  where: z.lazy(() => ProductionPlanWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProductionPlanCreateWithoutRestaurantInputSchema),z.lazy(() => ProductionPlanUncheckedCreateWithoutRestaurantInputSchema) ]),
}).strict();

export const ProductionPlanCreateManyRestaurantInputEnvelopeSchema: z.ZodType<Prisma.ProductionPlanCreateManyRestaurantInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ProductionPlanCreateManyRestaurantInputSchema),z.lazy(() => ProductionPlanCreateManyRestaurantInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const EquipmentCreateWithoutRestaurantInputSchema: z.ZodType<Prisma.EquipmentCreateWithoutRestaurantInput> = z.object({
  name: z.string(),
  description: z.string().optional().nullable(),
  model: z.string().optional().nullable(),
  serialNumber: z.string().optional().nullable(),
  purchaseDate: z.coerce.date().optional().nullable(),
  lastMaintenance: z.coerce.date().optional().nullable(),
  nextMaintenance: z.coerce.date().optional().nullable(),
  status: z.lazy(() => EquipmentStatusSchema).optional(),
  location: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  recipes: z.lazy(() => RecipeEquipmentCreateNestedManyWithoutEquipmentInputSchema).optional(),
  maintenanceLogs: z.lazy(() => MaintenanceLogCreateNestedManyWithoutEquipmentInputSchema).optional()
}).strict();

export const EquipmentUncheckedCreateWithoutRestaurantInputSchema: z.ZodType<Prisma.EquipmentUncheckedCreateWithoutRestaurantInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  model: z.string().optional().nullable(),
  serialNumber: z.string().optional().nullable(),
  purchaseDate: z.coerce.date().optional().nullable(),
  lastMaintenance: z.coerce.date().optional().nullable(),
  nextMaintenance: z.coerce.date().optional().nullable(),
  status: z.lazy(() => EquipmentStatusSchema).optional(),
  location: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  recipes: z.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutEquipmentInputSchema).optional(),
  maintenanceLogs: z.lazy(() => MaintenanceLogUncheckedCreateNestedManyWithoutEquipmentInputSchema).optional()
}).strict();

export const EquipmentCreateOrConnectWithoutRestaurantInputSchema: z.ZodType<Prisma.EquipmentCreateOrConnectWithoutRestaurantInput> = z.object({
  where: z.lazy(() => EquipmentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EquipmentCreateWithoutRestaurantInputSchema),z.lazy(() => EquipmentUncheckedCreateWithoutRestaurantInputSchema) ]),
}).strict();

export const EquipmentCreateManyRestaurantInputEnvelopeSchema: z.ZodType<Prisma.EquipmentCreateManyRestaurantInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => EquipmentCreateManyRestaurantInputSchema),z.lazy(() => EquipmentCreateManyRestaurantInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const QualityChecklistCreateWithoutRestaurantInputSchema: z.ZodType<Prisma.QualityChecklistCreateWithoutRestaurantInput> = z.object({
  name: z.string(),
  description: z.string().optional().nullable(),
  frequency: z.lazy(() => ChecklistFrequencySchema).optional(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  items: z.lazy(() => ChecklistItemCreateNestedManyWithoutChecklistInputSchema).optional(),
  completions: z.lazy(() => ChecklistCompleteCreateNestedManyWithoutChecklistInputSchema).optional()
}).strict();

export const QualityChecklistUncheckedCreateWithoutRestaurantInputSchema: z.ZodType<Prisma.QualityChecklistUncheckedCreateWithoutRestaurantInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  frequency: z.lazy(() => ChecklistFrequencySchema).optional(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  items: z.lazy(() => ChecklistItemUncheckedCreateNestedManyWithoutChecklistInputSchema).optional(),
  completions: z.lazy(() => ChecklistCompleteUncheckedCreateNestedManyWithoutChecklistInputSchema).optional()
}).strict();

export const QualityChecklistCreateOrConnectWithoutRestaurantInputSchema: z.ZodType<Prisma.QualityChecklistCreateOrConnectWithoutRestaurantInput> = z.object({
  where: z.lazy(() => QualityChecklistWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => QualityChecklistCreateWithoutRestaurantInputSchema),z.lazy(() => QualityChecklistUncheckedCreateWithoutRestaurantInputSchema) ]),
}).strict();

export const QualityChecklistCreateManyRestaurantInputEnvelopeSchema: z.ZodType<Prisma.QualityChecklistCreateManyRestaurantInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => QualityChecklistCreateManyRestaurantInputSchema),z.lazy(() => QualityChecklistCreateManyRestaurantInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const CustomerFeedbackCreateWithoutRestaurantInputSchema: z.ZodType<Prisma.CustomerFeedbackCreateWithoutRestaurantInput> = z.object({
  rating: z.number().int(),
  comment: z.string().optional().nullable(),
  source: z.lazy(() => FeedbackSourceSchema),
  tags: z.union([ z.lazy(() => CustomerFeedbackCreatetagsInputSchema),z.string().array() ]).optional(),
  status: z.lazy(() => FeedbackStatusSchema).optional(),
  responseText: z.string().optional().nullable(),
  respondedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  menuItem: z.lazy(() => MenuItemCreateNestedOneWithoutFeedbackInputSchema).optional(),
  respondedBy: z.lazy(() => UserCreateNestedOneWithoutCustomerFeedbackResponsesInputSchema).optional()
}).strict();

export const CustomerFeedbackUncheckedCreateWithoutRestaurantInputSchema: z.ZodType<Prisma.CustomerFeedbackUncheckedCreateWithoutRestaurantInput> = z.object({
  id: z.number().int().optional(),
  menuItemId: z.number().int().optional().nullable(),
  rating: z.number().int(),
  comment: z.string().optional().nullable(),
  source: z.lazy(() => FeedbackSourceSchema),
  tags: z.union([ z.lazy(() => CustomerFeedbackCreatetagsInputSchema),z.string().array() ]).optional(),
  status: z.lazy(() => FeedbackStatusSchema).optional(),
  responseText: z.string().optional().nullable(),
  respondedAt: z.coerce.date().optional().nullable(),
  respondedById: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CustomerFeedbackCreateOrConnectWithoutRestaurantInputSchema: z.ZodType<Prisma.CustomerFeedbackCreateOrConnectWithoutRestaurantInput> = z.object({
  where: z.lazy(() => CustomerFeedbackWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CustomerFeedbackCreateWithoutRestaurantInputSchema),z.lazy(() => CustomerFeedbackUncheckedCreateWithoutRestaurantInputSchema) ]),
}).strict();

export const CustomerFeedbackCreateManyRestaurantInputEnvelopeSchema: z.ZodType<Prisma.CustomerFeedbackCreateManyRestaurantInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => CustomerFeedbackCreateManyRestaurantInputSchema),z.lazy(() => CustomerFeedbackCreateManyRestaurantInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const OrganizationUpsertWithoutRestaurantsInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutRestaurantsInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutRestaurantsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutRestaurantsInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutRestaurantsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutRestaurantsInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutRestaurantsInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutRestaurantsInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutRestaurantsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutRestaurantsInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutRestaurantsInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutRestaurantsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutRestaurantsInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutRestaurantsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const UserUpsertWithWhereUniqueWithoutRestaurantInputSchema: z.ZodType<Prisma.UserUpsertWithWhereUniqueWithoutRestaurantInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => UserUpdateWithoutRestaurantInputSchema),z.lazy(() => UserUncheckedUpdateWithoutRestaurantInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutRestaurantInputSchema),z.lazy(() => UserUncheckedCreateWithoutRestaurantInputSchema) ]),
}).strict();

export const UserUpdateWithWhereUniqueWithoutRestaurantInputSchema: z.ZodType<Prisma.UserUpdateWithWhereUniqueWithoutRestaurantInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => UserUpdateWithoutRestaurantInputSchema),z.lazy(() => UserUncheckedUpdateWithoutRestaurantInputSchema) ]),
}).strict();

export const UserUpdateManyWithWhereWithoutRestaurantInputSchema: z.ZodType<Prisma.UserUpdateManyWithWhereWithoutRestaurantInput> = z.object({
  where: z.lazy(() => UserScalarWhereInputSchema),
  data: z.union([ z.lazy(() => UserUpdateManyMutationInputSchema),z.lazy(() => UserUncheckedUpdateManyWithoutRestaurantInputSchema) ]),
}).strict();

export const CookBookUpsertWithWhereUniqueWithoutRestaurantInputSchema: z.ZodType<Prisma.CookBookUpsertWithWhereUniqueWithoutRestaurantInput> = z.object({
  where: z.lazy(() => CookBookWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CookBookUpdateWithoutRestaurantInputSchema),z.lazy(() => CookBookUncheckedUpdateWithoutRestaurantInputSchema) ]),
  create: z.union([ z.lazy(() => CookBookCreateWithoutRestaurantInputSchema),z.lazy(() => CookBookUncheckedCreateWithoutRestaurantInputSchema) ]),
}).strict();

export const CookBookUpdateWithWhereUniqueWithoutRestaurantInputSchema: z.ZodType<Prisma.CookBookUpdateWithWhereUniqueWithoutRestaurantInput> = z.object({
  where: z.lazy(() => CookBookWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CookBookUpdateWithoutRestaurantInputSchema),z.lazy(() => CookBookUncheckedUpdateWithoutRestaurantInputSchema) ]),
}).strict();

export const CookBookUpdateManyWithWhereWithoutRestaurantInputSchema: z.ZodType<Prisma.CookBookUpdateManyWithWhereWithoutRestaurantInput> = z.object({
  where: z.lazy(() => CookBookScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CookBookUpdateManyMutationInputSchema),z.lazy(() => CookBookUncheckedUpdateManyWithoutRestaurantInputSchema) ]),
}).strict();

export const CookBookScalarWhereInputSchema: z.ZodType<Prisma.CookBookScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CookBookScalarWhereInputSchema),z.lazy(() => CookBookScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CookBookScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CookBookScalarWhereInputSchema),z.lazy(() => CookBookScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  imageUrl: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  category: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  restaurantId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
}).strict();

export const InventoryUpsertWithoutRestaurantInputSchema: z.ZodType<Prisma.InventoryUpsertWithoutRestaurantInput> = z.object({
  update: z.union([ z.lazy(() => InventoryUpdateWithoutRestaurantInputSchema),z.lazy(() => InventoryUncheckedUpdateWithoutRestaurantInputSchema) ]),
  create: z.union([ z.lazy(() => InventoryCreateWithoutRestaurantInputSchema),z.lazy(() => InventoryUncheckedCreateWithoutRestaurantInputSchema) ]),
  where: z.lazy(() => InventoryWhereInputSchema).optional()
}).strict();

export const InventoryUpdateToOneWithWhereWithoutRestaurantInputSchema: z.ZodType<Prisma.InventoryUpdateToOneWithWhereWithoutRestaurantInput> = z.object({
  where: z.lazy(() => InventoryWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => InventoryUpdateWithoutRestaurantInputSchema),z.lazy(() => InventoryUncheckedUpdateWithoutRestaurantInputSchema) ]),
}).strict();

export const InventoryUpdateWithoutRestaurantInputSchema: z.ZodType<Prisma.InventoryUpdateWithoutRestaurantInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => InventoryTypeSchema),z.lazy(() => EnumInventoryTypeFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  items: z.lazy(() => InventoryItemUpdateManyWithoutInventoryNestedInputSchema).optional(),
  transactions: z.lazy(() => InventoryTransactionUpdateManyWithoutInventoryNestedInputSchema).optional(),
  stockCounts: z.lazy(() => StockCountUpdateManyWithoutInventoryNestedInputSchema).optional()
}).strict();

export const InventoryUncheckedUpdateWithoutRestaurantInputSchema: z.ZodType<Prisma.InventoryUncheckedUpdateWithoutRestaurantInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => InventoryTypeSchema),z.lazy(() => EnumInventoryTypeFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  items: z.lazy(() => InventoryItemUncheckedUpdateManyWithoutInventoryNestedInputSchema).optional(),
  transactions: z.lazy(() => InventoryTransactionUncheckedUpdateManyWithoutInventoryNestedInputSchema).optional(),
  stockCounts: z.lazy(() => StockCountUncheckedUpdateManyWithoutInventoryNestedInputSchema).optional()
}).strict();

export const OrderUpsertWithWhereUniqueWithoutRestaurantInputSchema: z.ZodType<Prisma.OrderUpsertWithWhereUniqueWithoutRestaurantInput> = z.object({
  where: z.lazy(() => OrderWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => OrderUpdateWithoutRestaurantInputSchema),z.lazy(() => OrderUncheckedUpdateWithoutRestaurantInputSchema) ]),
  create: z.union([ z.lazy(() => OrderCreateWithoutRestaurantInputSchema),z.lazy(() => OrderUncheckedCreateWithoutRestaurantInputSchema) ]),
}).strict();

export const OrderUpdateWithWhereUniqueWithoutRestaurantInputSchema: z.ZodType<Prisma.OrderUpdateWithWhereUniqueWithoutRestaurantInput> = z.object({
  where: z.lazy(() => OrderWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => OrderUpdateWithoutRestaurantInputSchema),z.lazy(() => OrderUncheckedUpdateWithoutRestaurantInputSchema) ]),
}).strict();

export const OrderUpdateManyWithWhereWithoutRestaurantInputSchema: z.ZodType<Prisma.OrderUpdateManyWithWhereWithoutRestaurantInput> = z.object({
  where: z.lazy(() => OrderScalarWhereInputSchema),
  data: z.union([ z.lazy(() => OrderUpdateManyMutationInputSchema),z.lazy(() => OrderUncheckedUpdateManyWithoutRestaurantInputSchema) ]),
}).strict();

export const OrderScalarWhereInputSchema: z.ZodType<Prisma.OrderScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => OrderScalarWhereInputSchema),z.lazy(() => OrderScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrderScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrderScalarWhereInputSchema),z.lazy(() => OrderScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  restaurantId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  vendorId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  status: z.union([ z.lazy(() => EnumOrderStatusFilterSchema),z.lazy(() => OrderStatusSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const RecipeUpsertWithWhereUniqueWithoutRestaurantInputSchema: z.ZodType<Prisma.RecipeUpsertWithWhereUniqueWithoutRestaurantInput> = z.object({
  where: z.lazy(() => RecipeWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => RecipeUpdateWithoutRestaurantInputSchema),z.lazy(() => RecipeUncheckedUpdateWithoutRestaurantInputSchema) ]),
  create: z.union([ z.lazy(() => RecipeCreateWithoutRestaurantInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutRestaurantInputSchema) ]),
}).strict();

export const RecipeUpdateWithWhereUniqueWithoutRestaurantInputSchema: z.ZodType<Prisma.RecipeUpdateWithWhereUniqueWithoutRestaurantInput> = z.object({
  where: z.lazy(() => RecipeWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => RecipeUpdateWithoutRestaurantInputSchema),z.lazy(() => RecipeUncheckedUpdateWithoutRestaurantInputSchema) ]),
}).strict();

export const RecipeUpdateManyWithWhereWithoutRestaurantInputSchema: z.ZodType<Prisma.RecipeUpdateManyWithWhereWithoutRestaurantInput> = z.object({
  where: z.lazy(() => RecipeScalarWhereInputSchema),
  data: z.union([ z.lazy(() => RecipeUpdateManyMutationInputSchema),z.lazy(() => RecipeUncheckedUpdateManyWithoutRestaurantInputSchema) ]),
}).strict();

export const MenuUpsertWithWhereUniqueWithoutRestaurantInputSchema: z.ZodType<Prisma.MenuUpsertWithWhereUniqueWithoutRestaurantInput> = z.object({
  where: z.lazy(() => MenuWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => MenuUpdateWithoutRestaurantInputSchema),z.lazy(() => MenuUncheckedUpdateWithoutRestaurantInputSchema) ]),
  create: z.union([ z.lazy(() => MenuCreateWithoutRestaurantInputSchema),z.lazy(() => MenuUncheckedCreateWithoutRestaurantInputSchema) ]),
}).strict();

export const MenuUpdateWithWhereUniqueWithoutRestaurantInputSchema: z.ZodType<Prisma.MenuUpdateWithWhereUniqueWithoutRestaurantInput> = z.object({
  where: z.lazy(() => MenuWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => MenuUpdateWithoutRestaurantInputSchema),z.lazy(() => MenuUncheckedUpdateWithoutRestaurantInputSchema) ]),
}).strict();

export const MenuUpdateManyWithWhereWithoutRestaurantInputSchema: z.ZodType<Prisma.MenuUpdateManyWithWhereWithoutRestaurantInput> = z.object({
  where: z.lazy(() => MenuScalarWhereInputSchema),
  data: z.union([ z.lazy(() => MenuUpdateManyMutationInputSchema),z.lazy(() => MenuUncheckedUpdateManyWithoutRestaurantInputSchema) ]),
}).strict();

export const MenuScalarWhereInputSchema: z.ZodType<Prisma.MenuScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => MenuScalarWhereInputSchema),z.lazy(() => MenuScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MenuScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MenuScalarWhereInputSchema),z.lazy(() => MenuScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  restaurantId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const SalesTransactionsUpsertWithWhereUniqueWithoutRestaurantInputSchema: z.ZodType<Prisma.SalesTransactionsUpsertWithWhereUniqueWithoutRestaurantInput> = z.object({
  where: z.lazy(() => SalesTransactionsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => SalesTransactionsUpdateWithoutRestaurantInputSchema),z.lazy(() => SalesTransactionsUncheckedUpdateWithoutRestaurantInputSchema) ]),
  create: z.union([ z.lazy(() => SalesTransactionsCreateWithoutRestaurantInputSchema),z.lazy(() => SalesTransactionsUncheckedCreateWithoutRestaurantInputSchema) ]),
}).strict();

export const SalesTransactionsUpdateWithWhereUniqueWithoutRestaurantInputSchema: z.ZodType<Prisma.SalesTransactionsUpdateWithWhereUniqueWithoutRestaurantInput> = z.object({
  where: z.lazy(() => SalesTransactionsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => SalesTransactionsUpdateWithoutRestaurantInputSchema),z.lazy(() => SalesTransactionsUncheckedUpdateWithoutRestaurantInputSchema) ]),
}).strict();

export const SalesTransactionsUpdateManyWithWhereWithoutRestaurantInputSchema: z.ZodType<Prisma.SalesTransactionsUpdateManyWithWhereWithoutRestaurantInput> = z.object({
  where: z.lazy(() => SalesTransactionsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => SalesTransactionsUpdateManyMutationInputSchema),z.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutRestaurantInputSchema) ]),
}).strict();

export const SalesTransactionsScalarWhereInputSchema: z.ZodType<Prisma.SalesTransactionsScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SalesTransactionsScalarWhereInputSchema),z.lazy(() => SalesTransactionsScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SalesTransactionsScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SalesTransactionsScalarWhereInputSchema),z.lazy(() => SalesTransactionsScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  posTransactionID: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  restaurantId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  menuItemId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  price: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  total: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  transactionDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const LeftoverItemUpsertWithWhereUniqueWithoutRestaurantInputSchema: z.ZodType<Prisma.LeftoverItemUpsertWithWhereUniqueWithoutRestaurantInput> = z.object({
  where: z.lazy(() => LeftoverItemWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => LeftoverItemUpdateWithoutRestaurantInputSchema),z.lazy(() => LeftoverItemUncheckedUpdateWithoutRestaurantInputSchema) ]),
  create: z.union([ z.lazy(() => LeftoverItemCreateWithoutRestaurantInputSchema),z.lazy(() => LeftoverItemUncheckedCreateWithoutRestaurantInputSchema) ]),
}).strict();

export const LeftoverItemUpdateWithWhereUniqueWithoutRestaurantInputSchema: z.ZodType<Prisma.LeftoverItemUpdateWithWhereUniqueWithoutRestaurantInput> = z.object({
  where: z.lazy(() => LeftoverItemWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => LeftoverItemUpdateWithoutRestaurantInputSchema),z.lazy(() => LeftoverItemUncheckedUpdateWithoutRestaurantInputSchema) ]),
}).strict();

export const LeftoverItemUpdateManyWithWhereWithoutRestaurantInputSchema: z.ZodType<Prisma.LeftoverItemUpdateManyWithWhereWithoutRestaurantInput> = z.object({
  where: z.lazy(() => LeftoverItemScalarWhereInputSchema),
  data: z.union([ z.lazy(() => LeftoverItemUpdateManyMutationInputSchema),z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRestaurantInputSchema) ]),
}).strict();

export const LeftoverItemScalarWhereInputSchema: z.ZodType<Prisma.LeftoverItemScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => LeftoverItemScalarWhereInputSchema),z.lazy(() => LeftoverItemScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LeftoverItemScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LeftoverItemScalarWhereInputSchema),z.lazy(() => LeftoverItemScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  restaurantId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  menuItemId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  quantity: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  reason: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  recordedById: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const WasteRecordUpsertWithWhereUniqueWithoutRestaurantInputSchema: z.ZodType<Prisma.WasteRecordUpsertWithWhereUniqueWithoutRestaurantInput> = z.object({
  where: z.lazy(() => WasteRecordWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => WasteRecordUpdateWithoutRestaurantInputSchema),z.lazy(() => WasteRecordUncheckedUpdateWithoutRestaurantInputSchema) ]),
  create: z.union([ z.lazy(() => WasteRecordCreateWithoutRestaurantInputSchema),z.lazy(() => WasteRecordUncheckedCreateWithoutRestaurantInputSchema) ]),
}).strict();

export const WasteRecordUpdateWithWhereUniqueWithoutRestaurantInputSchema: z.ZodType<Prisma.WasteRecordUpdateWithWhereUniqueWithoutRestaurantInput> = z.object({
  where: z.lazy(() => WasteRecordWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => WasteRecordUpdateWithoutRestaurantInputSchema),z.lazy(() => WasteRecordUncheckedUpdateWithoutRestaurantInputSchema) ]),
}).strict();

export const WasteRecordUpdateManyWithWhereWithoutRestaurantInputSchema: z.ZodType<Prisma.WasteRecordUpdateManyWithWhereWithoutRestaurantInput> = z.object({
  where: z.lazy(() => WasteRecordScalarWhereInputSchema),
  data: z.union([ z.lazy(() => WasteRecordUpdateManyMutationInputSchema),z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRestaurantInputSchema) ]),
}).strict();

export const WasteRecordScalarWhereInputSchema: z.ZodType<Prisma.WasteRecordScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => WasteRecordScalarWhereInputSchema),z.lazy(() => WasteRecordScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => WasteRecordScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => WasteRecordScalarWhereInputSchema),z.lazy(() => WasteRecordScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  restaurantId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  ingredientId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  quantity: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  unit: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  reason: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  recordedById: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ProductionPlanUpsertWithWhereUniqueWithoutRestaurantInputSchema: z.ZodType<Prisma.ProductionPlanUpsertWithWhereUniqueWithoutRestaurantInput> = z.object({
  where: z.lazy(() => ProductionPlanWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ProductionPlanUpdateWithoutRestaurantInputSchema),z.lazy(() => ProductionPlanUncheckedUpdateWithoutRestaurantInputSchema) ]),
  create: z.union([ z.lazy(() => ProductionPlanCreateWithoutRestaurantInputSchema),z.lazy(() => ProductionPlanUncheckedCreateWithoutRestaurantInputSchema) ]),
}).strict();

export const ProductionPlanUpdateWithWhereUniqueWithoutRestaurantInputSchema: z.ZodType<Prisma.ProductionPlanUpdateWithWhereUniqueWithoutRestaurantInput> = z.object({
  where: z.lazy(() => ProductionPlanWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ProductionPlanUpdateWithoutRestaurantInputSchema),z.lazy(() => ProductionPlanUncheckedUpdateWithoutRestaurantInputSchema) ]),
}).strict();

export const ProductionPlanUpdateManyWithWhereWithoutRestaurantInputSchema: z.ZodType<Prisma.ProductionPlanUpdateManyWithWhereWithoutRestaurantInput> = z.object({
  where: z.lazy(() => ProductionPlanScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ProductionPlanUpdateManyMutationInputSchema),z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutRestaurantInputSchema) ]),
}).strict();

export const ProductionPlanScalarWhereInputSchema: z.ZodType<Prisma.ProductionPlanScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ProductionPlanScalarWhereInputSchema),z.lazy(() => ProductionPlanScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProductionPlanScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProductionPlanScalarWhereInputSchema),z.lazy(() => ProductionPlanScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  restaurantId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  status: z.union([ z.lazy(() => EnumProductionStatusFilterSchema),z.lazy(() => ProductionStatusSchema) ]).optional(),
  createdById: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const EquipmentUpsertWithWhereUniqueWithoutRestaurantInputSchema: z.ZodType<Prisma.EquipmentUpsertWithWhereUniqueWithoutRestaurantInput> = z.object({
  where: z.lazy(() => EquipmentWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => EquipmentUpdateWithoutRestaurantInputSchema),z.lazy(() => EquipmentUncheckedUpdateWithoutRestaurantInputSchema) ]),
  create: z.union([ z.lazy(() => EquipmentCreateWithoutRestaurantInputSchema),z.lazy(() => EquipmentUncheckedCreateWithoutRestaurantInputSchema) ]),
}).strict();

export const EquipmentUpdateWithWhereUniqueWithoutRestaurantInputSchema: z.ZodType<Prisma.EquipmentUpdateWithWhereUniqueWithoutRestaurantInput> = z.object({
  where: z.lazy(() => EquipmentWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => EquipmentUpdateWithoutRestaurantInputSchema),z.lazy(() => EquipmentUncheckedUpdateWithoutRestaurantInputSchema) ]),
}).strict();

export const EquipmentUpdateManyWithWhereWithoutRestaurantInputSchema: z.ZodType<Prisma.EquipmentUpdateManyWithWhereWithoutRestaurantInput> = z.object({
  where: z.lazy(() => EquipmentScalarWhereInputSchema),
  data: z.union([ z.lazy(() => EquipmentUpdateManyMutationInputSchema),z.lazy(() => EquipmentUncheckedUpdateManyWithoutRestaurantInputSchema) ]),
}).strict();

export const EquipmentScalarWhereInputSchema: z.ZodType<Prisma.EquipmentScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => EquipmentScalarWhereInputSchema),z.lazy(() => EquipmentScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EquipmentScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EquipmentScalarWhereInputSchema),z.lazy(() => EquipmentScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  model: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  serialNumber: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  purchaseDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  lastMaintenance: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  nextMaintenance: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  status: z.union([ z.lazy(() => EnumEquipmentStatusFilterSchema),z.lazy(() => EquipmentStatusSchema) ]).optional(),
  location: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  restaurantId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const QualityChecklistUpsertWithWhereUniqueWithoutRestaurantInputSchema: z.ZodType<Prisma.QualityChecklistUpsertWithWhereUniqueWithoutRestaurantInput> = z.object({
  where: z.lazy(() => QualityChecklistWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => QualityChecklistUpdateWithoutRestaurantInputSchema),z.lazy(() => QualityChecklistUncheckedUpdateWithoutRestaurantInputSchema) ]),
  create: z.union([ z.lazy(() => QualityChecklistCreateWithoutRestaurantInputSchema),z.lazy(() => QualityChecklistUncheckedCreateWithoutRestaurantInputSchema) ]),
}).strict();

export const QualityChecklistUpdateWithWhereUniqueWithoutRestaurantInputSchema: z.ZodType<Prisma.QualityChecklistUpdateWithWhereUniqueWithoutRestaurantInput> = z.object({
  where: z.lazy(() => QualityChecklistWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => QualityChecklistUpdateWithoutRestaurantInputSchema),z.lazy(() => QualityChecklistUncheckedUpdateWithoutRestaurantInputSchema) ]),
}).strict();

export const QualityChecklistUpdateManyWithWhereWithoutRestaurantInputSchema: z.ZodType<Prisma.QualityChecklistUpdateManyWithWhereWithoutRestaurantInput> = z.object({
  where: z.lazy(() => QualityChecklistScalarWhereInputSchema),
  data: z.union([ z.lazy(() => QualityChecklistUpdateManyMutationInputSchema),z.lazy(() => QualityChecklistUncheckedUpdateManyWithoutRestaurantInputSchema) ]),
}).strict();

export const QualityChecklistScalarWhereInputSchema: z.ZodType<Prisma.QualityChecklistScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => QualityChecklistScalarWhereInputSchema),z.lazy(() => QualityChecklistScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => QualityChecklistScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => QualityChecklistScalarWhereInputSchema),z.lazy(() => QualityChecklistScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  restaurantId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  frequency: z.union([ z.lazy(() => EnumChecklistFrequencyFilterSchema),z.lazy(() => ChecklistFrequencySchema) ]).optional(),
  isActive: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const CustomerFeedbackUpsertWithWhereUniqueWithoutRestaurantInputSchema: z.ZodType<Prisma.CustomerFeedbackUpsertWithWhereUniqueWithoutRestaurantInput> = z.object({
  where: z.lazy(() => CustomerFeedbackWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CustomerFeedbackUpdateWithoutRestaurantInputSchema),z.lazy(() => CustomerFeedbackUncheckedUpdateWithoutRestaurantInputSchema) ]),
  create: z.union([ z.lazy(() => CustomerFeedbackCreateWithoutRestaurantInputSchema),z.lazy(() => CustomerFeedbackUncheckedCreateWithoutRestaurantInputSchema) ]),
}).strict();

export const CustomerFeedbackUpdateWithWhereUniqueWithoutRestaurantInputSchema: z.ZodType<Prisma.CustomerFeedbackUpdateWithWhereUniqueWithoutRestaurantInput> = z.object({
  where: z.lazy(() => CustomerFeedbackWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CustomerFeedbackUpdateWithoutRestaurantInputSchema),z.lazy(() => CustomerFeedbackUncheckedUpdateWithoutRestaurantInputSchema) ]),
}).strict();

export const CustomerFeedbackUpdateManyWithWhereWithoutRestaurantInputSchema: z.ZodType<Prisma.CustomerFeedbackUpdateManyWithWhereWithoutRestaurantInput> = z.object({
  where: z.lazy(() => CustomerFeedbackScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CustomerFeedbackUpdateManyMutationInputSchema),z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRestaurantInputSchema) ]),
}).strict();

export const CustomerFeedbackScalarWhereInputSchema: z.ZodType<Prisma.CustomerFeedbackScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CustomerFeedbackScalarWhereInputSchema),z.lazy(() => CustomerFeedbackScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CustomerFeedbackScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CustomerFeedbackScalarWhereInputSchema),z.lazy(() => CustomerFeedbackScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  restaurantId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  menuItemId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  rating: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  comment: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  source: z.union([ z.lazy(() => EnumFeedbackSourceFilterSchema),z.lazy(() => FeedbackSourceSchema) ]).optional(),
  tags: z.lazy(() => StringNullableListFilterSchema).optional(),
  status: z.union([ z.lazy(() => EnumFeedbackStatusFilterSchema),z.lazy(() => FeedbackStatusSchema) ]).optional(),
  responseText: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  respondedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  respondedById: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const OrganizationCreateWithoutUsersInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutUsersInput> = z.object({
  name: z.string(),
  imageUrl: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  restaurants: z.lazy(() => RestaurantCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutUsersInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutUsersInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  imageUrl: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  restaurants: z.lazy(() => RestaurantUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutUsersInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutUsersInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutUsersInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const RestaurantCreateWithoutUsersInputSchema: z.ZodType<Prisma.RestaurantCreateWithoutUsersInput> = z.object({
  name: z.string(),
  imageUrl: z.string().optional().nullable(),
  address: z.string(),
  city: z.string(),
  zipCode: z.string(),
  state: z.string(),
  owner: z.string(),
  foodCost: z.number().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  isDeleted: z.boolean().optional(),
  deleted: z.coerce.date().optional().nullable(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutRestaurantsInputSchema).optional(),
  cookbooks: z.lazy(() => CookBookCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: z.lazy(() => InventoryCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: z.lazy(() => OrderCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: z.lazy(() => RecipeCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: z.lazy(() => MenuCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipments: z.lazy(() => EquipmentCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklists: z.lazy(() => QualityChecklistCreateNestedManyWithoutRestaurantInputSchema).optional(),
  customerFeedbacks: z.lazy(() => CustomerFeedbackCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();

export const RestaurantUncheckedCreateWithoutUsersInputSchema: z.ZodType<Prisma.RestaurantUncheckedCreateWithoutUsersInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  imageUrl: z.string().optional().nullable(),
  address: z.string(),
  city: z.string(),
  zipCode: z.string(),
  state: z.string(),
  owner: z.string(),
  organizationId: z.number().int().optional().nullable(),
  foodCost: z.number().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  isDeleted: z.boolean().optional(),
  deleted: z.coerce.date().optional().nullable(),
  cookbooks: z.lazy(() => CookBookUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: z.lazy(() => InventoryUncheckedCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: z.lazy(() => OrderUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: z.lazy(() => RecipeUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: z.lazy(() => MenuUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipments: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklists: z.lazy(() => QualityChecklistUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  customerFeedbacks: z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();

export const RestaurantCreateOrConnectWithoutUsersInputSchema: z.ZodType<Prisma.RestaurantCreateOrConnectWithoutUsersInput> = z.object({
  where: z.lazy(() => RestaurantWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RestaurantCreateWithoutUsersInputSchema),z.lazy(() => RestaurantUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const ShiftCreateWithoutUserInputSchema: z.ZodType<Prisma.ShiftCreateWithoutUserInput> = z.object({
  startTime: z.coerce.date(),
  endTime: z.coerce.date(),
  status: z.lazy(() => ShiftStatusSchema),
  tasks: z.lazy(() => ShiftTaskCreateNestedManyWithoutShiftInputSchema).optional()
}).strict();

export const ShiftUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.ShiftUncheckedCreateWithoutUserInput> = z.object({
  id: z.number().int().optional(),
  startTime: z.coerce.date(),
  endTime: z.coerce.date(),
  status: z.lazy(() => ShiftStatusSchema),
  tasks: z.lazy(() => ShiftTaskUncheckedCreateNestedManyWithoutShiftInputSchema).optional()
}).strict();

export const ShiftCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.ShiftCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => ShiftWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ShiftCreateWithoutUserInputSchema),z.lazy(() => ShiftUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const ShiftCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.ShiftCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ShiftCreateManyUserInputSchema),z.lazy(() => ShiftCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const PrepItemCreateWithoutAssignedToInputSchema: z.ZodType<Prisma.PrepItemCreateWithoutAssignedToInput> = z.object({
  quantity: z.number().int(),
  status: z.lazy(() => PrepStatusSchema),
  prepBoard: z.lazy(() => PrepBoardCreateNestedOneWithoutPrepItemsInputSchema),
  recipe: z.lazy(() => RecipeCreateNestedOneWithoutPrepItemsInputSchema)
}).strict();

export const PrepItemUncheckedCreateWithoutAssignedToInputSchema: z.ZodType<Prisma.PrepItemUncheckedCreateWithoutAssignedToInput> = z.object({
  id: z.number().int().optional(),
  prepBoardId: z.number().int(),
  recipeId: z.number().int(),
  quantity: z.number().int(),
  status: z.lazy(() => PrepStatusSchema)
}).strict();

export const PrepItemCreateOrConnectWithoutAssignedToInputSchema: z.ZodType<Prisma.PrepItemCreateOrConnectWithoutAssignedToInput> = z.object({
  where: z.lazy(() => PrepItemWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PrepItemCreateWithoutAssignedToInputSchema),z.lazy(() => PrepItemUncheckedCreateWithoutAssignedToInputSchema) ]),
}).strict();

export const PrepItemCreateManyAssignedToInputEnvelopeSchema: z.ZodType<Prisma.PrepItemCreateManyAssignedToInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => PrepItemCreateManyAssignedToInputSchema),z.lazy(() => PrepItemCreateManyAssignedToInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const InventoryItemCreateWithoutLastUpdatedByInputSchema: z.ZodType<Prisma.InventoryItemCreateWithoutLastUpdatedByInput> = z.object({
  quantity: z.number(),
  unit: z.string(),
  minQuantity: z.number(),
  restockThreshold: z.number(),
  lastCountDate: z.coerce.date().optional().nullable(),
  lastOrderDate: z.coerce.date().optional().nullable(),
  lastUpdated: z.coerce.date().optional(),
  par: z.number(),
  reorderPoint: z.number(),
  maxQuantity: z.number().optional().nullable(),
  location: z.string().optional().nullable(),
  barcode: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  currentPrice: z.number(),
  averageCost: z.number(),
  lastPurchasePrice: z.number().optional().nullable(),
  inventory: z.lazy(() => InventoryCreateNestedOneWithoutItemsInputSchema),
  ingredient: z.lazy(() => IngredientCreateNestedOneWithoutInventoryItemsInputSchema),
  transactions: z.lazy(() => InventoryTransactionCreateNestedManyWithoutItemInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutInventoryItemInputSchema).optional(),
  stockCounts: z.lazy(() => StockCountItemCreateNestedManyWithoutItemInputSchema).optional()
}).strict();

export const InventoryItemUncheckedCreateWithoutLastUpdatedByInputSchema: z.ZodType<Prisma.InventoryItemUncheckedCreateWithoutLastUpdatedByInput> = z.object({
  id: z.number().int().optional(),
  inventoryId: z.number().int(),
  ingredientId: z.number().int(),
  quantity: z.number(),
  unit: z.string(),
  minQuantity: z.number(),
  restockThreshold: z.number(),
  lastCountDate: z.coerce.date().optional().nullable(),
  lastOrderDate: z.coerce.date().optional().nullable(),
  lastUpdated: z.coerce.date().optional(),
  par: z.number(),
  reorderPoint: z.number(),
  maxQuantity: z.number().optional().nullable(),
  location: z.string().optional().nullable(),
  barcode: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  currentPrice: z.number(),
  averageCost: z.number(),
  lastPurchasePrice: z.number().optional().nullable(),
  transactions: z.lazy(() => InventoryTransactionUncheckedCreateNestedManyWithoutItemInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutInventoryItemInputSchema).optional(),
  stockCounts: z.lazy(() => StockCountItemUncheckedCreateNestedManyWithoutItemInputSchema).optional()
}).strict();

export const InventoryItemCreateOrConnectWithoutLastUpdatedByInputSchema: z.ZodType<Prisma.InventoryItemCreateOrConnectWithoutLastUpdatedByInput> = z.object({
  where: z.lazy(() => InventoryItemWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => InventoryItemCreateWithoutLastUpdatedByInputSchema),z.lazy(() => InventoryItemUncheckedCreateWithoutLastUpdatedByInputSchema) ]),
}).strict();

export const InventoryItemCreateManyLastUpdatedByInputEnvelopeSchema: z.ZodType<Prisma.InventoryItemCreateManyLastUpdatedByInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => InventoryItemCreateManyLastUpdatedByInputSchema),z.lazy(() => InventoryItemCreateManyLastUpdatedByInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const SessionCreateWithoutUserInputSchema: z.ZodType<Prisma.SessionCreateWithoutUserInput> = z.object({
  id: z.string().uuid().optional(),
  code: z.string(),
  token: z.string(),
  expiresAt: z.coerce.date(),
  createdAt: z.coerce.date().optional()
}).strict();

export const SessionUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.SessionUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().uuid().optional(),
  code: z.string(),
  token: z.string(),
  expiresAt: z.coerce.date(),
  createdAt: z.coerce.date().optional()
}).strict();

export const SessionCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.SessionCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => SessionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const SessionCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.SessionCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => SessionCreateManyUserInputSchema),z.lazy(() => SessionCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const PasswordResetCreateWithoutUserInputSchema: z.ZodType<Prisma.PasswordResetCreateWithoutUserInput> = z.object({
  token: z.string(),
  expiresAt: z.coerce.date(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const PasswordResetUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.PasswordResetUncheckedCreateWithoutUserInput> = z.object({
  id: z.number().int().optional(),
  token: z.string(),
  expiresAt: z.coerce.date(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const PasswordResetCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.PasswordResetCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => PasswordResetWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PasswordResetCreateWithoutUserInputSchema),z.lazy(() => PasswordResetUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const PasswordResetCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.PasswordResetCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => PasswordResetCreateManyUserInputSchema),z.lazy(() => PasswordResetCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const LeftoverItemCreateWithoutRecordedByInputSchema: z.ZodType<Prisma.LeftoverItemCreateWithoutRecordedByInput> = z.object({
  date: z.coerce.date(),
  quantity: z.number().int(),
  reason: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutLeftoverItemsInputSchema),
  menuItem: z.lazy(() => MenuItemCreateNestedOneWithoutLeftoverItemsInputSchema)
}).strict();

export const LeftoverItemUncheckedCreateWithoutRecordedByInputSchema: z.ZodType<Prisma.LeftoverItemUncheckedCreateWithoutRecordedByInput> = z.object({
  id: z.number().int().optional(),
  restaurantId: z.number().int(),
  date: z.coerce.date(),
  menuItemId: z.number().int(),
  quantity: z.number().int(),
  reason: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const LeftoverItemCreateOrConnectWithoutRecordedByInputSchema: z.ZodType<Prisma.LeftoverItemCreateOrConnectWithoutRecordedByInput> = z.object({
  where: z.lazy(() => LeftoverItemWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => LeftoverItemCreateWithoutRecordedByInputSchema),z.lazy(() => LeftoverItemUncheckedCreateWithoutRecordedByInputSchema) ]),
}).strict();

export const LeftoverItemCreateManyRecordedByInputEnvelopeSchema: z.ZodType<Prisma.LeftoverItemCreateManyRecordedByInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => LeftoverItemCreateManyRecordedByInputSchema),z.lazy(() => LeftoverItemCreateManyRecordedByInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const WasteRecordCreateWithoutRecordedByInputSchema: z.ZodType<Prisma.WasteRecordCreateWithoutRecordedByInput> = z.object({
  date: z.coerce.date(),
  quantity: z.number(),
  unit: z.string(),
  reason: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutWasteRecordsInputSchema),
  ingrediente: z.lazy(() => IngredientCreateNestedOneWithoutWasteRecordsInputSchema)
}).strict();

export const WasteRecordUncheckedCreateWithoutRecordedByInputSchema: z.ZodType<Prisma.WasteRecordUncheckedCreateWithoutRecordedByInput> = z.object({
  id: z.number().int().optional(),
  restaurantId: z.number().int(),
  date: z.coerce.date(),
  ingredientId: z.number().int(),
  quantity: z.number(),
  unit: z.string(),
  reason: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const WasteRecordCreateOrConnectWithoutRecordedByInputSchema: z.ZodType<Prisma.WasteRecordCreateOrConnectWithoutRecordedByInput> = z.object({
  where: z.lazy(() => WasteRecordWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => WasteRecordCreateWithoutRecordedByInputSchema),z.lazy(() => WasteRecordUncheckedCreateWithoutRecordedByInputSchema) ]),
}).strict();

export const WasteRecordCreateManyRecordedByInputEnvelopeSchema: z.ZodType<Prisma.WasteRecordCreateManyRecordedByInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => WasteRecordCreateManyRecordedByInputSchema),z.lazy(() => WasteRecordCreateManyRecordedByInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ProductionPlanCreateWithoutCreatedByInputSchema: z.ZodType<Prisma.ProductionPlanCreateWithoutCreatedByInput> = z.object({
  date: z.coerce.date(),
  status: z.lazy(() => ProductionStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutProductionPlansInputSchema),
  items: z.lazy(() => ProductionPlanItemCreateNestedManyWithoutProductionPlanInputSchema).optional()
}).strict();

export const ProductionPlanUncheckedCreateWithoutCreatedByInputSchema: z.ZodType<Prisma.ProductionPlanUncheckedCreateWithoutCreatedByInput> = z.object({
  id: z.number().int().optional(),
  restaurantId: z.number().int(),
  date: z.coerce.date(),
  status: z.lazy(() => ProductionStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  items: z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutProductionPlanInputSchema).optional()
}).strict();

export const ProductionPlanCreateOrConnectWithoutCreatedByInputSchema: z.ZodType<Prisma.ProductionPlanCreateOrConnectWithoutCreatedByInput> = z.object({
  where: z.lazy(() => ProductionPlanWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProductionPlanCreateWithoutCreatedByInputSchema),z.lazy(() => ProductionPlanUncheckedCreateWithoutCreatedByInputSchema) ]),
}).strict();

export const ProductionPlanCreateManyCreatedByInputEnvelopeSchema: z.ZodType<Prisma.ProductionPlanCreateManyCreatedByInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ProductionPlanCreateManyCreatedByInputSchema),z.lazy(() => ProductionPlanCreateManyCreatedByInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ProductionPlanItemCreateWithoutAssignedToInputSchema: z.ZodType<Prisma.ProductionPlanItemCreateWithoutAssignedToInput> = z.object({
  quantity: z.number().int(),
  unit: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  productionPlan: z.lazy(() => ProductionPlanCreateNestedOneWithoutItemsInputSchema),
  recipe: z.lazy(() => RecipeCreateNestedOneWithoutProductionPlanItemsInputSchema)
}).strict();

export const ProductionPlanItemUncheckedCreateWithoutAssignedToInputSchema: z.ZodType<Prisma.ProductionPlanItemUncheckedCreateWithoutAssignedToInput> = z.object({
  id: z.number().int().optional(),
  productionPlanId: z.number().int(),
  recipeId: z.number().int(),
  quantity: z.number().int(),
  unit: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ProductionPlanItemCreateOrConnectWithoutAssignedToInputSchema: z.ZodType<Prisma.ProductionPlanItemCreateOrConnectWithoutAssignedToInput> = z.object({
  where: z.lazy(() => ProductionPlanItemWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProductionPlanItemCreateWithoutAssignedToInputSchema),z.lazy(() => ProductionPlanItemUncheckedCreateWithoutAssignedToInputSchema) ]),
}).strict();

export const ProductionPlanItemCreateManyAssignedToInputEnvelopeSchema: z.ZodType<Prisma.ProductionPlanItemCreateManyAssignedToInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ProductionPlanItemCreateManyAssignedToInputSchema),z.lazy(() => ProductionPlanItemCreateManyAssignedToInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const AvailabilityCreateWithoutUserInputSchema: z.ZodType<Prisma.AvailabilityCreateWithoutUserInput> = z.object({
  dayOfWeek: z.lazy(() => DayOfWeekSchema),
  startTime: z.coerce.date(),
  endTime: z.coerce.date(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const AvailabilityUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.AvailabilityUncheckedCreateWithoutUserInput> = z.object({
  id: z.number().int().optional(),
  dayOfWeek: z.lazy(() => DayOfWeekSchema),
  startTime: z.coerce.date(),
  endTime: z.coerce.date(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const AvailabilityCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.AvailabilityCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => AvailabilityWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AvailabilityCreateWithoutUserInputSchema),z.lazy(() => AvailabilityUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const AvailabilityCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.AvailabilityCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => AvailabilityCreateManyUserInputSchema),z.lazy(() => AvailabilityCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const SchedulingConstraintCreateWithoutUserInputSchema: z.ZodType<Prisma.SchedulingConstraintCreateWithoutUserInput> = z.object({
  date: z.coerce.date(),
  constraintsType: z.lazy(() => ConstraintTypeSchema),
  startTime: z.coerce.date(),
  endTime: z.coerce.date(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const SchedulingConstraintUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.SchedulingConstraintUncheckedCreateWithoutUserInput> = z.object({
  id: z.number().int().optional(),
  date: z.coerce.date(),
  constraintsType: z.lazy(() => ConstraintTypeSchema),
  startTime: z.coerce.date(),
  endTime: z.coerce.date(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const SchedulingConstraintCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.SchedulingConstraintCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => SchedulingConstraintWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SchedulingConstraintCreateWithoutUserInputSchema),z.lazy(() => SchedulingConstraintUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const SchedulingConstraintCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.SchedulingConstraintCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => SchedulingConstraintCreateManyUserInputSchema),z.lazy(() => SchedulingConstraintCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const InventoryWithdrawalCreateWithoutCreatedByInputSchema: z.ZodType<Prisma.InventoryWithdrawalCreateWithoutCreatedByInput> = z.object({
  dateTime: z.coerce.date(),
  quantity: z.number(),
  unit: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  inventoryItem: z.lazy(() => InventoryItemCreateNestedOneWithoutWithdrawalsInputSchema),
  recipe: z.lazy(() => RecipeCreateNestedOneWithoutWithdrawalsInputSchema).optional()
}).strict();

export const InventoryWithdrawalUncheckedCreateWithoutCreatedByInputSchema: z.ZodType<Prisma.InventoryWithdrawalUncheckedCreateWithoutCreatedByInput> = z.object({
  id: z.number().int().optional(),
  inventoryItemId: z.number().int(),
  dateTime: z.coerce.date(),
  quantity: z.number(),
  unit: z.string(),
  recipeId: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const InventoryWithdrawalCreateOrConnectWithoutCreatedByInputSchema: z.ZodType<Prisma.InventoryWithdrawalCreateOrConnectWithoutCreatedByInput> = z.object({
  where: z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => InventoryWithdrawalCreateWithoutCreatedByInputSchema),z.lazy(() => InventoryWithdrawalUncheckedCreateWithoutCreatedByInputSchema) ]),
}).strict();

export const InventoryWithdrawalCreateManyCreatedByInputEnvelopeSchema: z.ZodType<Prisma.InventoryWithdrawalCreateManyCreatedByInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => InventoryWithdrawalCreateManyCreatedByInputSchema),z.lazy(() => InventoryWithdrawalCreateManyCreatedByInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ChecklistCompleteCreateWithoutCompletedByInputSchema: z.ZodType<Prisma.ChecklistCompleteCreateWithoutCompletedByInput> = z.object({
  date: z.coerce.date(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  checklist: z.lazy(() => QualityChecklistCreateNestedOneWithoutCompletionsInputSchema),
  items: z.lazy(() => ChecklistItemCompleteCreateNestedManyWithoutChecklistCompleteInputSchema).optional()
}).strict();

export const ChecklistCompleteUncheckedCreateWithoutCompletedByInputSchema: z.ZodType<Prisma.ChecklistCompleteUncheckedCreateWithoutCompletedByInput> = z.object({
  id: z.number().int().optional(),
  checklistId: z.number().int(),
  date: z.coerce.date(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  items: z.lazy(() => ChecklistItemCompleteUncheckedCreateNestedManyWithoutChecklistCompleteInputSchema).optional()
}).strict();

export const ChecklistCompleteCreateOrConnectWithoutCompletedByInputSchema: z.ZodType<Prisma.ChecklistCompleteCreateOrConnectWithoutCompletedByInput> = z.object({
  where: z.lazy(() => ChecklistCompleteWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ChecklistCompleteCreateWithoutCompletedByInputSchema),z.lazy(() => ChecklistCompleteUncheckedCreateWithoutCompletedByInputSchema) ]),
}).strict();

export const ChecklistCompleteCreateManyCompletedByInputEnvelopeSchema: z.ZodType<Prisma.ChecklistCompleteCreateManyCompletedByInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ChecklistCompleteCreateManyCompletedByInputSchema),z.lazy(() => ChecklistCompleteCreateManyCompletedByInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const CustomerFeedbackCreateWithoutRespondedByInputSchema: z.ZodType<Prisma.CustomerFeedbackCreateWithoutRespondedByInput> = z.object({
  rating: z.number().int(),
  comment: z.string().optional().nullable(),
  source: z.lazy(() => FeedbackSourceSchema),
  tags: z.union([ z.lazy(() => CustomerFeedbackCreatetagsInputSchema),z.string().array() ]).optional(),
  status: z.lazy(() => FeedbackStatusSchema).optional(),
  responseText: z.string().optional().nullable(),
  respondedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutCustomerFeedbacksInputSchema),
  menuItem: z.lazy(() => MenuItemCreateNestedOneWithoutFeedbackInputSchema).optional()
}).strict();

export const CustomerFeedbackUncheckedCreateWithoutRespondedByInputSchema: z.ZodType<Prisma.CustomerFeedbackUncheckedCreateWithoutRespondedByInput> = z.object({
  id: z.number().int().optional(),
  restaurantId: z.number().int(),
  menuItemId: z.number().int().optional().nullable(),
  rating: z.number().int(),
  comment: z.string().optional().nullable(),
  source: z.lazy(() => FeedbackSourceSchema),
  tags: z.union([ z.lazy(() => CustomerFeedbackCreatetagsInputSchema),z.string().array() ]).optional(),
  status: z.lazy(() => FeedbackStatusSchema).optional(),
  responseText: z.string().optional().nullable(),
  respondedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CustomerFeedbackCreateOrConnectWithoutRespondedByInputSchema: z.ZodType<Prisma.CustomerFeedbackCreateOrConnectWithoutRespondedByInput> = z.object({
  where: z.lazy(() => CustomerFeedbackWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CustomerFeedbackCreateWithoutRespondedByInputSchema),z.lazy(() => CustomerFeedbackUncheckedCreateWithoutRespondedByInputSchema) ]),
}).strict();

export const CustomerFeedbackCreateManyRespondedByInputEnvelopeSchema: z.ZodType<Prisma.CustomerFeedbackCreateManyRespondedByInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => CustomerFeedbackCreateManyRespondedByInputSchema),z.lazy(() => CustomerFeedbackCreateManyRespondedByInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const RecipeVersionCreateWithoutCreatedByInputSchema: z.ZodType<Prisma.RecipeVersionCreateWithoutCreatedByInput> = z.object({
  versionNumber: z.number().int(),
  description: z.string().optional().nullable(),
  changes: z.string().optional().nullable(),
  isActive: z.boolean().optional(),
  approvedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  recipe: z.lazy(() => RecipeCreateNestedOneWithoutVersionsInputSchema),
  ingredients: z.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeVersionInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeVersionInputSchema).optional(),
  approvedBy: z.lazy(() => UserCreateNestedOneWithoutRecipeVersionsApprovedInputSchema).optional()
}).strict();

export const RecipeVersionUncheckedCreateWithoutCreatedByInputSchema: z.ZodType<Prisma.RecipeVersionUncheckedCreateWithoutCreatedByInput> = z.object({
  id: z.number().int().optional(),
  recipeId: z.number().int(),
  versionNumber: z.number().int(),
  description: z.string().optional().nullable(),
  changes: z.string().optional().nullable(),
  isActive: z.boolean().optional(),
  approvedById: z.number().int().optional().nullable(),
  approvedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  ingredients: z.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeVersionInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeVersionInputSchema).optional()
}).strict();

export const RecipeVersionCreateOrConnectWithoutCreatedByInputSchema: z.ZodType<Prisma.RecipeVersionCreateOrConnectWithoutCreatedByInput> = z.object({
  where: z.lazy(() => RecipeVersionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RecipeVersionCreateWithoutCreatedByInputSchema),z.lazy(() => RecipeVersionUncheckedCreateWithoutCreatedByInputSchema) ]),
}).strict();

export const RecipeVersionCreateManyCreatedByInputEnvelopeSchema: z.ZodType<Prisma.RecipeVersionCreateManyCreatedByInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => RecipeVersionCreateManyCreatedByInputSchema),z.lazy(() => RecipeVersionCreateManyCreatedByInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const RecipeVersionCreateWithoutApprovedByInputSchema: z.ZodType<Prisma.RecipeVersionCreateWithoutApprovedByInput> = z.object({
  versionNumber: z.number().int(),
  description: z.string().optional().nullable(),
  changes: z.string().optional().nullable(),
  isActive: z.boolean().optional(),
  approvedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  recipe: z.lazy(() => RecipeCreateNestedOneWithoutVersionsInputSchema),
  ingredients: z.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeVersionInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeVersionInputSchema).optional(),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutRecipeVersionsCreatedInputSchema)
}).strict();

export const RecipeVersionUncheckedCreateWithoutApprovedByInputSchema: z.ZodType<Prisma.RecipeVersionUncheckedCreateWithoutApprovedByInput> = z.object({
  id: z.number().int().optional(),
  recipeId: z.number().int(),
  versionNumber: z.number().int(),
  description: z.string().optional().nullable(),
  changes: z.string().optional().nullable(),
  isActive: z.boolean().optional(),
  createdById: z.number().int(),
  approvedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  ingredients: z.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeVersionInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeVersionInputSchema).optional()
}).strict();

export const RecipeVersionCreateOrConnectWithoutApprovedByInputSchema: z.ZodType<Prisma.RecipeVersionCreateOrConnectWithoutApprovedByInput> = z.object({
  where: z.lazy(() => RecipeVersionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RecipeVersionCreateWithoutApprovedByInputSchema),z.lazy(() => RecipeVersionUncheckedCreateWithoutApprovedByInputSchema) ]),
}).strict();

export const RecipeVersionCreateManyApprovedByInputEnvelopeSchema: z.ZodType<Prisma.RecipeVersionCreateManyApprovedByInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => RecipeVersionCreateManyApprovedByInputSchema),z.lazy(() => RecipeVersionCreateManyApprovedByInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const InventoryTransactionCreateWithoutCreatedByInputSchema: z.ZodType<Prisma.InventoryTransactionCreateWithoutCreatedByInput> = z.object({
  type: z.lazy(() => TransactionTypeSchema),
  quantity: z.number(),
  unit: z.string(),
  previousQty: z.number(),
  newQty: z.number(),
  cost: z.number().optional().nullable(),
  reference: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  inventory: z.lazy(() => InventoryCreateNestedOneWithoutTransactionsInputSchema),
  item: z.lazy(() => InventoryItemCreateNestedOneWithoutTransactionsInputSchema)
}).strict();

export const InventoryTransactionUncheckedCreateWithoutCreatedByInputSchema: z.ZodType<Prisma.InventoryTransactionUncheckedCreateWithoutCreatedByInput> = z.object({
  id: z.number().int().optional(),
  inventoryId: z.number().int(),
  itemId: z.number().int(),
  type: z.lazy(() => TransactionTypeSchema),
  quantity: z.number(),
  unit: z.string(),
  previousQty: z.number(),
  newQty: z.number(),
  cost: z.number().optional().nullable(),
  reference: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional()
}).strict();

export const InventoryTransactionCreateOrConnectWithoutCreatedByInputSchema: z.ZodType<Prisma.InventoryTransactionCreateOrConnectWithoutCreatedByInput> = z.object({
  where: z.lazy(() => InventoryTransactionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => InventoryTransactionCreateWithoutCreatedByInputSchema),z.lazy(() => InventoryTransactionUncheckedCreateWithoutCreatedByInputSchema) ]),
}).strict();

export const InventoryTransactionCreateManyCreatedByInputEnvelopeSchema: z.ZodType<Prisma.InventoryTransactionCreateManyCreatedByInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => InventoryTransactionCreateManyCreatedByInputSchema),z.lazy(() => InventoryTransactionCreateManyCreatedByInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const StockCountCreateWithoutCreatedByInputSchema: z.ZodType<Prisma.StockCountCreateWithoutCreatedByInput> = z.object({
  status: z.lazy(() => CountStatusSchema),
  startedAt: z.coerce.date(),
  completedAt: z.coerce.date().optional().nullable(),
  notes: z.string().optional().nullable(),
  inventory: z.lazy(() => InventoryCreateNestedOneWithoutStockCountsInputSchema),
  items: z.lazy(() => StockCountItemCreateNestedManyWithoutStockCountInputSchema).optional()
}).strict();

export const StockCountUncheckedCreateWithoutCreatedByInputSchema: z.ZodType<Prisma.StockCountUncheckedCreateWithoutCreatedByInput> = z.object({
  id: z.number().int().optional(),
  inventoryId: z.number().int(),
  status: z.lazy(() => CountStatusSchema),
  startedAt: z.coerce.date(),
  completedAt: z.coerce.date().optional().nullable(),
  notes: z.string().optional().nullable(),
  items: z.lazy(() => StockCountItemUncheckedCreateNestedManyWithoutStockCountInputSchema).optional()
}).strict();

export const StockCountCreateOrConnectWithoutCreatedByInputSchema: z.ZodType<Prisma.StockCountCreateOrConnectWithoutCreatedByInput> = z.object({
  where: z.lazy(() => StockCountWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => StockCountCreateWithoutCreatedByInputSchema),z.lazy(() => StockCountUncheckedCreateWithoutCreatedByInputSchema) ]),
}).strict();

export const StockCountCreateManyCreatedByInputEnvelopeSchema: z.ZodType<Prisma.StockCountCreateManyCreatedByInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => StockCountCreateManyCreatedByInputSchema),z.lazy(() => StockCountCreateManyCreatedByInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const OrganizationUpsertWithoutUsersInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutUsersInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutUsersInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutUsersInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutUsersInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutUsersInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutUsersInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutUsersInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutUsersInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutUsersInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutUsersInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutUsersInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  restaurants: z.lazy(() => RestaurantUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutUsersInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutUsersInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  restaurants: z.lazy(() => RestaurantUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const RestaurantUpsertWithoutUsersInputSchema: z.ZodType<Prisma.RestaurantUpsertWithoutUsersInput> = z.object({
  update: z.union([ z.lazy(() => RestaurantUpdateWithoutUsersInputSchema),z.lazy(() => RestaurantUncheckedUpdateWithoutUsersInputSchema) ]),
  create: z.union([ z.lazy(() => RestaurantCreateWithoutUsersInputSchema),z.lazy(() => RestaurantUncheckedCreateWithoutUsersInputSchema) ]),
  where: z.lazy(() => RestaurantWhereInputSchema).optional()
}).strict();

export const RestaurantUpdateToOneWithWhereWithoutUsersInputSchema: z.ZodType<Prisma.RestaurantUpdateToOneWithWhereWithoutUsersInput> = z.object({
  where: z.lazy(() => RestaurantWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RestaurantUpdateWithoutUsersInputSchema),z.lazy(() => RestaurantUncheckedUpdateWithoutUsersInputSchema) ]),
}).strict();

export const RestaurantUpdateWithoutUsersInputSchema: z.ZodType<Prisma.RestaurantUpdateWithoutUsersInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zipCode: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  owner: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deleted: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organization: z.lazy(() => OrganizationUpdateOneWithoutRestaurantsNestedInputSchema).optional(),
  cookbooks: z.lazy(() => CookBookUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: z.lazy(() => InventoryUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: z.lazy(() => OrderUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: z.lazy(() => RecipeUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: z.lazy(() => MenuUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipments: z.lazy(() => EquipmentUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklists: z.lazy(() => QualityChecklistUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  customerFeedbacks: z.lazy(() => CustomerFeedbackUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();

export const RestaurantUncheckedUpdateWithoutUsersInputSchema: z.ZodType<Prisma.RestaurantUncheckedUpdateWithoutUsersInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zipCode: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  owner: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deleted: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  cookbooks: z.lazy(() => CookBookUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: z.lazy(() => InventoryUncheckedUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: z.lazy(() => OrderUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: z.lazy(() => RecipeUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: z.lazy(() => MenuUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipments: z.lazy(() => EquipmentUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklists: z.lazy(() => QualityChecklistUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  customerFeedbacks: z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();

export const ShiftUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.ShiftUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => ShiftWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ShiftUpdateWithoutUserInputSchema),z.lazy(() => ShiftUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => ShiftCreateWithoutUserInputSchema),z.lazy(() => ShiftUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const ShiftUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.ShiftUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => ShiftWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ShiftUpdateWithoutUserInputSchema),z.lazy(() => ShiftUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const ShiftUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.ShiftUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => ShiftScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ShiftUpdateManyMutationInputSchema),z.lazy(() => ShiftUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const ShiftScalarWhereInputSchema: z.ZodType<Prisma.ShiftScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ShiftScalarWhereInputSchema),z.lazy(() => ShiftScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ShiftScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ShiftScalarWhereInputSchema),z.lazy(() => ShiftScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  userId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  startTime: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  endTime: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  status: z.union([ z.lazy(() => EnumShiftStatusFilterSchema),z.lazy(() => ShiftStatusSchema) ]).optional(),
}).strict();

export const PrepItemUpsertWithWhereUniqueWithoutAssignedToInputSchema: z.ZodType<Prisma.PrepItemUpsertWithWhereUniqueWithoutAssignedToInput> = z.object({
  where: z.lazy(() => PrepItemWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => PrepItemUpdateWithoutAssignedToInputSchema),z.lazy(() => PrepItemUncheckedUpdateWithoutAssignedToInputSchema) ]),
  create: z.union([ z.lazy(() => PrepItemCreateWithoutAssignedToInputSchema),z.lazy(() => PrepItemUncheckedCreateWithoutAssignedToInputSchema) ]),
}).strict();

export const PrepItemUpdateWithWhereUniqueWithoutAssignedToInputSchema: z.ZodType<Prisma.PrepItemUpdateWithWhereUniqueWithoutAssignedToInput> = z.object({
  where: z.lazy(() => PrepItemWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => PrepItemUpdateWithoutAssignedToInputSchema),z.lazy(() => PrepItemUncheckedUpdateWithoutAssignedToInputSchema) ]),
}).strict();

export const PrepItemUpdateManyWithWhereWithoutAssignedToInputSchema: z.ZodType<Prisma.PrepItemUpdateManyWithWhereWithoutAssignedToInput> = z.object({
  where: z.lazy(() => PrepItemScalarWhereInputSchema),
  data: z.union([ z.lazy(() => PrepItemUpdateManyMutationInputSchema),z.lazy(() => PrepItemUncheckedUpdateManyWithoutAssignedToInputSchema) ]),
}).strict();

export const PrepItemScalarWhereInputSchema: z.ZodType<Prisma.PrepItemScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PrepItemScalarWhereInputSchema),z.lazy(() => PrepItemScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PrepItemScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PrepItemScalarWhereInputSchema),z.lazy(() => PrepItemScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  prepBoardId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  recipeId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  quantity: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  status: z.union([ z.lazy(() => EnumPrepStatusFilterSchema),z.lazy(() => PrepStatusSchema) ]).optional(),
  assignedToId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
}).strict();

export const InventoryItemUpsertWithWhereUniqueWithoutLastUpdatedByInputSchema: z.ZodType<Prisma.InventoryItemUpsertWithWhereUniqueWithoutLastUpdatedByInput> = z.object({
  where: z.lazy(() => InventoryItemWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => InventoryItemUpdateWithoutLastUpdatedByInputSchema),z.lazy(() => InventoryItemUncheckedUpdateWithoutLastUpdatedByInputSchema) ]),
  create: z.union([ z.lazy(() => InventoryItemCreateWithoutLastUpdatedByInputSchema),z.lazy(() => InventoryItemUncheckedCreateWithoutLastUpdatedByInputSchema) ]),
}).strict();

export const InventoryItemUpdateWithWhereUniqueWithoutLastUpdatedByInputSchema: z.ZodType<Prisma.InventoryItemUpdateWithWhereUniqueWithoutLastUpdatedByInput> = z.object({
  where: z.lazy(() => InventoryItemWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => InventoryItemUpdateWithoutLastUpdatedByInputSchema),z.lazy(() => InventoryItemUncheckedUpdateWithoutLastUpdatedByInputSchema) ]),
}).strict();

export const InventoryItemUpdateManyWithWhereWithoutLastUpdatedByInputSchema: z.ZodType<Prisma.InventoryItemUpdateManyWithWhereWithoutLastUpdatedByInput> = z.object({
  where: z.lazy(() => InventoryItemScalarWhereInputSchema),
  data: z.union([ z.lazy(() => InventoryItemUpdateManyMutationInputSchema),z.lazy(() => InventoryItemUncheckedUpdateManyWithoutLastUpdatedByInputSchema) ]),
}).strict();

export const SessionUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.SessionUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => SessionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => SessionUpdateWithoutUserInputSchema),z.lazy(() => SessionUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const SessionUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.SessionUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => SessionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => SessionUpdateWithoutUserInputSchema),z.lazy(() => SessionUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const SessionUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.SessionUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => SessionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => SessionUpdateManyMutationInputSchema),z.lazy(() => SessionUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const SessionScalarWhereInputSchema: z.ZodType<Prisma.SessionScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SessionScalarWhereInputSchema),z.lazy(() => SessionScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SessionScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SessionScalarWhereInputSchema),z.lazy(() => SessionScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  code: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  token: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const PasswordResetUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.PasswordResetUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => PasswordResetWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => PasswordResetUpdateWithoutUserInputSchema),z.lazy(() => PasswordResetUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => PasswordResetCreateWithoutUserInputSchema),z.lazy(() => PasswordResetUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const PasswordResetUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.PasswordResetUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => PasswordResetWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => PasswordResetUpdateWithoutUserInputSchema),z.lazy(() => PasswordResetUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const PasswordResetUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.PasswordResetUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => PasswordResetScalarWhereInputSchema),
  data: z.union([ z.lazy(() => PasswordResetUpdateManyMutationInputSchema),z.lazy(() => PasswordResetUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const PasswordResetScalarWhereInputSchema: z.ZodType<Prisma.PasswordResetScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PasswordResetScalarWhereInputSchema),z.lazy(() => PasswordResetScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PasswordResetScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PasswordResetScalarWhereInputSchema),z.lazy(() => PasswordResetScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  token: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const LeftoverItemUpsertWithWhereUniqueWithoutRecordedByInputSchema: z.ZodType<Prisma.LeftoverItemUpsertWithWhereUniqueWithoutRecordedByInput> = z.object({
  where: z.lazy(() => LeftoverItemWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => LeftoverItemUpdateWithoutRecordedByInputSchema),z.lazy(() => LeftoverItemUncheckedUpdateWithoutRecordedByInputSchema) ]),
  create: z.union([ z.lazy(() => LeftoverItemCreateWithoutRecordedByInputSchema),z.lazy(() => LeftoverItemUncheckedCreateWithoutRecordedByInputSchema) ]),
}).strict();

export const LeftoverItemUpdateWithWhereUniqueWithoutRecordedByInputSchema: z.ZodType<Prisma.LeftoverItemUpdateWithWhereUniqueWithoutRecordedByInput> = z.object({
  where: z.lazy(() => LeftoverItemWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => LeftoverItemUpdateWithoutRecordedByInputSchema),z.lazy(() => LeftoverItemUncheckedUpdateWithoutRecordedByInputSchema) ]),
}).strict();

export const LeftoverItemUpdateManyWithWhereWithoutRecordedByInputSchema: z.ZodType<Prisma.LeftoverItemUpdateManyWithWhereWithoutRecordedByInput> = z.object({
  where: z.lazy(() => LeftoverItemScalarWhereInputSchema),
  data: z.union([ z.lazy(() => LeftoverItemUpdateManyMutationInputSchema),z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRecordedByInputSchema) ]),
}).strict();

export const WasteRecordUpsertWithWhereUniqueWithoutRecordedByInputSchema: z.ZodType<Prisma.WasteRecordUpsertWithWhereUniqueWithoutRecordedByInput> = z.object({
  where: z.lazy(() => WasteRecordWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => WasteRecordUpdateWithoutRecordedByInputSchema),z.lazy(() => WasteRecordUncheckedUpdateWithoutRecordedByInputSchema) ]),
  create: z.union([ z.lazy(() => WasteRecordCreateWithoutRecordedByInputSchema),z.lazy(() => WasteRecordUncheckedCreateWithoutRecordedByInputSchema) ]),
}).strict();

export const WasteRecordUpdateWithWhereUniqueWithoutRecordedByInputSchema: z.ZodType<Prisma.WasteRecordUpdateWithWhereUniqueWithoutRecordedByInput> = z.object({
  where: z.lazy(() => WasteRecordWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => WasteRecordUpdateWithoutRecordedByInputSchema),z.lazy(() => WasteRecordUncheckedUpdateWithoutRecordedByInputSchema) ]),
}).strict();

export const WasteRecordUpdateManyWithWhereWithoutRecordedByInputSchema: z.ZodType<Prisma.WasteRecordUpdateManyWithWhereWithoutRecordedByInput> = z.object({
  where: z.lazy(() => WasteRecordScalarWhereInputSchema),
  data: z.union([ z.lazy(() => WasteRecordUpdateManyMutationInputSchema),z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRecordedByInputSchema) ]),
}).strict();

export const ProductionPlanUpsertWithWhereUniqueWithoutCreatedByInputSchema: z.ZodType<Prisma.ProductionPlanUpsertWithWhereUniqueWithoutCreatedByInput> = z.object({
  where: z.lazy(() => ProductionPlanWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ProductionPlanUpdateWithoutCreatedByInputSchema),z.lazy(() => ProductionPlanUncheckedUpdateWithoutCreatedByInputSchema) ]),
  create: z.union([ z.lazy(() => ProductionPlanCreateWithoutCreatedByInputSchema),z.lazy(() => ProductionPlanUncheckedCreateWithoutCreatedByInputSchema) ]),
}).strict();

export const ProductionPlanUpdateWithWhereUniqueWithoutCreatedByInputSchema: z.ZodType<Prisma.ProductionPlanUpdateWithWhereUniqueWithoutCreatedByInput> = z.object({
  where: z.lazy(() => ProductionPlanWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ProductionPlanUpdateWithoutCreatedByInputSchema),z.lazy(() => ProductionPlanUncheckedUpdateWithoutCreatedByInputSchema) ]),
}).strict();

export const ProductionPlanUpdateManyWithWhereWithoutCreatedByInputSchema: z.ZodType<Prisma.ProductionPlanUpdateManyWithWhereWithoutCreatedByInput> = z.object({
  where: z.lazy(() => ProductionPlanScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ProductionPlanUpdateManyMutationInputSchema),z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutCreatedByInputSchema) ]),
}).strict();

export const ProductionPlanItemUpsertWithWhereUniqueWithoutAssignedToInputSchema: z.ZodType<Prisma.ProductionPlanItemUpsertWithWhereUniqueWithoutAssignedToInput> = z.object({
  where: z.lazy(() => ProductionPlanItemWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ProductionPlanItemUpdateWithoutAssignedToInputSchema),z.lazy(() => ProductionPlanItemUncheckedUpdateWithoutAssignedToInputSchema) ]),
  create: z.union([ z.lazy(() => ProductionPlanItemCreateWithoutAssignedToInputSchema),z.lazy(() => ProductionPlanItemUncheckedCreateWithoutAssignedToInputSchema) ]),
}).strict();

export const ProductionPlanItemUpdateWithWhereUniqueWithoutAssignedToInputSchema: z.ZodType<Prisma.ProductionPlanItemUpdateWithWhereUniqueWithoutAssignedToInput> = z.object({
  where: z.lazy(() => ProductionPlanItemWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ProductionPlanItemUpdateWithoutAssignedToInputSchema),z.lazy(() => ProductionPlanItemUncheckedUpdateWithoutAssignedToInputSchema) ]),
}).strict();

export const ProductionPlanItemUpdateManyWithWhereWithoutAssignedToInputSchema: z.ZodType<Prisma.ProductionPlanItemUpdateManyWithWhereWithoutAssignedToInput> = z.object({
  where: z.lazy(() => ProductionPlanItemScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ProductionPlanItemUpdateManyMutationInputSchema),z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutAssignedToInputSchema) ]),
}).strict();

export const AvailabilityUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.AvailabilityUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => AvailabilityWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => AvailabilityUpdateWithoutUserInputSchema),z.lazy(() => AvailabilityUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => AvailabilityCreateWithoutUserInputSchema),z.lazy(() => AvailabilityUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const AvailabilityUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.AvailabilityUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => AvailabilityWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => AvailabilityUpdateWithoutUserInputSchema),z.lazy(() => AvailabilityUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const AvailabilityUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.AvailabilityUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => AvailabilityScalarWhereInputSchema),
  data: z.union([ z.lazy(() => AvailabilityUpdateManyMutationInputSchema),z.lazy(() => AvailabilityUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const AvailabilityScalarWhereInputSchema: z.ZodType<Prisma.AvailabilityScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AvailabilityScalarWhereInputSchema),z.lazy(() => AvailabilityScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AvailabilityScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AvailabilityScalarWhereInputSchema),z.lazy(() => AvailabilityScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  userId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  dayOfWeek: z.union([ z.lazy(() => EnumDayOfWeekFilterSchema),z.lazy(() => DayOfWeekSchema) ]).optional(),
  startTime: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  endTime: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const SchedulingConstraintUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.SchedulingConstraintUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => SchedulingConstraintWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => SchedulingConstraintUpdateWithoutUserInputSchema),z.lazy(() => SchedulingConstraintUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => SchedulingConstraintCreateWithoutUserInputSchema),z.lazy(() => SchedulingConstraintUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const SchedulingConstraintUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.SchedulingConstraintUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => SchedulingConstraintWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => SchedulingConstraintUpdateWithoutUserInputSchema),z.lazy(() => SchedulingConstraintUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const SchedulingConstraintUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.SchedulingConstraintUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => SchedulingConstraintScalarWhereInputSchema),
  data: z.union([ z.lazy(() => SchedulingConstraintUpdateManyMutationInputSchema),z.lazy(() => SchedulingConstraintUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const SchedulingConstraintScalarWhereInputSchema: z.ZodType<Prisma.SchedulingConstraintScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SchedulingConstraintScalarWhereInputSchema),z.lazy(() => SchedulingConstraintScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SchedulingConstraintScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SchedulingConstraintScalarWhereInputSchema),z.lazy(() => SchedulingConstraintScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  userId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  constraintsType: z.union([ z.lazy(() => EnumConstraintTypeFilterSchema),z.lazy(() => ConstraintTypeSchema) ]).optional(),
  startTime: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  endTime: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const InventoryWithdrawalUpsertWithWhereUniqueWithoutCreatedByInputSchema: z.ZodType<Prisma.InventoryWithdrawalUpsertWithWhereUniqueWithoutCreatedByInput> = z.object({
  where: z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => InventoryWithdrawalUpdateWithoutCreatedByInputSchema),z.lazy(() => InventoryWithdrawalUncheckedUpdateWithoutCreatedByInputSchema) ]),
  create: z.union([ z.lazy(() => InventoryWithdrawalCreateWithoutCreatedByInputSchema),z.lazy(() => InventoryWithdrawalUncheckedCreateWithoutCreatedByInputSchema) ]),
}).strict();

export const InventoryWithdrawalUpdateWithWhereUniqueWithoutCreatedByInputSchema: z.ZodType<Prisma.InventoryWithdrawalUpdateWithWhereUniqueWithoutCreatedByInput> = z.object({
  where: z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => InventoryWithdrawalUpdateWithoutCreatedByInputSchema),z.lazy(() => InventoryWithdrawalUncheckedUpdateWithoutCreatedByInputSchema) ]),
}).strict();

export const InventoryWithdrawalUpdateManyWithWhereWithoutCreatedByInputSchema: z.ZodType<Prisma.InventoryWithdrawalUpdateManyWithWhereWithoutCreatedByInput> = z.object({
  where: z.lazy(() => InventoryWithdrawalScalarWhereInputSchema),
  data: z.union([ z.lazy(() => InventoryWithdrawalUpdateManyMutationInputSchema),z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByInputSchema) ]),
}).strict();

export const InventoryWithdrawalScalarWhereInputSchema: z.ZodType<Prisma.InventoryWithdrawalScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => InventoryWithdrawalScalarWhereInputSchema),z.lazy(() => InventoryWithdrawalScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => InventoryWithdrawalScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => InventoryWithdrawalScalarWhereInputSchema),z.lazy(() => InventoryWithdrawalScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  inventoryItemId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  dateTime: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  quantity: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  unit: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  recipeId: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  createdById: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ChecklistCompleteUpsertWithWhereUniqueWithoutCompletedByInputSchema: z.ZodType<Prisma.ChecklistCompleteUpsertWithWhereUniqueWithoutCompletedByInput> = z.object({
  where: z.lazy(() => ChecklistCompleteWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ChecklistCompleteUpdateWithoutCompletedByInputSchema),z.lazy(() => ChecklistCompleteUncheckedUpdateWithoutCompletedByInputSchema) ]),
  create: z.union([ z.lazy(() => ChecklistCompleteCreateWithoutCompletedByInputSchema),z.lazy(() => ChecklistCompleteUncheckedCreateWithoutCompletedByInputSchema) ]),
}).strict();

export const ChecklistCompleteUpdateWithWhereUniqueWithoutCompletedByInputSchema: z.ZodType<Prisma.ChecklistCompleteUpdateWithWhereUniqueWithoutCompletedByInput> = z.object({
  where: z.lazy(() => ChecklistCompleteWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ChecklistCompleteUpdateWithoutCompletedByInputSchema),z.lazy(() => ChecklistCompleteUncheckedUpdateWithoutCompletedByInputSchema) ]),
}).strict();

export const ChecklistCompleteUpdateManyWithWhereWithoutCompletedByInputSchema: z.ZodType<Prisma.ChecklistCompleteUpdateManyWithWhereWithoutCompletedByInput> = z.object({
  where: z.lazy(() => ChecklistCompleteScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ChecklistCompleteUpdateManyMutationInputSchema),z.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutCompletedByInputSchema) ]),
}).strict();

export const CustomerFeedbackUpsertWithWhereUniqueWithoutRespondedByInputSchema: z.ZodType<Prisma.CustomerFeedbackUpsertWithWhereUniqueWithoutRespondedByInput> = z.object({
  where: z.lazy(() => CustomerFeedbackWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CustomerFeedbackUpdateWithoutRespondedByInputSchema),z.lazy(() => CustomerFeedbackUncheckedUpdateWithoutRespondedByInputSchema) ]),
  create: z.union([ z.lazy(() => CustomerFeedbackCreateWithoutRespondedByInputSchema),z.lazy(() => CustomerFeedbackUncheckedCreateWithoutRespondedByInputSchema) ]),
}).strict();

export const CustomerFeedbackUpdateWithWhereUniqueWithoutRespondedByInputSchema: z.ZodType<Prisma.CustomerFeedbackUpdateWithWhereUniqueWithoutRespondedByInput> = z.object({
  where: z.lazy(() => CustomerFeedbackWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CustomerFeedbackUpdateWithoutRespondedByInputSchema),z.lazy(() => CustomerFeedbackUncheckedUpdateWithoutRespondedByInputSchema) ]),
}).strict();

export const CustomerFeedbackUpdateManyWithWhereWithoutRespondedByInputSchema: z.ZodType<Prisma.CustomerFeedbackUpdateManyWithWhereWithoutRespondedByInput> = z.object({
  where: z.lazy(() => CustomerFeedbackScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CustomerFeedbackUpdateManyMutationInputSchema),z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRespondedByInputSchema) ]),
}).strict();

export const RecipeVersionUpsertWithWhereUniqueWithoutCreatedByInputSchema: z.ZodType<Prisma.RecipeVersionUpsertWithWhereUniqueWithoutCreatedByInput> = z.object({
  where: z.lazy(() => RecipeVersionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => RecipeVersionUpdateWithoutCreatedByInputSchema),z.lazy(() => RecipeVersionUncheckedUpdateWithoutCreatedByInputSchema) ]),
  create: z.union([ z.lazy(() => RecipeVersionCreateWithoutCreatedByInputSchema),z.lazy(() => RecipeVersionUncheckedCreateWithoutCreatedByInputSchema) ]),
}).strict();

export const RecipeVersionUpdateWithWhereUniqueWithoutCreatedByInputSchema: z.ZodType<Prisma.RecipeVersionUpdateWithWhereUniqueWithoutCreatedByInput> = z.object({
  where: z.lazy(() => RecipeVersionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => RecipeVersionUpdateWithoutCreatedByInputSchema),z.lazy(() => RecipeVersionUncheckedUpdateWithoutCreatedByInputSchema) ]),
}).strict();

export const RecipeVersionUpdateManyWithWhereWithoutCreatedByInputSchema: z.ZodType<Prisma.RecipeVersionUpdateManyWithWhereWithoutCreatedByInput> = z.object({
  where: z.lazy(() => RecipeVersionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => RecipeVersionUpdateManyMutationInputSchema),z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutCreatedByInputSchema) ]),
}).strict();

export const RecipeVersionScalarWhereInputSchema: z.ZodType<Prisma.RecipeVersionScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RecipeVersionScalarWhereInputSchema),z.lazy(() => RecipeVersionScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RecipeVersionScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RecipeVersionScalarWhereInputSchema),z.lazy(() => RecipeVersionScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  recipeId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  versionNumber: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  changes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  isActive: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  createdById: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  approvedById: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  approvedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const RecipeVersionUpsertWithWhereUniqueWithoutApprovedByInputSchema: z.ZodType<Prisma.RecipeVersionUpsertWithWhereUniqueWithoutApprovedByInput> = z.object({
  where: z.lazy(() => RecipeVersionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => RecipeVersionUpdateWithoutApprovedByInputSchema),z.lazy(() => RecipeVersionUncheckedUpdateWithoutApprovedByInputSchema) ]),
  create: z.union([ z.lazy(() => RecipeVersionCreateWithoutApprovedByInputSchema),z.lazy(() => RecipeVersionUncheckedCreateWithoutApprovedByInputSchema) ]),
}).strict();

export const RecipeVersionUpdateWithWhereUniqueWithoutApprovedByInputSchema: z.ZodType<Prisma.RecipeVersionUpdateWithWhereUniqueWithoutApprovedByInput> = z.object({
  where: z.lazy(() => RecipeVersionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => RecipeVersionUpdateWithoutApprovedByInputSchema),z.lazy(() => RecipeVersionUncheckedUpdateWithoutApprovedByInputSchema) ]),
}).strict();

export const RecipeVersionUpdateManyWithWhereWithoutApprovedByInputSchema: z.ZodType<Prisma.RecipeVersionUpdateManyWithWhereWithoutApprovedByInput> = z.object({
  where: z.lazy(() => RecipeVersionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => RecipeVersionUpdateManyMutationInputSchema),z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutApprovedByInputSchema) ]),
}).strict();

export const InventoryTransactionUpsertWithWhereUniqueWithoutCreatedByInputSchema: z.ZodType<Prisma.InventoryTransactionUpsertWithWhereUniqueWithoutCreatedByInput> = z.object({
  where: z.lazy(() => InventoryTransactionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => InventoryTransactionUpdateWithoutCreatedByInputSchema),z.lazy(() => InventoryTransactionUncheckedUpdateWithoutCreatedByInputSchema) ]),
  create: z.union([ z.lazy(() => InventoryTransactionCreateWithoutCreatedByInputSchema),z.lazy(() => InventoryTransactionUncheckedCreateWithoutCreatedByInputSchema) ]),
}).strict();

export const InventoryTransactionUpdateWithWhereUniqueWithoutCreatedByInputSchema: z.ZodType<Prisma.InventoryTransactionUpdateWithWhereUniqueWithoutCreatedByInput> = z.object({
  where: z.lazy(() => InventoryTransactionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => InventoryTransactionUpdateWithoutCreatedByInputSchema),z.lazy(() => InventoryTransactionUncheckedUpdateWithoutCreatedByInputSchema) ]),
}).strict();

export const InventoryTransactionUpdateManyWithWhereWithoutCreatedByInputSchema: z.ZodType<Prisma.InventoryTransactionUpdateManyWithWhereWithoutCreatedByInput> = z.object({
  where: z.lazy(() => InventoryTransactionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => InventoryTransactionUpdateManyMutationInputSchema),z.lazy(() => InventoryTransactionUncheckedUpdateManyWithoutCreatedByInputSchema) ]),
}).strict();

export const StockCountUpsertWithWhereUniqueWithoutCreatedByInputSchema: z.ZodType<Prisma.StockCountUpsertWithWhereUniqueWithoutCreatedByInput> = z.object({
  where: z.lazy(() => StockCountWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => StockCountUpdateWithoutCreatedByInputSchema),z.lazy(() => StockCountUncheckedUpdateWithoutCreatedByInputSchema) ]),
  create: z.union([ z.lazy(() => StockCountCreateWithoutCreatedByInputSchema),z.lazy(() => StockCountUncheckedCreateWithoutCreatedByInputSchema) ]),
}).strict();

export const StockCountUpdateWithWhereUniqueWithoutCreatedByInputSchema: z.ZodType<Prisma.StockCountUpdateWithWhereUniqueWithoutCreatedByInput> = z.object({
  where: z.lazy(() => StockCountWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => StockCountUpdateWithoutCreatedByInputSchema),z.lazy(() => StockCountUncheckedUpdateWithoutCreatedByInputSchema) ]),
}).strict();

export const StockCountUpdateManyWithWhereWithoutCreatedByInputSchema: z.ZodType<Prisma.StockCountUpdateManyWithWhereWithoutCreatedByInput> = z.object({
  where: z.lazy(() => StockCountScalarWhereInputSchema),
  data: z.union([ z.lazy(() => StockCountUpdateManyMutationInputSchema),z.lazy(() => StockCountUncheckedUpdateManyWithoutCreatedByInputSchema) ]),
}).strict();

export const UserCreateWithoutSessionsInputSchema: z.ZodType<Prisma.UserCreateWithoutSessionsInput> = z.object({
  email: z.string(),
  sub: z.number().int().optional().nullable(),
  passwordHash: z.string(),
  firstName: z.string(),
  lastName: z.string(),
  profileImage: z.string().optional().nullable(),
  verified: z.boolean().optional(),
  role: z.lazy(() => UserRoleSchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema).optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutUsersInputSchema).optional(),
  shifts: z.lazy(() => ShiftCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z.lazy(() => AvailabilityCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionCreateNestedManyWithoutApprovedByInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountCreateNestedManyWithoutCreatedByInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutSessionsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutSessionsInput> = z.object({
  id: z.number().int().optional(),
  email: z.string(),
  sub: z.number().int().optional().nullable(),
  passwordHash: z.string(),
  firstName: z.string(),
  lastName: z.string(),
  profileImage: z.string().optional().nullable(),
  verified: z.boolean().optional(),
  role: z.lazy(() => UserRoleSchema),
  organizationId: z.number().int().optional().nullable(),
  restaurantId: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  shifts: z.lazy(() => ShiftUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteUncheckedCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutApprovedByInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutSessionsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutSessionsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutSessionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutSessionsInputSchema) ]),
}).strict();

export const UserUpsertWithoutSessionsInputSchema: z.ZodType<Prisma.UserUpsertWithoutSessionsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutSessionsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutSessionsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutSessionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutSessionsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutSessionsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutSessionsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutSessionsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutSessionsInputSchema) ]),
}).strict();

export const UserUpdateWithoutSessionsInputSchema: z.ZodType<Prisma.UserUpdateWithoutSessionsInput> = z.object({
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sub: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passwordHash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  verified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneWithoutUsersNestedInputSchema).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneWithoutUsersNestedInputSchema).optional(),
  shifts: z.lazy(() => ShiftUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionUpdateManyWithoutApprovedByNestedInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountUpdateManyWithoutCreatedByNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutSessionsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutSessionsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sub: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passwordHash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  verified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  shifts: z.lazy(() => ShiftUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemUncheckedUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutApprovedByNestedInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional()
}).strict();

export const RecipeCreateWithoutCookBookInputSchema: z.ZodType<Prisma.RecipeCreateWithoutCookBookInput> = z.object({
  name: z.string(),
  imageUrls: z.union([ z.lazy(() => RecipeCreateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.string().optional().nullable(),
  servings: z.number().int(),
  cookTime: z.number().int(),
  prepTime: z.number().int(),
  frequency: z.number().int().optional().nullable(),
  foodCost: z.number().optional().nullable(),
  isDeleted: z.boolean().optional(),
  isPublished: z.boolean().optional(),
  publishedAt: z.coerce.date().optional().nullable(),
  language: z.string().optional(),
  skillLevel: z.lazy(() => SkillLevelSchema).optional(),
  category: z.lazy(() => CategorySchema).optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutRecipesInputSchema),
  ingredients: z.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeCreateNestedManyWithoutRecipeInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z.lazy(() => RecipeTagCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionCreateNestedManyWithoutRecipesInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureCreateNestedManyWithoutRecipeInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldCreateNestedManyWithoutRecipeInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostCreateNestedManyWithoutRecipeInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionCreateNestedOneWithoutRecipeInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointCreateNestedManyWithoutRecipeInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageCreateNestedOneWithoutRecipeInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoCreateNestedManyWithoutRecipeInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsCreateNestedOneWithoutRecipeInputSchema).optional()
}).strict();

export const RecipeUncheckedCreateWithoutCookBookInputSchema: z.ZodType<Prisma.RecipeUncheckedCreateWithoutCookBookInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  imageUrls: z.union([ z.lazy(() => RecipeCreateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.string().optional().nullable(),
  servings: z.number().int(),
  cookTime: z.number().int(),
  prepTime: z.number().int(),
  frequency: z.number().int().optional().nullable(),
  restaurantId: z.number().int(),
  foodCost: z.number().optional().nullable(),
  isDeleted: z.boolean().optional(),
  isPublished: z.boolean().optional(),
  publishedAt: z.coerce.date().optional().nullable(),
  language: z.string().optional(),
  skillLevel: z.lazy(() => SkillLevelSchema).optional(),
  category: z.lazy(() => CategorySchema).optional(),
  ingredients: z.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUncheckedCreateNestedOneWithoutRecipeInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUncheckedCreateNestedOneWithoutRecipeInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUncheckedCreateNestedOneWithoutRecipeInputSchema).optional()
}).strict();

export const RecipeCreateOrConnectWithoutCookBookInputSchema: z.ZodType<Prisma.RecipeCreateOrConnectWithoutCookBookInput> = z.object({
  where: z.lazy(() => RecipeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RecipeCreateWithoutCookBookInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutCookBookInputSchema) ]),
}).strict();

export const RecipeCreateManyCookBookInputEnvelopeSchema: z.ZodType<Prisma.RecipeCreateManyCookBookInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => RecipeCreateManyCookBookInputSchema),z.lazy(() => RecipeCreateManyCookBookInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const RestaurantCreateWithoutCookbooksInputSchema: z.ZodType<Prisma.RestaurantCreateWithoutCookbooksInput> = z.object({
  name: z.string(),
  imageUrl: z.string().optional().nullable(),
  address: z.string(),
  city: z.string(),
  zipCode: z.string(),
  state: z.string(),
  owner: z.string(),
  foodCost: z.number().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  isDeleted: z.boolean().optional(),
  deleted: z.coerce.date().optional().nullable(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutRestaurantsInputSchema).optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: z.lazy(() => InventoryCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: z.lazy(() => OrderCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: z.lazy(() => RecipeCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: z.lazy(() => MenuCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipments: z.lazy(() => EquipmentCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklists: z.lazy(() => QualityChecklistCreateNestedManyWithoutRestaurantInputSchema).optional(),
  customerFeedbacks: z.lazy(() => CustomerFeedbackCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();

export const RestaurantUncheckedCreateWithoutCookbooksInputSchema: z.ZodType<Prisma.RestaurantUncheckedCreateWithoutCookbooksInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  imageUrl: z.string().optional().nullable(),
  address: z.string(),
  city: z.string(),
  zipCode: z.string(),
  state: z.string(),
  owner: z.string(),
  organizationId: z.number().int().optional().nullable(),
  foodCost: z.number().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  isDeleted: z.boolean().optional(),
  deleted: z.coerce.date().optional().nullable(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: z.lazy(() => InventoryUncheckedCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: z.lazy(() => OrderUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: z.lazy(() => RecipeUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: z.lazy(() => MenuUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipments: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklists: z.lazy(() => QualityChecklistUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  customerFeedbacks: z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();

export const RestaurantCreateOrConnectWithoutCookbooksInputSchema: z.ZodType<Prisma.RestaurantCreateOrConnectWithoutCookbooksInput> = z.object({
  where: z.lazy(() => RestaurantWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RestaurantCreateWithoutCookbooksInputSchema),z.lazy(() => RestaurantUncheckedCreateWithoutCookbooksInputSchema) ]),
}).strict();

export const RecipeUpsertWithWhereUniqueWithoutCookBookInputSchema: z.ZodType<Prisma.RecipeUpsertWithWhereUniqueWithoutCookBookInput> = z.object({
  where: z.lazy(() => RecipeWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => RecipeUpdateWithoutCookBookInputSchema),z.lazy(() => RecipeUncheckedUpdateWithoutCookBookInputSchema) ]),
  create: z.union([ z.lazy(() => RecipeCreateWithoutCookBookInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutCookBookInputSchema) ]),
}).strict();

export const RecipeUpdateWithWhereUniqueWithoutCookBookInputSchema: z.ZodType<Prisma.RecipeUpdateWithWhereUniqueWithoutCookBookInput> = z.object({
  where: z.lazy(() => RecipeWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => RecipeUpdateWithoutCookBookInputSchema),z.lazy(() => RecipeUncheckedUpdateWithoutCookBookInputSchema) ]),
}).strict();

export const RecipeUpdateManyWithWhereWithoutCookBookInputSchema: z.ZodType<Prisma.RecipeUpdateManyWithWhereWithoutCookBookInput> = z.object({
  where: z.lazy(() => RecipeScalarWhereInputSchema),
  data: z.union([ z.lazy(() => RecipeUpdateManyMutationInputSchema),z.lazy(() => RecipeUncheckedUpdateManyWithoutCookBookInputSchema) ]),
}).strict();

export const RestaurantUpsertWithoutCookbooksInputSchema: z.ZodType<Prisma.RestaurantUpsertWithoutCookbooksInput> = z.object({
  update: z.union([ z.lazy(() => RestaurantUpdateWithoutCookbooksInputSchema),z.lazy(() => RestaurantUncheckedUpdateWithoutCookbooksInputSchema) ]),
  create: z.union([ z.lazy(() => RestaurantCreateWithoutCookbooksInputSchema),z.lazy(() => RestaurantUncheckedCreateWithoutCookbooksInputSchema) ]),
  where: z.lazy(() => RestaurantWhereInputSchema).optional()
}).strict();

export const RestaurantUpdateToOneWithWhereWithoutCookbooksInputSchema: z.ZodType<Prisma.RestaurantUpdateToOneWithWhereWithoutCookbooksInput> = z.object({
  where: z.lazy(() => RestaurantWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RestaurantUpdateWithoutCookbooksInputSchema),z.lazy(() => RestaurantUncheckedUpdateWithoutCookbooksInputSchema) ]),
}).strict();

export const RestaurantUpdateWithoutCookbooksInputSchema: z.ZodType<Prisma.RestaurantUpdateWithoutCookbooksInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zipCode: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  owner: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deleted: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organization: z.lazy(() => OrganizationUpdateOneWithoutRestaurantsNestedInputSchema).optional(),
  users: z.lazy(() => UserUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: z.lazy(() => InventoryUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: z.lazy(() => OrderUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: z.lazy(() => RecipeUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: z.lazy(() => MenuUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipments: z.lazy(() => EquipmentUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklists: z.lazy(() => QualityChecklistUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  customerFeedbacks: z.lazy(() => CustomerFeedbackUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();

export const RestaurantUncheckedUpdateWithoutCookbooksInputSchema: z.ZodType<Prisma.RestaurantUncheckedUpdateWithoutCookbooksInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zipCode: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  owner: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deleted: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: z.lazy(() => InventoryUncheckedUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: z.lazy(() => OrderUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: z.lazy(() => RecipeUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: z.lazy(() => MenuUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipments: z.lazy(() => EquipmentUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklists: z.lazy(() => QualityChecklistUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  customerFeedbacks: z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();

export const RestaurantCreateWithoutRecipesInputSchema: z.ZodType<Prisma.RestaurantCreateWithoutRecipesInput> = z.object({
  name: z.string(),
  imageUrl: z.string().optional().nullable(),
  address: z.string(),
  city: z.string(),
  zipCode: z.string(),
  state: z.string(),
  owner: z.string(),
  foodCost: z.number().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  isDeleted: z.boolean().optional(),
  deleted: z.coerce.date().optional().nullable(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutRestaurantsInputSchema).optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: z.lazy(() => CookBookCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: z.lazy(() => InventoryCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: z.lazy(() => OrderCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: z.lazy(() => MenuCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipments: z.lazy(() => EquipmentCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklists: z.lazy(() => QualityChecklistCreateNestedManyWithoutRestaurantInputSchema).optional(),
  customerFeedbacks: z.lazy(() => CustomerFeedbackCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();

export const RestaurantUncheckedCreateWithoutRecipesInputSchema: z.ZodType<Prisma.RestaurantUncheckedCreateWithoutRecipesInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  imageUrl: z.string().optional().nullable(),
  address: z.string(),
  city: z.string(),
  zipCode: z.string(),
  state: z.string(),
  owner: z.string(),
  organizationId: z.number().int().optional().nullable(),
  foodCost: z.number().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  isDeleted: z.boolean().optional(),
  deleted: z.coerce.date().optional().nullable(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: z.lazy(() => CookBookUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: z.lazy(() => InventoryUncheckedCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: z.lazy(() => OrderUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: z.lazy(() => MenuUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipments: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklists: z.lazy(() => QualityChecklistUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  customerFeedbacks: z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();

export const RestaurantCreateOrConnectWithoutRecipesInputSchema: z.ZodType<Prisma.RestaurantCreateOrConnectWithoutRecipesInput> = z.object({
  where: z.lazy(() => RestaurantWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RestaurantCreateWithoutRecipesInputSchema),z.lazy(() => RestaurantUncheckedCreateWithoutRecipesInputSchema) ]),
}).strict();

export const CookBookCreateWithoutRecipesInputSchema: z.ZodType<Prisma.CookBookCreateWithoutRecipesInput> = z.object({
  name: z.string(),
  imageUrl: z.string().optional().nullable(),
  category: z.string(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutCookbooksInputSchema).optional()
}).strict();

export const CookBookUncheckedCreateWithoutRecipesInputSchema: z.ZodType<Prisma.CookBookUncheckedCreateWithoutRecipesInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  imageUrl: z.string().optional().nullable(),
  category: z.string(),
  restaurantId: z.number().int().optional().nullable()
}).strict();

export const CookBookCreateOrConnectWithoutRecipesInputSchema: z.ZodType<Prisma.CookBookCreateOrConnectWithoutRecipesInput> = z.object({
  where: z.lazy(() => CookBookWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CookBookCreateWithoutRecipesInputSchema),z.lazy(() => CookBookUncheckedCreateWithoutRecipesInputSchema) ]),
}).strict();

export const RecipeIngredientCreateWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeIngredientCreateWithoutRecipeInput> = z.object({
  quantity: z.number(),
  unit: z.string(),
  processingInstructions: z.string().optional().nullable(),
  substituteIngredients: z.union([ z.lazy(() => RecipeIngredientCreatesubstituteIngredientsInputSchema),z.number().int().array() ]).optional(),
  isOptional: z.boolean().optional(),
  notes: z.string().optional().nullable(),
  cost: z.number().optional().nullable(),
  density: z.number().optional().nullable(),
  yield: z.number().optional().nullable(),
  joinAt: z.coerce.date().optional(),
  ingredient: z.lazy(() => IngredientCreateNestedOneWithoutRecipeIngredientsInputSchema),
  recipeVersion: z.lazy(() => RecipeVersionCreateNestedOneWithoutIngredientsInputSchema).optional()
}).strict();

export const RecipeIngredientUncheckedCreateWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeIngredientUncheckedCreateWithoutRecipeInput> = z.object({
  id: z.number().int().optional(),
  ingredientId: z.number().int(),
  quantity: z.number(),
  unit: z.string(),
  processingInstructions: z.string().optional().nullable(),
  substituteIngredients: z.union([ z.lazy(() => RecipeIngredientCreatesubstituteIngredientsInputSchema),z.number().int().array() ]).optional(),
  isOptional: z.boolean().optional(),
  notes: z.string().optional().nullable(),
  cost: z.number().optional().nullable(),
  density: z.number().optional().nullable(),
  yield: z.number().optional().nullable(),
  joinAt: z.coerce.date().optional(),
  recipeVersionId: z.number().int().optional().nullable()
}).strict();

export const RecipeIngredientCreateOrConnectWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeIngredientCreateOrConnectWithoutRecipeInput> = z.object({
  where: z.lazy(() => RecipeIngredientWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RecipeIngredientCreateWithoutRecipeInputSchema),z.lazy(() => RecipeIngredientUncheckedCreateWithoutRecipeInputSchema) ]),
}).strict();

export const RecipeIngredientCreateManyRecipeInputEnvelopeSchema: z.ZodType<Prisma.RecipeIngredientCreateManyRecipeInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => RecipeIngredientCreateManyRecipeInputSchema),z.lazy(() => RecipeIngredientCreateManyRecipeInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const RecipeInstructionCreateWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeInstructionCreateWithoutRecipeInput> = z.object({
  stepNumber: z.number().int(),
  instruction: z.string(),
  imageUrl: z.string().optional().nullable(),
  timeInMinutes: z.number().int().optional().nullable(),
  temperature: z.number().optional().nullable(),
  temperatureUnit: z.string().optional().nullable(),
  isCritical: z.boolean().optional(),
  techniqueTips: z.string().optional().nullable(),
  warningNotes: z.string().optional().nullable(),
  RecipeVersion: z.lazy(() => RecipeVersionCreateNestedOneWithoutInstructionsInputSchema).optional(),
  equipment: z.lazy(() => RecipeEquipmentCreateNestedManyWithoutRecipeInstructionInputSchema).optional()
}).strict();

export const RecipeInstructionUncheckedCreateWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeInstructionUncheckedCreateWithoutRecipeInput> = z.object({
  id: z.number().int().optional(),
  stepNumber: z.number().int(),
  instruction: z.string(),
  imageUrl: z.string().optional().nullable(),
  recipeVersionId: z.number().int().optional().nullable(),
  timeInMinutes: z.number().int().optional().nullable(),
  temperature: z.number().optional().nullable(),
  temperatureUnit: z.string().optional().nullable(),
  isCritical: z.boolean().optional(),
  techniqueTips: z.string().optional().nullable(),
  warningNotes: z.string().optional().nullable(),
  equipment: z.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInstructionInputSchema).optional()
}).strict();

export const RecipeInstructionCreateOrConnectWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeInstructionCreateOrConnectWithoutRecipeInput> = z.object({
  where: z.lazy(() => RecipeInstructionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RecipeInstructionCreateWithoutRecipeInputSchema),z.lazy(() => RecipeInstructionUncheckedCreateWithoutRecipeInputSchema) ]),
}).strict();

export const RecipeInstructionCreateManyRecipeInputEnvelopeSchema: z.ZodType<Prisma.RecipeInstructionCreateManyRecipeInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => RecipeInstructionCreateManyRecipeInputSchema),z.lazy(() => RecipeInstructionCreateManyRecipeInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const MenuItemCreateWithoutRecipesInputSchema: z.ZodType<Prisma.MenuItemCreateWithoutRecipesInput> = z.object({
  name: z.string(),
  description: z.string().optional().nullable(),
  price: z.number(),
  foodCost: z.number(),
  isActive: z.boolean().optional(),
  recipeIds: z.union([ z.lazy(() => MenuItemCreaterecipeIdsInputSchema),z.number().int().array() ]).optional(),
  recipeServingsAmount: z.union([ z.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema),z.number().array() ]).optional(),
  recipeServingsCost: z.union([ z.lazy(() => MenuItemCreaterecipeServingsCostInputSchema),z.number().array() ]).optional(),
  allergens: z.union([ z.lazy(() => MenuItemCreateallergensInputSchema),z.string().array() ]).optional(),
  menu: z.lazy(() => MenuCreateNestedOneWithoutMenuItemsInputSchema),
  category: z.lazy(() => MenuCategoryCreateNestedOneWithoutMenuItemsInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeCreateNestedManyWithoutMenuItemInputSchema).optional(),
  nutritionalInfo: z.lazy(() => NutritionalInfoCreateNestedOneWithoutMenuItemInputSchema).optional(),
  recommendations: z.lazy(() => NutritionalRecommendationCreateNestedManyWithoutMenuItemInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsCreateNestedManyWithoutMenuItemInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemCreateNestedManyWithoutMenuItemInputSchema).optional(),
  feedback: z.lazy(() => CustomerFeedbackCreateNestedManyWithoutMenuItemInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionCreateNestedManyWithoutMenuItemsInputSchema).optional()
}).strict();

export const MenuItemUncheckedCreateWithoutRecipesInputSchema: z.ZodType<Prisma.MenuItemUncheckedCreateWithoutRecipesInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  price: z.number(),
  foodCost: z.number(),
  isActive: z.boolean().optional(),
  recipeIds: z.union([ z.lazy(() => MenuItemCreaterecipeIdsInputSchema),z.number().int().array() ]).optional(),
  recipeServingsAmount: z.union([ z.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema),z.number().array() ]).optional(),
  recipeServingsCost: z.union([ z.lazy(() => MenuItemCreaterecipeServingsCostInputSchema),z.number().array() ]).optional(),
  allergens: z.union([ z.lazy(() => MenuItemCreateallergensInputSchema),z.string().array() ]).optional(),
  menuId: z.number().int(),
  categoryId: z.number().int().optional().nullable(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  nutritionalInfo: z.lazy(() => NutritionalInfoUncheckedCreateNestedOneWithoutMenuItemInputSchema).optional(),
  recommendations: z.lazy(() => NutritionalRecommendationUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  feedback: z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutMenuItemsInputSchema).optional()
}).strict();

export const MenuItemCreateOrConnectWithoutRecipesInputSchema: z.ZodType<Prisma.MenuItemCreateOrConnectWithoutRecipesInput> = z.object({
  where: z.lazy(() => MenuItemWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => MenuItemCreateWithoutRecipesInputSchema),z.lazy(() => MenuItemUncheckedCreateWithoutRecipesInputSchema) ]),
}).strict();

export const FoodCostHistoryCreateWithoutRecipeInputSchema: z.ZodType<Prisma.FoodCostHistoryCreateWithoutRecipeInput> = z.object({
  cost: z.number(),
  date: z.coerce.date(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const FoodCostHistoryUncheckedCreateWithoutRecipeInputSchema: z.ZodType<Prisma.FoodCostHistoryUncheckedCreateWithoutRecipeInput> = z.object({
  id: z.number().int().optional(),
  cost: z.number(),
  date: z.coerce.date(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const FoodCostHistoryCreateOrConnectWithoutRecipeInputSchema: z.ZodType<Prisma.FoodCostHistoryCreateOrConnectWithoutRecipeInput> = z.object({
  where: z.lazy(() => FoodCostHistoryWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FoodCostHistoryCreateWithoutRecipeInputSchema),z.lazy(() => FoodCostHistoryUncheckedCreateWithoutRecipeInputSchema) ]),
}).strict();

export const FoodCostHistoryCreateManyRecipeInputEnvelopeSchema: z.ZodType<Prisma.FoodCostHistoryCreateManyRecipeInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => FoodCostHistoryCreateManyRecipeInputSchema),z.lazy(() => FoodCostHistoryCreateManyRecipeInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const PrepHistoryCreateWithoutRecipeInputSchema: z.ZodType<Prisma.PrepHistoryCreateWithoutRecipeInput> = z.object({
  quantity: z.number().int(),
  date: z.coerce.date(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const PrepHistoryUncheckedCreateWithoutRecipeInputSchema: z.ZodType<Prisma.PrepHistoryUncheckedCreateWithoutRecipeInput> = z.object({
  id: z.number().int().optional(),
  quantity: z.number().int(),
  date: z.coerce.date(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const PrepHistoryCreateOrConnectWithoutRecipeInputSchema: z.ZodType<Prisma.PrepHistoryCreateOrConnectWithoutRecipeInput> = z.object({
  where: z.lazy(() => PrepHistoryWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PrepHistoryCreateWithoutRecipeInputSchema),z.lazy(() => PrepHistoryUncheckedCreateWithoutRecipeInputSchema) ]),
}).strict();

export const PrepHistoryCreateManyRecipeInputEnvelopeSchema: z.ZodType<Prisma.PrepHistoryCreateManyRecipeInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => PrepHistoryCreateManyRecipeInputSchema),z.lazy(() => PrepHistoryCreateManyRecipeInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const PrepBoardCreateWithoutRecipesInputSchema: z.ZodType<Prisma.PrepBoardCreateWithoutRecipesInput> = z.object({
  name: z.string(),
  status: z.lazy(() => PrepStatusSchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  prepItems: z.lazy(() => PrepItemCreateNestedManyWithoutPrepBoardInputSchema).optional()
}).strict();

export const PrepBoardUncheckedCreateWithoutRecipesInputSchema: z.ZodType<Prisma.PrepBoardUncheckedCreateWithoutRecipesInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  status: z.lazy(() => PrepStatusSchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  prepItems: z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutPrepBoardInputSchema).optional()
}).strict();

export const PrepBoardCreateOrConnectWithoutRecipesInputSchema: z.ZodType<Prisma.PrepBoardCreateOrConnectWithoutRecipesInput> = z.object({
  where: z.lazy(() => PrepBoardWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PrepBoardCreateWithoutRecipesInputSchema),z.lazy(() => PrepBoardUncheckedCreateWithoutRecipesInputSchema) ]),
}).strict();

export const PrepItemCreateWithoutRecipeInputSchema: z.ZodType<Prisma.PrepItemCreateWithoutRecipeInput> = z.object({
  quantity: z.number().int(),
  status: z.lazy(() => PrepStatusSchema),
  prepBoard: z.lazy(() => PrepBoardCreateNestedOneWithoutPrepItemsInputSchema),
  assignedTo: z.lazy(() => UserCreateNestedOneWithoutPrepItemsInputSchema)
}).strict();

export const PrepItemUncheckedCreateWithoutRecipeInputSchema: z.ZodType<Prisma.PrepItemUncheckedCreateWithoutRecipeInput> = z.object({
  id: z.number().int().optional(),
  prepBoardId: z.number().int(),
  quantity: z.number().int(),
  status: z.lazy(() => PrepStatusSchema),
  assignedToId: z.number().int()
}).strict();

export const PrepItemCreateOrConnectWithoutRecipeInputSchema: z.ZodType<Prisma.PrepItemCreateOrConnectWithoutRecipeInput> = z.object({
  where: z.lazy(() => PrepItemWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PrepItemCreateWithoutRecipeInputSchema),z.lazy(() => PrepItemUncheckedCreateWithoutRecipeInputSchema) ]),
}).strict();

export const PrepItemCreateManyRecipeInputEnvelopeSchema: z.ZodType<Prisma.PrepItemCreateManyRecipeInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => PrepItemCreateManyRecipeInputSchema),z.lazy(() => PrepItemCreateManyRecipeInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const MenuItemRecipeCreateWithoutRecipeInputSchema: z.ZodType<Prisma.MenuItemRecipeCreateWithoutRecipeInput> = z.object({
  joinAt: z.coerce.date().optional(),
  menuItem: z.lazy(() => MenuItemCreateNestedOneWithoutMenuItemRecipesInputSchema)
}).strict();

export const MenuItemRecipeUncheckedCreateWithoutRecipeInputSchema: z.ZodType<Prisma.MenuItemRecipeUncheckedCreateWithoutRecipeInput> = z.object({
  id: z.number().int().optional(),
  menuItemId: z.number().int(),
  joinAt: z.coerce.date().optional()
}).strict();

export const MenuItemRecipeCreateOrConnectWithoutRecipeInputSchema: z.ZodType<Prisma.MenuItemRecipeCreateOrConnectWithoutRecipeInput> = z.object({
  where: z.lazy(() => MenuItemRecipeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => MenuItemRecipeCreateWithoutRecipeInputSchema),z.lazy(() => MenuItemRecipeUncheckedCreateWithoutRecipeInputSchema) ]),
}).strict();

export const MenuItemRecipeCreateManyRecipeInputEnvelopeSchema: z.ZodType<Prisma.MenuItemRecipeCreateManyRecipeInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => MenuItemRecipeCreateManyRecipeInputSchema),z.lazy(() => MenuItemRecipeCreateManyRecipeInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ProductionPlanItemCreateWithoutRecipeInputSchema: z.ZodType<Prisma.ProductionPlanItemCreateWithoutRecipeInput> = z.object({
  quantity: z.number().int(),
  unit: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  productionPlan: z.lazy(() => ProductionPlanCreateNestedOneWithoutItemsInputSchema),
  assignedTo: z.lazy(() => UserCreateNestedOneWithoutProductionPlanItemsInputSchema).optional()
}).strict();

export const ProductionPlanItemUncheckedCreateWithoutRecipeInputSchema: z.ZodType<Prisma.ProductionPlanItemUncheckedCreateWithoutRecipeInput> = z.object({
  id: z.number().int().optional(),
  productionPlanId: z.number().int(),
  quantity: z.number().int(),
  unit: z.string(),
  assignedToId: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ProductionPlanItemCreateOrConnectWithoutRecipeInputSchema: z.ZodType<Prisma.ProductionPlanItemCreateOrConnectWithoutRecipeInput> = z.object({
  where: z.lazy(() => ProductionPlanItemWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProductionPlanItemCreateWithoutRecipeInputSchema),z.lazy(() => ProductionPlanItemUncheckedCreateWithoutRecipeInputSchema) ]),
}).strict();

export const ProductionPlanItemCreateManyRecipeInputEnvelopeSchema: z.ZodType<Prisma.ProductionPlanItemCreateManyRecipeInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ProductionPlanItemCreateManyRecipeInputSchema),z.lazy(() => ProductionPlanItemCreateManyRecipeInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const InventoryWithdrawalCreateWithoutRecipeInputSchema: z.ZodType<Prisma.InventoryWithdrawalCreateWithoutRecipeInput> = z.object({
  dateTime: z.coerce.date(),
  quantity: z.number(),
  unit: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  inventoryItem: z.lazy(() => InventoryItemCreateNestedOneWithoutWithdrawalsInputSchema),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutInventoryWithdrawalsInputSchema)
}).strict();

export const InventoryWithdrawalUncheckedCreateWithoutRecipeInputSchema: z.ZodType<Prisma.InventoryWithdrawalUncheckedCreateWithoutRecipeInput> = z.object({
  id: z.number().int().optional(),
  inventoryItemId: z.number().int(),
  dateTime: z.coerce.date(),
  quantity: z.number(),
  unit: z.string(),
  createdById: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const InventoryWithdrawalCreateOrConnectWithoutRecipeInputSchema: z.ZodType<Prisma.InventoryWithdrawalCreateOrConnectWithoutRecipeInput> = z.object({
  where: z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => InventoryWithdrawalCreateWithoutRecipeInputSchema),z.lazy(() => InventoryWithdrawalUncheckedCreateWithoutRecipeInputSchema) ]),
}).strict();

export const InventoryWithdrawalCreateManyRecipeInputEnvelopeSchema: z.ZodType<Prisma.InventoryWithdrawalCreateManyRecipeInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => InventoryWithdrawalCreateManyRecipeInputSchema),z.lazy(() => InventoryWithdrawalCreateManyRecipeInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const RecipeTagCreateWithoutRecipesInputSchema: z.ZodType<Prisma.RecipeTagCreateWithoutRecipesInput> = z.object({
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const RecipeTagUncheckedCreateWithoutRecipesInputSchema: z.ZodType<Prisma.RecipeTagUncheckedCreateWithoutRecipesInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const RecipeTagCreateOrConnectWithoutRecipesInputSchema: z.ZodType<Prisma.RecipeTagCreateOrConnectWithoutRecipesInput> = z.object({
  where: z.lazy(() => RecipeTagWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RecipeTagCreateWithoutRecipesInputSchema),z.lazy(() => RecipeTagUncheckedCreateWithoutRecipesInputSchema) ]),
}).strict();

export const RecipeVersionCreateWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeVersionCreateWithoutRecipeInput> = z.object({
  versionNumber: z.number().int(),
  description: z.string().optional().nullable(),
  changes: z.string().optional().nullable(),
  isActive: z.boolean().optional(),
  approvedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  ingredients: z.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeVersionInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeVersionInputSchema).optional(),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutRecipeVersionsCreatedInputSchema),
  approvedBy: z.lazy(() => UserCreateNestedOneWithoutRecipeVersionsApprovedInputSchema).optional()
}).strict();

export const RecipeVersionUncheckedCreateWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeVersionUncheckedCreateWithoutRecipeInput> = z.object({
  id: z.number().int().optional(),
  versionNumber: z.number().int(),
  description: z.string().optional().nullable(),
  changes: z.string().optional().nullable(),
  isActive: z.boolean().optional(),
  createdById: z.number().int(),
  approvedById: z.number().int().optional().nullable(),
  approvedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  ingredients: z.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeVersionInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeVersionInputSchema).optional()
}).strict();

export const RecipeVersionCreateOrConnectWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeVersionCreateOrConnectWithoutRecipeInput> = z.object({
  where: z.lazy(() => RecipeVersionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RecipeVersionCreateWithoutRecipeInputSchema),z.lazy(() => RecipeVersionUncheckedCreateWithoutRecipeInputSchema) ]),
}).strict();

export const RecipeVersionCreateManyRecipeInputEnvelopeSchema: z.ZodType<Prisma.RecipeVersionCreateManyRecipeInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => RecipeVersionCreateManyRecipeInputSchema),z.lazy(() => RecipeVersionCreateManyRecipeInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const RecipeEquipmentCreateWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeEquipmentCreateWithoutRecipeInput> = z.object({
  notes: z.string().optional().nullable(),
  equipment: z.lazy(() => EquipmentCreateNestedOneWithoutRecipesInputSchema),
  RecipeInstruction: z.lazy(() => RecipeInstructionCreateNestedOneWithoutEquipmentInputSchema).optional()
}).strict();

export const RecipeEquipmentUncheckedCreateWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeEquipmentUncheckedCreateWithoutRecipeInput> = z.object({
  id: z.number().int().optional(),
  equipmentId: z.number().int(),
  notes: z.string().optional().nullable(),
  recipeInstructionId: z.number().int().optional().nullable()
}).strict();

export const RecipeEquipmentCreateOrConnectWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeEquipmentCreateOrConnectWithoutRecipeInput> = z.object({
  where: z.lazy(() => RecipeEquipmentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RecipeEquipmentCreateWithoutRecipeInputSchema),z.lazy(() => RecipeEquipmentUncheckedCreateWithoutRecipeInputSchema) ]),
}).strict();

export const RecipeEquipmentCreateManyRecipeInputEnvelopeSchema: z.ZodType<Prisma.RecipeEquipmentCreateManyRecipeInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => RecipeEquipmentCreateManyRecipeInputSchema),z.lazy(() => RecipeEquipmentCreateManyRecipeInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const DietaryRestrictionCreateWithoutRecipesInputSchema: z.ZodType<Prisma.DietaryRestrictionCreateWithoutRecipesInput> = z.object({
  name: z.string(),
  description: z.string().optional().nullable(),
  icon: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  menuItems: z.lazy(() => MenuItemCreateNestedManyWithoutDietaryRestrictionsInputSchema).optional(),
  ingredients: z.lazy(() => IngredientCreateNestedManyWithoutDietaryRestrictionsInputSchema).optional()
}).strict();

export const DietaryRestrictionUncheckedCreateWithoutRecipesInputSchema: z.ZodType<Prisma.DietaryRestrictionUncheckedCreateWithoutRecipesInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  icon: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  menuItems: z.lazy(() => MenuItemUncheckedCreateNestedManyWithoutDietaryRestrictionsInputSchema).optional(),
  ingredients: z.lazy(() => IngredientUncheckedCreateNestedManyWithoutDietaryRestrictionsInputSchema).optional()
}).strict();

export const DietaryRestrictionCreateOrConnectWithoutRecipesInputSchema: z.ZodType<Prisma.DietaryRestrictionCreateOrConnectWithoutRecipesInput> = z.object({
  where: z.lazy(() => DietaryRestrictionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => DietaryRestrictionCreateWithoutRecipesInputSchema),z.lazy(() => DietaryRestrictionUncheckedCreateWithoutRecipesInputSchema) ]),
}).strict();

export const RecipeTemperatureCreateWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeTemperatureCreateWithoutRecipeInput> = z.object({
  stepNumber: z.number().int(),
  minTemp: z.number(),
  maxTemp: z.number(),
  isCritical: z.boolean().optional(),
  holdTime: z.number().int().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const RecipeTemperatureUncheckedCreateWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeTemperatureUncheckedCreateWithoutRecipeInput> = z.object({
  id: z.number().int().optional(),
  stepNumber: z.number().int(),
  minTemp: z.number(),
  maxTemp: z.number(),
  isCritical: z.boolean().optional(),
  holdTime: z.number().int().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const RecipeTemperatureCreateOrConnectWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeTemperatureCreateOrConnectWithoutRecipeInput> = z.object({
  where: z.lazy(() => RecipeTemperatureWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RecipeTemperatureCreateWithoutRecipeInputSchema),z.lazy(() => RecipeTemperatureUncheckedCreateWithoutRecipeInputSchema) ]),
}).strict();

export const RecipeTemperatureCreateManyRecipeInputEnvelopeSchema: z.ZodType<Prisma.RecipeTemperatureCreateManyRecipeInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => RecipeTemperatureCreateManyRecipeInputSchema),z.lazy(() => RecipeTemperatureCreateManyRecipeInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const RecipeYieldCreateWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeYieldCreateWithoutRecipeInput> = z.object({
  expectedYield: z.number(),
  actualYield: z.number().optional().nullable(),
  unit: z.string(),
  wastagePercent: z.number().optional().nullable(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const RecipeYieldUncheckedCreateWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeYieldUncheckedCreateWithoutRecipeInput> = z.object({
  id: z.number().int().optional(),
  expectedYield: z.number(),
  actualYield: z.number().optional().nullable(),
  unit: z.string(),
  wastagePercent: z.number().optional().nullable(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const RecipeYieldCreateOrConnectWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeYieldCreateOrConnectWithoutRecipeInput> = z.object({
  where: z.lazy(() => RecipeYieldWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RecipeYieldCreateWithoutRecipeInputSchema),z.lazy(() => RecipeYieldUncheckedCreateWithoutRecipeInputSchema) ]),
}).strict();

export const RecipeYieldCreateManyRecipeInputEnvelopeSchema: z.ZodType<Prisma.RecipeYieldCreateManyRecipeInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => RecipeYieldCreateManyRecipeInputSchema),z.lazy(() => RecipeYieldCreateManyRecipeInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const RecipeLaborCostCreateWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeLaborCostCreateWithoutRecipeInput> = z.object({
  prepTime: z.number().int(),
  cookTime: z.number().int(),
  laborRate: z.number(),
  totalLaborCost: z.number(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const RecipeLaborCostUncheckedCreateWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeLaborCostUncheckedCreateWithoutRecipeInput> = z.object({
  id: z.number().int().optional(),
  prepTime: z.number().int(),
  cookTime: z.number().int(),
  laborRate: z.number(),
  totalLaborCost: z.number(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const RecipeLaborCostCreateOrConnectWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeLaborCostCreateOrConnectWithoutRecipeInput> = z.object({
  where: z.lazy(() => RecipeLaborCostWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RecipeLaborCostCreateWithoutRecipeInputSchema),z.lazy(() => RecipeLaborCostUncheckedCreateWithoutRecipeInputSchema) ]),
}).strict();

export const RecipeLaborCostCreateManyRecipeInputEnvelopeSchema: z.ZodType<Prisma.RecipeLaborCostCreateManyRecipeInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => RecipeLaborCostCreateManyRecipeInputSchema),z.lazy(() => RecipeLaborCostCreateManyRecipeInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const RecipeNutritionCreateWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeNutritionCreateWithoutRecipeInput> = z.object({
  servingSize: z.number(),
  servingUnit: z.string(),
  calories: z.number(),
  protein: z.number(),
  carbohydrates: z.number(),
  fat: z.number(),
  fiber: z.number(),
  sugar: z.number(),
  sodium: z.number(),
  containsGluten: z.boolean().optional(),
  containsDairy: z.boolean().optional(),
  containsNuts: z.boolean().optional(),
  containsEggs: z.boolean().optional(),
  containsSoy: z.boolean().optional(),
  containsFish: z.boolean().optional(),
  containsShellfish: z.boolean().optional(),
  containsSesame: z.boolean().optional()
}).strict();

export const RecipeNutritionUncheckedCreateWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeNutritionUncheckedCreateWithoutRecipeInput> = z.object({
  id: z.number().int().optional(),
  servingSize: z.number(),
  servingUnit: z.string(),
  calories: z.number(),
  protein: z.number(),
  carbohydrates: z.number(),
  fat: z.number(),
  fiber: z.number(),
  sugar: z.number(),
  sodium: z.number(),
  containsGluten: z.boolean().optional(),
  containsDairy: z.boolean().optional(),
  containsNuts: z.boolean().optional(),
  containsEggs: z.boolean().optional(),
  containsSoy: z.boolean().optional(),
  containsFish: z.boolean().optional(),
  containsShellfish: z.boolean().optional(),
  containsSesame: z.boolean().optional()
}).strict();

export const RecipeNutritionCreateOrConnectWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeNutritionCreateOrConnectWithoutRecipeInput> = z.object({
  where: z.lazy(() => RecipeNutritionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RecipeNutritionCreateWithoutRecipeInputSchema),z.lazy(() => RecipeNutritionUncheckedCreateWithoutRecipeInputSchema) ]),
}).strict();

export const RecipeCriticalPointCreateWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeCriticalPointCreateWithoutRecipeInput> = z.object({
  stepNumber: z.number().int(),
  description: z.string(),
  threshold: z.number().optional().nullable(),
  unit: z.string().optional().nullable(),
  action: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const RecipeCriticalPointUncheckedCreateWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeCriticalPointUncheckedCreateWithoutRecipeInput> = z.object({
  id: z.number().int().optional(),
  stepNumber: z.number().int(),
  description: z.string(),
  threshold: z.number().optional().nullable(),
  unit: z.string().optional().nullable(),
  action: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const RecipeCriticalPointCreateOrConnectWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeCriticalPointCreateOrConnectWithoutRecipeInput> = z.object({
  where: z.lazy(() => RecipeCriticalPointWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RecipeCriticalPointCreateWithoutRecipeInputSchema),z.lazy(() => RecipeCriticalPointUncheckedCreateWithoutRecipeInputSchema) ]),
}).strict();

export const RecipeCriticalPointCreateManyRecipeInputEnvelopeSchema: z.ZodType<Prisma.RecipeCriticalPointCreateManyRecipeInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => RecipeCriticalPointCreateManyRecipeInputSchema),z.lazy(() => RecipeCriticalPointCreateManyRecipeInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const RecipeStorageCreateWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeStorageCreateWithoutRecipeInput> = z.object({
  temperature: z.number().optional().nullable(),
  method: z.string(),
  shelfLife: z.number().int(),
  containerType: z.string().optional().nullable(),
  specialNotes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const RecipeStorageUncheckedCreateWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeStorageUncheckedCreateWithoutRecipeInput> = z.object({
  id: z.number().int().optional(),
  temperature: z.number().optional().nullable(),
  method: z.string(),
  shelfLife: z.number().int(),
  containerType: z.string().optional().nullable(),
  specialNotes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const RecipeStorageCreateOrConnectWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeStorageCreateOrConnectWithoutRecipeInput> = z.object({
  where: z.lazy(() => RecipeStorageWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RecipeStorageCreateWithoutRecipeInputSchema),z.lazy(() => RecipeStorageUncheckedCreateWithoutRecipeInputSchema) ]),
}).strict();

export const RecipePhotoCreateWithoutRecipeInputSchema: z.ZodType<Prisma.RecipePhotoCreateWithoutRecipeInput> = z.object({
  url: z.string(),
  type: z.lazy(() => PhotoTypeSchema),
  stepNumber: z.number().int().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const RecipePhotoUncheckedCreateWithoutRecipeInputSchema: z.ZodType<Prisma.RecipePhotoUncheckedCreateWithoutRecipeInput> = z.object({
  id: z.number().int().optional(),
  url: z.string(),
  type: z.lazy(() => PhotoTypeSchema),
  stepNumber: z.number().int().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const RecipePhotoCreateOrConnectWithoutRecipeInputSchema: z.ZodType<Prisma.RecipePhotoCreateOrConnectWithoutRecipeInput> = z.object({
  where: z.lazy(() => RecipePhotoWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RecipePhotoCreateWithoutRecipeInputSchema),z.lazy(() => RecipePhotoUncheckedCreateWithoutRecipeInputSchema) ]),
}).strict();

export const RecipePhotoCreateManyRecipeInputEnvelopeSchema: z.ZodType<Prisma.RecipePhotoCreateManyRecipeInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => RecipePhotoCreateManyRecipeInputSchema),z.lazy(() => RecipePhotoCreateManyRecipeInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const RecipeStatsCreateWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeStatsCreateWithoutRecipeInput> = z.object({
  totalCost: z.number(),
  profitMargin: z.number(),
  averageRating: z.number(),
  preparationCount: z.number().int(),
  lastPrepared: z.coerce.date().optional().nullable()
}).strict();

export const RecipeStatsUncheckedCreateWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeStatsUncheckedCreateWithoutRecipeInput> = z.object({
  id: z.number().int().optional(),
  totalCost: z.number(),
  profitMargin: z.number(),
  averageRating: z.number(),
  preparationCount: z.number().int(),
  lastPrepared: z.coerce.date().optional().nullable()
}).strict();

export const RecipeStatsCreateOrConnectWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeStatsCreateOrConnectWithoutRecipeInput> = z.object({
  where: z.lazy(() => RecipeStatsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RecipeStatsCreateWithoutRecipeInputSchema),z.lazy(() => RecipeStatsUncheckedCreateWithoutRecipeInputSchema) ]),
}).strict();

export const RestaurantUpsertWithoutRecipesInputSchema: z.ZodType<Prisma.RestaurantUpsertWithoutRecipesInput> = z.object({
  update: z.union([ z.lazy(() => RestaurantUpdateWithoutRecipesInputSchema),z.lazy(() => RestaurantUncheckedUpdateWithoutRecipesInputSchema) ]),
  create: z.union([ z.lazy(() => RestaurantCreateWithoutRecipesInputSchema),z.lazy(() => RestaurantUncheckedCreateWithoutRecipesInputSchema) ]),
  where: z.lazy(() => RestaurantWhereInputSchema).optional()
}).strict();

export const RestaurantUpdateToOneWithWhereWithoutRecipesInputSchema: z.ZodType<Prisma.RestaurantUpdateToOneWithWhereWithoutRecipesInput> = z.object({
  where: z.lazy(() => RestaurantWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RestaurantUpdateWithoutRecipesInputSchema),z.lazy(() => RestaurantUncheckedUpdateWithoutRecipesInputSchema) ]),
}).strict();

export const RestaurantUpdateWithoutRecipesInputSchema: z.ZodType<Prisma.RestaurantUpdateWithoutRecipesInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zipCode: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  owner: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deleted: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organization: z.lazy(() => OrganizationUpdateOneWithoutRestaurantsNestedInputSchema).optional(),
  users: z.lazy(() => UserUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: z.lazy(() => CookBookUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: z.lazy(() => InventoryUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: z.lazy(() => OrderUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: z.lazy(() => MenuUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipments: z.lazy(() => EquipmentUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklists: z.lazy(() => QualityChecklistUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  customerFeedbacks: z.lazy(() => CustomerFeedbackUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();

export const RestaurantUncheckedUpdateWithoutRecipesInputSchema: z.ZodType<Prisma.RestaurantUncheckedUpdateWithoutRecipesInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zipCode: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  owner: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deleted: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: z.lazy(() => CookBookUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: z.lazy(() => InventoryUncheckedUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: z.lazy(() => OrderUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: z.lazy(() => MenuUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipments: z.lazy(() => EquipmentUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklists: z.lazy(() => QualityChecklistUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  customerFeedbacks: z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();

export const CookBookUpsertWithoutRecipesInputSchema: z.ZodType<Prisma.CookBookUpsertWithoutRecipesInput> = z.object({
  update: z.union([ z.lazy(() => CookBookUpdateWithoutRecipesInputSchema),z.lazy(() => CookBookUncheckedUpdateWithoutRecipesInputSchema) ]),
  create: z.union([ z.lazy(() => CookBookCreateWithoutRecipesInputSchema),z.lazy(() => CookBookUncheckedCreateWithoutRecipesInputSchema) ]),
  where: z.lazy(() => CookBookWhereInputSchema).optional()
}).strict();

export const CookBookUpdateToOneWithWhereWithoutRecipesInputSchema: z.ZodType<Prisma.CookBookUpdateToOneWithWhereWithoutRecipesInput> = z.object({
  where: z.lazy(() => CookBookWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => CookBookUpdateWithoutRecipesInputSchema),z.lazy(() => CookBookUncheckedUpdateWithoutRecipesInputSchema) ]),
}).strict();

export const CookBookUpdateWithoutRecipesInputSchema: z.ZodType<Prisma.CookBookUpdateWithoutRecipesInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneWithoutCookbooksNestedInputSchema).optional()
}).strict();

export const CookBookUncheckedUpdateWithoutRecipesInputSchema: z.ZodType<Prisma.CookBookUncheckedUpdateWithoutRecipesInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const RecipeIngredientUpsertWithWhereUniqueWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeIngredientUpsertWithWhereUniqueWithoutRecipeInput> = z.object({
  where: z.lazy(() => RecipeIngredientWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => RecipeIngredientUpdateWithoutRecipeInputSchema),z.lazy(() => RecipeIngredientUncheckedUpdateWithoutRecipeInputSchema) ]),
  create: z.union([ z.lazy(() => RecipeIngredientCreateWithoutRecipeInputSchema),z.lazy(() => RecipeIngredientUncheckedCreateWithoutRecipeInputSchema) ]),
}).strict();

export const RecipeIngredientUpdateWithWhereUniqueWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeIngredientUpdateWithWhereUniqueWithoutRecipeInput> = z.object({
  where: z.lazy(() => RecipeIngredientWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => RecipeIngredientUpdateWithoutRecipeInputSchema),z.lazy(() => RecipeIngredientUncheckedUpdateWithoutRecipeInputSchema) ]),
}).strict();

export const RecipeIngredientUpdateManyWithWhereWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeIngredientUpdateManyWithWhereWithoutRecipeInput> = z.object({
  where: z.lazy(() => RecipeIngredientScalarWhereInputSchema),
  data: z.union([ z.lazy(() => RecipeIngredientUpdateManyMutationInputSchema),z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeInputSchema) ]),
}).strict();

export const RecipeInstructionUpsertWithWhereUniqueWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeInstructionUpsertWithWhereUniqueWithoutRecipeInput> = z.object({
  where: z.lazy(() => RecipeInstructionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => RecipeInstructionUpdateWithoutRecipeInputSchema),z.lazy(() => RecipeInstructionUncheckedUpdateWithoutRecipeInputSchema) ]),
  create: z.union([ z.lazy(() => RecipeInstructionCreateWithoutRecipeInputSchema),z.lazy(() => RecipeInstructionUncheckedCreateWithoutRecipeInputSchema) ]),
}).strict();

export const RecipeInstructionUpdateWithWhereUniqueWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeInstructionUpdateWithWhereUniqueWithoutRecipeInput> = z.object({
  where: z.lazy(() => RecipeInstructionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => RecipeInstructionUpdateWithoutRecipeInputSchema),z.lazy(() => RecipeInstructionUncheckedUpdateWithoutRecipeInputSchema) ]),
}).strict();

export const RecipeInstructionUpdateManyWithWhereWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeInstructionUpdateManyWithWhereWithoutRecipeInput> = z.object({
  where: z.lazy(() => RecipeInstructionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => RecipeInstructionUpdateManyMutationInputSchema),z.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeInputSchema) ]),
}).strict();

export const MenuItemUpsertWithWhereUniqueWithoutRecipesInputSchema: z.ZodType<Prisma.MenuItemUpsertWithWhereUniqueWithoutRecipesInput> = z.object({
  where: z.lazy(() => MenuItemWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => MenuItemUpdateWithoutRecipesInputSchema),z.lazy(() => MenuItemUncheckedUpdateWithoutRecipesInputSchema) ]),
  create: z.union([ z.lazy(() => MenuItemCreateWithoutRecipesInputSchema),z.lazy(() => MenuItemUncheckedCreateWithoutRecipesInputSchema) ]),
}).strict();

export const MenuItemUpdateWithWhereUniqueWithoutRecipesInputSchema: z.ZodType<Prisma.MenuItemUpdateWithWhereUniqueWithoutRecipesInput> = z.object({
  where: z.lazy(() => MenuItemWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => MenuItemUpdateWithoutRecipesInputSchema),z.lazy(() => MenuItemUncheckedUpdateWithoutRecipesInputSchema) ]),
}).strict();

export const MenuItemUpdateManyWithWhereWithoutRecipesInputSchema: z.ZodType<Prisma.MenuItemUpdateManyWithWhereWithoutRecipesInput> = z.object({
  where: z.lazy(() => MenuItemScalarWhereInputSchema),
  data: z.union([ z.lazy(() => MenuItemUpdateManyMutationInputSchema),z.lazy(() => MenuItemUncheckedUpdateManyWithoutRecipesInputSchema) ]),
}).strict();

export const FoodCostHistoryUpsertWithWhereUniqueWithoutRecipeInputSchema: z.ZodType<Prisma.FoodCostHistoryUpsertWithWhereUniqueWithoutRecipeInput> = z.object({
  where: z.lazy(() => FoodCostHistoryWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => FoodCostHistoryUpdateWithoutRecipeInputSchema),z.lazy(() => FoodCostHistoryUncheckedUpdateWithoutRecipeInputSchema) ]),
  create: z.union([ z.lazy(() => FoodCostHistoryCreateWithoutRecipeInputSchema),z.lazy(() => FoodCostHistoryUncheckedCreateWithoutRecipeInputSchema) ]),
}).strict();

export const FoodCostHistoryUpdateWithWhereUniqueWithoutRecipeInputSchema: z.ZodType<Prisma.FoodCostHistoryUpdateWithWhereUniqueWithoutRecipeInput> = z.object({
  where: z.lazy(() => FoodCostHistoryWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => FoodCostHistoryUpdateWithoutRecipeInputSchema),z.lazy(() => FoodCostHistoryUncheckedUpdateWithoutRecipeInputSchema) ]),
}).strict();

export const FoodCostHistoryUpdateManyWithWhereWithoutRecipeInputSchema: z.ZodType<Prisma.FoodCostHistoryUpdateManyWithWhereWithoutRecipeInput> = z.object({
  where: z.lazy(() => FoodCostHistoryScalarWhereInputSchema),
  data: z.union([ z.lazy(() => FoodCostHistoryUpdateManyMutationInputSchema),z.lazy(() => FoodCostHistoryUncheckedUpdateManyWithoutRecipeInputSchema) ]),
}).strict();

export const FoodCostHistoryScalarWhereInputSchema: z.ZodType<Prisma.FoodCostHistoryScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => FoodCostHistoryScalarWhereInputSchema),z.lazy(() => FoodCostHistoryScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => FoodCostHistoryScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FoodCostHistoryScalarWhereInputSchema),z.lazy(() => FoodCostHistoryScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  recipeId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  cost: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const PrepHistoryUpsertWithWhereUniqueWithoutRecipeInputSchema: z.ZodType<Prisma.PrepHistoryUpsertWithWhereUniqueWithoutRecipeInput> = z.object({
  where: z.lazy(() => PrepHistoryWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => PrepHistoryUpdateWithoutRecipeInputSchema),z.lazy(() => PrepHistoryUncheckedUpdateWithoutRecipeInputSchema) ]),
  create: z.union([ z.lazy(() => PrepHistoryCreateWithoutRecipeInputSchema),z.lazy(() => PrepHistoryUncheckedCreateWithoutRecipeInputSchema) ]),
}).strict();

export const PrepHistoryUpdateWithWhereUniqueWithoutRecipeInputSchema: z.ZodType<Prisma.PrepHistoryUpdateWithWhereUniqueWithoutRecipeInput> = z.object({
  where: z.lazy(() => PrepHistoryWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => PrepHistoryUpdateWithoutRecipeInputSchema),z.lazy(() => PrepHistoryUncheckedUpdateWithoutRecipeInputSchema) ]),
}).strict();

export const PrepHistoryUpdateManyWithWhereWithoutRecipeInputSchema: z.ZodType<Prisma.PrepHistoryUpdateManyWithWhereWithoutRecipeInput> = z.object({
  where: z.lazy(() => PrepHistoryScalarWhereInputSchema),
  data: z.union([ z.lazy(() => PrepHistoryUpdateManyMutationInputSchema),z.lazy(() => PrepHistoryUncheckedUpdateManyWithoutRecipeInputSchema) ]),
}).strict();

export const PrepHistoryScalarWhereInputSchema: z.ZodType<Prisma.PrepHistoryScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PrepHistoryScalarWhereInputSchema),z.lazy(() => PrepHistoryScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PrepHistoryScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PrepHistoryScalarWhereInputSchema),z.lazy(() => PrepHistoryScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  recipeId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  quantity: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const PrepBoardUpsertWithWhereUniqueWithoutRecipesInputSchema: z.ZodType<Prisma.PrepBoardUpsertWithWhereUniqueWithoutRecipesInput> = z.object({
  where: z.lazy(() => PrepBoardWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => PrepBoardUpdateWithoutRecipesInputSchema),z.lazy(() => PrepBoardUncheckedUpdateWithoutRecipesInputSchema) ]),
  create: z.union([ z.lazy(() => PrepBoardCreateWithoutRecipesInputSchema),z.lazy(() => PrepBoardUncheckedCreateWithoutRecipesInputSchema) ]),
}).strict();

export const PrepBoardUpdateWithWhereUniqueWithoutRecipesInputSchema: z.ZodType<Prisma.PrepBoardUpdateWithWhereUniqueWithoutRecipesInput> = z.object({
  where: z.lazy(() => PrepBoardWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => PrepBoardUpdateWithoutRecipesInputSchema),z.lazy(() => PrepBoardUncheckedUpdateWithoutRecipesInputSchema) ]),
}).strict();

export const PrepBoardUpdateManyWithWhereWithoutRecipesInputSchema: z.ZodType<Prisma.PrepBoardUpdateManyWithWhereWithoutRecipesInput> = z.object({
  where: z.lazy(() => PrepBoardScalarWhereInputSchema),
  data: z.union([ z.lazy(() => PrepBoardUpdateManyMutationInputSchema),z.lazy(() => PrepBoardUncheckedUpdateManyWithoutRecipesInputSchema) ]),
}).strict();

export const PrepBoardScalarWhereInputSchema: z.ZodType<Prisma.PrepBoardScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PrepBoardScalarWhereInputSchema),z.lazy(() => PrepBoardScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PrepBoardScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PrepBoardScalarWhereInputSchema),z.lazy(() => PrepBoardScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => EnumPrepStatusFilterSchema),z.lazy(() => PrepStatusSchema) ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const PrepItemUpsertWithWhereUniqueWithoutRecipeInputSchema: z.ZodType<Prisma.PrepItemUpsertWithWhereUniqueWithoutRecipeInput> = z.object({
  where: z.lazy(() => PrepItemWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => PrepItemUpdateWithoutRecipeInputSchema),z.lazy(() => PrepItemUncheckedUpdateWithoutRecipeInputSchema) ]),
  create: z.union([ z.lazy(() => PrepItemCreateWithoutRecipeInputSchema),z.lazy(() => PrepItemUncheckedCreateWithoutRecipeInputSchema) ]),
}).strict();

export const PrepItemUpdateWithWhereUniqueWithoutRecipeInputSchema: z.ZodType<Prisma.PrepItemUpdateWithWhereUniqueWithoutRecipeInput> = z.object({
  where: z.lazy(() => PrepItemWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => PrepItemUpdateWithoutRecipeInputSchema),z.lazy(() => PrepItemUncheckedUpdateWithoutRecipeInputSchema) ]),
}).strict();

export const PrepItemUpdateManyWithWhereWithoutRecipeInputSchema: z.ZodType<Prisma.PrepItemUpdateManyWithWhereWithoutRecipeInput> = z.object({
  where: z.lazy(() => PrepItemScalarWhereInputSchema),
  data: z.union([ z.lazy(() => PrepItemUpdateManyMutationInputSchema),z.lazy(() => PrepItemUncheckedUpdateManyWithoutRecipeInputSchema) ]),
}).strict();

export const MenuItemRecipeUpsertWithWhereUniqueWithoutRecipeInputSchema: z.ZodType<Prisma.MenuItemRecipeUpsertWithWhereUniqueWithoutRecipeInput> = z.object({
  where: z.lazy(() => MenuItemRecipeWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => MenuItemRecipeUpdateWithoutRecipeInputSchema),z.lazy(() => MenuItemRecipeUncheckedUpdateWithoutRecipeInputSchema) ]),
  create: z.union([ z.lazy(() => MenuItemRecipeCreateWithoutRecipeInputSchema),z.lazy(() => MenuItemRecipeUncheckedCreateWithoutRecipeInputSchema) ]),
}).strict();

export const MenuItemRecipeUpdateWithWhereUniqueWithoutRecipeInputSchema: z.ZodType<Prisma.MenuItemRecipeUpdateWithWhereUniqueWithoutRecipeInput> = z.object({
  where: z.lazy(() => MenuItemRecipeWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => MenuItemRecipeUpdateWithoutRecipeInputSchema),z.lazy(() => MenuItemRecipeUncheckedUpdateWithoutRecipeInputSchema) ]),
}).strict();

export const MenuItemRecipeUpdateManyWithWhereWithoutRecipeInputSchema: z.ZodType<Prisma.MenuItemRecipeUpdateManyWithWhereWithoutRecipeInput> = z.object({
  where: z.lazy(() => MenuItemRecipeScalarWhereInputSchema),
  data: z.union([ z.lazy(() => MenuItemRecipeUpdateManyMutationInputSchema),z.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutRecipeInputSchema) ]),
}).strict();

export const MenuItemRecipeScalarWhereInputSchema: z.ZodType<Prisma.MenuItemRecipeScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => MenuItemRecipeScalarWhereInputSchema),z.lazy(() => MenuItemRecipeScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MenuItemRecipeScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MenuItemRecipeScalarWhereInputSchema),z.lazy(() => MenuItemRecipeScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  menuItemId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  recipeId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  joinAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ProductionPlanItemUpsertWithWhereUniqueWithoutRecipeInputSchema: z.ZodType<Prisma.ProductionPlanItemUpsertWithWhereUniqueWithoutRecipeInput> = z.object({
  where: z.lazy(() => ProductionPlanItemWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ProductionPlanItemUpdateWithoutRecipeInputSchema),z.lazy(() => ProductionPlanItemUncheckedUpdateWithoutRecipeInputSchema) ]),
  create: z.union([ z.lazy(() => ProductionPlanItemCreateWithoutRecipeInputSchema),z.lazy(() => ProductionPlanItemUncheckedCreateWithoutRecipeInputSchema) ]),
}).strict();

export const ProductionPlanItemUpdateWithWhereUniqueWithoutRecipeInputSchema: z.ZodType<Prisma.ProductionPlanItemUpdateWithWhereUniqueWithoutRecipeInput> = z.object({
  where: z.lazy(() => ProductionPlanItemWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ProductionPlanItemUpdateWithoutRecipeInputSchema),z.lazy(() => ProductionPlanItemUncheckedUpdateWithoutRecipeInputSchema) ]),
}).strict();

export const ProductionPlanItemUpdateManyWithWhereWithoutRecipeInputSchema: z.ZodType<Prisma.ProductionPlanItemUpdateManyWithWhereWithoutRecipeInput> = z.object({
  where: z.lazy(() => ProductionPlanItemScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ProductionPlanItemUpdateManyMutationInputSchema),z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutRecipeInputSchema) ]),
}).strict();

export const InventoryWithdrawalUpsertWithWhereUniqueWithoutRecipeInputSchema: z.ZodType<Prisma.InventoryWithdrawalUpsertWithWhereUniqueWithoutRecipeInput> = z.object({
  where: z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => InventoryWithdrawalUpdateWithoutRecipeInputSchema),z.lazy(() => InventoryWithdrawalUncheckedUpdateWithoutRecipeInputSchema) ]),
  create: z.union([ z.lazy(() => InventoryWithdrawalCreateWithoutRecipeInputSchema),z.lazy(() => InventoryWithdrawalUncheckedCreateWithoutRecipeInputSchema) ]),
}).strict();

export const InventoryWithdrawalUpdateWithWhereUniqueWithoutRecipeInputSchema: z.ZodType<Prisma.InventoryWithdrawalUpdateWithWhereUniqueWithoutRecipeInput> = z.object({
  where: z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => InventoryWithdrawalUpdateWithoutRecipeInputSchema),z.lazy(() => InventoryWithdrawalUncheckedUpdateWithoutRecipeInputSchema) ]),
}).strict();

export const InventoryWithdrawalUpdateManyWithWhereWithoutRecipeInputSchema: z.ZodType<Prisma.InventoryWithdrawalUpdateManyWithWhereWithoutRecipeInput> = z.object({
  where: z.lazy(() => InventoryWithdrawalScalarWhereInputSchema),
  data: z.union([ z.lazy(() => InventoryWithdrawalUpdateManyMutationInputSchema),z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutRecipeInputSchema) ]),
}).strict();

export const RecipeTagUpsertWithWhereUniqueWithoutRecipesInputSchema: z.ZodType<Prisma.RecipeTagUpsertWithWhereUniqueWithoutRecipesInput> = z.object({
  where: z.lazy(() => RecipeTagWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => RecipeTagUpdateWithoutRecipesInputSchema),z.lazy(() => RecipeTagUncheckedUpdateWithoutRecipesInputSchema) ]),
  create: z.union([ z.lazy(() => RecipeTagCreateWithoutRecipesInputSchema),z.lazy(() => RecipeTagUncheckedCreateWithoutRecipesInputSchema) ]),
}).strict();

export const RecipeTagUpdateWithWhereUniqueWithoutRecipesInputSchema: z.ZodType<Prisma.RecipeTagUpdateWithWhereUniqueWithoutRecipesInput> = z.object({
  where: z.lazy(() => RecipeTagWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => RecipeTagUpdateWithoutRecipesInputSchema),z.lazy(() => RecipeTagUncheckedUpdateWithoutRecipesInputSchema) ]),
}).strict();

export const RecipeTagUpdateManyWithWhereWithoutRecipesInputSchema: z.ZodType<Prisma.RecipeTagUpdateManyWithWhereWithoutRecipesInput> = z.object({
  where: z.lazy(() => RecipeTagScalarWhereInputSchema),
  data: z.union([ z.lazy(() => RecipeTagUpdateManyMutationInputSchema),z.lazy(() => RecipeTagUncheckedUpdateManyWithoutRecipesInputSchema) ]),
}).strict();

export const RecipeTagScalarWhereInputSchema: z.ZodType<Prisma.RecipeTagScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RecipeTagScalarWhereInputSchema),z.lazy(() => RecipeTagScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RecipeTagScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RecipeTagScalarWhereInputSchema),z.lazy(() => RecipeTagScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const RecipeVersionUpsertWithWhereUniqueWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeVersionUpsertWithWhereUniqueWithoutRecipeInput> = z.object({
  where: z.lazy(() => RecipeVersionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => RecipeVersionUpdateWithoutRecipeInputSchema),z.lazy(() => RecipeVersionUncheckedUpdateWithoutRecipeInputSchema) ]),
  create: z.union([ z.lazy(() => RecipeVersionCreateWithoutRecipeInputSchema),z.lazy(() => RecipeVersionUncheckedCreateWithoutRecipeInputSchema) ]),
}).strict();

export const RecipeVersionUpdateWithWhereUniqueWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeVersionUpdateWithWhereUniqueWithoutRecipeInput> = z.object({
  where: z.lazy(() => RecipeVersionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => RecipeVersionUpdateWithoutRecipeInputSchema),z.lazy(() => RecipeVersionUncheckedUpdateWithoutRecipeInputSchema) ]),
}).strict();

export const RecipeVersionUpdateManyWithWhereWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeVersionUpdateManyWithWhereWithoutRecipeInput> = z.object({
  where: z.lazy(() => RecipeVersionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => RecipeVersionUpdateManyMutationInputSchema),z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutRecipeInputSchema) ]),
}).strict();

export const RecipeEquipmentUpsertWithWhereUniqueWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeEquipmentUpsertWithWhereUniqueWithoutRecipeInput> = z.object({
  where: z.lazy(() => RecipeEquipmentWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => RecipeEquipmentUpdateWithoutRecipeInputSchema),z.lazy(() => RecipeEquipmentUncheckedUpdateWithoutRecipeInputSchema) ]),
  create: z.union([ z.lazy(() => RecipeEquipmentCreateWithoutRecipeInputSchema),z.lazy(() => RecipeEquipmentUncheckedCreateWithoutRecipeInputSchema) ]),
}).strict();

export const RecipeEquipmentUpdateWithWhereUniqueWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeEquipmentUpdateWithWhereUniqueWithoutRecipeInput> = z.object({
  where: z.lazy(() => RecipeEquipmentWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => RecipeEquipmentUpdateWithoutRecipeInputSchema),z.lazy(() => RecipeEquipmentUncheckedUpdateWithoutRecipeInputSchema) ]),
}).strict();

export const RecipeEquipmentUpdateManyWithWhereWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeEquipmentUpdateManyWithWhereWithoutRecipeInput> = z.object({
  where: z.lazy(() => RecipeEquipmentScalarWhereInputSchema),
  data: z.union([ z.lazy(() => RecipeEquipmentUpdateManyMutationInputSchema),z.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutRecipeInputSchema) ]),
}).strict();

export const DietaryRestrictionUpsertWithWhereUniqueWithoutRecipesInputSchema: z.ZodType<Prisma.DietaryRestrictionUpsertWithWhereUniqueWithoutRecipesInput> = z.object({
  where: z.lazy(() => DietaryRestrictionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => DietaryRestrictionUpdateWithoutRecipesInputSchema),z.lazy(() => DietaryRestrictionUncheckedUpdateWithoutRecipesInputSchema) ]),
  create: z.union([ z.lazy(() => DietaryRestrictionCreateWithoutRecipesInputSchema),z.lazy(() => DietaryRestrictionUncheckedCreateWithoutRecipesInputSchema) ]),
}).strict();

export const DietaryRestrictionUpdateWithWhereUniqueWithoutRecipesInputSchema: z.ZodType<Prisma.DietaryRestrictionUpdateWithWhereUniqueWithoutRecipesInput> = z.object({
  where: z.lazy(() => DietaryRestrictionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => DietaryRestrictionUpdateWithoutRecipesInputSchema),z.lazy(() => DietaryRestrictionUncheckedUpdateWithoutRecipesInputSchema) ]),
}).strict();

export const DietaryRestrictionUpdateManyWithWhereWithoutRecipesInputSchema: z.ZodType<Prisma.DietaryRestrictionUpdateManyWithWhereWithoutRecipesInput> = z.object({
  where: z.lazy(() => DietaryRestrictionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => DietaryRestrictionUpdateManyMutationInputSchema),z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutRecipesInputSchema) ]),
}).strict();

export const DietaryRestrictionScalarWhereInputSchema: z.ZodType<Prisma.DietaryRestrictionScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => DietaryRestrictionScalarWhereInputSchema),z.lazy(() => DietaryRestrictionScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => DietaryRestrictionScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => DietaryRestrictionScalarWhereInputSchema),z.lazy(() => DietaryRestrictionScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  icon: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const RecipeTemperatureUpsertWithWhereUniqueWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeTemperatureUpsertWithWhereUniqueWithoutRecipeInput> = z.object({
  where: z.lazy(() => RecipeTemperatureWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => RecipeTemperatureUpdateWithoutRecipeInputSchema),z.lazy(() => RecipeTemperatureUncheckedUpdateWithoutRecipeInputSchema) ]),
  create: z.union([ z.lazy(() => RecipeTemperatureCreateWithoutRecipeInputSchema),z.lazy(() => RecipeTemperatureUncheckedCreateWithoutRecipeInputSchema) ]),
}).strict();

export const RecipeTemperatureUpdateWithWhereUniqueWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeTemperatureUpdateWithWhereUniqueWithoutRecipeInput> = z.object({
  where: z.lazy(() => RecipeTemperatureWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => RecipeTemperatureUpdateWithoutRecipeInputSchema),z.lazy(() => RecipeTemperatureUncheckedUpdateWithoutRecipeInputSchema) ]),
}).strict();

export const RecipeTemperatureUpdateManyWithWhereWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeTemperatureUpdateManyWithWhereWithoutRecipeInput> = z.object({
  where: z.lazy(() => RecipeTemperatureScalarWhereInputSchema),
  data: z.union([ z.lazy(() => RecipeTemperatureUpdateManyMutationInputSchema),z.lazy(() => RecipeTemperatureUncheckedUpdateManyWithoutRecipeInputSchema) ]),
}).strict();

export const RecipeTemperatureScalarWhereInputSchema: z.ZodType<Prisma.RecipeTemperatureScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RecipeTemperatureScalarWhereInputSchema),z.lazy(() => RecipeTemperatureScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RecipeTemperatureScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RecipeTemperatureScalarWhereInputSchema),z.lazy(() => RecipeTemperatureScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  recipeId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  stepNumber: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  minTemp: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  maxTemp: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  isCritical: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  holdTime: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const RecipeYieldUpsertWithWhereUniqueWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeYieldUpsertWithWhereUniqueWithoutRecipeInput> = z.object({
  where: z.lazy(() => RecipeYieldWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => RecipeYieldUpdateWithoutRecipeInputSchema),z.lazy(() => RecipeYieldUncheckedUpdateWithoutRecipeInputSchema) ]),
  create: z.union([ z.lazy(() => RecipeYieldCreateWithoutRecipeInputSchema),z.lazy(() => RecipeYieldUncheckedCreateWithoutRecipeInputSchema) ]),
}).strict();

export const RecipeYieldUpdateWithWhereUniqueWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeYieldUpdateWithWhereUniqueWithoutRecipeInput> = z.object({
  where: z.lazy(() => RecipeYieldWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => RecipeYieldUpdateWithoutRecipeInputSchema),z.lazy(() => RecipeYieldUncheckedUpdateWithoutRecipeInputSchema) ]),
}).strict();

export const RecipeYieldUpdateManyWithWhereWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeYieldUpdateManyWithWhereWithoutRecipeInput> = z.object({
  where: z.lazy(() => RecipeYieldScalarWhereInputSchema),
  data: z.union([ z.lazy(() => RecipeYieldUpdateManyMutationInputSchema),z.lazy(() => RecipeYieldUncheckedUpdateManyWithoutRecipeInputSchema) ]),
}).strict();

export const RecipeYieldScalarWhereInputSchema: z.ZodType<Prisma.RecipeYieldScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RecipeYieldScalarWhereInputSchema),z.lazy(() => RecipeYieldScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RecipeYieldScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RecipeYieldScalarWhereInputSchema),z.lazy(() => RecipeYieldScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  recipeId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  expectedYield: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  actualYield: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  unit: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  wastagePercent: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const RecipeLaborCostUpsertWithWhereUniqueWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeLaborCostUpsertWithWhereUniqueWithoutRecipeInput> = z.object({
  where: z.lazy(() => RecipeLaborCostWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => RecipeLaborCostUpdateWithoutRecipeInputSchema),z.lazy(() => RecipeLaborCostUncheckedUpdateWithoutRecipeInputSchema) ]),
  create: z.union([ z.lazy(() => RecipeLaborCostCreateWithoutRecipeInputSchema),z.lazy(() => RecipeLaborCostUncheckedCreateWithoutRecipeInputSchema) ]),
}).strict();

export const RecipeLaborCostUpdateWithWhereUniqueWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeLaborCostUpdateWithWhereUniqueWithoutRecipeInput> = z.object({
  where: z.lazy(() => RecipeLaborCostWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => RecipeLaborCostUpdateWithoutRecipeInputSchema),z.lazy(() => RecipeLaborCostUncheckedUpdateWithoutRecipeInputSchema) ]),
}).strict();

export const RecipeLaborCostUpdateManyWithWhereWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeLaborCostUpdateManyWithWhereWithoutRecipeInput> = z.object({
  where: z.lazy(() => RecipeLaborCostScalarWhereInputSchema),
  data: z.union([ z.lazy(() => RecipeLaborCostUpdateManyMutationInputSchema),z.lazy(() => RecipeLaborCostUncheckedUpdateManyWithoutRecipeInputSchema) ]),
}).strict();

export const RecipeLaborCostScalarWhereInputSchema: z.ZodType<Prisma.RecipeLaborCostScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RecipeLaborCostScalarWhereInputSchema),z.lazy(() => RecipeLaborCostScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RecipeLaborCostScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RecipeLaborCostScalarWhereInputSchema),z.lazy(() => RecipeLaborCostScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  recipeId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  prepTime: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  cookTime: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  laborRate: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  totalLaborCost: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const RecipeNutritionUpsertWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeNutritionUpsertWithoutRecipeInput> = z.object({
  update: z.union([ z.lazy(() => RecipeNutritionUpdateWithoutRecipeInputSchema),z.lazy(() => RecipeNutritionUncheckedUpdateWithoutRecipeInputSchema) ]),
  create: z.union([ z.lazy(() => RecipeNutritionCreateWithoutRecipeInputSchema),z.lazy(() => RecipeNutritionUncheckedCreateWithoutRecipeInputSchema) ]),
  where: z.lazy(() => RecipeNutritionWhereInputSchema).optional()
}).strict();

export const RecipeNutritionUpdateToOneWithWhereWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeNutritionUpdateToOneWithWhereWithoutRecipeInput> = z.object({
  where: z.lazy(() => RecipeNutritionWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RecipeNutritionUpdateWithoutRecipeInputSchema),z.lazy(() => RecipeNutritionUncheckedUpdateWithoutRecipeInputSchema) ]),
}).strict();

export const RecipeNutritionUpdateWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeNutritionUpdateWithoutRecipeInput> = z.object({
  servingSize: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  servingUnit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  calories: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  protein: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  carbohydrates: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  fat: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  fiber: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  sugar: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  sodium: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  containsGluten: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  containsDairy: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  containsNuts: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  containsEggs: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  containsSoy: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  containsFish: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  containsShellfish: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  containsSesame: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RecipeNutritionUncheckedUpdateWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeNutritionUncheckedUpdateWithoutRecipeInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  servingSize: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  servingUnit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  calories: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  protein: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  carbohydrates: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  fat: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  fiber: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  sugar: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  sodium: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  containsGluten: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  containsDairy: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  containsNuts: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  containsEggs: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  containsSoy: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  containsFish: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  containsShellfish: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  containsSesame: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RecipeCriticalPointUpsertWithWhereUniqueWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeCriticalPointUpsertWithWhereUniqueWithoutRecipeInput> = z.object({
  where: z.lazy(() => RecipeCriticalPointWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => RecipeCriticalPointUpdateWithoutRecipeInputSchema),z.lazy(() => RecipeCriticalPointUncheckedUpdateWithoutRecipeInputSchema) ]),
  create: z.union([ z.lazy(() => RecipeCriticalPointCreateWithoutRecipeInputSchema),z.lazy(() => RecipeCriticalPointUncheckedCreateWithoutRecipeInputSchema) ]),
}).strict();

export const RecipeCriticalPointUpdateWithWhereUniqueWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeCriticalPointUpdateWithWhereUniqueWithoutRecipeInput> = z.object({
  where: z.lazy(() => RecipeCriticalPointWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => RecipeCriticalPointUpdateWithoutRecipeInputSchema),z.lazy(() => RecipeCriticalPointUncheckedUpdateWithoutRecipeInputSchema) ]),
}).strict();

export const RecipeCriticalPointUpdateManyWithWhereWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeCriticalPointUpdateManyWithWhereWithoutRecipeInput> = z.object({
  where: z.lazy(() => RecipeCriticalPointScalarWhereInputSchema),
  data: z.union([ z.lazy(() => RecipeCriticalPointUpdateManyMutationInputSchema),z.lazy(() => RecipeCriticalPointUncheckedUpdateManyWithoutRecipeInputSchema) ]),
}).strict();

export const RecipeCriticalPointScalarWhereInputSchema: z.ZodType<Prisma.RecipeCriticalPointScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RecipeCriticalPointScalarWhereInputSchema),z.lazy(() => RecipeCriticalPointScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RecipeCriticalPointScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RecipeCriticalPointScalarWhereInputSchema),z.lazy(() => RecipeCriticalPointScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  recipeId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  stepNumber: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  description: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  threshold: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  unit: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  action: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const RecipeStorageUpsertWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeStorageUpsertWithoutRecipeInput> = z.object({
  update: z.union([ z.lazy(() => RecipeStorageUpdateWithoutRecipeInputSchema),z.lazy(() => RecipeStorageUncheckedUpdateWithoutRecipeInputSchema) ]),
  create: z.union([ z.lazy(() => RecipeStorageCreateWithoutRecipeInputSchema),z.lazy(() => RecipeStorageUncheckedCreateWithoutRecipeInputSchema) ]),
  where: z.lazy(() => RecipeStorageWhereInputSchema).optional()
}).strict();

export const RecipeStorageUpdateToOneWithWhereWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeStorageUpdateToOneWithWhereWithoutRecipeInput> = z.object({
  where: z.lazy(() => RecipeStorageWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RecipeStorageUpdateWithoutRecipeInputSchema),z.lazy(() => RecipeStorageUncheckedUpdateWithoutRecipeInputSchema) ]),
}).strict();

export const RecipeStorageUpdateWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeStorageUpdateWithoutRecipeInput> = z.object({
  temperature: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  method: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  shelfLife: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  containerType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  specialNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RecipeStorageUncheckedUpdateWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeStorageUncheckedUpdateWithoutRecipeInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  temperature: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  method: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  shelfLife: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  containerType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  specialNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RecipePhotoUpsertWithWhereUniqueWithoutRecipeInputSchema: z.ZodType<Prisma.RecipePhotoUpsertWithWhereUniqueWithoutRecipeInput> = z.object({
  where: z.lazy(() => RecipePhotoWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => RecipePhotoUpdateWithoutRecipeInputSchema),z.lazy(() => RecipePhotoUncheckedUpdateWithoutRecipeInputSchema) ]),
  create: z.union([ z.lazy(() => RecipePhotoCreateWithoutRecipeInputSchema),z.lazy(() => RecipePhotoUncheckedCreateWithoutRecipeInputSchema) ]),
}).strict();

export const RecipePhotoUpdateWithWhereUniqueWithoutRecipeInputSchema: z.ZodType<Prisma.RecipePhotoUpdateWithWhereUniqueWithoutRecipeInput> = z.object({
  where: z.lazy(() => RecipePhotoWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => RecipePhotoUpdateWithoutRecipeInputSchema),z.lazy(() => RecipePhotoUncheckedUpdateWithoutRecipeInputSchema) ]),
}).strict();

export const RecipePhotoUpdateManyWithWhereWithoutRecipeInputSchema: z.ZodType<Prisma.RecipePhotoUpdateManyWithWhereWithoutRecipeInput> = z.object({
  where: z.lazy(() => RecipePhotoScalarWhereInputSchema),
  data: z.union([ z.lazy(() => RecipePhotoUpdateManyMutationInputSchema),z.lazy(() => RecipePhotoUncheckedUpdateManyWithoutRecipeInputSchema) ]),
}).strict();

export const RecipePhotoScalarWhereInputSchema: z.ZodType<Prisma.RecipePhotoScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RecipePhotoScalarWhereInputSchema),z.lazy(() => RecipePhotoScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RecipePhotoScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RecipePhotoScalarWhereInputSchema),z.lazy(() => RecipePhotoScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  recipeId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  url: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumPhotoTypeFilterSchema),z.lazy(() => PhotoTypeSchema) ]).optional(),
  stepNumber: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const RecipeStatsUpsertWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeStatsUpsertWithoutRecipeInput> = z.object({
  update: z.union([ z.lazy(() => RecipeStatsUpdateWithoutRecipeInputSchema),z.lazy(() => RecipeStatsUncheckedUpdateWithoutRecipeInputSchema) ]),
  create: z.union([ z.lazy(() => RecipeStatsCreateWithoutRecipeInputSchema),z.lazy(() => RecipeStatsUncheckedCreateWithoutRecipeInputSchema) ]),
  where: z.lazy(() => RecipeStatsWhereInputSchema).optional()
}).strict();

export const RecipeStatsUpdateToOneWithWhereWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeStatsUpdateToOneWithWhereWithoutRecipeInput> = z.object({
  where: z.lazy(() => RecipeStatsWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RecipeStatsUpdateWithoutRecipeInputSchema),z.lazy(() => RecipeStatsUncheckedUpdateWithoutRecipeInputSchema) ]),
}).strict();

export const RecipeStatsUpdateWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeStatsUpdateWithoutRecipeInput> = z.object({
  totalCost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  profitMargin: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  averageRating: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  preparationCount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  lastPrepared: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const RecipeStatsUncheckedUpdateWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeStatsUncheckedUpdateWithoutRecipeInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  totalCost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  profitMargin: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  averageRating: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  preparationCount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  lastPrepared: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const RecipeIngredientCreateWithoutIngredientInputSchema: z.ZodType<Prisma.RecipeIngredientCreateWithoutIngredientInput> = z.object({
  quantity: z.number(),
  unit: z.string(),
  processingInstructions: z.string().optional().nullable(),
  substituteIngredients: z.union([ z.lazy(() => RecipeIngredientCreatesubstituteIngredientsInputSchema),z.number().int().array() ]).optional(),
  isOptional: z.boolean().optional(),
  notes: z.string().optional().nullable(),
  cost: z.number().optional().nullable(),
  density: z.number().optional().nullable(),
  yield: z.number().optional().nullable(),
  joinAt: z.coerce.date().optional(),
  recipe: z.lazy(() => RecipeCreateNestedOneWithoutIngredientsInputSchema),
  recipeVersion: z.lazy(() => RecipeVersionCreateNestedOneWithoutIngredientsInputSchema).optional()
}).strict();

export const RecipeIngredientUncheckedCreateWithoutIngredientInputSchema: z.ZodType<Prisma.RecipeIngredientUncheckedCreateWithoutIngredientInput> = z.object({
  id: z.number().int().optional(),
  recipeId: z.number().int(),
  quantity: z.number(),
  unit: z.string(),
  processingInstructions: z.string().optional().nullable(),
  substituteIngredients: z.union([ z.lazy(() => RecipeIngredientCreatesubstituteIngredientsInputSchema),z.number().int().array() ]).optional(),
  isOptional: z.boolean().optional(),
  notes: z.string().optional().nullable(),
  cost: z.number().optional().nullable(),
  density: z.number().optional().nullable(),
  yield: z.number().optional().nullable(),
  joinAt: z.coerce.date().optional(),
  recipeVersionId: z.number().int().optional().nullable()
}).strict();

export const RecipeIngredientCreateOrConnectWithoutIngredientInputSchema: z.ZodType<Prisma.RecipeIngredientCreateOrConnectWithoutIngredientInput> = z.object({
  where: z.lazy(() => RecipeIngredientWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RecipeIngredientCreateWithoutIngredientInputSchema),z.lazy(() => RecipeIngredientUncheckedCreateWithoutIngredientInputSchema) ]),
}).strict();

export const RecipeIngredientCreateManyIngredientInputEnvelopeSchema: z.ZodType<Prisma.RecipeIngredientCreateManyIngredientInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => RecipeIngredientCreateManyIngredientInputSchema),z.lazy(() => RecipeIngredientCreateManyIngredientInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const InventoryItemCreateWithoutIngredientInputSchema: z.ZodType<Prisma.InventoryItemCreateWithoutIngredientInput> = z.object({
  quantity: z.number(),
  unit: z.string(),
  minQuantity: z.number(),
  restockThreshold: z.number(),
  lastCountDate: z.coerce.date().optional().nullable(),
  lastOrderDate: z.coerce.date().optional().nullable(),
  lastUpdated: z.coerce.date().optional(),
  par: z.number(),
  reorderPoint: z.number(),
  maxQuantity: z.number().optional().nullable(),
  location: z.string().optional().nullable(),
  barcode: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  currentPrice: z.number(),
  averageCost: z.number(),
  lastPurchasePrice: z.number().optional().nullable(),
  inventory: z.lazy(() => InventoryCreateNestedOneWithoutItemsInputSchema),
  lastUpdatedBy: z.lazy(() => UserCreateNestedOneWithoutInventoryUpdatesInputSchema).optional(),
  transactions: z.lazy(() => InventoryTransactionCreateNestedManyWithoutItemInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutInventoryItemInputSchema).optional(),
  stockCounts: z.lazy(() => StockCountItemCreateNestedManyWithoutItemInputSchema).optional()
}).strict();

export const InventoryItemUncheckedCreateWithoutIngredientInputSchema: z.ZodType<Prisma.InventoryItemUncheckedCreateWithoutIngredientInput> = z.object({
  id: z.number().int().optional(),
  inventoryId: z.number().int(),
  quantity: z.number(),
  unit: z.string(),
  minQuantity: z.number(),
  restockThreshold: z.number(),
  lastCountDate: z.coerce.date().optional().nullable(),
  lastOrderDate: z.coerce.date().optional().nullable(),
  lastUpdatedById: z.number().int().optional().nullable(),
  lastUpdated: z.coerce.date().optional(),
  par: z.number(),
  reorderPoint: z.number(),
  maxQuantity: z.number().optional().nullable(),
  location: z.string().optional().nullable(),
  barcode: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  currentPrice: z.number(),
  averageCost: z.number(),
  lastPurchasePrice: z.number().optional().nullable(),
  transactions: z.lazy(() => InventoryTransactionUncheckedCreateNestedManyWithoutItemInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutInventoryItemInputSchema).optional(),
  stockCounts: z.lazy(() => StockCountItemUncheckedCreateNestedManyWithoutItemInputSchema).optional()
}).strict();

export const InventoryItemCreateOrConnectWithoutIngredientInputSchema: z.ZodType<Prisma.InventoryItemCreateOrConnectWithoutIngredientInput> = z.object({
  where: z.lazy(() => InventoryItemWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => InventoryItemCreateWithoutIngredientInputSchema),z.lazy(() => InventoryItemUncheckedCreateWithoutIngredientInputSchema) ]),
}).strict();

export const InventoryItemCreateManyIngredientInputEnvelopeSchema: z.ZodType<Prisma.InventoryItemCreateManyIngredientInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => InventoryItemCreateManyIngredientInputSchema),z.lazy(() => InventoryItemCreateManyIngredientInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const OrderItemCreateWithoutIngredientInputSchema: z.ZodType<Prisma.OrderItemCreateWithoutIngredientInput> = z.object({
  quantity: z.number(),
  unit: z.string(),
  price: z.number(),
  order: z.lazy(() => OrderCreateNestedOneWithoutItemsInputSchema)
}).strict();

export const OrderItemUncheckedCreateWithoutIngredientInputSchema: z.ZodType<Prisma.OrderItemUncheckedCreateWithoutIngredientInput> = z.object({
  id: z.number().int().optional(),
  orderId: z.number().int(),
  quantity: z.number(),
  unit: z.string(),
  price: z.number()
}).strict();

export const OrderItemCreateOrConnectWithoutIngredientInputSchema: z.ZodType<Prisma.OrderItemCreateOrConnectWithoutIngredientInput> = z.object({
  where: z.lazy(() => OrderItemWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrderItemCreateWithoutIngredientInputSchema),z.lazy(() => OrderItemUncheckedCreateWithoutIngredientInputSchema) ]),
}).strict();

export const OrderItemCreateManyIngredientInputEnvelopeSchema: z.ZodType<Prisma.OrderItemCreateManyIngredientInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => OrderItemCreateManyIngredientInputSchema),z.lazy(() => OrderItemCreateManyIngredientInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const VendorCreateWithoutIngredientsInputSchema: z.ZodType<Prisma.VendorCreateWithoutIngredientsInput> = z.object({
  name: z.string(),
  contact: z.string(),
  email: z.string(),
  phone: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  orders: z.lazy(() => OrderCreateNestedManyWithoutVendorInputSchema).optional(),
  supplierPriceHistory: z.lazy(() => SupplierPriceHistoryCreateNestedManyWithoutVendorInputSchema).optional()
}).strict();

export const VendorUncheckedCreateWithoutIngredientsInputSchema: z.ZodType<Prisma.VendorUncheckedCreateWithoutIngredientsInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  contact: z.string(),
  email: z.string(),
  phone: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  orders: z.lazy(() => OrderUncheckedCreateNestedManyWithoutVendorInputSchema).optional(),
  supplierPriceHistory: z.lazy(() => SupplierPriceHistoryUncheckedCreateNestedManyWithoutVendorInputSchema).optional()
}).strict();

export const VendorCreateOrConnectWithoutIngredientsInputSchema: z.ZodType<Prisma.VendorCreateOrConnectWithoutIngredientsInput> = z.object({
  where: z.lazy(() => VendorWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => VendorCreateWithoutIngredientsInputSchema),z.lazy(() => VendorUncheckedCreateWithoutIngredientsInputSchema) ]),
}).strict();

export const WasteRecordCreateWithoutIngredienteInputSchema: z.ZodType<Prisma.WasteRecordCreateWithoutIngredienteInput> = z.object({
  date: z.coerce.date(),
  quantity: z.number(),
  unit: z.string(),
  reason: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutWasteRecordsInputSchema),
  recordedBy: z.lazy(() => UserCreateNestedOneWithoutWasteRecordsInputSchema)
}).strict();

export const WasteRecordUncheckedCreateWithoutIngredienteInputSchema: z.ZodType<Prisma.WasteRecordUncheckedCreateWithoutIngredienteInput> = z.object({
  id: z.number().int().optional(),
  restaurantId: z.number().int(),
  date: z.coerce.date(),
  quantity: z.number(),
  unit: z.string(),
  reason: z.string(),
  recordedById: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const WasteRecordCreateOrConnectWithoutIngredienteInputSchema: z.ZodType<Prisma.WasteRecordCreateOrConnectWithoutIngredienteInput> = z.object({
  where: z.lazy(() => WasteRecordWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => WasteRecordCreateWithoutIngredienteInputSchema),z.lazy(() => WasteRecordUncheckedCreateWithoutIngredienteInputSchema) ]),
}).strict();

export const WasteRecordCreateManyIngredienteInputEnvelopeSchema: z.ZodType<Prisma.WasteRecordCreateManyIngredienteInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => WasteRecordCreateManyIngredienteInputSchema),z.lazy(() => WasteRecordCreateManyIngredienteInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const IngredientAllergenCreateWithoutIngredientInputSchema: z.ZodType<Prisma.IngredientAllergenCreateWithoutIngredientInput> = z.object({
  allergen: z.lazy(() => AllergenCreateNestedOneWithoutIngredientsInputSchema)
}).strict();

export const IngredientAllergenUncheckedCreateWithoutIngredientInputSchema: z.ZodType<Prisma.IngredientAllergenUncheckedCreateWithoutIngredientInput> = z.object({
  id: z.number().int().optional(),
  allergenId: z.number().int()
}).strict();

export const IngredientAllergenCreateOrConnectWithoutIngredientInputSchema: z.ZodType<Prisma.IngredientAllergenCreateOrConnectWithoutIngredientInput> = z.object({
  where: z.lazy(() => IngredientAllergenWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => IngredientAllergenCreateWithoutIngredientInputSchema),z.lazy(() => IngredientAllergenUncheckedCreateWithoutIngredientInputSchema) ]),
}).strict();

export const IngredientAllergenCreateManyIngredientInputEnvelopeSchema: z.ZodType<Prisma.IngredientAllergenCreateManyIngredientInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => IngredientAllergenCreateManyIngredientInputSchema),z.lazy(() => IngredientAllergenCreateManyIngredientInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const SupplierPriceHistoryCreateWithoutIngredientInputSchema: z.ZodType<Prisma.SupplierPriceHistoryCreateWithoutIngredientInput> = z.object({
  price: z.number(),
  unit: z.string(),
  startDate: z.coerce.date(),
  endDate: z.coerce.date().optional().nullable(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  vendor: z.lazy(() => VendorCreateNestedOneWithoutSupplierPriceHistoryInputSchema)
}).strict();

export const SupplierPriceHistoryUncheckedCreateWithoutIngredientInputSchema: z.ZodType<Prisma.SupplierPriceHistoryUncheckedCreateWithoutIngredientInput> = z.object({
  id: z.number().int().optional(),
  vendorId: z.number().int(),
  price: z.number(),
  unit: z.string(),
  startDate: z.coerce.date(),
  endDate: z.coerce.date().optional().nullable(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const SupplierPriceHistoryCreateOrConnectWithoutIngredientInputSchema: z.ZodType<Prisma.SupplierPriceHistoryCreateOrConnectWithoutIngredientInput> = z.object({
  where: z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SupplierPriceHistoryCreateWithoutIngredientInputSchema),z.lazy(() => SupplierPriceHistoryUncheckedCreateWithoutIngredientInputSchema) ]),
}).strict();

export const SupplierPriceHistoryCreateManyIngredientInputEnvelopeSchema: z.ZodType<Prisma.SupplierPriceHistoryCreateManyIngredientInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => SupplierPriceHistoryCreateManyIngredientInputSchema),z.lazy(() => SupplierPriceHistoryCreateManyIngredientInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const DietaryRestrictionCreateWithoutIngredientsInputSchema: z.ZodType<Prisma.DietaryRestrictionCreateWithoutIngredientsInput> = z.object({
  name: z.string(),
  description: z.string().optional().nullable(),
  icon: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  menuItems: z.lazy(() => MenuItemCreateNestedManyWithoutDietaryRestrictionsInputSchema).optional(),
  recipes: z.lazy(() => RecipeCreateNestedManyWithoutDietaryRestrictionsInputSchema).optional()
}).strict();

export const DietaryRestrictionUncheckedCreateWithoutIngredientsInputSchema: z.ZodType<Prisma.DietaryRestrictionUncheckedCreateWithoutIngredientsInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  icon: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  menuItems: z.lazy(() => MenuItemUncheckedCreateNestedManyWithoutDietaryRestrictionsInputSchema).optional(),
  recipes: z.lazy(() => RecipeUncheckedCreateNestedManyWithoutDietaryRestrictionsInputSchema).optional()
}).strict();

export const DietaryRestrictionCreateOrConnectWithoutIngredientsInputSchema: z.ZodType<Prisma.DietaryRestrictionCreateOrConnectWithoutIngredientsInput> = z.object({
  where: z.lazy(() => DietaryRestrictionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => DietaryRestrictionCreateWithoutIngredientsInputSchema),z.lazy(() => DietaryRestrictionUncheckedCreateWithoutIngredientsInputSchema) ]),
}).strict();

export const RecipeIngredientUpsertWithWhereUniqueWithoutIngredientInputSchema: z.ZodType<Prisma.RecipeIngredientUpsertWithWhereUniqueWithoutIngredientInput> = z.object({
  where: z.lazy(() => RecipeIngredientWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => RecipeIngredientUpdateWithoutIngredientInputSchema),z.lazy(() => RecipeIngredientUncheckedUpdateWithoutIngredientInputSchema) ]),
  create: z.union([ z.lazy(() => RecipeIngredientCreateWithoutIngredientInputSchema),z.lazy(() => RecipeIngredientUncheckedCreateWithoutIngredientInputSchema) ]),
}).strict();

export const RecipeIngredientUpdateWithWhereUniqueWithoutIngredientInputSchema: z.ZodType<Prisma.RecipeIngredientUpdateWithWhereUniqueWithoutIngredientInput> = z.object({
  where: z.lazy(() => RecipeIngredientWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => RecipeIngredientUpdateWithoutIngredientInputSchema),z.lazy(() => RecipeIngredientUncheckedUpdateWithoutIngredientInputSchema) ]),
}).strict();

export const RecipeIngredientUpdateManyWithWhereWithoutIngredientInputSchema: z.ZodType<Prisma.RecipeIngredientUpdateManyWithWhereWithoutIngredientInput> = z.object({
  where: z.lazy(() => RecipeIngredientScalarWhereInputSchema),
  data: z.union([ z.lazy(() => RecipeIngredientUpdateManyMutationInputSchema),z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutIngredientInputSchema) ]),
}).strict();

export const InventoryItemUpsertWithWhereUniqueWithoutIngredientInputSchema: z.ZodType<Prisma.InventoryItemUpsertWithWhereUniqueWithoutIngredientInput> = z.object({
  where: z.lazy(() => InventoryItemWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => InventoryItemUpdateWithoutIngredientInputSchema),z.lazy(() => InventoryItemUncheckedUpdateWithoutIngredientInputSchema) ]),
  create: z.union([ z.lazy(() => InventoryItemCreateWithoutIngredientInputSchema),z.lazy(() => InventoryItemUncheckedCreateWithoutIngredientInputSchema) ]),
}).strict();

export const InventoryItemUpdateWithWhereUniqueWithoutIngredientInputSchema: z.ZodType<Prisma.InventoryItemUpdateWithWhereUniqueWithoutIngredientInput> = z.object({
  where: z.lazy(() => InventoryItemWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => InventoryItemUpdateWithoutIngredientInputSchema),z.lazy(() => InventoryItemUncheckedUpdateWithoutIngredientInputSchema) ]),
}).strict();

export const InventoryItemUpdateManyWithWhereWithoutIngredientInputSchema: z.ZodType<Prisma.InventoryItemUpdateManyWithWhereWithoutIngredientInput> = z.object({
  where: z.lazy(() => InventoryItemScalarWhereInputSchema),
  data: z.union([ z.lazy(() => InventoryItemUpdateManyMutationInputSchema),z.lazy(() => InventoryItemUncheckedUpdateManyWithoutIngredientInputSchema) ]),
}).strict();

export const OrderItemUpsertWithWhereUniqueWithoutIngredientInputSchema: z.ZodType<Prisma.OrderItemUpsertWithWhereUniqueWithoutIngredientInput> = z.object({
  where: z.lazy(() => OrderItemWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => OrderItemUpdateWithoutIngredientInputSchema),z.lazy(() => OrderItemUncheckedUpdateWithoutIngredientInputSchema) ]),
  create: z.union([ z.lazy(() => OrderItemCreateWithoutIngredientInputSchema),z.lazy(() => OrderItemUncheckedCreateWithoutIngredientInputSchema) ]),
}).strict();

export const OrderItemUpdateWithWhereUniqueWithoutIngredientInputSchema: z.ZodType<Prisma.OrderItemUpdateWithWhereUniqueWithoutIngredientInput> = z.object({
  where: z.lazy(() => OrderItemWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => OrderItemUpdateWithoutIngredientInputSchema),z.lazy(() => OrderItemUncheckedUpdateWithoutIngredientInputSchema) ]),
}).strict();

export const OrderItemUpdateManyWithWhereWithoutIngredientInputSchema: z.ZodType<Prisma.OrderItemUpdateManyWithWhereWithoutIngredientInput> = z.object({
  where: z.lazy(() => OrderItemScalarWhereInputSchema),
  data: z.union([ z.lazy(() => OrderItemUpdateManyMutationInputSchema),z.lazy(() => OrderItemUncheckedUpdateManyWithoutIngredientInputSchema) ]),
}).strict();

export const OrderItemScalarWhereInputSchema: z.ZodType<Prisma.OrderItemScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => OrderItemScalarWhereInputSchema),z.lazy(() => OrderItemScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrderItemScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrderItemScalarWhereInputSchema),z.lazy(() => OrderItemScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  orderId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  ingredientId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  quantity: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  unit: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  price: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
}).strict();

export const VendorUpsertWithWhereUniqueWithoutIngredientsInputSchema: z.ZodType<Prisma.VendorUpsertWithWhereUniqueWithoutIngredientsInput> = z.object({
  where: z.lazy(() => VendorWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => VendorUpdateWithoutIngredientsInputSchema),z.lazy(() => VendorUncheckedUpdateWithoutIngredientsInputSchema) ]),
  create: z.union([ z.lazy(() => VendorCreateWithoutIngredientsInputSchema),z.lazy(() => VendorUncheckedCreateWithoutIngredientsInputSchema) ]),
}).strict();

export const VendorUpdateWithWhereUniqueWithoutIngredientsInputSchema: z.ZodType<Prisma.VendorUpdateWithWhereUniqueWithoutIngredientsInput> = z.object({
  where: z.lazy(() => VendorWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => VendorUpdateWithoutIngredientsInputSchema),z.lazy(() => VendorUncheckedUpdateWithoutIngredientsInputSchema) ]),
}).strict();

export const VendorUpdateManyWithWhereWithoutIngredientsInputSchema: z.ZodType<Prisma.VendorUpdateManyWithWhereWithoutIngredientsInput> = z.object({
  where: z.lazy(() => VendorScalarWhereInputSchema),
  data: z.union([ z.lazy(() => VendorUpdateManyMutationInputSchema),z.lazy(() => VendorUncheckedUpdateManyWithoutIngredientsInputSchema) ]),
}).strict();

export const VendorScalarWhereInputSchema: z.ZodType<Prisma.VendorScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => VendorScalarWhereInputSchema),z.lazy(() => VendorScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => VendorScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => VendorScalarWhereInputSchema),z.lazy(() => VendorScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  contact: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  phone: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const WasteRecordUpsertWithWhereUniqueWithoutIngredienteInputSchema: z.ZodType<Prisma.WasteRecordUpsertWithWhereUniqueWithoutIngredienteInput> = z.object({
  where: z.lazy(() => WasteRecordWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => WasteRecordUpdateWithoutIngredienteInputSchema),z.lazy(() => WasteRecordUncheckedUpdateWithoutIngredienteInputSchema) ]),
  create: z.union([ z.lazy(() => WasteRecordCreateWithoutIngredienteInputSchema),z.lazy(() => WasteRecordUncheckedCreateWithoutIngredienteInputSchema) ]),
}).strict();

export const WasteRecordUpdateWithWhereUniqueWithoutIngredienteInputSchema: z.ZodType<Prisma.WasteRecordUpdateWithWhereUniqueWithoutIngredienteInput> = z.object({
  where: z.lazy(() => WasteRecordWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => WasteRecordUpdateWithoutIngredienteInputSchema),z.lazy(() => WasteRecordUncheckedUpdateWithoutIngredienteInputSchema) ]),
}).strict();

export const WasteRecordUpdateManyWithWhereWithoutIngredienteInputSchema: z.ZodType<Prisma.WasteRecordUpdateManyWithWhereWithoutIngredienteInput> = z.object({
  where: z.lazy(() => WasteRecordScalarWhereInputSchema),
  data: z.union([ z.lazy(() => WasteRecordUpdateManyMutationInputSchema),z.lazy(() => WasteRecordUncheckedUpdateManyWithoutIngredienteInputSchema) ]),
}).strict();

export const IngredientAllergenUpsertWithWhereUniqueWithoutIngredientInputSchema: z.ZodType<Prisma.IngredientAllergenUpsertWithWhereUniqueWithoutIngredientInput> = z.object({
  where: z.lazy(() => IngredientAllergenWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => IngredientAllergenUpdateWithoutIngredientInputSchema),z.lazy(() => IngredientAllergenUncheckedUpdateWithoutIngredientInputSchema) ]),
  create: z.union([ z.lazy(() => IngredientAllergenCreateWithoutIngredientInputSchema),z.lazy(() => IngredientAllergenUncheckedCreateWithoutIngredientInputSchema) ]),
}).strict();

export const IngredientAllergenUpdateWithWhereUniqueWithoutIngredientInputSchema: z.ZodType<Prisma.IngredientAllergenUpdateWithWhereUniqueWithoutIngredientInput> = z.object({
  where: z.lazy(() => IngredientAllergenWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => IngredientAllergenUpdateWithoutIngredientInputSchema),z.lazy(() => IngredientAllergenUncheckedUpdateWithoutIngredientInputSchema) ]),
}).strict();

export const IngredientAllergenUpdateManyWithWhereWithoutIngredientInputSchema: z.ZodType<Prisma.IngredientAllergenUpdateManyWithWhereWithoutIngredientInput> = z.object({
  where: z.lazy(() => IngredientAllergenScalarWhereInputSchema),
  data: z.union([ z.lazy(() => IngredientAllergenUpdateManyMutationInputSchema),z.lazy(() => IngredientAllergenUncheckedUpdateManyWithoutIngredientInputSchema) ]),
}).strict();

export const SupplierPriceHistoryUpsertWithWhereUniqueWithoutIngredientInputSchema: z.ZodType<Prisma.SupplierPriceHistoryUpsertWithWhereUniqueWithoutIngredientInput> = z.object({
  where: z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => SupplierPriceHistoryUpdateWithoutIngredientInputSchema),z.lazy(() => SupplierPriceHistoryUncheckedUpdateWithoutIngredientInputSchema) ]),
  create: z.union([ z.lazy(() => SupplierPriceHistoryCreateWithoutIngredientInputSchema),z.lazy(() => SupplierPriceHistoryUncheckedCreateWithoutIngredientInputSchema) ]),
}).strict();

export const SupplierPriceHistoryUpdateWithWhereUniqueWithoutIngredientInputSchema: z.ZodType<Prisma.SupplierPriceHistoryUpdateWithWhereUniqueWithoutIngredientInput> = z.object({
  where: z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => SupplierPriceHistoryUpdateWithoutIngredientInputSchema),z.lazy(() => SupplierPriceHistoryUncheckedUpdateWithoutIngredientInputSchema) ]),
}).strict();

export const SupplierPriceHistoryUpdateManyWithWhereWithoutIngredientInputSchema: z.ZodType<Prisma.SupplierPriceHistoryUpdateManyWithWhereWithoutIngredientInput> = z.object({
  where: z.lazy(() => SupplierPriceHistoryScalarWhereInputSchema),
  data: z.union([ z.lazy(() => SupplierPriceHistoryUpdateManyMutationInputSchema),z.lazy(() => SupplierPriceHistoryUncheckedUpdateManyWithoutIngredientInputSchema) ]),
}).strict();

export const SupplierPriceHistoryScalarWhereInputSchema: z.ZodType<Prisma.SupplierPriceHistoryScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SupplierPriceHistoryScalarWhereInputSchema),z.lazy(() => SupplierPriceHistoryScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SupplierPriceHistoryScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SupplierPriceHistoryScalarWhereInputSchema),z.lazy(() => SupplierPriceHistoryScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  vendorId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  ingredientId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  price: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  unit: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  startDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  endDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const DietaryRestrictionUpsertWithWhereUniqueWithoutIngredientsInputSchema: z.ZodType<Prisma.DietaryRestrictionUpsertWithWhereUniqueWithoutIngredientsInput> = z.object({
  where: z.lazy(() => DietaryRestrictionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => DietaryRestrictionUpdateWithoutIngredientsInputSchema),z.lazy(() => DietaryRestrictionUncheckedUpdateWithoutIngredientsInputSchema) ]),
  create: z.union([ z.lazy(() => DietaryRestrictionCreateWithoutIngredientsInputSchema),z.lazy(() => DietaryRestrictionUncheckedCreateWithoutIngredientsInputSchema) ]),
}).strict();

export const DietaryRestrictionUpdateWithWhereUniqueWithoutIngredientsInputSchema: z.ZodType<Prisma.DietaryRestrictionUpdateWithWhereUniqueWithoutIngredientsInput> = z.object({
  where: z.lazy(() => DietaryRestrictionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => DietaryRestrictionUpdateWithoutIngredientsInputSchema),z.lazy(() => DietaryRestrictionUncheckedUpdateWithoutIngredientsInputSchema) ]),
}).strict();

export const DietaryRestrictionUpdateManyWithWhereWithoutIngredientsInputSchema: z.ZodType<Prisma.DietaryRestrictionUpdateManyWithWhereWithoutIngredientsInput> = z.object({
  where: z.lazy(() => DietaryRestrictionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => DietaryRestrictionUpdateManyMutationInputSchema),z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutIngredientsInputSchema) ]),
}).strict();

export const RecipeCreateWithoutIngredientsInputSchema: z.ZodType<Prisma.RecipeCreateWithoutIngredientsInput> = z.object({
  name: z.string(),
  imageUrls: z.union([ z.lazy(() => RecipeCreateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.string().optional().nullable(),
  servings: z.number().int(),
  cookTime: z.number().int(),
  prepTime: z.number().int(),
  frequency: z.number().int().optional().nullable(),
  foodCost: z.number().optional().nullable(),
  isDeleted: z.boolean().optional(),
  isPublished: z.boolean().optional(),
  publishedAt: z.coerce.date().optional().nullable(),
  language: z.string().optional(),
  skillLevel: z.lazy(() => SkillLevelSchema).optional(),
  category: z.lazy(() => CategorySchema).optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutRecipesInputSchema),
  cookBook: z.lazy(() => CookBookCreateNestedOneWithoutRecipesInputSchema),
  instructions: z.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeCreateNestedManyWithoutRecipeInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z.lazy(() => RecipeTagCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionCreateNestedManyWithoutRecipesInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureCreateNestedManyWithoutRecipeInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldCreateNestedManyWithoutRecipeInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostCreateNestedManyWithoutRecipeInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionCreateNestedOneWithoutRecipeInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointCreateNestedManyWithoutRecipeInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageCreateNestedOneWithoutRecipeInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoCreateNestedManyWithoutRecipeInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsCreateNestedOneWithoutRecipeInputSchema).optional()
}).strict();

export const RecipeUncheckedCreateWithoutIngredientsInputSchema: z.ZodType<Prisma.RecipeUncheckedCreateWithoutIngredientsInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  imageUrls: z.union([ z.lazy(() => RecipeCreateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.string().optional().nullable(),
  servings: z.number().int(),
  cookTime: z.number().int(),
  prepTime: z.number().int(),
  frequency: z.number().int().optional().nullable(),
  restaurantId: z.number().int(),
  cookBookId: z.number().int(),
  foodCost: z.number().optional().nullable(),
  isDeleted: z.boolean().optional(),
  isPublished: z.boolean().optional(),
  publishedAt: z.coerce.date().optional().nullable(),
  language: z.string().optional(),
  skillLevel: z.lazy(() => SkillLevelSchema).optional(),
  category: z.lazy(() => CategorySchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUncheckedCreateNestedOneWithoutRecipeInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUncheckedCreateNestedOneWithoutRecipeInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUncheckedCreateNestedOneWithoutRecipeInputSchema).optional()
}).strict();

export const RecipeCreateOrConnectWithoutIngredientsInputSchema: z.ZodType<Prisma.RecipeCreateOrConnectWithoutIngredientsInput> = z.object({
  where: z.lazy(() => RecipeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RecipeCreateWithoutIngredientsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutIngredientsInputSchema) ]),
}).strict();

export const IngredientCreateWithoutRecipeIngredientsInputSchema: z.ZodType<Prisma.IngredientCreateWithoutRecipeIngredientsInput> = z.object({
  name: z.string(),
  category: z.string(),
  price: z.number(),
  density: z.number().optional().nullable(),
  dietaryRestrictionId: z.number().int().optional().nullable(),
  calories: z.number().optional().nullable(),
  protein: z.number().optional().nullable(),
  carbohydrates: z.number().optional().nullable(),
  fat: z.number().optional().nullable(),
  fiber: z.number().optional().nullable(),
  sugar: z.number().optional().nullable(),
  sodium: z.number().optional().nullable(),
  usdaFoodId: z.string().optional().nullable(),
  nutritionSource: z.lazy(() => NutritionSourceSchema).optional().nullable(),
  nutritionUpdatedAt: z.coerce.date().optional().nullable(),
  inventoryItems: z.lazy(() => InventoryItemCreateNestedManyWithoutIngredientInputSchema).optional(),
  orderItems: z.lazy(() => OrderItemCreateNestedManyWithoutIngredientInputSchema).optional(),
  vendors: z.lazy(() => VendorCreateNestedManyWithoutIngredientsInputSchema).optional(),
  WasteRecords: z.lazy(() => WasteRecordCreateNestedManyWithoutIngredienteInputSchema).optional(),
  IngredientAllergens: z.lazy(() => IngredientAllergenCreateNestedManyWithoutIngredientInputSchema).optional(),
  priceHistory: z.lazy(() => SupplierPriceHistoryCreateNestedManyWithoutIngredientInputSchema).optional(),
  DietaryRestrictions: z.lazy(() => DietaryRestrictionCreateNestedManyWithoutIngredientsInputSchema).optional()
}).strict();

export const IngredientUncheckedCreateWithoutRecipeIngredientsInputSchema: z.ZodType<Prisma.IngredientUncheckedCreateWithoutRecipeIngredientsInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  category: z.string(),
  price: z.number(),
  density: z.number().optional().nullable(),
  dietaryRestrictionId: z.number().int().optional().nullable(),
  calories: z.number().optional().nullable(),
  protein: z.number().optional().nullable(),
  carbohydrates: z.number().optional().nullable(),
  fat: z.number().optional().nullable(),
  fiber: z.number().optional().nullable(),
  sugar: z.number().optional().nullable(),
  sodium: z.number().optional().nullable(),
  usdaFoodId: z.string().optional().nullable(),
  nutritionSource: z.lazy(() => NutritionSourceSchema).optional().nullable(),
  nutritionUpdatedAt: z.coerce.date().optional().nullable(),
  inventoryItems: z.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  orderItems: z.lazy(() => OrderItemUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  vendors: z.lazy(() => VendorUncheckedCreateNestedManyWithoutIngredientsInputSchema).optional(),
  WasteRecords: z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutIngredienteInputSchema).optional(),
  IngredientAllergens: z.lazy(() => IngredientAllergenUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  priceHistory: z.lazy(() => SupplierPriceHistoryUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  DietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutIngredientsInputSchema).optional()
}).strict();

export const IngredientCreateOrConnectWithoutRecipeIngredientsInputSchema: z.ZodType<Prisma.IngredientCreateOrConnectWithoutRecipeIngredientsInput> = z.object({
  where: z.lazy(() => IngredientWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => IngredientCreateWithoutRecipeIngredientsInputSchema),z.lazy(() => IngredientUncheckedCreateWithoutRecipeIngredientsInputSchema) ]),
}).strict();

export const RecipeVersionCreateWithoutIngredientsInputSchema: z.ZodType<Prisma.RecipeVersionCreateWithoutIngredientsInput> = z.object({
  versionNumber: z.number().int(),
  description: z.string().optional().nullable(),
  changes: z.string().optional().nullable(),
  isActive: z.boolean().optional(),
  approvedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  recipe: z.lazy(() => RecipeCreateNestedOneWithoutVersionsInputSchema),
  instructions: z.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeVersionInputSchema).optional(),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutRecipeVersionsCreatedInputSchema),
  approvedBy: z.lazy(() => UserCreateNestedOneWithoutRecipeVersionsApprovedInputSchema).optional()
}).strict();

export const RecipeVersionUncheckedCreateWithoutIngredientsInputSchema: z.ZodType<Prisma.RecipeVersionUncheckedCreateWithoutIngredientsInput> = z.object({
  id: z.number().int().optional(),
  recipeId: z.number().int(),
  versionNumber: z.number().int(),
  description: z.string().optional().nullable(),
  changes: z.string().optional().nullable(),
  isActive: z.boolean().optional(),
  createdById: z.number().int(),
  approvedById: z.number().int().optional().nullable(),
  approvedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  instructions: z.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeVersionInputSchema).optional()
}).strict();

export const RecipeVersionCreateOrConnectWithoutIngredientsInputSchema: z.ZodType<Prisma.RecipeVersionCreateOrConnectWithoutIngredientsInput> = z.object({
  where: z.lazy(() => RecipeVersionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RecipeVersionCreateWithoutIngredientsInputSchema),z.lazy(() => RecipeVersionUncheckedCreateWithoutIngredientsInputSchema) ]),
}).strict();

export const RecipeUpsertWithoutIngredientsInputSchema: z.ZodType<Prisma.RecipeUpsertWithoutIngredientsInput> = z.object({
  update: z.union([ z.lazy(() => RecipeUpdateWithoutIngredientsInputSchema),z.lazy(() => RecipeUncheckedUpdateWithoutIngredientsInputSchema) ]),
  create: z.union([ z.lazy(() => RecipeCreateWithoutIngredientsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutIngredientsInputSchema) ]),
  where: z.lazy(() => RecipeWhereInputSchema).optional()
}).strict();

export const RecipeUpdateToOneWithWhereWithoutIngredientsInputSchema: z.ZodType<Prisma.RecipeUpdateToOneWithWhereWithoutIngredientsInput> = z.object({
  where: z.lazy(() => RecipeWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RecipeUpdateWithoutIngredientsInputSchema),z.lazy(() => RecipeUncheckedUpdateWithoutIngredientsInputSchema) ]),
}).strict();

export const RecipeUpdateWithoutIngredientsInputSchema: z.ZodType<Prisma.RecipeUpdateWithoutIngredientsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrls: z.union([ z.lazy(() => RecipeUpdateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  servings: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isPublished: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  publishedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  skillLevel: z.union([ z.lazy(() => SkillLevelSchema),z.lazy(() => EnumSkillLevelFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => CategorySchema),z.lazy(() => EnumCategoryFieldUpdateOperationsInputSchema) ]).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  cookBook: z.lazy(() => CookBookUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUpdateManyWithoutRecipeNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUpdateManyWithoutRecipesNestedInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUpdateManyWithoutRecipeNestedInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUpdateManyWithoutRecipeNestedInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUpdateManyWithoutRecipeNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUpdateOneWithoutRecipeNestedInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUpdateManyWithoutRecipeNestedInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUpdateOneWithoutRecipeNestedInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUpdateManyWithoutRecipeNestedInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUpdateOneWithoutRecipeNestedInputSchema).optional()
}).strict();

export const RecipeUncheckedUpdateWithoutIngredientsInputSchema: z.ZodType<Prisma.RecipeUncheckedUpdateWithoutIngredientsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrls: z.union([ z.lazy(() => RecipeUpdateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  servings: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookBookId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isPublished: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  publishedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  skillLevel: z.union([ z.lazy(() => SkillLevelSchema),z.lazy(() => EnumSkillLevelFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => CategorySchema),z.lazy(() => EnumCategoryFieldUpdateOperationsInputSchema) ]).optional(),
  instructions: z.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional()
}).strict();

export const IngredientUpsertWithoutRecipeIngredientsInputSchema: z.ZodType<Prisma.IngredientUpsertWithoutRecipeIngredientsInput> = z.object({
  update: z.union([ z.lazy(() => IngredientUpdateWithoutRecipeIngredientsInputSchema),z.lazy(() => IngredientUncheckedUpdateWithoutRecipeIngredientsInputSchema) ]),
  create: z.union([ z.lazy(() => IngredientCreateWithoutRecipeIngredientsInputSchema),z.lazy(() => IngredientUncheckedCreateWithoutRecipeIngredientsInputSchema) ]),
  where: z.lazy(() => IngredientWhereInputSchema).optional()
}).strict();

export const IngredientUpdateToOneWithWhereWithoutRecipeIngredientsInputSchema: z.ZodType<Prisma.IngredientUpdateToOneWithWhereWithoutRecipeIngredientsInput> = z.object({
  where: z.lazy(() => IngredientWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => IngredientUpdateWithoutRecipeIngredientsInputSchema),z.lazy(() => IngredientUncheckedUpdateWithoutRecipeIngredientsInputSchema) ]),
}).strict();

export const IngredientUpdateWithoutRecipeIngredientsInputSchema: z.ZodType<Prisma.IngredientUpdateWithoutRecipeIngredientsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  density: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dietaryRestrictionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  calories: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  protein: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  carbohydrates: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fat: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fiber: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sugar: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sodium: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  usdaFoodId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nutritionSource: z.union([ z.lazy(() => NutritionSourceSchema),z.lazy(() => NullableEnumNutritionSourceFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nutritionUpdatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inventoryItems: z.lazy(() => InventoryItemUpdateManyWithoutIngredientNestedInputSchema).optional(),
  orderItems: z.lazy(() => OrderItemUpdateManyWithoutIngredientNestedInputSchema).optional(),
  vendors: z.lazy(() => VendorUpdateManyWithoutIngredientsNestedInputSchema).optional(),
  WasteRecords: z.lazy(() => WasteRecordUpdateManyWithoutIngredienteNestedInputSchema).optional(),
  IngredientAllergens: z.lazy(() => IngredientAllergenUpdateManyWithoutIngredientNestedInputSchema).optional(),
  priceHistory: z.lazy(() => SupplierPriceHistoryUpdateManyWithoutIngredientNestedInputSchema).optional(),
  DietaryRestrictions: z.lazy(() => DietaryRestrictionUpdateManyWithoutIngredientsNestedInputSchema).optional()
}).strict();

export const IngredientUncheckedUpdateWithoutRecipeIngredientsInputSchema: z.ZodType<Prisma.IngredientUncheckedUpdateWithoutRecipeIngredientsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  density: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dietaryRestrictionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  calories: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  protein: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  carbohydrates: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fat: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fiber: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sugar: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sodium: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  usdaFoodId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nutritionSource: z.union([ z.lazy(() => NutritionSourceSchema),z.lazy(() => NullableEnumNutritionSourceFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nutritionUpdatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inventoryItems: z.lazy(() => InventoryItemUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  orderItems: z.lazy(() => OrderItemUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  vendors: z.lazy(() => VendorUncheckedUpdateManyWithoutIngredientsNestedInputSchema).optional(),
  WasteRecords: z.lazy(() => WasteRecordUncheckedUpdateManyWithoutIngredienteNestedInputSchema).optional(),
  IngredientAllergens: z.lazy(() => IngredientAllergenUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  priceHistory: z.lazy(() => SupplierPriceHistoryUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  DietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutIngredientsNestedInputSchema).optional()
}).strict();

export const RecipeVersionUpsertWithoutIngredientsInputSchema: z.ZodType<Prisma.RecipeVersionUpsertWithoutIngredientsInput> = z.object({
  update: z.union([ z.lazy(() => RecipeVersionUpdateWithoutIngredientsInputSchema),z.lazy(() => RecipeVersionUncheckedUpdateWithoutIngredientsInputSchema) ]),
  create: z.union([ z.lazy(() => RecipeVersionCreateWithoutIngredientsInputSchema),z.lazy(() => RecipeVersionUncheckedCreateWithoutIngredientsInputSchema) ]),
  where: z.lazy(() => RecipeVersionWhereInputSchema).optional()
}).strict();

export const RecipeVersionUpdateToOneWithWhereWithoutIngredientsInputSchema: z.ZodType<Prisma.RecipeVersionUpdateToOneWithWhereWithoutIngredientsInput> = z.object({
  where: z.lazy(() => RecipeVersionWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RecipeVersionUpdateWithoutIngredientsInputSchema),z.lazy(() => RecipeVersionUncheckedUpdateWithoutIngredientsInputSchema) ]),
}).strict();

export const RecipeVersionUpdateWithoutIngredientsInputSchema: z.ZodType<Prisma.RecipeVersionUpdateWithoutIngredientsInput> = z.object({
  versionNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  changes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  approvedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  recipe: z.lazy(() => RecipeUpdateOneRequiredWithoutVersionsNestedInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUpdateManyWithoutRecipeVersionNestedInputSchema).optional(),
  createdBy: z.lazy(() => UserUpdateOneRequiredWithoutRecipeVersionsCreatedNestedInputSchema).optional(),
  approvedBy: z.lazy(() => UserUpdateOneWithoutRecipeVersionsApprovedNestedInputSchema).optional()
}).strict();

export const RecipeVersionUncheckedUpdateWithoutIngredientsInputSchema: z.ZodType<Prisma.RecipeVersionUncheckedUpdateWithoutIngredientsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  versionNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  changes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  approvedById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approvedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  instructions: z.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeVersionNestedInputSchema).optional()
}).strict();

export const RecipeCreateWithoutInstructionsInputSchema: z.ZodType<Prisma.RecipeCreateWithoutInstructionsInput> = z.object({
  name: z.string(),
  imageUrls: z.union([ z.lazy(() => RecipeCreateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.string().optional().nullable(),
  servings: z.number().int(),
  cookTime: z.number().int(),
  prepTime: z.number().int(),
  frequency: z.number().int().optional().nullable(),
  foodCost: z.number().optional().nullable(),
  isDeleted: z.boolean().optional(),
  isPublished: z.boolean().optional(),
  publishedAt: z.coerce.date().optional().nullable(),
  language: z.string().optional(),
  skillLevel: z.lazy(() => SkillLevelSchema).optional(),
  category: z.lazy(() => CategorySchema).optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutRecipesInputSchema),
  cookBook: z.lazy(() => CookBookCreateNestedOneWithoutRecipesInputSchema),
  ingredients: z.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeCreateNestedManyWithoutRecipeInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z.lazy(() => RecipeTagCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionCreateNestedManyWithoutRecipesInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureCreateNestedManyWithoutRecipeInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldCreateNestedManyWithoutRecipeInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostCreateNestedManyWithoutRecipeInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionCreateNestedOneWithoutRecipeInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointCreateNestedManyWithoutRecipeInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageCreateNestedOneWithoutRecipeInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoCreateNestedManyWithoutRecipeInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsCreateNestedOneWithoutRecipeInputSchema).optional()
}).strict();

export const RecipeUncheckedCreateWithoutInstructionsInputSchema: z.ZodType<Prisma.RecipeUncheckedCreateWithoutInstructionsInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  imageUrls: z.union([ z.lazy(() => RecipeCreateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.string().optional().nullable(),
  servings: z.number().int(),
  cookTime: z.number().int(),
  prepTime: z.number().int(),
  frequency: z.number().int().optional().nullable(),
  restaurantId: z.number().int(),
  cookBookId: z.number().int(),
  foodCost: z.number().optional().nullable(),
  isDeleted: z.boolean().optional(),
  isPublished: z.boolean().optional(),
  publishedAt: z.coerce.date().optional().nullable(),
  language: z.string().optional(),
  skillLevel: z.lazy(() => SkillLevelSchema).optional(),
  category: z.lazy(() => CategorySchema).optional(),
  ingredients: z.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUncheckedCreateNestedOneWithoutRecipeInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUncheckedCreateNestedOneWithoutRecipeInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUncheckedCreateNestedOneWithoutRecipeInputSchema).optional()
}).strict();

export const RecipeCreateOrConnectWithoutInstructionsInputSchema: z.ZodType<Prisma.RecipeCreateOrConnectWithoutInstructionsInput> = z.object({
  where: z.lazy(() => RecipeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RecipeCreateWithoutInstructionsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutInstructionsInputSchema) ]),
}).strict();

export const RecipeVersionCreateWithoutInstructionsInputSchema: z.ZodType<Prisma.RecipeVersionCreateWithoutInstructionsInput> = z.object({
  versionNumber: z.number().int(),
  description: z.string().optional().nullable(),
  changes: z.string().optional().nullable(),
  isActive: z.boolean().optional(),
  approvedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  recipe: z.lazy(() => RecipeCreateNestedOneWithoutVersionsInputSchema),
  ingredients: z.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeVersionInputSchema).optional(),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutRecipeVersionsCreatedInputSchema),
  approvedBy: z.lazy(() => UserCreateNestedOneWithoutRecipeVersionsApprovedInputSchema).optional()
}).strict();

export const RecipeVersionUncheckedCreateWithoutInstructionsInputSchema: z.ZodType<Prisma.RecipeVersionUncheckedCreateWithoutInstructionsInput> = z.object({
  id: z.number().int().optional(),
  recipeId: z.number().int(),
  versionNumber: z.number().int(),
  description: z.string().optional().nullable(),
  changes: z.string().optional().nullable(),
  isActive: z.boolean().optional(),
  createdById: z.number().int(),
  approvedById: z.number().int().optional().nullable(),
  approvedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  ingredients: z.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeVersionInputSchema).optional()
}).strict();

export const RecipeVersionCreateOrConnectWithoutInstructionsInputSchema: z.ZodType<Prisma.RecipeVersionCreateOrConnectWithoutInstructionsInput> = z.object({
  where: z.lazy(() => RecipeVersionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RecipeVersionCreateWithoutInstructionsInputSchema),z.lazy(() => RecipeVersionUncheckedCreateWithoutInstructionsInputSchema) ]),
}).strict();

export const RecipeEquipmentCreateWithoutRecipeInstructionInputSchema: z.ZodType<Prisma.RecipeEquipmentCreateWithoutRecipeInstructionInput> = z.object({
  notes: z.string().optional().nullable(),
  recipe: z.lazy(() => RecipeCreateNestedOneWithoutEquipmentsInputSchema),
  equipment: z.lazy(() => EquipmentCreateNestedOneWithoutRecipesInputSchema)
}).strict();

export const RecipeEquipmentUncheckedCreateWithoutRecipeInstructionInputSchema: z.ZodType<Prisma.RecipeEquipmentUncheckedCreateWithoutRecipeInstructionInput> = z.object({
  id: z.number().int().optional(),
  recipeId: z.number().int(),
  equipmentId: z.number().int(),
  notes: z.string().optional().nullable()
}).strict();

export const RecipeEquipmentCreateOrConnectWithoutRecipeInstructionInputSchema: z.ZodType<Prisma.RecipeEquipmentCreateOrConnectWithoutRecipeInstructionInput> = z.object({
  where: z.lazy(() => RecipeEquipmentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RecipeEquipmentCreateWithoutRecipeInstructionInputSchema),z.lazy(() => RecipeEquipmentUncheckedCreateWithoutRecipeInstructionInputSchema) ]),
}).strict();

export const RecipeEquipmentCreateManyRecipeInstructionInputEnvelopeSchema: z.ZodType<Prisma.RecipeEquipmentCreateManyRecipeInstructionInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => RecipeEquipmentCreateManyRecipeInstructionInputSchema),z.lazy(() => RecipeEquipmentCreateManyRecipeInstructionInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const RecipeUpsertWithoutInstructionsInputSchema: z.ZodType<Prisma.RecipeUpsertWithoutInstructionsInput> = z.object({
  update: z.union([ z.lazy(() => RecipeUpdateWithoutInstructionsInputSchema),z.lazy(() => RecipeUncheckedUpdateWithoutInstructionsInputSchema) ]),
  create: z.union([ z.lazy(() => RecipeCreateWithoutInstructionsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutInstructionsInputSchema) ]),
  where: z.lazy(() => RecipeWhereInputSchema).optional()
}).strict();

export const RecipeUpdateToOneWithWhereWithoutInstructionsInputSchema: z.ZodType<Prisma.RecipeUpdateToOneWithWhereWithoutInstructionsInput> = z.object({
  where: z.lazy(() => RecipeWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RecipeUpdateWithoutInstructionsInputSchema),z.lazy(() => RecipeUncheckedUpdateWithoutInstructionsInputSchema) ]),
}).strict();

export const RecipeUpdateWithoutInstructionsInputSchema: z.ZodType<Prisma.RecipeUpdateWithoutInstructionsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrls: z.union([ z.lazy(() => RecipeUpdateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  servings: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isPublished: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  publishedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  skillLevel: z.union([ z.lazy(() => SkillLevelSchema),z.lazy(() => EnumSkillLevelFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => CategorySchema),z.lazy(() => EnumCategoryFieldUpdateOperationsInputSchema) ]).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  cookBook: z.lazy(() => CookBookUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  ingredients: z.lazy(() => RecipeIngredientUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUpdateManyWithoutRecipeNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUpdateManyWithoutRecipesNestedInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUpdateManyWithoutRecipeNestedInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUpdateManyWithoutRecipeNestedInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUpdateManyWithoutRecipeNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUpdateOneWithoutRecipeNestedInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUpdateManyWithoutRecipeNestedInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUpdateOneWithoutRecipeNestedInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUpdateManyWithoutRecipeNestedInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUpdateOneWithoutRecipeNestedInputSchema).optional()
}).strict();

export const RecipeUncheckedUpdateWithoutInstructionsInputSchema: z.ZodType<Prisma.RecipeUncheckedUpdateWithoutInstructionsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrls: z.union([ z.lazy(() => RecipeUpdateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  servings: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookBookId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isPublished: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  publishedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  skillLevel: z.union([ z.lazy(() => SkillLevelSchema),z.lazy(() => EnumSkillLevelFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => CategorySchema),z.lazy(() => EnumCategoryFieldUpdateOperationsInputSchema) ]).optional(),
  ingredients: z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional()
}).strict();

export const RecipeVersionUpsertWithoutInstructionsInputSchema: z.ZodType<Prisma.RecipeVersionUpsertWithoutInstructionsInput> = z.object({
  update: z.union([ z.lazy(() => RecipeVersionUpdateWithoutInstructionsInputSchema),z.lazy(() => RecipeVersionUncheckedUpdateWithoutInstructionsInputSchema) ]),
  create: z.union([ z.lazy(() => RecipeVersionCreateWithoutInstructionsInputSchema),z.lazy(() => RecipeVersionUncheckedCreateWithoutInstructionsInputSchema) ]),
  where: z.lazy(() => RecipeVersionWhereInputSchema).optional()
}).strict();

export const RecipeVersionUpdateToOneWithWhereWithoutInstructionsInputSchema: z.ZodType<Prisma.RecipeVersionUpdateToOneWithWhereWithoutInstructionsInput> = z.object({
  where: z.lazy(() => RecipeVersionWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RecipeVersionUpdateWithoutInstructionsInputSchema),z.lazy(() => RecipeVersionUncheckedUpdateWithoutInstructionsInputSchema) ]),
}).strict();

export const RecipeVersionUpdateWithoutInstructionsInputSchema: z.ZodType<Prisma.RecipeVersionUpdateWithoutInstructionsInput> = z.object({
  versionNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  changes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  approvedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  recipe: z.lazy(() => RecipeUpdateOneRequiredWithoutVersionsNestedInputSchema).optional(),
  ingredients: z.lazy(() => RecipeIngredientUpdateManyWithoutRecipeVersionNestedInputSchema).optional(),
  createdBy: z.lazy(() => UserUpdateOneRequiredWithoutRecipeVersionsCreatedNestedInputSchema).optional(),
  approvedBy: z.lazy(() => UserUpdateOneWithoutRecipeVersionsApprovedNestedInputSchema).optional()
}).strict();

export const RecipeVersionUncheckedUpdateWithoutInstructionsInputSchema: z.ZodType<Prisma.RecipeVersionUncheckedUpdateWithoutInstructionsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  versionNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  changes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  approvedById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approvedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ingredients: z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeVersionNestedInputSchema).optional()
}).strict();

export const RecipeEquipmentUpsertWithWhereUniqueWithoutRecipeInstructionInputSchema: z.ZodType<Prisma.RecipeEquipmentUpsertWithWhereUniqueWithoutRecipeInstructionInput> = z.object({
  where: z.lazy(() => RecipeEquipmentWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => RecipeEquipmentUpdateWithoutRecipeInstructionInputSchema),z.lazy(() => RecipeEquipmentUncheckedUpdateWithoutRecipeInstructionInputSchema) ]),
  create: z.union([ z.lazy(() => RecipeEquipmentCreateWithoutRecipeInstructionInputSchema),z.lazy(() => RecipeEquipmentUncheckedCreateWithoutRecipeInstructionInputSchema) ]),
}).strict();

export const RecipeEquipmentUpdateWithWhereUniqueWithoutRecipeInstructionInputSchema: z.ZodType<Prisma.RecipeEquipmentUpdateWithWhereUniqueWithoutRecipeInstructionInput> = z.object({
  where: z.lazy(() => RecipeEquipmentWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => RecipeEquipmentUpdateWithoutRecipeInstructionInputSchema),z.lazy(() => RecipeEquipmentUncheckedUpdateWithoutRecipeInstructionInputSchema) ]),
}).strict();

export const RecipeEquipmentUpdateManyWithWhereWithoutRecipeInstructionInputSchema: z.ZodType<Prisma.RecipeEquipmentUpdateManyWithWhereWithoutRecipeInstructionInput> = z.object({
  where: z.lazy(() => RecipeEquipmentScalarWhereInputSchema),
  data: z.union([ z.lazy(() => RecipeEquipmentUpdateManyMutationInputSchema),z.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutRecipeInstructionInputSchema) ]),
}).strict();

export const InventoryCreateWithoutItemsInputSchema: z.ZodType<Prisma.InventoryCreateWithoutItemsInput> = z.object({
  name: z.string().optional().nullable(),
  type: z.lazy(() => InventoryTypeSchema).optional(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutInventoryInputSchema),
  transactions: z.lazy(() => InventoryTransactionCreateNestedManyWithoutInventoryInputSchema).optional(),
  stockCounts: z.lazy(() => StockCountCreateNestedManyWithoutInventoryInputSchema).optional()
}).strict();

export const InventoryUncheckedCreateWithoutItemsInputSchema: z.ZodType<Prisma.InventoryUncheckedCreateWithoutItemsInput> = z.object({
  id: z.number().int().optional(),
  restaurantId: z.number().int(),
  name: z.string().optional().nullable(),
  type: z.lazy(() => InventoryTypeSchema).optional(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  transactions: z.lazy(() => InventoryTransactionUncheckedCreateNestedManyWithoutInventoryInputSchema).optional(),
  stockCounts: z.lazy(() => StockCountUncheckedCreateNestedManyWithoutInventoryInputSchema).optional()
}).strict();

export const InventoryCreateOrConnectWithoutItemsInputSchema: z.ZodType<Prisma.InventoryCreateOrConnectWithoutItemsInput> = z.object({
  where: z.lazy(() => InventoryWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => InventoryCreateWithoutItemsInputSchema),z.lazy(() => InventoryUncheckedCreateWithoutItemsInputSchema) ]),
}).strict();

export const IngredientCreateWithoutInventoryItemsInputSchema: z.ZodType<Prisma.IngredientCreateWithoutInventoryItemsInput> = z.object({
  name: z.string(),
  category: z.string(),
  price: z.number(),
  density: z.number().optional().nullable(),
  dietaryRestrictionId: z.number().int().optional().nullable(),
  calories: z.number().optional().nullable(),
  protein: z.number().optional().nullable(),
  carbohydrates: z.number().optional().nullable(),
  fat: z.number().optional().nullable(),
  fiber: z.number().optional().nullable(),
  sugar: z.number().optional().nullable(),
  sodium: z.number().optional().nullable(),
  usdaFoodId: z.string().optional().nullable(),
  nutritionSource: z.lazy(() => NutritionSourceSchema).optional().nullable(),
  nutritionUpdatedAt: z.coerce.date().optional().nullable(),
  recipeIngredients: z.lazy(() => RecipeIngredientCreateNestedManyWithoutIngredientInputSchema).optional(),
  orderItems: z.lazy(() => OrderItemCreateNestedManyWithoutIngredientInputSchema).optional(),
  vendors: z.lazy(() => VendorCreateNestedManyWithoutIngredientsInputSchema).optional(),
  WasteRecords: z.lazy(() => WasteRecordCreateNestedManyWithoutIngredienteInputSchema).optional(),
  IngredientAllergens: z.lazy(() => IngredientAllergenCreateNestedManyWithoutIngredientInputSchema).optional(),
  priceHistory: z.lazy(() => SupplierPriceHistoryCreateNestedManyWithoutIngredientInputSchema).optional(),
  DietaryRestrictions: z.lazy(() => DietaryRestrictionCreateNestedManyWithoutIngredientsInputSchema).optional()
}).strict();

export const IngredientUncheckedCreateWithoutInventoryItemsInputSchema: z.ZodType<Prisma.IngredientUncheckedCreateWithoutInventoryItemsInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  category: z.string(),
  price: z.number(),
  density: z.number().optional().nullable(),
  dietaryRestrictionId: z.number().int().optional().nullable(),
  calories: z.number().optional().nullable(),
  protein: z.number().optional().nullable(),
  carbohydrates: z.number().optional().nullable(),
  fat: z.number().optional().nullable(),
  fiber: z.number().optional().nullable(),
  sugar: z.number().optional().nullable(),
  sodium: z.number().optional().nullable(),
  usdaFoodId: z.string().optional().nullable(),
  nutritionSource: z.lazy(() => NutritionSourceSchema).optional().nullable(),
  nutritionUpdatedAt: z.coerce.date().optional().nullable(),
  recipeIngredients: z.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  orderItems: z.lazy(() => OrderItemUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  vendors: z.lazy(() => VendorUncheckedCreateNestedManyWithoutIngredientsInputSchema).optional(),
  WasteRecords: z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutIngredienteInputSchema).optional(),
  IngredientAllergens: z.lazy(() => IngredientAllergenUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  priceHistory: z.lazy(() => SupplierPriceHistoryUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  DietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutIngredientsInputSchema).optional()
}).strict();

export const IngredientCreateOrConnectWithoutInventoryItemsInputSchema: z.ZodType<Prisma.IngredientCreateOrConnectWithoutInventoryItemsInput> = z.object({
  where: z.lazy(() => IngredientWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => IngredientCreateWithoutInventoryItemsInputSchema),z.lazy(() => IngredientUncheckedCreateWithoutInventoryItemsInputSchema) ]),
}).strict();

export const UserCreateWithoutInventoryUpdatesInputSchema: z.ZodType<Prisma.UserCreateWithoutInventoryUpdatesInput> = z.object({
  email: z.string(),
  sub: z.number().int().optional().nullable(),
  passwordHash: z.string(),
  firstName: z.string(),
  lastName: z.string(),
  profileImage: z.string().optional().nullable(),
  verified: z.boolean().optional(),
  role: z.lazy(() => UserRoleSchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema).optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutUsersInputSchema).optional(),
  shifts: z.lazy(() => ShiftCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z.lazy(() => AvailabilityCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionCreateNestedManyWithoutApprovedByInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountCreateNestedManyWithoutCreatedByInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutInventoryUpdatesInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutInventoryUpdatesInput> = z.object({
  id: z.number().int().optional(),
  email: z.string(),
  sub: z.number().int().optional().nullable(),
  passwordHash: z.string(),
  firstName: z.string(),
  lastName: z.string(),
  profileImage: z.string().optional().nullable(),
  verified: z.boolean().optional(),
  role: z.lazy(() => UserRoleSchema),
  organizationId: z.number().int().optional().nullable(),
  restaurantId: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  shifts: z.lazy(() => ShiftUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteUncheckedCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutApprovedByInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutInventoryUpdatesInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutInventoryUpdatesInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutInventoryUpdatesInputSchema),z.lazy(() => UserUncheckedCreateWithoutInventoryUpdatesInputSchema) ]),
}).strict();

export const InventoryTransactionCreateWithoutItemInputSchema: z.ZodType<Prisma.InventoryTransactionCreateWithoutItemInput> = z.object({
  type: z.lazy(() => TransactionTypeSchema),
  quantity: z.number(),
  unit: z.string(),
  previousQty: z.number(),
  newQty: z.number(),
  cost: z.number().optional().nullable(),
  reference: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  inventory: z.lazy(() => InventoryCreateNestedOneWithoutTransactionsInputSchema),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutInventoryTransactionsInputSchema)
}).strict();

export const InventoryTransactionUncheckedCreateWithoutItemInputSchema: z.ZodType<Prisma.InventoryTransactionUncheckedCreateWithoutItemInput> = z.object({
  id: z.number().int().optional(),
  inventoryId: z.number().int(),
  type: z.lazy(() => TransactionTypeSchema),
  quantity: z.number(),
  unit: z.string(),
  previousQty: z.number(),
  newQty: z.number(),
  cost: z.number().optional().nullable(),
  reference: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  createdById: z.number().int(),
  createdAt: z.coerce.date().optional()
}).strict();

export const InventoryTransactionCreateOrConnectWithoutItemInputSchema: z.ZodType<Prisma.InventoryTransactionCreateOrConnectWithoutItemInput> = z.object({
  where: z.lazy(() => InventoryTransactionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => InventoryTransactionCreateWithoutItemInputSchema),z.lazy(() => InventoryTransactionUncheckedCreateWithoutItemInputSchema) ]),
}).strict();

export const InventoryTransactionCreateManyItemInputEnvelopeSchema: z.ZodType<Prisma.InventoryTransactionCreateManyItemInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => InventoryTransactionCreateManyItemInputSchema),z.lazy(() => InventoryTransactionCreateManyItemInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const InventoryWithdrawalCreateWithoutInventoryItemInputSchema: z.ZodType<Prisma.InventoryWithdrawalCreateWithoutInventoryItemInput> = z.object({
  dateTime: z.coerce.date(),
  quantity: z.number(),
  unit: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  recipe: z.lazy(() => RecipeCreateNestedOneWithoutWithdrawalsInputSchema).optional(),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutInventoryWithdrawalsInputSchema)
}).strict();

export const InventoryWithdrawalUncheckedCreateWithoutInventoryItemInputSchema: z.ZodType<Prisma.InventoryWithdrawalUncheckedCreateWithoutInventoryItemInput> = z.object({
  id: z.number().int().optional(),
  dateTime: z.coerce.date(),
  quantity: z.number(),
  unit: z.string(),
  recipeId: z.number().int().optional().nullable(),
  createdById: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const InventoryWithdrawalCreateOrConnectWithoutInventoryItemInputSchema: z.ZodType<Prisma.InventoryWithdrawalCreateOrConnectWithoutInventoryItemInput> = z.object({
  where: z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => InventoryWithdrawalCreateWithoutInventoryItemInputSchema),z.lazy(() => InventoryWithdrawalUncheckedCreateWithoutInventoryItemInputSchema) ]),
}).strict();

export const InventoryWithdrawalCreateManyInventoryItemInputEnvelopeSchema: z.ZodType<Prisma.InventoryWithdrawalCreateManyInventoryItemInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => InventoryWithdrawalCreateManyInventoryItemInputSchema),z.lazy(() => InventoryWithdrawalCreateManyInventoryItemInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const StockCountItemCreateWithoutItemInputSchema: z.ZodType<Prisma.StockCountItemCreateWithoutItemInput> = z.object({
  expectedQty: z.number(),
  actualQty: z.number(),
  difference: z.number(),
  notes: z.string().optional().nullable(),
  stockCount: z.lazy(() => StockCountCreateNestedOneWithoutItemsInputSchema)
}).strict();

export const StockCountItemUncheckedCreateWithoutItemInputSchema: z.ZodType<Prisma.StockCountItemUncheckedCreateWithoutItemInput> = z.object({
  id: z.number().int().optional(),
  stockCountId: z.number().int(),
  expectedQty: z.number(),
  actualQty: z.number(),
  difference: z.number(),
  notes: z.string().optional().nullable()
}).strict();

export const StockCountItemCreateOrConnectWithoutItemInputSchema: z.ZodType<Prisma.StockCountItemCreateOrConnectWithoutItemInput> = z.object({
  where: z.lazy(() => StockCountItemWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => StockCountItemCreateWithoutItemInputSchema),z.lazy(() => StockCountItemUncheckedCreateWithoutItemInputSchema) ]),
}).strict();

export const StockCountItemCreateManyItemInputEnvelopeSchema: z.ZodType<Prisma.StockCountItemCreateManyItemInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => StockCountItemCreateManyItemInputSchema),z.lazy(() => StockCountItemCreateManyItemInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const InventoryUpsertWithoutItemsInputSchema: z.ZodType<Prisma.InventoryUpsertWithoutItemsInput> = z.object({
  update: z.union([ z.lazy(() => InventoryUpdateWithoutItemsInputSchema),z.lazy(() => InventoryUncheckedUpdateWithoutItemsInputSchema) ]),
  create: z.union([ z.lazy(() => InventoryCreateWithoutItemsInputSchema),z.lazy(() => InventoryUncheckedCreateWithoutItemsInputSchema) ]),
  where: z.lazy(() => InventoryWhereInputSchema).optional()
}).strict();

export const InventoryUpdateToOneWithWhereWithoutItemsInputSchema: z.ZodType<Prisma.InventoryUpdateToOneWithWhereWithoutItemsInput> = z.object({
  where: z.lazy(() => InventoryWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => InventoryUpdateWithoutItemsInputSchema),z.lazy(() => InventoryUncheckedUpdateWithoutItemsInputSchema) ]),
}).strict();

export const InventoryUpdateWithoutItemsInputSchema: z.ZodType<Prisma.InventoryUpdateWithoutItemsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => InventoryTypeSchema),z.lazy(() => EnumInventoryTypeFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneRequiredWithoutInventoryNestedInputSchema).optional(),
  transactions: z.lazy(() => InventoryTransactionUpdateManyWithoutInventoryNestedInputSchema).optional(),
  stockCounts: z.lazy(() => StockCountUpdateManyWithoutInventoryNestedInputSchema).optional()
}).strict();

export const InventoryUncheckedUpdateWithoutItemsInputSchema: z.ZodType<Prisma.InventoryUncheckedUpdateWithoutItemsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => InventoryTypeSchema),z.lazy(() => EnumInventoryTypeFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  transactions: z.lazy(() => InventoryTransactionUncheckedUpdateManyWithoutInventoryNestedInputSchema).optional(),
  stockCounts: z.lazy(() => StockCountUncheckedUpdateManyWithoutInventoryNestedInputSchema).optional()
}).strict();

export const IngredientUpsertWithoutInventoryItemsInputSchema: z.ZodType<Prisma.IngredientUpsertWithoutInventoryItemsInput> = z.object({
  update: z.union([ z.lazy(() => IngredientUpdateWithoutInventoryItemsInputSchema),z.lazy(() => IngredientUncheckedUpdateWithoutInventoryItemsInputSchema) ]),
  create: z.union([ z.lazy(() => IngredientCreateWithoutInventoryItemsInputSchema),z.lazy(() => IngredientUncheckedCreateWithoutInventoryItemsInputSchema) ]),
  where: z.lazy(() => IngredientWhereInputSchema).optional()
}).strict();

export const IngredientUpdateToOneWithWhereWithoutInventoryItemsInputSchema: z.ZodType<Prisma.IngredientUpdateToOneWithWhereWithoutInventoryItemsInput> = z.object({
  where: z.lazy(() => IngredientWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => IngredientUpdateWithoutInventoryItemsInputSchema),z.lazy(() => IngredientUncheckedUpdateWithoutInventoryItemsInputSchema) ]),
}).strict();

export const IngredientUpdateWithoutInventoryItemsInputSchema: z.ZodType<Prisma.IngredientUpdateWithoutInventoryItemsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  density: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dietaryRestrictionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  calories: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  protein: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  carbohydrates: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fat: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fiber: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sugar: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sodium: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  usdaFoodId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nutritionSource: z.union([ z.lazy(() => NutritionSourceSchema),z.lazy(() => NullableEnumNutritionSourceFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nutritionUpdatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recipeIngredients: z.lazy(() => RecipeIngredientUpdateManyWithoutIngredientNestedInputSchema).optional(),
  orderItems: z.lazy(() => OrderItemUpdateManyWithoutIngredientNestedInputSchema).optional(),
  vendors: z.lazy(() => VendorUpdateManyWithoutIngredientsNestedInputSchema).optional(),
  WasteRecords: z.lazy(() => WasteRecordUpdateManyWithoutIngredienteNestedInputSchema).optional(),
  IngredientAllergens: z.lazy(() => IngredientAllergenUpdateManyWithoutIngredientNestedInputSchema).optional(),
  priceHistory: z.lazy(() => SupplierPriceHistoryUpdateManyWithoutIngredientNestedInputSchema).optional(),
  DietaryRestrictions: z.lazy(() => DietaryRestrictionUpdateManyWithoutIngredientsNestedInputSchema).optional()
}).strict();

export const IngredientUncheckedUpdateWithoutInventoryItemsInputSchema: z.ZodType<Prisma.IngredientUncheckedUpdateWithoutInventoryItemsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  density: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dietaryRestrictionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  calories: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  protein: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  carbohydrates: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fat: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fiber: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sugar: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sodium: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  usdaFoodId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nutritionSource: z.union([ z.lazy(() => NutritionSourceSchema),z.lazy(() => NullableEnumNutritionSourceFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nutritionUpdatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recipeIngredients: z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  orderItems: z.lazy(() => OrderItemUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  vendors: z.lazy(() => VendorUncheckedUpdateManyWithoutIngredientsNestedInputSchema).optional(),
  WasteRecords: z.lazy(() => WasteRecordUncheckedUpdateManyWithoutIngredienteNestedInputSchema).optional(),
  IngredientAllergens: z.lazy(() => IngredientAllergenUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  priceHistory: z.lazy(() => SupplierPriceHistoryUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  DietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutIngredientsNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutInventoryUpdatesInputSchema: z.ZodType<Prisma.UserUpsertWithoutInventoryUpdatesInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutInventoryUpdatesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutInventoryUpdatesInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutInventoryUpdatesInputSchema),z.lazy(() => UserUncheckedCreateWithoutInventoryUpdatesInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutInventoryUpdatesInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutInventoryUpdatesInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutInventoryUpdatesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutInventoryUpdatesInputSchema) ]),
}).strict();

export const UserUpdateWithoutInventoryUpdatesInputSchema: z.ZodType<Prisma.UserUpdateWithoutInventoryUpdatesInput> = z.object({
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sub: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passwordHash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  verified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneWithoutUsersNestedInputSchema).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneWithoutUsersNestedInputSchema).optional(),
  shifts: z.lazy(() => ShiftUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionUpdateManyWithoutApprovedByNestedInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountUpdateManyWithoutCreatedByNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutInventoryUpdatesInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutInventoryUpdatesInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sub: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passwordHash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  verified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  shifts: z.lazy(() => ShiftUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutApprovedByNestedInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional()
}).strict();

export const InventoryTransactionUpsertWithWhereUniqueWithoutItemInputSchema: z.ZodType<Prisma.InventoryTransactionUpsertWithWhereUniqueWithoutItemInput> = z.object({
  where: z.lazy(() => InventoryTransactionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => InventoryTransactionUpdateWithoutItemInputSchema),z.lazy(() => InventoryTransactionUncheckedUpdateWithoutItemInputSchema) ]),
  create: z.union([ z.lazy(() => InventoryTransactionCreateWithoutItemInputSchema),z.lazy(() => InventoryTransactionUncheckedCreateWithoutItemInputSchema) ]),
}).strict();

export const InventoryTransactionUpdateWithWhereUniqueWithoutItemInputSchema: z.ZodType<Prisma.InventoryTransactionUpdateWithWhereUniqueWithoutItemInput> = z.object({
  where: z.lazy(() => InventoryTransactionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => InventoryTransactionUpdateWithoutItemInputSchema),z.lazy(() => InventoryTransactionUncheckedUpdateWithoutItemInputSchema) ]),
}).strict();

export const InventoryTransactionUpdateManyWithWhereWithoutItemInputSchema: z.ZodType<Prisma.InventoryTransactionUpdateManyWithWhereWithoutItemInput> = z.object({
  where: z.lazy(() => InventoryTransactionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => InventoryTransactionUpdateManyMutationInputSchema),z.lazy(() => InventoryTransactionUncheckedUpdateManyWithoutItemInputSchema) ]),
}).strict();

export const InventoryWithdrawalUpsertWithWhereUniqueWithoutInventoryItemInputSchema: z.ZodType<Prisma.InventoryWithdrawalUpsertWithWhereUniqueWithoutInventoryItemInput> = z.object({
  where: z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => InventoryWithdrawalUpdateWithoutInventoryItemInputSchema),z.lazy(() => InventoryWithdrawalUncheckedUpdateWithoutInventoryItemInputSchema) ]),
  create: z.union([ z.lazy(() => InventoryWithdrawalCreateWithoutInventoryItemInputSchema),z.lazy(() => InventoryWithdrawalUncheckedCreateWithoutInventoryItemInputSchema) ]),
}).strict();

export const InventoryWithdrawalUpdateWithWhereUniqueWithoutInventoryItemInputSchema: z.ZodType<Prisma.InventoryWithdrawalUpdateWithWhereUniqueWithoutInventoryItemInput> = z.object({
  where: z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => InventoryWithdrawalUpdateWithoutInventoryItemInputSchema),z.lazy(() => InventoryWithdrawalUncheckedUpdateWithoutInventoryItemInputSchema) ]),
}).strict();

export const InventoryWithdrawalUpdateManyWithWhereWithoutInventoryItemInputSchema: z.ZodType<Prisma.InventoryWithdrawalUpdateManyWithWhereWithoutInventoryItemInput> = z.object({
  where: z.lazy(() => InventoryWithdrawalScalarWhereInputSchema),
  data: z.union([ z.lazy(() => InventoryWithdrawalUpdateManyMutationInputSchema),z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutInventoryItemInputSchema) ]),
}).strict();

export const StockCountItemUpsertWithWhereUniqueWithoutItemInputSchema: z.ZodType<Prisma.StockCountItemUpsertWithWhereUniqueWithoutItemInput> = z.object({
  where: z.lazy(() => StockCountItemWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => StockCountItemUpdateWithoutItemInputSchema),z.lazy(() => StockCountItemUncheckedUpdateWithoutItemInputSchema) ]),
  create: z.union([ z.lazy(() => StockCountItemCreateWithoutItemInputSchema),z.lazy(() => StockCountItemUncheckedCreateWithoutItemInputSchema) ]),
}).strict();

export const StockCountItemUpdateWithWhereUniqueWithoutItemInputSchema: z.ZodType<Prisma.StockCountItemUpdateWithWhereUniqueWithoutItemInput> = z.object({
  where: z.lazy(() => StockCountItemWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => StockCountItemUpdateWithoutItemInputSchema),z.lazy(() => StockCountItemUncheckedUpdateWithoutItemInputSchema) ]),
}).strict();

export const StockCountItemUpdateManyWithWhereWithoutItemInputSchema: z.ZodType<Prisma.StockCountItemUpdateManyWithWhereWithoutItemInput> = z.object({
  where: z.lazy(() => StockCountItemScalarWhereInputSchema),
  data: z.union([ z.lazy(() => StockCountItemUpdateManyMutationInputSchema),z.lazy(() => StockCountItemUncheckedUpdateManyWithoutItemInputSchema) ]),
}).strict();

export const StockCountItemScalarWhereInputSchema: z.ZodType<Prisma.StockCountItemScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => StockCountItemScalarWhereInputSchema),z.lazy(() => StockCountItemScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => StockCountItemScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => StockCountItemScalarWhereInputSchema),z.lazy(() => StockCountItemScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  stockCountId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  itemId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  expectedQty: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  actualQty: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  difference: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const InventoryCreateWithoutTransactionsInputSchema: z.ZodType<Prisma.InventoryCreateWithoutTransactionsInput> = z.object({
  name: z.string().optional().nullable(),
  type: z.lazy(() => InventoryTypeSchema).optional(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutInventoryInputSchema),
  items: z.lazy(() => InventoryItemCreateNestedManyWithoutInventoryInputSchema).optional(),
  stockCounts: z.lazy(() => StockCountCreateNestedManyWithoutInventoryInputSchema).optional()
}).strict();

export const InventoryUncheckedCreateWithoutTransactionsInputSchema: z.ZodType<Prisma.InventoryUncheckedCreateWithoutTransactionsInput> = z.object({
  id: z.number().int().optional(),
  restaurantId: z.number().int(),
  name: z.string().optional().nullable(),
  type: z.lazy(() => InventoryTypeSchema).optional(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  items: z.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutInventoryInputSchema).optional(),
  stockCounts: z.lazy(() => StockCountUncheckedCreateNestedManyWithoutInventoryInputSchema).optional()
}).strict();

export const InventoryCreateOrConnectWithoutTransactionsInputSchema: z.ZodType<Prisma.InventoryCreateOrConnectWithoutTransactionsInput> = z.object({
  where: z.lazy(() => InventoryWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => InventoryCreateWithoutTransactionsInputSchema),z.lazy(() => InventoryUncheckedCreateWithoutTransactionsInputSchema) ]),
}).strict();

export const InventoryItemCreateWithoutTransactionsInputSchema: z.ZodType<Prisma.InventoryItemCreateWithoutTransactionsInput> = z.object({
  quantity: z.number(),
  unit: z.string(),
  minQuantity: z.number(),
  restockThreshold: z.number(),
  lastCountDate: z.coerce.date().optional().nullable(),
  lastOrderDate: z.coerce.date().optional().nullable(),
  lastUpdated: z.coerce.date().optional(),
  par: z.number(),
  reorderPoint: z.number(),
  maxQuantity: z.number().optional().nullable(),
  location: z.string().optional().nullable(),
  barcode: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  currentPrice: z.number(),
  averageCost: z.number(),
  lastPurchasePrice: z.number().optional().nullable(),
  inventory: z.lazy(() => InventoryCreateNestedOneWithoutItemsInputSchema),
  ingredient: z.lazy(() => IngredientCreateNestedOneWithoutInventoryItemsInputSchema),
  lastUpdatedBy: z.lazy(() => UserCreateNestedOneWithoutInventoryUpdatesInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutInventoryItemInputSchema).optional(),
  stockCounts: z.lazy(() => StockCountItemCreateNestedManyWithoutItemInputSchema).optional()
}).strict();

export const InventoryItemUncheckedCreateWithoutTransactionsInputSchema: z.ZodType<Prisma.InventoryItemUncheckedCreateWithoutTransactionsInput> = z.object({
  id: z.number().int().optional(),
  inventoryId: z.number().int(),
  ingredientId: z.number().int(),
  quantity: z.number(),
  unit: z.string(),
  minQuantity: z.number(),
  restockThreshold: z.number(),
  lastCountDate: z.coerce.date().optional().nullable(),
  lastOrderDate: z.coerce.date().optional().nullable(),
  lastUpdatedById: z.number().int().optional().nullable(),
  lastUpdated: z.coerce.date().optional(),
  par: z.number(),
  reorderPoint: z.number(),
  maxQuantity: z.number().optional().nullable(),
  location: z.string().optional().nullable(),
  barcode: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  currentPrice: z.number(),
  averageCost: z.number(),
  lastPurchasePrice: z.number().optional().nullable(),
  withdrawals: z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutInventoryItemInputSchema).optional(),
  stockCounts: z.lazy(() => StockCountItemUncheckedCreateNestedManyWithoutItemInputSchema).optional()
}).strict();

export const InventoryItemCreateOrConnectWithoutTransactionsInputSchema: z.ZodType<Prisma.InventoryItemCreateOrConnectWithoutTransactionsInput> = z.object({
  where: z.lazy(() => InventoryItemWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => InventoryItemCreateWithoutTransactionsInputSchema),z.lazy(() => InventoryItemUncheckedCreateWithoutTransactionsInputSchema) ]),
}).strict();

export const UserCreateWithoutInventoryTransactionsInputSchema: z.ZodType<Prisma.UserCreateWithoutInventoryTransactionsInput> = z.object({
  email: z.string(),
  sub: z.number().int().optional().nullable(),
  passwordHash: z.string(),
  firstName: z.string(),
  lastName: z.string(),
  profileImage: z.string().optional().nullable(),
  verified: z.boolean().optional(),
  role: z.lazy(() => UserRoleSchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema).optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutUsersInputSchema).optional(),
  shifts: z.lazy(() => ShiftCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z.lazy(() => AvailabilityCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionCreateNestedManyWithoutApprovedByInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountCreateNestedManyWithoutCreatedByInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutInventoryTransactionsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutInventoryTransactionsInput> = z.object({
  id: z.number().int().optional(),
  email: z.string(),
  sub: z.number().int().optional().nullable(),
  passwordHash: z.string(),
  firstName: z.string(),
  lastName: z.string(),
  profileImage: z.string().optional().nullable(),
  verified: z.boolean().optional(),
  role: z.lazy(() => UserRoleSchema),
  organizationId: z.number().int().optional().nullable(),
  restaurantId: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  shifts: z.lazy(() => ShiftUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteUncheckedCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutApprovedByInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutInventoryTransactionsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutInventoryTransactionsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutInventoryTransactionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutInventoryTransactionsInputSchema) ]),
}).strict();

export const InventoryUpsertWithoutTransactionsInputSchema: z.ZodType<Prisma.InventoryUpsertWithoutTransactionsInput> = z.object({
  update: z.union([ z.lazy(() => InventoryUpdateWithoutTransactionsInputSchema),z.lazy(() => InventoryUncheckedUpdateWithoutTransactionsInputSchema) ]),
  create: z.union([ z.lazy(() => InventoryCreateWithoutTransactionsInputSchema),z.lazy(() => InventoryUncheckedCreateWithoutTransactionsInputSchema) ]),
  where: z.lazy(() => InventoryWhereInputSchema).optional()
}).strict();

export const InventoryUpdateToOneWithWhereWithoutTransactionsInputSchema: z.ZodType<Prisma.InventoryUpdateToOneWithWhereWithoutTransactionsInput> = z.object({
  where: z.lazy(() => InventoryWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => InventoryUpdateWithoutTransactionsInputSchema),z.lazy(() => InventoryUncheckedUpdateWithoutTransactionsInputSchema) ]),
}).strict();

export const InventoryUpdateWithoutTransactionsInputSchema: z.ZodType<Prisma.InventoryUpdateWithoutTransactionsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => InventoryTypeSchema),z.lazy(() => EnumInventoryTypeFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneRequiredWithoutInventoryNestedInputSchema).optional(),
  items: z.lazy(() => InventoryItemUpdateManyWithoutInventoryNestedInputSchema).optional(),
  stockCounts: z.lazy(() => StockCountUpdateManyWithoutInventoryNestedInputSchema).optional()
}).strict();

export const InventoryUncheckedUpdateWithoutTransactionsInputSchema: z.ZodType<Prisma.InventoryUncheckedUpdateWithoutTransactionsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => InventoryTypeSchema),z.lazy(() => EnumInventoryTypeFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  items: z.lazy(() => InventoryItemUncheckedUpdateManyWithoutInventoryNestedInputSchema).optional(),
  stockCounts: z.lazy(() => StockCountUncheckedUpdateManyWithoutInventoryNestedInputSchema).optional()
}).strict();

export const InventoryItemUpsertWithoutTransactionsInputSchema: z.ZodType<Prisma.InventoryItemUpsertWithoutTransactionsInput> = z.object({
  update: z.union([ z.lazy(() => InventoryItemUpdateWithoutTransactionsInputSchema),z.lazy(() => InventoryItemUncheckedUpdateWithoutTransactionsInputSchema) ]),
  create: z.union([ z.lazy(() => InventoryItemCreateWithoutTransactionsInputSchema),z.lazy(() => InventoryItemUncheckedCreateWithoutTransactionsInputSchema) ]),
  where: z.lazy(() => InventoryItemWhereInputSchema).optional()
}).strict();

export const InventoryItemUpdateToOneWithWhereWithoutTransactionsInputSchema: z.ZodType<Prisma.InventoryItemUpdateToOneWithWhereWithoutTransactionsInput> = z.object({
  where: z.lazy(() => InventoryItemWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => InventoryItemUpdateWithoutTransactionsInputSchema),z.lazy(() => InventoryItemUncheckedUpdateWithoutTransactionsInputSchema) ]),
}).strict();

export const InventoryItemUpdateWithoutTransactionsInputSchema: z.ZodType<Prisma.InventoryItemUpdateWithoutTransactionsInput> = z.object({
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  minQuantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  restockThreshold: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lastCountDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastOrderDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastUpdated: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  par: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  reorderPoint: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  maxQuantity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  barcode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currentPrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  averageCost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lastPurchasePrice: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inventory: z.lazy(() => InventoryUpdateOneRequiredWithoutItemsNestedInputSchema).optional(),
  ingredient: z.lazy(() => IngredientUpdateOneRequiredWithoutInventoryItemsNestedInputSchema).optional(),
  lastUpdatedBy: z.lazy(() => UserUpdateOneWithoutInventoryUpdatesNestedInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUpdateManyWithoutInventoryItemNestedInputSchema).optional(),
  stockCounts: z.lazy(() => StockCountItemUpdateManyWithoutItemNestedInputSchema).optional()
}).strict();

export const InventoryItemUncheckedUpdateWithoutTransactionsInputSchema: z.ZodType<Prisma.InventoryItemUncheckedUpdateWithoutTransactionsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inventoryId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ingredientId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  minQuantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  restockThreshold: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lastCountDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastOrderDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastUpdatedById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastUpdated: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  par: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  reorderPoint: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  maxQuantity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  barcode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currentPrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  averageCost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lastPurchasePrice: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  withdrawals: z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutInventoryItemNestedInputSchema).optional(),
  stockCounts: z.lazy(() => StockCountItemUncheckedUpdateManyWithoutItemNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutInventoryTransactionsInputSchema: z.ZodType<Prisma.UserUpsertWithoutInventoryTransactionsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutInventoryTransactionsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutInventoryTransactionsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutInventoryTransactionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutInventoryTransactionsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutInventoryTransactionsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutInventoryTransactionsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutInventoryTransactionsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutInventoryTransactionsInputSchema) ]),
}).strict();

export const UserUpdateWithoutInventoryTransactionsInputSchema: z.ZodType<Prisma.UserUpdateWithoutInventoryTransactionsInput> = z.object({
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sub: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passwordHash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  verified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneWithoutUsersNestedInputSchema).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneWithoutUsersNestedInputSchema).optional(),
  shifts: z.lazy(() => ShiftUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionUpdateManyWithoutApprovedByNestedInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountUpdateManyWithoutCreatedByNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutInventoryTransactionsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutInventoryTransactionsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sub: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passwordHash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  verified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  shifts: z.lazy(() => ShiftUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemUncheckedUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutApprovedByNestedInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional()
}).strict();

export const InventoryCreateWithoutStockCountsInputSchema: z.ZodType<Prisma.InventoryCreateWithoutStockCountsInput> = z.object({
  name: z.string().optional().nullable(),
  type: z.lazy(() => InventoryTypeSchema).optional(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutInventoryInputSchema),
  items: z.lazy(() => InventoryItemCreateNestedManyWithoutInventoryInputSchema).optional(),
  transactions: z.lazy(() => InventoryTransactionCreateNestedManyWithoutInventoryInputSchema).optional()
}).strict();

export const InventoryUncheckedCreateWithoutStockCountsInputSchema: z.ZodType<Prisma.InventoryUncheckedCreateWithoutStockCountsInput> = z.object({
  id: z.number().int().optional(),
  restaurantId: z.number().int(),
  name: z.string().optional().nullable(),
  type: z.lazy(() => InventoryTypeSchema).optional(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  items: z.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutInventoryInputSchema).optional(),
  transactions: z.lazy(() => InventoryTransactionUncheckedCreateNestedManyWithoutInventoryInputSchema).optional()
}).strict();

export const InventoryCreateOrConnectWithoutStockCountsInputSchema: z.ZodType<Prisma.InventoryCreateOrConnectWithoutStockCountsInput> = z.object({
  where: z.lazy(() => InventoryWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => InventoryCreateWithoutStockCountsInputSchema),z.lazy(() => InventoryUncheckedCreateWithoutStockCountsInputSchema) ]),
}).strict();

export const UserCreateWithoutStockCountsInputSchema: z.ZodType<Prisma.UserCreateWithoutStockCountsInput> = z.object({
  email: z.string(),
  sub: z.number().int().optional().nullable(),
  passwordHash: z.string(),
  firstName: z.string(),
  lastName: z.string(),
  profileImage: z.string().optional().nullable(),
  verified: z.boolean().optional(),
  role: z.lazy(() => UserRoleSchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema).optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutUsersInputSchema).optional(),
  shifts: z.lazy(() => ShiftCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z.lazy(() => AvailabilityCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionCreateNestedManyWithoutApprovedByInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionCreateNestedManyWithoutCreatedByInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutStockCountsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutStockCountsInput> = z.object({
  id: z.number().int().optional(),
  email: z.string(),
  sub: z.number().int().optional().nullable(),
  passwordHash: z.string(),
  firstName: z.string(),
  lastName: z.string(),
  profileImage: z.string().optional().nullable(),
  verified: z.boolean().optional(),
  role: z.lazy(() => UserRoleSchema),
  organizationId: z.number().int().optional().nullable(),
  restaurantId: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  shifts: z.lazy(() => ShiftUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteUncheckedCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutApprovedByInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutStockCountsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutStockCountsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutStockCountsInputSchema),z.lazy(() => UserUncheckedCreateWithoutStockCountsInputSchema) ]),
}).strict();

export const StockCountItemCreateWithoutStockCountInputSchema: z.ZodType<Prisma.StockCountItemCreateWithoutStockCountInput> = z.object({
  expectedQty: z.number(),
  actualQty: z.number(),
  difference: z.number(),
  notes: z.string().optional().nullable(),
  item: z.lazy(() => InventoryItemCreateNestedOneWithoutStockCountsInputSchema)
}).strict();

export const StockCountItemUncheckedCreateWithoutStockCountInputSchema: z.ZodType<Prisma.StockCountItemUncheckedCreateWithoutStockCountInput> = z.object({
  id: z.number().int().optional(),
  itemId: z.number().int(),
  expectedQty: z.number(),
  actualQty: z.number(),
  difference: z.number(),
  notes: z.string().optional().nullable()
}).strict();

export const StockCountItemCreateOrConnectWithoutStockCountInputSchema: z.ZodType<Prisma.StockCountItemCreateOrConnectWithoutStockCountInput> = z.object({
  where: z.lazy(() => StockCountItemWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => StockCountItemCreateWithoutStockCountInputSchema),z.lazy(() => StockCountItemUncheckedCreateWithoutStockCountInputSchema) ]),
}).strict();

export const StockCountItemCreateManyStockCountInputEnvelopeSchema: z.ZodType<Prisma.StockCountItemCreateManyStockCountInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => StockCountItemCreateManyStockCountInputSchema),z.lazy(() => StockCountItemCreateManyStockCountInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const InventoryUpsertWithoutStockCountsInputSchema: z.ZodType<Prisma.InventoryUpsertWithoutStockCountsInput> = z.object({
  update: z.union([ z.lazy(() => InventoryUpdateWithoutStockCountsInputSchema),z.lazy(() => InventoryUncheckedUpdateWithoutStockCountsInputSchema) ]),
  create: z.union([ z.lazy(() => InventoryCreateWithoutStockCountsInputSchema),z.lazy(() => InventoryUncheckedCreateWithoutStockCountsInputSchema) ]),
  where: z.lazy(() => InventoryWhereInputSchema).optional()
}).strict();

export const InventoryUpdateToOneWithWhereWithoutStockCountsInputSchema: z.ZodType<Prisma.InventoryUpdateToOneWithWhereWithoutStockCountsInput> = z.object({
  where: z.lazy(() => InventoryWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => InventoryUpdateWithoutStockCountsInputSchema),z.lazy(() => InventoryUncheckedUpdateWithoutStockCountsInputSchema) ]),
}).strict();

export const InventoryUpdateWithoutStockCountsInputSchema: z.ZodType<Prisma.InventoryUpdateWithoutStockCountsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => InventoryTypeSchema),z.lazy(() => EnumInventoryTypeFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneRequiredWithoutInventoryNestedInputSchema).optional(),
  items: z.lazy(() => InventoryItemUpdateManyWithoutInventoryNestedInputSchema).optional(),
  transactions: z.lazy(() => InventoryTransactionUpdateManyWithoutInventoryNestedInputSchema).optional()
}).strict();

export const InventoryUncheckedUpdateWithoutStockCountsInputSchema: z.ZodType<Prisma.InventoryUncheckedUpdateWithoutStockCountsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => InventoryTypeSchema),z.lazy(() => EnumInventoryTypeFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  items: z.lazy(() => InventoryItemUncheckedUpdateManyWithoutInventoryNestedInputSchema).optional(),
  transactions: z.lazy(() => InventoryTransactionUncheckedUpdateManyWithoutInventoryNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutStockCountsInputSchema: z.ZodType<Prisma.UserUpsertWithoutStockCountsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutStockCountsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutStockCountsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutStockCountsInputSchema),z.lazy(() => UserUncheckedCreateWithoutStockCountsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutStockCountsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutStockCountsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutStockCountsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutStockCountsInputSchema) ]),
}).strict();

export const UserUpdateWithoutStockCountsInputSchema: z.ZodType<Prisma.UserUpdateWithoutStockCountsInput> = z.object({
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sub: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passwordHash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  verified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneWithoutUsersNestedInputSchema).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneWithoutUsersNestedInputSchema).optional(),
  shifts: z.lazy(() => ShiftUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionUpdateManyWithoutApprovedByNestedInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionUpdateManyWithoutCreatedByNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutStockCountsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutStockCountsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sub: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passwordHash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  verified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  shifts: z.lazy(() => ShiftUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemUncheckedUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutApprovedByNestedInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional()
}).strict();

export const StockCountItemUpsertWithWhereUniqueWithoutStockCountInputSchema: z.ZodType<Prisma.StockCountItemUpsertWithWhereUniqueWithoutStockCountInput> = z.object({
  where: z.lazy(() => StockCountItemWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => StockCountItemUpdateWithoutStockCountInputSchema),z.lazy(() => StockCountItemUncheckedUpdateWithoutStockCountInputSchema) ]),
  create: z.union([ z.lazy(() => StockCountItemCreateWithoutStockCountInputSchema),z.lazy(() => StockCountItemUncheckedCreateWithoutStockCountInputSchema) ]),
}).strict();

export const StockCountItemUpdateWithWhereUniqueWithoutStockCountInputSchema: z.ZodType<Prisma.StockCountItemUpdateWithWhereUniqueWithoutStockCountInput> = z.object({
  where: z.lazy(() => StockCountItemWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => StockCountItemUpdateWithoutStockCountInputSchema),z.lazy(() => StockCountItemUncheckedUpdateWithoutStockCountInputSchema) ]),
}).strict();

export const StockCountItemUpdateManyWithWhereWithoutStockCountInputSchema: z.ZodType<Prisma.StockCountItemUpdateManyWithWhereWithoutStockCountInput> = z.object({
  where: z.lazy(() => StockCountItemScalarWhereInputSchema),
  data: z.union([ z.lazy(() => StockCountItemUpdateManyMutationInputSchema),z.lazy(() => StockCountItemUncheckedUpdateManyWithoutStockCountInputSchema) ]),
}).strict();

export const StockCountCreateWithoutItemsInputSchema: z.ZodType<Prisma.StockCountCreateWithoutItemsInput> = z.object({
  status: z.lazy(() => CountStatusSchema),
  startedAt: z.coerce.date(),
  completedAt: z.coerce.date().optional().nullable(),
  notes: z.string().optional().nullable(),
  inventory: z.lazy(() => InventoryCreateNestedOneWithoutStockCountsInputSchema),
  createdBy: z.lazy(() => UserCreateNestedOneWithoutStockCountsInputSchema)
}).strict();

export const StockCountUncheckedCreateWithoutItemsInputSchema: z.ZodType<Prisma.StockCountUncheckedCreateWithoutItemsInput> = z.object({
  id: z.number().int().optional(),
  inventoryId: z.number().int(),
  status: z.lazy(() => CountStatusSchema),
  startedAt: z.coerce.date(),
  completedAt: z.coerce.date().optional().nullable(),
  createdById: z.number().int(),
  notes: z.string().optional().nullable()
}).strict();

export const StockCountCreateOrConnectWithoutItemsInputSchema: z.ZodType<Prisma.StockCountCreateOrConnectWithoutItemsInput> = z.object({
  where: z.lazy(() => StockCountWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => StockCountCreateWithoutItemsInputSchema),z.lazy(() => StockCountUncheckedCreateWithoutItemsInputSchema) ]),
}).strict();

export const InventoryItemCreateWithoutStockCountsInputSchema: z.ZodType<Prisma.InventoryItemCreateWithoutStockCountsInput> = z.object({
  quantity: z.number(),
  unit: z.string(),
  minQuantity: z.number(),
  restockThreshold: z.number(),
  lastCountDate: z.coerce.date().optional().nullable(),
  lastOrderDate: z.coerce.date().optional().nullable(),
  lastUpdated: z.coerce.date().optional(),
  par: z.number(),
  reorderPoint: z.number(),
  maxQuantity: z.number().optional().nullable(),
  location: z.string().optional().nullable(),
  barcode: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  currentPrice: z.number(),
  averageCost: z.number(),
  lastPurchasePrice: z.number().optional().nullable(),
  inventory: z.lazy(() => InventoryCreateNestedOneWithoutItemsInputSchema),
  ingredient: z.lazy(() => IngredientCreateNestedOneWithoutInventoryItemsInputSchema),
  lastUpdatedBy: z.lazy(() => UserCreateNestedOneWithoutInventoryUpdatesInputSchema).optional(),
  transactions: z.lazy(() => InventoryTransactionCreateNestedManyWithoutItemInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutInventoryItemInputSchema).optional()
}).strict();

export const InventoryItemUncheckedCreateWithoutStockCountsInputSchema: z.ZodType<Prisma.InventoryItemUncheckedCreateWithoutStockCountsInput> = z.object({
  id: z.number().int().optional(),
  inventoryId: z.number().int(),
  ingredientId: z.number().int(),
  quantity: z.number(),
  unit: z.string(),
  minQuantity: z.number(),
  restockThreshold: z.number(),
  lastCountDate: z.coerce.date().optional().nullable(),
  lastOrderDate: z.coerce.date().optional().nullable(),
  lastUpdatedById: z.number().int().optional().nullable(),
  lastUpdated: z.coerce.date().optional(),
  par: z.number(),
  reorderPoint: z.number(),
  maxQuantity: z.number().optional().nullable(),
  location: z.string().optional().nullable(),
  barcode: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  currentPrice: z.number(),
  averageCost: z.number(),
  lastPurchasePrice: z.number().optional().nullable(),
  transactions: z.lazy(() => InventoryTransactionUncheckedCreateNestedManyWithoutItemInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutInventoryItemInputSchema).optional()
}).strict();

export const InventoryItemCreateOrConnectWithoutStockCountsInputSchema: z.ZodType<Prisma.InventoryItemCreateOrConnectWithoutStockCountsInput> = z.object({
  where: z.lazy(() => InventoryItemWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => InventoryItemCreateWithoutStockCountsInputSchema),z.lazy(() => InventoryItemUncheckedCreateWithoutStockCountsInputSchema) ]),
}).strict();

export const StockCountUpsertWithoutItemsInputSchema: z.ZodType<Prisma.StockCountUpsertWithoutItemsInput> = z.object({
  update: z.union([ z.lazy(() => StockCountUpdateWithoutItemsInputSchema),z.lazy(() => StockCountUncheckedUpdateWithoutItemsInputSchema) ]),
  create: z.union([ z.lazy(() => StockCountCreateWithoutItemsInputSchema),z.lazy(() => StockCountUncheckedCreateWithoutItemsInputSchema) ]),
  where: z.lazy(() => StockCountWhereInputSchema).optional()
}).strict();

export const StockCountUpdateToOneWithWhereWithoutItemsInputSchema: z.ZodType<Prisma.StockCountUpdateToOneWithWhereWithoutItemsInput> = z.object({
  where: z.lazy(() => StockCountWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => StockCountUpdateWithoutItemsInputSchema),z.lazy(() => StockCountUncheckedUpdateWithoutItemsInputSchema) ]),
}).strict();

export const StockCountUpdateWithoutItemsInputSchema: z.ZodType<Prisma.StockCountUpdateWithoutItemsInput> = z.object({
  status: z.union([ z.lazy(() => CountStatusSchema),z.lazy(() => EnumCountStatusFieldUpdateOperationsInputSchema) ]).optional(),
  startedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inventory: z.lazy(() => InventoryUpdateOneRequiredWithoutStockCountsNestedInputSchema).optional(),
  createdBy: z.lazy(() => UserUpdateOneRequiredWithoutStockCountsNestedInputSchema).optional()
}).strict();

export const StockCountUncheckedUpdateWithoutItemsInputSchema: z.ZodType<Prisma.StockCountUncheckedUpdateWithoutItemsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inventoryId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => CountStatusSchema),z.lazy(() => EnumCountStatusFieldUpdateOperationsInputSchema) ]).optional(),
  startedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const InventoryItemUpsertWithoutStockCountsInputSchema: z.ZodType<Prisma.InventoryItemUpsertWithoutStockCountsInput> = z.object({
  update: z.union([ z.lazy(() => InventoryItemUpdateWithoutStockCountsInputSchema),z.lazy(() => InventoryItemUncheckedUpdateWithoutStockCountsInputSchema) ]),
  create: z.union([ z.lazy(() => InventoryItemCreateWithoutStockCountsInputSchema),z.lazy(() => InventoryItemUncheckedCreateWithoutStockCountsInputSchema) ]),
  where: z.lazy(() => InventoryItemWhereInputSchema).optional()
}).strict();

export const InventoryItemUpdateToOneWithWhereWithoutStockCountsInputSchema: z.ZodType<Prisma.InventoryItemUpdateToOneWithWhereWithoutStockCountsInput> = z.object({
  where: z.lazy(() => InventoryItemWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => InventoryItemUpdateWithoutStockCountsInputSchema),z.lazy(() => InventoryItemUncheckedUpdateWithoutStockCountsInputSchema) ]),
}).strict();

export const InventoryItemUpdateWithoutStockCountsInputSchema: z.ZodType<Prisma.InventoryItemUpdateWithoutStockCountsInput> = z.object({
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  minQuantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  restockThreshold: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lastCountDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastOrderDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastUpdated: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  par: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  reorderPoint: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  maxQuantity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  barcode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currentPrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  averageCost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lastPurchasePrice: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inventory: z.lazy(() => InventoryUpdateOneRequiredWithoutItemsNestedInputSchema).optional(),
  ingredient: z.lazy(() => IngredientUpdateOneRequiredWithoutInventoryItemsNestedInputSchema).optional(),
  lastUpdatedBy: z.lazy(() => UserUpdateOneWithoutInventoryUpdatesNestedInputSchema).optional(),
  transactions: z.lazy(() => InventoryTransactionUpdateManyWithoutItemNestedInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUpdateManyWithoutInventoryItemNestedInputSchema).optional()
}).strict();

export const InventoryItemUncheckedUpdateWithoutStockCountsInputSchema: z.ZodType<Prisma.InventoryItemUncheckedUpdateWithoutStockCountsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inventoryId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ingredientId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  minQuantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  restockThreshold: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lastCountDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastOrderDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastUpdatedById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastUpdated: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  par: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  reorderPoint: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  maxQuantity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  barcode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currentPrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  averageCost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lastPurchasePrice: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  transactions: z.lazy(() => InventoryTransactionUncheckedUpdateManyWithoutItemNestedInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutInventoryItemNestedInputSchema).optional()
}).strict();

export const RecipeCreateWithoutRecipeStatsInputSchema: z.ZodType<Prisma.RecipeCreateWithoutRecipeStatsInput> = z.object({
  name: z.string(),
  imageUrls: z.union([ z.lazy(() => RecipeCreateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.string().optional().nullable(),
  servings: z.number().int(),
  cookTime: z.number().int(),
  prepTime: z.number().int(),
  frequency: z.number().int().optional().nullable(),
  foodCost: z.number().optional().nullable(),
  isDeleted: z.boolean().optional(),
  isPublished: z.boolean().optional(),
  publishedAt: z.coerce.date().optional().nullable(),
  language: z.string().optional(),
  skillLevel: z.lazy(() => SkillLevelSchema).optional(),
  category: z.lazy(() => CategorySchema).optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutRecipesInputSchema),
  cookBook: z.lazy(() => CookBookCreateNestedOneWithoutRecipesInputSchema),
  ingredients: z.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeCreateNestedManyWithoutRecipeInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z.lazy(() => RecipeTagCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionCreateNestedManyWithoutRecipesInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureCreateNestedManyWithoutRecipeInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldCreateNestedManyWithoutRecipeInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostCreateNestedManyWithoutRecipeInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionCreateNestedOneWithoutRecipeInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointCreateNestedManyWithoutRecipeInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageCreateNestedOneWithoutRecipeInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoCreateNestedManyWithoutRecipeInputSchema).optional()
}).strict();

export const RecipeUncheckedCreateWithoutRecipeStatsInputSchema: z.ZodType<Prisma.RecipeUncheckedCreateWithoutRecipeStatsInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  imageUrls: z.union([ z.lazy(() => RecipeCreateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.string().optional().nullable(),
  servings: z.number().int(),
  cookTime: z.number().int(),
  prepTime: z.number().int(),
  frequency: z.number().int().optional().nullable(),
  restaurantId: z.number().int(),
  cookBookId: z.number().int(),
  foodCost: z.number().optional().nullable(),
  isDeleted: z.boolean().optional(),
  isPublished: z.boolean().optional(),
  publishedAt: z.coerce.date().optional().nullable(),
  language: z.string().optional(),
  skillLevel: z.lazy(() => SkillLevelSchema).optional(),
  category: z.lazy(() => CategorySchema).optional(),
  ingredients: z.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUncheckedCreateNestedOneWithoutRecipeInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUncheckedCreateNestedOneWithoutRecipeInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUncheckedCreateNestedManyWithoutRecipeInputSchema).optional()
}).strict();

export const RecipeCreateOrConnectWithoutRecipeStatsInputSchema: z.ZodType<Prisma.RecipeCreateOrConnectWithoutRecipeStatsInput> = z.object({
  where: z.lazy(() => RecipeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RecipeCreateWithoutRecipeStatsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutRecipeStatsInputSchema) ]),
}).strict();

export const RecipeUpsertWithoutRecipeStatsInputSchema: z.ZodType<Prisma.RecipeUpsertWithoutRecipeStatsInput> = z.object({
  update: z.union([ z.lazy(() => RecipeUpdateWithoutRecipeStatsInputSchema),z.lazy(() => RecipeUncheckedUpdateWithoutRecipeStatsInputSchema) ]),
  create: z.union([ z.lazy(() => RecipeCreateWithoutRecipeStatsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutRecipeStatsInputSchema) ]),
  where: z.lazy(() => RecipeWhereInputSchema).optional()
}).strict();

export const RecipeUpdateToOneWithWhereWithoutRecipeStatsInputSchema: z.ZodType<Prisma.RecipeUpdateToOneWithWhereWithoutRecipeStatsInput> = z.object({
  where: z.lazy(() => RecipeWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RecipeUpdateWithoutRecipeStatsInputSchema),z.lazy(() => RecipeUncheckedUpdateWithoutRecipeStatsInputSchema) ]),
}).strict();

export const RecipeUpdateWithoutRecipeStatsInputSchema: z.ZodType<Prisma.RecipeUpdateWithoutRecipeStatsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrls: z.union([ z.lazy(() => RecipeUpdateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  servings: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isPublished: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  publishedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  skillLevel: z.union([ z.lazy(() => SkillLevelSchema),z.lazy(() => EnumSkillLevelFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => CategorySchema),z.lazy(() => EnumCategoryFieldUpdateOperationsInputSchema) ]).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  cookBook: z.lazy(() => CookBookUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  ingredients: z.lazy(() => RecipeIngredientUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUpdateManyWithoutRecipeNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUpdateManyWithoutRecipesNestedInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUpdateManyWithoutRecipeNestedInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUpdateManyWithoutRecipeNestedInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUpdateManyWithoutRecipeNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUpdateOneWithoutRecipeNestedInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUpdateManyWithoutRecipeNestedInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUpdateOneWithoutRecipeNestedInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUpdateManyWithoutRecipeNestedInputSchema).optional()
}).strict();

export const RecipeUncheckedUpdateWithoutRecipeStatsInputSchema: z.ZodType<Prisma.RecipeUncheckedUpdateWithoutRecipeStatsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrls: z.union([ z.lazy(() => RecipeUpdateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  servings: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookBookId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isPublished: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  publishedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  skillLevel: z.union([ z.lazy(() => SkillLevelSchema),z.lazy(() => EnumSkillLevelFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => CategorySchema),z.lazy(() => EnumCategoryFieldUpdateOperationsInputSchema) ]).optional(),
  ingredients: z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional()
}).strict();

export const RestaurantCreateWithoutOrdersInputSchema: z.ZodType<Prisma.RestaurantCreateWithoutOrdersInput> = z.object({
  name: z.string(),
  imageUrl: z.string().optional().nullable(),
  address: z.string(),
  city: z.string(),
  zipCode: z.string(),
  state: z.string(),
  owner: z.string(),
  foodCost: z.number().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  isDeleted: z.boolean().optional(),
  deleted: z.coerce.date().optional().nullable(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutRestaurantsInputSchema).optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: z.lazy(() => CookBookCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: z.lazy(() => InventoryCreateNestedOneWithoutRestaurantInputSchema).optional(),
  recipes: z.lazy(() => RecipeCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: z.lazy(() => MenuCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipments: z.lazy(() => EquipmentCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklists: z.lazy(() => QualityChecklistCreateNestedManyWithoutRestaurantInputSchema).optional(),
  customerFeedbacks: z.lazy(() => CustomerFeedbackCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();

export const RestaurantUncheckedCreateWithoutOrdersInputSchema: z.ZodType<Prisma.RestaurantUncheckedCreateWithoutOrdersInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  imageUrl: z.string().optional().nullable(),
  address: z.string(),
  city: z.string(),
  zipCode: z.string(),
  state: z.string(),
  owner: z.string(),
  organizationId: z.number().int().optional().nullable(),
  foodCost: z.number().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  isDeleted: z.boolean().optional(),
  deleted: z.coerce.date().optional().nullable(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: z.lazy(() => CookBookUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: z.lazy(() => InventoryUncheckedCreateNestedOneWithoutRestaurantInputSchema).optional(),
  recipes: z.lazy(() => RecipeUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: z.lazy(() => MenuUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipments: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklists: z.lazy(() => QualityChecklistUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  customerFeedbacks: z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();

export const RestaurantCreateOrConnectWithoutOrdersInputSchema: z.ZodType<Prisma.RestaurantCreateOrConnectWithoutOrdersInput> = z.object({
  where: z.lazy(() => RestaurantWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RestaurantCreateWithoutOrdersInputSchema),z.lazy(() => RestaurantUncheckedCreateWithoutOrdersInputSchema) ]),
}).strict();

export const VendorCreateWithoutOrdersInputSchema: z.ZodType<Prisma.VendorCreateWithoutOrdersInput> = z.object({
  name: z.string(),
  contact: z.string(),
  email: z.string(),
  phone: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  ingredients: z.lazy(() => IngredientCreateNestedManyWithoutVendorsInputSchema).optional(),
  supplierPriceHistory: z.lazy(() => SupplierPriceHistoryCreateNestedManyWithoutVendorInputSchema).optional()
}).strict();

export const VendorUncheckedCreateWithoutOrdersInputSchema: z.ZodType<Prisma.VendorUncheckedCreateWithoutOrdersInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  contact: z.string(),
  email: z.string(),
  phone: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  ingredients: z.lazy(() => IngredientUncheckedCreateNestedManyWithoutVendorsInputSchema).optional(),
  supplierPriceHistory: z.lazy(() => SupplierPriceHistoryUncheckedCreateNestedManyWithoutVendorInputSchema).optional()
}).strict();

export const VendorCreateOrConnectWithoutOrdersInputSchema: z.ZodType<Prisma.VendorCreateOrConnectWithoutOrdersInput> = z.object({
  where: z.lazy(() => VendorWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => VendorCreateWithoutOrdersInputSchema),z.lazy(() => VendorUncheckedCreateWithoutOrdersInputSchema) ]),
}).strict();

export const OrderItemCreateWithoutOrderInputSchema: z.ZodType<Prisma.OrderItemCreateWithoutOrderInput> = z.object({
  quantity: z.number(),
  unit: z.string(),
  price: z.number(),
  ingredient: z.lazy(() => IngredientCreateNestedOneWithoutOrderItemsInputSchema)
}).strict();

export const OrderItemUncheckedCreateWithoutOrderInputSchema: z.ZodType<Prisma.OrderItemUncheckedCreateWithoutOrderInput> = z.object({
  id: z.number().int().optional(),
  ingredientId: z.number().int(),
  quantity: z.number(),
  unit: z.string(),
  price: z.number()
}).strict();

export const OrderItemCreateOrConnectWithoutOrderInputSchema: z.ZodType<Prisma.OrderItemCreateOrConnectWithoutOrderInput> = z.object({
  where: z.lazy(() => OrderItemWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrderItemCreateWithoutOrderInputSchema),z.lazy(() => OrderItemUncheckedCreateWithoutOrderInputSchema) ]),
}).strict();

export const OrderItemCreateManyOrderInputEnvelopeSchema: z.ZodType<Prisma.OrderItemCreateManyOrderInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => OrderItemCreateManyOrderInputSchema),z.lazy(() => OrderItemCreateManyOrderInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const RestaurantUpsertWithoutOrdersInputSchema: z.ZodType<Prisma.RestaurantUpsertWithoutOrdersInput> = z.object({
  update: z.union([ z.lazy(() => RestaurantUpdateWithoutOrdersInputSchema),z.lazy(() => RestaurantUncheckedUpdateWithoutOrdersInputSchema) ]),
  create: z.union([ z.lazy(() => RestaurantCreateWithoutOrdersInputSchema),z.lazy(() => RestaurantUncheckedCreateWithoutOrdersInputSchema) ]),
  where: z.lazy(() => RestaurantWhereInputSchema).optional()
}).strict();

export const RestaurantUpdateToOneWithWhereWithoutOrdersInputSchema: z.ZodType<Prisma.RestaurantUpdateToOneWithWhereWithoutOrdersInput> = z.object({
  where: z.lazy(() => RestaurantWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RestaurantUpdateWithoutOrdersInputSchema),z.lazy(() => RestaurantUncheckedUpdateWithoutOrdersInputSchema) ]),
}).strict();

export const RestaurantUpdateWithoutOrdersInputSchema: z.ZodType<Prisma.RestaurantUpdateWithoutOrdersInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zipCode: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  owner: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deleted: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organization: z.lazy(() => OrganizationUpdateOneWithoutRestaurantsNestedInputSchema).optional(),
  users: z.lazy(() => UserUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: z.lazy(() => CookBookUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: z.lazy(() => InventoryUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  recipes: z.lazy(() => RecipeUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: z.lazy(() => MenuUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipments: z.lazy(() => EquipmentUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklists: z.lazy(() => QualityChecklistUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  customerFeedbacks: z.lazy(() => CustomerFeedbackUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();

export const RestaurantUncheckedUpdateWithoutOrdersInputSchema: z.ZodType<Prisma.RestaurantUncheckedUpdateWithoutOrdersInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zipCode: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  owner: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deleted: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: z.lazy(() => CookBookUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: z.lazy(() => InventoryUncheckedUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  recipes: z.lazy(() => RecipeUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: z.lazy(() => MenuUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipments: z.lazy(() => EquipmentUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklists: z.lazy(() => QualityChecklistUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  customerFeedbacks: z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();

export const VendorUpsertWithoutOrdersInputSchema: z.ZodType<Prisma.VendorUpsertWithoutOrdersInput> = z.object({
  update: z.union([ z.lazy(() => VendorUpdateWithoutOrdersInputSchema),z.lazy(() => VendorUncheckedUpdateWithoutOrdersInputSchema) ]),
  create: z.union([ z.lazy(() => VendorCreateWithoutOrdersInputSchema),z.lazy(() => VendorUncheckedCreateWithoutOrdersInputSchema) ]),
  where: z.lazy(() => VendorWhereInputSchema).optional()
}).strict();

export const VendorUpdateToOneWithWhereWithoutOrdersInputSchema: z.ZodType<Prisma.VendorUpdateToOneWithWhereWithoutOrdersInput> = z.object({
  where: z.lazy(() => VendorWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => VendorUpdateWithoutOrdersInputSchema),z.lazy(() => VendorUncheckedUpdateWithoutOrdersInputSchema) ]),
}).strict();

export const VendorUpdateWithoutOrdersInputSchema: z.ZodType<Prisma.VendorUpdateWithoutOrdersInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  contact: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ingredients: z.lazy(() => IngredientUpdateManyWithoutVendorsNestedInputSchema).optional(),
  supplierPriceHistory: z.lazy(() => SupplierPriceHistoryUpdateManyWithoutVendorNestedInputSchema).optional()
}).strict();

export const VendorUncheckedUpdateWithoutOrdersInputSchema: z.ZodType<Prisma.VendorUncheckedUpdateWithoutOrdersInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  contact: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ingredients: z.lazy(() => IngredientUncheckedUpdateManyWithoutVendorsNestedInputSchema).optional(),
  supplierPriceHistory: z.lazy(() => SupplierPriceHistoryUncheckedUpdateManyWithoutVendorNestedInputSchema).optional()
}).strict();

export const OrderItemUpsertWithWhereUniqueWithoutOrderInputSchema: z.ZodType<Prisma.OrderItemUpsertWithWhereUniqueWithoutOrderInput> = z.object({
  where: z.lazy(() => OrderItemWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => OrderItemUpdateWithoutOrderInputSchema),z.lazy(() => OrderItemUncheckedUpdateWithoutOrderInputSchema) ]),
  create: z.union([ z.lazy(() => OrderItemCreateWithoutOrderInputSchema),z.lazy(() => OrderItemUncheckedCreateWithoutOrderInputSchema) ]),
}).strict();

export const OrderItemUpdateWithWhereUniqueWithoutOrderInputSchema: z.ZodType<Prisma.OrderItemUpdateWithWhereUniqueWithoutOrderInput> = z.object({
  where: z.lazy(() => OrderItemWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => OrderItemUpdateWithoutOrderInputSchema),z.lazy(() => OrderItemUncheckedUpdateWithoutOrderInputSchema) ]),
}).strict();

export const OrderItemUpdateManyWithWhereWithoutOrderInputSchema: z.ZodType<Prisma.OrderItemUpdateManyWithWhereWithoutOrderInput> = z.object({
  where: z.lazy(() => OrderItemScalarWhereInputSchema),
  data: z.union([ z.lazy(() => OrderItemUpdateManyMutationInputSchema),z.lazy(() => OrderItemUncheckedUpdateManyWithoutOrderInputSchema) ]),
}).strict();

export const OrderCreateWithoutItemsInputSchema: z.ZodType<Prisma.OrderCreateWithoutItemsInput> = z.object({
  status: z.lazy(() => OrderStatusSchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutOrdersInputSchema),
  vendor: z.lazy(() => VendorCreateNestedOneWithoutOrdersInputSchema)
}).strict();

export const OrderUncheckedCreateWithoutItemsInputSchema: z.ZodType<Prisma.OrderUncheckedCreateWithoutItemsInput> = z.object({
  id: z.number().int().optional(),
  restaurantId: z.number().int(),
  vendorId: z.number().int(),
  status: z.lazy(() => OrderStatusSchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const OrderCreateOrConnectWithoutItemsInputSchema: z.ZodType<Prisma.OrderCreateOrConnectWithoutItemsInput> = z.object({
  where: z.lazy(() => OrderWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrderCreateWithoutItemsInputSchema),z.lazy(() => OrderUncheckedCreateWithoutItemsInputSchema) ]),
}).strict();

export const IngredientCreateWithoutOrderItemsInputSchema: z.ZodType<Prisma.IngredientCreateWithoutOrderItemsInput> = z.object({
  name: z.string(),
  category: z.string(),
  price: z.number(),
  density: z.number().optional().nullable(),
  dietaryRestrictionId: z.number().int().optional().nullable(),
  calories: z.number().optional().nullable(),
  protein: z.number().optional().nullable(),
  carbohydrates: z.number().optional().nullable(),
  fat: z.number().optional().nullable(),
  fiber: z.number().optional().nullable(),
  sugar: z.number().optional().nullable(),
  sodium: z.number().optional().nullable(),
  usdaFoodId: z.string().optional().nullable(),
  nutritionSource: z.lazy(() => NutritionSourceSchema).optional().nullable(),
  nutritionUpdatedAt: z.coerce.date().optional().nullable(),
  recipeIngredients: z.lazy(() => RecipeIngredientCreateNestedManyWithoutIngredientInputSchema).optional(),
  inventoryItems: z.lazy(() => InventoryItemCreateNestedManyWithoutIngredientInputSchema).optional(),
  vendors: z.lazy(() => VendorCreateNestedManyWithoutIngredientsInputSchema).optional(),
  WasteRecords: z.lazy(() => WasteRecordCreateNestedManyWithoutIngredienteInputSchema).optional(),
  IngredientAllergens: z.lazy(() => IngredientAllergenCreateNestedManyWithoutIngredientInputSchema).optional(),
  priceHistory: z.lazy(() => SupplierPriceHistoryCreateNestedManyWithoutIngredientInputSchema).optional(),
  DietaryRestrictions: z.lazy(() => DietaryRestrictionCreateNestedManyWithoutIngredientsInputSchema).optional()
}).strict();

export const IngredientUncheckedCreateWithoutOrderItemsInputSchema: z.ZodType<Prisma.IngredientUncheckedCreateWithoutOrderItemsInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  category: z.string(),
  price: z.number(),
  density: z.number().optional().nullable(),
  dietaryRestrictionId: z.number().int().optional().nullable(),
  calories: z.number().optional().nullable(),
  protein: z.number().optional().nullable(),
  carbohydrates: z.number().optional().nullable(),
  fat: z.number().optional().nullable(),
  fiber: z.number().optional().nullable(),
  sugar: z.number().optional().nullable(),
  sodium: z.number().optional().nullable(),
  usdaFoodId: z.string().optional().nullable(),
  nutritionSource: z.lazy(() => NutritionSourceSchema).optional().nullable(),
  nutritionUpdatedAt: z.coerce.date().optional().nullable(),
  recipeIngredients: z.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  inventoryItems: z.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  vendors: z.lazy(() => VendorUncheckedCreateNestedManyWithoutIngredientsInputSchema).optional(),
  WasteRecords: z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutIngredienteInputSchema).optional(),
  IngredientAllergens: z.lazy(() => IngredientAllergenUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  priceHistory: z.lazy(() => SupplierPriceHistoryUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  DietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutIngredientsInputSchema).optional()
}).strict();

export const IngredientCreateOrConnectWithoutOrderItemsInputSchema: z.ZodType<Prisma.IngredientCreateOrConnectWithoutOrderItemsInput> = z.object({
  where: z.lazy(() => IngredientWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => IngredientCreateWithoutOrderItemsInputSchema),z.lazy(() => IngredientUncheckedCreateWithoutOrderItemsInputSchema) ]),
}).strict();

export const OrderUpsertWithoutItemsInputSchema: z.ZodType<Prisma.OrderUpsertWithoutItemsInput> = z.object({
  update: z.union([ z.lazy(() => OrderUpdateWithoutItemsInputSchema),z.lazy(() => OrderUncheckedUpdateWithoutItemsInputSchema) ]),
  create: z.union([ z.lazy(() => OrderCreateWithoutItemsInputSchema),z.lazy(() => OrderUncheckedCreateWithoutItemsInputSchema) ]),
  where: z.lazy(() => OrderWhereInputSchema).optional()
}).strict();

export const OrderUpdateToOneWithWhereWithoutItemsInputSchema: z.ZodType<Prisma.OrderUpdateToOneWithWhereWithoutItemsInput> = z.object({
  where: z.lazy(() => OrderWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrderUpdateWithoutItemsInputSchema),z.lazy(() => OrderUncheckedUpdateWithoutItemsInputSchema) ]),
}).strict();

export const OrderUpdateWithoutItemsInputSchema: z.ZodType<Prisma.OrderUpdateWithoutItemsInput> = z.object({
  status: z.union([ z.lazy(() => OrderStatusSchema),z.lazy(() => EnumOrderStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneRequiredWithoutOrdersNestedInputSchema).optional(),
  vendor: z.lazy(() => VendorUpdateOneRequiredWithoutOrdersNestedInputSchema).optional()
}).strict();

export const OrderUncheckedUpdateWithoutItemsInputSchema: z.ZodType<Prisma.OrderUncheckedUpdateWithoutItemsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  vendorId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => OrderStatusSchema),z.lazy(() => EnumOrderStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const IngredientUpsertWithoutOrderItemsInputSchema: z.ZodType<Prisma.IngredientUpsertWithoutOrderItemsInput> = z.object({
  update: z.union([ z.lazy(() => IngredientUpdateWithoutOrderItemsInputSchema),z.lazy(() => IngredientUncheckedUpdateWithoutOrderItemsInputSchema) ]),
  create: z.union([ z.lazy(() => IngredientCreateWithoutOrderItemsInputSchema),z.lazy(() => IngredientUncheckedCreateWithoutOrderItemsInputSchema) ]),
  where: z.lazy(() => IngredientWhereInputSchema).optional()
}).strict();

export const IngredientUpdateToOneWithWhereWithoutOrderItemsInputSchema: z.ZodType<Prisma.IngredientUpdateToOneWithWhereWithoutOrderItemsInput> = z.object({
  where: z.lazy(() => IngredientWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => IngredientUpdateWithoutOrderItemsInputSchema),z.lazy(() => IngredientUncheckedUpdateWithoutOrderItemsInputSchema) ]),
}).strict();

export const IngredientUpdateWithoutOrderItemsInputSchema: z.ZodType<Prisma.IngredientUpdateWithoutOrderItemsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  density: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dietaryRestrictionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  calories: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  protein: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  carbohydrates: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fat: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fiber: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sugar: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sodium: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  usdaFoodId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nutritionSource: z.union([ z.lazy(() => NutritionSourceSchema),z.lazy(() => NullableEnumNutritionSourceFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nutritionUpdatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recipeIngredients: z.lazy(() => RecipeIngredientUpdateManyWithoutIngredientNestedInputSchema).optional(),
  inventoryItems: z.lazy(() => InventoryItemUpdateManyWithoutIngredientNestedInputSchema).optional(),
  vendors: z.lazy(() => VendorUpdateManyWithoutIngredientsNestedInputSchema).optional(),
  WasteRecords: z.lazy(() => WasteRecordUpdateManyWithoutIngredienteNestedInputSchema).optional(),
  IngredientAllergens: z.lazy(() => IngredientAllergenUpdateManyWithoutIngredientNestedInputSchema).optional(),
  priceHistory: z.lazy(() => SupplierPriceHistoryUpdateManyWithoutIngredientNestedInputSchema).optional(),
  DietaryRestrictions: z.lazy(() => DietaryRestrictionUpdateManyWithoutIngredientsNestedInputSchema).optional()
}).strict();

export const IngredientUncheckedUpdateWithoutOrderItemsInputSchema: z.ZodType<Prisma.IngredientUncheckedUpdateWithoutOrderItemsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  density: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dietaryRestrictionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  calories: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  protein: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  carbohydrates: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fat: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fiber: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sugar: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sodium: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  usdaFoodId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nutritionSource: z.union([ z.lazy(() => NutritionSourceSchema),z.lazy(() => NullableEnumNutritionSourceFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nutritionUpdatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recipeIngredients: z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  inventoryItems: z.lazy(() => InventoryItemUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  vendors: z.lazy(() => VendorUncheckedUpdateManyWithoutIngredientsNestedInputSchema).optional(),
  WasteRecords: z.lazy(() => WasteRecordUncheckedUpdateManyWithoutIngredienteNestedInputSchema).optional(),
  IngredientAllergens: z.lazy(() => IngredientAllergenUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  priceHistory: z.lazy(() => SupplierPriceHistoryUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  DietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutIngredientsNestedInputSchema).optional()
}).strict();

export const OrderCreateWithoutVendorInputSchema: z.ZodType<Prisma.OrderCreateWithoutVendorInput> = z.object({
  status: z.lazy(() => OrderStatusSchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutOrdersInputSchema),
  items: z.lazy(() => OrderItemCreateNestedManyWithoutOrderInputSchema).optional()
}).strict();

export const OrderUncheckedCreateWithoutVendorInputSchema: z.ZodType<Prisma.OrderUncheckedCreateWithoutVendorInput> = z.object({
  id: z.number().int().optional(),
  restaurantId: z.number().int(),
  status: z.lazy(() => OrderStatusSchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  items: z.lazy(() => OrderItemUncheckedCreateNestedManyWithoutOrderInputSchema).optional()
}).strict();

export const OrderCreateOrConnectWithoutVendorInputSchema: z.ZodType<Prisma.OrderCreateOrConnectWithoutVendorInput> = z.object({
  where: z.lazy(() => OrderWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrderCreateWithoutVendorInputSchema),z.lazy(() => OrderUncheckedCreateWithoutVendorInputSchema) ]),
}).strict();

export const OrderCreateManyVendorInputEnvelopeSchema: z.ZodType<Prisma.OrderCreateManyVendorInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => OrderCreateManyVendorInputSchema),z.lazy(() => OrderCreateManyVendorInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const IngredientCreateWithoutVendorsInputSchema: z.ZodType<Prisma.IngredientCreateWithoutVendorsInput> = z.object({
  name: z.string(),
  category: z.string(),
  price: z.number(),
  density: z.number().optional().nullable(),
  dietaryRestrictionId: z.number().int().optional().nullable(),
  calories: z.number().optional().nullable(),
  protein: z.number().optional().nullable(),
  carbohydrates: z.number().optional().nullable(),
  fat: z.number().optional().nullable(),
  fiber: z.number().optional().nullable(),
  sugar: z.number().optional().nullable(),
  sodium: z.number().optional().nullable(),
  usdaFoodId: z.string().optional().nullable(),
  nutritionSource: z.lazy(() => NutritionSourceSchema).optional().nullable(),
  nutritionUpdatedAt: z.coerce.date().optional().nullable(),
  recipeIngredients: z.lazy(() => RecipeIngredientCreateNestedManyWithoutIngredientInputSchema).optional(),
  inventoryItems: z.lazy(() => InventoryItemCreateNestedManyWithoutIngredientInputSchema).optional(),
  orderItems: z.lazy(() => OrderItemCreateNestedManyWithoutIngredientInputSchema).optional(),
  WasteRecords: z.lazy(() => WasteRecordCreateNestedManyWithoutIngredienteInputSchema).optional(),
  IngredientAllergens: z.lazy(() => IngredientAllergenCreateNestedManyWithoutIngredientInputSchema).optional(),
  priceHistory: z.lazy(() => SupplierPriceHistoryCreateNestedManyWithoutIngredientInputSchema).optional(),
  DietaryRestrictions: z.lazy(() => DietaryRestrictionCreateNestedManyWithoutIngredientsInputSchema).optional()
}).strict();

export const IngredientUncheckedCreateWithoutVendorsInputSchema: z.ZodType<Prisma.IngredientUncheckedCreateWithoutVendorsInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  category: z.string(),
  price: z.number(),
  density: z.number().optional().nullable(),
  dietaryRestrictionId: z.number().int().optional().nullable(),
  calories: z.number().optional().nullable(),
  protein: z.number().optional().nullable(),
  carbohydrates: z.number().optional().nullable(),
  fat: z.number().optional().nullable(),
  fiber: z.number().optional().nullable(),
  sugar: z.number().optional().nullable(),
  sodium: z.number().optional().nullable(),
  usdaFoodId: z.string().optional().nullable(),
  nutritionSource: z.lazy(() => NutritionSourceSchema).optional().nullable(),
  nutritionUpdatedAt: z.coerce.date().optional().nullable(),
  recipeIngredients: z.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  inventoryItems: z.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  orderItems: z.lazy(() => OrderItemUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  WasteRecords: z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutIngredienteInputSchema).optional(),
  IngredientAllergens: z.lazy(() => IngredientAllergenUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  priceHistory: z.lazy(() => SupplierPriceHistoryUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  DietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutIngredientsInputSchema).optional()
}).strict();

export const IngredientCreateOrConnectWithoutVendorsInputSchema: z.ZodType<Prisma.IngredientCreateOrConnectWithoutVendorsInput> = z.object({
  where: z.lazy(() => IngredientWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => IngredientCreateWithoutVendorsInputSchema),z.lazy(() => IngredientUncheckedCreateWithoutVendorsInputSchema) ]),
}).strict();

export const SupplierPriceHistoryCreateWithoutVendorInputSchema: z.ZodType<Prisma.SupplierPriceHistoryCreateWithoutVendorInput> = z.object({
  price: z.number(),
  unit: z.string(),
  startDate: z.coerce.date(),
  endDate: z.coerce.date().optional().nullable(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  ingredient: z.lazy(() => IngredientCreateNestedOneWithoutPriceHistoryInputSchema)
}).strict();

export const SupplierPriceHistoryUncheckedCreateWithoutVendorInputSchema: z.ZodType<Prisma.SupplierPriceHistoryUncheckedCreateWithoutVendorInput> = z.object({
  id: z.number().int().optional(),
  ingredientId: z.number().int(),
  price: z.number(),
  unit: z.string(),
  startDate: z.coerce.date(),
  endDate: z.coerce.date().optional().nullable(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const SupplierPriceHistoryCreateOrConnectWithoutVendorInputSchema: z.ZodType<Prisma.SupplierPriceHistoryCreateOrConnectWithoutVendorInput> = z.object({
  where: z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SupplierPriceHistoryCreateWithoutVendorInputSchema),z.lazy(() => SupplierPriceHistoryUncheckedCreateWithoutVendorInputSchema) ]),
}).strict();

export const SupplierPriceHistoryCreateManyVendorInputEnvelopeSchema: z.ZodType<Prisma.SupplierPriceHistoryCreateManyVendorInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => SupplierPriceHistoryCreateManyVendorInputSchema),z.lazy(() => SupplierPriceHistoryCreateManyVendorInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const OrderUpsertWithWhereUniqueWithoutVendorInputSchema: z.ZodType<Prisma.OrderUpsertWithWhereUniqueWithoutVendorInput> = z.object({
  where: z.lazy(() => OrderWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => OrderUpdateWithoutVendorInputSchema),z.lazy(() => OrderUncheckedUpdateWithoutVendorInputSchema) ]),
  create: z.union([ z.lazy(() => OrderCreateWithoutVendorInputSchema),z.lazy(() => OrderUncheckedCreateWithoutVendorInputSchema) ]),
}).strict();

export const OrderUpdateWithWhereUniqueWithoutVendorInputSchema: z.ZodType<Prisma.OrderUpdateWithWhereUniqueWithoutVendorInput> = z.object({
  where: z.lazy(() => OrderWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => OrderUpdateWithoutVendorInputSchema),z.lazy(() => OrderUncheckedUpdateWithoutVendorInputSchema) ]),
}).strict();

export const OrderUpdateManyWithWhereWithoutVendorInputSchema: z.ZodType<Prisma.OrderUpdateManyWithWhereWithoutVendorInput> = z.object({
  where: z.lazy(() => OrderScalarWhereInputSchema),
  data: z.union([ z.lazy(() => OrderUpdateManyMutationInputSchema),z.lazy(() => OrderUncheckedUpdateManyWithoutVendorInputSchema) ]),
}).strict();

export const IngredientUpsertWithWhereUniqueWithoutVendorsInputSchema: z.ZodType<Prisma.IngredientUpsertWithWhereUniqueWithoutVendorsInput> = z.object({
  where: z.lazy(() => IngredientWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => IngredientUpdateWithoutVendorsInputSchema),z.lazy(() => IngredientUncheckedUpdateWithoutVendorsInputSchema) ]),
  create: z.union([ z.lazy(() => IngredientCreateWithoutVendorsInputSchema),z.lazy(() => IngredientUncheckedCreateWithoutVendorsInputSchema) ]),
}).strict();

export const IngredientUpdateWithWhereUniqueWithoutVendorsInputSchema: z.ZodType<Prisma.IngredientUpdateWithWhereUniqueWithoutVendorsInput> = z.object({
  where: z.lazy(() => IngredientWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => IngredientUpdateWithoutVendorsInputSchema),z.lazy(() => IngredientUncheckedUpdateWithoutVendorsInputSchema) ]),
}).strict();

export const IngredientUpdateManyWithWhereWithoutVendorsInputSchema: z.ZodType<Prisma.IngredientUpdateManyWithWhereWithoutVendorsInput> = z.object({
  where: z.lazy(() => IngredientScalarWhereInputSchema),
  data: z.union([ z.lazy(() => IngredientUpdateManyMutationInputSchema),z.lazy(() => IngredientUncheckedUpdateManyWithoutVendorsInputSchema) ]),
}).strict();

export const SupplierPriceHistoryUpsertWithWhereUniqueWithoutVendorInputSchema: z.ZodType<Prisma.SupplierPriceHistoryUpsertWithWhereUniqueWithoutVendorInput> = z.object({
  where: z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => SupplierPriceHistoryUpdateWithoutVendorInputSchema),z.lazy(() => SupplierPriceHistoryUncheckedUpdateWithoutVendorInputSchema) ]),
  create: z.union([ z.lazy(() => SupplierPriceHistoryCreateWithoutVendorInputSchema),z.lazy(() => SupplierPriceHistoryUncheckedCreateWithoutVendorInputSchema) ]),
}).strict();

export const SupplierPriceHistoryUpdateWithWhereUniqueWithoutVendorInputSchema: z.ZodType<Prisma.SupplierPriceHistoryUpdateWithWhereUniqueWithoutVendorInput> = z.object({
  where: z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => SupplierPriceHistoryUpdateWithoutVendorInputSchema),z.lazy(() => SupplierPriceHistoryUncheckedUpdateWithoutVendorInputSchema) ]),
}).strict();

export const SupplierPriceHistoryUpdateManyWithWhereWithoutVendorInputSchema: z.ZodType<Prisma.SupplierPriceHistoryUpdateManyWithWhereWithoutVendorInput> = z.object({
  where: z.lazy(() => SupplierPriceHistoryScalarWhereInputSchema),
  data: z.union([ z.lazy(() => SupplierPriceHistoryUpdateManyMutationInputSchema),z.lazy(() => SupplierPriceHistoryUncheckedUpdateManyWithoutVendorInputSchema) ]),
}).strict();

export const UserCreateWithoutShiftsInputSchema: z.ZodType<Prisma.UserCreateWithoutShiftsInput> = z.object({
  email: z.string(),
  sub: z.number().int().optional().nullable(),
  passwordHash: z.string(),
  firstName: z.string(),
  lastName: z.string(),
  profileImage: z.string().optional().nullable(),
  verified: z.boolean().optional(),
  role: z.lazy(() => UserRoleSchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema).optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutUsersInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z.lazy(() => AvailabilityCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionCreateNestedManyWithoutApprovedByInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountCreateNestedManyWithoutCreatedByInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutShiftsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutShiftsInput> = z.object({
  id: z.number().int().optional(),
  email: z.string(),
  sub: z.number().int().optional().nullable(),
  passwordHash: z.string(),
  firstName: z.string(),
  lastName: z.string(),
  profileImage: z.string().optional().nullable(),
  verified: z.boolean().optional(),
  role: z.lazy(() => UserRoleSchema),
  organizationId: z.number().int().optional().nullable(),
  restaurantId: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  prepItems: z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteUncheckedCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutApprovedByInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutShiftsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutShiftsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutShiftsInputSchema),z.lazy(() => UserUncheckedCreateWithoutShiftsInputSchema) ]),
}).strict();

export const ShiftTaskCreateWithoutShiftInputSchema: z.ZodType<Prisma.ShiftTaskCreateWithoutShiftInput> = z.object({
  taskType: z.lazy(() => TaskTypeSchema),
  startTime: z.coerce.date(),
  endTime: z.coerce.date(),
  duration: z.number().int(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ShiftTaskUncheckedCreateWithoutShiftInputSchema: z.ZodType<Prisma.ShiftTaskUncheckedCreateWithoutShiftInput> = z.object({
  id: z.number().int().optional(),
  taskType: z.lazy(() => TaskTypeSchema),
  startTime: z.coerce.date(),
  endTime: z.coerce.date(),
  duration: z.number().int(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ShiftTaskCreateOrConnectWithoutShiftInputSchema: z.ZodType<Prisma.ShiftTaskCreateOrConnectWithoutShiftInput> = z.object({
  where: z.lazy(() => ShiftTaskWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ShiftTaskCreateWithoutShiftInputSchema),z.lazy(() => ShiftTaskUncheckedCreateWithoutShiftInputSchema) ]),
}).strict();

export const ShiftTaskCreateManyShiftInputEnvelopeSchema: z.ZodType<Prisma.ShiftTaskCreateManyShiftInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ShiftTaskCreateManyShiftInputSchema),z.lazy(() => ShiftTaskCreateManyShiftInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UserUpsertWithoutShiftsInputSchema: z.ZodType<Prisma.UserUpsertWithoutShiftsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutShiftsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutShiftsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutShiftsInputSchema),z.lazy(() => UserUncheckedCreateWithoutShiftsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutShiftsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutShiftsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutShiftsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutShiftsInputSchema) ]),
}).strict();

export const UserUpdateWithoutShiftsInputSchema: z.ZodType<Prisma.UserUpdateWithoutShiftsInput> = z.object({
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sub: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passwordHash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  verified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneWithoutUsersNestedInputSchema).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneWithoutUsersNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionUpdateManyWithoutApprovedByNestedInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountUpdateManyWithoutCreatedByNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutShiftsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutShiftsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sub: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passwordHash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  verified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemUncheckedUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutApprovedByNestedInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional()
}).strict();

export const ShiftTaskUpsertWithWhereUniqueWithoutShiftInputSchema: z.ZodType<Prisma.ShiftTaskUpsertWithWhereUniqueWithoutShiftInput> = z.object({
  where: z.lazy(() => ShiftTaskWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ShiftTaskUpdateWithoutShiftInputSchema),z.lazy(() => ShiftTaskUncheckedUpdateWithoutShiftInputSchema) ]),
  create: z.union([ z.lazy(() => ShiftTaskCreateWithoutShiftInputSchema),z.lazy(() => ShiftTaskUncheckedCreateWithoutShiftInputSchema) ]),
}).strict();

export const ShiftTaskUpdateWithWhereUniqueWithoutShiftInputSchema: z.ZodType<Prisma.ShiftTaskUpdateWithWhereUniqueWithoutShiftInput> = z.object({
  where: z.lazy(() => ShiftTaskWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ShiftTaskUpdateWithoutShiftInputSchema),z.lazy(() => ShiftTaskUncheckedUpdateWithoutShiftInputSchema) ]),
}).strict();

export const ShiftTaskUpdateManyWithWhereWithoutShiftInputSchema: z.ZodType<Prisma.ShiftTaskUpdateManyWithWhereWithoutShiftInput> = z.object({
  where: z.lazy(() => ShiftTaskScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ShiftTaskUpdateManyMutationInputSchema),z.lazy(() => ShiftTaskUncheckedUpdateManyWithoutShiftInputSchema) ]),
}).strict();

export const ShiftTaskScalarWhereInputSchema: z.ZodType<Prisma.ShiftTaskScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ShiftTaskScalarWhereInputSchema),z.lazy(() => ShiftTaskScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ShiftTaskScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ShiftTaskScalarWhereInputSchema),z.lazy(() => ShiftTaskScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  shiftId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  taskType: z.union([ z.lazy(() => EnumTaskTypeFilterSchema),z.lazy(() => TaskTypeSchema) ]).optional(),
  startTime: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  endTime: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  duration: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  notes: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const RecipeCreateWithoutPrepBoardsInputSchema: z.ZodType<Prisma.RecipeCreateWithoutPrepBoardsInput> = z.object({
  name: z.string(),
  imageUrls: z.union([ z.lazy(() => RecipeCreateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.string().optional().nullable(),
  servings: z.number().int(),
  cookTime: z.number().int(),
  prepTime: z.number().int(),
  frequency: z.number().int().optional().nullable(),
  foodCost: z.number().optional().nullable(),
  isDeleted: z.boolean().optional(),
  isPublished: z.boolean().optional(),
  publishedAt: z.coerce.date().optional().nullable(),
  language: z.string().optional(),
  skillLevel: z.lazy(() => SkillLevelSchema).optional(),
  category: z.lazy(() => CategorySchema).optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutRecipesInputSchema),
  cookBook: z.lazy(() => CookBookCreateNestedOneWithoutRecipesInputSchema),
  ingredients: z.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeCreateNestedManyWithoutRecipeInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z.lazy(() => RecipeTagCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionCreateNestedManyWithoutRecipesInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureCreateNestedManyWithoutRecipeInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldCreateNestedManyWithoutRecipeInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostCreateNestedManyWithoutRecipeInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionCreateNestedOneWithoutRecipeInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointCreateNestedManyWithoutRecipeInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageCreateNestedOneWithoutRecipeInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoCreateNestedManyWithoutRecipeInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsCreateNestedOneWithoutRecipeInputSchema).optional()
}).strict();

export const RecipeUncheckedCreateWithoutPrepBoardsInputSchema: z.ZodType<Prisma.RecipeUncheckedCreateWithoutPrepBoardsInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  imageUrls: z.union([ z.lazy(() => RecipeCreateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.string().optional().nullable(),
  servings: z.number().int(),
  cookTime: z.number().int(),
  prepTime: z.number().int(),
  frequency: z.number().int().optional().nullable(),
  restaurantId: z.number().int(),
  cookBookId: z.number().int(),
  foodCost: z.number().optional().nullable(),
  isDeleted: z.boolean().optional(),
  isPublished: z.boolean().optional(),
  publishedAt: z.coerce.date().optional().nullable(),
  language: z.string().optional(),
  skillLevel: z.lazy(() => SkillLevelSchema).optional(),
  category: z.lazy(() => CategorySchema).optional(),
  ingredients: z.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUncheckedCreateNestedOneWithoutRecipeInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUncheckedCreateNestedOneWithoutRecipeInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUncheckedCreateNestedOneWithoutRecipeInputSchema).optional()
}).strict();

export const RecipeCreateOrConnectWithoutPrepBoardsInputSchema: z.ZodType<Prisma.RecipeCreateOrConnectWithoutPrepBoardsInput> = z.object({
  where: z.lazy(() => RecipeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RecipeCreateWithoutPrepBoardsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutPrepBoardsInputSchema) ]),
}).strict();

export const PrepItemCreateWithoutPrepBoardInputSchema: z.ZodType<Prisma.PrepItemCreateWithoutPrepBoardInput> = z.object({
  quantity: z.number().int(),
  status: z.lazy(() => PrepStatusSchema),
  recipe: z.lazy(() => RecipeCreateNestedOneWithoutPrepItemsInputSchema),
  assignedTo: z.lazy(() => UserCreateNestedOneWithoutPrepItemsInputSchema)
}).strict();

export const PrepItemUncheckedCreateWithoutPrepBoardInputSchema: z.ZodType<Prisma.PrepItemUncheckedCreateWithoutPrepBoardInput> = z.object({
  id: z.number().int().optional(),
  recipeId: z.number().int(),
  quantity: z.number().int(),
  status: z.lazy(() => PrepStatusSchema),
  assignedToId: z.number().int()
}).strict();

export const PrepItemCreateOrConnectWithoutPrepBoardInputSchema: z.ZodType<Prisma.PrepItemCreateOrConnectWithoutPrepBoardInput> = z.object({
  where: z.lazy(() => PrepItemWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PrepItemCreateWithoutPrepBoardInputSchema),z.lazy(() => PrepItemUncheckedCreateWithoutPrepBoardInputSchema) ]),
}).strict();

export const PrepItemCreateManyPrepBoardInputEnvelopeSchema: z.ZodType<Prisma.PrepItemCreateManyPrepBoardInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => PrepItemCreateManyPrepBoardInputSchema),z.lazy(() => PrepItemCreateManyPrepBoardInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const RecipeUpsertWithWhereUniqueWithoutPrepBoardsInputSchema: z.ZodType<Prisma.RecipeUpsertWithWhereUniqueWithoutPrepBoardsInput> = z.object({
  where: z.lazy(() => RecipeWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => RecipeUpdateWithoutPrepBoardsInputSchema),z.lazy(() => RecipeUncheckedUpdateWithoutPrepBoardsInputSchema) ]),
  create: z.union([ z.lazy(() => RecipeCreateWithoutPrepBoardsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutPrepBoardsInputSchema) ]),
}).strict();

export const RecipeUpdateWithWhereUniqueWithoutPrepBoardsInputSchema: z.ZodType<Prisma.RecipeUpdateWithWhereUniqueWithoutPrepBoardsInput> = z.object({
  where: z.lazy(() => RecipeWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => RecipeUpdateWithoutPrepBoardsInputSchema),z.lazy(() => RecipeUncheckedUpdateWithoutPrepBoardsInputSchema) ]),
}).strict();

export const RecipeUpdateManyWithWhereWithoutPrepBoardsInputSchema: z.ZodType<Prisma.RecipeUpdateManyWithWhereWithoutPrepBoardsInput> = z.object({
  where: z.lazy(() => RecipeScalarWhereInputSchema),
  data: z.union([ z.lazy(() => RecipeUpdateManyMutationInputSchema),z.lazy(() => RecipeUncheckedUpdateManyWithoutPrepBoardsInputSchema) ]),
}).strict();

export const PrepItemUpsertWithWhereUniqueWithoutPrepBoardInputSchema: z.ZodType<Prisma.PrepItemUpsertWithWhereUniqueWithoutPrepBoardInput> = z.object({
  where: z.lazy(() => PrepItemWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => PrepItemUpdateWithoutPrepBoardInputSchema),z.lazy(() => PrepItemUncheckedUpdateWithoutPrepBoardInputSchema) ]),
  create: z.union([ z.lazy(() => PrepItemCreateWithoutPrepBoardInputSchema),z.lazy(() => PrepItemUncheckedCreateWithoutPrepBoardInputSchema) ]),
}).strict();

export const PrepItemUpdateWithWhereUniqueWithoutPrepBoardInputSchema: z.ZodType<Prisma.PrepItemUpdateWithWhereUniqueWithoutPrepBoardInput> = z.object({
  where: z.lazy(() => PrepItemWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => PrepItemUpdateWithoutPrepBoardInputSchema),z.lazy(() => PrepItemUncheckedUpdateWithoutPrepBoardInputSchema) ]),
}).strict();

export const PrepItemUpdateManyWithWhereWithoutPrepBoardInputSchema: z.ZodType<Prisma.PrepItemUpdateManyWithWhereWithoutPrepBoardInput> = z.object({
  where: z.lazy(() => PrepItemScalarWhereInputSchema),
  data: z.union([ z.lazy(() => PrepItemUpdateManyMutationInputSchema),z.lazy(() => PrepItemUncheckedUpdateManyWithoutPrepBoardInputSchema) ]),
}).strict();

export const PrepBoardCreateWithoutPrepItemsInputSchema: z.ZodType<Prisma.PrepBoardCreateWithoutPrepItemsInput> = z.object({
  name: z.string(),
  status: z.lazy(() => PrepStatusSchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  recipes: z.lazy(() => RecipeCreateNestedManyWithoutPrepBoardsInputSchema).optional()
}).strict();

export const PrepBoardUncheckedCreateWithoutPrepItemsInputSchema: z.ZodType<Prisma.PrepBoardUncheckedCreateWithoutPrepItemsInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  status: z.lazy(() => PrepStatusSchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  recipes: z.lazy(() => RecipeUncheckedCreateNestedManyWithoutPrepBoardsInputSchema).optional()
}).strict();

export const PrepBoardCreateOrConnectWithoutPrepItemsInputSchema: z.ZodType<Prisma.PrepBoardCreateOrConnectWithoutPrepItemsInput> = z.object({
  where: z.lazy(() => PrepBoardWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PrepBoardCreateWithoutPrepItemsInputSchema),z.lazy(() => PrepBoardUncheckedCreateWithoutPrepItemsInputSchema) ]),
}).strict();

export const RecipeCreateWithoutPrepItemsInputSchema: z.ZodType<Prisma.RecipeCreateWithoutPrepItemsInput> = z.object({
  name: z.string(),
  imageUrls: z.union([ z.lazy(() => RecipeCreateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.string().optional().nullable(),
  servings: z.number().int(),
  cookTime: z.number().int(),
  prepTime: z.number().int(),
  frequency: z.number().int().optional().nullable(),
  foodCost: z.number().optional().nullable(),
  isDeleted: z.boolean().optional(),
  isPublished: z.boolean().optional(),
  publishedAt: z.coerce.date().optional().nullable(),
  language: z.string().optional(),
  skillLevel: z.lazy(() => SkillLevelSchema).optional(),
  category: z.lazy(() => CategorySchema).optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutRecipesInputSchema),
  cookBook: z.lazy(() => CookBookCreateNestedOneWithoutRecipesInputSchema),
  ingredients: z.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardCreateNestedManyWithoutRecipesInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeCreateNestedManyWithoutRecipeInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z.lazy(() => RecipeTagCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionCreateNestedManyWithoutRecipesInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureCreateNestedManyWithoutRecipeInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldCreateNestedManyWithoutRecipeInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostCreateNestedManyWithoutRecipeInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionCreateNestedOneWithoutRecipeInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointCreateNestedManyWithoutRecipeInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageCreateNestedOneWithoutRecipeInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoCreateNestedManyWithoutRecipeInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsCreateNestedOneWithoutRecipeInputSchema).optional()
}).strict();

export const RecipeUncheckedCreateWithoutPrepItemsInputSchema: z.ZodType<Prisma.RecipeUncheckedCreateWithoutPrepItemsInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  imageUrls: z.union([ z.lazy(() => RecipeCreateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.string().optional().nullable(),
  servings: z.number().int(),
  cookTime: z.number().int(),
  prepTime: z.number().int(),
  frequency: z.number().int().optional().nullable(),
  restaurantId: z.number().int(),
  cookBookId: z.number().int(),
  foodCost: z.number().optional().nullable(),
  isDeleted: z.boolean().optional(),
  isPublished: z.boolean().optional(),
  publishedAt: z.coerce.date().optional().nullable(),
  language: z.string().optional(),
  skillLevel: z.lazy(() => SkillLevelSchema).optional(),
  category: z.lazy(() => CategorySchema).optional(),
  ingredients: z.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUncheckedCreateNestedOneWithoutRecipeInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUncheckedCreateNestedOneWithoutRecipeInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUncheckedCreateNestedOneWithoutRecipeInputSchema).optional()
}).strict();

export const RecipeCreateOrConnectWithoutPrepItemsInputSchema: z.ZodType<Prisma.RecipeCreateOrConnectWithoutPrepItemsInput> = z.object({
  where: z.lazy(() => RecipeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RecipeCreateWithoutPrepItemsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutPrepItemsInputSchema) ]),
}).strict();

export const UserCreateWithoutPrepItemsInputSchema: z.ZodType<Prisma.UserCreateWithoutPrepItemsInput> = z.object({
  email: z.string(),
  sub: z.number().int().optional().nullable(),
  passwordHash: z.string(),
  firstName: z.string(),
  lastName: z.string(),
  profileImage: z.string().optional().nullable(),
  verified: z.boolean().optional(),
  role: z.lazy(() => UserRoleSchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema).optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutUsersInputSchema).optional(),
  shifts: z.lazy(() => ShiftCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z.lazy(() => AvailabilityCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionCreateNestedManyWithoutApprovedByInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountCreateNestedManyWithoutCreatedByInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutPrepItemsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutPrepItemsInput> = z.object({
  id: z.number().int().optional(),
  email: z.string(),
  sub: z.number().int().optional().nullable(),
  passwordHash: z.string(),
  firstName: z.string(),
  lastName: z.string(),
  profileImage: z.string().optional().nullable(),
  verified: z.boolean().optional(),
  role: z.lazy(() => UserRoleSchema),
  organizationId: z.number().int().optional().nullable(),
  restaurantId: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  shifts: z.lazy(() => ShiftUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteUncheckedCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutApprovedByInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutPrepItemsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutPrepItemsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutPrepItemsInputSchema),z.lazy(() => UserUncheckedCreateWithoutPrepItemsInputSchema) ]),
}).strict();

export const PrepBoardUpsertWithoutPrepItemsInputSchema: z.ZodType<Prisma.PrepBoardUpsertWithoutPrepItemsInput> = z.object({
  update: z.union([ z.lazy(() => PrepBoardUpdateWithoutPrepItemsInputSchema),z.lazy(() => PrepBoardUncheckedUpdateWithoutPrepItemsInputSchema) ]),
  create: z.union([ z.lazy(() => PrepBoardCreateWithoutPrepItemsInputSchema),z.lazy(() => PrepBoardUncheckedCreateWithoutPrepItemsInputSchema) ]),
  where: z.lazy(() => PrepBoardWhereInputSchema).optional()
}).strict();

export const PrepBoardUpdateToOneWithWhereWithoutPrepItemsInputSchema: z.ZodType<Prisma.PrepBoardUpdateToOneWithWhereWithoutPrepItemsInput> = z.object({
  where: z.lazy(() => PrepBoardWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => PrepBoardUpdateWithoutPrepItemsInputSchema),z.lazy(() => PrepBoardUncheckedUpdateWithoutPrepItemsInputSchema) ]),
}).strict();

export const PrepBoardUpdateWithoutPrepItemsInputSchema: z.ZodType<Prisma.PrepBoardUpdateWithoutPrepItemsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => PrepStatusSchema),z.lazy(() => EnumPrepStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  recipes: z.lazy(() => RecipeUpdateManyWithoutPrepBoardsNestedInputSchema).optional()
}).strict();

export const PrepBoardUncheckedUpdateWithoutPrepItemsInputSchema: z.ZodType<Prisma.PrepBoardUncheckedUpdateWithoutPrepItemsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => PrepStatusSchema),z.lazy(() => EnumPrepStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  recipes: z.lazy(() => RecipeUncheckedUpdateManyWithoutPrepBoardsNestedInputSchema).optional()
}).strict();

export const RecipeUpsertWithoutPrepItemsInputSchema: z.ZodType<Prisma.RecipeUpsertWithoutPrepItemsInput> = z.object({
  update: z.union([ z.lazy(() => RecipeUpdateWithoutPrepItemsInputSchema),z.lazy(() => RecipeUncheckedUpdateWithoutPrepItemsInputSchema) ]),
  create: z.union([ z.lazy(() => RecipeCreateWithoutPrepItemsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutPrepItemsInputSchema) ]),
  where: z.lazy(() => RecipeWhereInputSchema).optional()
}).strict();

export const RecipeUpdateToOneWithWhereWithoutPrepItemsInputSchema: z.ZodType<Prisma.RecipeUpdateToOneWithWhereWithoutPrepItemsInput> = z.object({
  where: z.lazy(() => RecipeWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RecipeUpdateWithoutPrepItemsInputSchema),z.lazy(() => RecipeUncheckedUpdateWithoutPrepItemsInputSchema) ]),
}).strict();

export const RecipeUpdateWithoutPrepItemsInputSchema: z.ZodType<Prisma.RecipeUpdateWithoutPrepItemsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrls: z.union([ z.lazy(() => RecipeUpdateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  servings: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isPublished: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  publishedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  skillLevel: z.union([ z.lazy(() => SkillLevelSchema),z.lazy(() => EnumSkillLevelFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => CategorySchema),z.lazy(() => EnumCategoryFieldUpdateOperationsInputSchema) ]).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  cookBook: z.lazy(() => CookBookUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  ingredients: z.lazy(() => RecipeIngredientUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUpdateManyWithoutRecipesNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUpdateManyWithoutRecipeNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUpdateManyWithoutRecipesNestedInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUpdateManyWithoutRecipeNestedInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUpdateManyWithoutRecipeNestedInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUpdateManyWithoutRecipeNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUpdateOneWithoutRecipeNestedInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUpdateManyWithoutRecipeNestedInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUpdateOneWithoutRecipeNestedInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUpdateManyWithoutRecipeNestedInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUpdateOneWithoutRecipeNestedInputSchema).optional()
}).strict();

export const RecipeUncheckedUpdateWithoutPrepItemsInputSchema: z.ZodType<Prisma.RecipeUncheckedUpdateWithoutPrepItemsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrls: z.union([ z.lazy(() => RecipeUpdateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  servings: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookBookId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isPublished: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  publishedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  skillLevel: z.union([ z.lazy(() => SkillLevelSchema),z.lazy(() => EnumSkillLevelFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => CategorySchema),z.lazy(() => EnumCategoryFieldUpdateOperationsInputSchema) ]).optional(),
  ingredients: z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutPrepItemsInputSchema: z.ZodType<Prisma.UserUpsertWithoutPrepItemsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutPrepItemsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutPrepItemsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutPrepItemsInputSchema),z.lazy(() => UserUncheckedCreateWithoutPrepItemsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutPrepItemsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutPrepItemsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutPrepItemsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutPrepItemsInputSchema) ]),
}).strict();

export const UserUpdateWithoutPrepItemsInputSchema: z.ZodType<Prisma.UserUpdateWithoutPrepItemsInput> = z.object({
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sub: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passwordHash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  verified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneWithoutUsersNestedInputSchema).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneWithoutUsersNestedInputSchema).optional(),
  shifts: z.lazy(() => ShiftUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionUpdateManyWithoutApprovedByNestedInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountUpdateManyWithoutCreatedByNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutPrepItemsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutPrepItemsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sub: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passwordHash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  verified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  shifts: z.lazy(() => ShiftUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemUncheckedUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutApprovedByNestedInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional()
}).strict();

export const UserCreateWithoutPasswordResetsInputSchema: z.ZodType<Prisma.UserCreateWithoutPasswordResetsInput> = z.object({
  email: z.string(),
  sub: z.number().int().optional().nullable(),
  passwordHash: z.string(),
  firstName: z.string(),
  lastName: z.string(),
  profileImage: z.string().optional().nullable(),
  verified: z.boolean().optional(),
  role: z.lazy(() => UserRoleSchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema).optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutUsersInputSchema).optional(),
  shifts: z.lazy(() => ShiftCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z.lazy(() => AvailabilityCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionCreateNestedManyWithoutApprovedByInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountCreateNestedManyWithoutCreatedByInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutPasswordResetsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutPasswordResetsInput> = z.object({
  id: z.number().int().optional(),
  email: z.string(),
  sub: z.number().int().optional().nullable(),
  passwordHash: z.string(),
  firstName: z.string(),
  lastName: z.string(),
  profileImage: z.string().optional().nullable(),
  verified: z.boolean().optional(),
  role: z.lazy(() => UserRoleSchema),
  organizationId: z.number().int().optional().nullable(),
  restaurantId: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  shifts: z.lazy(() => ShiftUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteUncheckedCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutApprovedByInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutPasswordResetsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutPasswordResetsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutPasswordResetsInputSchema),z.lazy(() => UserUncheckedCreateWithoutPasswordResetsInputSchema) ]),
}).strict();

export const UserUpsertWithoutPasswordResetsInputSchema: z.ZodType<Prisma.UserUpsertWithoutPasswordResetsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutPasswordResetsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutPasswordResetsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutPasswordResetsInputSchema),z.lazy(() => UserUncheckedCreateWithoutPasswordResetsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutPasswordResetsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutPasswordResetsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutPasswordResetsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutPasswordResetsInputSchema) ]),
}).strict();

export const UserUpdateWithoutPasswordResetsInputSchema: z.ZodType<Prisma.UserUpdateWithoutPasswordResetsInput> = z.object({
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sub: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passwordHash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  verified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneWithoutUsersNestedInputSchema).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneWithoutUsersNestedInputSchema).optional(),
  shifts: z.lazy(() => ShiftUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionUpdateManyWithoutApprovedByNestedInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountUpdateManyWithoutCreatedByNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutPasswordResetsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutPasswordResetsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sub: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passwordHash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  verified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  shifts: z.lazy(() => ShiftUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemUncheckedUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutApprovedByNestedInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional()
}).strict();

export const RestaurantCreateWithoutMenusInputSchema: z.ZodType<Prisma.RestaurantCreateWithoutMenusInput> = z.object({
  name: z.string(),
  imageUrl: z.string().optional().nullable(),
  address: z.string(),
  city: z.string(),
  zipCode: z.string(),
  state: z.string(),
  owner: z.string(),
  foodCost: z.number().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  isDeleted: z.boolean().optional(),
  deleted: z.coerce.date().optional().nullable(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutRestaurantsInputSchema).optional(),
  users: z.lazy(() => UserCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: z.lazy(() => CookBookCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: z.lazy(() => InventoryCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: z.lazy(() => OrderCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: z.lazy(() => RecipeCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipments: z.lazy(() => EquipmentCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklists: z.lazy(() => QualityChecklistCreateNestedManyWithoutRestaurantInputSchema).optional(),
  customerFeedbacks: z.lazy(() => CustomerFeedbackCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();

export const RestaurantUncheckedCreateWithoutMenusInputSchema: z.ZodType<Prisma.RestaurantUncheckedCreateWithoutMenusInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  imageUrl: z.string().optional().nullable(),
  address: z.string(),
  city: z.string(),
  zipCode: z.string(),
  state: z.string(),
  owner: z.string(),
  organizationId: z.number().int().optional().nullable(),
  foodCost: z.number().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  isDeleted: z.boolean().optional(),
  deleted: z.coerce.date().optional().nullable(),
  users: z.lazy(() => UserUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: z.lazy(() => CookBookUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: z.lazy(() => InventoryUncheckedCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: z.lazy(() => OrderUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: z.lazy(() => RecipeUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipments: z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklists: z.lazy(() => QualityChecklistUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  customerFeedbacks: z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();

export const RestaurantCreateOrConnectWithoutMenusInputSchema: z.ZodType<Prisma.RestaurantCreateOrConnectWithoutMenusInput> = z.object({
  where: z.lazy(() => RestaurantWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RestaurantCreateWithoutMenusInputSchema),z.lazy(() => RestaurantUncheckedCreateWithoutMenusInputSchema) ]),
}).strict();

export const MenuItemCreateWithoutMenuInputSchema: z.ZodType<Prisma.MenuItemCreateWithoutMenuInput> = z.object({
  name: z.string(),
  description: z.string().optional().nullable(),
  price: z.number(),
  foodCost: z.number(),
  isActive: z.boolean().optional(),
  recipeIds: z.union([ z.lazy(() => MenuItemCreaterecipeIdsInputSchema),z.number().int().array() ]).optional(),
  recipeServingsAmount: z.union([ z.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema),z.number().array() ]).optional(),
  recipeServingsCost: z.union([ z.lazy(() => MenuItemCreaterecipeServingsCostInputSchema),z.number().array() ]).optional(),
  allergens: z.union([ z.lazy(() => MenuItemCreateallergensInputSchema),z.string().array() ]).optional(),
  category: z.lazy(() => MenuCategoryCreateNestedOneWithoutMenuItemsInputSchema).optional(),
  recipes: z.lazy(() => RecipeCreateNestedManyWithoutMenuItemsInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeCreateNestedManyWithoutMenuItemInputSchema).optional(),
  nutritionalInfo: z.lazy(() => NutritionalInfoCreateNestedOneWithoutMenuItemInputSchema).optional(),
  recommendations: z.lazy(() => NutritionalRecommendationCreateNestedManyWithoutMenuItemInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsCreateNestedManyWithoutMenuItemInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemCreateNestedManyWithoutMenuItemInputSchema).optional(),
  feedback: z.lazy(() => CustomerFeedbackCreateNestedManyWithoutMenuItemInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionCreateNestedManyWithoutMenuItemsInputSchema).optional()
}).strict();

export const MenuItemUncheckedCreateWithoutMenuInputSchema: z.ZodType<Prisma.MenuItemUncheckedCreateWithoutMenuInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  price: z.number(),
  foodCost: z.number(),
  isActive: z.boolean().optional(),
  recipeIds: z.union([ z.lazy(() => MenuItemCreaterecipeIdsInputSchema),z.number().int().array() ]).optional(),
  recipeServingsAmount: z.union([ z.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema),z.number().array() ]).optional(),
  recipeServingsCost: z.union([ z.lazy(() => MenuItemCreaterecipeServingsCostInputSchema),z.number().array() ]).optional(),
  allergens: z.union([ z.lazy(() => MenuItemCreateallergensInputSchema),z.string().array() ]).optional(),
  categoryId: z.number().int().optional().nullable(),
  recipes: z.lazy(() => RecipeUncheckedCreateNestedManyWithoutMenuItemsInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  nutritionalInfo: z.lazy(() => NutritionalInfoUncheckedCreateNestedOneWithoutMenuItemInputSchema).optional(),
  recommendations: z.lazy(() => NutritionalRecommendationUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  feedback: z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutMenuItemsInputSchema).optional()
}).strict();

export const MenuItemCreateOrConnectWithoutMenuInputSchema: z.ZodType<Prisma.MenuItemCreateOrConnectWithoutMenuInput> = z.object({
  where: z.lazy(() => MenuItemWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => MenuItemCreateWithoutMenuInputSchema),z.lazy(() => MenuItemUncheckedCreateWithoutMenuInputSchema) ]),
}).strict();

export const MenuItemCreateManyMenuInputEnvelopeSchema: z.ZodType<Prisma.MenuItemCreateManyMenuInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => MenuItemCreateManyMenuInputSchema),z.lazy(() => MenuItemCreateManyMenuInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const MenuCategoryCreateWithoutMenuInputSchema: z.ZodType<Prisma.MenuCategoryCreateWithoutMenuInput> = z.object({
  name: z.string(),
  description: z.string().optional().nullable(),
  displayOrder: z.number().int(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  menuItems: z.lazy(() => MenuItemCreateNestedManyWithoutCategoryInputSchema).optional()
}).strict();

export const MenuCategoryUncheckedCreateWithoutMenuInputSchema: z.ZodType<Prisma.MenuCategoryUncheckedCreateWithoutMenuInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  displayOrder: z.number().int(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  menuItems: z.lazy(() => MenuItemUncheckedCreateNestedManyWithoutCategoryInputSchema).optional()
}).strict();

export const MenuCategoryCreateOrConnectWithoutMenuInputSchema: z.ZodType<Prisma.MenuCategoryCreateOrConnectWithoutMenuInput> = z.object({
  where: z.lazy(() => MenuCategoryWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => MenuCategoryCreateWithoutMenuInputSchema),z.lazy(() => MenuCategoryUncheckedCreateWithoutMenuInputSchema) ]),
}).strict();

export const MenuCategoryCreateManyMenuInputEnvelopeSchema: z.ZodType<Prisma.MenuCategoryCreateManyMenuInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => MenuCategoryCreateManyMenuInputSchema),z.lazy(() => MenuCategoryCreateManyMenuInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const RestaurantUpsertWithoutMenusInputSchema: z.ZodType<Prisma.RestaurantUpsertWithoutMenusInput> = z.object({
  update: z.union([ z.lazy(() => RestaurantUpdateWithoutMenusInputSchema),z.lazy(() => RestaurantUncheckedUpdateWithoutMenusInputSchema) ]),
  create: z.union([ z.lazy(() => RestaurantCreateWithoutMenusInputSchema),z.lazy(() => RestaurantUncheckedCreateWithoutMenusInputSchema) ]),
  where: z.lazy(() => RestaurantWhereInputSchema).optional()
}).strict();

export const RestaurantUpdateToOneWithWhereWithoutMenusInputSchema: z.ZodType<Prisma.RestaurantUpdateToOneWithWhereWithoutMenusInput> = z.object({
  where: z.lazy(() => RestaurantWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RestaurantUpdateWithoutMenusInputSchema),z.lazy(() => RestaurantUncheckedUpdateWithoutMenusInputSchema) ]),
}).strict();

export const RestaurantUpdateWithoutMenusInputSchema: z.ZodType<Prisma.RestaurantUpdateWithoutMenusInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zipCode: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  owner: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deleted: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  organization: z.lazy(() => OrganizationUpdateOneWithoutRestaurantsNestedInputSchema).optional(),
  users: z.lazy(() => UserUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: z.lazy(() => CookBookUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: z.lazy(() => InventoryUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: z.lazy(() => OrderUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: z.lazy(() => RecipeUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipments: z.lazy(() => EquipmentUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklists: z.lazy(() => QualityChecklistUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  customerFeedbacks: z.lazy(() => CustomerFeedbackUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();

export const RestaurantUncheckedUpdateWithoutMenusInputSchema: z.ZodType<Prisma.RestaurantUncheckedUpdateWithoutMenusInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zipCode: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  owner: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deleted: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: z.lazy(() => CookBookUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: z.lazy(() => InventoryUncheckedUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: z.lazy(() => OrderUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: z.lazy(() => RecipeUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipments: z.lazy(() => EquipmentUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklists: z.lazy(() => QualityChecklistUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  customerFeedbacks: z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();

export const MenuItemUpsertWithWhereUniqueWithoutMenuInputSchema: z.ZodType<Prisma.MenuItemUpsertWithWhereUniqueWithoutMenuInput> = z.object({
  where: z.lazy(() => MenuItemWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => MenuItemUpdateWithoutMenuInputSchema),z.lazy(() => MenuItemUncheckedUpdateWithoutMenuInputSchema) ]),
  create: z.union([ z.lazy(() => MenuItemCreateWithoutMenuInputSchema),z.lazy(() => MenuItemUncheckedCreateWithoutMenuInputSchema) ]),
}).strict();

export const MenuItemUpdateWithWhereUniqueWithoutMenuInputSchema: z.ZodType<Prisma.MenuItemUpdateWithWhereUniqueWithoutMenuInput> = z.object({
  where: z.lazy(() => MenuItemWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => MenuItemUpdateWithoutMenuInputSchema),z.lazy(() => MenuItemUncheckedUpdateWithoutMenuInputSchema) ]),
}).strict();

export const MenuItemUpdateManyWithWhereWithoutMenuInputSchema: z.ZodType<Prisma.MenuItemUpdateManyWithWhereWithoutMenuInput> = z.object({
  where: z.lazy(() => MenuItemScalarWhereInputSchema),
  data: z.union([ z.lazy(() => MenuItemUpdateManyMutationInputSchema),z.lazy(() => MenuItemUncheckedUpdateManyWithoutMenuInputSchema) ]),
}).strict();

export const MenuCategoryUpsertWithWhereUniqueWithoutMenuInputSchema: z.ZodType<Prisma.MenuCategoryUpsertWithWhereUniqueWithoutMenuInput> = z.object({
  where: z.lazy(() => MenuCategoryWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => MenuCategoryUpdateWithoutMenuInputSchema),z.lazy(() => MenuCategoryUncheckedUpdateWithoutMenuInputSchema) ]),
  create: z.union([ z.lazy(() => MenuCategoryCreateWithoutMenuInputSchema),z.lazy(() => MenuCategoryUncheckedCreateWithoutMenuInputSchema) ]),
}).strict();

export const MenuCategoryUpdateWithWhereUniqueWithoutMenuInputSchema: z.ZodType<Prisma.MenuCategoryUpdateWithWhereUniqueWithoutMenuInput> = z.object({
  where: z.lazy(() => MenuCategoryWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => MenuCategoryUpdateWithoutMenuInputSchema),z.lazy(() => MenuCategoryUncheckedUpdateWithoutMenuInputSchema) ]),
}).strict();

export const MenuCategoryUpdateManyWithWhereWithoutMenuInputSchema: z.ZodType<Prisma.MenuCategoryUpdateManyWithWhereWithoutMenuInput> = z.object({
  where: z.lazy(() => MenuCategoryScalarWhereInputSchema),
  data: z.union([ z.lazy(() => MenuCategoryUpdateManyMutationInputSchema),z.lazy(() => MenuCategoryUncheckedUpdateManyWithoutMenuInputSchema) ]),
}).strict();

export const MenuCategoryScalarWhereInputSchema: z.ZodType<Prisma.MenuCategoryScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => MenuCategoryScalarWhereInputSchema),z.lazy(() => MenuCategoryScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MenuCategoryScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MenuCategoryScalarWhereInputSchema),z.lazy(() => MenuCategoryScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  displayOrder: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  menuId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  isActive: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const MenuItemCreateWithoutMenuItemRecipesInputSchema: z.ZodType<Prisma.MenuItemCreateWithoutMenuItemRecipesInput> = z.object({
  name: z.string(),
  description: z.string().optional().nullable(),
  price: z.number(),
  foodCost: z.number(),
  isActive: z.boolean().optional(),
  recipeIds: z.union([ z.lazy(() => MenuItemCreaterecipeIdsInputSchema),z.number().int().array() ]).optional(),
  recipeServingsAmount: z.union([ z.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema),z.number().array() ]).optional(),
  recipeServingsCost: z.union([ z.lazy(() => MenuItemCreaterecipeServingsCostInputSchema),z.number().array() ]).optional(),
  allergens: z.union([ z.lazy(() => MenuItemCreateallergensInputSchema),z.string().array() ]).optional(),
  menu: z.lazy(() => MenuCreateNestedOneWithoutMenuItemsInputSchema),
  category: z.lazy(() => MenuCategoryCreateNestedOneWithoutMenuItemsInputSchema).optional(),
  recipes: z.lazy(() => RecipeCreateNestedManyWithoutMenuItemsInputSchema).optional(),
  nutritionalInfo: z.lazy(() => NutritionalInfoCreateNestedOneWithoutMenuItemInputSchema).optional(),
  recommendations: z.lazy(() => NutritionalRecommendationCreateNestedManyWithoutMenuItemInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsCreateNestedManyWithoutMenuItemInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemCreateNestedManyWithoutMenuItemInputSchema).optional(),
  feedback: z.lazy(() => CustomerFeedbackCreateNestedManyWithoutMenuItemInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionCreateNestedManyWithoutMenuItemsInputSchema).optional()
}).strict();

export const MenuItemUncheckedCreateWithoutMenuItemRecipesInputSchema: z.ZodType<Prisma.MenuItemUncheckedCreateWithoutMenuItemRecipesInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  price: z.number(),
  foodCost: z.number(),
  isActive: z.boolean().optional(),
  recipeIds: z.union([ z.lazy(() => MenuItemCreaterecipeIdsInputSchema),z.number().int().array() ]).optional(),
  recipeServingsAmount: z.union([ z.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema),z.number().array() ]).optional(),
  recipeServingsCost: z.union([ z.lazy(() => MenuItemCreaterecipeServingsCostInputSchema),z.number().array() ]).optional(),
  allergens: z.union([ z.lazy(() => MenuItemCreateallergensInputSchema),z.string().array() ]).optional(),
  menuId: z.number().int(),
  categoryId: z.number().int().optional().nullable(),
  recipes: z.lazy(() => RecipeUncheckedCreateNestedManyWithoutMenuItemsInputSchema).optional(),
  nutritionalInfo: z.lazy(() => NutritionalInfoUncheckedCreateNestedOneWithoutMenuItemInputSchema).optional(),
  recommendations: z.lazy(() => NutritionalRecommendationUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  feedback: z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutMenuItemsInputSchema).optional()
}).strict();

export const MenuItemCreateOrConnectWithoutMenuItemRecipesInputSchema: z.ZodType<Prisma.MenuItemCreateOrConnectWithoutMenuItemRecipesInput> = z.object({
  where: z.lazy(() => MenuItemWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => MenuItemCreateWithoutMenuItemRecipesInputSchema),z.lazy(() => MenuItemUncheckedCreateWithoutMenuItemRecipesInputSchema) ]),
}).strict();

export const RecipeCreateWithoutMenuItemRecipesInputSchema: z.ZodType<Prisma.RecipeCreateWithoutMenuItemRecipesInput> = z.object({
  name: z.string(),
  imageUrls: z.union([ z.lazy(() => RecipeCreateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.string().optional().nullable(),
  servings: z.number().int(),
  cookTime: z.number().int(),
  prepTime: z.number().int(),
  frequency: z.number().int().optional().nullable(),
  foodCost: z.number().optional().nullable(),
  isDeleted: z.boolean().optional(),
  isPublished: z.boolean().optional(),
  publishedAt: z.coerce.date().optional().nullable(),
  language: z.string().optional(),
  skillLevel: z.lazy(() => SkillLevelSchema).optional(),
  category: z.lazy(() => CategorySchema).optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutRecipesInputSchema),
  cookBook: z.lazy(() => CookBookCreateNestedOneWithoutRecipesInputSchema),
  ingredients: z.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z.lazy(() => RecipeTagCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionCreateNestedManyWithoutRecipesInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureCreateNestedManyWithoutRecipeInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldCreateNestedManyWithoutRecipeInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostCreateNestedManyWithoutRecipeInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionCreateNestedOneWithoutRecipeInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointCreateNestedManyWithoutRecipeInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageCreateNestedOneWithoutRecipeInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoCreateNestedManyWithoutRecipeInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsCreateNestedOneWithoutRecipeInputSchema).optional()
}).strict();

export const RecipeUncheckedCreateWithoutMenuItemRecipesInputSchema: z.ZodType<Prisma.RecipeUncheckedCreateWithoutMenuItemRecipesInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  imageUrls: z.union([ z.lazy(() => RecipeCreateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.string().optional().nullable(),
  servings: z.number().int(),
  cookTime: z.number().int(),
  prepTime: z.number().int(),
  frequency: z.number().int().optional().nullable(),
  restaurantId: z.number().int(),
  cookBookId: z.number().int(),
  foodCost: z.number().optional().nullable(),
  isDeleted: z.boolean().optional(),
  isPublished: z.boolean().optional(),
  publishedAt: z.coerce.date().optional().nullable(),
  language: z.string().optional(),
  skillLevel: z.lazy(() => SkillLevelSchema).optional(),
  category: z.lazy(() => CategorySchema).optional(),
  ingredients: z.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUncheckedCreateNestedOneWithoutRecipeInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUncheckedCreateNestedOneWithoutRecipeInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUncheckedCreateNestedOneWithoutRecipeInputSchema).optional()
}).strict();

export const RecipeCreateOrConnectWithoutMenuItemRecipesInputSchema: z.ZodType<Prisma.RecipeCreateOrConnectWithoutMenuItemRecipesInput> = z.object({
  where: z.lazy(() => RecipeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RecipeCreateWithoutMenuItemRecipesInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutMenuItemRecipesInputSchema) ]),
}).strict();

export const MenuItemUpsertWithoutMenuItemRecipesInputSchema: z.ZodType<Prisma.MenuItemUpsertWithoutMenuItemRecipesInput> = z.object({
  update: z.union([ z.lazy(() => MenuItemUpdateWithoutMenuItemRecipesInputSchema),z.lazy(() => MenuItemUncheckedUpdateWithoutMenuItemRecipesInputSchema) ]),
  create: z.union([ z.lazy(() => MenuItemCreateWithoutMenuItemRecipesInputSchema),z.lazy(() => MenuItemUncheckedCreateWithoutMenuItemRecipesInputSchema) ]),
  where: z.lazy(() => MenuItemWhereInputSchema).optional()
}).strict();

export const MenuItemUpdateToOneWithWhereWithoutMenuItemRecipesInputSchema: z.ZodType<Prisma.MenuItemUpdateToOneWithWhereWithoutMenuItemRecipesInput> = z.object({
  where: z.lazy(() => MenuItemWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => MenuItemUpdateWithoutMenuItemRecipesInputSchema),z.lazy(() => MenuItemUncheckedUpdateWithoutMenuItemRecipesInputSchema) ]),
}).strict();

export const MenuItemUpdateWithoutMenuItemRecipesInputSchema: z.ZodType<Prisma.MenuItemUpdateWithoutMenuItemRecipesInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  recipeIds: z.union([ z.lazy(() => MenuItemUpdaterecipeIdsInputSchema),z.number().int().array() ]).optional(),
  recipeServingsAmount: z.union([ z.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema),z.number().array() ]).optional(),
  recipeServingsCost: z.union([ z.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema),z.number().array() ]).optional(),
  allergens: z.union([ z.lazy(() => MenuItemUpdateallergensInputSchema),z.string().array() ]).optional(),
  menu: z.lazy(() => MenuUpdateOneRequiredWithoutMenuItemsNestedInputSchema).optional(),
  category: z.lazy(() => MenuCategoryUpdateOneWithoutMenuItemsNestedInputSchema).optional(),
  recipes: z.lazy(() => RecipeUpdateManyWithoutMenuItemsNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => NutritionalInfoUpdateOneWithoutMenuItemNestedInputSchema).optional(),
  recommendations: z.lazy(() => NutritionalRecommendationUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  feedback: z.lazy(() => CustomerFeedbackUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUpdateManyWithoutMenuItemsNestedInputSchema).optional()
}).strict();

export const MenuItemUncheckedUpdateWithoutMenuItemRecipesInputSchema: z.ZodType<Prisma.MenuItemUncheckedUpdateWithoutMenuItemRecipesInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  recipeIds: z.union([ z.lazy(() => MenuItemUpdaterecipeIdsInputSchema),z.number().int().array() ]).optional(),
  recipeServingsAmount: z.union([ z.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema),z.number().array() ]).optional(),
  recipeServingsCost: z.union([ z.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema),z.number().array() ]).optional(),
  allergens: z.union([ z.lazy(() => MenuItemUpdateallergensInputSchema),z.string().array() ]).optional(),
  menuId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  categoryId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recipes: z.lazy(() => RecipeUncheckedUpdateManyWithoutMenuItemsNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => NutritionalInfoUncheckedUpdateOneWithoutMenuItemNestedInputSchema).optional(),
  recommendations: z.lazy(() => NutritionalRecommendationUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  feedback: z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutMenuItemsNestedInputSchema).optional()
}).strict();

export const RecipeUpsertWithoutMenuItemRecipesInputSchema: z.ZodType<Prisma.RecipeUpsertWithoutMenuItemRecipesInput> = z.object({
  update: z.union([ z.lazy(() => RecipeUpdateWithoutMenuItemRecipesInputSchema),z.lazy(() => RecipeUncheckedUpdateWithoutMenuItemRecipesInputSchema) ]),
  create: z.union([ z.lazy(() => RecipeCreateWithoutMenuItemRecipesInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutMenuItemRecipesInputSchema) ]),
  where: z.lazy(() => RecipeWhereInputSchema).optional()
}).strict();

export const RecipeUpdateToOneWithWhereWithoutMenuItemRecipesInputSchema: z.ZodType<Prisma.RecipeUpdateToOneWithWhereWithoutMenuItemRecipesInput> = z.object({
  where: z.lazy(() => RecipeWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RecipeUpdateWithoutMenuItemRecipesInputSchema),z.lazy(() => RecipeUncheckedUpdateWithoutMenuItemRecipesInputSchema) ]),
}).strict();

export const RecipeUpdateWithoutMenuItemRecipesInputSchema: z.ZodType<Prisma.RecipeUpdateWithoutMenuItemRecipesInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrls: z.union([ z.lazy(() => RecipeUpdateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  servings: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isPublished: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  publishedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  skillLevel: z.union([ z.lazy(() => SkillLevelSchema),z.lazy(() => EnumSkillLevelFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => CategorySchema),z.lazy(() => EnumCategoryFieldUpdateOperationsInputSchema) ]).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  cookBook: z.lazy(() => CookBookUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  ingredients: z.lazy(() => RecipeIngredientUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUpdateManyWithoutRecipesNestedInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUpdateManyWithoutRecipeNestedInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUpdateManyWithoutRecipeNestedInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUpdateManyWithoutRecipeNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUpdateOneWithoutRecipeNestedInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUpdateManyWithoutRecipeNestedInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUpdateOneWithoutRecipeNestedInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUpdateManyWithoutRecipeNestedInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUpdateOneWithoutRecipeNestedInputSchema).optional()
}).strict();

export const RecipeUncheckedUpdateWithoutMenuItemRecipesInputSchema: z.ZodType<Prisma.RecipeUncheckedUpdateWithoutMenuItemRecipesInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrls: z.union([ z.lazy(() => RecipeUpdateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  servings: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookBookId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isPublished: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  publishedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  skillLevel: z.union([ z.lazy(() => SkillLevelSchema),z.lazy(() => EnumSkillLevelFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => CategorySchema),z.lazy(() => EnumCategoryFieldUpdateOperationsInputSchema) ]).optional(),
  ingredients: z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional()
}).strict();

export const MenuCreateWithoutMenuItemsInputSchema: z.ZodType<Prisma.MenuCreateWithoutMenuItemsInput> = z.object({
  name: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutMenusInputSchema),
  MenuCategory: z.lazy(() => MenuCategoryCreateNestedManyWithoutMenuInputSchema).optional()
}).strict();

export const MenuUncheckedCreateWithoutMenuItemsInputSchema: z.ZodType<Prisma.MenuUncheckedCreateWithoutMenuItemsInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  restaurantId: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  MenuCategory: z.lazy(() => MenuCategoryUncheckedCreateNestedManyWithoutMenuInputSchema).optional()
}).strict();

export const MenuCreateOrConnectWithoutMenuItemsInputSchema: z.ZodType<Prisma.MenuCreateOrConnectWithoutMenuItemsInput> = z.object({
  where: z.lazy(() => MenuWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => MenuCreateWithoutMenuItemsInputSchema),z.lazy(() => MenuUncheckedCreateWithoutMenuItemsInputSchema) ]),
}).strict();

export const MenuCategoryCreateWithoutMenuItemsInputSchema: z.ZodType<Prisma.MenuCategoryCreateWithoutMenuItemsInput> = z.object({
  name: z.string(),
  description: z.string().optional().nullable(),
  displayOrder: z.number().int(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  menu: z.lazy(() => MenuCreateNestedOneWithoutMenuCategoryInputSchema)
}).strict();

export const MenuCategoryUncheckedCreateWithoutMenuItemsInputSchema: z.ZodType<Prisma.MenuCategoryUncheckedCreateWithoutMenuItemsInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  displayOrder: z.number().int(),
  menuId: z.number().int(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const MenuCategoryCreateOrConnectWithoutMenuItemsInputSchema: z.ZodType<Prisma.MenuCategoryCreateOrConnectWithoutMenuItemsInput> = z.object({
  where: z.lazy(() => MenuCategoryWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => MenuCategoryCreateWithoutMenuItemsInputSchema),z.lazy(() => MenuCategoryUncheckedCreateWithoutMenuItemsInputSchema) ]),
}).strict();

export const RecipeCreateWithoutMenuItemsInputSchema: z.ZodType<Prisma.RecipeCreateWithoutMenuItemsInput> = z.object({
  name: z.string(),
  imageUrls: z.union([ z.lazy(() => RecipeCreateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.string().optional().nullable(),
  servings: z.number().int(),
  cookTime: z.number().int(),
  prepTime: z.number().int(),
  frequency: z.number().int().optional().nullable(),
  foodCost: z.number().optional().nullable(),
  isDeleted: z.boolean().optional(),
  isPublished: z.boolean().optional(),
  publishedAt: z.coerce.date().optional().nullable(),
  language: z.string().optional(),
  skillLevel: z.lazy(() => SkillLevelSchema).optional(),
  category: z.lazy(() => CategorySchema).optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutRecipesInputSchema),
  cookBook: z.lazy(() => CookBookCreateNestedOneWithoutRecipesInputSchema),
  ingredients: z.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeCreateNestedManyWithoutRecipeInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z.lazy(() => RecipeTagCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionCreateNestedManyWithoutRecipesInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureCreateNestedManyWithoutRecipeInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldCreateNestedManyWithoutRecipeInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostCreateNestedManyWithoutRecipeInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionCreateNestedOneWithoutRecipeInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointCreateNestedManyWithoutRecipeInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageCreateNestedOneWithoutRecipeInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoCreateNestedManyWithoutRecipeInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsCreateNestedOneWithoutRecipeInputSchema).optional()
}).strict();

export const RecipeUncheckedCreateWithoutMenuItemsInputSchema: z.ZodType<Prisma.RecipeUncheckedCreateWithoutMenuItemsInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  imageUrls: z.union([ z.lazy(() => RecipeCreateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.string().optional().nullable(),
  servings: z.number().int(),
  cookTime: z.number().int(),
  prepTime: z.number().int(),
  frequency: z.number().int().optional().nullable(),
  restaurantId: z.number().int(),
  cookBookId: z.number().int(),
  foodCost: z.number().optional().nullable(),
  isDeleted: z.boolean().optional(),
  isPublished: z.boolean().optional(),
  publishedAt: z.coerce.date().optional().nullable(),
  language: z.string().optional(),
  skillLevel: z.lazy(() => SkillLevelSchema).optional(),
  category: z.lazy(() => CategorySchema).optional(),
  ingredients: z.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUncheckedCreateNestedOneWithoutRecipeInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUncheckedCreateNestedOneWithoutRecipeInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUncheckedCreateNestedOneWithoutRecipeInputSchema).optional()
}).strict();

export const RecipeCreateOrConnectWithoutMenuItemsInputSchema: z.ZodType<Prisma.RecipeCreateOrConnectWithoutMenuItemsInput> = z.object({
  where: z.lazy(() => RecipeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RecipeCreateWithoutMenuItemsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutMenuItemsInputSchema) ]),
}).strict();

export const MenuItemRecipeCreateWithoutMenuItemInputSchema: z.ZodType<Prisma.MenuItemRecipeCreateWithoutMenuItemInput> = z.object({
  joinAt: z.coerce.date().optional(),
  recipe: z.lazy(() => RecipeCreateNestedOneWithoutMenuItemRecipesInputSchema)
}).strict();

export const MenuItemRecipeUncheckedCreateWithoutMenuItemInputSchema: z.ZodType<Prisma.MenuItemRecipeUncheckedCreateWithoutMenuItemInput> = z.object({
  id: z.number().int().optional(),
  recipeId: z.number().int(),
  joinAt: z.coerce.date().optional()
}).strict();

export const MenuItemRecipeCreateOrConnectWithoutMenuItemInputSchema: z.ZodType<Prisma.MenuItemRecipeCreateOrConnectWithoutMenuItemInput> = z.object({
  where: z.lazy(() => MenuItemRecipeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => MenuItemRecipeCreateWithoutMenuItemInputSchema),z.lazy(() => MenuItemRecipeUncheckedCreateWithoutMenuItemInputSchema) ]),
}).strict();

export const MenuItemRecipeCreateManyMenuItemInputEnvelopeSchema: z.ZodType<Prisma.MenuItemRecipeCreateManyMenuItemInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => MenuItemRecipeCreateManyMenuItemInputSchema),z.lazy(() => MenuItemRecipeCreateManyMenuItemInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const NutritionalInfoCreateWithoutMenuItemInputSchema: z.ZodType<Prisma.NutritionalInfoCreateWithoutMenuItemInput> = z.object({
  calories: z.number(),
  fat: z.number(),
  saturatedFat: z.number(),
  transFat: z.number(),
  cholesterol: z.number(),
  sodium: z.number(),
  carbohydrates: z.number(),
  fiber: z.number(),
  sugar: z.number(),
  protein: z.number(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const NutritionalInfoUncheckedCreateWithoutMenuItemInputSchema: z.ZodType<Prisma.NutritionalInfoUncheckedCreateWithoutMenuItemInput> = z.object({
  id: z.number().int().optional(),
  calories: z.number(),
  fat: z.number(),
  saturatedFat: z.number(),
  transFat: z.number(),
  cholesterol: z.number(),
  sodium: z.number(),
  carbohydrates: z.number(),
  fiber: z.number(),
  sugar: z.number(),
  protein: z.number(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const NutritionalInfoCreateOrConnectWithoutMenuItemInputSchema: z.ZodType<Prisma.NutritionalInfoCreateOrConnectWithoutMenuItemInput> = z.object({
  where: z.lazy(() => NutritionalInfoWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => NutritionalInfoCreateWithoutMenuItemInputSchema),z.lazy(() => NutritionalInfoUncheckedCreateWithoutMenuItemInputSchema) ]),
}).strict();

export const NutritionalRecommendationCreateWithoutMenuItemInputSchema: z.ZodType<Prisma.NutritionalRecommendationCreateWithoutMenuItemInput> = z.object({
  recommendation: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const NutritionalRecommendationUncheckedCreateWithoutMenuItemInputSchema: z.ZodType<Prisma.NutritionalRecommendationUncheckedCreateWithoutMenuItemInput> = z.object({
  id: z.number().int().optional(),
  recommendation: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const NutritionalRecommendationCreateOrConnectWithoutMenuItemInputSchema: z.ZodType<Prisma.NutritionalRecommendationCreateOrConnectWithoutMenuItemInput> = z.object({
  where: z.lazy(() => NutritionalRecommendationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => NutritionalRecommendationCreateWithoutMenuItemInputSchema),z.lazy(() => NutritionalRecommendationUncheckedCreateWithoutMenuItemInputSchema) ]),
}).strict();

export const NutritionalRecommendationCreateManyMenuItemInputEnvelopeSchema: z.ZodType<Prisma.NutritionalRecommendationCreateManyMenuItemInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => NutritionalRecommendationCreateManyMenuItemInputSchema),z.lazy(() => NutritionalRecommendationCreateManyMenuItemInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const SalesTransactionsCreateWithoutMenuItemInputSchema: z.ZodType<Prisma.SalesTransactionsCreateWithoutMenuItemInput> = z.object({
  posTransactionID: z.string().optional().nullable(),
  price: z.number(),
  total: z.number(),
  transactionDate: z.coerce.date(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutSalesTransactionsInputSchema)
}).strict();

export const SalesTransactionsUncheckedCreateWithoutMenuItemInputSchema: z.ZodType<Prisma.SalesTransactionsUncheckedCreateWithoutMenuItemInput> = z.object({
  id: z.number().int().optional(),
  posTransactionID: z.string().optional().nullable(),
  restaurantId: z.number().int(),
  price: z.number(),
  total: z.number(),
  transactionDate: z.coerce.date(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const SalesTransactionsCreateOrConnectWithoutMenuItemInputSchema: z.ZodType<Prisma.SalesTransactionsCreateOrConnectWithoutMenuItemInput> = z.object({
  where: z.lazy(() => SalesTransactionsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SalesTransactionsCreateWithoutMenuItemInputSchema),z.lazy(() => SalesTransactionsUncheckedCreateWithoutMenuItemInputSchema) ]),
}).strict();

export const SalesTransactionsCreateManyMenuItemInputEnvelopeSchema: z.ZodType<Prisma.SalesTransactionsCreateManyMenuItemInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => SalesTransactionsCreateManyMenuItemInputSchema),z.lazy(() => SalesTransactionsCreateManyMenuItemInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const LeftoverItemCreateWithoutMenuItemInputSchema: z.ZodType<Prisma.LeftoverItemCreateWithoutMenuItemInput> = z.object({
  date: z.coerce.date(),
  quantity: z.number().int(),
  reason: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutLeftoverItemsInputSchema),
  recordedBy: z.lazy(() => UserCreateNestedOneWithoutLeftoverItemsInputSchema)
}).strict();

export const LeftoverItemUncheckedCreateWithoutMenuItemInputSchema: z.ZodType<Prisma.LeftoverItemUncheckedCreateWithoutMenuItemInput> = z.object({
  id: z.number().int().optional(),
  restaurantId: z.number().int(),
  date: z.coerce.date(),
  quantity: z.number().int(),
  reason: z.string(),
  recordedById: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const LeftoverItemCreateOrConnectWithoutMenuItemInputSchema: z.ZodType<Prisma.LeftoverItemCreateOrConnectWithoutMenuItemInput> = z.object({
  where: z.lazy(() => LeftoverItemWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => LeftoverItemCreateWithoutMenuItemInputSchema),z.lazy(() => LeftoverItemUncheckedCreateWithoutMenuItemInputSchema) ]),
}).strict();

export const LeftoverItemCreateManyMenuItemInputEnvelopeSchema: z.ZodType<Prisma.LeftoverItemCreateManyMenuItemInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => LeftoverItemCreateManyMenuItemInputSchema),z.lazy(() => LeftoverItemCreateManyMenuItemInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const CustomerFeedbackCreateWithoutMenuItemInputSchema: z.ZodType<Prisma.CustomerFeedbackCreateWithoutMenuItemInput> = z.object({
  rating: z.number().int(),
  comment: z.string().optional().nullable(),
  source: z.lazy(() => FeedbackSourceSchema),
  tags: z.union([ z.lazy(() => CustomerFeedbackCreatetagsInputSchema),z.string().array() ]).optional(),
  status: z.lazy(() => FeedbackStatusSchema).optional(),
  responseText: z.string().optional().nullable(),
  respondedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutCustomerFeedbacksInputSchema),
  respondedBy: z.lazy(() => UserCreateNestedOneWithoutCustomerFeedbackResponsesInputSchema).optional()
}).strict();

export const CustomerFeedbackUncheckedCreateWithoutMenuItemInputSchema: z.ZodType<Prisma.CustomerFeedbackUncheckedCreateWithoutMenuItemInput> = z.object({
  id: z.number().int().optional(),
  restaurantId: z.number().int(),
  rating: z.number().int(),
  comment: z.string().optional().nullable(),
  source: z.lazy(() => FeedbackSourceSchema),
  tags: z.union([ z.lazy(() => CustomerFeedbackCreatetagsInputSchema),z.string().array() ]).optional(),
  status: z.lazy(() => FeedbackStatusSchema).optional(),
  responseText: z.string().optional().nullable(),
  respondedAt: z.coerce.date().optional().nullable(),
  respondedById: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CustomerFeedbackCreateOrConnectWithoutMenuItemInputSchema: z.ZodType<Prisma.CustomerFeedbackCreateOrConnectWithoutMenuItemInput> = z.object({
  where: z.lazy(() => CustomerFeedbackWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CustomerFeedbackCreateWithoutMenuItemInputSchema),z.lazy(() => CustomerFeedbackUncheckedCreateWithoutMenuItemInputSchema) ]),
}).strict();

export const CustomerFeedbackCreateManyMenuItemInputEnvelopeSchema: z.ZodType<Prisma.CustomerFeedbackCreateManyMenuItemInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => CustomerFeedbackCreateManyMenuItemInputSchema),z.lazy(() => CustomerFeedbackCreateManyMenuItemInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const DietaryRestrictionCreateWithoutMenuItemsInputSchema: z.ZodType<Prisma.DietaryRestrictionCreateWithoutMenuItemsInput> = z.object({
  name: z.string(),
  description: z.string().optional().nullable(),
  icon: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  recipes: z.lazy(() => RecipeCreateNestedManyWithoutDietaryRestrictionsInputSchema).optional(),
  ingredients: z.lazy(() => IngredientCreateNestedManyWithoutDietaryRestrictionsInputSchema).optional()
}).strict();

export const DietaryRestrictionUncheckedCreateWithoutMenuItemsInputSchema: z.ZodType<Prisma.DietaryRestrictionUncheckedCreateWithoutMenuItemsInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  icon: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  recipes: z.lazy(() => RecipeUncheckedCreateNestedManyWithoutDietaryRestrictionsInputSchema).optional(),
  ingredients: z.lazy(() => IngredientUncheckedCreateNestedManyWithoutDietaryRestrictionsInputSchema).optional()
}).strict();

export const DietaryRestrictionCreateOrConnectWithoutMenuItemsInputSchema: z.ZodType<Prisma.DietaryRestrictionCreateOrConnectWithoutMenuItemsInput> = z.object({
  where: z.lazy(() => DietaryRestrictionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => DietaryRestrictionCreateWithoutMenuItemsInputSchema),z.lazy(() => DietaryRestrictionUncheckedCreateWithoutMenuItemsInputSchema) ]),
}).strict();

export const MenuUpsertWithoutMenuItemsInputSchema: z.ZodType<Prisma.MenuUpsertWithoutMenuItemsInput> = z.object({
  update: z.union([ z.lazy(() => MenuUpdateWithoutMenuItemsInputSchema),z.lazy(() => MenuUncheckedUpdateWithoutMenuItemsInputSchema) ]),
  create: z.union([ z.lazy(() => MenuCreateWithoutMenuItemsInputSchema),z.lazy(() => MenuUncheckedCreateWithoutMenuItemsInputSchema) ]),
  where: z.lazy(() => MenuWhereInputSchema).optional()
}).strict();

export const MenuUpdateToOneWithWhereWithoutMenuItemsInputSchema: z.ZodType<Prisma.MenuUpdateToOneWithWhereWithoutMenuItemsInput> = z.object({
  where: z.lazy(() => MenuWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => MenuUpdateWithoutMenuItemsInputSchema),z.lazy(() => MenuUncheckedUpdateWithoutMenuItemsInputSchema) ]),
}).strict();

export const MenuUpdateWithoutMenuItemsInputSchema: z.ZodType<Prisma.MenuUpdateWithoutMenuItemsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneRequiredWithoutMenusNestedInputSchema).optional(),
  MenuCategory: z.lazy(() => MenuCategoryUpdateManyWithoutMenuNestedInputSchema).optional()
}).strict();

export const MenuUncheckedUpdateWithoutMenuItemsInputSchema: z.ZodType<Prisma.MenuUncheckedUpdateWithoutMenuItemsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  MenuCategory: z.lazy(() => MenuCategoryUncheckedUpdateManyWithoutMenuNestedInputSchema).optional()
}).strict();

export const MenuCategoryUpsertWithoutMenuItemsInputSchema: z.ZodType<Prisma.MenuCategoryUpsertWithoutMenuItemsInput> = z.object({
  update: z.union([ z.lazy(() => MenuCategoryUpdateWithoutMenuItemsInputSchema),z.lazy(() => MenuCategoryUncheckedUpdateWithoutMenuItemsInputSchema) ]),
  create: z.union([ z.lazy(() => MenuCategoryCreateWithoutMenuItemsInputSchema),z.lazy(() => MenuCategoryUncheckedCreateWithoutMenuItemsInputSchema) ]),
  where: z.lazy(() => MenuCategoryWhereInputSchema).optional()
}).strict();

export const MenuCategoryUpdateToOneWithWhereWithoutMenuItemsInputSchema: z.ZodType<Prisma.MenuCategoryUpdateToOneWithWhereWithoutMenuItemsInput> = z.object({
  where: z.lazy(() => MenuCategoryWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => MenuCategoryUpdateWithoutMenuItemsInputSchema),z.lazy(() => MenuCategoryUncheckedUpdateWithoutMenuItemsInputSchema) ]),
}).strict();

export const MenuCategoryUpdateWithoutMenuItemsInputSchema: z.ZodType<Prisma.MenuCategoryUpdateWithoutMenuItemsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  displayOrder: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  menu: z.lazy(() => MenuUpdateOneRequiredWithoutMenuCategoryNestedInputSchema).optional()
}).strict();

export const MenuCategoryUncheckedUpdateWithoutMenuItemsInputSchema: z.ZodType<Prisma.MenuCategoryUncheckedUpdateWithoutMenuItemsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  displayOrder: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  menuId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RecipeUpsertWithWhereUniqueWithoutMenuItemsInputSchema: z.ZodType<Prisma.RecipeUpsertWithWhereUniqueWithoutMenuItemsInput> = z.object({
  where: z.lazy(() => RecipeWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => RecipeUpdateWithoutMenuItemsInputSchema),z.lazy(() => RecipeUncheckedUpdateWithoutMenuItemsInputSchema) ]),
  create: z.union([ z.lazy(() => RecipeCreateWithoutMenuItemsInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutMenuItemsInputSchema) ]),
}).strict();

export const RecipeUpdateWithWhereUniqueWithoutMenuItemsInputSchema: z.ZodType<Prisma.RecipeUpdateWithWhereUniqueWithoutMenuItemsInput> = z.object({
  where: z.lazy(() => RecipeWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => RecipeUpdateWithoutMenuItemsInputSchema),z.lazy(() => RecipeUncheckedUpdateWithoutMenuItemsInputSchema) ]),
}).strict();

export const RecipeUpdateManyWithWhereWithoutMenuItemsInputSchema: z.ZodType<Prisma.RecipeUpdateManyWithWhereWithoutMenuItemsInput> = z.object({
  where: z.lazy(() => RecipeScalarWhereInputSchema),
  data: z.union([ z.lazy(() => RecipeUpdateManyMutationInputSchema),z.lazy(() => RecipeUncheckedUpdateManyWithoutMenuItemsInputSchema) ]),
}).strict();

export const MenuItemRecipeUpsertWithWhereUniqueWithoutMenuItemInputSchema: z.ZodType<Prisma.MenuItemRecipeUpsertWithWhereUniqueWithoutMenuItemInput> = z.object({
  where: z.lazy(() => MenuItemRecipeWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => MenuItemRecipeUpdateWithoutMenuItemInputSchema),z.lazy(() => MenuItemRecipeUncheckedUpdateWithoutMenuItemInputSchema) ]),
  create: z.union([ z.lazy(() => MenuItemRecipeCreateWithoutMenuItemInputSchema),z.lazy(() => MenuItemRecipeUncheckedCreateWithoutMenuItemInputSchema) ]),
}).strict();

export const MenuItemRecipeUpdateWithWhereUniqueWithoutMenuItemInputSchema: z.ZodType<Prisma.MenuItemRecipeUpdateWithWhereUniqueWithoutMenuItemInput> = z.object({
  where: z.lazy(() => MenuItemRecipeWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => MenuItemRecipeUpdateWithoutMenuItemInputSchema),z.lazy(() => MenuItemRecipeUncheckedUpdateWithoutMenuItemInputSchema) ]),
}).strict();

export const MenuItemRecipeUpdateManyWithWhereWithoutMenuItemInputSchema: z.ZodType<Prisma.MenuItemRecipeUpdateManyWithWhereWithoutMenuItemInput> = z.object({
  where: z.lazy(() => MenuItemRecipeScalarWhereInputSchema),
  data: z.union([ z.lazy(() => MenuItemRecipeUpdateManyMutationInputSchema),z.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutMenuItemInputSchema) ]),
}).strict();

export const NutritionalInfoUpsertWithoutMenuItemInputSchema: z.ZodType<Prisma.NutritionalInfoUpsertWithoutMenuItemInput> = z.object({
  update: z.union([ z.lazy(() => NutritionalInfoUpdateWithoutMenuItemInputSchema),z.lazy(() => NutritionalInfoUncheckedUpdateWithoutMenuItemInputSchema) ]),
  create: z.union([ z.lazy(() => NutritionalInfoCreateWithoutMenuItemInputSchema),z.lazy(() => NutritionalInfoUncheckedCreateWithoutMenuItemInputSchema) ]),
  where: z.lazy(() => NutritionalInfoWhereInputSchema).optional()
}).strict();

export const NutritionalInfoUpdateToOneWithWhereWithoutMenuItemInputSchema: z.ZodType<Prisma.NutritionalInfoUpdateToOneWithWhereWithoutMenuItemInput> = z.object({
  where: z.lazy(() => NutritionalInfoWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => NutritionalInfoUpdateWithoutMenuItemInputSchema),z.lazy(() => NutritionalInfoUncheckedUpdateWithoutMenuItemInputSchema) ]),
}).strict();

export const NutritionalInfoUpdateWithoutMenuItemInputSchema: z.ZodType<Prisma.NutritionalInfoUpdateWithoutMenuItemInput> = z.object({
  calories: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  fat: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  saturatedFat: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  transFat: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  cholesterol: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  sodium: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  carbohydrates: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  fiber: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  sugar: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  protein: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const NutritionalInfoUncheckedUpdateWithoutMenuItemInputSchema: z.ZodType<Prisma.NutritionalInfoUncheckedUpdateWithoutMenuItemInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  calories: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  fat: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  saturatedFat: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  transFat: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  cholesterol: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  sodium: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  carbohydrates: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  fiber: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  sugar: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  protein: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const NutritionalRecommendationUpsertWithWhereUniqueWithoutMenuItemInputSchema: z.ZodType<Prisma.NutritionalRecommendationUpsertWithWhereUniqueWithoutMenuItemInput> = z.object({
  where: z.lazy(() => NutritionalRecommendationWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => NutritionalRecommendationUpdateWithoutMenuItemInputSchema),z.lazy(() => NutritionalRecommendationUncheckedUpdateWithoutMenuItemInputSchema) ]),
  create: z.union([ z.lazy(() => NutritionalRecommendationCreateWithoutMenuItemInputSchema),z.lazy(() => NutritionalRecommendationUncheckedCreateWithoutMenuItemInputSchema) ]),
}).strict();

export const NutritionalRecommendationUpdateWithWhereUniqueWithoutMenuItemInputSchema: z.ZodType<Prisma.NutritionalRecommendationUpdateWithWhereUniqueWithoutMenuItemInput> = z.object({
  where: z.lazy(() => NutritionalRecommendationWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => NutritionalRecommendationUpdateWithoutMenuItemInputSchema),z.lazy(() => NutritionalRecommendationUncheckedUpdateWithoutMenuItemInputSchema) ]),
}).strict();

export const NutritionalRecommendationUpdateManyWithWhereWithoutMenuItemInputSchema: z.ZodType<Prisma.NutritionalRecommendationUpdateManyWithWhereWithoutMenuItemInput> = z.object({
  where: z.lazy(() => NutritionalRecommendationScalarWhereInputSchema),
  data: z.union([ z.lazy(() => NutritionalRecommendationUpdateManyMutationInputSchema),z.lazy(() => NutritionalRecommendationUncheckedUpdateManyWithoutMenuItemInputSchema) ]),
}).strict();

export const NutritionalRecommendationScalarWhereInputSchema: z.ZodType<Prisma.NutritionalRecommendationScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => NutritionalRecommendationScalarWhereInputSchema),z.lazy(() => NutritionalRecommendationScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => NutritionalRecommendationScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => NutritionalRecommendationScalarWhereInputSchema),z.lazy(() => NutritionalRecommendationScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  menuItemId: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  recommendation: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const SalesTransactionsUpsertWithWhereUniqueWithoutMenuItemInputSchema: z.ZodType<Prisma.SalesTransactionsUpsertWithWhereUniqueWithoutMenuItemInput> = z.object({
  where: z.lazy(() => SalesTransactionsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => SalesTransactionsUpdateWithoutMenuItemInputSchema),z.lazy(() => SalesTransactionsUncheckedUpdateWithoutMenuItemInputSchema) ]),
  create: z.union([ z.lazy(() => SalesTransactionsCreateWithoutMenuItemInputSchema),z.lazy(() => SalesTransactionsUncheckedCreateWithoutMenuItemInputSchema) ]),
}).strict();

export const SalesTransactionsUpdateWithWhereUniqueWithoutMenuItemInputSchema: z.ZodType<Prisma.SalesTransactionsUpdateWithWhereUniqueWithoutMenuItemInput> = z.object({
  where: z.lazy(() => SalesTransactionsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => SalesTransactionsUpdateWithoutMenuItemInputSchema),z.lazy(() => SalesTransactionsUncheckedUpdateWithoutMenuItemInputSchema) ]),
}).strict();

export const SalesTransactionsUpdateManyWithWhereWithoutMenuItemInputSchema: z.ZodType<Prisma.SalesTransactionsUpdateManyWithWhereWithoutMenuItemInput> = z.object({
  where: z.lazy(() => SalesTransactionsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => SalesTransactionsUpdateManyMutationInputSchema),z.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutMenuItemInputSchema) ]),
}).strict();

export const LeftoverItemUpsertWithWhereUniqueWithoutMenuItemInputSchema: z.ZodType<Prisma.LeftoverItemUpsertWithWhereUniqueWithoutMenuItemInput> = z.object({
  where: z.lazy(() => LeftoverItemWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => LeftoverItemUpdateWithoutMenuItemInputSchema),z.lazy(() => LeftoverItemUncheckedUpdateWithoutMenuItemInputSchema) ]),
  create: z.union([ z.lazy(() => LeftoverItemCreateWithoutMenuItemInputSchema),z.lazy(() => LeftoverItemUncheckedCreateWithoutMenuItemInputSchema) ]),
}).strict();

export const LeftoverItemUpdateWithWhereUniqueWithoutMenuItemInputSchema: z.ZodType<Prisma.LeftoverItemUpdateWithWhereUniqueWithoutMenuItemInput> = z.object({
  where: z.lazy(() => LeftoverItemWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => LeftoverItemUpdateWithoutMenuItemInputSchema),z.lazy(() => LeftoverItemUncheckedUpdateWithoutMenuItemInputSchema) ]),
}).strict();

export const LeftoverItemUpdateManyWithWhereWithoutMenuItemInputSchema: z.ZodType<Prisma.LeftoverItemUpdateManyWithWhereWithoutMenuItemInput> = z.object({
  where: z.lazy(() => LeftoverItemScalarWhereInputSchema),
  data: z.union([ z.lazy(() => LeftoverItemUpdateManyMutationInputSchema),z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutMenuItemInputSchema) ]),
}).strict();

export const CustomerFeedbackUpsertWithWhereUniqueWithoutMenuItemInputSchema: z.ZodType<Prisma.CustomerFeedbackUpsertWithWhereUniqueWithoutMenuItemInput> = z.object({
  where: z.lazy(() => CustomerFeedbackWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CustomerFeedbackUpdateWithoutMenuItemInputSchema),z.lazy(() => CustomerFeedbackUncheckedUpdateWithoutMenuItemInputSchema) ]),
  create: z.union([ z.lazy(() => CustomerFeedbackCreateWithoutMenuItemInputSchema),z.lazy(() => CustomerFeedbackUncheckedCreateWithoutMenuItemInputSchema) ]),
}).strict();

export const CustomerFeedbackUpdateWithWhereUniqueWithoutMenuItemInputSchema: z.ZodType<Prisma.CustomerFeedbackUpdateWithWhereUniqueWithoutMenuItemInput> = z.object({
  where: z.lazy(() => CustomerFeedbackWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CustomerFeedbackUpdateWithoutMenuItemInputSchema),z.lazy(() => CustomerFeedbackUncheckedUpdateWithoutMenuItemInputSchema) ]),
}).strict();

export const CustomerFeedbackUpdateManyWithWhereWithoutMenuItemInputSchema: z.ZodType<Prisma.CustomerFeedbackUpdateManyWithWhereWithoutMenuItemInput> = z.object({
  where: z.lazy(() => CustomerFeedbackScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CustomerFeedbackUpdateManyMutationInputSchema),z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutMenuItemInputSchema) ]),
}).strict();

export const DietaryRestrictionUpsertWithWhereUniqueWithoutMenuItemsInputSchema: z.ZodType<Prisma.DietaryRestrictionUpsertWithWhereUniqueWithoutMenuItemsInput> = z.object({
  where: z.lazy(() => DietaryRestrictionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => DietaryRestrictionUpdateWithoutMenuItemsInputSchema),z.lazy(() => DietaryRestrictionUncheckedUpdateWithoutMenuItemsInputSchema) ]),
  create: z.union([ z.lazy(() => DietaryRestrictionCreateWithoutMenuItemsInputSchema),z.lazy(() => DietaryRestrictionUncheckedCreateWithoutMenuItemsInputSchema) ]),
}).strict();

export const DietaryRestrictionUpdateWithWhereUniqueWithoutMenuItemsInputSchema: z.ZodType<Prisma.DietaryRestrictionUpdateWithWhereUniqueWithoutMenuItemsInput> = z.object({
  where: z.lazy(() => DietaryRestrictionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => DietaryRestrictionUpdateWithoutMenuItemsInputSchema),z.lazy(() => DietaryRestrictionUncheckedUpdateWithoutMenuItemsInputSchema) ]),
}).strict();

export const DietaryRestrictionUpdateManyWithWhereWithoutMenuItemsInputSchema: z.ZodType<Prisma.DietaryRestrictionUpdateManyWithWhereWithoutMenuItemsInput> = z.object({
  where: z.lazy(() => DietaryRestrictionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => DietaryRestrictionUpdateManyMutationInputSchema),z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutMenuItemsInputSchema) ]),
}).strict();

export const MenuItemCreateWithoutNutritionalInfoInputSchema: z.ZodType<Prisma.MenuItemCreateWithoutNutritionalInfoInput> = z.object({
  name: z.string(),
  description: z.string().optional().nullable(),
  price: z.number(),
  foodCost: z.number(),
  isActive: z.boolean().optional(),
  recipeIds: z.union([ z.lazy(() => MenuItemCreaterecipeIdsInputSchema),z.number().int().array() ]).optional(),
  recipeServingsAmount: z.union([ z.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema),z.number().array() ]).optional(),
  recipeServingsCost: z.union([ z.lazy(() => MenuItemCreaterecipeServingsCostInputSchema),z.number().array() ]).optional(),
  allergens: z.union([ z.lazy(() => MenuItemCreateallergensInputSchema),z.string().array() ]).optional(),
  menu: z.lazy(() => MenuCreateNestedOneWithoutMenuItemsInputSchema),
  category: z.lazy(() => MenuCategoryCreateNestedOneWithoutMenuItemsInputSchema).optional(),
  recipes: z.lazy(() => RecipeCreateNestedManyWithoutMenuItemsInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeCreateNestedManyWithoutMenuItemInputSchema).optional(),
  recommendations: z.lazy(() => NutritionalRecommendationCreateNestedManyWithoutMenuItemInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsCreateNestedManyWithoutMenuItemInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemCreateNestedManyWithoutMenuItemInputSchema).optional(),
  feedback: z.lazy(() => CustomerFeedbackCreateNestedManyWithoutMenuItemInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionCreateNestedManyWithoutMenuItemsInputSchema).optional()
}).strict();

export const MenuItemUncheckedCreateWithoutNutritionalInfoInputSchema: z.ZodType<Prisma.MenuItemUncheckedCreateWithoutNutritionalInfoInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  price: z.number(),
  foodCost: z.number(),
  isActive: z.boolean().optional(),
  recipeIds: z.union([ z.lazy(() => MenuItemCreaterecipeIdsInputSchema),z.number().int().array() ]).optional(),
  recipeServingsAmount: z.union([ z.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema),z.number().array() ]).optional(),
  recipeServingsCost: z.union([ z.lazy(() => MenuItemCreaterecipeServingsCostInputSchema),z.number().array() ]).optional(),
  allergens: z.union([ z.lazy(() => MenuItemCreateallergensInputSchema),z.string().array() ]).optional(),
  menuId: z.number().int(),
  categoryId: z.number().int().optional().nullable(),
  recipes: z.lazy(() => RecipeUncheckedCreateNestedManyWithoutMenuItemsInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  recommendations: z.lazy(() => NutritionalRecommendationUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  feedback: z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutMenuItemsInputSchema).optional()
}).strict();

export const MenuItemCreateOrConnectWithoutNutritionalInfoInputSchema: z.ZodType<Prisma.MenuItemCreateOrConnectWithoutNutritionalInfoInput> = z.object({
  where: z.lazy(() => MenuItemWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => MenuItemCreateWithoutNutritionalInfoInputSchema),z.lazy(() => MenuItemUncheckedCreateWithoutNutritionalInfoInputSchema) ]),
}).strict();

export const MenuItemUpsertWithoutNutritionalInfoInputSchema: z.ZodType<Prisma.MenuItemUpsertWithoutNutritionalInfoInput> = z.object({
  update: z.union([ z.lazy(() => MenuItemUpdateWithoutNutritionalInfoInputSchema),z.lazy(() => MenuItemUncheckedUpdateWithoutNutritionalInfoInputSchema) ]),
  create: z.union([ z.lazy(() => MenuItemCreateWithoutNutritionalInfoInputSchema),z.lazy(() => MenuItemUncheckedCreateWithoutNutritionalInfoInputSchema) ]),
  where: z.lazy(() => MenuItemWhereInputSchema).optional()
}).strict();

export const MenuItemUpdateToOneWithWhereWithoutNutritionalInfoInputSchema: z.ZodType<Prisma.MenuItemUpdateToOneWithWhereWithoutNutritionalInfoInput> = z.object({
  where: z.lazy(() => MenuItemWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => MenuItemUpdateWithoutNutritionalInfoInputSchema),z.lazy(() => MenuItemUncheckedUpdateWithoutNutritionalInfoInputSchema) ]),
}).strict();

export const MenuItemUpdateWithoutNutritionalInfoInputSchema: z.ZodType<Prisma.MenuItemUpdateWithoutNutritionalInfoInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  recipeIds: z.union([ z.lazy(() => MenuItemUpdaterecipeIdsInputSchema),z.number().int().array() ]).optional(),
  recipeServingsAmount: z.union([ z.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema),z.number().array() ]).optional(),
  recipeServingsCost: z.union([ z.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema),z.number().array() ]).optional(),
  allergens: z.union([ z.lazy(() => MenuItemUpdateallergensInputSchema),z.string().array() ]).optional(),
  menu: z.lazy(() => MenuUpdateOneRequiredWithoutMenuItemsNestedInputSchema).optional(),
  category: z.lazy(() => MenuCategoryUpdateOneWithoutMenuItemsNestedInputSchema).optional(),
  recipes: z.lazy(() => RecipeUpdateManyWithoutMenuItemsNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  recommendations: z.lazy(() => NutritionalRecommendationUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  feedback: z.lazy(() => CustomerFeedbackUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUpdateManyWithoutMenuItemsNestedInputSchema).optional()
}).strict();

export const MenuItemUncheckedUpdateWithoutNutritionalInfoInputSchema: z.ZodType<Prisma.MenuItemUncheckedUpdateWithoutNutritionalInfoInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  recipeIds: z.union([ z.lazy(() => MenuItemUpdaterecipeIdsInputSchema),z.number().int().array() ]).optional(),
  recipeServingsAmount: z.union([ z.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema),z.number().array() ]).optional(),
  recipeServingsCost: z.union([ z.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema),z.number().array() ]).optional(),
  allergens: z.union([ z.lazy(() => MenuItemUpdateallergensInputSchema),z.string().array() ]).optional(),
  menuId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  categoryId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recipes: z.lazy(() => RecipeUncheckedUpdateManyWithoutMenuItemsNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  recommendations: z.lazy(() => NutritionalRecommendationUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  feedback: z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutMenuItemsNestedInputSchema).optional()
}).strict();

export const RecipeCreateWithoutFoodCostHistoryInputSchema: z.ZodType<Prisma.RecipeCreateWithoutFoodCostHistoryInput> = z.object({
  name: z.string(),
  imageUrls: z.union([ z.lazy(() => RecipeCreateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.string().optional().nullable(),
  servings: z.number().int(),
  cookTime: z.number().int(),
  prepTime: z.number().int(),
  frequency: z.number().int().optional().nullable(),
  foodCost: z.number().optional().nullable(),
  isDeleted: z.boolean().optional(),
  isPublished: z.boolean().optional(),
  publishedAt: z.coerce.date().optional().nullable(),
  language: z.string().optional(),
  skillLevel: z.lazy(() => SkillLevelSchema).optional(),
  category: z.lazy(() => CategorySchema).optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutRecipesInputSchema),
  cookBook: z.lazy(() => CookBookCreateNestedOneWithoutRecipesInputSchema),
  ingredients: z.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeCreateNestedManyWithoutRecipeInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z.lazy(() => RecipeTagCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionCreateNestedManyWithoutRecipesInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureCreateNestedManyWithoutRecipeInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldCreateNestedManyWithoutRecipeInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostCreateNestedManyWithoutRecipeInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionCreateNestedOneWithoutRecipeInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointCreateNestedManyWithoutRecipeInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageCreateNestedOneWithoutRecipeInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoCreateNestedManyWithoutRecipeInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsCreateNestedOneWithoutRecipeInputSchema).optional()
}).strict();

export const RecipeUncheckedCreateWithoutFoodCostHistoryInputSchema: z.ZodType<Prisma.RecipeUncheckedCreateWithoutFoodCostHistoryInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  imageUrls: z.union([ z.lazy(() => RecipeCreateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.string().optional().nullable(),
  servings: z.number().int(),
  cookTime: z.number().int(),
  prepTime: z.number().int(),
  frequency: z.number().int().optional().nullable(),
  restaurantId: z.number().int(),
  cookBookId: z.number().int(),
  foodCost: z.number().optional().nullable(),
  isDeleted: z.boolean().optional(),
  isPublished: z.boolean().optional(),
  publishedAt: z.coerce.date().optional().nullable(),
  language: z.string().optional(),
  skillLevel: z.lazy(() => SkillLevelSchema).optional(),
  category: z.lazy(() => CategorySchema).optional(),
  ingredients: z.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUncheckedCreateNestedOneWithoutRecipeInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUncheckedCreateNestedOneWithoutRecipeInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUncheckedCreateNestedOneWithoutRecipeInputSchema).optional()
}).strict();

export const RecipeCreateOrConnectWithoutFoodCostHistoryInputSchema: z.ZodType<Prisma.RecipeCreateOrConnectWithoutFoodCostHistoryInput> = z.object({
  where: z.lazy(() => RecipeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RecipeCreateWithoutFoodCostHistoryInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutFoodCostHistoryInputSchema) ]),
}).strict();

export const RecipeUpsertWithoutFoodCostHistoryInputSchema: z.ZodType<Prisma.RecipeUpsertWithoutFoodCostHistoryInput> = z.object({
  update: z.union([ z.lazy(() => RecipeUpdateWithoutFoodCostHistoryInputSchema),z.lazy(() => RecipeUncheckedUpdateWithoutFoodCostHistoryInputSchema) ]),
  create: z.union([ z.lazy(() => RecipeCreateWithoutFoodCostHistoryInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutFoodCostHistoryInputSchema) ]),
  where: z.lazy(() => RecipeWhereInputSchema).optional()
}).strict();

export const RecipeUpdateToOneWithWhereWithoutFoodCostHistoryInputSchema: z.ZodType<Prisma.RecipeUpdateToOneWithWhereWithoutFoodCostHistoryInput> = z.object({
  where: z.lazy(() => RecipeWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RecipeUpdateWithoutFoodCostHistoryInputSchema),z.lazy(() => RecipeUncheckedUpdateWithoutFoodCostHistoryInputSchema) ]),
}).strict();

export const RecipeUpdateWithoutFoodCostHistoryInputSchema: z.ZodType<Prisma.RecipeUpdateWithoutFoodCostHistoryInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrls: z.union([ z.lazy(() => RecipeUpdateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  servings: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isPublished: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  publishedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  skillLevel: z.union([ z.lazy(() => SkillLevelSchema),z.lazy(() => EnumSkillLevelFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => CategorySchema),z.lazy(() => EnumCategoryFieldUpdateOperationsInputSchema) ]).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  cookBook: z.lazy(() => CookBookUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  ingredients: z.lazy(() => RecipeIngredientUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUpdateManyWithoutRecipeNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUpdateManyWithoutRecipesNestedInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUpdateManyWithoutRecipeNestedInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUpdateManyWithoutRecipeNestedInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUpdateManyWithoutRecipeNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUpdateOneWithoutRecipeNestedInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUpdateManyWithoutRecipeNestedInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUpdateOneWithoutRecipeNestedInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUpdateManyWithoutRecipeNestedInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUpdateOneWithoutRecipeNestedInputSchema).optional()
}).strict();

export const RecipeUncheckedUpdateWithoutFoodCostHistoryInputSchema: z.ZodType<Prisma.RecipeUncheckedUpdateWithoutFoodCostHistoryInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrls: z.union([ z.lazy(() => RecipeUpdateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  servings: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookBookId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isPublished: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  publishedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  skillLevel: z.union([ z.lazy(() => SkillLevelSchema),z.lazy(() => EnumSkillLevelFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => CategorySchema),z.lazy(() => EnumCategoryFieldUpdateOperationsInputSchema) ]).optional(),
  ingredients: z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional()
}).strict();

export const RecipeCreateWithoutPrepHistoryInputSchema: z.ZodType<Prisma.RecipeCreateWithoutPrepHistoryInput> = z.object({
  name: z.string(),
  imageUrls: z.union([ z.lazy(() => RecipeCreateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.string().optional().nullable(),
  servings: z.number().int(),
  cookTime: z.number().int(),
  prepTime: z.number().int(),
  frequency: z.number().int().optional().nullable(),
  foodCost: z.number().optional().nullable(),
  isDeleted: z.boolean().optional(),
  isPublished: z.boolean().optional(),
  publishedAt: z.coerce.date().optional().nullable(),
  language: z.string().optional(),
  skillLevel: z.lazy(() => SkillLevelSchema).optional(),
  category: z.lazy(() => CategorySchema).optional(),
  restaurant: z.lazy(() => RestaurantCreateNestedOneWithoutRecipesInputSchema),
  cookBook: z.lazy(() => CookBookCreateNestedOneWithoutRecipesInputSchema),
  ingredients: z.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeCreateNestedManyWithoutRecipeInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z.lazy(() => RecipeTagCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionCreateNestedManyWithoutRecipesInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureCreateNestedManyWithoutRecipeInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldCreateNestedManyWithoutRecipeInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostCreateNestedManyWithoutRecipeInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionCreateNestedOneWithoutRecipeInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointCreateNestedManyWithoutRecipeInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageCreateNestedOneWithoutRecipeInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoCreateNestedManyWithoutRecipeInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsCreateNestedOneWithoutRecipeInputSchema).optional()
}).strict();

export const RecipeUncheckedCreateWithoutPrepHistoryInputSchema: z.ZodType<Prisma.RecipeUncheckedCreateWithoutPrepHistoryInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  imageUrls: z.union([ z.lazy(() => RecipeCreateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.string().optional().nullable(),
  servings: z.number().int(),
  cookTime: z.number().int(),
  prepTime: z.number().int(),
  frequency: z.number().int().optional().nullable(),
  restaurantId: z.number().int(),
  cookBookId: z.number().int(),
  foodCost: z.number().optional().nullable(),
  isDeleted: z.boolean().optional(),
  isPublished: z.boolean().optional(),
  publishedAt: z.coerce.date().optional().nullable(),
  language: z.string().optional(),
  skillLevel: z.lazy(() => SkillLevelSchema).optional(),
  category: z.lazy(() => CategorySchema).optional(),
  ingredients: z.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUncheckedCreateNestedOneWithoutRecipeInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUncheckedCreateNestedOneWithoutRecipeInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUncheckedCreateNestedOneWithoutRecipeInputSchema).optional()
}).strict();

export const RecipeCreateOrConnectWithoutPrepHistoryInputSchema: z.ZodType<Prisma.RecipeCreateOrConnectWithoutPrepHistoryInput> = z.object({
  where: z.lazy(() => RecipeWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RecipeCreateWithoutPrepHistoryInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutPrepHistoryInputSchema) ]),
}).strict();

export const RecipeUpsertWithoutPrepHistoryInputSchema: z.ZodType<Prisma.RecipeUpsertWithoutPrepHistoryInput> = z.object({
  update: z.union([ z.lazy(() => RecipeUpdateWithoutPrepHistoryInputSchema),z.lazy(() => RecipeUncheckedUpdateWithoutPrepHistoryInputSchema) ]),
  create: z.union([ z.lazy(() => RecipeCreateWithoutPrepHistoryInputSchema),z.lazy(() => RecipeUncheckedCreateWithoutPrepHistoryInputSchema) ]),
  where: z.lazy(() => RecipeWhereInputSchema).optional()
}).strict();

export const RecipeUpdateToOneWithWhereWithoutPrepHistoryInputSchema: z.ZodType<Prisma.RecipeUpdateToOneWithWhereWithoutPrepHistoryInput> = z.object({
  where: z.lazy(() => RecipeWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RecipeUpdateWithoutPrepHistoryInputSchema),z.lazy(() => RecipeUncheckedUpdateWithoutPrepHistoryInputSchema) ]),
}).strict();

export const RecipeUpdateWithoutPrepHistoryInputSchema: z.ZodType<Prisma.RecipeUpdateWithoutPrepHistoryInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrls: z.union([ z.lazy(() => RecipeUpdateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  servings: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isPublished: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  publishedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  skillLevel: z.union([ z.lazy(() => SkillLevelSchema),z.lazy(() => EnumSkillLevelFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => CategorySchema),z.lazy(() => EnumCategoryFieldUpdateOperationsInputSchema) ]).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  cookBook: z.lazy(() => CookBookUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  ingredients: z.lazy(() => RecipeIngredientUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUpdateManyWithoutRecipeNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUpdateManyWithoutRecipesNestedInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUpdateManyWithoutRecipeNestedInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUpdateManyWithoutRecipeNestedInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUpdateManyWithoutRecipeNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUpdateOneWithoutRecipeNestedInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUpdateManyWithoutRecipeNestedInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUpdateOneWithoutRecipeNestedInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUpdateManyWithoutRecipeNestedInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUpdateOneWithoutRecipeNestedInputSchema).optional()
}).strict();

export const RecipeUncheckedUpdateWithoutPrepHistoryInputSchema: z.ZodType<Prisma.RecipeUncheckedUpdateWithoutPrepHistoryInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrls: z.union([ z.lazy(() => RecipeUpdateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  servings: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookBookId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isPublished: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  publishedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  skillLevel: z.union([ z.lazy(() => SkillLevelSchema),z.lazy(() => EnumSkillLevelFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => CategorySchema),z.lazy(() => EnumCategoryFieldUpdateOperationsInputSchema) ]).optional(),
  ingredients: z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional()
}).strict();

export const MenuItemCreateManyCategoryInputSchema: z.ZodType<Prisma.MenuItemCreateManyCategoryInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  price: z.number(),
  foodCost: z.number(),
  isActive: z.boolean().optional(),
  recipeIds: z.union([ z.lazy(() => MenuItemCreaterecipeIdsInputSchema),z.number().int().array() ]).optional(),
  recipeServingsAmount: z.union([ z.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema),z.number().array() ]).optional(),
  recipeServingsCost: z.union([ z.lazy(() => MenuItemCreaterecipeServingsCostInputSchema),z.number().array() ]).optional(),
  allergens: z.union([ z.lazy(() => MenuItemCreateallergensInputSchema),z.string().array() ]).optional(),
  menuId: z.number().int()
}).strict();

export const MenuItemUpdateWithoutCategoryInputSchema: z.ZodType<Prisma.MenuItemUpdateWithoutCategoryInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  recipeIds: z.union([ z.lazy(() => MenuItemUpdaterecipeIdsInputSchema),z.number().int().array() ]).optional(),
  recipeServingsAmount: z.union([ z.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema),z.number().array() ]).optional(),
  recipeServingsCost: z.union([ z.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema),z.number().array() ]).optional(),
  allergens: z.union([ z.lazy(() => MenuItemUpdateallergensInputSchema),z.string().array() ]).optional(),
  menu: z.lazy(() => MenuUpdateOneRequiredWithoutMenuItemsNestedInputSchema).optional(),
  recipes: z.lazy(() => RecipeUpdateManyWithoutMenuItemsNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => NutritionalInfoUpdateOneWithoutMenuItemNestedInputSchema).optional(),
  recommendations: z.lazy(() => NutritionalRecommendationUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  feedback: z.lazy(() => CustomerFeedbackUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUpdateManyWithoutMenuItemsNestedInputSchema).optional()
}).strict();

export const MenuItemUncheckedUpdateWithoutCategoryInputSchema: z.ZodType<Prisma.MenuItemUncheckedUpdateWithoutCategoryInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  recipeIds: z.union([ z.lazy(() => MenuItemUpdaterecipeIdsInputSchema),z.number().int().array() ]).optional(),
  recipeServingsAmount: z.union([ z.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema),z.number().array() ]).optional(),
  recipeServingsCost: z.union([ z.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema),z.number().array() ]).optional(),
  allergens: z.union([ z.lazy(() => MenuItemUpdateallergensInputSchema),z.string().array() ]).optional(),
  menuId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  recipes: z.lazy(() => RecipeUncheckedUpdateManyWithoutMenuItemsNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => NutritionalInfoUncheckedUpdateOneWithoutMenuItemNestedInputSchema).optional(),
  recommendations: z.lazy(() => NutritionalRecommendationUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  feedback: z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutMenuItemsNestedInputSchema).optional()
}).strict();

export const MenuItemUncheckedUpdateManyWithoutCategoryInputSchema: z.ZodType<Prisma.MenuItemUncheckedUpdateManyWithoutCategoryInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  recipeIds: z.union([ z.lazy(() => MenuItemUpdaterecipeIdsInputSchema),z.number().int().array() ]).optional(),
  recipeServingsAmount: z.union([ z.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema),z.number().array() ]).optional(),
  recipeServingsCost: z.union([ z.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema),z.number().array() ]).optional(),
  allergens: z.union([ z.lazy(() => MenuItemUpdateallergensInputSchema),z.string().array() ]).optional(),
  menuId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RecipeIngredientCreateManyRecipeVersionInputSchema: z.ZodType<Prisma.RecipeIngredientCreateManyRecipeVersionInput> = z.object({
  id: z.number().int().optional(),
  recipeId: z.number().int(),
  ingredientId: z.number().int(),
  quantity: z.number(),
  unit: z.string(),
  processingInstructions: z.string().optional().nullable(),
  substituteIngredients: z.union([ z.lazy(() => RecipeIngredientCreatesubstituteIngredientsInputSchema),z.number().int().array() ]).optional(),
  isOptional: z.boolean().optional(),
  notes: z.string().optional().nullable(),
  cost: z.number().optional().nullable(),
  density: z.number().optional().nullable(),
  yield: z.number().optional().nullable(),
  joinAt: z.coerce.date().optional()
}).strict();

export const RecipeInstructionCreateManyRecipeVersionInputSchema: z.ZodType<Prisma.RecipeInstructionCreateManyRecipeVersionInput> = z.object({
  id: z.number().int().optional(),
  recipeId: z.number().int(),
  stepNumber: z.number().int(),
  instruction: z.string(),
  imageUrl: z.string().optional().nullable(),
  timeInMinutes: z.number().int().optional().nullable(),
  temperature: z.number().optional().nullable(),
  temperatureUnit: z.string().optional().nullable(),
  isCritical: z.boolean().optional(),
  techniqueTips: z.string().optional().nullable(),
  warningNotes: z.string().optional().nullable()
}).strict();

export const RecipeIngredientUpdateWithoutRecipeVersionInputSchema: z.ZodType<Prisma.RecipeIngredientUpdateWithoutRecipeVersionInput> = z.object({
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  processingInstructions: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  substituteIngredients: z.union([ z.lazy(() => RecipeIngredientUpdatesubstituteIngredientsInputSchema),z.number().int().array() ]).optional(),
  isOptional: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  cost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  density: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  yield: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  joinAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  recipe: z.lazy(() => RecipeUpdateOneRequiredWithoutIngredientsNestedInputSchema).optional(),
  ingredient: z.lazy(() => IngredientUpdateOneRequiredWithoutRecipeIngredientsNestedInputSchema).optional()
}).strict();

export const RecipeIngredientUncheckedUpdateWithoutRecipeVersionInputSchema: z.ZodType<Prisma.RecipeIngredientUncheckedUpdateWithoutRecipeVersionInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ingredientId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  processingInstructions: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  substituteIngredients: z.union([ z.lazy(() => RecipeIngredientUpdatesubstituteIngredientsInputSchema),z.number().int().array() ]).optional(),
  isOptional: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  cost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  density: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  yield: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  joinAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RecipeIngredientUncheckedUpdateManyWithoutRecipeVersionInputSchema: z.ZodType<Prisma.RecipeIngredientUncheckedUpdateManyWithoutRecipeVersionInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ingredientId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  processingInstructions: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  substituteIngredients: z.union([ z.lazy(() => RecipeIngredientUpdatesubstituteIngredientsInputSchema),z.number().int().array() ]).optional(),
  isOptional: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  cost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  density: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  yield: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  joinAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RecipeInstructionUpdateWithoutRecipeVersionInputSchema: z.ZodType<Prisma.RecipeInstructionUpdateWithoutRecipeVersionInput> = z.object({
  stepNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  instruction: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timeInMinutes: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  temperature: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  temperatureUnit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isCritical: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  techniqueTips: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  warningNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recipe: z.lazy(() => RecipeUpdateOneRequiredWithoutInstructionsNestedInputSchema).optional(),
  equipment: z.lazy(() => RecipeEquipmentUpdateManyWithoutRecipeInstructionNestedInputSchema).optional()
}).strict();

export const RecipeInstructionUncheckedUpdateWithoutRecipeVersionInputSchema: z.ZodType<Prisma.RecipeInstructionUncheckedUpdateWithoutRecipeVersionInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  stepNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  instruction: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timeInMinutes: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  temperature: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  temperatureUnit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isCritical: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  techniqueTips: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  warningNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  equipment: z.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutRecipeInstructionNestedInputSchema).optional()
}).strict();

export const RecipeInstructionUncheckedUpdateManyWithoutRecipeVersionInputSchema: z.ZodType<Prisma.RecipeInstructionUncheckedUpdateManyWithoutRecipeVersionInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  stepNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  instruction: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timeInMinutes: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  temperature: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  temperatureUnit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isCritical: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  techniqueTips: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  warningNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const RecipeEquipmentCreateManyEquipmentInputSchema: z.ZodType<Prisma.RecipeEquipmentCreateManyEquipmentInput> = z.object({
  id: z.number().int().optional(),
  recipeId: z.number().int(),
  notes: z.string().optional().nullable(),
  recipeInstructionId: z.number().int().optional().nullable()
}).strict();

export const MaintenanceLogCreateManyEquipmentInputSchema: z.ZodType<Prisma.MaintenanceLogCreateManyEquipmentInput> = z.object({
  id: z.number().int().optional(),
  date: z.coerce.date().optional(),
  type: z.lazy(() => MaintenanceTypeSchema),
  description: z.string(),
  cost: z.number().optional().nullable(),
  performedBy: z.string(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const RecipeEquipmentUpdateWithoutEquipmentInputSchema: z.ZodType<Prisma.RecipeEquipmentUpdateWithoutEquipmentInput> = z.object({
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recipe: z.lazy(() => RecipeUpdateOneRequiredWithoutEquipmentsNestedInputSchema).optional(),
  RecipeInstruction: z.lazy(() => RecipeInstructionUpdateOneWithoutEquipmentNestedInputSchema).optional()
}).strict();

export const RecipeEquipmentUncheckedUpdateWithoutEquipmentInputSchema: z.ZodType<Prisma.RecipeEquipmentUncheckedUpdateWithoutEquipmentInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recipeInstructionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const RecipeEquipmentUncheckedUpdateManyWithoutEquipmentInputSchema: z.ZodType<Prisma.RecipeEquipmentUncheckedUpdateManyWithoutEquipmentInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recipeInstructionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const MaintenanceLogUpdateWithoutEquipmentInputSchema: z.ZodType<Prisma.MaintenanceLogUpdateWithoutEquipmentInput> = z.object({
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => MaintenanceTypeSchema),z.lazy(() => EnumMaintenanceTypeFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  performedBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MaintenanceLogUncheckedUpdateWithoutEquipmentInputSchema: z.ZodType<Prisma.MaintenanceLogUncheckedUpdateWithoutEquipmentInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => MaintenanceTypeSchema),z.lazy(() => EnumMaintenanceTypeFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  performedBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MaintenanceLogUncheckedUpdateManyWithoutEquipmentInputSchema: z.ZodType<Prisma.MaintenanceLogUncheckedUpdateManyWithoutEquipmentInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => MaintenanceTypeSchema),z.lazy(() => EnumMaintenanceTypeFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  performedBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ChecklistItemCreateManyChecklistInputSchema: z.ZodType<Prisma.ChecklistItemCreateManyChecklistInput> = z.object({
  id: z.number().int().optional(),
  description: z.string(),
  order: z.number().int(),
  type: z.lazy(() => ChecklistItemTypeSchema),
  requiredPhotos: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ChecklistCompleteCreateManyChecklistInputSchema: z.ZodType<Prisma.ChecklistCompleteCreateManyChecklistInput> = z.object({
  id: z.number().int().optional(),
  completedById: z.number().int(),
  date: z.coerce.date(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ChecklistItemUpdateWithoutChecklistInputSchema: z.ZodType<Prisma.ChecklistItemUpdateWithoutChecklistInput> = z.object({
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => ChecklistItemTypeSchema),z.lazy(() => EnumChecklistItemTypeFieldUpdateOperationsInputSchema) ]).optional(),
  requiredPhotos: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  completions: z.lazy(() => ChecklistItemCompleteUpdateManyWithoutChecklistItemNestedInputSchema).optional()
}).strict();

export const ChecklistItemUncheckedUpdateWithoutChecklistInputSchema: z.ZodType<Prisma.ChecklistItemUncheckedUpdateWithoutChecklistInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => ChecklistItemTypeSchema),z.lazy(() => EnumChecklistItemTypeFieldUpdateOperationsInputSchema) ]).optional(),
  requiredPhotos: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  completions: z.lazy(() => ChecklistItemCompleteUncheckedUpdateManyWithoutChecklistItemNestedInputSchema).optional()
}).strict();

export const ChecklistItemUncheckedUpdateManyWithoutChecklistInputSchema: z.ZodType<Prisma.ChecklistItemUncheckedUpdateManyWithoutChecklistInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => ChecklistItemTypeSchema),z.lazy(() => EnumChecklistItemTypeFieldUpdateOperationsInputSchema) ]).optional(),
  requiredPhotos: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ChecklistCompleteUpdateWithoutChecklistInputSchema: z.ZodType<Prisma.ChecklistCompleteUpdateWithoutChecklistInput> = z.object({
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  completedBy: z.lazy(() => UserUpdateOneRequiredWithoutChecklistCompletesNestedInputSchema).optional(),
  items: z.lazy(() => ChecklistItemCompleteUpdateManyWithoutChecklistCompleteNestedInputSchema).optional()
}).strict();

export const ChecklistCompleteUncheckedUpdateWithoutChecklistInputSchema: z.ZodType<Prisma.ChecklistCompleteUncheckedUpdateWithoutChecklistInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  completedById: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  items: z.lazy(() => ChecklistItemCompleteUncheckedUpdateManyWithoutChecklistCompleteNestedInputSchema).optional()
}).strict();

export const ChecklistCompleteUncheckedUpdateManyWithoutChecklistInputSchema: z.ZodType<Prisma.ChecklistCompleteUncheckedUpdateManyWithoutChecklistInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  completedById: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ChecklistItemCompleteCreateManyChecklistItemInputSchema: z.ZodType<Prisma.ChecklistItemCompleteCreateManyChecklistItemInput> = z.object({
  id: z.number().int().optional(),
  checklistCompleteId: z.number().int(),
  status: z.lazy(() => ChecklistStatusSchema),
  notes: z.string().optional().nullable(),
  photoUrls: z.union([ z.lazy(() => ChecklistItemCompleteCreatephotoUrlsInputSchema),z.string().array() ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ChecklistItemCompleteUpdateWithoutChecklistItemInputSchema: z.ZodType<Prisma.ChecklistItemCompleteUpdateWithoutChecklistItemInput> = z.object({
  status: z.union([ z.lazy(() => ChecklistStatusSchema),z.lazy(() => EnumChecklistStatusFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  photoUrls: z.union([ z.lazy(() => ChecklistItemCompleteUpdatephotoUrlsInputSchema),z.string().array() ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  checklistComplete: z.lazy(() => ChecklistCompleteUpdateOneRequiredWithoutItemsNestedInputSchema).optional()
}).strict();

export const ChecklistItemCompleteUncheckedUpdateWithoutChecklistItemInputSchema: z.ZodType<Prisma.ChecklistItemCompleteUncheckedUpdateWithoutChecklistItemInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  checklistCompleteId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ChecklistStatusSchema),z.lazy(() => EnumChecklistStatusFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  photoUrls: z.union([ z.lazy(() => ChecklistItemCompleteUpdatephotoUrlsInputSchema),z.string().array() ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ChecklistItemCompleteUncheckedUpdateManyWithoutChecklistItemInputSchema: z.ZodType<Prisma.ChecklistItemCompleteUncheckedUpdateManyWithoutChecklistItemInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  checklistCompleteId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ChecklistStatusSchema),z.lazy(() => EnumChecklistStatusFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  photoUrls: z.union([ z.lazy(() => ChecklistItemCompleteUpdatephotoUrlsInputSchema),z.string().array() ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ChecklistItemCompleteCreateManyChecklistCompleteInputSchema: z.ZodType<Prisma.ChecklistItemCompleteCreateManyChecklistCompleteInput> = z.object({
  id: z.number().int().optional(),
  checklistItemId: z.number().int(),
  status: z.lazy(() => ChecklistStatusSchema),
  notes: z.string().optional().nullable(),
  photoUrls: z.union([ z.lazy(() => ChecklistItemCompleteCreatephotoUrlsInputSchema),z.string().array() ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ChecklistItemCompleteUpdateWithoutChecklistCompleteInputSchema: z.ZodType<Prisma.ChecklistItemCompleteUpdateWithoutChecklistCompleteInput> = z.object({
  status: z.union([ z.lazy(() => ChecklistStatusSchema),z.lazy(() => EnumChecklistStatusFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  photoUrls: z.union([ z.lazy(() => ChecklistItemCompleteUpdatephotoUrlsInputSchema),z.string().array() ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  checklistItem: z.lazy(() => ChecklistItemUpdateOneRequiredWithoutCompletionsNestedInputSchema).optional()
}).strict();

export const ChecklistItemCompleteUncheckedUpdateWithoutChecklistCompleteInputSchema: z.ZodType<Prisma.ChecklistItemCompleteUncheckedUpdateWithoutChecklistCompleteInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  checklistItemId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ChecklistStatusSchema),z.lazy(() => EnumChecklistStatusFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  photoUrls: z.union([ z.lazy(() => ChecklistItemCompleteUpdatephotoUrlsInputSchema),z.string().array() ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ChecklistItemCompleteUncheckedUpdateManyWithoutChecklistCompleteInputSchema: z.ZodType<Prisma.ChecklistItemCompleteUncheckedUpdateManyWithoutChecklistCompleteInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  checklistItemId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ChecklistStatusSchema),z.lazy(() => EnumChecklistStatusFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  photoUrls: z.union([ z.lazy(() => ChecklistItemCompleteUpdatephotoUrlsInputSchema),z.string().array() ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MenuItemUpdateWithoutDietaryRestrictionsInputSchema: z.ZodType<Prisma.MenuItemUpdateWithoutDietaryRestrictionsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  recipeIds: z.union([ z.lazy(() => MenuItemUpdaterecipeIdsInputSchema),z.number().int().array() ]).optional(),
  recipeServingsAmount: z.union([ z.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema),z.number().array() ]).optional(),
  recipeServingsCost: z.union([ z.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema),z.number().array() ]).optional(),
  allergens: z.union([ z.lazy(() => MenuItemUpdateallergensInputSchema),z.string().array() ]).optional(),
  menu: z.lazy(() => MenuUpdateOneRequiredWithoutMenuItemsNestedInputSchema).optional(),
  category: z.lazy(() => MenuCategoryUpdateOneWithoutMenuItemsNestedInputSchema).optional(),
  recipes: z.lazy(() => RecipeUpdateManyWithoutMenuItemsNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => NutritionalInfoUpdateOneWithoutMenuItemNestedInputSchema).optional(),
  recommendations: z.lazy(() => NutritionalRecommendationUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  feedback: z.lazy(() => CustomerFeedbackUpdateManyWithoutMenuItemNestedInputSchema).optional()
}).strict();

export const MenuItemUncheckedUpdateWithoutDietaryRestrictionsInputSchema: z.ZodType<Prisma.MenuItemUncheckedUpdateWithoutDietaryRestrictionsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  recipeIds: z.union([ z.lazy(() => MenuItemUpdaterecipeIdsInputSchema),z.number().int().array() ]).optional(),
  recipeServingsAmount: z.union([ z.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema),z.number().array() ]).optional(),
  recipeServingsCost: z.union([ z.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema),z.number().array() ]).optional(),
  allergens: z.union([ z.lazy(() => MenuItemUpdateallergensInputSchema),z.string().array() ]).optional(),
  menuId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  categoryId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recipes: z.lazy(() => RecipeUncheckedUpdateManyWithoutMenuItemsNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => NutritionalInfoUncheckedUpdateOneWithoutMenuItemNestedInputSchema).optional(),
  recommendations: z.lazy(() => NutritionalRecommendationUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  feedback: z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional()
}).strict();

export const MenuItemUncheckedUpdateManyWithoutDietaryRestrictionsInputSchema: z.ZodType<Prisma.MenuItemUncheckedUpdateManyWithoutDietaryRestrictionsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  recipeIds: z.union([ z.lazy(() => MenuItemUpdaterecipeIdsInputSchema),z.number().int().array() ]).optional(),
  recipeServingsAmount: z.union([ z.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema),z.number().array() ]).optional(),
  recipeServingsCost: z.union([ z.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema),z.number().array() ]).optional(),
  allergens: z.union([ z.lazy(() => MenuItemUpdateallergensInputSchema),z.string().array() ]).optional(),
  menuId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  categoryId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const RecipeUpdateWithoutDietaryRestrictionsInputSchema: z.ZodType<Prisma.RecipeUpdateWithoutDietaryRestrictionsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrls: z.union([ z.lazy(() => RecipeUpdateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  servings: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isPublished: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  publishedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  skillLevel: z.union([ z.lazy(() => SkillLevelSchema),z.lazy(() => EnumSkillLevelFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => CategorySchema),z.lazy(() => EnumCategoryFieldUpdateOperationsInputSchema) ]).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  cookBook: z.lazy(() => CookBookUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  ingredients: z.lazy(() => RecipeIngredientUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUpdateManyWithoutRecipeNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUpdateManyWithoutRecipeNestedInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUpdateManyWithoutRecipeNestedInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUpdateManyWithoutRecipeNestedInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUpdateManyWithoutRecipeNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUpdateOneWithoutRecipeNestedInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUpdateManyWithoutRecipeNestedInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUpdateOneWithoutRecipeNestedInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUpdateManyWithoutRecipeNestedInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUpdateOneWithoutRecipeNestedInputSchema).optional()
}).strict();

export const RecipeUncheckedUpdateWithoutDietaryRestrictionsInputSchema: z.ZodType<Prisma.RecipeUncheckedUpdateWithoutDietaryRestrictionsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrls: z.union([ z.lazy(() => RecipeUpdateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  servings: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookBookId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isPublished: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  publishedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  skillLevel: z.union([ z.lazy(() => SkillLevelSchema),z.lazy(() => EnumSkillLevelFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => CategorySchema),z.lazy(() => EnumCategoryFieldUpdateOperationsInputSchema) ]).optional(),
  ingredients: z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional()
}).strict();

export const RecipeUncheckedUpdateManyWithoutDietaryRestrictionsInputSchema: z.ZodType<Prisma.RecipeUncheckedUpdateManyWithoutDietaryRestrictionsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrls: z.union([ z.lazy(() => RecipeUpdateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  servings: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookBookId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isPublished: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  publishedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  skillLevel: z.union([ z.lazy(() => SkillLevelSchema),z.lazy(() => EnumSkillLevelFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => CategorySchema),z.lazy(() => EnumCategoryFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const IngredientUpdateWithoutDietaryRestrictionsInputSchema: z.ZodType<Prisma.IngredientUpdateWithoutDietaryRestrictionsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  density: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dietaryRestrictionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  calories: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  protein: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  carbohydrates: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fat: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fiber: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sugar: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sodium: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  usdaFoodId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nutritionSource: z.union([ z.lazy(() => NutritionSourceSchema),z.lazy(() => NullableEnumNutritionSourceFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nutritionUpdatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recipeIngredients: z.lazy(() => RecipeIngredientUpdateManyWithoutIngredientNestedInputSchema).optional(),
  inventoryItems: z.lazy(() => InventoryItemUpdateManyWithoutIngredientNestedInputSchema).optional(),
  orderItems: z.lazy(() => OrderItemUpdateManyWithoutIngredientNestedInputSchema).optional(),
  vendors: z.lazy(() => VendorUpdateManyWithoutIngredientsNestedInputSchema).optional(),
  WasteRecords: z.lazy(() => WasteRecordUpdateManyWithoutIngredienteNestedInputSchema).optional(),
  IngredientAllergens: z.lazy(() => IngredientAllergenUpdateManyWithoutIngredientNestedInputSchema).optional(),
  priceHistory: z.lazy(() => SupplierPriceHistoryUpdateManyWithoutIngredientNestedInputSchema).optional()
}).strict();

export const IngredientUncheckedUpdateWithoutDietaryRestrictionsInputSchema: z.ZodType<Prisma.IngredientUncheckedUpdateWithoutDietaryRestrictionsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  density: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dietaryRestrictionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  calories: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  protein: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  carbohydrates: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fat: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fiber: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sugar: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sodium: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  usdaFoodId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nutritionSource: z.union([ z.lazy(() => NutritionSourceSchema),z.lazy(() => NullableEnumNutritionSourceFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nutritionUpdatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recipeIngredients: z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  inventoryItems: z.lazy(() => InventoryItemUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  orderItems: z.lazy(() => OrderItemUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  vendors: z.lazy(() => VendorUncheckedUpdateManyWithoutIngredientsNestedInputSchema).optional(),
  WasteRecords: z.lazy(() => WasteRecordUncheckedUpdateManyWithoutIngredienteNestedInputSchema).optional(),
  IngredientAllergens: z.lazy(() => IngredientAllergenUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  priceHistory: z.lazy(() => SupplierPriceHistoryUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional()
}).strict();

export const IngredientUncheckedUpdateManyWithoutDietaryRestrictionsInputSchema: z.ZodType<Prisma.IngredientUncheckedUpdateManyWithoutDietaryRestrictionsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  density: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dietaryRestrictionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  calories: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  protein: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  carbohydrates: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fat: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fiber: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sugar: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sodium: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  usdaFoodId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nutritionSource: z.union([ z.lazy(() => NutritionSourceSchema),z.lazy(() => NullableEnumNutritionSourceFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nutritionUpdatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const RecipeUpdateWithoutTagsInputSchema: z.ZodType<Prisma.RecipeUpdateWithoutTagsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrls: z.union([ z.lazy(() => RecipeUpdateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  servings: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isPublished: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  publishedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  skillLevel: z.union([ z.lazy(() => SkillLevelSchema),z.lazy(() => EnumSkillLevelFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => CategorySchema),z.lazy(() => EnumCategoryFieldUpdateOperationsInputSchema) ]).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  cookBook: z.lazy(() => CookBookUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  ingredients: z.lazy(() => RecipeIngredientUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUpdateManyWithoutRecipeNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUpdateManyWithoutRecipeNestedInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUpdateManyWithoutRecipesNestedInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUpdateManyWithoutRecipeNestedInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUpdateManyWithoutRecipeNestedInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUpdateManyWithoutRecipeNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUpdateOneWithoutRecipeNestedInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUpdateManyWithoutRecipeNestedInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUpdateOneWithoutRecipeNestedInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUpdateManyWithoutRecipeNestedInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUpdateOneWithoutRecipeNestedInputSchema).optional()
}).strict();

export const RecipeUncheckedUpdateWithoutTagsInputSchema: z.ZodType<Prisma.RecipeUncheckedUpdateWithoutTagsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrls: z.union([ z.lazy(() => RecipeUpdateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  servings: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookBookId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isPublished: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  publishedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  skillLevel: z.union([ z.lazy(() => SkillLevelSchema),z.lazy(() => EnumSkillLevelFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => CategorySchema),z.lazy(() => EnumCategoryFieldUpdateOperationsInputSchema) ]).optional(),
  ingredients: z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional()
}).strict();

export const RecipeUncheckedUpdateManyWithoutTagsInputSchema: z.ZodType<Prisma.RecipeUncheckedUpdateManyWithoutTagsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrls: z.union([ z.lazy(() => RecipeUpdateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  servings: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookBookId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isPublished: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  publishedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  skillLevel: z.union([ z.lazy(() => SkillLevelSchema),z.lazy(() => EnumSkillLevelFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => CategorySchema),z.lazy(() => EnumCategoryFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProductionPlanItemCreateManyProductionPlanInputSchema: z.ZodType<Prisma.ProductionPlanItemCreateManyProductionPlanInput> = z.object({
  id: z.number().int().optional(),
  recipeId: z.number().int(),
  quantity: z.number().int(),
  unit: z.string(),
  assignedToId: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ProductionPlanItemUpdateWithoutProductionPlanInputSchema: z.ZodType<Prisma.ProductionPlanItemUpdateWithoutProductionPlanInput> = z.object({
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  recipe: z.lazy(() => RecipeUpdateOneRequiredWithoutProductionPlanItemsNestedInputSchema).optional(),
  assignedTo: z.lazy(() => UserUpdateOneWithoutProductionPlanItemsNestedInputSchema).optional()
}).strict();

export const ProductionPlanItemUncheckedUpdateWithoutProductionPlanInputSchema: z.ZodType<Prisma.ProductionPlanItemUncheckedUpdateWithoutProductionPlanInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assignedToId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProductionPlanItemUncheckedUpdateManyWithoutProductionPlanInputSchema: z.ZodType<Prisma.ProductionPlanItemUncheckedUpdateManyWithoutProductionPlanInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assignedToId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const IngredientAllergenCreateManyAllergenInputSchema: z.ZodType<Prisma.IngredientAllergenCreateManyAllergenInput> = z.object({
  id: z.number().int().optional(),
  ingredientId: z.number().int()
}).strict();

export const IngredientAllergenUpdateWithoutAllergenInputSchema: z.ZodType<Prisma.IngredientAllergenUpdateWithoutAllergenInput> = z.object({
  ingredient: z.lazy(() => IngredientUpdateOneRequiredWithoutIngredientAllergensNestedInputSchema).optional()
}).strict();

export const IngredientAllergenUncheckedUpdateWithoutAllergenInputSchema: z.ZodType<Prisma.IngredientAllergenUncheckedUpdateWithoutAllergenInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ingredientId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const IngredientAllergenUncheckedUpdateManyWithoutAllergenInputSchema: z.ZodType<Prisma.IngredientAllergenUncheckedUpdateManyWithoutAllergenInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ingredientId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RestaurantCreateManyOrganizationInputSchema: z.ZodType<Prisma.RestaurantCreateManyOrganizationInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  imageUrl: z.string().optional().nullable(),
  address: z.string(),
  city: z.string(),
  zipCode: z.string(),
  state: z.string(),
  owner: z.string(),
  foodCost: z.number().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  isDeleted: z.boolean().optional(),
  deleted: z.coerce.date().optional().nullable()
}).strict();

export const UserCreateManyOrganizationInputSchema: z.ZodType<Prisma.UserCreateManyOrganizationInput> = z.object({
  id: z.number().int().optional(),
  email: z.string(),
  sub: z.number().int().optional().nullable(),
  passwordHash: z.string(),
  firstName: z.string(),
  lastName: z.string(),
  profileImage: z.string().optional().nullable(),
  verified: z.boolean().optional(),
  role: z.lazy(() => UserRoleSchema),
  restaurantId: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const RestaurantUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.RestaurantUpdateWithoutOrganizationInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zipCode: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  owner: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deleted: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UserUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: z.lazy(() => CookBookUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: z.lazy(() => InventoryUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: z.lazy(() => OrderUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: z.lazy(() => RecipeUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: z.lazy(() => MenuUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipments: z.lazy(() => EquipmentUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklists: z.lazy(() => QualityChecklistUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  customerFeedbacks: z.lazy(() => CustomerFeedbackUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();

export const RestaurantUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.RestaurantUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zipCode: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  owner: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deleted: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UserUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: z.lazy(() => CookBookUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: z.lazy(() => InventoryUncheckedUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: z.lazy(() => OrderUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: z.lazy(() => RecipeUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: z.lazy(() => MenuUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipments: z.lazy(() => EquipmentUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklists: z.lazy(() => QualityChecklistUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  customerFeedbacks: z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();

export const RestaurantUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.RestaurantUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  city: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  zipCode: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  state: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  owner: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  deleted: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UserUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.UserUpdateWithoutOrganizationInput> = z.object({
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sub: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passwordHash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  verified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneWithoutUsersNestedInputSchema).optional(),
  shifts: z.lazy(() => ShiftUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionUpdateManyWithoutApprovedByNestedInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountUpdateManyWithoutCreatedByNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sub: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passwordHash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  verified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema) ]).optional(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  shifts: z.lazy(() => ShiftUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemUncheckedUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutApprovedByNestedInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.UserUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sub: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passwordHash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  verified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema) ]).optional(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InventoryItemCreateManyInventoryInputSchema: z.ZodType<Prisma.InventoryItemCreateManyInventoryInput> = z.object({
  id: z.number().int().optional(),
  ingredientId: z.number().int(),
  quantity: z.number(),
  unit: z.string(),
  minQuantity: z.number(),
  restockThreshold: z.number(),
  lastCountDate: z.coerce.date().optional().nullable(),
  lastOrderDate: z.coerce.date().optional().nullable(),
  lastUpdatedById: z.number().int().optional().nullable(),
  lastUpdated: z.coerce.date().optional(),
  par: z.number(),
  reorderPoint: z.number(),
  maxQuantity: z.number().optional().nullable(),
  location: z.string().optional().nullable(),
  barcode: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  currentPrice: z.number(),
  averageCost: z.number(),
  lastPurchasePrice: z.number().optional().nullable()
}).strict();

export const InventoryTransactionCreateManyInventoryInputSchema: z.ZodType<Prisma.InventoryTransactionCreateManyInventoryInput> = z.object({
  id: z.number().int().optional(),
  itemId: z.number().int(),
  type: z.lazy(() => TransactionTypeSchema),
  quantity: z.number(),
  unit: z.string(),
  previousQty: z.number(),
  newQty: z.number(),
  cost: z.number().optional().nullable(),
  reference: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  createdById: z.number().int(),
  createdAt: z.coerce.date().optional()
}).strict();

export const StockCountCreateManyInventoryInputSchema: z.ZodType<Prisma.StockCountCreateManyInventoryInput> = z.object({
  id: z.number().int().optional(),
  status: z.lazy(() => CountStatusSchema),
  startedAt: z.coerce.date(),
  completedAt: z.coerce.date().optional().nullable(),
  createdById: z.number().int(),
  notes: z.string().optional().nullable()
}).strict();

export const InventoryItemUpdateWithoutInventoryInputSchema: z.ZodType<Prisma.InventoryItemUpdateWithoutInventoryInput> = z.object({
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  minQuantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  restockThreshold: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lastCountDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastOrderDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastUpdated: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  par: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  reorderPoint: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  maxQuantity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  barcode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currentPrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  averageCost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lastPurchasePrice: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ingredient: z.lazy(() => IngredientUpdateOneRequiredWithoutInventoryItemsNestedInputSchema).optional(),
  lastUpdatedBy: z.lazy(() => UserUpdateOneWithoutInventoryUpdatesNestedInputSchema).optional(),
  transactions: z.lazy(() => InventoryTransactionUpdateManyWithoutItemNestedInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUpdateManyWithoutInventoryItemNestedInputSchema).optional(),
  stockCounts: z.lazy(() => StockCountItemUpdateManyWithoutItemNestedInputSchema).optional()
}).strict();

export const InventoryItemUncheckedUpdateWithoutInventoryInputSchema: z.ZodType<Prisma.InventoryItemUncheckedUpdateWithoutInventoryInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ingredientId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  minQuantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  restockThreshold: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lastCountDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastOrderDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastUpdatedById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastUpdated: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  par: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  reorderPoint: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  maxQuantity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  barcode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currentPrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  averageCost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lastPurchasePrice: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  transactions: z.lazy(() => InventoryTransactionUncheckedUpdateManyWithoutItemNestedInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutInventoryItemNestedInputSchema).optional(),
  stockCounts: z.lazy(() => StockCountItemUncheckedUpdateManyWithoutItemNestedInputSchema).optional()
}).strict();

export const InventoryItemUncheckedUpdateManyWithoutInventoryInputSchema: z.ZodType<Prisma.InventoryItemUncheckedUpdateManyWithoutInventoryInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ingredientId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  minQuantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  restockThreshold: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lastCountDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastOrderDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastUpdatedById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastUpdated: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  par: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  reorderPoint: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  maxQuantity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  barcode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currentPrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  averageCost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lastPurchasePrice: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const InventoryTransactionUpdateWithoutInventoryInputSchema: z.ZodType<Prisma.InventoryTransactionUpdateWithoutInventoryInput> = z.object({
  type: z.union([ z.lazy(() => TransactionTypeSchema),z.lazy(() => EnumTransactionTypeFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  previousQty: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  newQty: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  cost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reference: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  item: z.lazy(() => InventoryItemUpdateOneRequiredWithoutTransactionsNestedInputSchema).optional(),
  createdBy: z.lazy(() => UserUpdateOneRequiredWithoutInventoryTransactionsNestedInputSchema).optional()
}).strict();

export const InventoryTransactionUncheckedUpdateWithoutInventoryInputSchema: z.ZodType<Prisma.InventoryTransactionUncheckedUpdateWithoutInventoryInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  itemId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => TransactionTypeSchema),z.lazy(() => EnumTransactionTypeFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  previousQty: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  newQty: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  cost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reference: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InventoryTransactionUncheckedUpdateManyWithoutInventoryInputSchema: z.ZodType<Prisma.InventoryTransactionUncheckedUpdateManyWithoutInventoryInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  itemId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => TransactionTypeSchema),z.lazy(() => EnumTransactionTypeFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  previousQty: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  newQty: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  cost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reference: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const StockCountUpdateWithoutInventoryInputSchema: z.ZodType<Prisma.StockCountUpdateWithoutInventoryInput> = z.object({
  status: z.union([ z.lazy(() => CountStatusSchema),z.lazy(() => EnumCountStatusFieldUpdateOperationsInputSchema) ]).optional(),
  startedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdBy: z.lazy(() => UserUpdateOneRequiredWithoutStockCountsNestedInputSchema).optional(),
  items: z.lazy(() => StockCountItemUpdateManyWithoutStockCountNestedInputSchema).optional()
}).strict();

export const StockCountUncheckedUpdateWithoutInventoryInputSchema: z.ZodType<Prisma.StockCountUncheckedUpdateWithoutInventoryInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => CountStatusSchema),z.lazy(() => EnumCountStatusFieldUpdateOperationsInputSchema) ]).optional(),
  startedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  items: z.lazy(() => StockCountItemUncheckedUpdateManyWithoutStockCountNestedInputSchema).optional()
}).strict();

export const StockCountUncheckedUpdateManyWithoutInventoryInputSchema: z.ZodType<Prisma.StockCountUncheckedUpdateManyWithoutInventoryInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => CountStatusSchema),z.lazy(() => EnumCountStatusFieldUpdateOperationsInputSchema) ]).optional(),
  startedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UserCreateManyRestaurantInputSchema: z.ZodType<Prisma.UserCreateManyRestaurantInput> = z.object({
  id: z.number().int().optional(),
  email: z.string(),
  sub: z.number().int().optional().nullable(),
  passwordHash: z.string(),
  firstName: z.string(),
  lastName: z.string(),
  profileImage: z.string().optional().nullable(),
  verified: z.boolean().optional(),
  role: z.lazy(() => UserRoleSchema),
  organizationId: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CookBookCreateManyRestaurantInputSchema: z.ZodType<Prisma.CookBookCreateManyRestaurantInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  imageUrl: z.string().optional().nullable(),
  category: z.string()
}).strict();

export const OrderCreateManyRestaurantInputSchema: z.ZodType<Prisma.OrderCreateManyRestaurantInput> = z.object({
  id: z.number().int().optional(),
  vendorId: z.number().int(),
  status: z.lazy(() => OrderStatusSchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const RecipeCreateManyRestaurantInputSchema: z.ZodType<Prisma.RecipeCreateManyRestaurantInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  imageUrls: z.union([ z.lazy(() => RecipeCreateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.string().optional().nullable(),
  servings: z.number().int(),
  cookTime: z.number().int(),
  prepTime: z.number().int(),
  frequency: z.number().int().optional().nullable(),
  cookBookId: z.number().int(),
  foodCost: z.number().optional().nullable(),
  isDeleted: z.boolean().optional(),
  isPublished: z.boolean().optional(),
  publishedAt: z.coerce.date().optional().nullable(),
  language: z.string().optional(),
  skillLevel: z.lazy(() => SkillLevelSchema).optional(),
  category: z.lazy(() => CategorySchema).optional()
}).strict();

export const MenuCreateManyRestaurantInputSchema: z.ZodType<Prisma.MenuCreateManyRestaurantInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const SalesTransactionsCreateManyRestaurantInputSchema: z.ZodType<Prisma.SalesTransactionsCreateManyRestaurantInput> = z.object({
  id: z.number().int().optional(),
  posTransactionID: z.string().optional().nullable(),
  menuItemId: z.number().int(),
  price: z.number(),
  total: z.number(),
  transactionDate: z.coerce.date(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const LeftoverItemCreateManyRestaurantInputSchema: z.ZodType<Prisma.LeftoverItemCreateManyRestaurantInput> = z.object({
  id: z.number().int().optional(),
  date: z.coerce.date(),
  menuItemId: z.number().int(),
  quantity: z.number().int(),
  reason: z.string(),
  recordedById: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const WasteRecordCreateManyRestaurantInputSchema: z.ZodType<Prisma.WasteRecordCreateManyRestaurantInput> = z.object({
  id: z.number().int().optional(),
  date: z.coerce.date(),
  ingredientId: z.number().int(),
  quantity: z.number(),
  unit: z.string(),
  reason: z.string(),
  recordedById: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ProductionPlanCreateManyRestaurantInputSchema: z.ZodType<Prisma.ProductionPlanCreateManyRestaurantInput> = z.object({
  id: z.number().int().optional(),
  date: z.coerce.date(),
  status: z.lazy(() => ProductionStatusSchema).optional(),
  createdById: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const EquipmentCreateManyRestaurantInputSchema: z.ZodType<Prisma.EquipmentCreateManyRestaurantInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  model: z.string().optional().nullable(),
  serialNumber: z.string().optional().nullable(),
  purchaseDate: z.coerce.date().optional().nullable(),
  lastMaintenance: z.coerce.date().optional().nullable(),
  nextMaintenance: z.coerce.date().optional().nullable(),
  status: z.lazy(() => EquipmentStatusSchema).optional(),
  location: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const QualityChecklistCreateManyRestaurantInputSchema: z.ZodType<Prisma.QualityChecklistCreateManyRestaurantInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  frequency: z.lazy(() => ChecklistFrequencySchema).optional(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CustomerFeedbackCreateManyRestaurantInputSchema: z.ZodType<Prisma.CustomerFeedbackCreateManyRestaurantInput> = z.object({
  id: z.number().int().optional(),
  menuItemId: z.number().int().optional().nullable(),
  rating: z.number().int(),
  comment: z.string().optional().nullable(),
  source: z.lazy(() => FeedbackSourceSchema),
  tags: z.union([ z.lazy(() => CustomerFeedbackCreatetagsInputSchema),z.string().array() ]).optional(),
  status: z.lazy(() => FeedbackStatusSchema).optional(),
  responseText: z.string().optional().nullable(),
  respondedAt: z.coerce.date().optional().nullable(),
  respondedById: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const UserUpdateWithoutRestaurantInputSchema: z.ZodType<Prisma.UserUpdateWithoutRestaurantInput> = z.object({
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sub: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passwordHash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  verified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneWithoutUsersNestedInputSchema).optional(),
  shifts: z.lazy(() => ShiftUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionUpdateManyWithoutApprovedByNestedInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountUpdateManyWithoutCreatedByNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutRestaurantInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutRestaurantInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sub: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passwordHash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  verified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  shifts: z.lazy(() => ShiftUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: z.lazy(() => InventoryItemUncheckedUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: z.lazy(() => PasswordResetUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecords: z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlans: z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: z.lazy(() => AvailabilityUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraints: z.lazy(() => SchedulingConstraintUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawals: z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistCompletes: z.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedbackResponses: z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutApprovedByNestedInputSchema).optional(),
  InventoryTransactions: z.lazy(() => InventoryTransactionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  StockCounts: z.lazy(() => StockCountUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateManyWithoutRestaurantInputSchema: z.ZodType<Prisma.UserUncheckedUpdateManyWithoutRestaurantInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sub: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  passwordHash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  firstName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lastName: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  profileImage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  verified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRoleSchema),z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema) ]).optional(),
  organizationId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CookBookUpdateWithoutRestaurantInputSchema: z.ZodType<Prisma.CookBookUpdateWithoutRestaurantInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  recipes: z.lazy(() => RecipeUpdateManyWithoutCookBookNestedInputSchema).optional()
}).strict();

export const CookBookUncheckedUpdateWithoutRestaurantInputSchema: z.ZodType<Prisma.CookBookUncheckedUpdateWithoutRestaurantInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  recipes: z.lazy(() => RecipeUncheckedUpdateManyWithoutCookBookNestedInputSchema).optional()
}).strict();

export const CookBookUncheckedUpdateManyWithoutRestaurantInputSchema: z.ZodType<Prisma.CookBookUncheckedUpdateManyWithoutRestaurantInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const OrderUpdateWithoutRestaurantInputSchema: z.ZodType<Prisma.OrderUpdateWithoutRestaurantInput> = z.object({
  status: z.union([ z.lazy(() => OrderStatusSchema),z.lazy(() => EnumOrderStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  vendor: z.lazy(() => VendorUpdateOneRequiredWithoutOrdersNestedInputSchema).optional(),
  items: z.lazy(() => OrderItemUpdateManyWithoutOrderNestedInputSchema).optional()
}).strict();

export const OrderUncheckedUpdateWithoutRestaurantInputSchema: z.ZodType<Prisma.OrderUncheckedUpdateWithoutRestaurantInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  vendorId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => OrderStatusSchema),z.lazy(() => EnumOrderStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  items: z.lazy(() => OrderItemUncheckedUpdateManyWithoutOrderNestedInputSchema).optional()
}).strict();

export const OrderUncheckedUpdateManyWithoutRestaurantInputSchema: z.ZodType<Prisma.OrderUncheckedUpdateManyWithoutRestaurantInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  vendorId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => OrderStatusSchema),z.lazy(() => EnumOrderStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RecipeUpdateWithoutRestaurantInputSchema: z.ZodType<Prisma.RecipeUpdateWithoutRestaurantInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrls: z.union([ z.lazy(() => RecipeUpdateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  servings: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isPublished: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  publishedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  skillLevel: z.union([ z.lazy(() => SkillLevelSchema),z.lazy(() => EnumSkillLevelFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => CategorySchema),z.lazy(() => EnumCategoryFieldUpdateOperationsInputSchema) ]).optional(),
  cookBook: z.lazy(() => CookBookUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  ingredients: z.lazy(() => RecipeIngredientUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUpdateManyWithoutRecipeNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUpdateManyWithoutRecipesNestedInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUpdateManyWithoutRecipeNestedInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUpdateManyWithoutRecipeNestedInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUpdateManyWithoutRecipeNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUpdateOneWithoutRecipeNestedInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUpdateManyWithoutRecipeNestedInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUpdateOneWithoutRecipeNestedInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUpdateManyWithoutRecipeNestedInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUpdateOneWithoutRecipeNestedInputSchema).optional()
}).strict();

export const RecipeUncheckedUpdateWithoutRestaurantInputSchema: z.ZodType<Prisma.RecipeUncheckedUpdateWithoutRestaurantInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrls: z.union([ z.lazy(() => RecipeUpdateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  servings: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  cookBookId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isPublished: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  publishedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  skillLevel: z.union([ z.lazy(() => SkillLevelSchema),z.lazy(() => EnumSkillLevelFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => CategorySchema),z.lazy(() => EnumCategoryFieldUpdateOperationsInputSchema) ]).optional(),
  ingredients: z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional()
}).strict();

export const RecipeUncheckedUpdateManyWithoutRestaurantInputSchema: z.ZodType<Prisma.RecipeUncheckedUpdateManyWithoutRestaurantInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrls: z.union([ z.lazy(() => RecipeUpdateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  servings: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  cookBookId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isPublished: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  publishedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  skillLevel: z.union([ z.lazy(() => SkillLevelSchema),z.lazy(() => EnumSkillLevelFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => CategorySchema),z.lazy(() => EnumCategoryFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MenuUpdateWithoutRestaurantInputSchema: z.ZodType<Prisma.MenuUpdateWithoutRestaurantInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  menuItems: z.lazy(() => MenuItemUpdateManyWithoutMenuNestedInputSchema).optional(),
  MenuCategory: z.lazy(() => MenuCategoryUpdateManyWithoutMenuNestedInputSchema).optional()
}).strict();

export const MenuUncheckedUpdateWithoutRestaurantInputSchema: z.ZodType<Prisma.MenuUncheckedUpdateWithoutRestaurantInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  menuItems: z.lazy(() => MenuItemUncheckedUpdateManyWithoutMenuNestedInputSchema).optional(),
  MenuCategory: z.lazy(() => MenuCategoryUncheckedUpdateManyWithoutMenuNestedInputSchema).optional()
}).strict();

export const MenuUncheckedUpdateManyWithoutRestaurantInputSchema: z.ZodType<Prisma.MenuUncheckedUpdateManyWithoutRestaurantInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SalesTransactionsUpdateWithoutRestaurantInputSchema: z.ZodType<Prisma.SalesTransactionsUpdateWithoutRestaurantInput> = z.object({
  posTransactionID: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  total: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  transactionDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  menuItem: z.lazy(() => MenuItemUpdateOneRequiredWithoutSalesTransactionsNestedInputSchema).optional()
}).strict();

export const SalesTransactionsUncheckedUpdateWithoutRestaurantInputSchema: z.ZodType<Prisma.SalesTransactionsUncheckedUpdateWithoutRestaurantInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  posTransactionID: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  menuItemId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  total: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  transactionDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SalesTransactionsUncheckedUpdateManyWithoutRestaurantInputSchema: z.ZodType<Prisma.SalesTransactionsUncheckedUpdateManyWithoutRestaurantInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  posTransactionID: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  menuItemId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  total: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  transactionDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const LeftoverItemUpdateWithoutRestaurantInputSchema: z.ZodType<Prisma.LeftoverItemUpdateWithoutRestaurantInput> = z.object({
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  reason: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  menuItem: z.lazy(() => MenuItemUpdateOneRequiredWithoutLeftoverItemsNestedInputSchema).optional(),
  recordedBy: z.lazy(() => UserUpdateOneRequiredWithoutLeftoverItemsNestedInputSchema).optional()
}).strict();

export const LeftoverItemUncheckedUpdateWithoutRestaurantInputSchema: z.ZodType<Prisma.LeftoverItemUncheckedUpdateWithoutRestaurantInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  menuItemId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  reason: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  recordedById: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const LeftoverItemUncheckedUpdateManyWithoutRestaurantInputSchema: z.ZodType<Prisma.LeftoverItemUncheckedUpdateManyWithoutRestaurantInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  menuItemId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  reason: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  recordedById: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const WasteRecordUpdateWithoutRestaurantInputSchema: z.ZodType<Prisma.WasteRecordUpdateWithoutRestaurantInput> = z.object({
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reason: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ingrediente: z.lazy(() => IngredientUpdateOneRequiredWithoutWasteRecordsNestedInputSchema).optional(),
  recordedBy: z.lazy(() => UserUpdateOneRequiredWithoutWasteRecordsNestedInputSchema).optional()
}).strict();

export const WasteRecordUncheckedUpdateWithoutRestaurantInputSchema: z.ZodType<Prisma.WasteRecordUncheckedUpdateWithoutRestaurantInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ingredientId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reason: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  recordedById: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const WasteRecordUncheckedUpdateManyWithoutRestaurantInputSchema: z.ZodType<Prisma.WasteRecordUncheckedUpdateManyWithoutRestaurantInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ingredientId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reason: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  recordedById: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProductionPlanUpdateWithoutRestaurantInputSchema: z.ZodType<Prisma.ProductionPlanUpdateWithoutRestaurantInput> = z.object({
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ProductionStatusSchema),z.lazy(() => EnumProductionStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdBy: z.lazy(() => UserUpdateOneRequiredWithoutProductionPlansNestedInputSchema).optional(),
  items: z.lazy(() => ProductionPlanItemUpdateManyWithoutProductionPlanNestedInputSchema).optional()
}).strict();

export const ProductionPlanUncheckedUpdateWithoutRestaurantInputSchema: z.ZodType<Prisma.ProductionPlanUncheckedUpdateWithoutRestaurantInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ProductionStatusSchema),z.lazy(() => EnumProductionStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  items: z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutProductionPlanNestedInputSchema).optional()
}).strict();

export const ProductionPlanUncheckedUpdateManyWithoutRestaurantInputSchema: z.ZodType<Prisma.ProductionPlanUncheckedUpdateManyWithoutRestaurantInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ProductionStatusSchema),z.lazy(() => EnumProductionStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EquipmentUpdateWithoutRestaurantInputSchema: z.ZodType<Prisma.EquipmentUpdateWithoutRestaurantInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serialNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  purchaseDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastMaintenance: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nextMaintenance: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => EquipmentStatusSchema),z.lazy(() => EnumEquipmentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  recipes: z.lazy(() => RecipeEquipmentUpdateManyWithoutEquipmentNestedInputSchema).optional(),
  maintenanceLogs: z.lazy(() => MaintenanceLogUpdateManyWithoutEquipmentNestedInputSchema).optional()
}).strict();

export const EquipmentUncheckedUpdateWithoutRestaurantInputSchema: z.ZodType<Prisma.EquipmentUncheckedUpdateWithoutRestaurantInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serialNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  purchaseDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastMaintenance: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nextMaintenance: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => EquipmentStatusSchema),z.lazy(() => EnumEquipmentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  recipes: z.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutEquipmentNestedInputSchema).optional(),
  maintenanceLogs: z.lazy(() => MaintenanceLogUncheckedUpdateManyWithoutEquipmentNestedInputSchema).optional()
}).strict();

export const EquipmentUncheckedUpdateManyWithoutRestaurantInputSchema: z.ZodType<Prisma.EquipmentUncheckedUpdateManyWithoutRestaurantInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serialNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  purchaseDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastMaintenance: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nextMaintenance: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => EquipmentStatusSchema),z.lazy(() => EnumEquipmentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const QualityChecklistUpdateWithoutRestaurantInputSchema: z.ZodType<Prisma.QualityChecklistUpdateWithoutRestaurantInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  frequency: z.union([ z.lazy(() => ChecklistFrequencySchema),z.lazy(() => EnumChecklistFrequencyFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  items: z.lazy(() => ChecklistItemUpdateManyWithoutChecklistNestedInputSchema).optional(),
  completions: z.lazy(() => ChecklistCompleteUpdateManyWithoutChecklistNestedInputSchema).optional()
}).strict();

export const QualityChecklistUncheckedUpdateWithoutRestaurantInputSchema: z.ZodType<Prisma.QualityChecklistUncheckedUpdateWithoutRestaurantInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  frequency: z.union([ z.lazy(() => ChecklistFrequencySchema),z.lazy(() => EnumChecklistFrequencyFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  items: z.lazy(() => ChecklistItemUncheckedUpdateManyWithoutChecklistNestedInputSchema).optional(),
  completions: z.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutChecklistNestedInputSchema).optional()
}).strict();

export const QualityChecklistUncheckedUpdateManyWithoutRestaurantInputSchema: z.ZodType<Prisma.QualityChecklistUncheckedUpdateManyWithoutRestaurantInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  frequency: z.union([ z.lazy(() => ChecklistFrequencySchema),z.lazy(() => EnumChecklistFrequencyFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CustomerFeedbackUpdateWithoutRestaurantInputSchema: z.ZodType<Prisma.CustomerFeedbackUpdateWithoutRestaurantInput> = z.object({
  rating: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  comment: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  source: z.union([ z.lazy(() => FeedbackSourceSchema),z.lazy(() => EnumFeedbackSourceFieldUpdateOperationsInputSchema) ]).optional(),
  tags: z.union([ z.lazy(() => CustomerFeedbackUpdatetagsInputSchema),z.string().array() ]).optional(),
  status: z.union([ z.lazy(() => FeedbackStatusSchema),z.lazy(() => EnumFeedbackStatusFieldUpdateOperationsInputSchema) ]).optional(),
  responseText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  respondedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  menuItem: z.lazy(() => MenuItemUpdateOneWithoutFeedbackNestedInputSchema).optional(),
  respondedBy: z.lazy(() => UserUpdateOneWithoutCustomerFeedbackResponsesNestedInputSchema).optional()
}).strict();

export const CustomerFeedbackUncheckedUpdateWithoutRestaurantInputSchema: z.ZodType<Prisma.CustomerFeedbackUncheckedUpdateWithoutRestaurantInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  menuItemId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  comment: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  source: z.union([ z.lazy(() => FeedbackSourceSchema),z.lazy(() => EnumFeedbackSourceFieldUpdateOperationsInputSchema) ]).optional(),
  tags: z.union([ z.lazy(() => CustomerFeedbackUpdatetagsInputSchema),z.string().array() ]).optional(),
  status: z.union([ z.lazy(() => FeedbackStatusSchema),z.lazy(() => EnumFeedbackStatusFieldUpdateOperationsInputSchema) ]).optional(),
  responseText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  respondedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  respondedById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CustomerFeedbackUncheckedUpdateManyWithoutRestaurantInputSchema: z.ZodType<Prisma.CustomerFeedbackUncheckedUpdateManyWithoutRestaurantInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  menuItemId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  comment: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  source: z.union([ z.lazy(() => FeedbackSourceSchema),z.lazy(() => EnumFeedbackSourceFieldUpdateOperationsInputSchema) ]).optional(),
  tags: z.union([ z.lazy(() => CustomerFeedbackUpdatetagsInputSchema),z.string().array() ]).optional(),
  status: z.union([ z.lazy(() => FeedbackStatusSchema),z.lazy(() => EnumFeedbackStatusFieldUpdateOperationsInputSchema) ]).optional(),
  responseText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  respondedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  respondedById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ShiftCreateManyUserInputSchema: z.ZodType<Prisma.ShiftCreateManyUserInput> = z.object({
  id: z.number().int().optional(),
  startTime: z.coerce.date(),
  endTime: z.coerce.date(),
  status: z.lazy(() => ShiftStatusSchema)
}).strict();

export const PrepItemCreateManyAssignedToInputSchema: z.ZodType<Prisma.PrepItemCreateManyAssignedToInput> = z.object({
  id: z.number().int().optional(),
  prepBoardId: z.number().int(),
  recipeId: z.number().int(),
  quantity: z.number().int(),
  status: z.lazy(() => PrepStatusSchema)
}).strict();

export const InventoryItemCreateManyLastUpdatedByInputSchema: z.ZodType<Prisma.InventoryItemCreateManyLastUpdatedByInput> = z.object({
  id: z.number().int().optional(),
  inventoryId: z.number().int(),
  ingredientId: z.number().int(),
  quantity: z.number(),
  unit: z.string(),
  minQuantity: z.number(),
  restockThreshold: z.number(),
  lastCountDate: z.coerce.date().optional().nullable(),
  lastOrderDate: z.coerce.date().optional().nullable(),
  lastUpdated: z.coerce.date().optional(),
  par: z.number(),
  reorderPoint: z.number(),
  maxQuantity: z.number().optional().nullable(),
  location: z.string().optional().nullable(),
  barcode: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  currentPrice: z.number(),
  averageCost: z.number(),
  lastPurchasePrice: z.number().optional().nullable()
}).strict();

export const SessionCreateManyUserInputSchema: z.ZodType<Prisma.SessionCreateManyUserInput> = z.object({
  id: z.string().uuid().optional(),
  code: z.string(),
  token: z.string(),
  expiresAt: z.coerce.date(),
  createdAt: z.coerce.date().optional()
}).strict();

export const PasswordResetCreateManyUserInputSchema: z.ZodType<Prisma.PasswordResetCreateManyUserInput> = z.object({
  id: z.number().int().optional(),
  token: z.string(),
  expiresAt: z.coerce.date(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const LeftoverItemCreateManyRecordedByInputSchema: z.ZodType<Prisma.LeftoverItemCreateManyRecordedByInput> = z.object({
  id: z.number().int().optional(),
  restaurantId: z.number().int(),
  date: z.coerce.date(),
  menuItemId: z.number().int(),
  quantity: z.number().int(),
  reason: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const WasteRecordCreateManyRecordedByInputSchema: z.ZodType<Prisma.WasteRecordCreateManyRecordedByInput> = z.object({
  id: z.number().int().optional(),
  restaurantId: z.number().int(),
  date: z.coerce.date(),
  ingredientId: z.number().int(),
  quantity: z.number(),
  unit: z.string(),
  reason: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ProductionPlanCreateManyCreatedByInputSchema: z.ZodType<Prisma.ProductionPlanCreateManyCreatedByInput> = z.object({
  id: z.number().int().optional(),
  restaurantId: z.number().int(),
  date: z.coerce.date(),
  status: z.lazy(() => ProductionStatusSchema).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ProductionPlanItemCreateManyAssignedToInputSchema: z.ZodType<Prisma.ProductionPlanItemCreateManyAssignedToInput> = z.object({
  id: z.number().int().optional(),
  productionPlanId: z.number().int(),
  recipeId: z.number().int(),
  quantity: z.number().int(),
  unit: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const AvailabilityCreateManyUserInputSchema: z.ZodType<Prisma.AvailabilityCreateManyUserInput> = z.object({
  id: z.number().int().optional(),
  dayOfWeek: z.lazy(() => DayOfWeekSchema),
  startTime: z.coerce.date(),
  endTime: z.coerce.date(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const SchedulingConstraintCreateManyUserInputSchema: z.ZodType<Prisma.SchedulingConstraintCreateManyUserInput> = z.object({
  id: z.number().int().optional(),
  date: z.coerce.date(),
  constraintsType: z.lazy(() => ConstraintTypeSchema),
  startTime: z.coerce.date(),
  endTime: z.coerce.date(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const InventoryWithdrawalCreateManyCreatedByInputSchema: z.ZodType<Prisma.InventoryWithdrawalCreateManyCreatedByInput> = z.object({
  id: z.number().int().optional(),
  inventoryItemId: z.number().int(),
  dateTime: z.coerce.date(),
  quantity: z.number(),
  unit: z.string(),
  recipeId: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ChecklistCompleteCreateManyCompletedByInputSchema: z.ZodType<Prisma.ChecklistCompleteCreateManyCompletedByInput> = z.object({
  id: z.number().int().optional(),
  checklistId: z.number().int(),
  date: z.coerce.date(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CustomerFeedbackCreateManyRespondedByInputSchema: z.ZodType<Prisma.CustomerFeedbackCreateManyRespondedByInput> = z.object({
  id: z.number().int().optional(),
  restaurantId: z.number().int(),
  menuItemId: z.number().int().optional().nullable(),
  rating: z.number().int(),
  comment: z.string().optional().nullable(),
  source: z.lazy(() => FeedbackSourceSchema),
  tags: z.union([ z.lazy(() => CustomerFeedbackCreatetagsInputSchema),z.string().array() ]).optional(),
  status: z.lazy(() => FeedbackStatusSchema).optional(),
  responseText: z.string().optional().nullable(),
  respondedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const RecipeVersionCreateManyCreatedByInputSchema: z.ZodType<Prisma.RecipeVersionCreateManyCreatedByInput> = z.object({
  id: z.number().int().optional(),
  recipeId: z.number().int(),
  versionNumber: z.number().int(),
  description: z.string().optional().nullable(),
  changes: z.string().optional().nullable(),
  isActive: z.boolean().optional(),
  approvedById: z.number().int().optional().nullable(),
  approvedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const RecipeVersionCreateManyApprovedByInputSchema: z.ZodType<Prisma.RecipeVersionCreateManyApprovedByInput> = z.object({
  id: z.number().int().optional(),
  recipeId: z.number().int(),
  versionNumber: z.number().int(),
  description: z.string().optional().nullable(),
  changes: z.string().optional().nullable(),
  isActive: z.boolean().optional(),
  createdById: z.number().int(),
  approvedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const InventoryTransactionCreateManyCreatedByInputSchema: z.ZodType<Prisma.InventoryTransactionCreateManyCreatedByInput> = z.object({
  id: z.number().int().optional(),
  inventoryId: z.number().int(),
  itemId: z.number().int(),
  type: z.lazy(() => TransactionTypeSchema),
  quantity: z.number(),
  unit: z.string(),
  previousQty: z.number(),
  newQty: z.number(),
  cost: z.number().optional().nullable(),
  reference: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional()
}).strict();

export const StockCountCreateManyCreatedByInputSchema: z.ZodType<Prisma.StockCountCreateManyCreatedByInput> = z.object({
  id: z.number().int().optional(),
  inventoryId: z.number().int(),
  status: z.lazy(() => CountStatusSchema),
  startedAt: z.coerce.date(),
  completedAt: z.coerce.date().optional().nullable(),
  notes: z.string().optional().nullable()
}).strict();

export const ShiftUpdateWithoutUserInputSchema: z.ZodType<Prisma.ShiftUpdateWithoutUserInput> = z.object({
  startTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ShiftStatusSchema),z.lazy(() => EnumShiftStatusFieldUpdateOperationsInputSchema) ]).optional(),
  tasks: z.lazy(() => ShiftTaskUpdateManyWithoutShiftNestedInputSchema).optional()
}).strict();

export const ShiftUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.ShiftUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  startTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ShiftStatusSchema),z.lazy(() => EnumShiftStatusFieldUpdateOperationsInputSchema) ]).optional(),
  tasks: z.lazy(() => ShiftTaskUncheckedUpdateManyWithoutShiftNestedInputSchema).optional()
}).strict();

export const ShiftUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.ShiftUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  startTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ShiftStatusSchema),z.lazy(() => EnumShiftStatusFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PrepItemUpdateWithoutAssignedToInputSchema: z.ZodType<Prisma.PrepItemUpdateWithoutAssignedToInput> = z.object({
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => PrepStatusSchema),z.lazy(() => EnumPrepStatusFieldUpdateOperationsInputSchema) ]).optional(),
  prepBoard: z.lazy(() => PrepBoardUpdateOneRequiredWithoutPrepItemsNestedInputSchema).optional(),
  recipe: z.lazy(() => RecipeUpdateOneRequiredWithoutPrepItemsNestedInputSchema).optional()
}).strict();

export const PrepItemUncheckedUpdateWithoutAssignedToInputSchema: z.ZodType<Prisma.PrepItemUncheckedUpdateWithoutAssignedToInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepBoardId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => PrepStatusSchema),z.lazy(() => EnumPrepStatusFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PrepItemUncheckedUpdateManyWithoutAssignedToInputSchema: z.ZodType<Prisma.PrepItemUncheckedUpdateManyWithoutAssignedToInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepBoardId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => PrepStatusSchema),z.lazy(() => EnumPrepStatusFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InventoryItemUpdateWithoutLastUpdatedByInputSchema: z.ZodType<Prisma.InventoryItemUpdateWithoutLastUpdatedByInput> = z.object({
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  minQuantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  restockThreshold: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lastCountDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastOrderDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastUpdated: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  par: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  reorderPoint: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  maxQuantity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  barcode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currentPrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  averageCost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lastPurchasePrice: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inventory: z.lazy(() => InventoryUpdateOneRequiredWithoutItemsNestedInputSchema).optional(),
  ingredient: z.lazy(() => IngredientUpdateOneRequiredWithoutInventoryItemsNestedInputSchema).optional(),
  transactions: z.lazy(() => InventoryTransactionUpdateManyWithoutItemNestedInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUpdateManyWithoutInventoryItemNestedInputSchema).optional(),
  stockCounts: z.lazy(() => StockCountItemUpdateManyWithoutItemNestedInputSchema).optional()
}).strict();

export const InventoryItemUncheckedUpdateWithoutLastUpdatedByInputSchema: z.ZodType<Prisma.InventoryItemUncheckedUpdateWithoutLastUpdatedByInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inventoryId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ingredientId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  minQuantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  restockThreshold: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lastCountDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastOrderDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastUpdated: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  par: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  reorderPoint: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  maxQuantity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  barcode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currentPrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  averageCost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lastPurchasePrice: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  transactions: z.lazy(() => InventoryTransactionUncheckedUpdateManyWithoutItemNestedInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutInventoryItemNestedInputSchema).optional(),
  stockCounts: z.lazy(() => StockCountItemUncheckedUpdateManyWithoutItemNestedInputSchema).optional()
}).strict();

export const InventoryItemUncheckedUpdateManyWithoutLastUpdatedByInputSchema: z.ZodType<Prisma.InventoryItemUncheckedUpdateManyWithoutLastUpdatedByInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inventoryId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ingredientId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  minQuantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  restockThreshold: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lastCountDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastOrderDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastUpdated: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  par: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  reorderPoint: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  maxQuantity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  barcode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currentPrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  averageCost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lastPurchasePrice: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SessionUpdateWithoutUserInputSchema: z.ZodType<Prisma.SessionUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SessionUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SessionUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PasswordResetUpdateWithoutUserInputSchema: z.ZodType<Prisma.PasswordResetUpdateWithoutUserInput> = z.object({
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PasswordResetUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.PasswordResetUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PasswordResetUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.PasswordResetUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const LeftoverItemUpdateWithoutRecordedByInputSchema: z.ZodType<Prisma.LeftoverItemUpdateWithoutRecordedByInput> = z.object({
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  reason: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneRequiredWithoutLeftoverItemsNestedInputSchema).optional(),
  menuItem: z.lazy(() => MenuItemUpdateOneRequiredWithoutLeftoverItemsNestedInputSchema).optional()
}).strict();

export const LeftoverItemUncheckedUpdateWithoutRecordedByInputSchema: z.ZodType<Prisma.LeftoverItemUncheckedUpdateWithoutRecordedByInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  menuItemId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  reason: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const LeftoverItemUncheckedUpdateManyWithoutRecordedByInputSchema: z.ZodType<Prisma.LeftoverItemUncheckedUpdateManyWithoutRecordedByInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  menuItemId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  reason: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const WasteRecordUpdateWithoutRecordedByInputSchema: z.ZodType<Prisma.WasteRecordUpdateWithoutRecordedByInput> = z.object({
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reason: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneRequiredWithoutWasteRecordsNestedInputSchema).optional(),
  ingrediente: z.lazy(() => IngredientUpdateOneRequiredWithoutWasteRecordsNestedInputSchema).optional()
}).strict();

export const WasteRecordUncheckedUpdateWithoutRecordedByInputSchema: z.ZodType<Prisma.WasteRecordUncheckedUpdateWithoutRecordedByInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ingredientId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reason: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const WasteRecordUncheckedUpdateManyWithoutRecordedByInputSchema: z.ZodType<Prisma.WasteRecordUncheckedUpdateManyWithoutRecordedByInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ingredientId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reason: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProductionPlanUpdateWithoutCreatedByInputSchema: z.ZodType<Prisma.ProductionPlanUpdateWithoutCreatedByInput> = z.object({
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ProductionStatusSchema),z.lazy(() => EnumProductionStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneRequiredWithoutProductionPlansNestedInputSchema).optional(),
  items: z.lazy(() => ProductionPlanItemUpdateManyWithoutProductionPlanNestedInputSchema).optional()
}).strict();

export const ProductionPlanUncheckedUpdateWithoutCreatedByInputSchema: z.ZodType<Prisma.ProductionPlanUncheckedUpdateWithoutCreatedByInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ProductionStatusSchema),z.lazy(() => EnumProductionStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  items: z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutProductionPlanNestedInputSchema).optional()
}).strict();

export const ProductionPlanUncheckedUpdateManyWithoutCreatedByInputSchema: z.ZodType<Prisma.ProductionPlanUncheckedUpdateManyWithoutCreatedByInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ProductionStatusSchema),z.lazy(() => EnumProductionStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProductionPlanItemUpdateWithoutAssignedToInputSchema: z.ZodType<Prisma.ProductionPlanItemUpdateWithoutAssignedToInput> = z.object({
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  productionPlan: z.lazy(() => ProductionPlanUpdateOneRequiredWithoutItemsNestedInputSchema).optional(),
  recipe: z.lazy(() => RecipeUpdateOneRequiredWithoutProductionPlanItemsNestedInputSchema).optional()
}).strict();

export const ProductionPlanItemUncheckedUpdateWithoutAssignedToInputSchema: z.ZodType<Prisma.ProductionPlanItemUncheckedUpdateWithoutAssignedToInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  productionPlanId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProductionPlanItemUncheckedUpdateManyWithoutAssignedToInputSchema: z.ZodType<Prisma.ProductionPlanItemUncheckedUpdateManyWithoutAssignedToInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  productionPlanId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AvailabilityUpdateWithoutUserInputSchema: z.ZodType<Prisma.AvailabilityUpdateWithoutUserInput> = z.object({
  dayOfWeek: z.union([ z.lazy(() => DayOfWeekSchema),z.lazy(() => EnumDayOfWeekFieldUpdateOperationsInputSchema) ]).optional(),
  startTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AvailabilityUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.AvailabilityUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  dayOfWeek: z.union([ z.lazy(() => DayOfWeekSchema),z.lazy(() => EnumDayOfWeekFieldUpdateOperationsInputSchema) ]).optional(),
  startTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AvailabilityUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.AvailabilityUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  dayOfWeek: z.union([ z.lazy(() => DayOfWeekSchema),z.lazy(() => EnumDayOfWeekFieldUpdateOperationsInputSchema) ]).optional(),
  startTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SchedulingConstraintUpdateWithoutUserInputSchema: z.ZodType<Prisma.SchedulingConstraintUpdateWithoutUserInput> = z.object({
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  constraintsType: z.union([ z.lazy(() => ConstraintTypeSchema),z.lazy(() => EnumConstraintTypeFieldUpdateOperationsInputSchema) ]).optional(),
  startTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SchedulingConstraintUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.SchedulingConstraintUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  constraintsType: z.union([ z.lazy(() => ConstraintTypeSchema),z.lazy(() => EnumConstraintTypeFieldUpdateOperationsInputSchema) ]).optional(),
  startTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SchedulingConstraintUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.SchedulingConstraintUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  constraintsType: z.union([ z.lazy(() => ConstraintTypeSchema),z.lazy(() => EnumConstraintTypeFieldUpdateOperationsInputSchema) ]).optional(),
  startTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InventoryWithdrawalUpdateWithoutCreatedByInputSchema: z.ZodType<Prisma.InventoryWithdrawalUpdateWithoutCreatedByInput> = z.object({
  dateTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  inventoryItem: z.lazy(() => InventoryItemUpdateOneRequiredWithoutWithdrawalsNestedInputSchema).optional(),
  recipe: z.lazy(() => RecipeUpdateOneWithoutWithdrawalsNestedInputSchema).optional()
}).strict();

export const InventoryWithdrawalUncheckedUpdateWithoutCreatedByInputSchema: z.ZodType<Prisma.InventoryWithdrawalUncheckedUpdateWithoutCreatedByInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inventoryItemId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  dateTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByInputSchema: z.ZodType<Prisma.InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inventoryItemId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  dateTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ChecklistCompleteUpdateWithoutCompletedByInputSchema: z.ZodType<Prisma.ChecklistCompleteUpdateWithoutCompletedByInput> = z.object({
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  checklist: z.lazy(() => QualityChecklistUpdateOneRequiredWithoutCompletionsNestedInputSchema).optional(),
  items: z.lazy(() => ChecklistItemCompleteUpdateManyWithoutChecklistCompleteNestedInputSchema).optional()
}).strict();

export const ChecklistCompleteUncheckedUpdateWithoutCompletedByInputSchema: z.ZodType<Prisma.ChecklistCompleteUncheckedUpdateWithoutCompletedByInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  checklistId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  items: z.lazy(() => ChecklistItemCompleteUncheckedUpdateManyWithoutChecklistCompleteNestedInputSchema).optional()
}).strict();

export const ChecklistCompleteUncheckedUpdateManyWithoutCompletedByInputSchema: z.ZodType<Prisma.ChecklistCompleteUncheckedUpdateManyWithoutCompletedByInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  checklistId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CustomerFeedbackUpdateWithoutRespondedByInputSchema: z.ZodType<Prisma.CustomerFeedbackUpdateWithoutRespondedByInput> = z.object({
  rating: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  comment: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  source: z.union([ z.lazy(() => FeedbackSourceSchema),z.lazy(() => EnumFeedbackSourceFieldUpdateOperationsInputSchema) ]).optional(),
  tags: z.union([ z.lazy(() => CustomerFeedbackUpdatetagsInputSchema),z.string().array() ]).optional(),
  status: z.union([ z.lazy(() => FeedbackStatusSchema),z.lazy(() => EnumFeedbackStatusFieldUpdateOperationsInputSchema) ]).optional(),
  responseText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  respondedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneRequiredWithoutCustomerFeedbacksNestedInputSchema).optional(),
  menuItem: z.lazy(() => MenuItemUpdateOneWithoutFeedbackNestedInputSchema).optional()
}).strict();

export const CustomerFeedbackUncheckedUpdateWithoutRespondedByInputSchema: z.ZodType<Prisma.CustomerFeedbackUncheckedUpdateWithoutRespondedByInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  menuItemId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  comment: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  source: z.union([ z.lazy(() => FeedbackSourceSchema),z.lazy(() => EnumFeedbackSourceFieldUpdateOperationsInputSchema) ]).optional(),
  tags: z.union([ z.lazy(() => CustomerFeedbackUpdatetagsInputSchema),z.string().array() ]).optional(),
  status: z.union([ z.lazy(() => FeedbackStatusSchema),z.lazy(() => EnumFeedbackStatusFieldUpdateOperationsInputSchema) ]).optional(),
  responseText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  respondedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CustomerFeedbackUncheckedUpdateManyWithoutRespondedByInputSchema: z.ZodType<Prisma.CustomerFeedbackUncheckedUpdateManyWithoutRespondedByInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  menuItemId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  rating: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  comment: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  source: z.union([ z.lazy(() => FeedbackSourceSchema),z.lazy(() => EnumFeedbackSourceFieldUpdateOperationsInputSchema) ]).optional(),
  tags: z.union([ z.lazy(() => CustomerFeedbackUpdatetagsInputSchema),z.string().array() ]).optional(),
  status: z.union([ z.lazy(() => FeedbackStatusSchema),z.lazy(() => EnumFeedbackStatusFieldUpdateOperationsInputSchema) ]).optional(),
  responseText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  respondedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RecipeVersionUpdateWithoutCreatedByInputSchema: z.ZodType<Prisma.RecipeVersionUpdateWithoutCreatedByInput> = z.object({
  versionNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  changes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  approvedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  recipe: z.lazy(() => RecipeUpdateOneRequiredWithoutVersionsNestedInputSchema).optional(),
  ingredients: z.lazy(() => RecipeIngredientUpdateManyWithoutRecipeVersionNestedInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUpdateManyWithoutRecipeVersionNestedInputSchema).optional(),
  approvedBy: z.lazy(() => UserUpdateOneWithoutRecipeVersionsApprovedNestedInputSchema).optional()
}).strict();

export const RecipeVersionUncheckedUpdateWithoutCreatedByInputSchema: z.ZodType<Prisma.RecipeVersionUncheckedUpdateWithoutCreatedByInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  versionNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  changes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  approvedById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approvedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ingredients: z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeVersionNestedInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeVersionNestedInputSchema).optional()
}).strict();

export const RecipeVersionUncheckedUpdateManyWithoutCreatedByInputSchema: z.ZodType<Prisma.RecipeVersionUncheckedUpdateManyWithoutCreatedByInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  versionNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  changes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  approvedById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approvedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RecipeVersionUpdateWithoutApprovedByInputSchema: z.ZodType<Prisma.RecipeVersionUpdateWithoutApprovedByInput> = z.object({
  versionNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  changes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  approvedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  recipe: z.lazy(() => RecipeUpdateOneRequiredWithoutVersionsNestedInputSchema).optional(),
  ingredients: z.lazy(() => RecipeIngredientUpdateManyWithoutRecipeVersionNestedInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUpdateManyWithoutRecipeVersionNestedInputSchema).optional(),
  createdBy: z.lazy(() => UserUpdateOneRequiredWithoutRecipeVersionsCreatedNestedInputSchema).optional()
}).strict();

export const RecipeVersionUncheckedUpdateWithoutApprovedByInputSchema: z.ZodType<Prisma.RecipeVersionUncheckedUpdateWithoutApprovedByInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  versionNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  changes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  approvedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ingredients: z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeVersionNestedInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeVersionNestedInputSchema).optional()
}).strict();

export const RecipeVersionUncheckedUpdateManyWithoutApprovedByInputSchema: z.ZodType<Prisma.RecipeVersionUncheckedUpdateManyWithoutApprovedByInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  versionNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  changes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  approvedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InventoryTransactionUpdateWithoutCreatedByInputSchema: z.ZodType<Prisma.InventoryTransactionUpdateWithoutCreatedByInput> = z.object({
  type: z.union([ z.lazy(() => TransactionTypeSchema),z.lazy(() => EnumTransactionTypeFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  previousQty: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  newQty: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  cost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reference: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  inventory: z.lazy(() => InventoryUpdateOneRequiredWithoutTransactionsNestedInputSchema).optional(),
  item: z.lazy(() => InventoryItemUpdateOneRequiredWithoutTransactionsNestedInputSchema).optional()
}).strict();

export const InventoryTransactionUncheckedUpdateWithoutCreatedByInputSchema: z.ZodType<Prisma.InventoryTransactionUncheckedUpdateWithoutCreatedByInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inventoryId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  itemId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => TransactionTypeSchema),z.lazy(() => EnumTransactionTypeFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  previousQty: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  newQty: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  cost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reference: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InventoryTransactionUncheckedUpdateManyWithoutCreatedByInputSchema: z.ZodType<Prisma.InventoryTransactionUncheckedUpdateManyWithoutCreatedByInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inventoryId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  itemId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => TransactionTypeSchema),z.lazy(() => EnumTransactionTypeFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  previousQty: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  newQty: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  cost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reference: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const StockCountUpdateWithoutCreatedByInputSchema: z.ZodType<Prisma.StockCountUpdateWithoutCreatedByInput> = z.object({
  status: z.union([ z.lazy(() => CountStatusSchema),z.lazy(() => EnumCountStatusFieldUpdateOperationsInputSchema) ]).optional(),
  startedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inventory: z.lazy(() => InventoryUpdateOneRequiredWithoutStockCountsNestedInputSchema).optional(),
  items: z.lazy(() => StockCountItemUpdateManyWithoutStockCountNestedInputSchema).optional()
}).strict();

export const StockCountUncheckedUpdateWithoutCreatedByInputSchema: z.ZodType<Prisma.StockCountUncheckedUpdateWithoutCreatedByInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inventoryId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => CountStatusSchema),z.lazy(() => EnumCountStatusFieldUpdateOperationsInputSchema) ]).optional(),
  startedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  items: z.lazy(() => StockCountItemUncheckedUpdateManyWithoutStockCountNestedInputSchema).optional()
}).strict();

export const StockCountUncheckedUpdateManyWithoutCreatedByInputSchema: z.ZodType<Prisma.StockCountUncheckedUpdateManyWithoutCreatedByInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inventoryId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => CountStatusSchema),z.lazy(() => EnumCountStatusFieldUpdateOperationsInputSchema) ]).optional(),
  startedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  completedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const RecipeCreateManyCookBookInputSchema: z.ZodType<Prisma.RecipeCreateManyCookBookInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  imageUrls: z.union([ z.lazy(() => RecipeCreateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.string().optional().nullable(),
  servings: z.number().int(),
  cookTime: z.number().int(),
  prepTime: z.number().int(),
  frequency: z.number().int().optional().nullable(),
  restaurantId: z.number().int(),
  foodCost: z.number().optional().nullable(),
  isDeleted: z.boolean().optional(),
  isPublished: z.boolean().optional(),
  publishedAt: z.coerce.date().optional().nullable(),
  language: z.string().optional(),
  skillLevel: z.lazy(() => SkillLevelSchema).optional(),
  category: z.lazy(() => CategorySchema).optional()
}).strict();

export const RecipeUpdateWithoutCookBookInputSchema: z.ZodType<Prisma.RecipeUpdateWithoutCookBookInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrls: z.union([ z.lazy(() => RecipeUpdateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  servings: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isPublished: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  publishedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  skillLevel: z.union([ z.lazy(() => SkillLevelSchema),z.lazy(() => EnumSkillLevelFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => CategorySchema),z.lazy(() => EnumCategoryFieldUpdateOperationsInputSchema) ]).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  ingredients: z.lazy(() => RecipeIngredientUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUpdateManyWithoutRecipeNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUpdateManyWithoutRecipesNestedInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUpdateManyWithoutRecipeNestedInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUpdateManyWithoutRecipeNestedInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUpdateManyWithoutRecipeNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUpdateOneWithoutRecipeNestedInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUpdateManyWithoutRecipeNestedInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUpdateOneWithoutRecipeNestedInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUpdateManyWithoutRecipeNestedInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUpdateOneWithoutRecipeNestedInputSchema).optional()
}).strict();

export const RecipeUncheckedUpdateWithoutCookBookInputSchema: z.ZodType<Prisma.RecipeUncheckedUpdateWithoutCookBookInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrls: z.union([ z.lazy(() => RecipeUpdateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  servings: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isPublished: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  publishedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  skillLevel: z.union([ z.lazy(() => SkillLevelSchema),z.lazy(() => EnumSkillLevelFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => CategorySchema),z.lazy(() => EnumCategoryFieldUpdateOperationsInputSchema) ]).optional(),
  ingredients: z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional()
}).strict();

export const RecipeUncheckedUpdateManyWithoutCookBookInputSchema: z.ZodType<Prisma.RecipeUncheckedUpdateManyWithoutCookBookInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrls: z.union([ z.lazy(() => RecipeUpdateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  servings: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isPublished: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  publishedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  skillLevel: z.union([ z.lazy(() => SkillLevelSchema),z.lazy(() => EnumSkillLevelFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => CategorySchema),z.lazy(() => EnumCategoryFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RecipeIngredientCreateManyRecipeInputSchema: z.ZodType<Prisma.RecipeIngredientCreateManyRecipeInput> = z.object({
  id: z.number().int().optional(),
  ingredientId: z.number().int(),
  quantity: z.number(),
  unit: z.string(),
  processingInstructions: z.string().optional().nullable(),
  substituteIngredients: z.union([ z.lazy(() => RecipeIngredientCreatesubstituteIngredientsInputSchema),z.number().int().array() ]).optional(),
  isOptional: z.boolean().optional(),
  notes: z.string().optional().nullable(),
  cost: z.number().optional().nullable(),
  density: z.number().optional().nullable(),
  yield: z.number().optional().nullable(),
  joinAt: z.coerce.date().optional(),
  recipeVersionId: z.number().int().optional().nullable()
}).strict();

export const RecipeInstructionCreateManyRecipeInputSchema: z.ZodType<Prisma.RecipeInstructionCreateManyRecipeInput> = z.object({
  id: z.number().int().optional(),
  stepNumber: z.number().int(),
  instruction: z.string(),
  imageUrl: z.string().optional().nullable(),
  recipeVersionId: z.number().int().optional().nullable(),
  timeInMinutes: z.number().int().optional().nullable(),
  temperature: z.number().optional().nullable(),
  temperatureUnit: z.string().optional().nullable(),
  isCritical: z.boolean().optional(),
  techniqueTips: z.string().optional().nullable(),
  warningNotes: z.string().optional().nullable()
}).strict();

export const FoodCostHistoryCreateManyRecipeInputSchema: z.ZodType<Prisma.FoodCostHistoryCreateManyRecipeInput> = z.object({
  id: z.number().int().optional(),
  cost: z.number(),
  date: z.coerce.date(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const PrepHistoryCreateManyRecipeInputSchema: z.ZodType<Prisma.PrepHistoryCreateManyRecipeInput> = z.object({
  id: z.number().int().optional(),
  quantity: z.number().int(),
  date: z.coerce.date(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const PrepItemCreateManyRecipeInputSchema: z.ZodType<Prisma.PrepItemCreateManyRecipeInput> = z.object({
  id: z.number().int().optional(),
  prepBoardId: z.number().int(),
  quantity: z.number().int(),
  status: z.lazy(() => PrepStatusSchema),
  assignedToId: z.number().int()
}).strict();

export const MenuItemRecipeCreateManyRecipeInputSchema: z.ZodType<Prisma.MenuItemRecipeCreateManyRecipeInput> = z.object({
  id: z.number().int().optional(),
  menuItemId: z.number().int(),
  joinAt: z.coerce.date().optional()
}).strict();

export const ProductionPlanItemCreateManyRecipeInputSchema: z.ZodType<Prisma.ProductionPlanItemCreateManyRecipeInput> = z.object({
  id: z.number().int().optional(),
  productionPlanId: z.number().int(),
  quantity: z.number().int(),
  unit: z.string(),
  assignedToId: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const InventoryWithdrawalCreateManyRecipeInputSchema: z.ZodType<Prisma.InventoryWithdrawalCreateManyRecipeInput> = z.object({
  id: z.number().int().optional(),
  inventoryItemId: z.number().int(),
  dateTime: z.coerce.date(),
  quantity: z.number(),
  unit: z.string(),
  createdById: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const RecipeVersionCreateManyRecipeInputSchema: z.ZodType<Prisma.RecipeVersionCreateManyRecipeInput> = z.object({
  id: z.number().int().optional(),
  versionNumber: z.number().int(),
  description: z.string().optional().nullable(),
  changes: z.string().optional().nullable(),
  isActive: z.boolean().optional(),
  createdById: z.number().int(),
  approvedById: z.number().int().optional().nullable(),
  approvedAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const RecipeEquipmentCreateManyRecipeInputSchema: z.ZodType<Prisma.RecipeEquipmentCreateManyRecipeInput> = z.object({
  id: z.number().int().optional(),
  equipmentId: z.number().int(),
  notes: z.string().optional().nullable(),
  recipeInstructionId: z.number().int().optional().nullable()
}).strict();

export const RecipeTemperatureCreateManyRecipeInputSchema: z.ZodType<Prisma.RecipeTemperatureCreateManyRecipeInput> = z.object({
  id: z.number().int().optional(),
  stepNumber: z.number().int(),
  minTemp: z.number(),
  maxTemp: z.number(),
  isCritical: z.boolean().optional(),
  holdTime: z.number().int().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const RecipeYieldCreateManyRecipeInputSchema: z.ZodType<Prisma.RecipeYieldCreateManyRecipeInput> = z.object({
  id: z.number().int().optional(),
  expectedYield: z.number(),
  actualYield: z.number().optional().nullable(),
  unit: z.string(),
  wastagePercent: z.number().optional().nullable(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const RecipeLaborCostCreateManyRecipeInputSchema: z.ZodType<Prisma.RecipeLaborCostCreateManyRecipeInput> = z.object({
  id: z.number().int().optional(),
  prepTime: z.number().int(),
  cookTime: z.number().int(),
  laborRate: z.number(),
  totalLaborCost: z.number(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const RecipeCriticalPointCreateManyRecipeInputSchema: z.ZodType<Prisma.RecipeCriticalPointCreateManyRecipeInput> = z.object({
  id: z.number().int().optional(),
  stepNumber: z.number().int(),
  description: z.string(),
  threshold: z.number().optional().nullable(),
  unit: z.string().optional().nullable(),
  action: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const RecipePhotoCreateManyRecipeInputSchema: z.ZodType<Prisma.RecipePhotoCreateManyRecipeInput> = z.object({
  id: z.number().int().optional(),
  url: z.string(),
  type: z.lazy(() => PhotoTypeSchema),
  stepNumber: z.number().int().optional().nullable(),
  description: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const RecipeIngredientUpdateWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeIngredientUpdateWithoutRecipeInput> = z.object({
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  processingInstructions: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  substituteIngredients: z.union([ z.lazy(() => RecipeIngredientUpdatesubstituteIngredientsInputSchema),z.number().int().array() ]).optional(),
  isOptional: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  cost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  density: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  yield: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  joinAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ingredient: z.lazy(() => IngredientUpdateOneRequiredWithoutRecipeIngredientsNestedInputSchema).optional(),
  recipeVersion: z.lazy(() => RecipeVersionUpdateOneWithoutIngredientsNestedInputSchema).optional()
}).strict();

export const RecipeIngredientUncheckedUpdateWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeIngredientUncheckedUpdateWithoutRecipeInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ingredientId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  processingInstructions: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  substituteIngredients: z.union([ z.lazy(() => RecipeIngredientUpdatesubstituteIngredientsInputSchema),z.number().int().array() ]).optional(),
  isOptional: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  cost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  density: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  yield: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  joinAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  recipeVersionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const RecipeIngredientUncheckedUpdateManyWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeIngredientUncheckedUpdateManyWithoutRecipeInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ingredientId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  processingInstructions: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  substituteIngredients: z.union([ z.lazy(() => RecipeIngredientUpdatesubstituteIngredientsInputSchema),z.number().int().array() ]).optional(),
  isOptional: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  cost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  density: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  yield: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  joinAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  recipeVersionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const RecipeInstructionUpdateWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeInstructionUpdateWithoutRecipeInput> = z.object({
  stepNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  instruction: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timeInMinutes: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  temperature: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  temperatureUnit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isCritical: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  techniqueTips: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  warningNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  RecipeVersion: z.lazy(() => RecipeVersionUpdateOneWithoutInstructionsNestedInputSchema).optional(),
  equipment: z.lazy(() => RecipeEquipmentUpdateManyWithoutRecipeInstructionNestedInputSchema).optional()
}).strict();

export const RecipeInstructionUncheckedUpdateWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeInstructionUncheckedUpdateWithoutRecipeInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  stepNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  instruction: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recipeVersionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timeInMinutes: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  temperature: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  temperatureUnit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isCritical: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  techniqueTips: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  warningNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  equipment: z.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutRecipeInstructionNestedInputSchema).optional()
}).strict();

export const RecipeInstructionUncheckedUpdateManyWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeInstructionUncheckedUpdateManyWithoutRecipeInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  stepNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  instruction: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrl: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recipeVersionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timeInMinutes: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  temperature: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  temperatureUnit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isCritical: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  techniqueTips: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  warningNotes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const MenuItemUpdateWithoutRecipesInputSchema: z.ZodType<Prisma.MenuItemUpdateWithoutRecipesInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  recipeIds: z.union([ z.lazy(() => MenuItemUpdaterecipeIdsInputSchema),z.number().int().array() ]).optional(),
  recipeServingsAmount: z.union([ z.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema),z.number().array() ]).optional(),
  recipeServingsCost: z.union([ z.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema),z.number().array() ]).optional(),
  allergens: z.union([ z.lazy(() => MenuItemUpdateallergensInputSchema),z.string().array() ]).optional(),
  menu: z.lazy(() => MenuUpdateOneRequiredWithoutMenuItemsNestedInputSchema).optional(),
  category: z.lazy(() => MenuCategoryUpdateOneWithoutMenuItemsNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => NutritionalInfoUpdateOneWithoutMenuItemNestedInputSchema).optional(),
  recommendations: z.lazy(() => NutritionalRecommendationUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  feedback: z.lazy(() => CustomerFeedbackUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUpdateManyWithoutMenuItemsNestedInputSchema).optional()
}).strict();

export const MenuItemUncheckedUpdateWithoutRecipesInputSchema: z.ZodType<Prisma.MenuItemUncheckedUpdateWithoutRecipesInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  recipeIds: z.union([ z.lazy(() => MenuItemUpdaterecipeIdsInputSchema),z.number().int().array() ]).optional(),
  recipeServingsAmount: z.union([ z.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema),z.number().array() ]).optional(),
  recipeServingsCost: z.union([ z.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema),z.number().array() ]).optional(),
  allergens: z.union([ z.lazy(() => MenuItemUpdateallergensInputSchema),z.string().array() ]).optional(),
  menuId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  categoryId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => NutritionalInfoUncheckedUpdateOneWithoutMenuItemNestedInputSchema).optional(),
  recommendations: z.lazy(() => NutritionalRecommendationUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  feedback: z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutMenuItemsNestedInputSchema).optional()
}).strict();

export const MenuItemUncheckedUpdateManyWithoutRecipesInputSchema: z.ZodType<Prisma.MenuItemUncheckedUpdateManyWithoutRecipesInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  recipeIds: z.union([ z.lazy(() => MenuItemUpdaterecipeIdsInputSchema),z.number().int().array() ]).optional(),
  recipeServingsAmount: z.union([ z.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema),z.number().array() ]).optional(),
  recipeServingsCost: z.union([ z.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema),z.number().array() ]).optional(),
  allergens: z.union([ z.lazy(() => MenuItemUpdateallergensInputSchema),z.string().array() ]).optional(),
  menuId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  categoryId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const FoodCostHistoryUpdateWithoutRecipeInputSchema: z.ZodType<Prisma.FoodCostHistoryUpdateWithoutRecipeInput> = z.object({
  cost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FoodCostHistoryUncheckedUpdateWithoutRecipeInputSchema: z.ZodType<Prisma.FoodCostHistoryUncheckedUpdateWithoutRecipeInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FoodCostHistoryUncheckedUpdateManyWithoutRecipeInputSchema: z.ZodType<Prisma.FoodCostHistoryUncheckedUpdateManyWithoutRecipeInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PrepHistoryUpdateWithoutRecipeInputSchema: z.ZodType<Prisma.PrepHistoryUpdateWithoutRecipeInput> = z.object({
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PrepHistoryUncheckedUpdateWithoutRecipeInputSchema: z.ZodType<Prisma.PrepHistoryUncheckedUpdateWithoutRecipeInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PrepHistoryUncheckedUpdateManyWithoutRecipeInputSchema: z.ZodType<Prisma.PrepHistoryUncheckedUpdateManyWithoutRecipeInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PrepBoardUpdateWithoutRecipesInputSchema: z.ZodType<Prisma.PrepBoardUpdateWithoutRecipesInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => PrepStatusSchema),z.lazy(() => EnumPrepStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  prepItems: z.lazy(() => PrepItemUpdateManyWithoutPrepBoardNestedInputSchema).optional()
}).strict();

export const PrepBoardUncheckedUpdateWithoutRecipesInputSchema: z.ZodType<Prisma.PrepBoardUncheckedUpdateWithoutRecipesInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => PrepStatusSchema),z.lazy(() => EnumPrepStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedUpdateManyWithoutPrepBoardNestedInputSchema).optional()
}).strict();

export const PrepBoardUncheckedUpdateManyWithoutRecipesInputSchema: z.ZodType<Prisma.PrepBoardUncheckedUpdateManyWithoutRecipesInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => PrepStatusSchema),z.lazy(() => EnumPrepStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PrepItemUpdateWithoutRecipeInputSchema: z.ZodType<Prisma.PrepItemUpdateWithoutRecipeInput> = z.object({
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => PrepStatusSchema),z.lazy(() => EnumPrepStatusFieldUpdateOperationsInputSchema) ]).optional(),
  prepBoard: z.lazy(() => PrepBoardUpdateOneRequiredWithoutPrepItemsNestedInputSchema).optional(),
  assignedTo: z.lazy(() => UserUpdateOneRequiredWithoutPrepItemsNestedInputSchema).optional()
}).strict();

export const PrepItemUncheckedUpdateWithoutRecipeInputSchema: z.ZodType<Prisma.PrepItemUncheckedUpdateWithoutRecipeInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepBoardId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => PrepStatusSchema),z.lazy(() => EnumPrepStatusFieldUpdateOperationsInputSchema) ]).optional(),
  assignedToId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PrepItemUncheckedUpdateManyWithoutRecipeInputSchema: z.ZodType<Prisma.PrepItemUncheckedUpdateManyWithoutRecipeInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepBoardId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => PrepStatusSchema),z.lazy(() => EnumPrepStatusFieldUpdateOperationsInputSchema) ]).optional(),
  assignedToId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MenuItemRecipeUpdateWithoutRecipeInputSchema: z.ZodType<Prisma.MenuItemRecipeUpdateWithoutRecipeInput> = z.object({
  joinAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  menuItem: z.lazy(() => MenuItemUpdateOneRequiredWithoutMenuItemRecipesNestedInputSchema).optional()
}).strict();

export const MenuItemRecipeUncheckedUpdateWithoutRecipeInputSchema: z.ZodType<Prisma.MenuItemRecipeUncheckedUpdateWithoutRecipeInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  menuItemId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  joinAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MenuItemRecipeUncheckedUpdateManyWithoutRecipeInputSchema: z.ZodType<Prisma.MenuItemRecipeUncheckedUpdateManyWithoutRecipeInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  menuItemId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  joinAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProductionPlanItemUpdateWithoutRecipeInputSchema: z.ZodType<Prisma.ProductionPlanItemUpdateWithoutRecipeInput> = z.object({
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  productionPlan: z.lazy(() => ProductionPlanUpdateOneRequiredWithoutItemsNestedInputSchema).optional(),
  assignedTo: z.lazy(() => UserUpdateOneWithoutProductionPlanItemsNestedInputSchema).optional()
}).strict();

export const ProductionPlanItemUncheckedUpdateWithoutRecipeInputSchema: z.ZodType<Prisma.ProductionPlanItemUncheckedUpdateWithoutRecipeInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  productionPlanId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assignedToId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ProductionPlanItemUncheckedUpdateManyWithoutRecipeInputSchema: z.ZodType<Prisma.ProductionPlanItemUncheckedUpdateManyWithoutRecipeInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  productionPlanId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  assignedToId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InventoryWithdrawalUpdateWithoutRecipeInputSchema: z.ZodType<Prisma.InventoryWithdrawalUpdateWithoutRecipeInput> = z.object({
  dateTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  inventoryItem: z.lazy(() => InventoryItemUpdateOneRequiredWithoutWithdrawalsNestedInputSchema).optional(),
  createdBy: z.lazy(() => UserUpdateOneRequiredWithoutInventoryWithdrawalsNestedInputSchema).optional()
}).strict();

export const InventoryWithdrawalUncheckedUpdateWithoutRecipeInputSchema: z.ZodType<Prisma.InventoryWithdrawalUncheckedUpdateWithoutRecipeInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inventoryItemId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  dateTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InventoryWithdrawalUncheckedUpdateManyWithoutRecipeInputSchema: z.ZodType<Prisma.InventoryWithdrawalUncheckedUpdateManyWithoutRecipeInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inventoryItemId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  dateTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RecipeTagUpdateWithoutRecipesInputSchema: z.ZodType<Prisma.RecipeTagUpdateWithoutRecipesInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RecipeTagUncheckedUpdateWithoutRecipesInputSchema: z.ZodType<Prisma.RecipeTagUncheckedUpdateWithoutRecipesInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RecipeTagUncheckedUpdateManyWithoutRecipesInputSchema: z.ZodType<Prisma.RecipeTagUncheckedUpdateManyWithoutRecipesInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RecipeVersionUpdateWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeVersionUpdateWithoutRecipeInput> = z.object({
  versionNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  changes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  approvedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ingredients: z.lazy(() => RecipeIngredientUpdateManyWithoutRecipeVersionNestedInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUpdateManyWithoutRecipeVersionNestedInputSchema).optional(),
  createdBy: z.lazy(() => UserUpdateOneRequiredWithoutRecipeVersionsCreatedNestedInputSchema).optional(),
  approvedBy: z.lazy(() => UserUpdateOneWithoutRecipeVersionsApprovedNestedInputSchema).optional()
}).strict();

export const RecipeVersionUncheckedUpdateWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeVersionUncheckedUpdateWithoutRecipeInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  versionNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  changes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  approvedById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approvedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ingredients: z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeVersionNestedInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeVersionNestedInputSchema).optional()
}).strict();

export const RecipeVersionUncheckedUpdateManyWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeVersionUncheckedUpdateManyWithoutRecipeInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  versionNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  changes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdById: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  approvedById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  approvedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RecipeEquipmentUpdateWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeEquipmentUpdateWithoutRecipeInput> = z.object({
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  equipment: z.lazy(() => EquipmentUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  RecipeInstruction: z.lazy(() => RecipeInstructionUpdateOneWithoutEquipmentNestedInputSchema).optional()
}).strict();

export const RecipeEquipmentUncheckedUpdateWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeEquipmentUncheckedUpdateWithoutRecipeInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  equipmentId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recipeInstructionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const RecipeEquipmentUncheckedUpdateManyWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeEquipmentUncheckedUpdateManyWithoutRecipeInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  equipmentId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recipeInstructionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const DietaryRestrictionUpdateWithoutRecipesInputSchema: z.ZodType<Prisma.DietaryRestrictionUpdateWithoutRecipesInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  icon: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  menuItems: z.lazy(() => MenuItemUpdateManyWithoutDietaryRestrictionsNestedInputSchema).optional(),
  ingredients: z.lazy(() => IngredientUpdateManyWithoutDietaryRestrictionsNestedInputSchema).optional()
}).strict();

export const DietaryRestrictionUncheckedUpdateWithoutRecipesInputSchema: z.ZodType<Prisma.DietaryRestrictionUncheckedUpdateWithoutRecipesInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  icon: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  menuItems: z.lazy(() => MenuItemUncheckedUpdateManyWithoutDietaryRestrictionsNestedInputSchema).optional(),
  ingredients: z.lazy(() => IngredientUncheckedUpdateManyWithoutDietaryRestrictionsNestedInputSchema).optional()
}).strict();

export const DietaryRestrictionUncheckedUpdateManyWithoutRecipesInputSchema: z.ZodType<Prisma.DietaryRestrictionUncheckedUpdateManyWithoutRecipesInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  icon: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RecipeTemperatureUpdateWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeTemperatureUpdateWithoutRecipeInput> = z.object({
  stepNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  minTemp: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  maxTemp: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  isCritical: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  holdTime: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RecipeTemperatureUncheckedUpdateWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeTemperatureUncheckedUpdateWithoutRecipeInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  stepNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  minTemp: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  maxTemp: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  isCritical: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  holdTime: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RecipeTemperatureUncheckedUpdateManyWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeTemperatureUncheckedUpdateManyWithoutRecipeInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  stepNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  minTemp: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  maxTemp: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  isCritical: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  holdTime: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RecipeYieldUpdateWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeYieldUpdateWithoutRecipeInput> = z.object({
  expectedYield: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  actualYield: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  wastagePercent: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RecipeYieldUncheckedUpdateWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeYieldUncheckedUpdateWithoutRecipeInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  expectedYield: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  actualYield: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  wastagePercent: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RecipeYieldUncheckedUpdateManyWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeYieldUncheckedUpdateManyWithoutRecipeInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  expectedYield: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  actualYield: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  wastagePercent: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RecipeLaborCostUpdateWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeLaborCostUpdateWithoutRecipeInput> = z.object({
  prepTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  laborRate: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  totalLaborCost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RecipeLaborCostUncheckedUpdateWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeLaborCostUncheckedUpdateWithoutRecipeInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  laborRate: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  totalLaborCost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RecipeLaborCostUncheckedUpdateManyWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeLaborCostUncheckedUpdateManyWithoutRecipeInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  laborRate: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  totalLaborCost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RecipeCriticalPointUpdateWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeCriticalPointUpdateWithoutRecipeInput> = z.object({
  stepNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  threshold: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  unit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RecipeCriticalPointUncheckedUpdateWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeCriticalPointUncheckedUpdateWithoutRecipeInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  stepNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  threshold: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  unit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RecipeCriticalPointUncheckedUpdateManyWithoutRecipeInputSchema: z.ZodType<Prisma.RecipeCriticalPointUncheckedUpdateManyWithoutRecipeInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  stepNumber: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  threshold: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  unit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RecipePhotoUpdateWithoutRecipeInputSchema: z.ZodType<Prisma.RecipePhotoUpdateWithoutRecipeInput> = z.object({
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => PhotoTypeSchema),z.lazy(() => EnumPhotoTypeFieldUpdateOperationsInputSchema) ]).optional(),
  stepNumber: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RecipePhotoUncheckedUpdateWithoutRecipeInputSchema: z.ZodType<Prisma.RecipePhotoUncheckedUpdateWithoutRecipeInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => PhotoTypeSchema),z.lazy(() => EnumPhotoTypeFieldUpdateOperationsInputSchema) ]).optional(),
  stepNumber: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RecipePhotoUncheckedUpdateManyWithoutRecipeInputSchema: z.ZodType<Prisma.RecipePhotoUncheckedUpdateManyWithoutRecipeInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => PhotoTypeSchema),z.lazy(() => EnumPhotoTypeFieldUpdateOperationsInputSchema) ]).optional(),
  stepNumber: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RecipeIngredientCreateManyIngredientInputSchema: z.ZodType<Prisma.RecipeIngredientCreateManyIngredientInput> = z.object({
  id: z.number().int().optional(),
  recipeId: z.number().int(),
  quantity: z.number(),
  unit: z.string(),
  processingInstructions: z.string().optional().nullable(),
  substituteIngredients: z.union([ z.lazy(() => RecipeIngredientCreatesubstituteIngredientsInputSchema),z.number().int().array() ]).optional(),
  isOptional: z.boolean().optional(),
  notes: z.string().optional().nullable(),
  cost: z.number().optional().nullable(),
  density: z.number().optional().nullable(),
  yield: z.number().optional().nullable(),
  joinAt: z.coerce.date().optional(),
  recipeVersionId: z.number().int().optional().nullable()
}).strict();

export const InventoryItemCreateManyIngredientInputSchema: z.ZodType<Prisma.InventoryItemCreateManyIngredientInput> = z.object({
  id: z.number().int().optional(),
  inventoryId: z.number().int(),
  quantity: z.number(),
  unit: z.string(),
  minQuantity: z.number(),
  restockThreshold: z.number(),
  lastCountDate: z.coerce.date().optional().nullable(),
  lastOrderDate: z.coerce.date().optional().nullable(),
  lastUpdatedById: z.number().int().optional().nullable(),
  lastUpdated: z.coerce.date().optional(),
  par: z.number(),
  reorderPoint: z.number(),
  maxQuantity: z.number().optional().nullable(),
  location: z.string().optional().nullable(),
  barcode: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  currentPrice: z.number(),
  averageCost: z.number(),
  lastPurchasePrice: z.number().optional().nullable()
}).strict();

export const OrderItemCreateManyIngredientInputSchema: z.ZodType<Prisma.OrderItemCreateManyIngredientInput> = z.object({
  id: z.number().int().optional(),
  orderId: z.number().int(),
  quantity: z.number(),
  unit: z.string(),
  price: z.number()
}).strict();

export const WasteRecordCreateManyIngredienteInputSchema: z.ZodType<Prisma.WasteRecordCreateManyIngredienteInput> = z.object({
  id: z.number().int().optional(),
  restaurantId: z.number().int(),
  date: z.coerce.date(),
  quantity: z.number(),
  unit: z.string(),
  reason: z.string(),
  recordedById: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const IngredientAllergenCreateManyIngredientInputSchema: z.ZodType<Prisma.IngredientAllergenCreateManyIngredientInput> = z.object({
  id: z.number().int().optional(),
  allergenId: z.number().int()
}).strict();

export const SupplierPriceHistoryCreateManyIngredientInputSchema: z.ZodType<Prisma.SupplierPriceHistoryCreateManyIngredientInput> = z.object({
  id: z.number().int().optional(),
  vendorId: z.number().int(),
  price: z.number(),
  unit: z.string(),
  startDate: z.coerce.date(),
  endDate: z.coerce.date().optional().nullable(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const RecipeIngredientUpdateWithoutIngredientInputSchema: z.ZodType<Prisma.RecipeIngredientUpdateWithoutIngredientInput> = z.object({
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  processingInstructions: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  substituteIngredients: z.union([ z.lazy(() => RecipeIngredientUpdatesubstituteIngredientsInputSchema),z.number().int().array() ]).optional(),
  isOptional: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  cost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  density: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  yield: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  joinAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  recipe: z.lazy(() => RecipeUpdateOneRequiredWithoutIngredientsNestedInputSchema).optional(),
  recipeVersion: z.lazy(() => RecipeVersionUpdateOneWithoutIngredientsNestedInputSchema).optional()
}).strict();

export const RecipeIngredientUncheckedUpdateWithoutIngredientInputSchema: z.ZodType<Prisma.RecipeIngredientUncheckedUpdateWithoutIngredientInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  processingInstructions: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  substituteIngredients: z.union([ z.lazy(() => RecipeIngredientUpdatesubstituteIngredientsInputSchema),z.number().int().array() ]).optional(),
  isOptional: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  cost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  density: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  yield: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  joinAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  recipeVersionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const RecipeIngredientUncheckedUpdateManyWithoutIngredientInputSchema: z.ZodType<Prisma.RecipeIngredientUncheckedUpdateManyWithoutIngredientInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  processingInstructions: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  substituteIngredients: z.union([ z.lazy(() => RecipeIngredientUpdatesubstituteIngredientsInputSchema),z.number().int().array() ]).optional(),
  isOptional: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  cost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  density: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  yield: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  joinAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  recipeVersionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const InventoryItemUpdateWithoutIngredientInputSchema: z.ZodType<Prisma.InventoryItemUpdateWithoutIngredientInput> = z.object({
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  minQuantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  restockThreshold: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lastCountDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastOrderDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastUpdated: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  par: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  reorderPoint: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  maxQuantity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  barcode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currentPrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  averageCost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lastPurchasePrice: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inventory: z.lazy(() => InventoryUpdateOneRequiredWithoutItemsNestedInputSchema).optional(),
  lastUpdatedBy: z.lazy(() => UserUpdateOneWithoutInventoryUpdatesNestedInputSchema).optional(),
  transactions: z.lazy(() => InventoryTransactionUpdateManyWithoutItemNestedInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUpdateManyWithoutInventoryItemNestedInputSchema).optional(),
  stockCounts: z.lazy(() => StockCountItemUpdateManyWithoutItemNestedInputSchema).optional()
}).strict();

export const InventoryItemUncheckedUpdateWithoutIngredientInputSchema: z.ZodType<Prisma.InventoryItemUncheckedUpdateWithoutIngredientInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inventoryId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  minQuantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  restockThreshold: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lastCountDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastOrderDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastUpdatedById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastUpdated: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  par: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  reorderPoint: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  maxQuantity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  barcode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currentPrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  averageCost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lastPurchasePrice: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  transactions: z.lazy(() => InventoryTransactionUncheckedUpdateManyWithoutItemNestedInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutInventoryItemNestedInputSchema).optional(),
  stockCounts: z.lazy(() => StockCountItemUncheckedUpdateManyWithoutItemNestedInputSchema).optional()
}).strict();

export const InventoryItemUncheckedUpdateManyWithoutIngredientInputSchema: z.ZodType<Prisma.InventoryItemUncheckedUpdateManyWithoutIngredientInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inventoryId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  minQuantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  restockThreshold: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lastCountDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastOrderDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastUpdatedById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lastUpdated: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  par: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  reorderPoint: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  maxQuantity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  barcode: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  currentPrice: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  averageCost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lastPurchasePrice: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const OrderItemUpdateWithoutIngredientInputSchema: z.ZodType<Prisma.OrderItemUpdateWithoutIngredientInput> = z.object({
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.lazy(() => OrderUpdateOneRequiredWithoutItemsNestedInputSchema).optional()
}).strict();

export const OrderItemUncheckedUpdateWithoutIngredientInputSchema: z.ZodType<Prisma.OrderItemUncheckedUpdateWithoutIngredientInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  orderId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const OrderItemUncheckedUpdateManyWithoutIngredientInputSchema: z.ZodType<Prisma.OrderItemUncheckedUpdateManyWithoutIngredientInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  orderId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const VendorUpdateWithoutIngredientsInputSchema: z.ZodType<Prisma.VendorUpdateWithoutIngredientsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  contact: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  orders: z.lazy(() => OrderUpdateManyWithoutVendorNestedInputSchema).optional(),
  supplierPriceHistory: z.lazy(() => SupplierPriceHistoryUpdateManyWithoutVendorNestedInputSchema).optional()
}).strict();

export const VendorUncheckedUpdateWithoutIngredientsInputSchema: z.ZodType<Prisma.VendorUncheckedUpdateWithoutIngredientsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  contact: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  orders: z.lazy(() => OrderUncheckedUpdateManyWithoutVendorNestedInputSchema).optional(),
  supplierPriceHistory: z.lazy(() => SupplierPriceHistoryUncheckedUpdateManyWithoutVendorNestedInputSchema).optional()
}).strict();

export const VendorUncheckedUpdateManyWithoutIngredientsInputSchema: z.ZodType<Prisma.VendorUncheckedUpdateManyWithoutIngredientsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  contact: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const WasteRecordUpdateWithoutIngredienteInputSchema: z.ZodType<Prisma.WasteRecordUpdateWithoutIngredienteInput> = z.object({
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reason: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneRequiredWithoutWasteRecordsNestedInputSchema).optional(),
  recordedBy: z.lazy(() => UserUpdateOneRequiredWithoutWasteRecordsNestedInputSchema).optional()
}).strict();

export const WasteRecordUncheckedUpdateWithoutIngredienteInputSchema: z.ZodType<Prisma.WasteRecordUncheckedUpdateWithoutIngredienteInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reason: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  recordedById: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const WasteRecordUncheckedUpdateManyWithoutIngredienteInputSchema: z.ZodType<Prisma.WasteRecordUncheckedUpdateManyWithoutIngredienteInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reason: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  recordedById: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const IngredientAllergenUpdateWithoutIngredientInputSchema: z.ZodType<Prisma.IngredientAllergenUpdateWithoutIngredientInput> = z.object({
  allergen: z.lazy(() => AllergenUpdateOneRequiredWithoutIngredientsNestedInputSchema).optional()
}).strict();

export const IngredientAllergenUncheckedUpdateWithoutIngredientInputSchema: z.ZodType<Prisma.IngredientAllergenUncheckedUpdateWithoutIngredientInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  allergenId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const IngredientAllergenUncheckedUpdateManyWithoutIngredientInputSchema: z.ZodType<Prisma.IngredientAllergenUncheckedUpdateManyWithoutIngredientInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  allergenId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SupplierPriceHistoryUpdateWithoutIngredientInputSchema: z.ZodType<Prisma.SupplierPriceHistoryUpdateWithoutIngredientInput> = z.object({
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  vendor: z.lazy(() => VendorUpdateOneRequiredWithoutSupplierPriceHistoryNestedInputSchema).optional()
}).strict();

export const SupplierPriceHistoryUncheckedUpdateWithoutIngredientInputSchema: z.ZodType<Prisma.SupplierPriceHistoryUncheckedUpdateWithoutIngredientInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  vendorId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SupplierPriceHistoryUncheckedUpdateManyWithoutIngredientInputSchema: z.ZodType<Prisma.SupplierPriceHistoryUncheckedUpdateManyWithoutIngredientInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  vendorId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DietaryRestrictionUpdateWithoutIngredientsInputSchema: z.ZodType<Prisma.DietaryRestrictionUpdateWithoutIngredientsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  icon: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  menuItems: z.lazy(() => MenuItemUpdateManyWithoutDietaryRestrictionsNestedInputSchema).optional(),
  recipes: z.lazy(() => RecipeUpdateManyWithoutDietaryRestrictionsNestedInputSchema).optional()
}).strict();

export const DietaryRestrictionUncheckedUpdateWithoutIngredientsInputSchema: z.ZodType<Prisma.DietaryRestrictionUncheckedUpdateWithoutIngredientsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  icon: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  menuItems: z.lazy(() => MenuItemUncheckedUpdateManyWithoutDietaryRestrictionsNestedInputSchema).optional(),
  recipes: z.lazy(() => RecipeUncheckedUpdateManyWithoutDietaryRestrictionsNestedInputSchema).optional()
}).strict();

export const DietaryRestrictionUncheckedUpdateManyWithoutIngredientsInputSchema: z.ZodType<Prisma.DietaryRestrictionUncheckedUpdateManyWithoutIngredientsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  icon: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RecipeEquipmentCreateManyRecipeInstructionInputSchema: z.ZodType<Prisma.RecipeEquipmentCreateManyRecipeInstructionInput> = z.object({
  id: z.number().int().optional(),
  recipeId: z.number().int(),
  equipmentId: z.number().int(),
  notes: z.string().optional().nullable()
}).strict();

export const RecipeEquipmentUpdateWithoutRecipeInstructionInputSchema: z.ZodType<Prisma.RecipeEquipmentUpdateWithoutRecipeInstructionInput> = z.object({
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recipe: z.lazy(() => RecipeUpdateOneRequiredWithoutEquipmentsNestedInputSchema).optional(),
  equipment: z.lazy(() => EquipmentUpdateOneRequiredWithoutRecipesNestedInputSchema).optional()
}).strict();

export const RecipeEquipmentUncheckedUpdateWithoutRecipeInstructionInputSchema: z.ZodType<Prisma.RecipeEquipmentUncheckedUpdateWithoutRecipeInstructionInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  equipmentId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const RecipeEquipmentUncheckedUpdateManyWithoutRecipeInstructionInputSchema: z.ZodType<Prisma.RecipeEquipmentUncheckedUpdateManyWithoutRecipeInstructionInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  equipmentId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const InventoryTransactionCreateManyItemInputSchema: z.ZodType<Prisma.InventoryTransactionCreateManyItemInput> = z.object({
  id: z.number().int().optional(),
  inventoryId: z.number().int(),
  type: z.lazy(() => TransactionTypeSchema),
  quantity: z.number(),
  unit: z.string(),
  previousQty: z.number(),
  newQty: z.number(),
  cost: z.number().optional().nullable(),
  reference: z.string().optional().nullable(),
  notes: z.string().optional().nullable(),
  createdById: z.number().int(),
  createdAt: z.coerce.date().optional()
}).strict();

export const InventoryWithdrawalCreateManyInventoryItemInputSchema: z.ZodType<Prisma.InventoryWithdrawalCreateManyInventoryItemInput> = z.object({
  id: z.number().int().optional(),
  dateTime: z.coerce.date(),
  quantity: z.number(),
  unit: z.string(),
  recipeId: z.number().int().optional().nullable(),
  createdById: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const StockCountItemCreateManyItemInputSchema: z.ZodType<Prisma.StockCountItemCreateManyItemInput> = z.object({
  id: z.number().int().optional(),
  stockCountId: z.number().int(),
  expectedQty: z.number(),
  actualQty: z.number(),
  difference: z.number(),
  notes: z.string().optional().nullable()
}).strict();

export const InventoryTransactionUpdateWithoutItemInputSchema: z.ZodType<Prisma.InventoryTransactionUpdateWithoutItemInput> = z.object({
  type: z.union([ z.lazy(() => TransactionTypeSchema),z.lazy(() => EnumTransactionTypeFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  previousQty: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  newQty: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  cost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reference: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  inventory: z.lazy(() => InventoryUpdateOneRequiredWithoutTransactionsNestedInputSchema).optional(),
  createdBy: z.lazy(() => UserUpdateOneRequiredWithoutInventoryTransactionsNestedInputSchema).optional()
}).strict();

export const InventoryTransactionUncheckedUpdateWithoutItemInputSchema: z.ZodType<Prisma.InventoryTransactionUncheckedUpdateWithoutItemInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inventoryId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => TransactionTypeSchema),z.lazy(() => EnumTransactionTypeFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  previousQty: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  newQty: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  cost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reference: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InventoryTransactionUncheckedUpdateManyWithoutItemInputSchema: z.ZodType<Prisma.InventoryTransactionUncheckedUpdateManyWithoutItemInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  inventoryId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => TransactionTypeSchema),z.lazy(() => EnumTransactionTypeFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  previousQty: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  newQty: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  cost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reference: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InventoryWithdrawalUpdateWithoutInventoryItemInputSchema: z.ZodType<Prisma.InventoryWithdrawalUpdateWithoutInventoryItemInput> = z.object({
  dateTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  recipe: z.lazy(() => RecipeUpdateOneWithoutWithdrawalsNestedInputSchema).optional(),
  createdBy: z.lazy(() => UserUpdateOneRequiredWithoutInventoryWithdrawalsNestedInputSchema).optional()
}).strict();

export const InventoryWithdrawalUncheckedUpdateWithoutInventoryItemInputSchema: z.ZodType<Prisma.InventoryWithdrawalUncheckedUpdateWithoutInventoryItemInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  dateTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InventoryWithdrawalUncheckedUpdateManyWithoutInventoryItemInputSchema: z.ZodType<Prisma.InventoryWithdrawalUncheckedUpdateManyWithoutInventoryItemInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  dateTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdById: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const StockCountItemUpdateWithoutItemInputSchema: z.ZodType<Prisma.StockCountItemUpdateWithoutItemInput> = z.object({
  expectedQty: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  actualQty: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  difference: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stockCount: z.lazy(() => StockCountUpdateOneRequiredWithoutItemsNestedInputSchema).optional()
}).strict();

export const StockCountItemUncheckedUpdateWithoutItemInputSchema: z.ZodType<Prisma.StockCountItemUncheckedUpdateWithoutItemInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  stockCountId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  expectedQty: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  actualQty: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  difference: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const StockCountItemUncheckedUpdateManyWithoutItemInputSchema: z.ZodType<Prisma.StockCountItemUncheckedUpdateManyWithoutItemInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  stockCountId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  expectedQty: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  actualQty: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  difference: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const StockCountItemCreateManyStockCountInputSchema: z.ZodType<Prisma.StockCountItemCreateManyStockCountInput> = z.object({
  id: z.number().int().optional(),
  itemId: z.number().int(),
  expectedQty: z.number(),
  actualQty: z.number(),
  difference: z.number(),
  notes: z.string().optional().nullable()
}).strict();

export const StockCountItemUpdateWithoutStockCountInputSchema: z.ZodType<Prisma.StockCountItemUpdateWithoutStockCountInput> = z.object({
  expectedQty: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  actualQty: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  difference: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  item: z.lazy(() => InventoryItemUpdateOneRequiredWithoutStockCountsNestedInputSchema).optional()
}).strict();

export const StockCountItemUncheckedUpdateWithoutStockCountInputSchema: z.ZodType<Prisma.StockCountItemUncheckedUpdateWithoutStockCountInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  itemId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  expectedQty: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  actualQty: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  difference: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const StockCountItemUncheckedUpdateManyWithoutStockCountInputSchema: z.ZodType<Prisma.StockCountItemUncheckedUpdateManyWithoutStockCountInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  itemId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  expectedQty: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  actualQty: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  difference: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const OrderItemCreateManyOrderInputSchema: z.ZodType<Prisma.OrderItemCreateManyOrderInput> = z.object({
  id: z.number().int().optional(),
  ingredientId: z.number().int(),
  quantity: z.number(),
  unit: z.string(),
  price: z.number()
}).strict();

export const OrderItemUpdateWithoutOrderInputSchema: z.ZodType<Prisma.OrderItemUpdateWithoutOrderInput> = z.object({
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  ingredient: z.lazy(() => IngredientUpdateOneRequiredWithoutOrderItemsNestedInputSchema).optional()
}).strict();

export const OrderItemUncheckedUpdateWithoutOrderInputSchema: z.ZodType<Prisma.OrderItemUncheckedUpdateWithoutOrderInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ingredientId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const OrderItemUncheckedUpdateManyWithoutOrderInputSchema: z.ZodType<Prisma.OrderItemUncheckedUpdateManyWithoutOrderInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ingredientId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const OrderCreateManyVendorInputSchema: z.ZodType<Prisma.OrderCreateManyVendorInput> = z.object({
  id: z.number().int().optional(),
  restaurantId: z.number().int(),
  status: z.lazy(() => OrderStatusSchema),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const SupplierPriceHistoryCreateManyVendorInputSchema: z.ZodType<Prisma.SupplierPriceHistoryCreateManyVendorInput> = z.object({
  id: z.number().int().optional(),
  ingredientId: z.number().int(),
  price: z.number(),
  unit: z.string(),
  startDate: z.coerce.date(),
  endDate: z.coerce.date().optional().nullable(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const OrderUpdateWithoutVendorInputSchema: z.ZodType<Prisma.OrderUpdateWithoutVendorInput> = z.object({
  status: z.union([ z.lazy(() => OrderStatusSchema),z.lazy(() => EnumOrderStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneRequiredWithoutOrdersNestedInputSchema).optional(),
  items: z.lazy(() => OrderItemUpdateManyWithoutOrderNestedInputSchema).optional()
}).strict();

export const OrderUncheckedUpdateWithoutVendorInputSchema: z.ZodType<Prisma.OrderUncheckedUpdateWithoutVendorInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => OrderStatusSchema),z.lazy(() => EnumOrderStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  items: z.lazy(() => OrderItemUncheckedUpdateManyWithoutOrderNestedInputSchema).optional()
}).strict();

export const OrderUncheckedUpdateManyWithoutVendorInputSchema: z.ZodType<Prisma.OrderUncheckedUpdateManyWithoutVendorInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => OrderStatusSchema),z.lazy(() => EnumOrderStatusFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const IngredientUpdateWithoutVendorsInputSchema: z.ZodType<Prisma.IngredientUpdateWithoutVendorsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  density: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dietaryRestrictionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  calories: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  protein: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  carbohydrates: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fat: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fiber: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sugar: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sodium: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  usdaFoodId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nutritionSource: z.union([ z.lazy(() => NutritionSourceSchema),z.lazy(() => NullableEnumNutritionSourceFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nutritionUpdatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recipeIngredients: z.lazy(() => RecipeIngredientUpdateManyWithoutIngredientNestedInputSchema).optional(),
  inventoryItems: z.lazy(() => InventoryItemUpdateManyWithoutIngredientNestedInputSchema).optional(),
  orderItems: z.lazy(() => OrderItemUpdateManyWithoutIngredientNestedInputSchema).optional(),
  WasteRecords: z.lazy(() => WasteRecordUpdateManyWithoutIngredienteNestedInputSchema).optional(),
  IngredientAllergens: z.lazy(() => IngredientAllergenUpdateManyWithoutIngredientNestedInputSchema).optional(),
  priceHistory: z.lazy(() => SupplierPriceHistoryUpdateManyWithoutIngredientNestedInputSchema).optional(),
  DietaryRestrictions: z.lazy(() => DietaryRestrictionUpdateManyWithoutIngredientsNestedInputSchema).optional()
}).strict();

export const IngredientUncheckedUpdateWithoutVendorsInputSchema: z.ZodType<Prisma.IngredientUncheckedUpdateWithoutVendorsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  density: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dietaryRestrictionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  calories: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  protein: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  carbohydrates: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fat: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fiber: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sugar: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sodium: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  usdaFoodId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nutritionSource: z.union([ z.lazy(() => NutritionSourceSchema),z.lazy(() => NullableEnumNutritionSourceFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nutritionUpdatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recipeIngredients: z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  inventoryItems: z.lazy(() => InventoryItemUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  orderItems: z.lazy(() => OrderItemUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  WasteRecords: z.lazy(() => WasteRecordUncheckedUpdateManyWithoutIngredienteNestedInputSchema).optional(),
  IngredientAllergens: z.lazy(() => IngredientAllergenUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  priceHistory: z.lazy(() => SupplierPriceHistoryUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  DietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutIngredientsNestedInputSchema).optional()
}).strict();

export const IngredientUncheckedUpdateManyWithoutVendorsInputSchema: z.ZodType<Prisma.IngredientUncheckedUpdateManyWithoutVendorsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  density: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dietaryRestrictionId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  calories: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  protein: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  carbohydrates: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fat: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fiber: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sugar: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sodium: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  usdaFoodId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nutritionSource: z.union([ z.lazy(() => NutritionSourceSchema),z.lazy(() => NullableEnumNutritionSourceFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nutritionUpdatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SupplierPriceHistoryUpdateWithoutVendorInputSchema: z.ZodType<Prisma.SupplierPriceHistoryUpdateWithoutVendorInput> = z.object({
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ingredient: z.lazy(() => IngredientUpdateOneRequiredWithoutPriceHistoryNestedInputSchema).optional()
}).strict();

export const SupplierPriceHistoryUncheckedUpdateWithoutVendorInputSchema: z.ZodType<Prisma.SupplierPriceHistoryUncheckedUpdateWithoutVendorInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ingredientId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SupplierPriceHistoryUncheckedUpdateManyWithoutVendorInputSchema: z.ZodType<Prisma.SupplierPriceHistoryUncheckedUpdateManyWithoutVendorInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ingredientId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  unit: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ShiftTaskCreateManyShiftInputSchema: z.ZodType<Prisma.ShiftTaskCreateManyShiftInput> = z.object({
  id: z.number().int().optional(),
  taskType: z.lazy(() => TaskTypeSchema),
  startTime: z.coerce.date(),
  endTime: z.coerce.date(),
  duration: z.number().int(),
  notes: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ShiftTaskUpdateWithoutShiftInputSchema: z.ZodType<Prisma.ShiftTaskUpdateWithoutShiftInput> = z.object({
  taskType: z.union([ z.lazy(() => TaskTypeSchema),z.lazy(() => EnumTaskTypeFieldUpdateOperationsInputSchema) ]).optional(),
  startTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  duration: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ShiftTaskUncheckedUpdateWithoutShiftInputSchema: z.ZodType<Prisma.ShiftTaskUncheckedUpdateWithoutShiftInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  taskType: z.union([ z.lazy(() => TaskTypeSchema),z.lazy(() => EnumTaskTypeFieldUpdateOperationsInputSchema) ]).optional(),
  startTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  duration: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ShiftTaskUncheckedUpdateManyWithoutShiftInputSchema: z.ZodType<Prisma.ShiftTaskUncheckedUpdateManyWithoutShiftInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  taskType: z.union([ z.lazy(() => TaskTypeSchema),z.lazy(() => EnumTaskTypeFieldUpdateOperationsInputSchema) ]).optional(),
  startTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  duration: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  notes: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PrepItemCreateManyPrepBoardInputSchema: z.ZodType<Prisma.PrepItemCreateManyPrepBoardInput> = z.object({
  id: z.number().int().optional(),
  recipeId: z.number().int(),
  quantity: z.number().int(),
  status: z.lazy(() => PrepStatusSchema),
  assignedToId: z.number().int()
}).strict();

export const RecipeUpdateWithoutPrepBoardsInputSchema: z.ZodType<Prisma.RecipeUpdateWithoutPrepBoardsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrls: z.union([ z.lazy(() => RecipeUpdateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  servings: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isPublished: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  publishedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  skillLevel: z.union([ z.lazy(() => SkillLevelSchema),z.lazy(() => EnumSkillLevelFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => CategorySchema),z.lazy(() => EnumCategoryFieldUpdateOperationsInputSchema) ]).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  cookBook: z.lazy(() => CookBookUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  ingredients: z.lazy(() => RecipeIngredientUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUpdateManyWithoutRecipeNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUpdateManyWithoutRecipesNestedInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUpdateManyWithoutRecipeNestedInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUpdateManyWithoutRecipeNestedInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUpdateManyWithoutRecipeNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUpdateOneWithoutRecipeNestedInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUpdateManyWithoutRecipeNestedInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUpdateOneWithoutRecipeNestedInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUpdateManyWithoutRecipeNestedInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUpdateOneWithoutRecipeNestedInputSchema).optional()
}).strict();

export const RecipeUncheckedUpdateWithoutPrepBoardsInputSchema: z.ZodType<Prisma.RecipeUncheckedUpdateWithoutPrepBoardsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrls: z.union([ z.lazy(() => RecipeUpdateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  servings: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookBookId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isPublished: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  publishedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  skillLevel: z.union([ z.lazy(() => SkillLevelSchema),z.lazy(() => EnumSkillLevelFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => CategorySchema),z.lazy(() => EnumCategoryFieldUpdateOperationsInputSchema) ]).optional(),
  ingredients: z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: z.lazy(() => MenuItemUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional()
}).strict();

export const RecipeUncheckedUpdateManyWithoutPrepBoardsInputSchema: z.ZodType<Prisma.RecipeUncheckedUpdateManyWithoutPrepBoardsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrls: z.union([ z.lazy(() => RecipeUpdateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  servings: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookBookId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isPublished: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  publishedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  skillLevel: z.union([ z.lazy(() => SkillLevelSchema),z.lazy(() => EnumSkillLevelFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => CategorySchema),z.lazy(() => EnumCategoryFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PrepItemUpdateWithoutPrepBoardInputSchema: z.ZodType<Prisma.PrepItemUpdateWithoutPrepBoardInput> = z.object({
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => PrepStatusSchema),z.lazy(() => EnumPrepStatusFieldUpdateOperationsInputSchema) ]).optional(),
  recipe: z.lazy(() => RecipeUpdateOneRequiredWithoutPrepItemsNestedInputSchema).optional(),
  assignedTo: z.lazy(() => UserUpdateOneRequiredWithoutPrepItemsNestedInputSchema).optional()
}).strict();

export const PrepItemUncheckedUpdateWithoutPrepBoardInputSchema: z.ZodType<Prisma.PrepItemUncheckedUpdateWithoutPrepBoardInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => PrepStatusSchema),z.lazy(() => EnumPrepStatusFieldUpdateOperationsInputSchema) ]).optional(),
  assignedToId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PrepItemUncheckedUpdateManyWithoutPrepBoardInputSchema: z.ZodType<Prisma.PrepItemUncheckedUpdateManyWithoutPrepBoardInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => PrepStatusSchema),z.lazy(() => EnumPrepStatusFieldUpdateOperationsInputSchema) ]).optional(),
  assignedToId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MenuItemCreateManyMenuInputSchema: z.ZodType<Prisma.MenuItemCreateManyMenuInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  price: z.number(),
  foodCost: z.number(),
  isActive: z.boolean().optional(),
  recipeIds: z.union([ z.lazy(() => MenuItemCreaterecipeIdsInputSchema),z.number().int().array() ]).optional(),
  recipeServingsAmount: z.union([ z.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema),z.number().array() ]).optional(),
  recipeServingsCost: z.union([ z.lazy(() => MenuItemCreaterecipeServingsCostInputSchema),z.number().array() ]).optional(),
  allergens: z.union([ z.lazy(() => MenuItemCreateallergensInputSchema),z.string().array() ]).optional(),
  categoryId: z.number().int().optional().nullable()
}).strict();

export const MenuCategoryCreateManyMenuInputSchema: z.ZodType<Prisma.MenuCategoryCreateManyMenuInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  displayOrder: z.number().int(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const MenuItemUpdateWithoutMenuInputSchema: z.ZodType<Prisma.MenuItemUpdateWithoutMenuInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  recipeIds: z.union([ z.lazy(() => MenuItemUpdaterecipeIdsInputSchema),z.number().int().array() ]).optional(),
  recipeServingsAmount: z.union([ z.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema),z.number().array() ]).optional(),
  recipeServingsCost: z.union([ z.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema),z.number().array() ]).optional(),
  allergens: z.union([ z.lazy(() => MenuItemUpdateallergensInputSchema),z.string().array() ]).optional(),
  category: z.lazy(() => MenuCategoryUpdateOneWithoutMenuItemsNestedInputSchema).optional(),
  recipes: z.lazy(() => RecipeUpdateManyWithoutMenuItemsNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => NutritionalInfoUpdateOneWithoutMenuItemNestedInputSchema).optional(),
  recommendations: z.lazy(() => NutritionalRecommendationUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  feedback: z.lazy(() => CustomerFeedbackUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUpdateManyWithoutMenuItemsNestedInputSchema).optional()
}).strict();

export const MenuItemUncheckedUpdateWithoutMenuInputSchema: z.ZodType<Prisma.MenuItemUncheckedUpdateWithoutMenuInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  recipeIds: z.union([ z.lazy(() => MenuItemUpdaterecipeIdsInputSchema),z.number().int().array() ]).optional(),
  recipeServingsAmount: z.union([ z.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema),z.number().array() ]).optional(),
  recipeServingsCost: z.union([ z.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema),z.number().array() ]).optional(),
  allergens: z.union([ z.lazy(() => MenuItemUpdateallergensInputSchema),z.string().array() ]).optional(),
  categoryId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  recipes: z.lazy(() => RecipeUncheckedUpdateManyWithoutMenuItemsNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => NutritionalInfoUncheckedUpdateOneWithoutMenuItemNestedInputSchema).optional(),
  recommendations: z.lazy(() => NutritionalRecommendationUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  salesTransactions: z.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  leftoverItems: z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  feedback: z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutMenuItemsNestedInputSchema).optional()
}).strict();

export const MenuItemUncheckedUpdateManyWithoutMenuInputSchema: z.ZodType<Prisma.MenuItemUncheckedUpdateManyWithoutMenuInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  recipeIds: z.union([ z.lazy(() => MenuItemUpdaterecipeIdsInputSchema),z.number().int().array() ]).optional(),
  recipeServingsAmount: z.union([ z.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema),z.number().array() ]).optional(),
  recipeServingsCost: z.union([ z.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema),z.number().array() ]).optional(),
  allergens: z.union([ z.lazy(() => MenuItemUpdateallergensInputSchema),z.string().array() ]).optional(),
  categoryId: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const MenuCategoryUpdateWithoutMenuInputSchema: z.ZodType<Prisma.MenuCategoryUpdateWithoutMenuInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  displayOrder: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  menuItems: z.lazy(() => MenuItemUpdateManyWithoutCategoryNestedInputSchema).optional()
}).strict();

export const MenuCategoryUncheckedUpdateWithoutMenuInputSchema: z.ZodType<Prisma.MenuCategoryUncheckedUpdateWithoutMenuInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  displayOrder: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  menuItems: z.lazy(() => MenuItemUncheckedUpdateManyWithoutCategoryNestedInputSchema).optional()
}).strict();

export const MenuCategoryUncheckedUpdateManyWithoutMenuInputSchema: z.ZodType<Prisma.MenuCategoryUncheckedUpdateManyWithoutMenuInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  displayOrder: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MenuItemRecipeCreateManyMenuItemInputSchema: z.ZodType<Prisma.MenuItemRecipeCreateManyMenuItemInput> = z.object({
  id: z.number().int().optional(),
  recipeId: z.number().int(),
  joinAt: z.coerce.date().optional()
}).strict();

export const NutritionalRecommendationCreateManyMenuItemInputSchema: z.ZodType<Prisma.NutritionalRecommendationCreateManyMenuItemInput> = z.object({
  id: z.number().int().optional(),
  recommendation: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const SalesTransactionsCreateManyMenuItemInputSchema: z.ZodType<Prisma.SalesTransactionsCreateManyMenuItemInput> = z.object({
  id: z.number().int().optional(),
  posTransactionID: z.string().optional().nullable(),
  restaurantId: z.number().int(),
  price: z.number(),
  total: z.number(),
  transactionDate: z.coerce.date(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const LeftoverItemCreateManyMenuItemInputSchema: z.ZodType<Prisma.LeftoverItemCreateManyMenuItemInput> = z.object({
  id: z.number().int().optional(),
  restaurantId: z.number().int(),
  date: z.coerce.date(),
  quantity: z.number().int(),
  reason: z.string(),
  recordedById: z.number().int(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const CustomerFeedbackCreateManyMenuItemInputSchema: z.ZodType<Prisma.CustomerFeedbackCreateManyMenuItemInput> = z.object({
  id: z.number().int().optional(),
  restaurantId: z.number().int(),
  rating: z.number().int(),
  comment: z.string().optional().nullable(),
  source: z.lazy(() => FeedbackSourceSchema),
  tags: z.union([ z.lazy(() => CustomerFeedbackCreatetagsInputSchema),z.string().array() ]).optional(),
  status: z.lazy(() => FeedbackStatusSchema).optional(),
  responseText: z.string().optional().nullable(),
  respondedAt: z.coerce.date().optional().nullable(),
  respondedById: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const RecipeUpdateWithoutMenuItemsInputSchema: z.ZodType<Prisma.RecipeUpdateWithoutMenuItemsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrls: z.union([ z.lazy(() => RecipeUpdateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  servings: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isPublished: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  publishedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  skillLevel: z.union([ z.lazy(() => SkillLevelSchema),z.lazy(() => EnumSkillLevelFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => CategorySchema),z.lazy(() => EnumCategoryFieldUpdateOperationsInputSchema) ]).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  cookBook: z.lazy(() => CookBookUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  ingredients: z.lazy(() => RecipeIngredientUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUpdateManyWithoutRecipeNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUpdateManyWithoutRecipesNestedInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUpdateManyWithoutRecipeNestedInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUpdateManyWithoutRecipeNestedInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUpdateManyWithoutRecipeNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUpdateOneWithoutRecipeNestedInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUpdateManyWithoutRecipeNestedInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUpdateOneWithoutRecipeNestedInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUpdateManyWithoutRecipeNestedInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUpdateOneWithoutRecipeNestedInputSchema).optional()
}).strict();

export const RecipeUncheckedUpdateWithoutMenuItemsInputSchema: z.ZodType<Prisma.RecipeUncheckedUpdateWithoutMenuItemsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrls: z.union([ z.lazy(() => RecipeUpdateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  servings: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookBookId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isPublished: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  publishedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  skillLevel: z.union([ z.lazy(() => SkillLevelSchema),z.lazy(() => EnumSkillLevelFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => CategorySchema),z.lazy(() => EnumCategoryFieldUpdateOperationsInputSchema) ]).optional(),
  ingredients: z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: z.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  foodCostHistory: z.lazy(() => FoodCostHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: z.lazy(() => PrepHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: z.lazy(() => PrepBoardUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: z.lazy(() => PrepItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItemRecipes: z.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  productionPlanItems: z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  withdrawals: z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: z.lazy(() => RecipeTagUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipments: z.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  temperatures: z.lazy(() => RecipeTemperatureUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  yields: z.lazy(() => RecipeYieldUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  laborCosts: z.lazy(() => RecipeLaborCostUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  nutritionalInfo: z.lazy(() => RecipeNutritionUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional(),
  criticalPoints: z.lazy(() => RecipeCriticalPointUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  storage: z.lazy(() => RecipeStorageUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional(),
  photos: z.lazy(() => RecipePhotoUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  recipeStats: z.lazy(() => RecipeStatsUncheckedUpdateOneWithoutRecipeNestedInputSchema).optional()
}).strict();

export const RecipeUncheckedUpdateManyWithoutMenuItemsInputSchema: z.ZodType<Prisma.RecipeUncheckedUpdateManyWithoutMenuItemsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  imageUrls: z.union([ z.lazy(() => RecipeUpdateimageUrlsInputSchema),z.string().array() ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  servings: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  prepTime: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  cookBookId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  foodCost: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isDeleted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isPublished: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  publishedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  language: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  skillLevel: z.union([ z.lazy(() => SkillLevelSchema),z.lazy(() => EnumSkillLevelFieldUpdateOperationsInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => CategorySchema),z.lazy(() => EnumCategoryFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MenuItemRecipeUpdateWithoutMenuItemInputSchema: z.ZodType<Prisma.MenuItemRecipeUpdateWithoutMenuItemInput> = z.object({
  joinAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  recipe: z.lazy(() => RecipeUpdateOneRequiredWithoutMenuItemRecipesNestedInputSchema).optional()
}).strict();

export const MenuItemRecipeUncheckedUpdateWithoutMenuItemInputSchema: z.ZodType<Prisma.MenuItemRecipeUncheckedUpdateWithoutMenuItemInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  joinAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MenuItemRecipeUncheckedUpdateManyWithoutMenuItemInputSchema: z.ZodType<Prisma.MenuItemRecipeUncheckedUpdateManyWithoutMenuItemInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  recipeId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  joinAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const NutritionalRecommendationUpdateWithoutMenuItemInputSchema: z.ZodType<Prisma.NutritionalRecommendationUpdateWithoutMenuItemInput> = z.object({
  recommendation: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const NutritionalRecommendationUncheckedUpdateWithoutMenuItemInputSchema: z.ZodType<Prisma.NutritionalRecommendationUncheckedUpdateWithoutMenuItemInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  recommendation: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const NutritionalRecommendationUncheckedUpdateManyWithoutMenuItemInputSchema: z.ZodType<Prisma.NutritionalRecommendationUncheckedUpdateManyWithoutMenuItemInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  recommendation: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SalesTransactionsUpdateWithoutMenuItemInputSchema: z.ZodType<Prisma.SalesTransactionsUpdateWithoutMenuItemInput> = z.object({
  posTransactionID: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  total: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  transactionDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneRequiredWithoutSalesTransactionsNestedInputSchema).optional()
}).strict();

export const SalesTransactionsUncheckedUpdateWithoutMenuItemInputSchema: z.ZodType<Prisma.SalesTransactionsUncheckedUpdateWithoutMenuItemInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  posTransactionID: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  total: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  transactionDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SalesTransactionsUncheckedUpdateManyWithoutMenuItemInputSchema: z.ZodType<Prisma.SalesTransactionsUncheckedUpdateManyWithoutMenuItemInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  posTransactionID: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  total: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  transactionDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const LeftoverItemUpdateWithoutMenuItemInputSchema: z.ZodType<Prisma.LeftoverItemUpdateWithoutMenuItemInput> = z.object({
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  reason: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneRequiredWithoutLeftoverItemsNestedInputSchema).optional(),
  recordedBy: z.lazy(() => UserUpdateOneRequiredWithoutLeftoverItemsNestedInputSchema).optional()
}).strict();

export const LeftoverItemUncheckedUpdateWithoutMenuItemInputSchema: z.ZodType<Prisma.LeftoverItemUncheckedUpdateWithoutMenuItemInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  reason: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  recordedById: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const LeftoverItemUncheckedUpdateManyWithoutMenuItemInputSchema: z.ZodType<Prisma.LeftoverItemUncheckedUpdateManyWithoutMenuItemInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  quantity: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  reason: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  recordedById: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CustomerFeedbackUpdateWithoutMenuItemInputSchema: z.ZodType<Prisma.CustomerFeedbackUpdateWithoutMenuItemInput> = z.object({
  rating: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  comment: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  source: z.union([ z.lazy(() => FeedbackSourceSchema),z.lazy(() => EnumFeedbackSourceFieldUpdateOperationsInputSchema) ]).optional(),
  tags: z.union([ z.lazy(() => CustomerFeedbackUpdatetagsInputSchema),z.string().array() ]).optional(),
  status: z.union([ z.lazy(() => FeedbackStatusSchema),z.lazy(() => EnumFeedbackStatusFieldUpdateOperationsInputSchema) ]).optional(),
  responseText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  respondedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  restaurant: z.lazy(() => RestaurantUpdateOneRequiredWithoutCustomerFeedbacksNestedInputSchema).optional(),
  respondedBy: z.lazy(() => UserUpdateOneWithoutCustomerFeedbackResponsesNestedInputSchema).optional()
}).strict();

export const CustomerFeedbackUncheckedUpdateWithoutMenuItemInputSchema: z.ZodType<Prisma.CustomerFeedbackUncheckedUpdateWithoutMenuItemInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  rating: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  comment: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  source: z.union([ z.lazy(() => FeedbackSourceSchema),z.lazy(() => EnumFeedbackSourceFieldUpdateOperationsInputSchema) ]).optional(),
  tags: z.union([ z.lazy(() => CustomerFeedbackUpdatetagsInputSchema),z.string().array() ]).optional(),
  status: z.union([ z.lazy(() => FeedbackStatusSchema),z.lazy(() => EnumFeedbackStatusFieldUpdateOperationsInputSchema) ]).optional(),
  responseText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  respondedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  respondedById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CustomerFeedbackUncheckedUpdateManyWithoutMenuItemInputSchema: z.ZodType<Prisma.CustomerFeedbackUncheckedUpdateManyWithoutMenuItemInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  restaurantId: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  rating: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  comment: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  source: z.union([ z.lazy(() => FeedbackSourceSchema),z.lazy(() => EnumFeedbackSourceFieldUpdateOperationsInputSchema) ]).optional(),
  tags: z.union([ z.lazy(() => CustomerFeedbackUpdatetagsInputSchema),z.string().array() ]).optional(),
  status: z.union([ z.lazy(() => FeedbackStatusSchema),z.lazy(() => EnumFeedbackStatusFieldUpdateOperationsInputSchema) ]).optional(),
  responseText: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  respondedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  respondedById: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DietaryRestrictionUpdateWithoutMenuItemsInputSchema: z.ZodType<Prisma.DietaryRestrictionUpdateWithoutMenuItemsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  icon: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  recipes: z.lazy(() => RecipeUpdateManyWithoutDietaryRestrictionsNestedInputSchema).optional(),
  ingredients: z.lazy(() => IngredientUpdateManyWithoutDietaryRestrictionsNestedInputSchema).optional()
}).strict();

export const DietaryRestrictionUncheckedUpdateWithoutMenuItemsInputSchema: z.ZodType<Prisma.DietaryRestrictionUncheckedUpdateWithoutMenuItemsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  icon: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  recipes: z.lazy(() => RecipeUncheckedUpdateManyWithoutDietaryRestrictionsNestedInputSchema).optional(),
  ingredients: z.lazy(() => IngredientUncheckedUpdateManyWithoutDietaryRestrictionsNestedInputSchema).optional()
}).strict();

export const DietaryRestrictionUncheckedUpdateManyWithoutMenuItemsInputSchema: z.ZodType<Prisma.DietaryRestrictionUncheckedUpdateManyWithoutMenuItemsInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  icon: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

/////////////////////////////////////////
// ARGS
/////////////////////////////////////////

export const RecipeNutritionFindFirstArgsSchema: z.ZodType<Prisma.RecipeNutritionFindFirstArgs> = z.object({
  select: RecipeNutritionSelectSchema.optional(),
  include: RecipeNutritionIncludeSchema.optional(),
  where: RecipeNutritionWhereInputSchema.optional(),
  orderBy: z.union([ RecipeNutritionOrderByWithRelationInputSchema.array(),RecipeNutritionOrderByWithRelationInputSchema ]).optional(),
  cursor: RecipeNutritionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RecipeNutritionScalarFieldEnumSchema,RecipeNutritionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RecipeNutritionFindFirstOrThrowArgsSchema: z.ZodType<Prisma.RecipeNutritionFindFirstOrThrowArgs> = z.object({
  select: RecipeNutritionSelectSchema.optional(),
  include: RecipeNutritionIncludeSchema.optional(),
  where: RecipeNutritionWhereInputSchema.optional(),
  orderBy: z.union([ RecipeNutritionOrderByWithRelationInputSchema.array(),RecipeNutritionOrderByWithRelationInputSchema ]).optional(),
  cursor: RecipeNutritionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RecipeNutritionScalarFieldEnumSchema,RecipeNutritionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RecipeNutritionFindManyArgsSchema: z.ZodType<Prisma.RecipeNutritionFindManyArgs> = z.object({
  select: RecipeNutritionSelectSchema.optional(),
  include: RecipeNutritionIncludeSchema.optional(),
  where: RecipeNutritionWhereInputSchema.optional(),
  orderBy: z.union([ RecipeNutritionOrderByWithRelationInputSchema.array(),RecipeNutritionOrderByWithRelationInputSchema ]).optional(),
  cursor: RecipeNutritionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RecipeNutritionScalarFieldEnumSchema,RecipeNutritionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RecipeNutritionAggregateArgsSchema: z.ZodType<Prisma.RecipeNutritionAggregateArgs> = z.object({
  where: RecipeNutritionWhereInputSchema.optional(),
  orderBy: z.union([ RecipeNutritionOrderByWithRelationInputSchema.array(),RecipeNutritionOrderByWithRelationInputSchema ]).optional(),
  cursor: RecipeNutritionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const RecipeNutritionGroupByArgsSchema: z.ZodType<Prisma.RecipeNutritionGroupByArgs> = z.object({
  where: RecipeNutritionWhereInputSchema.optional(),
  orderBy: z.union([ RecipeNutritionOrderByWithAggregationInputSchema.array(),RecipeNutritionOrderByWithAggregationInputSchema ]).optional(),
  by: RecipeNutritionScalarFieldEnumSchema.array(),
  having: RecipeNutritionScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const RecipeNutritionFindUniqueArgsSchema: z.ZodType<Prisma.RecipeNutritionFindUniqueArgs> = z.object({
  select: RecipeNutritionSelectSchema.optional(),
  include: RecipeNutritionIncludeSchema.optional(),
  where: RecipeNutritionWhereUniqueInputSchema,
}).strict() ;

export const RecipeNutritionFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.RecipeNutritionFindUniqueOrThrowArgs> = z.object({
  select: RecipeNutritionSelectSchema.optional(),
  include: RecipeNutritionIncludeSchema.optional(),
  where: RecipeNutritionWhereUniqueInputSchema,
}).strict() ;

export const RecipeCriticalPointFindFirstArgsSchema: z.ZodType<Prisma.RecipeCriticalPointFindFirstArgs> = z.object({
  select: RecipeCriticalPointSelectSchema.optional(),
  include: RecipeCriticalPointIncludeSchema.optional(),
  where: RecipeCriticalPointWhereInputSchema.optional(),
  orderBy: z.union([ RecipeCriticalPointOrderByWithRelationInputSchema.array(),RecipeCriticalPointOrderByWithRelationInputSchema ]).optional(),
  cursor: RecipeCriticalPointWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RecipeCriticalPointScalarFieldEnumSchema,RecipeCriticalPointScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RecipeCriticalPointFindFirstOrThrowArgsSchema: z.ZodType<Prisma.RecipeCriticalPointFindFirstOrThrowArgs> = z.object({
  select: RecipeCriticalPointSelectSchema.optional(),
  include: RecipeCriticalPointIncludeSchema.optional(),
  where: RecipeCriticalPointWhereInputSchema.optional(),
  orderBy: z.union([ RecipeCriticalPointOrderByWithRelationInputSchema.array(),RecipeCriticalPointOrderByWithRelationInputSchema ]).optional(),
  cursor: RecipeCriticalPointWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RecipeCriticalPointScalarFieldEnumSchema,RecipeCriticalPointScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RecipeCriticalPointFindManyArgsSchema: z.ZodType<Prisma.RecipeCriticalPointFindManyArgs> = z.object({
  select: RecipeCriticalPointSelectSchema.optional(),
  include: RecipeCriticalPointIncludeSchema.optional(),
  where: RecipeCriticalPointWhereInputSchema.optional(),
  orderBy: z.union([ RecipeCriticalPointOrderByWithRelationInputSchema.array(),RecipeCriticalPointOrderByWithRelationInputSchema ]).optional(),
  cursor: RecipeCriticalPointWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RecipeCriticalPointScalarFieldEnumSchema,RecipeCriticalPointScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RecipeCriticalPointAggregateArgsSchema: z.ZodType<Prisma.RecipeCriticalPointAggregateArgs> = z.object({
  where: RecipeCriticalPointWhereInputSchema.optional(),
  orderBy: z.union([ RecipeCriticalPointOrderByWithRelationInputSchema.array(),RecipeCriticalPointOrderByWithRelationInputSchema ]).optional(),
  cursor: RecipeCriticalPointWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const RecipeCriticalPointGroupByArgsSchema: z.ZodType<Prisma.RecipeCriticalPointGroupByArgs> = z.object({
  where: RecipeCriticalPointWhereInputSchema.optional(),
  orderBy: z.union([ RecipeCriticalPointOrderByWithAggregationInputSchema.array(),RecipeCriticalPointOrderByWithAggregationInputSchema ]).optional(),
  by: RecipeCriticalPointScalarFieldEnumSchema.array(),
  having: RecipeCriticalPointScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const RecipeCriticalPointFindUniqueArgsSchema: z.ZodType<Prisma.RecipeCriticalPointFindUniqueArgs> = z.object({
  select: RecipeCriticalPointSelectSchema.optional(),
  include: RecipeCriticalPointIncludeSchema.optional(),
  where: RecipeCriticalPointWhereUniqueInputSchema,
}).strict() ;

export const RecipeCriticalPointFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.RecipeCriticalPointFindUniqueOrThrowArgs> = z.object({
  select: RecipeCriticalPointSelectSchema.optional(),
  include: RecipeCriticalPointIncludeSchema.optional(),
  where: RecipeCriticalPointWhereUniqueInputSchema,
}).strict() ;

export const RecipeStorageFindFirstArgsSchema: z.ZodType<Prisma.RecipeStorageFindFirstArgs> = z.object({
  select: RecipeStorageSelectSchema.optional(),
  include: RecipeStorageIncludeSchema.optional(),
  where: RecipeStorageWhereInputSchema.optional(),
  orderBy: z.union([ RecipeStorageOrderByWithRelationInputSchema.array(),RecipeStorageOrderByWithRelationInputSchema ]).optional(),
  cursor: RecipeStorageWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RecipeStorageScalarFieldEnumSchema,RecipeStorageScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RecipeStorageFindFirstOrThrowArgsSchema: z.ZodType<Prisma.RecipeStorageFindFirstOrThrowArgs> = z.object({
  select: RecipeStorageSelectSchema.optional(),
  include: RecipeStorageIncludeSchema.optional(),
  where: RecipeStorageWhereInputSchema.optional(),
  orderBy: z.union([ RecipeStorageOrderByWithRelationInputSchema.array(),RecipeStorageOrderByWithRelationInputSchema ]).optional(),
  cursor: RecipeStorageWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RecipeStorageScalarFieldEnumSchema,RecipeStorageScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RecipeStorageFindManyArgsSchema: z.ZodType<Prisma.RecipeStorageFindManyArgs> = z.object({
  select: RecipeStorageSelectSchema.optional(),
  include: RecipeStorageIncludeSchema.optional(),
  where: RecipeStorageWhereInputSchema.optional(),
  orderBy: z.union([ RecipeStorageOrderByWithRelationInputSchema.array(),RecipeStorageOrderByWithRelationInputSchema ]).optional(),
  cursor: RecipeStorageWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RecipeStorageScalarFieldEnumSchema,RecipeStorageScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RecipeStorageAggregateArgsSchema: z.ZodType<Prisma.RecipeStorageAggregateArgs> = z.object({
  where: RecipeStorageWhereInputSchema.optional(),
  orderBy: z.union([ RecipeStorageOrderByWithRelationInputSchema.array(),RecipeStorageOrderByWithRelationInputSchema ]).optional(),
  cursor: RecipeStorageWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const RecipeStorageGroupByArgsSchema: z.ZodType<Prisma.RecipeStorageGroupByArgs> = z.object({
  where: RecipeStorageWhereInputSchema.optional(),
  orderBy: z.union([ RecipeStorageOrderByWithAggregationInputSchema.array(),RecipeStorageOrderByWithAggregationInputSchema ]).optional(),
  by: RecipeStorageScalarFieldEnumSchema.array(),
  having: RecipeStorageScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const RecipeStorageFindUniqueArgsSchema: z.ZodType<Prisma.RecipeStorageFindUniqueArgs> = z.object({
  select: RecipeStorageSelectSchema.optional(),
  include: RecipeStorageIncludeSchema.optional(),
  where: RecipeStorageWhereUniqueInputSchema,
}).strict() ;

export const RecipeStorageFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.RecipeStorageFindUniqueOrThrowArgs> = z.object({
  select: RecipeStorageSelectSchema.optional(),
  include: RecipeStorageIncludeSchema.optional(),
  where: RecipeStorageWhereUniqueInputSchema,
}).strict() ;

export const RecipePhotoFindFirstArgsSchema: z.ZodType<Prisma.RecipePhotoFindFirstArgs> = z.object({
  select: RecipePhotoSelectSchema.optional(),
  include: RecipePhotoIncludeSchema.optional(),
  where: RecipePhotoWhereInputSchema.optional(),
  orderBy: z.union([ RecipePhotoOrderByWithRelationInputSchema.array(),RecipePhotoOrderByWithRelationInputSchema ]).optional(),
  cursor: RecipePhotoWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RecipePhotoScalarFieldEnumSchema,RecipePhotoScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RecipePhotoFindFirstOrThrowArgsSchema: z.ZodType<Prisma.RecipePhotoFindFirstOrThrowArgs> = z.object({
  select: RecipePhotoSelectSchema.optional(),
  include: RecipePhotoIncludeSchema.optional(),
  where: RecipePhotoWhereInputSchema.optional(),
  orderBy: z.union([ RecipePhotoOrderByWithRelationInputSchema.array(),RecipePhotoOrderByWithRelationInputSchema ]).optional(),
  cursor: RecipePhotoWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RecipePhotoScalarFieldEnumSchema,RecipePhotoScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RecipePhotoFindManyArgsSchema: z.ZodType<Prisma.RecipePhotoFindManyArgs> = z.object({
  select: RecipePhotoSelectSchema.optional(),
  include: RecipePhotoIncludeSchema.optional(),
  where: RecipePhotoWhereInputSchema.optional(),
  orderBy: z.union([ RecipePhotoOrderByWithRelationInputSchema.array(),RecipePhotoOrderByWithRelationInputSchema ]).optional(),
  cursor: RecipePhotoWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RecipePhotoScalarFieldEnumSchema,RecipePhotoScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RecipePhotoAggregateArgsSchema: z.ZodType<Prisma.RecipePhotoAggregateArgs> = z.object({
  where: RecipePhotoWhereInputSchema.optional(),
  orderBy: z.union([ RecipePhotoOrderByWithRelationInputSchema.array(),RecipePhotoOrderByWithRelationInputSchema ]).optional(),
  cursor: RecipePhotoWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const RecipePhotoGroupByArgsSchema: z.ZodType<Prisma.RecipePhotoGroupByArgs> = z.object({
  where: RecipePhotoWhereInputSchema.optional(),
  orderBy: z.union([ RecipePhotoOrderByWithAggregationInputSchema.array(),RecipePhotoOrderByWithAggregationInputSchema ]).optional(),
  by: RecipePhotoScalarFieldEnumSchema.array(),
  having: RecipePhotoScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const RecipePhotoFindUniqueArgsSchema: z.ZodType<Prisma.RecipePhotoFindUniqueArgs> = z.object({
  select: RecipePhotoSelectSchema.optional(),
  include: RecipePhotoIncludeSchema.optional(),
  where: RecipePhotoWhereUniqueInputSchema,
}).strict() ;

export const RecipePhotoFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.RecipePhotoFindUniqueOrThrowArgs> = z.object({
  select: RecipePhotoSelectSchema.optional(),
  include: RecipePhotoIncludeSchema.optional(),
  where: RecipePhotoWhereUniqueInputSchema,
}).strict() ;

export const RecipeTemperatureFindFirstArgsSchema: z.ZodType<Prisma.RecipeTemperatureFindFirstArgs> = z.object({
  select: RecipeTemperatureSelectSchema.optional(),
  include: RecipeTemperatureIncludeSchema.optional(),
  where: RecipeTemperatureWhereInputSchema.optional(),
  orderBy: z.union([ RecipeTemperatureOrderByWithRelationInputSchema.array(),RecipeTemperatureOrderByWithRelationInputSchema ]).optional(),
  cursor: RecipeTemperatureWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RecipeTemperatureScalarFieldEnumSchema,RecipeTemperatureScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RecipeTemperatureFindFirstOrThrowArgsSchema: z.ZodType<Prisma.RecipeTemperatureFindFirstOrThrowArgs> = z.object({
  select: RecipeTemperatureSelectSchema.optional(),
  include: RecipeTemperatureIncludeSchema.optional(),
  where: RecipeTemperatureWhereInputSchema.optional(),
  orderBy: z.union([ RecipeTemperatureOrderByWithRelationInputSchema.array(),RecipeTemperatureOrderByWithRelationInputSchema ]).optional(),
  cursor: RecipeTemperatureWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RecipeTemperatureScalarFieldEnumSchema,RecipeTemperatureScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RecipeTemperatureFindManyArgsSchema: z.ZodType<Prisma.RecipeTemperatureFindManyArgs> = z.object({
  select: RecipeTemperatureSelectSchema.optional(),
  include: RecipeTemperatureIncludeSchema.optional(),
  where: RecipeTemperatureWhereInputSchema.optional(),
  orderBy: z.union([ RecipeTemperatureOrderByWithRelationInputSchema.array(),RecipeTemperatureOrderByWithRelationInputSchema ]).optional(),
  cursor: RecipeTemperatureWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RecipeTemperatureScalarFieldEnumSchema,RecipeTemperatureScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RecipeTemperatureAggregateArgsSchema: z.ZodType<Prisma.RecipeTemperatureAggregateArgs> = z.object({
  where: RecipeTemperatureWhereInputSchema.optional(),
  orderBy: z.union([ RecipeTemperatureOrderByWithRelationInputSchema.array(),RecipeTemperatureOrderByWithRelationInputSchema ]).optional(),
  cursor: RecipeTemperatureWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const RecipeTemperatureGroupByArgsSchema: z.ZodType<Prisma.RecipeTemperatureGroupByArgs> = z.object({
  where: RecipeTemperatureWhereInputSchema.optional(),
  orderBy: z.union([ RecipeTemperatureOrderByWithAggregationInputSchema.array(),RecipeTemperatureOrderByWithAggregationInputSchema ]).optional(),
  by: RecipeTemperatureScalarFieldEnumSchema.array(),
  having: RecipeTemperatureScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const RecipeTemperatureFindUniqueArgsSchema: z.ZodType<Prisma.RecipeTemperatureFindUniqueArgs> = z.object({
  select: RecipeTemperatureSelectSchema.optional(),
  include: RecipeTemperatureIncludeSchema.optional(),
  where: RecipeTemperatureWhereUniqueInputSchema,
}).strict() ;

export const RecipeTemperatureFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.RecipeTemperatureFindUniqueOrThrowArgs> = z.object({
  select: RecipeTemperatureSelectSchema.optional(),
  include: RecipeTemperatureIncludeSchema.optional(),
  where: RecipeTemperatureWhereUniqueInputSchema,
}).strict() ;

export const RecipeYieldFindFirstArgsSchema: z.ZodType<Prisma.RecipeYieldFindFirstArgs> = z.object({
  select: RecipeYieldSelectSchema.optional(),
  include: RecipeYieldIncludeSchema.optional(),
  where: RecipeYieldWhereInputSchema.optional(),
  orderBy: z.union([ RecipeYieldOrderByWithRelationInputSchema.array(),RecipeYieldOrderByWithRelationInputSchema ]).optional(),
  cursor: RecipeYieldWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RecipeYieldScalarFieldEnumSchema,RecipeYieldScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RecipeYieldFindFirstOrThrowArgsSchema: z.ZodType<Prisma.RecipeYieldFindFirstOrThrowArgs> = z.object({
  select: RecipeYieldSelectSchema.optional(),
  include: RecipeYieldIncludeSchema.optional(),
  where: RecipeYieldWhereInputSchema.optional(),
  orderBy: z.union([ RecipeYieldOrderByWithRelationInputSchema.array(),RecipeYieldOrderByWithRelationInputSchema ]).optional(),
  cursor: RecipeYieldWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RecipeYieldScalarFieldEnumSchema,RecipeYieldScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RecipeYieldFindManyArgsSchema: z.ZodType<Prisma.RecipeYieldFindManyArgs> = z.object({
  select: RecipeYieldSelectSchema.optional(),
  include: RecipeYieldIncludeSchema.optional(),
  where: RecipeYieldWhereInputSchema.optional(),
  orderBy: z.union([ RecipeYieldOrderByWithRelationInputSchema.array(),RecipeYieldOrderByWithRelationInputSchema ]).optional(),
  cursor: RecipeYieldWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RecipeYieldScalarFieldEnumSchema,RecipeYieldScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RecipeYieldAggregateArgsSchema: z.ZodType<Prisma.RecipeYieldAggregateArgs> = z.object({
  where: RecipeYieldWhereInputSchema.optional(),
  orderBy: z.union([ RecipeYieldOrderByWithRelationInputSchema.array(),RecipeYieldOrderByWithRelationInputSchema ]).optional(),
  cursor: RecipeYieldWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const RecipeYieldGroupByArgsSchema: z.ZodType<Prisma.RecipeYieldGroupByArgs> = z.object({
  where: RecipeYieldWhereInputSchema.optional(),
  orderBy: z.union([ RecipeYieldOrderByWithAggregationInputSchema.array(),RecipeYieldOrderByWithAggregationInputSchema ]).optional(),
  by: RecipeYieldScalarFieldEnumSchema.array(),
  having: RecipeYieldScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const RecipeYieldFindUniqueArgsSchema: z.ZodType<Prisma.RecipeYieldFindUniqueArgs> = z.object({
  select: RecipeYieldSelectSchema.optional(),
  include: RecipeYieldIncludeSchema.optional(),
  where: RecipeYieldWhereUniqueInputSchema,
}).strict() ;

export const RecipeYieldFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.RecipeYieldFindUniqueOrThrowArgs> = z.object({
  select: RecipeYieldSelectSchema.optional(),
  include: RecipeYieldIncludeSchema.optional(),
  where: RecipeYieldWhereUniqueInputSchema,
}).strict() ;

export const RecipeLaborCostFindFirstArgsSchema: z.ZodType<Prisma.RecipeLaborCostFindFirstArgs> = z.object({
  select: RecipeLaborCostSelectSchema.optional(),
  include: RecipeLaborCostIncludeSchema.optional(),
  where: RecipeLaborCostWhereInputSchema.optional(),
  orderBy: z.union([ RecipeLaborCostOrderByWithRelationInputSchema.array(),RecipeLaborCostOrderByWithRelationInputSchema ]).optional(),
  cursor: RecipeLaborCostWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RecipeLaborCostScalarFieldEnumSchema,RecipeLaborCostScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RecipeLaborCostFindFirstOrThrowArgsSchema: z.ZodType<Prisma.RecipeLaborCostFindFirstOrThrowArgs> = z.object({
  select: RecipeLaborCostSelectSchema.optional(),
  include: RecipeLaborCostIncludeSchema.optional(),
  where: RecipeLaborCostWhereInputSchema.optional(),
  orderBy: z.union([ RecipeLaborCostOrderByWithRelationInputSchema.array(),RecipeLaborCostOrderByWithRelationInputSchema ]).optional(),
  cursor: RecipeLaborCostWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RecipeLaborCostScalarFieldEnumSchema,RecipeLaborCostScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RecipeLaborCostFindManyArgsSchema: z.ZodType<Prisma.RecipeLaborCostFindManyArgs> = z.object({
  select: RecipeLaborCostSelectSchema.optional(),
  include: RecipeLaborCostIncludeSchema.optional(),
  where: RecipeLaborCostWhereInputSchema.optional(),
  orderBy: z.union([ RecipeLaborCostOrderByWithRelationInputSchema.array(),RecipeLaborCostOrderByWithRelationInputSchema ]).optional(),
  cursor: RecipeLaborCostWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RecipeLaborCostScalarFieldEnumSchema,RecipeLaborCostScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RecipeLaborCostAggregateArgsSchema: z.ZodType<Prisma.RecipeLaborCostAggregateArgs> = z.object({
  where: RecipeLaborCostWhereInputSchema.optional(),
  orderBy: z.union([ RecipeLaborCostOrderByWithRelationInputSchema.array(),RecipeLaborCostOrderByWithRelationInputSchema ]).optional(),
  cursor: RecipeLaborCostWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const RecipeLaborCostGroupByArgsSchema: z.ZodType<Prisma.RecipeLaborCostGroupByArgs> = z.object({
  where: RecipeLaborCostWhereInputSchema.optional(),
  orderBy: z.union([ RecipeLaborCostOrderByWithAggregationInputSchema.array(),RecipeLaborCostOrderByWithAggregationInputSchema ]).optional(),
  by: RecipeLaborCostScalarFieldEnumSchema.array(),
  having: RecipeLaborCostScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const RecipeLaborCostFindUniqueArgsSchema: z.ZodType<Prisma.RecipeLaborCostFindUniqueArgs> = z.object({
  select: RecipeLaborCostSelectSchema.optional(),
  include: RecipeLaborCostIncludeSchema.optional(),
  where: RecipeLaborCostWhereUniqueInputSchema,
}).strict() ;

export const RecipeLaborCostFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.RecipeLaborCostFindUniqueOrThrowArgs> = z.object({
  select: RecipeLaborCostSelectSchema.optional(),
  include: RecipeLaborCostIncludeSchema.optional(),
  where: RecipeLaborCostWhereUniqueInputSchema,
}).strict() ;

export const SalesTransactionsFindFirstArgsSchema: z.ZodType<Prisma.SalesTransactionsFindFirstArgs> = z.object({
  select: SalesTransactionsSelectSchema.optional(),
  include: SalesTransactionsIncludeSchema.optional(),
  where: SalesTransactionsWhereInputSchema.optional(),
  orderBy: z.union([ SalesTransactionsOrderByWithRelationInputSchema.array(),SalesTransactionsOrderByWithRelationInputSchema ]).optional(),
  cursor: SalesTransactionsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SalesTransactionsScalarFieldEnumSchema,SalesTransactionsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SalesTransactionsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.SalesTransactionsFindFirstOrThrowArgs> = z.object({
  select: SalesTransactionsSelectSchema.optional(),
  include: SalesTransactionsIncludeSchema.optional(),
  where: SalesTransactionsWhereInputSchema.optional(),
  orderBy: z.union([ SalesTransactionsOrderByWithRelationInputSchema.array(),SalesTransactionsOrderByWithRelationInputSchema ]).optional(),
  cursor: SalesTransactionsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SalesTransactionsScalarFieldEnumSchema,SalesTransactionsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SalesTransactionsFindManyArgsSchema: z.ZodType<Prisma.SalesTransactionsFindManyArgs> = z.object({
  select: SalesTransactionsSelectSchema.optional(),
  include: SalesTransactionsIncludeSchema.optional(),
  where: SalesTransactionsWhereInputSchema.optional(),
  orderBy: z.union([ SalesTransactionsOrderByWithRelationInputSchema.array(),SalesTransactionsOrderByWithRelationInputSchema ]).optional(),
  cursor: SalesTransactionsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SalesTransactionsScalarFieldEnumSchema,SalesTransactionsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SalesTransactionsAggregateArgsSchema: z.ZodType<Prisma.SalesTransactionsAggregateArgs> = z.object({
  where: SalesTransactionsWhereInputSchema.optional(),
  orderBy: z.union([ SalesTransactionsOrderByWithRelationInputSchema.array(),SalesTransactionsOrderByWithRelationInputSchema ]).optional(),
  cursor: SalesTransactionsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SalesTransactionsGroupByArgsSchema: z.ZodType<Prisma.SalesTransactionsGroupByArgs> = z.object({
  where: SalesTransactionsWhereInputSchema.optional(),
  orderBy: z.union([ SalesTransactionsOrderByWithAggregationInputSchema.array(),SalesTransactionsOrderByWithAggregationInputSchema ]).optional(),
  by: SalesTransactionsScalarFieldEnumSchema.array(),
  having: SalesTransactionsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SalesTransactionsFindUniqueArgsSchema: z.ZodType<Prisma.SalesTransactionsFindUniqueArgs> = z.object({
  select: SalesTransactionsSelectSchema.optional(),
  include: SalesTransactionsIncludeSchema.optional(),
  where: SalesTransactionsWhereUniqueInputSchema,
}).strict() ;

export const SalesTransactionsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.SalesTransactionsFindUniqueOrThrowArgs> = z.object({
  select: SalesTransactionsSelectSchema.optional(),
  include: SalesTransactionsIncludeSchema.optional(),
  where: SalesTransactionsWhereUniqueInputSchema,
}).strict() ;

export const MenuCategoryFindFirstArgsSchema: z.ZodType<Prisma.MenuCategoryFindFirstArgs> = z.object({
  select: MenuCategorySelectSchema.optional(),
  include: MenuCategoryIncludeSchema.optional(),
  where: MenuCategoryWhereInputSchema.optional(),
  orderBy: z.union([ MenuCategoryOrderByWithRelationInputSchema.array(),MenuCategoryOrderByWithRelationInputSchema ]).optional(),
  cursor: MenuCategoryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MenuCategoryScalarFieldEnumSchema,MenuCategoryScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const MenuCategoryFindFirstOrThrowArgsSchema: z.ZodType<Prisma.MenuCategoryFindFirstOrThrowArgs> = z.object({
  select: MenuCategorySelectSchema.optional(),
  include: MenuCategoryIncludeSchema.optional(),
  where: MenuCategoryWhereInputSchema.optional(),
  orderBy: z.union([ MenuCategoryOrderByWithRelationInputSchema.array(),MenuCategoryOrderByWithRelationInputSchema ]).optional(),
  cursor: MenuCategoryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MenuCategoryScalarFieldEnumSchema,MenuCategoryScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const MenuCategoryFindManyArgsSchema: z.ZodType<Prisma.MenuCategoryFindManyArgs> = z.object({
  select: MenuCategorySelectSchema.optional(),
  include: MenuCategoryIncludeSchema.optional(),
  where: MenuCategoryWhereInputSchema.optional(),
  orderBy: z.union([ MenuCategoryOrderByWithRelationInputSchema.array(),MenuCategoryOrderByWithRelationInputSchema ]).optional(),
  cursor: MenuCategoryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MenuCategoryScalarFieldEnumSchema,MenuCategoryScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const MenuCategoryAggregateArgsSchema: z.ZodType<Prisma.MenuCategoryAggregateArgs> = z.object({
  where: MenuCategoryWhereInputSchema.optional(),
  orderBy: z.union([ MenuCategoryOrderByWithRelationInputSchema.array(),MenuCategoryOrderByWithRelationInputSchema ]).optional(),
  cursor: MenuCategoryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const MenuCategoryGroupByArgsSchema: z.ZodType<Prisma.MenuCategoryGroupByArgs> = z.object({
  where: MenuCategoryWhereInputSchema.optional(),
  orderBy: z.union([ MenuCategoryOrderByWithAggregationInputSchema.array(),MenuCategoryOrderByWithAggregationInputSchema ]).optional(),
  by: MenuCategoryScalarFieldEnumSchema.array(),
  having: MenuCategoryScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const MenuCategoryFindUniqueArgsSchema: z.ZodType<Prisma.MenuCategoryFindUniqueArgs> = z.object({
  select: MenuCategorySelectSchema.optional(),
  include: MenuCategoryIncludeSchema.optional(),
  where: MenuCategoryWhereUniqueInputSchema,
}).strict() ;

export const MenuCategoryFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.MenuCategoryFindUniqueOrThrowArgs> = z.object({
  select: MenuCategorySelectSchema.optional(),
  include: MenuCategoryIncludeSchema.optional(),
  where: MenuCategoryWhereUniqueInputSchema,
}).strict() ;

export const RecipeVersionFindFirstArgsSchema: z.ZodType<Prisma.RecipeVersionFindFirstArgs> = z.object({
  select: RecipeVersionSelectSchema.optional(),
  include: RecipeVersionIncludeSchema.optional(),
  where: RecipeVersionWhereInputSchema.optional(),
  orderBy: z.union([ RecipeVersionOrderByWithRelationInputSchema.array(),RecipeVersionOrderByWithRelationInputSchema ]).optional(),
  cursor: RecipeVersionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RecipeVersionScalarFieldEnumSchema,RecipeVersionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RecipeVersionFindFirstOrThrowArgsSchema: z.ZodType<Prisma.RecipeVersionFindFirstOrThrowArgs> = z.object({
  select: RecipeVersionSelectSchema.optional(),
  include: RecipeVersionIncludeSchema.optional(),
  where: RecipeVersionWhereInputSchema.optional(),
  orderBy: z.union([ RecipeVersionOrderByWithRelationInputSchema.array(),RecipeVersionOrderByWithRelationInputSchema ]).optional(),
  cursor: RecipeVersionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RecipeVersionScalarFieldEnumSchema,RecipeVersionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RecipeVersionFindManyArgsSchema: z.ZodType<Prisma.RecipeVersionFindManyArgs> = z.object({
  select: RecipeVersionSelectSchema.optional(),
  include: RecipeVersionIncludeSchema.optional(),
  where: RecipeVersionWhereInputSchema.optional(),
  orderBy: z.union([ RecipeVersionOrderByWithRelationInputSchema.array(),RecipeVersionOrderByWithRelationInputSchema ]).optional(),
  cursor: RecipeVersionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RecipeVersionScalarFieldEnumSchema,RecipeVersionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RecipeVersionAggregateArgsSchema: z.ZodType<Prisma.RecipeVersionAggregateArgs> = z.object({
  where: RecipeVersionWhereInputSchema.optional(),
  orderBy: z.union([ RecipeVersionOrderByWithRelationInputSchema.array(),RecipeVersionOrderByWithRelationInputSchema ]).optional(),
  cursor: RecipeVersionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const RecipeVersionGroupByArgsSchema: z.ZodType<Prisma.RecipeVersionGroupByArgs> = z.object({
  where: RecipeVersionWhereInputSchema.optional(),
  orderBy: z.union([ RecipeVersionOrderByWithAggregationInputSchema.array(),RecipeVersionOrderByWithAggregationInputSchema ]).optional(),
  by: RecipeVersionScalarFieldEnumSchema.array(),
  having: RecipeVersionScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const RecipeVersionFindUniqueArgsSchema: z.ZodType<Prisma.RecipeVersionFindUniqueArgs> = z.object({
  select: RecipeVersionSelectSchema.optional(),
  include: RecipeVersionIncludeSchema.optional(),
  where: RecipeVersionWhereUniqueInputSchema,
}).strict() ;

export const RecipeVersionFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.RecipeVersionFindUniqueOrThrowArgs> = z.object({
  select: RecipeVersionSelectSchema.optional(),
  include: RecipeVersionIncludeSchema.optional(),
  where: RecipeVersionWhereUniqueInputSchema,
}).strict() ;

export const EquipmentFindFirstArgsSchema: z.ZodType<Prisma.EquipmentFindFirstArgs> = z.object({
  select: EquipmentSelectSchema.optional(),
  include: EquipmentIncludeSchema.optional(),
  where: EquipmentWhereInputSchema.optional(),
  orderBy: z.union([ EquipmentOrderByWithRelationInputSchema.array(),EquipmentOrderByWithRelationInputSchema ]).optional(),
  cursor: EquipmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EquipmentScalarFieldEnumSchema,EquipmentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const EquipmentFindFirstOrThrowArgsSchema: z.ZodType<Prisma.EquipmentFindFirstOrThrowArgs> = z.object({
  select: EquipmentSelectSchema.optional(),
  include: EquipmentIncludeSchema.optional(),
  where: EquipmentWhereInputSchema.optional(),
  orderBy: z.union([ EquipmentOrderByWithRelationInputSchema.array(),EquipmentOrderByWithRelationInputSchema ]).optional(),
  cursor: EquipmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EquipmentScalarFieldEnumSchema,EquipmentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const EquipmentFindManyArgsSchema: z.ZodType<Prisma.EquipmentFindManyArgs> = z.object({
  select: EquipmentSelectSchema.optional(),
  include: EquipmentIncludeSchema.optional(),
  where: EquipmentWhereInputSchema.optional(),
  orderBy: z.union([ EquipmentOrderByWithRelationInputSchema.array(),EquipmentOrderByWithRelationInputSchema ]).optional(),
  cursor: EquipmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EquipmentScalarFieldEnumSchema,EquipmentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const EquipmentAggregateArgsSchema: z.ZodType<Prisma.EquipmentAggregateArgs> = z.object({
  where: EquipmentWhereInputSchema.optional(),
  orderBy: z.union([ EquipmentOrderByWithRelationInputSchema.array(),EquipmentOrderByWithRelationInputSchema ]).optional(),
  cursor: EquipmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const EquipmentGroupByArgsSchema: z.ZodType<Prisma.EquipmentGroupByArgs> = z.object({
  where: EquipmentWhereInputSchema.optional(),
  orderBy: z.union([ EquipmentOrderByWithAggregationInputSchema.array(),EquipmentOrderByWithAggregationInputSchema ]).optional(),
  by: EquipmentScalarFieldEnumSchema.array(),
  having: EquipmentScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const EquipmentFindUniqueArgsSchema: z.ZodType<Prisma.EquipmentFindUniqueArgs> = z.object({
  select: EquipmentSelectSchema.optional(),
  include: EquipmentIncludeSchema.optional(),
  where: EquipmentWhereUniqueInputSchema,
}).strict() ;

export const EquipmentFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.EquipmentFindUniqueOrThrowArgs> = z.object({
  select: EquipmentSelectSchema.optional(),
  include: EquipmentIncludeSchema.optional(),
  where: EquipmentWhereUniqueInputSchema,
}).strict() ;

export const RecipeEquipmentFindFirstArgsSchema: z.ZodType<Prisma.RecipeEquipmentFindFirstArgs> = z.object({
  select: RecipeEquipmentSelectSchema.optional(),
  include: RecipeEquipmentIncludeSchema.optional(),
  where: RecipeEquipmentWhereInputSchema.optional(),
  orderBy: z.union([ RecipeEquipmentOrderByWithRelationInputSchema.array(),RecipeEquipmentOrderByWithRelationInputSchema ]).optional(),
  cursor: RecipeEquipmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RecipeEquipmentScalarFieldEnumSchema,RecipeEquipmentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RecipeEquipmentFindFirstOrThrowArgsSchema: z.ZodType<Prisma.RecipeEquipmentFindFirstOrThrowArgs> = z.object({
  select: RecipeEquipmentSelectSchema.optional(),
  include: RecipeEquipmentIncludeSchema.optional(),
  where: RecipeEquipmentWhereInputSchema.optional(),
  orderBy: z.union([ RecipeEquipmentOrderByWithRelationInputSchema.array(),RecipeEquipmentOrderByWithRelationInputSchema ]).optional(),
  cursor: RecipeEquipmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RecipeEquipmentScalarFieldEnumSchema,RecipeEquipmentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RecipeEquipmentFindManyArgsSchema: z.ZodType<Prisma.RecipeEquipmentFindManyArgs> = z.object({
  select: RecipeEquipmentSelectSchema.optional(),
  include: RecipeEquipmentIncludeSchema.optional(),
  where: RecipeEquipmentWhereInputSchema.optional(),
  orderBy: z.union([ RecipeEquipmentOrderByWithRelationInputSchema.array(),RecipeEquipmentOrderByWithRelationInputSchema ]).optional(),
  cursor: RecipeEquipmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RecipeEquipmentScalarFieldEnumSchema,RecipeEquipmentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RecipeEquipmentAggregateArgsSchema: z.ZodType<Prisma.RecipeEquipmentAggregateArgs> = z.object({
  where: RecipeEquipmentWhereInputSchema.optional(),
  orderBy: z.union([ RecipeEquipmentOrderByWithRelationInputSchema.array(),RecipeEquipmentOrderByWithRelationInputSchema ]).optional(),
  cursor: RecipeEquipmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const RecipeEquipmentGroupByArgsSchema: z.ZodType<Prisma.RecipeEquipmentGroupByArgs> = z.object({
  where: RecipeEquipmentWhereInputSchema.optional(),
  orderBy: z.union([ RecipeEquipmentOrderByWithAggregationInputSchema.array(),RecipeEquipmentOrderByWithAggregationInputSchema ]).optional(),
  by: RecipeEquipmentScalarFieldEnumSchema.array(),
  having: RecipeEquipmentScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const RecipeEquipmentFindUniqueArgsSchema: z.ZodType<Prisma.RecipeEquipmentFindUniqueArgs> = z.object({
  select: RecipeEquipmentSelectSchema.optional(),
  include: RecipeEquipmentIncludeSchema.optional(),
  where: RecipeEquipmentWhereUniqueInputSchema,
}).strict() ;

export const RecipeEquipmentFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.RecipeEquipmentFindUniqueOrThrowArgs> = z.object({
  select: RecipeEquipmentSelectSchema.optional(),
  include: RecipeEquipmentIncludeSchema.optional(),
  where: RecipeEquipmentWhereUniqueInputSchema,
}).strict() ;

export const MaintenanceLogFindFirstArgsSchema: z.ZodType<Prisma.MaintenanceLogFindFirstArgs> = z.object({
  select: MaintenanceLogSelectSchema.optional(),
  include: MaintenanceLogIncludeSchema.optional(),
  where: MaintenanceLogWhereInputSchema.optional(),
  orderBy: z.union([ MaintenanceLogOrderByWithRelationInputSchema.array(),MaintenanceLogOrderByWithRelationInputSchema ]).optional(),
  cursor: MaintenanceLogWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MaintenanceLogScalarFieldEnumSchema,MaintenanceLogScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const MaintenanceLogFindFirstOrThrowArgsSchema: z.ZodType<Prisma.MaintenanceLogFindFirstOrThrowArgs> = z.object({
  select: MaintenanceLogSelectSchema.optional(),
  include: MaintenanceLogIncludeSchema.optional(),
  where: MaintenanceLogWhereInputSchema.optional(),
  orderBy: z.union([ MaintenanceLogOrderByWithRelationInputSchema.array(),MaintenanceLogOrderByWithRelationInputSchema ]).optional(),
  cursor: MaintenanceLogWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MaintenanceLogScalarFieldEnumSchema,MaintenanceLogScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const MaintenanceLogFindManyArgsSchema: z.ZodType<Prisma.MaintenanceLogFindManyArgs> = z.object({
  select: MaintenanceLogSelectSchema.optional(),
  include: MaintenanceLogIncludeSchema.optional(),
  where: MaintenanceLogWhereInputSchema.optional(),
  orderBy: z.union([ MaintenanceLogOrderByWithRelationInputSchema.array(),MaintenanceLogOrderByWithRelationInputSchema ]).optional(),
  cursor: MaintenanceLogWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MaintenanceLogScalarFieldEnumSchema,MaintenanceLogScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const MaintenanceLogAggregateArgsSchema: z.ZodType<Prisma.MaintenanceLogAggregateArgs> = z.object({
  where: MaintenanceLogWhereInputSchema.optional(),
  orderBy: z.union([ MaintenanceLogOrderByWithRelationInputSchema.array(),MaintenanceLogOrderByWithRelationInputSchema ]).optional(),
  cursor: MaintenanceLogWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const MaintenanceLogGroupByArgsSchema: z.ZodType<Prisma.MaintenanceLogGroupByArgs> = z.object({
  where: MaintenanceLogWhereInputSchema.optional(),
  orderBy: z.union([ MaintenanceLogOrderByWithAggregationInputSchema.array(),MaintenanceLogOrderByWithAggregationInputSchema ]).optional(),
  by: MaintenanceLogScalarFieldEnumSchema.array(),
  having: MaintenanceLogScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const MaintenanceLogFindUniqueArgsSchema: z.ZodType<Prisma.MaintenanceLogFindUniqueArgs> = z.object({
  select: MaintenanceLogSelectSchema.optional(),
  include: MaintenanceLogIncludeSchema.optional(),
  where: MaintenanceLogWhereUniqueInputSchema,
}).strict() ;

export const MaintenanceLogFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.MaintenanceLogFindUniqueOrThrowArgs> = z.object({
  select: MaintenanceLogSelectSchema.optional(),
  include: MaintenanceLogIncludeSchema.optional(),
  where: MaintenanceLogWhereUniqueInputSchema,
}).strict() ;

export const QualityChecklistFindFirstArgsSchema: z.ZodType<Prisma.QualityChecklistFindFirstArgs> = z.object({
  select: QualityChecklistSelectSchema.optional(),
  include: QualityChecklistIncludeSchema.optional(),
  where: QualityChecklistWhereInputSchema.optional(),
  orderBy: z.union([ QualityChecklistOrderByWithRelationInputSchema.array(),QualityChecklistOrderByWithRelationInputSchema ]).optional(),
  cursor: QualityChecklistWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ QualityChecklistScalarFieldEnumSchema,QualityChecklistScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const QualityChecklistFindFirstOrThrowArgsSchema: z.ZodType<Prisma.QualityChecklistFindFirstOrThrowArgs> = z.object({
  select: QualityChecklistSelectSchema.optional(),
  include: QualityChecklistIncludeSchema.optional(),
  where: QualityChecklistWhereInputSchema.optional(),
  orderBy: z.union([ QualityChecklistOrderByWithRelationInputSchema.array(),QualityChecklistOrderByWithRelationInputSchema ]).optional(),
  cursor: QualityChecklistWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ QualityChecklistScalarFieldEnumSchema,QualityChecklistScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const QualityChecklistFindManyArgsSchema: z.ZodType<Prisma.QualityChecklistFindManyArgs> = z.object({
  select: QualityChecklistSelectSchema.optional(),
  include: QualityChecklistIncludeSchema.optional(),
  where: QualityChecklistWhereInputSchema.optional(),
  orderBy: z.union([ QualityChecklistOrderByWithRelationInputSchema.array(),QualityChecklistOrderByWithRelationInputSchema ]).optional(),
  cursor: QualityChecklistWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ QualityChecklistScalarFieldEnumSchema,QualityChecklistScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const QualityChecklistAggregateArgsSchema: z.ZodType<Prisma.QualityChecklistAggregateArgs> = z.object({
  where: QualityChecklistWhereInputSchema.optional(),
  orderBy: z.union([ QualityChecklistOrderByWithRelationInputSchema.array(),QualityChecklistOrderByWithRelationInputSchema ]).optional(),
  cursor: QualityChecklistWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const QualityChecklistGroupByArgsSchema: z.ZodType<Prisma.QualityChecklistGroupByArgs> = z.object({
  where: QualityChecklistWhereInputSchema.optional(),
  orderBy: z.union([ QualityChecklistOrderByWithAggregationInputSchema.array(),QualityChecklistOrderByWithAggregationInputSchema ]).optional(),
  by: QualityChecklistScalarFieldEnumSchema.array(),
  having: QualityChecklistScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const QualityChecklistFindUniqueArgsSchema: z.ZodType<Prisma.QualityChecklistFindUniqueArgs> = z.object({
  select: QualityChecklistSelectSchema.optional(),
  include: QualityChecklistIncludeSchema.optional(),
  where: QualityChecklistWhereUniqueInputSchema,
}).strict() ;

export const QualityChecklistFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.QualityChecklistFindUniqueOrThrowArgs> = z.object({
  select: QualityChecklistSelectSchema.optional(),
  include: QualityChecklistIncludeSchema.optional(),
  where: QualityChecklistWhereUniqueInputSchema,
}).strict() ;

export const ChecklistItemFindFirstArgsSchema: z.ZodType<Prisma.ChecklistItemFindFirstArgs> = z.object({
  select: ChecklistItemSelectSchema.optional(),
  include: ChecklistItemIncludeSchema.optional(),
  where: ChecklistItemWhereInputSchema.optional(),
  orderBy: z.union([ ChecklistItemOrderByWithRelationInputSchema.array(),ChecklistItemOrderByWithRelationInputSchema ]).optional(),
  cursor: ChecklistItemWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ChecklistItemScalarFieldEnumSchema,ChecklistItemScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ChecklistItemFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ChecklistItemFindFirstOrThrowArgs> = z.object({
  select: ChecklistItemSelectSchema.optional(),
  include: ChecklistItemIncludeSchema.optional(),
  where: ChecklistItemWhereInputSchema.optional(),
  orderBy: z.union([ ChecklistItemOrderByWithRelationInputSchema.array(),ChecklistItemOrderByWithRelationInputSchema ]).optional(),
  cursor: ChecklistItemWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ChecklistItemScalarFieldEnumSchema,ChecklistItemScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ChecklistItemFindManyArgsSchema: z.ZodType<Prisma.ChecklistItemFindManyArgs> = z.object({
  select: ChecklistItemSelectSchema.optional(),
  include: ChecklistItemIncludeSchema.optional(),
  where: ChecklistItemWhereInputSchema.optional(),
  orderBy: z.union([ ChecklistItemOrderByWithRelationInputSchema.array(),ChecklistItemOrderByWithRelationInputSchema ]).optional(),
  cursor: ChecklistItemWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ChecklistItemScalarFieldEnumSchema,ChecklistItemScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ChecklistItemAggregateArgsSchema: z.ZodType<Prisma.ChecklistItemAggregateArgs> = z.object({
  where: ChecklistItemWhereInputSchema.optional(),
  orderBy: z.union([ ChecklistItemOrderByWithRelationInputSchema.array(),ChecklistItemOrderByWithRelationInputSchema ]).optional(),
  cursor: ChecklistItemWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ChecklistItemGroupByArgsSchema: z.ZodType<Prisma.ChecklistItemGroupByArgs> = z.object({
  where: ChecklistItemWhereInputSchema.optional(),
  orderBy: z.union([ ChecklistItemOrderByWithAggregationInputSchema.array(),ChecklistItemOrderByWithAggregationInputSchema ]).optional(),
  by: ChecklistItemScalarFieldEnumSchema.array(),
  having: ChecklistItemScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ChecklistItemFindUniqueArgsSchema: z.ZodType<Prisma.ChecklistItemFindUniqueArgs> = z.object({
  select: ChecklistItemSelectSchema.optional(),
  include: ChecklistItemIncludeSchema.optional(),
  where: ChecklistItemWhereUniqueInputSchema,
}).strict() ;

export const ChecklistItemFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ChecklistItemFindUniqueOrThrowArgs> = z.object({
  select: ChecklistItemSelectSchema.optional(),
  include: ChecklistItemIncludeSchema.optional(),
  where: ChecklistItemWhereUniqueInputSchema,
}).strict() ;

export const ChecklistCompleteFindFirstArgsSchema: z.ZodType<Prisma.ChecklistCompleteFindFirstArgs> = z.object({
  select: ChecklistCompleteSelectSchema.optional(),
  include: ChecklistCompleteIncludeSchema.optional(),
  where: ChecklistCompleteWhereInputSchema.optional(),
  orderBy: z.union([ ChecklistCompleteOrderByWithRelationInputSchema.array(),ChecklistCompleteOrderByWithRelationInputSchema ]).optional(),
  cursor: ChecklistCompleteWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ChecklistCompleteScalarFieldEnumSchema,ChecklistCompleteScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ChecklistCompleteFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ChecklistCompleteFindFirstOrThrowArgs> = z.object({
  select: ChecklistCompleteSelectSchema.optional(),
  include: ChecklistCompleteIncludeSchema.optional(),
  where: ChecklistCompleteWhereInputSchema.optional(),
  orderBy: z.union([ ChecklistCompleteOrderByWithRelationInputSchema.array(),ChecklistCompleteOrderByWithRelationInputSchema ]).optional(),
  cursor: ChecklistCompleteWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ChecklistCompleteScalarFieldEnumSchema,ChecklistCompleteScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ChecklistCompleteFindManyArgsSchema: z.ZodType<Prisma.ChecklistCompleteFindManyArgs> = z.object({
  select: ChecklistCompleteSelectSchema.optional(),
  include: ChecklistCompleteIncludeSchema.optional(),
  where: ChecklistCompleteWhereInputSchema.optional(),
  orderBy: z.union([ ChecklistCompleteOrderByWithRelationInputSchema.array(),ChecklistCompleteOrderByWithRelationInputSchema ]).optional(),
  cursor: ChecklistCompleteWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ChecklistCompleteScalarFieldEnumSchema,ChecklistCompleteScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ChecklistCompleteAggregateArgsSchema: z.ZodType<Prisma.ChecklistCompleteAggregateArgs> = z.object({
  where: ChecklistCompleteWhereInputSchema.optional(),
  orderBy: z.union([ ChecklistCompleteOrderByWithRelationInputSchema.array(),ChecklistCompleteOrderByWithRelationInputSchema ]).optional(),
  cursor: ChecklistCompleteWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ChecklistCompleteGroupByArgsSchema: z.ZodType<Prisma.ChecklistCompleteGroupByArgs> = z.object({
  where: ChecklistCompleteWhereInputSchema.optional(),
  orderBy: z.union([ ChecklistCompleteOrderByWithAggregationInputSchema.array(),ChecklistCompleteOrderByWithAggregationInputSchema ]).optional(),
  by: ChecklistCompleteScalarFieldEnumSchema.array(),
  having: ChecklistCompleteScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ChecklistCompleteFindUniqueArgsSchema: z.ZodType<Prisma.ChecklistCompleteFindUniqueArgs> = z.object({
  select: ChecklistCompleteSelectSchema.optional(),
  include: ChecklistCompleteIncludeSchema.optional(),
  where: ChecklistCompleteWhereUniqueInputSchema,
}).strict() ;

export const ChecklistCompleteFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ChecklistCompleteFindUniqueOrThrowArgs> = z.object({
  select: ChecklistCompleteSelectSchema.optional(),
  include: ChecklistCompleteIncludeSchema.optional(),
  where: ChecklistCompleteWhereUniqueInputSchema,
}).strict() ;

export const ChecklistItemCompleteFindFirstArgsSchema: z.ZodType<Prisma.ChecklistItemCompleteFindFirstArgs> = z.object({
  select: ChecklistItemCompleteSelectSchema.optional(),
  include: ChecklistItemCompleteIncludeSchema.optional(),
  where: ChecklistItemCompleteWhereInputSchema.optional(),
  orderBy: z.union([ ChecklistItemCompleteOrderByWithRelationInputSchema.array(),ChecklistItemCompleteOrderByWithRelationInputSchema ]).optional(),
  cursor: ChecklistItemCompleteWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ChecklistItemCompleteScalarFieldEnumSchema,ChecklistItemCompleteScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ChecklistItemCompleteFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ChecklistItemCompleteFindFirstOrThrowArgs> = z.object({
  select: ChecklistItemCompleteSelectSchema.optional(),
  include: ChecklistItemCompleteIncludeSchema.optional(),
  where: ChecklistItemCompleteWhereInputSchema.optional(),
  orderBy: z.union([ ChecklistItemCompleteOrderByWithRelationInputSchema.array(),ChecklistItemCompleteOrderByWithRelationInputSchema ]).optional(),
  cursor: ChecklistItemCompleteWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ChecklistItemCompleteScalarFieldEnumSchema,ChecklistItemCompleteScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ChecklistItemCompleteFindManyArgsSchema: z.ZodType<Prisma.ChecklistItemCompleteFindManyArgs> = z.object({
  select: ChecklistItemCompleteSelectSchema.optional(),
  include: ChecklistItemCompleteIncludeSchema.optional(),
  where: ChecklistItemCompleteWhereInputSchema.optional(),
  orderBy: z.union([ ChecklistItemCompleteOrderByWithRelationInputSchema.array(),ChecklistItemCompleteOrderByWithRelationInputSchema ]).optional(),
  cursor: ChecklistItemCompleteWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ChecklistItemCompleteScalarFieldEnumSchema,ChecklistItemCompleteScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ChecklistItemCompleteAggregateArgsSchema: z.ZodType<Prisma.ChecklistItemCompleteAggregateArgs> = z.object({
  where: ChecklistItemCompleteWhereInputSchema.optional(),
  orderBy: z.union([ ChecklistItemCompleteOrderByWithRelationInputSchema.array(),ChecklistItemCompleteOrderByWithRelationInputSchema ]).optional(),
  cursor: ChecklistItemCompleteWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ChecklistItemCompleteGroupByArgsSchema: z.ZodType<Prisma.ChecklistItemCompleteGroupByArgs> = z.object({
  where: ChecklistItemCompleteWhereInputSchema.optional(),
  orderBy: z.union([ ChecklistItemCompleteOrderByWithAggregationInputSchema.array(),ChecklistItemCompleteOrderByWithAggregationInputSchema ]).optional(),
  by: ChecklistItemCompleteScalarFieldEnumSchema.array(),
  having: ChecklistItemCompleteScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ChecklistItemCompleteFindUniqueArgsSchema: z.ZodType<Prisma.ChecklistItemCompleteFindUniqueArgs> = z.object({
  select: ChecklistItemCompleteSelectSchema.optional(),
  include: ChecklistItemCompleteIncludeSchema.optional(),
  where: ChecklistItemCompleteWhereUniqueInputSchema,
}).strict() ;

export const ChecklistItemCompleteFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ChecklistItemCompleteFindUniqueOrThrowArgs> = z.object({
  select: ChecklistItemCompleteSelectSchema.optional(),
  include: ChecklistItemCompleteIncludeSchema.optional(),
  where: ChecklistItemCompleteWhereUniqueInputSchema,
}).strict() ;

export const SupplierPriceHistoryFindFirstArgsSchema: z.ZodType<Prisma.SupplierPriceHistoryFindFirstArgs> = z.object({
  select: SupplierPriceHistorySelectSchema.optional(),
  include: SupplierPriceHistoryIncludeSchema.optional(),
  where: SupplierPriceHistoryWhereInputSchema.optional(),
  orderBy: z.union([ SupplierPriceHistoryOrderByWithRelationInputSchema.array(),SupplierPriceHistoryOrderByWithRelationInputSchema ]).optional(),
  cursor: SupplierPriceHistoryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SupplierPriceHistoryScalarFieldEnumSchema,SupplierPriceHistoryScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SupplierPriceHistoryFindFirstOrThrowArgsSchema: z.ZodType<Prisma.SupplierPriceHistoryFindFirstOrThrowArgs> = z.object({
  select: SupplierPriceHistorySelectSchema.optional(),
  include: SupplierPriceHistoryIncludeSchema.optional(),
  where: SupplierPriceHistoryWhereInputSchema.optional(),
  orderBy: z.union([ SupplierPriceHistoryOrderByWithRelationInputSchema.array(),SupplierPriceHistoryOrderByWithRelationInputSchema ]).optional(),
  cursor: SupplierPriceHistoryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SupplierPriceHistoryScalarFieldEnumSchema,SupplierPriceHistoryScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SupplierPriceHistoryFindManyArgsSchema: z.ZodType<Prisma.SupplierPriceHistoryFindManyArgs> = z.object({
  select: SupplierPriceHistorySelectSchema.optional(),
  include: SupplierPriceHistoryIncludeSchema.optional(),
  where: SupplierPriceHistoryWhereInputSchema.optional(),
  orderBy: z.union([ SupplierPriceHistoryOrderByWithRelationInputSchema.array(),SupplierPriceHistoryOrderByWithRelationInputSchema ]).optional(),
  cursor: SupplierPriceHistoryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SupplierPriceHistoryScalarFieldEnumSchema,SupplierPriceHistoryScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SupplierPriceHistoryAggregateArgsSchema: z.ZodType<Prisma.SupplierPriceHistoryAggregateArgs> = z.object({
  where: SupplierPriceHistoryWhereInputSchema.optional(),
  orderBy: z.union([ SupplierPriceHistoryOrderByWithRelationInputSchema.array(),SupplierPriceHistoryOrderByWithRelationInputSchema ]).optional(),
  cursor: SupplierPriceHistoryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SupplierPriceHistoryGroupByArgsSchema: z.ZodType<Prisma.SupplierPriceHistoryGroupByArgs> = z.object({
  where: SupplierPriceHistoryWhereInputSchema.optional(),
  orderBy: z.union([ SupplierPriceHistoryOrderByWithAggregationInputSchema.array(),SupplierPriceHistoryOrderByWithAggregationInputSchema ]).optional(),
  by: SupplierPriceHistoryScalarFieldEnumSchema.array(),
  having: SupplierPriceHistoryScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SupplierPriceHistoryFindUniqueArgsSchema: z.ZodType<Prisma.SupplierPriceHistoryFindUniqueArgs> = z.object({
  select: SupplierPriceHistorySelectSchema.optional(),
  include: SupplierPriceHistoryIncludeSchema.optional(),
  where: SupplierPriceHistoryWhereUniqueInputSchema,
}).strict() ;

export const SupplierPriceHistoryFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.SupplierPriceHistoryFindUniqueOrThrowArgs> = z.object({
  select: SupplierPriceHistorySelectSchema.optional(),
  include: SupplierPriceHistoryIncludeSchema.optional(),
  where: SupplierPriceHistoryWhereUniqueInputSchema,
}).strict() ;

export const CustomerFeedbackFindFirstArgsSchema: z.ZodType<Prisma.CustomerFeedbackFindFirstArgs> = z.object({
  select: CustomerFeedbackSelectSchema.optional(),
  include: CustomerFeedbackIncludeSchema.optional(),
  where: CustomerFeedbackWhereInputSchema.optional(),
  orderBy: z.union([ CustomerFeedbackOrderByWithRelationInputSchema.array(),CustomerFeedbackOrderByWithRelationInputSchema ]).optional(),
  cursor: CustomerFeedbackWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CustomerFeedbackScalarFieldEnumSchema,CustomerFeedbackScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CustomerFeedbackFindFirstOrThrowArgsSchema: z.ZodType<Prisma.CustomerFeedbackFindFirstOrThrowArgs> = z.object({
  select: CustomerFeedbackSelectSchema.optional(),
  include: CustomerFeedbackIncludeSchema.optional(),
  where: CustomerFeedbackWhereInputSchema.optional(),
  orderBy: z.union([ CustomerFeedbackOrderByWithRelationInputSchema.array(),CustomerFeedbackOrderByWithRelationInputSchema ]).optional(),
  cursor: CustomerFeedbackWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CustomerFeedbackScalarFieldEnumSchema,CustomerFeedbackScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CustomerFeedbackFindManyArgsSchema: z.ZodType<Prisma.CustomerFeedbackFindManyArgs> = z.object({
  select: CustomerFeedbackSelectSchema.optional(),
  include: CustomerFeedbackIncludeSchema.optional(),
  where: CustomerFeedbackWhereInputSchema.optional(),
  orderBy: z.union([ CustomerFeedbackOrderByWithRelationInputSchema.array(),CustomerFeedbackOrderByWithRelationInputSchema ]).optional(),
  cursor: CustomerFeedbackWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CustomerFeedbackScalarFieldEnumSchema,CustomerFeedbackScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CustomerFeedbackAggregateArgsSchema: z.ZodType<Prisma.CustomerFeedbackAggregateArgs> = z.object({
  where: CustomerFeedbackWhereInputSchema.optional(),
  orderBy: z.union([ CustomerFeedbackOrderByWithRelationInputSchema.array(),CustomerFeedbackOrderByWithRelationInputSchema ]).optional(),
  cursor: CustomerFeedbackWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CustomerFeedbackGroupByArgsSchema: z.ZodType<Prisma.CustomerFeedbackGroupByArgs> = z.object({
  where: CustomerFeedbackWhereInputSchema.optional(),
  orderBy: z.union([ CustomerFeedbackOrderByWithAggregationInputSchema.array(),CustomerFeedbackOrderByWithAggregationInputSchema ]).optional(),
  by: CustomerFeedbackScalarFieldEnumSchema.array(),
  having: CustomerFeedbackScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CustomerFeedbackFindUniqueArgsSchema: z.ZodType<Prisma.CustomerFeedbackFindUniqueArgs> = z.object({
  select: CustomerFeedbackSelectSchema.optional(),
  include: CustomerFeedbackIncludeSchema.optional(),
  where: CustomerFeedbackWhereUniqueInputSchema,
}).strict() ;

export const CustomerFeedbackFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.CustomerFeedbackFindUniqueOrThrowArgs> = z.object({
  select: CustomerFeedbackSelectSchema.optional(),
  include: CustomerFeedbackIncludeSchema.optional(),
  where: CustomerFeedbackWhereUniqueInputSchema,
}).strict() ;

export const DietaryRestrictionFindFirstArgsSchema: z.ZodType<Prisma.DietaryRestrictionFindFirstArgs> = z.object({
  select: DietaryRestrictionSelectSchema.optional(),
  include: DietaryRestrictionIncludeSchema.optional(),
  where: DietaryRestrictionWhereInputSchema.optional(),
  orderBy: z.union([ DietaryRestrictionOrderByWithRelationInputSchema.array(),DietaryRestrictionOrderByWithRelationInputSchema ]).optional(),
  cursor: DietaryRestrictionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ DietaryRestrictionScalarFieldEnumSchema,DietaryRestrictionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const DietaryRestrictionFindFirstOrThrowArgsSchema: z.ZodType<Prisma.DietaryRestrictionFindFirstOrThrowArgs> = z.object({
  select: DietaryRestrictionSelectSchema.optional(),
  include: DietaryRestrictionIncludeSchema.optional(),
  where: DietaryRestrictionWhereInputSchema.optional(),
  orderBy: z.union([ DietaryRestrictionOrderByWithRelationInputSchema.array(),DietaryRestrictionOrderByWithRelationInputSchema ]).optional(),
  cursor: DietaryRestrictionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ DietaryRestrictionScalarFieldEnumSchema,DietaryRestrictionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const DietaryRestrictionFindManyArgsSchema: z.ZodType<Prisma.DietaryRestrictionFindManyArgs> = z.object({
  select: DietaryRestrictionSelectSchema.optional(),
  include: DietaryRestrictionIncludeSchema.optional(),
  where: DietaryRestrictionWhereInputSchema.optional(),
  orderBy: z.union([ DietaryRestrictionOrderByWithRelationInputSchema.array(),DietaryRestrictionOrderByWithRelationInputSchema ]).optional(),
  cursor: DietaryRestrictionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ DietaryRestrictionScalarFieldEnumSchema,DietaryRestrictionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const DietaryRestrictionAggregateArgsSchema: z.ZodType<Prisma.DietaryRestrictionAggregateArgs> = z.object({
  where: DietaryRestrictionWhereInputSchema.optional(),
  orderBy: z.union([ DietaryRestrictionOrderByWithRelationInputSchema.array(),DietaryRestrictionOrderByWithRelationInputSchema ]).optional(),
  cursor: DietaryRestrictionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const DietaryRestrictionGroupByArgsSchema: z.ZodType<Prisma.DietaryRestrictionGroupByArgs> = z.object({
  where: DietaryRestrictionWhereInputSchema.optional(),
  orderBy: z.union([ DietaryRestrictionOrderByWithAggregationInputSchema.array(),DietaryRestrictionOrderByWithAggregationInputSchema ]).optional(),
  by: DietaryRestrictionScalarFieldEnumSchema.array(),
  having: DietaryRestrictionScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const DietaryRestrictionFindUniqueArgsSchema: z.ZodType<Prisma.DietaryRestrictionFindUniqueArgs> = z.object({
  select: DietaryRestrictionSelectSchema.optional(),
  include: DietaryRestrictionIncludeSchema.optional(),
  where: DietaryRestrictionWhereUniqueInputSchema,
}).strict() ;

export const DietaryRestrictionFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.DietaryRestrictionFindUniqueOrThrowArgs> = z.object({
  select: DietaryRestrictionSelectSchema.optional(),
  include: DietaryRestrictionIncludeSchema.optional(),
  where: DietaryRestrictionWhereUniqueInputSchema,
}).strict() ;

export const RecipeTagFindFirstArgsSchema: z.ZodType<Prisma.RecipeTagFindFirstArgs> = z.object({
  select: RecipeTagSelectSchema.optional(),
  include: RecipeTagIncludeSchema.optional(),
  where: RecipeTagWhereInputSchema.optional(),
  orderBy: z.union([ RecipeTagOrderByWithRelationInputSchema.array(),RecipeTagOrderByWithRelationInputSchema ]).optional(),
  cursor: RecipeTagWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RecipeTagScalarFieldEnumSchema,RecipeTagScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RecipeTagFindFirstOrThrowArgsSchema: z.ZodType<Prisma.RecipeTagFindFirstOrThrowArgs> = z.object({
  select: RecipeTagSelectSchema.optional(),
  include: RecipeTagIncludeSchema.optional(),
  where: RecipeTagWhereInputSchema.optional(),
  orderBy: z.union([ RecipeTagOrderByWithRelationInputSchema.array(),RecipeTagOrderByWithRelationInputSchema ]).optional(),
  cursor: RecipeTagWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RecipeTagScalarFieldEnumSchema,RecipeTagScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RecipeTagFindManyArgsSchema: z.ZodType<Prisma.RecipeTagFindManyArgs> = z.object({
  select: RecipeTagSelectSchema.optional(),
  include: RecipeTagIncludeSchema.optional(),
  where: RecipeTagWhereInputSchema.optional(),
  orderBy: z.union([ RecipeTagOrderByWithRelationInputSchema.array(),RecipeTagOrderByWithRelationInputSchema ]).optional(),
  cursor: RecipeTagWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RecipeTagScalarFieldEnumSchema,RecipeTagScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RecipeTagAggregateArgsSchema: z.ZodType<Prisma.RecipeTagAggregateArgs> = z.object({
  where: RecipeTagWhereInputSchema.optional(),
  orderBy: z.union([ RecipeTagOrderByWithRelationInputSchema.array(),RecipeTagOrderByWithRelationInputSchema ]).optional(),
  cursor: RecipeTagWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const RecipeTagGroupByArgsSchema: z.ZodType<Prisma.RecipeTagGroupByArgs> = z.object({
  where: RecipeTagWhereInputSchema.optional(),
  orderBy: z.union([ RecipeTagOrderByWithAggregationInputSchema.array(),RecipeTagOrderByWithAggregationInputSchema ]).optional(),
  by: RecipeTagScalarFieldEnumSchema.array(),
  having: RecipeTagScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const RecipeTagFindUniqueArgsSchema: z.ZodType<Prisma.RecipeTagFindUniqueArgs> = z.object({
  select: RecipeTagSelectSchema.optional(),
  include: RecipeTagIncludeSchema.optional(),
  where: RecipeTagWhereUniqueInputSchema,
}).strict() ;

export const RecipeTagFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.RecipeTagFindUniqueOrThrowArgs> = z.object({
  select: RecipeTagSelectSchema.optional(),
  include: RecipeTagIncludeSchema.optional(),
  where: RecipeTagWhereUniqueInputSchema,
}).strict() ;

export const LeftoverItemFindFirstArgsSchema: z.ZodType<Prisma.LeftoverItemFindFirstArgs> = z.object({
  select: LeftoverItemSelectSchema.optional(),
  include: LeftoverItemIncludeSchema.optional(),
  where: LeftoverItemWhereInputSchema.optional(),
  orderBy: z.union([ LeftoverItemOrderByWithRelationInputSchema.array(),LeftoverItemOrderByWithRelationInputSchema ]).optional(),
  cursor: LeftoverItemWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LeftoverItemScalarFieldEnumSchema,LeftoverItemScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const LeftoverItemFindFirstOrThrowArgsSchema: z.ZodType<Prisma.LeftoverItemFindFirstOrThrowArgs> = z.object({
  select: LeftoverItemSelectSchema.optional(),
  include: LeftoverItemIncludeSchema.optional(),
  where: LeftoverItemWhereInputSchema.optional(),
  orderBy: z.union([ LeftoverItemOrderByWithRelationInputSchema.array(),LeftoverItemOrderByWithRelationInputSchema ]).optional(),
  cursor: LeftoverItemWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LeftoverItemScalarFieldEnumSchema,LeftoverItemScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const LeftoverItemFindManyArgsSchema: z.ZodType<Prisma.LeftoverItemFindManyArgs> = z.object({
  select: LeftoverItemSelectSchema.optional(),
  include: LeftoverItemIncludeSchema.optional(),
  where: LeftoverItemWhereInputSchema.optional(),
  orderBy: z.union([ LeftoverItemOrderByWithRelationInputSchema.array(),LeftoverItemOrderByWithRelationInputSchema ]).optional(),
  cursor: LeftoverItemWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LeftoverItemScalarFieldEnumSchema,LeftoverItemScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const LeftoverItemAggregateArgsSchema: z.ZodType<Prisma.LeftoverItemAggregateArgs> = z.object({
  where: LeftoverItemWhereInputSchema.optional(),
  orderBy: z.union([ LeftoverItemOrderByWithRelationInputSchema.array(),LeftoverItemOrderByWithRelationInputSchema ]).optional(),
  cursor: LeftoverItemWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const LeftoverItemGroupByArgsSchema: z.ZodType<Prisma.LeftoverItemGroupByArgs> = z.object({
  where: LeftoverItemWhereInputSchema.optional(),
  orderBy: z.union([ LeftoverItemOrderByWithAggregationInputSchema.array(),LeftoverItemOrderByWithAggregationInputSchema ]).optional(),
  by: LeftoverItemScalarFieldEnumSchema.array(),
  having: LeftoverItemScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const LeftoverItemFindUniqueArgsSchema: z.ZodType<Prisma.LeftoverItemFindUniqueArgs> = z.object({
  select: LeftoverItemSelectSchema.optional(),
  include: LeftoverItemIncludeSchema.optional(),
  where: LeftoverItemWhereUniqueInputSchema,
}).strict() ;

export const LeftoverItemFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.LeftoverItemFindUniqueOrThrowArgs> = z.object({
  select: LeftoverItemSelectSchema.optional(),
  include: LeftoverItemIncludeSchema.optional(),
  where: LeftoverItemWhereUniqueInputSchema,
}).strict() ;

export const WasteRecordFindFirstArgsSchema: z.ZodType<Prisma.WasteRecordFindFirstArgs> = z.object({
  select: WasteRecordSelectSchema.optional(),
  include: WasteRecordIncludeSchema.optional(),
  where: WasteRecordWhereInputSchema.optional(),
  orderBy: z.union([ WasteRecordOrderByWithRelationInputSchema.array(),WasteRecordOrderByWithRelationInputSchema ]).optional(),
  cursor: WasteRecordWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ WasteRecordScalarFieldEnumSchema,WasteRecordScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const WasteRecordFindFirstOrThrowArgsSchema: z.ZodType<Prisma.WasteRecordFindFirstOrThrowArgs> = z.object({
  select: WasteRecordSelectSchema.optional(),
  include: WasteRecordIncludeSchema.optional(),
  where: WasteRecordWhereInputSchema.optional(),
  orderBy: z.union([ WasteRecordOrderByWithRelationInputSchema.array(),WasteRecordOrderByWithRelationInputSchema ]).optional(),
  cursor: WasteRecordWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ WasteRecordScalarFieldEnumSchema,WasteRecordScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const WasteRecordFindManyArgsSchema: z.ZodType<Prisma.WasteRecordFindManyArgs> = z.object({
  select: WasteRecordSelectSchema.optional(),
  include: WasteRecordIncludeSchema.optional(),
  where: WasteRecordWhereInputSchema.optional(),
  orderBy: z.union([ WasteRecordOrderByWithRelationInputSchema.array(),WasteRecordOrderByWithRelationInputSchema ]).optional(),
  cursor: WasteRecordWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ WasteRecordScalarFieldEnumSchema,WasteRecordScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const WasteRecordAggregateArgsSchema: z.ZodType<Prisma.WasteRecordAggregateArgs> = z.object({
  where: WasteRecordWhereInputSchema.optional(),
  orderBy: z.union([ WasteRecordOrderByWithRelationInputSchema.array(),WasteRecordOrderByWithRelationInputSchema ]).optional(),
  cursor: WasteRecordWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const WasteRecordGroupByArgsSchema: z.ZodType<Prisma.WasteRecordGroupByArgs> = z.object({
  where: WasteRecordWhereInputSchema.optional(),
  orderBy: z.union([ WasteRecordOrderByWithAggregationInputSchema.array(),WasteRecordOrderByWithAggregationInputSchema ]).optional(),
  by: WasteRecordScalarFieldEnumSchema.array(),
  having: WasteRecordScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const WasteRecordFindUniqueArgsSchema: z.ZodType<Prisma.WasteRecordFindUniqueArgs> = z.object({
  select: WasteRecordSelectSchema.optional(),
  include: WasteRecordIncludeSchema.optional(),
  where: WasteRecordWhereUniqueInputSchema,
}).strict() ;

export const WasteRecordFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.WasteRecordFindUniqueOrThrowArgs> = z.object({
  select: WasteRecordSelectSchema.optional(),
  include: WasteRecordIncludeSchema.optional(),
  where: WasteRecordWhereUniqueInputSchema,
}).strict() ;

export const ProductionPlanFindFirstArgsSchema: z.ZodType<Prisma.ProductionPlanFindFirstArgs> = z.object({
  select: ProductionPlanSelectSchema.optional(),
  include: ProductionPlanIncludeSchema.optional(),
  where: ProductionPlanWhereInputSchema.optional(),
  orderBy: z.union([ ProductionPlanOrderByWithRelationInputSchema.array(),ProductionPlanOrderByWithRelationInputSchema ]).optional(),
  cursor: ProductionPlanWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProductionPlanScalarFieldEnumSchema,ProductionPlanScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProductionPlanFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ProductionPlanFindFirstOrThrowArgs> = z.object({
  select: ProductionPlanSelectSchema.optional(),
  include: ProductionPlanIncludeSchema.optional(),
  where: ProductionPlanWhereInputSchema.optional(),
  orderBy: z.union([ ProductionPlanOrderByWithRelationInputSchema.array(),ProductionPlanOrderByWithRelationInputSchema ]).optional(),
  cursor: ProductionPlanWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProductionPlanScalarFieldEnumSchema,ProductionPlanScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProductionPlanFindManyArgsSchema: z.ZodType<Prisma.ProductionPlanFindManyArgs> = z.object({
  select: ProductionPlanSelectSchema.optional(),
  include: ProductionPlanIncludeSchema.optional(),
  where: ProductionPlanWhereInputSchema.optional(),
  orderBy: z.union([ ProductionPlanOrderByWithRelationInputSchema.array(),ProductionPlanOrderByWithRelationInputSchema ]).optional(),
  cursor: ProductionPlanWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProductionPlanScalarFieldEnumSchema,ProductionPlanScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProductionPlanAggregateArgsSchema: z.ZodType<Prisma.ProductionPlanAggregateArgs> = z.object({
  where: ProductionPlanWhereInputSchema.optional(),
  orderBy: z.union([ ProductionPlanOrderByWithRelationInputSchema.array(),ProductionPlanOrderByWithRelationInputSchema ]).optional(),
  cursor: ProductionPlanWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ProductionPlanGroupByArgsSchema: z.ZodType<Prisma.ProductionPlanGroupByArgs> = z.object({
  where: ProductionPlanWhereInputSchema.optional(),
  orderBy: z.union([ ProductionPlanOrderByWithAggregationInputSchema.array(),ProductionPlanOrderByWithAggregationInputSchema ]).optional(),
  by: ProductionPlanScalarFieldEnumSchema.array(),
  having: ProductionPlanScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ProductionPlanFindUniqueArgsSchema: z.ZodType<Prisma.ProductionPlanFindUniqueArgs> = z.object({
  select: ProductionPlanSelectSchema.optional(),
  include: ProductionPlanIncludeSchema.optional(),
  where: ProductionPlanWhereUniqueInputSchema,
}).strict() ;

export const ProductionPlanFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ProductionPlanFindUniqueOrThrowArgs> = z.object({
  select: ProductionPlanSelectSchema.optional(),
  include: ProductionPlanIncludeSchema.optional(),
  where: ProductionPlanWhereUniqueInputSchema,
}).strict() ;

export const ProductionPlanItemFindFirstArgsSchema: z.ZodType<Prisma.ProductionPlanItemFindFirstArgs> = z.object({
  select: ProductionPlanItemSelectSchema.optional(),
  include: ProductionPlanItemIncludeSchema.optional(),
  where: ProductionPlanItemWhereInputSchema.optional(),
  orderBy: z.union([ ProductionPlanItemOrderByWithRelationInputSchema.array(),ProductionPlanItemOrderByWithRelationInputSchema ]).optional(),
  cursor: ProductionPlanItemWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProductionPlanItemScalarFieldEnumSchema,ProductionPlanItemScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProductionPlanItemFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ProductionPlanItemFindFirstOrThrowArgs> = z.object({
  select: ProductionPlanItemSelectSchema.optional(),
  include: ProductionPlanItemIncludeSchema.optional(),
  where: ProductionPlanItemWhereInputSchema.optional(),
  orderBy: z.union([ ProductionPlanItemOrderByWithRelationInputSchema.array(),ProductionPlanItemOrderByWithRelationInputSchema ]).optional(),
  cursor: ProductionPlanItemWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProductionPlanItemScalarFieldEnumSchema,ProductionPlanItemScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProductionPlanItemFindManyArgsSchema: z.ZodType<Prisma.ProductionPlanItemFindManyArgs> = z.object({
  select: ProductionPlanItemSelectSchema.optional(),
  include: ProductionPlanItemIncludeSchema.optional(),
  where: ProductionPlanItemWhereInputSchema.optional(),
  orderBy: z.union([ ProductionPlanItemOrderByWithRelationInputSchema.array(),ProductionPlanItemOrderByWithRelationInputSchema ]).optional(),
  cursor: ProductionPlanItemWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProductionPlanItemScalarFieldEnumSchema,ProductionPlanItemScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProductionPlanItemAggregateArgsSchema: z.ZodType<Prisma.ProductionPlanItemAggregateArgs> = z.object({
  where: ProductionPlanItemWhereInputSchema.optional(),
  orderBy: z.union([ ProductionPlanItemOrderByWithRelationInputSchema.array(),ProductionPlanItemOrderByWithRelationInputSchema ]).optional(),
  cursor: ProductionPlanItemWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ProductionPlanItemGroupByArgsSchema: z.ZodType<Prisma.ProductionPlanItemGroupByArgs> = z.object({
  where: ProductionPlanItemWhereInputSchema.optional(),
  orderBy: z.union([ ProductionPlanItemOrderByWithAggregationInputSchema.array(),ProductionPlanItemOrderByWithAggregationInputSchema ]).optional(),
  by: ProductionPlanItemScalarFieldEnumSchema.array(),
  having: ProductionPlanItemScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ProductionPlanItemFindUniqueArgsSchema: z.ZodType<Prisma.ProductionPlanItemFindUniqueArgs> = z.object({
  select: ProductionPlanItemSelectSchema.optional(),
  include: ProductionPlanItemIncludeSchema.optional(),
  where: ProductionPlanItemWhereUniqueInputSchema,
}).strict() ;

export const ProductionPlanItemFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ProductionPlanItemFindUniqueOrThrowArgs> = z.object({
  select: ProductionPlanItemSelectSchema.optional(),
  include: ProductionPlanItemIncludeSchema.optional(),
  where: ProductionPlanItemWhereUniqueInputSchema,
}).strict() ;

export const ShiftTaskFindFirstArgsSchema: z.ZodType<Prisma.ShiftTaskFindFirstArgs> = z.object({
  select: ShiftTaskSelectSchema.optional(),
  include: ShiftTaskIncludeSchema.optional(),
  where: ShiftTaskWhereInputSchema.optional(),
  orderBy: z.union([ ShiftTaskOrderByWithRelationInputSchema.array(),ShiftTaskOrderByWithRelationInputSchema ]).optional(),
  cursor: ShiftTaskWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ShiftTaskScalarFieldEnumSchema,ShiftTaskScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ShiftTaskFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ShiftTaskFindFirstOrThrowArgs> = z.object({
  select: ShiftTaskSelectSchema.optional(),
  include: ShiftTaskIncludeSchema.optional(),
  where: ShiftTaskWhereInputSchema.optional(),
  orderBy: z.union([ ShiftTaskOrderByWithRelationInputSchema.array(),ShiftTaskOrderByWithRelationInputSchema ]).optional(),
  cursor: ShiftTaskWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ShiftTaskScalarFieldEnumSchema,ShiftTaskScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ShiftTaskFindManyArgsSchema: z.ZodType<Prisma.ShiftTaskFindManyArgs> = z.object({
  select: ShiftTaskSelectSchema.optional(),
  include: ShiftTaskIncludeSchema.optional(),
  where: ShiftTaskWhereInputSchema.optional(),
  orderBy: z.union([ ShiftTaskOrderByWithRelationInputSchema.array(),ShiftTaskOrderByWithRelationInputSchema ]).optional(),
  cursor: ShiftTaskWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ShiftTaskScalarFieldEnumSchema,ShiftTaskScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ShiftTaskAggregateArgsSchema: z.ZodType<Prisma.ShiftTaskAggregateArgs> = z.object({
  where: ShiftTaskWhereInputSchema.optional(),
  orderBy: z.union([ ShiftTaskOrderByWithRelationInputSchema.array(),ShiftTaskOrderByWithRelationInputSchema ]).optional(),
  cursor: ShiftTaskWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ShiftTaskGroupByArgsSchema: z.ZodType<Prisma.ShiftTaskGroupByArgs> = z.object({
  where: ShiftTaskWhereInputSchema.optional(),
  orderBy: z.union([ ShiftTaskOrderByWithAggregationInputSchema.array(),ShiftTaskOrderByWithAggregationInputSchema ]).optional(),
  by: ShiftTaskScalarFieldEnumSchema.array(),
  having: ShiftTaskScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ShiftTaskFindUniqueArgsSchema: z.ZodType<Prisma.ShiftTaskFindUniqueArgs> = z.object({
  select: ShiftTaskSelectSchema.optional(),
  include: ShiftTaskIncludeSchema.optional(),
  where: ShiftTaskWhereUniqueInputSchema,
}).strict() ;

export const ShiftTaskFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ShiftTaskFindUniqueOrThrowArgs> = z.object({
  select: ShiftTaskSelectSchema.optional(),
  include: ShiftTaskIncludeSchema.optional(),
  where: ShiftTaskWhereUniqueInputSchema,
}).strict() ;

export const AvailabilityFindFirstArgsSchema: z.ZodType<Prisma.AvailabilityFindFirstArgs> = z.object({
  select: AvailabilitySelectSchema.optional(),
  include: AvailabilityIncludeSchema.optional(),
  where: AvailabilityWhereInputSchema.optional(),
  orderBy: z.union([ AvailabilityOrderByWithRelationInputSchema.array(),AvailabilityOrderByWithRelationInputSchema ]).optional(),
  cursor: AvailabilityWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AvailabilityScalarFieldEnumSchema,AvailabilityScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AvailabilityFindFirstOrThrowArgsSchema: z.ZodType<Prisma.AvailabilityFindFirstOrThrowArgs> = z.object({
  select: AvailabilitySelectSchema.optional(),
  include: AvailabilityIncludeSchema.optional(),
  where: AvailabilityWhereInputSchema.optional(),
  orderBy: z.union([ AvailabilityOrderByWithRelationInputSchema.array(),AvailabilityOrderByWithRelationInputSchema ]).optional(),
  cursor: AvailabilityWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AvailabilityScalarFieldEnumSchema,AvailabilityScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AvailabilityFindManyArgsSchema: z.ZodType<Prisma.AvailabilityFindManyArgs> = z.object({
  select: AvailabilitySelectSchema.optional(),
  include: AvailabilityIncludeSchema.optional(),
  where: AvailabilityWhereInputSchema.optional(),
  orderBy: z.union([ AvailabilityOrderByWithRelationInputSchema.array(),AvailabilityOrderByWithRelationInputSchema ]).optional(),
  cursor: AvailabilityWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AvailabilityScalarFieldEnumSchema,AvailabilityScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AvailabilityAggregateArgsSchema: z.ZodType<Prisma.AvailabilityAggregateArgs> = z.object({
  where: AvailabilityWhereInputSchema.optional(),
  orderBy: z.union([ AvailabilityOrderByWithRelationInputSchema.array(),AvailabilityOrderByWithRelationInputSchema ]).optional(),
  cursor: AvailabilityWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AvailabilityGroupByArgsSchema: z.ZodType<Prisma.AvailabilityGroupByArgs> = z.object({
  where: AvailabilityWhereInputSchema.optional(),
  orderBy: z.union([ AvailabilityOrderByWithAggregationInputSchema.array(),AvailabilityOrderByWithAggregationInputSchema ]).optional(),
  by: AvailabilityScalarFieldEnumSchema.array(),
  having: AvailabilityScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AvailabilityFindUniqueArgsSchema: z.ZodType<Prisma.AvailabilityFindUniqueArgs> = z.object({
  select: AvailabilitySelectSchema.optional(),
  include: AvailabilityIncludeSchema.optional(),
  where: AvailabilityWhereUniqueInputSchema,
}).strict() ;

export const AvailabilityFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.AvailabilityFindUniqueOrThrowArgs> = z.object({
  select: AvailabilitySelectSchema.optional(),
  include: AvailabilityIncludeSchema.optional(),
  where: AvailabilityWhereUniqueInputSchema,
}).strict() ;

export const SchedulingConstraintFindFirstArgsSchema: z.ZodType<Prisma.SchedulingConstraintFindFirstArgs> = z.object({
  select: SchedulingConstraintSelectSchema.optional(),
  include: SchedulingConstraintIncludeSchema.optional(),
  where: SchedulingConstraintWhereInputSchema.optional(),
  orderBy: z.union([ SchedulingConstraintOrderByWithRelationInputSchema.array(),SchedulingConstraintOrderByWithRelationInputSchema ]).optional(),
  cursor: SchedulingConstraintWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SchedulingConstraintScalarFieldEnumSchema,SchedulingConstraintScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SchedulingConstraintFindFirstOrThrowArgsSchema: z.ZodType<Prisma.SchedulingConstraintFindFirstOrThrowArgs> = z.object({
  select: SchedulingConstraintSelectSchema.optional(),
  include: SchedulingConstraintIncludeSchema.optional(),
  where: SchedulingConstraintWhereInputSchema.optional(),
  orderBy: z.union([ SchedulingConstraintOrderByWithRelationInputSchema.array(),SchedulingConstraintOrderByWithRelationInputSchema ]).optional(),
  cursor: SchedulingConstraintWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SchedulingConstraintScalarFieldEnumSchema,SchedulingConstraintScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SchedulingConstraintFindManyArgsSchema: z.ZodType<Prisma.SchedulingConstraintFindManyArgs> = z.object({
  select: SchedulingConstraintSelectSchema.optional(),
  include: SchedulingConstraintIncludeSchema.optional(),
  where: SchedulingConstraintWhereInputSchema.optional(),
  orderBy: z.union([ SchedulingConstraintOrderByWithRelationInputSchema.array(),SchedulingConstraintOrderByWithRelationInputSchema ]).optional(),
  cursor: SchedulingConstraintWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SchedulingConstraintScalarFieldEnumSchema,SchedulingConstraintScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SchedulingConstraintAggregateArgsSchema: z.ZodType<Prisma.SchedulingConstraintAggregateArgs> = z.object({
  where: SchedulingConstraintWhereInputSchema.optional(),
  orderBy: z.union([ SchedulingConstraintOrderByWithRelationInputSchema.array(),SchedulingConstraintOrderByWithRelationInputSchema ]).optional(),
  cursor: SchedulingConstraintWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SchedulingConstraintGroupByArgsSchema: z.ZodType<Prisma.SchedulingConstraintGroupByArgs> = z.object({
  where: SchedulingConstraintWhereInputSchema.optional(),
  orderBy: z.union([ SchedulingConstraintOrderByWithAggregationInputSchema.array(),SchedulingConstraintOrderByWithAggregationInputSchema ]).optional(),
  by: SchedulingConstraintScalarFieldEnumSchema.array(),
  having: SchedulingConstraintScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SchedulingConstraintFindUniqueArgsSchema: z.ZodType<Prisma.SchedulingConstraintFindUniqueArgs> = z.object({
  select: SchedulingConstraintSelectSchema.optional(),
  include: SchedulingConstraintIncludeSchema.optional(),
  where: SchedulingConstraintWhereUniqueInputSchema,
}).strict() ;

export const SchedulingConstraintFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.SchedulingConstraintFindUniqueOrThrowArgs> = z.object({
  select: SchedulingConstraintSelectSchema.optional(),
  include: SchedulingConstraintIncludeSchema.optional(),
  where: SchedulingConstraintWhereUniqueInputSchema,
}).strict() ;

export const InventoryWithdrawalFindFirstArgsSchema: z.ZodType<Prisma.InventoryWithdrawalFindFirstArgs> = z.object({
  select: InventoryWithdrawalSelectSchema.optional(),
  include: InventoryWithdrawalIncludeSchema.optional(),
  where: InventoryWithdrawalWhereInputSchema.optional(),
  orderBy: z.union([ InventoryWithdrawalOrderByWithRelationInputSchema.array(),InventoryWithdrawalOrderByWithRelationInputSchema ]).optional(),
  cursor: InventoryWithdrawalWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ InventoryWithdrawalScalarFieldEnumSchema,InventoryWithdrawalScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const InventoryWithdrawalFindFirstOrThrowArgsSchema: z.ZodType<Prisma.InventoryWithdrawalFindFirstOrThrowArgs> = z.object({
  select: InventoryWithdrawalSelectSchema.optional(),
  include: InventoryWithdrawalIncludeSchema.optional(),
  where: InventoryWithdrawalWhereInputSchema.optional(),
  orderBy: z.union([ InventoryWithdrawalOrderByWithRelationInputSchema.array(),InventoryWithdrawalOrderByWithRelationInputSchema ]).optional(),
  cursor: InventoryWithdrawalWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ InventoryWithdrawalScalarFieldEnumSchema,InventoryWithdrawalScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const InventoryWithdrawalFindManyArgsSchema: z.ZodType<Prisma.InventoryWithdrawalFindManyArgs> = z.object({
  select: InventoryWithdrawalSelectSchema.optional(),
  include: InventoryWithdrawalIncludeSchema.optional(),
  where: InventoryWithdrawalWhereInputSchema.optional(),
  orderBy: z.union([ InventoryWithdrawalOrderByWithRelationInputSchema.array(),InventoryWithdrawalOrderByWithRelationInputSchema ]).optional(),
  cursor: InventoryWithdrawalWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ InventoryWithdrawalScalarFieldEnumSchema,InventoryWithdrawalScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const InventoryWithdrawalAggregateArgsSchema: z.ZodType<Prisma.InventoryWithdrawalAggregateArgs> = z.object({
  where: InventoryWithdrawalWhereInputSchema.optional(),
  orderBy: z.union([ InventoryWithdrawalOrderByWithRelationInputSchema.array(),InventoryWithdrawalOrderByWithRelationInputSchema ]).optional(),
  cursor: InventoryWithdrawalWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const InventoryWithdrawalGroupByArgsSchema: z.ZodType<Prisma.InventoryWithdrawalGroupByArgs> = z.object({
  where: InventoryWithdrawalWhereInputSchema.optional(),
  orderBy: z.union([ InventoryWithdrawalOrderByWithAggregationInputSchema.array(),InventoryWithdrawalOrderByWithAggregationInputSchema ]).optional(),
  by: InventoryWithdrawalScalarFieldEnumSchema.array(),
  having: InventoryWithdrawalScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const InventoryWithdrawalFindUniqueArgsSchema: z.ZodType<Prisma.InventoryWithdrawalFindUniqueArgs> = z.object({
  select: InventoryWithdrawalSelectSchema.optional(),
  include: InventoryWithdrawalIncludeSchema.optional(),
  where: InventoryWithdrawalWhereUniqueInputSchema,
}).strict() ;

export const InventoryWithdrawalFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.InventoryWithdrawalFindUniqueOrThrowArgs> = z.object({
  select: InventoryWithdrawalSelectSchema.optional(),
  include: InventoryWithdrawalIncludeSchema.optional(),
  where: InventoryWithdrawalWhereUniqueInputSchema,
}).strict() ;

export const AllergenFindFirstArgsSchema: z.ZodType<Prisma.AllergenFindFirstArgs> = z.object({
  select: AllergenSelectSchema.optional(),
  include: AllergenIncludeSchema.optional(),
  where: AllergenWhereInputSchema.optional(),
  orderBy: z.union([ AllergenOrderByWithRelationInputSchema.array(),AllergenOrderByWithRelationInputSchema ]).optional(),
  cursor: AllergenWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AllergenScalarFieldEnumSchema,AllergenScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AllergenFindFirstOrThrowArgsSchema: z.ZodType<Prisma.AllergenFindFirstOrThrowArgs> = z.object({
  select: AllergenSelectSchema.optional(),
  include: AllergenIncludeSchema.optional(),
  where: AllergenWhereInputSchema.optional(),
  orderBy: z.union([ AllergenOrderByWithRelationInputSchema.array(),AllergenOrderByWithRelationInputSchema ]).optional(),
  cursor: AllergenWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AllergenScalarFieldEnumSchema,AllergenScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AllergenFindManyArgsSchema: z.ZodType<Prisma.AllergenFindManyArgs> = z.object({
  select: AllergenSelectSchema.optional(),
  include: AllergenIncludeSchema.optional(),
  where: AllergenWhereInputSchema.optional(),
  orderBy: z.union([ AllergenOrderByWithRelationInputSchema.array(),AllergenOrderByWithRelationInputSchema ]).optional(),
  cursor: AllergenWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AllergenScalarFieldEnumSchema,AllergenScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AllergenAggregateArgsSchema: z.ZodType<Prisma.AllergenAggregateArgs> = z.object({
  where: AllergenWhereInputSchema.optional(),
  orderBy: z.union([ AllergenOrderByWithRelationInputSchema.array(),AllergenOrderByWithRelationInputSchema ]).optional(),
  cursor: AllergenWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AllergenGroupByArgsSchema: z.ZodType<Prisma.AllergenGroupByArgs> = z.object({
  where: AllergenWhereInputSchema.optional(),
  orderBy: z.union([ AllergenOrderByWithAggregationInputSchema.array(),AllergenOrderByWithAggregationInputSchema ]).optional(),
  by: AllergenScalarFieldEnumSchema.array(),
  having: AllergenScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AllergenFindUniqueArgsSchema: z.ZodType<Prisma.AllergenFindUniqueArgs> = z.object({
  select: AllergenSelectSchema.optional(),
  include: AllergenIncludeSchema.optional(),
  where: AllergenWhereUniqueInputSchema,
}).strict() ;

export const AllergenFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.AllergenFindUniqueOrThrowArgs> = z.object({
  select: AllergenSelectSchema.optional(),
  include: AllergenIncludeSchema.optional(),
  where: AllergenWhereUniqueInputSchema,
}).strict() ;

export const IngredientAllergenFindFirstArgsSchema: z.ZodType<Prisma.IngredientAllergenFindFirstArgs> = z.object({
  select: IngredientAllergenSelectSchema.optional(),
  include: IngredientAllergenIncludeSchema.optional(),
  where: IngredientAllergenWhereInputSchema.optional(),
  orderBy: z.union([ IngredientAllergenOrderByWithRelationInputSchema.array(),IngredientAllergenOrderByWithRelationInputSchema ]).optional(),
  cursor: IngredientAllergenWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ IngredientAllergenScalarFieldEnumSchema,IngredientAllergenScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const IngredientAllergenFindFirstOrThrowArgsSchema: z.ZodType<Prisma.IngredientAllergenFindFirstOrThrowArgs> = z.object({
  select: IngredientAllergenSelectSchema.optional(),
  include: IngredientAllergenIncludeSchema.optional(),
  where: IngredientAllergenWhereInputSchema.optional(),
  orderBy: z.union([ IngredientAllergenOrderByWithRelationInputSchema.array(),IngredientAllergenOrderByWithRelationInputSchema ]).optional(),
  cursor: IngredientAllergenWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ IngredientAllergenScalarFieldEnumSchema,IngredientAllergenScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const IngredientAllergenFindManyArgsSchema: z.ZodType<Prisma.IngredientAllergenFindManyArgs> = z.object({
  select: IngredientAllergenSelectSchema.optional(),
  include: IngredientAllergenIncludeSchema.optional(),
  where: IngredientAllergenWhereInputSchema.optional(),
  orderBy: z.union([ IngredientAllergenOrderByWithRelationInputSchema.array(),IngredientAllergenOrderByWithRelationInputSchema ]).optional(),
  cursor: IngredientAllergenWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ IngredientAllergenScalarFieldEnumSchema,IngredientAllergenScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const IngredientAllergenAggregateArgsSchema: z.ZodType<Prisma.IngredientAllergenAggregateArgs> = z.object({
  where: IngredientAllergenWhereInputSchema.optional(),
  orderBy: z.union([ IngredientAllergenOrderByWithRelationInputSchema.array(),IngredientAllergenOrderByWithRelationInputSchema ]).optional(),
  cursor: IngredientAllergenWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const IngredientAllergenGroupByArgsSchema: z.ZodType<Prisma.IngredientAllergenGroupByArgs> = z.object({
  where: IngredientAllergenWhereInputSchema.optional(),
  orderBy: z.union([ IngredientAllergenOrderByWithAggregationInputSchema.array(),IngredientAllergenOrderByWithAggregationInputSchema ]).optional(),
  by: IngredientAllergenScalarFieldEnumSchema.array(),
  having: IngredientAllergenScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const IngredientAllergenFindUniqueArgsSchema: z.ZodType<Prisma.IngredientAllergenFindUniqueArgs> = z.object({
  select: IngredientAllergenSelectSchema.optional(),
  include: IngredientAllergenIncludeSchema.optional(),
  where: IngredientAllergenWhereUniqueInputSchema,
}).strict() ;

export const IngredientAllergenFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.IngredientAllergenFindUniqueOrThrowArgs> = z.object({
  select: IngredientAllergenSelectSchema.optional(),
  include: IngredientAllergenIncludeSchema.optional(),
  where: IngredientAllergenWhereUniqueInputSchema,
}).strict() ;

export const NutritionalRecommendationFindFirstArgsSchema: z.ZodType<Prisma.NutritionalRecommendationFindFirstArgs> = z.object({
  select: NutritionalRecommendationSelectSchema.optional(),
  include: NutritionalRecommendationIncludeSchema.optional(),
  where: NutritionalRecommendationWhereInputSchema.optional(),
  orderBy: z.union([ NutritionalRecommendationOrderByWithRelationInputSchema.array(),NutritionalRecommendationOrderByWithRelationInputSchema ]).optional(),
  cursor: NutritionalRecommendationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ NutritionalRecommendationScalarFieldEnumSchema,NutritionalRecommendationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const NutritionalRecommendationFindFirstOrThrowArgsSchema: z.ZodType<Prisma.NutritionalRecommendationFindFirstOrThrowArgs> = z.object({
  select: NutritionalRecommendationSelectSchema.optional(),
  include: NutritionalRecommendationIncludeSchema.optional(),
  where: NutritionalRecommendationWhereInputSchema.optional(),
  orderBy: z.union([ NutritionalRecommendationOrderByWithRelationInputSchema.array(),NutritionalRecommendationOrderByWithRelationInputSchema ]).optional(),
  cursor: NutritionalRecommendationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ NutritionalRecommendationScalarFieldEnumSchema,NutritionalRecommendationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const NutritionalRecommendationFindManyArgsSchema: z.ZodType<Prisma.NutritionalRecommendationFindManyArgs> = z.object({
  select: NutritionalRecommendationSelectSchema.optional(),
  include: NutritionalRecommendationIncludeSchema.optional(),
  where: NutritionalRecommendationWhereInputSchema.optional(),
  orderBy: z.union([ NutritionalRecommendationOrderByWithRelationInputSchema.array(),NutritionalRecommendationOrderByWithRelationInputSchema ]).optional(),
  cursor: NutritionalRecommendationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ NutritionalRecommendationScalarFieldEnumSchema,NutritionalRecommendationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const NutritionalRecommendationAggregateArgsSchema: z.ZodType<Prisma.NutritionalRecommendationAggregateArgs> = z.object({
  where: NutritionalRecommendationWhereInputSchema.optional(),
  orderBy: z.union([ NutritionalRecommendationOrderByWithRelationInputSchema.array(),NutritionalRecommendationOrderByWithRelationInputSchema ]).optional(),
  cursor: NutritionalRecommendationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const NutritionalRecommendationGroupByArgsSchema: z.ZodType<Prisma.NutritionalRecommendationGroupByArgs> = z.object({
  where: NutritionalRecommendationWhereInputSchema.optional(),
  orderBy: z.union([ NutritionalRecommendationOrderByWithAggregationInputSchema.array(),NutritionalRecommendationOrderByWithAggregationInputSchema ]).optional(),
  by: NutritionalRecommendationScalarFieldEnumSchema.array(),
  having: NutritionalRecommendationScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const NutritionalRecommendationFindUniqueArgsSchema: z.ZodType<Prisma.NutritionalRecommendationFindUniqueArgs> = z.object({
  select: NutritionalRecommendationSelectSchema.optional(),
  include: NutritionalRecommendationIncludeSchema.optional(),
  where: NutritionalRecommendationWhereUniqueInputSchema,
}).strict() ;

export const NutritionalRecommendationFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.NutritionalRecommendationFindUniqueOrThrowArgs> = z.object({
  select: NutritionalRecommendationSelectSchema.optional(),
  include: NutritionalRecommendationIncludeSchema.optional(),
  where: NutritionalRecommendationWhereUniqueInputSchema,
}).strict() ;

export const EarlyAccessFindFirstArgsSchema: z.ZodType<Prisma.EarlyAccessFindFirstArgs> = z.object({
  select: EarlyAccessSelectSchema.optional(),
  where: EarlyAccessWhereInputSchema.optional(),
  orderBy: z.union([ EarlyAccessOrderByWithRelationInputSchema.array(),EarlyAccessOrderByWithRelationInputSchema ]).optional(),
  cursor: EarlyAccessWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EarlyAccessScalarFieldEnumSchema,EarlyAccessScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const EarlyAccessFindFirstOrThrowArgsSchema: z.ZodType<Prisma.EarlyAccessFindFirstOrThrowArgs> = z.object({
  select: EarlyAccessSelectSchema.optional(),
  where: EarlyAccessWhereInputSchema.optional(),
  orderBy: z.union([ EarlyAccessOrderByWithRelationInputSchema.array(),EarlyAccessOrderByWithRelationInputSchema ]).optional(),
  cursor: EarlyAccessWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EarlyAccessScalarFieldEnumSchema,EarlyAccessScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const EarlyAccessFindManyArgsSchema: z.ZodType<Prisma.EarlyAccessFindManyArgs> = z.object({
  select: EarlyAccessSelectSchema.optional(),
  where: EarlyAccessWhereInputSchema.optional(),
  orderBy: z.union([ EarlyAccessOrderByWithRelationInputSchema.array(),EarlyAccessOrderByWithRelationInputSchema ]).optional(),
  cursor: EarlyAccessWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EarlyAccessScalarFieldEnumSchema,EarlyAccessScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const EarlyAccessAggregateArgsSchema: z.ZodType<Prisma.EarlyAccessAggregateArgs> = z.object({
  where: EarlyAccessWhereInputSchema.optional(),
  orderBy: z.union([ EarlyAccessOrderByWithRelationInputSchema.array(),EarlyAccessOrderByWithRelationInputSchema ]).optional(),
  cursor: EarlyAccessWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const EarlyAccessGroupByArgsSchema: z.ZodType<Prisma.EarlyAccessGroupByArgs> = z.object({
  where: EarlyAccessWhereInputSchema.optional(),
  orderBy: z.union([ EarlyAccessOrderByWithAggregationInputSchema.array(),EarlyAccessOrderByWithAggregationInputSchema ]).optional(),
  by: EarlyAccessScalarFieldEnumSchema.array(),
  having: EarlyAccessScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const EarlyAccessFindUniqueArgsSchema: z.ZodType<Prisma.EarlyAccessFindUniqueArgs> = z.object({
  select: EarlyAccessSelectSchema.optional(),
  where: EarlyAccessWhereUniqueInputSchema,
}).strict() ;

export const EarlyAccessFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.EarlyAccessFindUniqueOrThrowArgs> = z.object({
  select: EarlyAccessSelectSchema.optional(),
  where: EarlyAccessWhereUniqueInputSchema,
}).strict() ;

export const OrganizationFindFirstArgsSchema: z.ZodType<Prisma.OrganizationFindFirstArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationOrderByWithRelationInputSchema.array(),OrganizationOrderByWithRelationInputSchema ]).optional(),
  cursor: OrganizationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OrganizationScalarFieldEnumSchema,OrganizationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const OrganizationFindFirstOrThrowArgsSchema: z.ZodType<Prisma.OrganizationFindFirstOrThrowArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationOrderByWithRelationInputSchema.array(),OrganizationOrderByWithRelationInputSchema ]).optional(),
  cursor: OrganizationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OrganizationScalarFieldEnumSchema,OrganizationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const OrganizationFindManyArgsSchema: z.ZodType<Prisma.OrganizationFindManyArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationOrderByWithRelationInputSchema.array(),OrganizationOrderByWithRelationInputSchema ]).optional(),
  cursor: OrganizationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OrganizationScalarFieldEnumSchema,OrganizationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const OrganizationAggregateArgsSchema: z.ZodType<Prisma.OrganizationAggregateArgs> = z.object({
  where: OrganizationWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationOrderByWithRelationInputSchema.array(),OrganizationOrderByWithRelationInputSchema ]).optional(),
  cursor: OrganizationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const OrganizationGroupByArgsSchema: z.ZodType<Prisma.OrganizationGroupByArgs> = z.object({
  where: OrganizationWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationOrderByWithAggregationInputSchema.array(),OrganizationOrderByWithAggregationInputSchema ]).optional(),
  by: OrganizationScalarFieldEnumSchema.array(),
  having: OrganizationScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const OrganizationFindUniqueArgsSchema: z.ZodType<Prisma.OrganizationFindUniqueArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereUniqueInputSchema,
}).strict() ;

export const OrganizationFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.OrganizationFindUniqueOrThrowArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereUniqueInputSchema,
}).strict() ;

export const InventoryFindFirstArgsSchema: z.ZodType<Prisma.InventoryFindFirstArgs> = z.object({
  select: InventorySelectSchema.optional(),
  include: InventoryIncludeSchema.optional(),
  where: InventoryWhereInputSchema.optional(),
  orderBy: z.union([ InventoryOrderByWithRelationInputSchema.array(),InventoryOrderByWithRelationInputSchema ]).optional(),
  cursor: InventoryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ InventoryScalarFieldEnumSchema,InventoryScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const InventoryFindFirstOrThrowArgsSchema: z.ZodType<Prisma.InventoryFindFirstOrThrowArgs> = z.object({
  select: InventorySelectSchema.optional(),
  include: InventoryIncludeSchema.optional(),
  where: InventoryWhereInputSchema.optional(),
  orderBy: z.union([ InventoryOrderByWithRelationInputSchema.array(),InventoryOrderByWithRelationInputSchema ]).optional(),
  cursor: InventoryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ InventoryScalarFieldEnumSchema,InventoryScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const InventoryFindManyArgsSchema: z.ZodType<Prisma.InventoryFindManyArgs> = z.object({
  select: InventorySelectSchema.optional(),
  include: InventoryIncludeSchema.optional(),
  where: InventoryWhereInputSchema.optional(),
  orderBy: z.union([ InventoryOrderByWithRelationInputSchema.array(),InventoryOrderByWithRelationInputSchema ]).optional(),
  cursor: InventoryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ InventoryScalarFieldEnumSchema,InventoryScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const InventoryAggregateArgsSchema: z.ZodType<Prisma.InventoryAggregateArgs> = z.object({
  where: InventoryWhereInputSchema.optional(),
  orderBy: z.union([ InventoryOrderByWithRelationInputSchema.array(),InventoryOrderByWithRelationInputSchema ]).optional(),
  cursor: InventoryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const InventoryGroupByArgsSchema: z.ZodType<Prisma.InventoryGroupByArgs> = z.object({
  where: InventoryWhereInputSchema.optional(),
  orderBy: z.union([ InventoryOrderByWithAggregationInputSchema.array(),InventoryOrderByWithAggregationInputSchema ]).optional(),
  by: InventoryScalarFieldEnumSchema.array(),
  having: InventoryScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const InventoryFindUniqueArgsSchema: z.ZodType<Prisma.InventoryFindUniqueArgs> = z.object({
  select: InventorySelectSchema.optional(),
  include: InventoryIncludeSchema.optional(),
  where: InventoryWhereUniqueInputSchema,
}).strict() ;

export const InventoryFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.InventoryFindUniqueOrThrowArgs> = z.object({
  select: InventorySelectSchema.optional(),
  include: InventoryIncludeSchema.optional(),
  where: InventoryWhereUniqueInputSchema,
}).strict() ;

export const RestaurantFindFirstArgsSchema: z.ZodType<Prisma.RestaurantFindFirstArgs> = z.object({
  select: RestaurantSelectSchema.optional(),
  include: RestaurantIncludeSchema.optional(),
  where: RestaurantWhereInputSchema.optional(),
  orderBy: z.union([ RestaurantOrderByWithRelationInputSchema.array(),RestaurantOrderByWithRelationInputSchema ]).optional(),
  cursor: RestaurantWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RestaurantScalarFieldEnumSchema,RestaurantScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RestaurantFindFirstOrThrowArgsSchema: z.ZodType<Prisma.RestaurantFindFirstOrThrowArgs> = z.object({
  select: RestaurantSelectSchema.optional(),
  include: RestaurantIncludeSchema.optional(),
  where: RestaurantWhereInputSchema.optional(),
  orderBy: z.union([ RestaurantOrderByWithRelationInputSchema.array(),RestaurantOrderByWithRelationInputSchema ]).optional(),
  cursor: RestaurantWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RestaurantScalarFieldEnumSchema,RestaurantScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RestaurantFindManyArgsSchema: z.ZodType<Prisma.RestaurantFindManyArgs> = z.object({
  select: RestaurantSelectSchema.optional(),
  include: RestaurantIncludeSchema.optional(),
  where: RestaurantWhereInputSchema.optional(),
  orderBy: z.union([ RestaurantOrderByWithRelationInputSchema.array(),RestaurantOrderByWithRelationInputSchema ]).optional(),
  cursor: RestaurantWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RestaurantScalarFieldEnumSchema,RestaurantScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RestaurantAggregateArgsSchema: z.ZodType<Prisma.RestaurantAggregateArgs> = z.object({
  where: RestaurantWhereInputSchema.optional(),
  orderBy: z.union([ RestaurantOrderByWithRelationInputSchema.array(),RestaurantOrderByWithRelationInputSchema ]).optional(),
  cursor: RestaurantWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const RestaurantGroupByArgsSchema: z.ZodType<Prisma.RestaurantGroupByArgs> = z.object({
  where: RestaurantWhereInputSchema.optional(),
  orderBy: z.union([ RestaurantOrderByWithAggregationInputSchema.array(),RestaurantOrderByWithAggregationInputSchema ]).optional(),
  by: RestaurantScalarFieldEnumSchema.array(),
  having: RestaurantScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const RestaurantFindUniqueArgsSchema: z.ZodType<Prisma.RestaurantFindUniqueArgs> = z.object({
  select: RestaurantSelectSchema.optional(),
  include: RestaurantIncludeSchema.optional(),
  where: RestaurantWhereUniqueInputSchema,
}).strict() ;

export const RestaurantFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.RestaurantFindUniqueOrThrowArgs> = z.object({
  select: RestaurantSelectSchema.optional(),
  include: RestaurantIncludeSchema.optional(),
  where: RestaurantWhereUniqueInputSchema,
}).strict() ;

export const UserFindFirstArgsSchema: z.ZodType<Prisma.UserFindFirstArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserFindFirstOrThrowArgsSchema: z.ZodType<Prisma.UserFindFirstOrThrowArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserFindManyArgsSchema: z.ZodType<Prisma.UserFindManyArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserAggregateArgsSchema: z.ZodType<Prisma.UserAggregateArgs> = z.object({
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const UserGroupByArgsSchema: z.ZodType<Prisma.UserGroupByArgs> = z.object({
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithAggregationInputSchema.array(),UserOrderByWithAggregationInputSchema ]).optional(),
  by: UserScalarFieldEnumSchema.array(),
  having: UserScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const UserFindUniqueArgsSchema: z.ZodType<Prisma.UserFindUniqueArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const UserFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.UserFindUniqueOrThrowArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const SessionFindFirstArgsSchema: z.ZodType<Prisma.SessionFindFirstArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithRelationInputSchema.array(),SessionOrderByWithRelationInputSchema ]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SessionScalarFieldEnumSchema,SessionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SessionFindFirstOrThrowArgsSchema: z.ZodType<Prisma.SessionFindFirstOrThrowArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithRelationInputSchema.array(),SessionOrderByWithRelationInputSchema ]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SessionScalarFieldEnumSchema,SessionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SessionFindManyArgsSchema: z.ZodType<Prisma.SessionFindManyArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithRelationInputSchema.array(),SessionOrderByWithRelationInputSchema ]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SessionScalarFieldEnumSchema,SessionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SessionAggregateArgsSchema: z.ZodType<Prisma.SessionAggregateArgs> = z.object({
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithRelationInputSchema.array(),SessionOrderByWithRelationInputSchema ]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SessionGroupByArgsSchema: z.ZodType<Prisma.SessionGroupByArgs> = z.object({
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithAggregationInputSchema.array(),SessionOrderByWithAggregationInputSchema ]).optional(),
  by: SessionScalarFieldEnumSchema.array(),
  having: SessionScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SessionFindUniqueArgsSchema: z.ZodType<Prisma.SessionFindUniqueArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereUniqueInputSchema,
}).strict() ;

export const SessionFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.SessionFindUniqueOrThrowArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereUniqueInputSchema,
}).strict() ;

export const CookBookFindFirstArgsSchema: z.ZodType<Prisma.CookBookFindFirstArgs> = z.object({
  select: CookBookSelectSchema.optional(),
  include: CookBookIncludeSchema.optional(),
  where: CookBookWhereInputSchema.optional(),
  orderBy: z.union([ CookBookOrderByWithRelationInputSchema.array(),CookBookOrderByWithRelationInputSchema ]).optional(),
  cursor: CookBookWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CookBookScalarFieldEnumSchema,CookBookScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CookBookFindFirstOrThrowArgsSchema: z.ZodType<Prisma.CookBookFindFirstOrThrowArgs> = z.object({
  select: CookBookSelectSchema.optional(),
  include: CookBookIncludeSchema.optional(),
  where: CookBookWhereInputSchema.optional(),
  orderBy: z.union([ CookBookOrderByWithRelationInputSchema.array(),CookBookOrderByWithRelationInputSchema ]).optional(),
  cursor: CookBookWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CookBookScalarFieldEnumSchema,CookBookScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CookBookFindManyArgsSchema: z.ZodType<Prisma.CookBookFindManyArgs> = z.object({
  select: CookBookSelectSchema.optional(),
  include: CookBookIncludeSchema.optional(),
  where: CookBookWhereInputSchema.optional(),
  orderBy: z.union([ CookBookOrderByWithRelationInputSchema.array(),CookBookOrderByWithRelationInputSchema ]).optional(),
  cursor: CookBookWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CookBookScalarFieldEnumSchema,CookBookScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CookBookAggregateArgsSchema: z.ZodType<Prisma.CookBookAggregateArgs> = z.object({
  where: CookBookWhereInputSchema.optional(),
  orderBy: z.union([ CookBookOrderByWithRelationInputSchema.array(),CookBookOrderByWithRelationInputSchema ]).optional(),
  cursor: CookBookWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CookBookGroupByArgsSchema: z.ZodType<Prisma.CookBookGroupByArgs> = z.object({
  where: CookBookWhereInputSchema.optional(),
  orderBy: z.union([ CookBookOrderByWithAggregationInputSchema.array(),CookBookOrderByWithAggregationInputSchema ]).optional(),
  by: CookBookScalarFieldEnumSchema.array(),
  having: CookBookScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CookBookFindUniqueArgsSchema: z.ZodType<Prisma.CookBookFindUniqueArgs> = z.object({
  select: CookBookSelectSchema.optional(),
  include: CookBookIncludeSchema.optional(),
  where: CookBookWhereUniqueInputSchema,
}).strict() ;

export const CookBookFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.CookBookFindUniqueOrThrowArgs> = z.object({
  select: CookBookSelectSchema.optional(),
  include: CookBookIncludeSchema.optional(),
  where: CookBookWhereUniqueInputSchema,
}).strict() ;

export const RecipeFindFirstArgsSchema: z.ZodType<Prisma.RecipeFindFirstArgs> = z.object({
  select: RecipeSelectSchema.optional(),
  include: RecipeIncludeSchema.optional(),
  where: RecipeWhereInputSchema.optional(),
  orderBy: z.union([ RecipeOrderByWithRelationInputSchema.array(),RecipeOrderByWithRelationInputSchema ]).optional(),
  cursor: RecipeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RecipeScalarFieldEnumSchema,RecipeScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RecipeFindFirstOrThrowArgsSchema: z.ZodType<Prisma.RecipeFindFirstOrThrowArgs> = z.object({
  select: RecipeSelectSchema.optional(),
  include: RecipeIncludeSchema.optional(),
  where: RecipeWhereInputSchema.optional(),
  orderBy: z.union([ RecipeOrderByWithRelationInputSchema.array(),RecipeOrderByWithRelationInputSchema ]).optional(),
  cursor: RecipeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RecipeScalarFieldEnumSchema,RecipeScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RecipeFindManyArgsSchema: z.ZodType<Prisma.RecipeFindManyArgs> = z.object({
  select: RecipeSelectSchema.optional(),
  include: RecipeIncludeSchema.optional(),
  where: RecipeWhereInputSchema.optional(),
  orderBy: z.union([ RecipeOrderByWithRelationInputSchema.array(),RecipeOrderByWithRelationInputSchema ]).optional(),
  cursor: RecipeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RecipeScalarFieldEnumSchema,RecipeScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RecipeAggregateArgsSchema: z.ZodType<Prisma.RecipeAggregateArgs> = z.object({
  where: RecipeWhereInputSchema.optional(),
  orderBy: z.union([ RecipeOrderByWithRelationInputSchema.array(),RecipeOrderByWithRelationInputSchema ]).optional(),
  cursor: RecipeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const RecipeGroupByArgsSchema: z.ZodType<Prisma.RecipeGroupByArgs> = z.object({
  where: RecipeWhereInputSchema.optional(),
  orderBy: z.union([ RecipeOrderByWithAggregationInputSchema.array(),RecipeOrderByWithAggregationInputSchema ]).optional(),
  by: RecipeScalarFieldEnumSchema.array(),
  having: RecipeScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const RecipeFindUniqueArgsSchema: z.ZodType<Prisma.RecipeFindUniqueArgs> = z.object({
  select: RecipeSelectSchema.optional(),
  include: RecipeIncludeSchema.optional(),
  where: RecipeWhereUniqueInputSchema,
}).strict() ;

export const RecipeFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.RecipeFindUniqueOrThrowArgs> = z.object({
  select: RecipeSelectSchema.optional(),
  include: RecipeIncludeSchema.optional(),
  where: RecipeWhereUniqueInputSchema,
}).strict() ;

export const IngredientFindFirstArgsSchema: z.ZodType<Prisma.IngredientFindFirstArgs> = z.object({
  select: IngredientSelectSchema.optional(),
  include: IngredientIncludeSchema.optional(),
  where: IngredientWhereInputSchema.optional(),
  orderBy: z.union([ IngredientOrderByWithRelationInputSchema.array(),IngredientOrderByWithRelationInputSchema ]).optional(),
  cursor: IngredientWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ IngredientScalarFieldEnumSchema,IngredientScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const IngredientFindFirstOrThrowArgsSchema: z.ZodType<Prisma.IngredientFindFirstOrThrowArgs> = z.object({
  select: IngredientSelectSchema.optional(),
  include: IngredientIncludeSchema.optional(),
  where: IngredientWhereInputSchema.optional(),
  orderBy: z.union([ IngredientOrderByWithRelationInputSchema.array(),IngredientOrderByWithRelationInputSchema ]).optional(),
  cursor: IngredientWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ IngredientScalarFieldEnumSchema,IngredientScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const IngredientFindManyArgsSchema: z.ZodType<Prisma.IngredientFindManyArgs> = z.object({
  select: IngredientSelectSchema.optional(),
  include: IngredientIncludeSchema.optional(),
  where: IngredientWhereInputSchema.optional(),
  orderBy: z.union([ IngredientOrderByWithRelationInputSchema.array(),IngredientOrderByWithRelationInputSchema ]).optional(),
  cursor: IngredientWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ IngredientScalarFieldEnumSchema,IngredientScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const IngredientAggregateArgsSchema: z.ZodType<Prisma.IngredientAggregateArgs> = z.object({
  where: IngredientWhereInputSchema.optional(),
  orderBy: z.union([ IngredientOrderByWithRelationInputSchema.array(),IngredientOrderByWithRelationInputSchema ]).optional(),
  cursor: IngredientWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const IngredientGroupByArgsSchema: z.ZodType<Prisma.IngredientGroupByArgs> = z.object({
  where: IngredientWhereInputSchema.optional(),
  orderBy: z.union([ IngredientOrderByWithAggregationInputSchema.array(),IngredientOrderByWithAggregationInputSchema ]).optional(),
  by: IngredientScalarFieldEnumSchema.array(),
  having: IngredientScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const IngredientFindUniqueArgsSchema: z.ZodType<Prisma.IngredientFindUniqueArgs> = z.object({
  select: IngredientSelectSchema.optional(),
  include: IngredientIncludeSchema.optional(),
  where: IngredientWhereUniqueInputSchema,
}).strict() ;

export const IngredientFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.IngredientFindUniqueOrThrowArgs> = z.object({
  select: IngredientSelectSchema.optional(),
  include: IngredientIncludeSchema.optional(),
  where: IngredientWhereUniqueInputSchema,
}).strict() ;

export const RecipeIngredientFindFirstArgsSchema: z.ZodType<Prisma.RecipeIngredientFindFirstArgs> = z.object({
  select: RecipeIngredientSelectSchema.optional(),
  include: RecipeIngredientIncludeSchema.optional(),
  where: RecipeIngredientWhereInputSchema.optional(),
  orderBy: z.union([ RecipeIngredientOrderByWithRelationInputSchema.array(),RecipeIngredientOrderByWithRelationInputSchema ]).optional(),
  cursor: RecipeIngredientWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RecipeIngredientScalarFieldEnumSchema,RecipeIngredientScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RecipeIngredientFindFirstOrThrowArgsSchema: z.ZodType<Prisma.RecipeIngredientFindFirstOrThrowArgs> = z.object({
  select: RecipeIngredientSelectSchema.optional(),
  include: RecipeIngredientIncludeSchema.optional(),
  where: RecipeIngredientWhereInputSchema.optional(),
  orderBy: z.union([ RecipeIngredientOrderByWithRelationInputSchema.array(),RecipeIngredientOrderByWithRelationInputSchema ]).optional(),
  cursor: RecipeIngredientWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RecipeIngredientScalarFieldEnumSchema,RecipeIngredientScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RecipeIngredientFindManyArgsSchema: z.ZodType<Prisma.RecipeIngredientFindManyArgs> = z.object({
  select: RecipeIngredientSelectSchema.optional(),
  include: RecipeIngredientIncludeSchema.optional(),
  where: RecipeIngredientWhereInputSchema.optional(),
  orderBy: z.union([ RecipeIngredientOrderByWithRelationInputSchema.array(),RecipeIngredientOrderByWithRelationInputSchema ]).optional(),
  cursor: RecipeIngredientWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RecipeIngredientScalarFieldEnumSchema,RecipeIngredientScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RecipeIngredientAggregateArgsSchema: z.ZodType<Prisma.RecipeIngredientAggregateArgs> = z.object({
  where: RecipeIngredientWhereInputSchema.optional(),
  orderBy: z.union([ RecipeIngredientOrderByWithRelationInputSchema.array(),RecipeIngredientOrderByWithRelationInputSchema ]).optional(),
  cursor: RecipeIngredientWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const RecipeIngredientGroupByArgsSchema: z.ZodType<Prisma.RecipeIngredientGroupByArgs> = z.object({
  where: RecipeIngredientWhereInputSchema.optional(),
  orderBy: z.union([ RecipeIngredientOrderByWithAggregationInputSchema.array(),RecipeIngredientOrderByWithAggregationInputSchema ]).optional(),
  by: RecipeIngredientScalarFieldEnumSchema.array(),
  having: RecipeIngredientScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const RecipeIngredientFindUniqueArgsSchema: z.ZodType<Prisma.RecipeIngredientFindUniqueArgs> = z.object({
  select: RecipeIngredientSelectSchema.optional(),
  include: RecipeIngredientIncludeSchema.optional(),
  where: RecipeIngredientWhereUniqueInputSchema,
}).strict() ;

export const RecipeIngredientFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.RecipeIngredientFindUniqueOrThrowArgs> = z.object({
  select: RecipeIngredientSelectSchema.optional(),
  include: RecipeIngredientIncludeSchema.optional(),
  where: RecipeIngredientWhereUniqueInputSchema,
}).strict() ;

export const RecipeInstructionFindFirstArgsSchema: z.ZodType<Prisma.RecipeInstructionFindFirstArgs> = z.object({
  select: RecipeInstructionSelectSchema.optional(),
  include: RecipeInstructionIncludeSchema.optional(),
  where: RecipeInstructionWhereInputSchema.optional(),
  orderBy: z.union([ RecipeInstructionOrderByWithRelationInputSchema.array(),RecipeInstructionOrderByWithRelationInputSchema ]).optional(),
  cursor: RecipeInstructionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RecipeInstructionScalarFieldEnumSchema,RecipeInstructionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RecipeInstructionFindFirstOrThrowArgsSchema: z.ZodType<Prisma.RecipeInstructionFindFirstOrThrowArgs> = z.object({
  select: RecipeInstructionSelectSchema.optional(),
  include: RecipeInstructionIncludeSchema.optional(),
  where: RecipeInstructionWhereInputSchema.optional(),
  orderBy: z.union([ RecipeInstructionOrderByWithRelationInputSchema.array(),RecipeInstructionOrderByWithRelationInputSchema ]).optional(),
  cursor: RecipeInstructionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RecipeInstructionScalarFieldEnumSchema,RecipeInstructionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RecipeInstructionFindManyArgsSchema: z.ZodType<Prisma.RecipeInstructionFindManyArgs> = z.object({
  select: RecipeInstructionSelectSchema.optional(),
  include: RecipeInstructionIncludeSchema.optional(),
  where: RecipeInstructionWhereInputSchema.optional(),
  orderBy: z.union([ RecipeInstructionOrderByWithRelationInputSchema.array(),RecipeInstructionOrderByWithRelationInputSchema ]).optional(),
  cursor: RecipeInstructionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RecipeInstructionScalarFieldEnumSchema,RecipeInstructionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RecipeInstructionAggregateArgsSchema: z.ZodType<Prisma.RecipeInstructionAggregateArgs> = z.object({
  where: RecipeInstructionWhereInputSchema.optional(),
  orderBy: z.union([ RecipeInstructionOrderByWithRelationInputSchema.array(),RecipeInstructionOrderByWithRelationInputSchema ]).optional(),
  cursor: RecipeInstructionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const RecipeInstructionGroupByArgsSchema: z.ZodType<Prisma.RecipeInstructionGroupByArgs> = z.object({
  where: RecipeInstructionWhereInputSchema.optional(),
  orderBy: z.union([ RecipeInstructionOrderByWithAggregationInputSchema.array(),RecipeInstructionOrderByWithAggregationInputSchema ]).optional(),
  by: RecipeInstructionScalarFieldEnumSchema.array(),
  having: RecipeInstructionScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const RecipeInstructionFindUniqueArgsSchema: z.ZodType<Prisma.RecipeInstructionFindUniqueArgs> = z.object({
  select: RecipeInstructionSelectSchema.optional(),
  include: RecipeInstructionIncludeSchema.optional(),
  where: RecipeInstructionWhereUniqueInputSchema,
}).strict() ;

export const RecipeInstructionFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.RecipeInstructionFindUniqueOrThrowArgs> = z.object({
  select: RecipeInstructionSelectSchema.optional(),
  include: RecipeInstructionIncludeSchema.optional(),
  where: RecipeInstructionWhereUniqueInputSchema,
}).strict() ;

export const InventoryItemFindFirstArgsSchema: z.ZodType<Prisma.InventoryItemFindFirstArgs> = z.object({
  select: InventoryItemSelectSchema.optional(),
  include: InventoryItemIncludeSchema.optional(),
  where: InventoryItemWhereInputSchema.optional(),
  orderBy: z.union([ InventoryItemOrderByWithRelationInputSchema.array(),InventoryItemOrderByWithRelationInputSchema ]).optional(),
  cursor: InventoryItemWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ InventoryItemScalarFieldEnumSchema,InventoryItemScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const InventoryItemFindFirstOrThrowArgsSchema: z.ZodType<Prisma.InventoryItemFindFirstOrThrowArgs> = z.object({
  select: InventoryItemSelectSchema.optional(),
  include: InventoryItemIncludeSchema.optional(),
  where: InventoryItemWhereInputSchema.optional(),
  orderBy: z.union([ InventoryItemOrderByWithRelationInputSchema.array(),InventoryItemOrderByWithRelationInputSchema ]).optional(),
  cursor: InventoryItemWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ InventoryItemScalarFieldEnumSchema,InventoryItemScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const InventoryItemFindManyArgsSchema: z.ZodType<Prisma.InventoryItemFindManyArgs> = z.object({
  select: InventoryItemSelectSchema.optional(),
  include: InventoryItemIncludeSchema.optional(),
  where: InventoryItemWhereInputSchema.optional(),
  orderBy: z.union([ InventoryItemOrderByWithRelationInputSchema.array(),InventoryItemOrderByWithRelationInputSchema ]).optional(),
  cursor: InventoryItemWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ InventoryItemScalarFieldEnumSchema,InventoryItemScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const InventoryItemAggregateArgsSchema: z.ZodType<Prisma.InventoryItemAggregateArgs> = z.object({
  where: InventoryItemWhereInputSchema.optional(),
  orderBy: z.union([ InventoryItemOrderByWithRelationInputSchema.array(),InventoryItemOrderByWithRelationInputSchema ]).optional(),
  cursor: InventoryItemWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const InventoryItemGroupByArgsSchema: z.ZodType<Prisma.InventoryItemGroupByArgs> = z.object({
  where: InventoryItemWhereInputSchema.optional(),
  orderBy: z.union([ InventoryItemOrderByWithAggregationInputSchema.array(),InventoryItemOrderByWithAggregationInputSchema ]).optional(),
  by: InventoryItemScalarFieldEnumSchema.array(),
  having: InventoryItemScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const InventoryItemFindUniqueArgsSchema: z.ZodType<Prisma.InventoryItemFindUniqueArgs> = z.object({
  select: InventoryItemSelectSchema.optional(),
  include: InventoryItemIncludeSchema.optional(),
  where: InventoryItemWhereUniqueInputSchema,
}).strict() ;

export const InventoryItemFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.InventoryItemFindUniqueOrThrowArgs> = z.object({
  select: InventoryItemSelectSchema.optional(),
  include: InventoryItemIncludeSchema.optional(),
  where: InventoryItemWhereUniqueInputSchema,
}).strict() ;

export const InventoryTransactionFindFirstArgsSchema: z.ZodType<Prisma.InventoryTransactionFindFirstArgs> = z.object({
  select: InventoryTransactionSelectSchema.optional(),
  include: InventoryTransactionIncludeSchema.optional(),
  where: InventoryTransactionWhereInputSchema.optional(),
  orderBy: z.union([ InventoryTransactionOrderByWithRelationInputSchema.array(),InventoryTransactionOrderByWithRelationInputSchema ]).optional(),
  cursor: InventoryTransactionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ InventoryTransactionScalarFieldEnumSchema,InventoryTransactionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const InventoryTransactionFindFirstOrThrowArgsSchema: z.ZodType<Prisma.InventoryTransactionFindFirstOrThrowArgs> = z.object({
  select: InventoryTransactionSelectSchema.optional(),
  include: InventoryTransactionIncludeSchema.optional(),
  where: InventoryTransactionWhereInputSchema.optional(),
  orderBy: z.union([ InventoryTransactionOrderByWithRelationInputSchema.array(),InventoryTransactionOrderByWithRelationInputSchema ]).optional(),
  cursor: InventoryTransactionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ InventoryTransactionScalarFieldEnumSchema,InventoryTransactionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const InventoryTransactionFindManyArgsSchema: z.ZodType<Prisma.InventoryTransactionFindManyArgs> = z.object({
  select: InventoryTransactionSelectSchema.optional(),
  include: InventoryTransactionIncludeSchema.optional(),
  where: InventoryTransactionWhereInputSchema.optional(),
  orderBy: z.union([ InventoryTransactionOrderByWithRelationInputSchema.array(),InventoryTransactionOrderByWithRelationInputSchema ]).optional(),
  cursor: InventoryTransactionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ InventoryTransactionScalarFieldEnumSchema,InventoryTransactionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const InventoryTransactionAggregateArgsSchema: z.ZodType<Prisma.InventoryTransactionAggregateArgs> = z.object({
  where: InventoryTransactionWhereInputSchema.optional(),
  orderBy: z.union([ InventoryTransactionOrderByWithRelationInputSchema.array(),InventoryTransactionOrderByWithRelationInputSchema ]).optional(),
  cursor: InventoryTransactionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const InventoryTransactionGroupByArgsSchema: z.ZodType<Prisma.InventoryTransactionGroupByArgs> = z.object({
  where: InventoryTransactionWhereInputSchema.optional(),
  orderBy: z.union([ InventoryTransactionOrderByWithAggregationInputSchema.array(),InventoryTransactionOrderByWithAggregationInputSchema ]).optional(),
  by: InventoryTransactionScalarFieldEnumSchema.array(),
  having: InventoryTransactionScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const InventoryTransactionFindUniqueArgsSchema: z.ZodType<Prisma.InventoryTransactionFindUniqueArgs> = z.object({
  select: InventoryTransactionSelectSchema.optional(),
  include: InventoryTransactionIncludeSchema.optional(),
  where: InventoryTransactionWhereUniqueInputSchema,
}).strict() ;

export const InventoryTransactionFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.InventoryTransactionFindUniqueOrThrowArgs> = z.object({
  select: InventoryTransactionSelectSchema.optional(),
  include: InventoryTransactionIncludeSchema.optional(),
  where: InventoryTransactionWhereUniqueInputSchema,
}).strict() ;

export const StockCountFindFirstArgsSchema: z.ZodType<Prisma.StockCountFindFirstArgs> = z.object({
  select: StockCountSelectSchema.optional(),
  include: StockCountIncludeSchema.optional(),
  where: StockCountWhereInputSchema.optional(),
  orderBy: z.union([ StockCountOrderByWithRelationInputSchema.array(),StockCountOrderByWithRelationInputSchema ]).optional(),
  cursor: StockCountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ StockCountScalarFieldEnumSchema,StockCountScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const StockCountFindFirstOrThrowArgsSchema: z.ZodType<Prisma.StockCountFindFirstOrThrowArgs> = z.object({
  select: StockCountSelectSchema.optional(),
  include: StockCountIncludeSchema.optional(),
  where: StockCountWhereInputSchema.optional(),
  orderBy: z.union([ StockCountOrderByWithRelationInputSchema.array(),StockCountOrderByWithRelationInputSchema ]).optional(),
  cursor: StockCountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ StockCountScalarFieldEnumSchema,StockCountScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const StockCountFindManyArgsSchema: z.ZodType<Prisma.StockCountFindManyArgs> = z.object({
  select: StockCountSelectSchema.optional(),
  include: StockCountIncludeSchema.optional(),
  where: StockCountWhereInputSchema.optional(),
  orderBy: z.union([ StockCountOrderByWithRelationInputSchema.array(),StockCountOrderByWithRelationInputSchema ]).optional(),
  cursor: StockCountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ StockCountScalarFieldEnumSchema,StockCountScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const StockCountAggregateArgsSchema: z.ZodType<Prisma.StockCountAggregateArgs> = z.object({
  where: StockCountWhereInputSchema.optional(),
  orderBy: z.union([ StockCountOrderByWithRelationInputSchema.array(),StockCountOrderByWithRelationInputSchema ]).optional(),
  cursor: StockCountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const StockCountGroupByArgsSchema: z.ZodType<Prisma.StockCountGroupByArgs> = z.object({
  where: StockCountWhereInputSchema.optional(),
  orderBy: z.union([ StockCountOrderByWithAggregationInputSchema.array(),StockCountOrderByWithAggregationInputSchema ]).optional(),
  by: StockCountScalarFieldEnumSchema.array(),
  having: StockCountScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const StockCountFindUniqueArgsSchema: z.ZodType<Prisma.StockCountFindUniqueArgs> = z.object({
  select: StockCountSelectSchema.optional(),
  include: StockCountIncludeSchema.optional(),
  where: StockCountWhereUniqueInputSchema,
}).strict() ;

export const StockCountFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.StockCountFindUniqueOrThrowArgs> = z.object({
  select: StockCountSelectSchema.optional(),
  include: StockCountIncludeSchema.optional(),
  where: StockCountWhereUniqueInputSchema,
}).strict() ;

export const StockCountItemFindFirstArgsSchema: z.ZodType<Prisma.StockCountItemFindFirstArgs> = z.object({
  select: StockCountItemSelectSchema.optional(),
  include: StockCountItemIncludeSchema.optional(),
  where: StockCountItemWhereInputSchema.optional(),
  orderBy: z.union([ StockCountItemOrderByWithRelationInputSchema.array(),StockCountItemOrderByWithRelationInputSchema ]).optional(),
  cursor: StockCountItemWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ StockCountItemScalarFieldEnumSchema,StockCountItemScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const StockCountItemFindFirstOrThrowArgsSchema: z.ZodType<Prisma.StockCountItemFindFirstOrThrowArgs> = z.object({
  select: StockCountItemSelectSchema.optional(),
  include: StockCountItemIncludeSchema.optional(),
  where: StockCountItemWhereInputSchema.optional(),
  orderBy: z.union([ StockCountItemOrderByWithRelationInputSchema.array(),StockCountItemOrderByWithRelationInputSchema ]).optional(),
  cursor: StockCountItemWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ StockCountItemScalarFieldEnumSchema,StockCountItemScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const StockCountItemFindManyArgsSchema: z.ZodType<Prisma.StockCountItemFindManyArgs> = z.object({
  select: StockCountItemSelectSchema.optional(),
  include: StockCountItemIncludeSchema.optional(),
  where: StockCountItemWhereInputSchema.optional(),
  orderBy: z.union([ StockCountItemOrderByWithRelationInputSchema.array(),StockCountItemOrderByWithRelationInputSchema ]).optional(),
  cursor: StockCountItemWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ StockCountItemScalarFieldEnumSchema,StockCountItemScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const StockCountItemAggregateArgsSchema: z.ZodType<Prisma.StockCountItemAggregateArgs> = z.object({
  where: StockCountItemWhereInputSchema.optional(),
  orderBy: z.union([ StockCountItemOrderByWithRelationInputSchema.array(),StockCountItemOrderByWithRelationInputSchema ]).optional(),
  cursor: StockCountItemWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const StockCountItemGroupByArgsSchema: z.ZodType<Prisma.StockCountItemGroupByArgs> = z.object({
  where: StockCountItemWhereInputSchema.optional(),
  orderBy: z.union([ StockCountItemOrderByWithAggregationInputSchema.array(),StockCountItemOrderByWithAggregationInputSchema ]).optional(),
  by: StockCountItemScalarFieldEnumSchema.array(),
  having: StockCountItemScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const StockCountItemFindUniqueArgsSchema: z.ZodType<Prisma.StockCountItemFindUniqueArgs> = z.object({
  select: StockCountItemSelectSchema.optional(),
  include: StockCountItemIncludeSchema.optional(),
  where: StockCountItemWhereUniqueInputSchema,
}).strict() ;

export const StockCountItemFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.StockCountItemFindUniqueOrThrowArgs> = z.object({
  select: StockCountItemSelectSchema.optional(),
  include: StockCountItemIncludeSchema.optional(),
  where: StockCountItemWhereUniqueInputSchema,
}).strict() ;

export const RecipeStatsFindFirstArgsSchema: z.ZodType<Prisma.RecipeStatsFindFirstArgs> = z.object({
  select: RecipeStatsSelectSchema.optional(),
  include: RecipeStatsIncludeSchema.optional(),
  where: RecipeStatsWhereInputSchema.optional(),
  orderBy: z.union([ RecipeStatsOrderByWithRelationInputSchema.array(),RecipeStatsOrderByWithRelationInputSchema ]).optional(),
  cursor: RecipeStatsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RecipeStatsScalarFieldEnumSchema,RecipeStatsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RecipeStatsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.RecipeStatsFindFirstOrThrowArgs> = z.object({
  select: RecipeStatsSelectSchema.optional(),
  include: RecipeStatsIncludeSchema.optional(),
  where: RecipeStatsWhereInputSchema.optional(),
  orderBy: z.union([ RecipeStatsOrderByWithRelationInputSchema.array(),RecipeStatsOrderByWithRelationInputSchema ]).optional(),
  cursor: RecipeStatsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RecipeStatsScalarFieldEnumSchema,RecipeStatsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RecipeStatsFindManyArgsSchema: z.ZodType<Prisma.RecipeStatsFindManyArgs> = z.object({
  select: RecipeStatsSelectSchema.optional(),
  include: RecipeStatsIncludeSchema.optional(),
  where: RecipeStatsWhereInputSchema.optional(),
  orderBy: z.union([ RecipeStatsOrderByWithRelationInputSchema.array(),RecipeStatsOrderByWithRelationInputSchema ]).optional(),
  cursor: RecipeStatsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RecipeStatsScalarFieldEnumSchema,RecipeStatsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const RecipeStatsAggregateArgsSchema: z.ZodType<Prisma.RecipeStatsAggregateArgs> = z.object({
  where: RecipeStatsWhereInputSchema.optional(),
  orderBy: z.union([ RecipeStatsOrderByWithRelationInputSchema.array(),RecipeStatsOrderByWithRelationInputSchema ]).optional(),
  cursor: RecipeStatsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const RecipeStatsGroupByArgsSchema: z.ZodType<Prisma.RecipeStatsGroupByArgs> = z.object({
  where: RecipeStatsWhereInputSchema.optional(),
  orderBy: z.union([ RecipeStatsOrderByWithAggregationInputSchema.array(),RecipeStatsOrderByWithAggregationInputSchema ]).optional(),
  by: RecipeStatsScalarFieldEnumSchema.array(),
  having: RecipeStatsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const RecipeStatsFindUniqueArgsSchema: z.ZodType<Prisma.RecipeStatsFindUniqueArgs> = z.object({
  select: RecipeStatsSelectSchema.optional(),
  include: RecipeStatsIncludeSchema.optional(),
  where: RecipeStatsWhereUniqueInputSchema,
}).strict() ;

export const RecipeStatsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.RecipeStatsFindUniqueOrThrowArgs> = z.object({
  select: RecipeStatsSelectSchema.optional(),
  include: RecipeStatsIncludeSchema.optional(),
  where: RecipeStatsWhereUniqueInputSchema,
}).strict() ;

export const OrderFindFirstArgsSchema: z.ZodType<Prisma.OrderFindFirstArgs> = z.object({
  select: OrderSelectSchema.optional(),
  include: OrderIncludeSchema.optional(),
  where: OrderWhereInputSchema.optional(),
  orderBy: z.union([ OrderOrderByWithRelationInputSchema.array(),OrderOrderByWithRelationInputSchema ]).optional(),
  cursor: OrderWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OrderScalarFieldEnumSchema,OrderScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const OrderFindFirstOrThrowArgsSchema: z.ZodType<Prisma.OrderFindFirstOrThrowArgs> = z.object({
  select: OrderSelectSchema.optional(),
  include: OrderIncludeSchema.optional(),
  where: OrderWhereInputSchema.optional(),
  orderBy: z.union([ OrderOrderByWithRelationInputSchema.array(),OrderOrderByWithRelationInputSchema ]).optional(),
  cursor: OrderWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OrderScalarFieldEnumSchema,OrderScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const OrderFindManyArgsSchema: z.ZodType<Prisma.OrderFindManyArgs> = z.object({
  select: OrderSelectSchema.optional(),
  include: OrderIncludeSchema.optional(),
  where: OrderWhereInputSchema.optional(),
  orderBy: z.union([ OrderOrderByWithRelationInputSchema.array(),OrderOrderByWithRelationInputSchema ]).optional(),
  cursor: OrderWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OrderScalarFieldEnumSchema,OrderScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const OrderAggregateArgsSchema: z.ZodType<Prisma.OrderAggregateArgs> = z.object({
  where: OrderWhereInputSchema.optional(),
  orderBy: z.union([ OrderOrderByWithRelationInputSchema.array(),OrderOrderByWithRelationInputSchema ]).optional(),
  cursor: OrderWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const OrderGroupByArgsSchema: z.ZodType<Prisma.OrderGroupByArgs> = z.object({
  where: OrderWhereInputSchema.optional(),
  orderBy: z.union([ OrderOrderByWithAggregationInputSchema.array(),OrderOrderByWithAggregationInputSchema ]).optional(),
  by: OrderScalarFieldEnumSchema.array(),
  having: OrderScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const OrderFindUniqueArgsSchema: z.ZodType<Prisma.OrderFindUniqueArgs> = z.object({
  select: OrderSelectSchema.optional(),
  include: OrderIncludeSchema.optional(),
  where: OrderWhereUniqueInputSchema,
}).strict() ;

export const OrderFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.OrderFindUniqueOrThrowArgs> = z.object({
  select: OrderSelectSchema.optional(),
  include: OrderIncludeSchema.optional(),
  where: OrderWhereUniqueInputSchema,
}).strict() ;

export const OrderItemFindFirstArgsSchema: z.ZodType<Prisma.OrderItemFindFirstArgs> = z.object({
  select: OrderItemSelectSchema.optional(),
  include: OrderItemIncludeSchema.optional(),
  where: OrderItemWhereInputSchema.optional(),
  orderBy: z.union([ OrderItemOrderByWithRelationInputSchema.array(),OrderItemOrderByWithRelationInputSchema ]).optional(),
  cursor: OrderItemWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OrderItemScalarFieldEnumSchema,OrderItemScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const OrderItemFindFirstOrThrowArgsSchema: z.ZodType<Prisma.OrderItemFindFirstOrThrowArgs> = z.object({
  select: OrderItemSelectSchema.optional(),
  include: OrderItemIncludeSchema.optional(),
  where: OrderItemWhereInputSchema.optional(),
  orderBy: z.union([ OrderItemOrderByWithRelationInputSchema.array(),OrderItemOrderByWithRelationInputSchema ]).optional(),
  cursor: OrderItemWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OrderItemScalarFieldEnumSchema,OrderItemScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const OrderItemFindManyArgsSchema: z.ZodType<Prisma.OrderItemFindManyArgs> = z.object({
  select: OrderItemSelectSchema.optional(),
  include: OrderItemIncludeSchema.optional(),
  where: OrderItemWhereInputSchema.optional(),
  orderBy: z.union([ OrderItemOrderByWithRelationInputSchema.array(),OrderItemOrderByWithRelationInputSchema ]).optional(),
  cursor: OrderItemWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OrderItemScalarFieldEnumSchema,OrderItemScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const OrderItemAggregateArgsSchema: z.ZodType<Prisma.OrderItemAggregateArgs> = z.object({
  where: OrderItemWhereInputSchema.optional(),
  orderBy: z.union([ OrderItemOrderByWithRelationInputSchema.array(),OrderItemOrderByWithRelationInputSchema ]).optional(),
  cursor: OrderItemWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const OrderItemGroupByArgsSchema: z.ZodType<Prisma.OrderItemGroupByArgs> = z.object({
  where: OrderItemWhereInputSchema.optional(),
  orderBy: z.union([ OrderItemOrderByWithAggregationInputSchema.array(),OrderItemOrderByWithAggregationInputSchema ]).optional(),
  by: OrderItemScalarFieldEnumSchema.array(),
  having: OrderItemScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const OrderItemFindUniqueArgsSchema: z.ZodType<Prisma.OrderItemFindUniqueArgs> = z.object({
  select: OrderItemSelectSchema.optional(),
  include: OrderItemIncludeSchema.optional(),
  where: OrderItemWhereUniqueInputSchema,
}).strict() ;

export const OrderItemFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.OrderItemFindUniqueOrThrowArgs> = z.object({
  select: OrderItemSelectSchema.optional(),
  include: OrderItemIncludeSchema.optional(),
  where: OrderItemWhereUniqueInputSchema,
}).strict() ;

export const VendorFindFirstArgsSchema: z.ZodType<Prisma.VendorFindFirstArgs> = z.object({
  select: VendorSelectSchema.optional(),
  include: VendorIncludeSchema.optional(),
  where: VendorWhereInputSchema.optional(),
  orderBy: z.union([ VendorOrderByWithRelationInputSchema.array(),VendorOrderByWithRelationInputSchema ]).optional(),
  cursor: VendorWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ VendorScalarFieldEnumSchema,VendorScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const VendorFindFirstOrThrowArgsSchema: z.ZodType<Prisma.VendorFindFirstOrThrowArgs> = z.object({
  select: VendorSelectSchema.optional(),
  include: VendorIncludeSchema.optional(),
  where: VendorWhereInputSchema.optional(),
  orderBy: z.union([ VendorOrderByWithRelationInputSchema.array(),VendorOrderByWithRelationInputSchema ]).optional(),
  cursor: VendorWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ VendorScalarFieldEnumSchema,VendorScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const VendorFindManyArgsSchema: z.ZodType<Prisma.VendorFindManyArgs> = z.object({
  select: VendorSelectSchema.optional(),
  include: VendorIncludeSchema.optional(),
  where: VendorWhereInputSchema.optional(),
  orderBy: z.union([ VendorOrderByWithRelationInputSchema.array(),VendorOrderByWithRelationInputSchema ]).optional(),
  cursor: VendorWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ VendorScalarFieldEnumSchema,VendorScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const VendorAggregateArgsSchema: z.ZodType<Prisma.VendorAggregateArgs> = z.object({
  where: VendorWhereInputSchema.optional(),
  orderBy: z.union([ VendorOrderByWithRelationInputSchema.array(),VendorOrderByWithRelationInputSchema ]).optional(),
  cursor: VendorWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const VendorGroupByArgsSchema: z.ZodType<Prisma.VendorGroupByArgs> = z.object({
  where: VendorWhereInputSchema.optional(),
  orderBy: z.union([ VendorOrderByWithAggregationInputSchema.array(),VendorOrderByWithAggregationInputSchema ]).optional(),
  by: VendorScalarFieldEnumSchema.array(),
  having: VendorScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const VendorFindUniqueArgsSchema: z.ZodType<Prisma.VendorFindUniqueArgs> = z.object({
  select: VendorSelectSchema.optional(),
  include: VendorIncludeSchema.optional(),
  where: VendorWhereUniqueInputSchema,
}).strict() ;

export const VendorFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.VendorFindUniqueOrThrowArgs> = z.object({
  select: VendorSelectSchema.optional(),
  include: VendorIncludeSchema.optional(),
  where: VendorWhereUniqueInputSchema,
}).strict() ;

export const ShiftFindFirstArgsSchema: z.ZodType<Prisma.ShiftFindFirstArgs> = z.object({
  select: ShiftSelectSchema.optional(),
  include: ShiftIncludeSchema.optional(),
  where: ShiftWhereInputSchema.optional(),
  orderBy: z.union([ ShiftOrderByWithRelationInputSchema.array(),ShiftOrderByWithRelationInputSchema ]).optional(),
  cursor: ShiftWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ShiftScalarFieldEnumSchema,ShiftScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ShiftFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ShiftFindFirstOrThrowArgs> = z.object({
  select: ShiftSelectSchema.optional(),
  include: ShiftIncludeSchema.optional(),
  where: ShiftWhereInputSchema.optional(),
  orderBy: z.union([ ShiftOrderByWithRelationInputSchema.array(),ShiftOrderByWithRelationInputSchema ]).optional(),
  cursor: ShiftWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ShiftScalarFieldEnumSchema,ShiftScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ShiftFindManyArgsSchema: z.ZodType<Prisma.ShiftFindManyArgs> = z.object({
  select: ShiftSelectSchema.optional(),
  include: ShiftIncludeSchema.optional(),
  where: ShiftWhereInputSchema.optional(),
  orderBy: z.union([ ShiftOrderByWithRelationInputSchema.array(),ShiftOrderByWithRelationInputSchema ]).optional(),
  cursor: ShiftWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ShiftScalarFieldEnumSchema,ShiftScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ShiftAggregateArgsSchema: z.ZodType<Prisma.ShiftAggregateArgs> = z.object({
  where: ShiftWhereInputSchema.optional(),
  orderBy: z.union([ ShiftOrderByWithRelationInputSchema.array(),ShiftOrderByWithRelationInputSchema ]).optional(),
  cursor: ShiftWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ShiftGroupByArgsSchema: z.ZodType<Prisma.ShiftGroupByArgs> = z.object({
  where: ShiftWhereInputSchema.optional(),
  orderBy: z.union([ ShiftOrderByWithAggregationInputSchema.array(),ShiftOrderByWithAggregationInputSchema ]).optional(),
  by: ShiftScalarFieldEnumSchema.array(),
  having: ShiftScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ShiftFindUniqueArgsSchema: z.ZodType<Prisma.ShiftFindUniqueArgs> = z.object({
  select: ShiftSelectSchema.optional(),
  include: ShiftIncludeSchema.optional(),
  where: ShiftWhereUniqueInputSchema,
}).strict() ;

export const ShiftFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ShiftFindUniqueOrThrowArgs> = z.object({
  select: ShiftSelectSchema.optional(),
  include: ShiftIncludeSchema.optional(),
  where: ShiftWhereUniqueInputSchema,
}).strict() ;

export const PrepBoardFindFirstArgsSchema: z.ZodType<Prisma.PrepBoardFindFirstArgs> = z.object({
  select: PrepBoardSelectSchema.optional(),
  include: PrepBoardIncludeSchema.optional(),
  where: PrepBoardWhereInputSchema.optional(),
  orderBy: z.union([ PrepBoardOrderByWithRelationInputSchema.array(),PrepBoardOrderByWithRelationInputSchema ]).optional(),
  cursor: PrepBoardWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PrepBoardScalarFieldEnumSchema,PrepBoardScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PrepBoardFindFirstOrThrowArgsSchema: z.ZodType<Prisma.PrepBoardFindFirstOrThrowArgs> = z.object({
  select: PrepBoardSelectSchema.optional(),
  include: PrepBoardIncludeSchema.optional(),
  where: PrepBoardWhereInputSchema.optional(),
  orderBy: z.union([ PrepBoardOrderByWithRelationInputSchema.array(),PrepBoardOrderByWithRelationInputSchema ]).optional(),
  cursor: PrepBoardWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PrepBoardScalarFieldEnumSchema,PrepBoardScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PrepBoardFindManyArgsSchema: z.ZodType<Prisma.PrepBoardFindManyArgs> = z.object({
  select: PrepBoardSelectSchema.optional(),
  include: PrepBoardIncludeSchema.optional(),
  where: PrepBoardWhereInputSchema.optional(),
  orderBy: z.union([ PrepBoardOrderByWithRelationInputSchema.array(),PrepBoardOrderByWithRelationInputSchema ]).optional(),
  cursor: PrepBoardWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PrepBoardScalarFieldEnumSchema,PrepBoardScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PrepBoardAggregateArgsSchema: z.ZodType<Prisma.PrepBoardAggregateArgs> = z.object({
  where: PrepBoardWhereInputSchema.optional(),
  orderBy: z.union([ PrepBoardOrderByWithRelationInputSchema.array(),PrepBoardOrderByWithRelationInputSchema ]).optional(),
  cursor: PrepBoardWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const PrepBoardGroupByArgsSchema: z.ZodType<Prisma.PrepBoardGroupByArgs> = z.object({
  where: PrepBoardWhereInputSchema.optional(),
  orderBy: z.union([ PrepBoardOrderByWithAggregationInputSchema.array(),PrepBoardOrderByWithAggregationInputSchema ]).optional(),
  by: PrepBoardScalarFieldEnumSchema.array(),
  having: PrepBoardScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const PrepBoardFindUniqueArgsSchema: z.ZodType<Prisma.PrepBoardFindUniqueArgs> = z.object({
  select: PrepBoardSelectSchema.optional(),
  include: PrepBoardIncludeSchema.optional(),
  where: PrepBoardWhereUniqueInputSchema,
}).strict() ;

export const PrepBoardFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.PrepBoardFindUniqueOrThrowArgs> = z.object({
  select: PrepBoardSelectSchema.optional(),
  include: PrepBoardIncludeSchema.optional(),
  where: PrepBoardWhereUniqueInputSchema,
}).strict() ;

export const PrepItemFindFirstArgsSchema: z.ZodType<Prisma.PrepItemFindFirstArgs> = z.object({
  select: PrepItemSelectSchema.optional(),
  include: PrepItemIncludeSchema.optional(),
  where: PrepItemWhereInputSchema.optional(),
  orderBy: z.union([ PrepItemOrderByWithRelationInputSchema.array(),PrepItemOrderByWithRelationInputSchema ]).optional(),
  cursor: PrepItemWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PrepItemScalarFieldEnumSchema,PrepItemScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PrepItemFindFirstOrThrowArgsSchema: z.ZodType<Prisma.PrepItemFindFirstOrThrowArgs> = z.object({
  select: PrepItemSelectSchema.optional(),
  include: PrepItemIncludeSchema.optional(),
  where: PrepItemWhereInputSchema.optional(),
  orderBy: z.union([ PrepItemOrderByWithRelationInputSchema.array(),PrepItemOrderByWithRelationInputSchema ]).optional(),
  cursor: PrepItemWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PrepItemScalarFieldEnumSchema,PrepItemScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PrepItemFindManyArgsSchema: z.ZodType<Prisma.PrepItemFindManyArgs> = z.object({
  select: PrepItemSelectSchema.optional(),
  include: PrepItemIncludeSchema.optional(),
  where: PrepItemWhereInputSchema.optional(),
  orderBy: z.union([ PrepItemOrderByWithRelationInputSchema.array(),PrepItemOrderByWithRelationInputSchema ]).optional(),
  cursor: PrepItemWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PrepItemScalarFieldEnumSchema,PrepItemScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PrepItemAggregateArgsSchema: z.ZodType<Prisma.PrepItemAggregateArgs> = z.object({
  where: PrepItemWhereInputSchema.optional(),
  orderBy: z.union([ PrepItemOrderByWithRelationInputSchema.array(),PrepItemOrderByWithRelationInputSchema ]).optional(),
  cursor: PrepItemWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const PrepItemGroupByArgsSchema: z.ZodType<Prisma.PrepItemGroupByArgs> = z.object({
  where: PrepItemWhereInputSchema.optional(),
  orderBy: z.union([ PrepItemOrderByWithAggregationInputSchema.array(),PrepItemOrderByWithAggregationInputSchema ]).optional(),
  by: PrepItemScalarFieldEnumSchema.array(),
  having: PrepItemScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const PrepItemFindUniqueArgsSchema: z.ZodType<Prisma.PrepItemFindUniqueArgs> = z.object({
  select: PrepItemSelectSchema.optional(),
  include: PrepItemIncludeSchema.optional(),
  where: PrepItemWhereUniqueInputSchema,
}).strict() ;

export const PrepItemFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.PrepItemFindUniqueOrThrowArgs> = z.object({
  select: PrepItemSelectSchema.optional(),
  include: PrepItemIncludeSchema.optional(),
  where: PrepItemWhereUniqueInputSchema,
}).strict() ;

export const PasswordResetFindFirstArgsSchema: z.ZodType<Prisma.PasswordResetFindFirstArgs> = z.object({
  select: PasswordResetSelectSchema.optional(),
  include: PasswordResetIncludeSchema.optional(),
  where: PasswordResetWhereInputSchema.optional(),
  orderBy: z.union([ PasswordResetOrderByWithRelationInputSchema.array(),PasswordResetOrderByWithRelationInputSchema ]).optional(),
  cursor: PasswordResetWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PasswordResetScalarFieldEnumSchema,PasswordResetScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PasswordResetFindFirstOrThrowArgsSchema: z.ZodType<Prisma.PasswordResetFindFirstOrThrowArgs> = z.object({
  select: PasswordResetSelectSchema.optional(),
  include: PasswordResetIncludeSchema.optional(),
  where: PasswordResetWhereInputSchema.optional(),
  orderBy: z.union([ PasswordResetOrderByWithRelationInputSchema.array(),PasswordResetOrderByWithRelationInputSchema ]).optional(),
  cursor: PasswordResetWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PasswordResetScalarFieldEnumSchema,PasswordResetScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PasswordResetFindManyArgsSchema: z.ZodType<Prisma.PasswordResetFindManyArgs> = z.object({
  select: PasswordResetSelectSchema.optional(),
  include: PasswordResetIncludeSchema.optional(),
  where: PasswordResetWhereInputSchema.optional(),
  orderBy: z.union([ PasswordResetOrderByWithRelationInputSchema.array(),PasswordResetOrderByWithRelationInputSchema ]).optional(),
  cursor: PasswordResetWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PasswordResetScalarFieldEnumSchema,PasswordResetScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PasswordResetAggregateArgsSchema: z.ZodType<Prisma.PasswordResetAggregateArgs> = z.object({
  where: PasswordResetWhereInputSchema.optional(),
  orderBy: z.union([ PasswordResetOrderByWithRelationInputSchema.array(),PasswordResetOrderByWithRelationInputSchema ]).optional(),
  cursor: PasswordResetWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const PasswordResetGroupByArgsSchema: z.ZodType<Prisma.PasswordResetGroupByArgs> = z.object({
  where: PasswordResetWhereInputSchema.optional(),
  orderBy: z.union([ PasswordResetOrderByWithAggregationInputSchema.array(),PasswordResetOrderByWithAggregationInputSchema ]).optional(),
  by: PasswordResetScalarFieldEnumSchema.array(),
  having: PasswordResetScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const PasswordResetFindUniqueArgsSchema: z.ZodType<Prisma.PasswordResetFindUniqueArgs> = z.object({
  select: PasswordResetSelectSchema.optional(),
  include: PasswordResetIncludeSchema.optional(),
  where: PasswordResetWhereUniqueInputSchema,
}).strict() ;

export const PasswordResetFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.PasswordResetFindUniqueOrThrowArgs> = z.object({
  select: PasswordResetSelectSchema.optional(),
  include: PasswordResetIncludeSchema.optional(),
  where: PasswordResetWhereUniqueInputSchema,
}).strict() ;

export const MenuFindFirstArgsSchema: z.ZodType<Prisma.MenuFindFirstArgs> = z.object({
  select: MenuSelectSchema.optional(),
  include: MenuIncludeSchema.optional(),
  where: MenuWhereInputSchema.optional(),
  orderBy: z.union([ MenuOrderByWithRelationInputSchema.array(),MenuOrderByWithRelationInputSchema ]).optional(),
  cursor: MenuWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MenuScalarFieldEnumSchema,MenuScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const MenuFindFirstOrThrowArgsSchema: z.ZodType<Prisma.MenuFindFirstOrThrowArgs> = z.object({
  select: MenuSelectSchema.optional(),
  include: MenuIncludeSchema.optional(),
  where: MenuWhereInputSchema.optional(),
  orderBy: z.union([ MenuOrderByWithRelationInputSchema.array(),MenuOrderByWithRelationInputSchema ]).optional(),
  cursor: MenuWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MenuScalarFieldEnumSchema,MenuScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const MenuFindManyArgsSchema: z.ZodType<Prisma.MenuFindManyArgs> = z.object({
  select: MenuSelectSchema.optional(),
  include: MenuIncludeSchema.optional(),
  where: MenuWhereInputSchema.optional(),
  orderBy: z.union([ MenuOrderByWithRelationInputSchema.array(),MenuOrderByWithRelationInputSchema ]).optional(),
  cursor: MenuWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MenuScalarFieldEnumSchema,MenuScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const MenuAggregateArgsSchema: z.ZodType<Prisma.MenuAggregateArgs> = z.object({
  where: MenuWhereInputSchema.optional(),
  orderBy: z.union([ MenuOrderByWithRelationInputSchema.array(),MenuOrderByWithRelationInputSchema ]).optional(),
  cursor: MenuWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const MenuGroupByArgsSchema: z.ZodType<Prisma.MenuGroupByArgs> = z.object({
  where: MenuWhereInputSchema.optional(),
  orderBy: z.union([ MenuOrderByWithAggregationInputSchema.array(),MenuOrderByWithAggregationInputSchema ]).optional(),
  by: MenuScalarFieldEnumSchema.array(),
  having: MenuScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const MenuFindUniqueArgsSchema: z.ZodType<Prisma.MenuFindUniqueArgs> = z.object({
  select: MenuSelectSchema.optional(),
  include: MenuIncludeSchema.optional(),
  where: MenuWhereUniqueInputSchema,
}).strict() ;

export const MenuFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.MenuFindUniqueOrThrowArgs> = z.object({
  select: MenuSelectSchema.optional(),
  include: MenuIncludeSchema.optional(),
  where: MenuWhereUniqueInputSchema,
}).strict() ;

export const MenuItemRecipeFindFirstArgsSchema: z.ZodType<Prisma.MenuItemRecipeFindFirstArgs> = z.object({
  select: MenuItemRecipeSelectSchema.optional(),
  include: MenuItemRecipeIncludeSchema.optional(),
  where: MenuItemRecipeWhereInputSchema.optional(),
  orderBy: z.union([ MenuItemRecipeOrderByWithRelationInputSchema.array(),MenuItemRecipeOrderByWithRelationInputSchema ]).optional(),
  cursor: MenuItemRecipeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MenuItemRecipeScalarFieldEnumSchema,MenuItemRecipeScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const MenuItemRecipeFindFirstOrThrowArgsSchema: z.ZodType<Prisma.MenuItemRecipeFindFirstOrThrowArgs> = z.object({
  select: MenuItemRecipeSelectSchema.optional(),
  include: MenuItemRecipeIncludeSchema.optional(),
  where: MenuItemRecipeWhereInputSchema.optional(),
  orderBy: z.union([ MenuItemRecipeOrderByWithRelationInputSchema.array(),MenuItemRecipeOrderByWithRelationInputSchema ]).optional(),
  cursor: MenuItemRecipeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MenuItemRecipeScalarFieldEnumSchema,MenuItemRecipeScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const MenuItemRecipeFindManyArgsSchema: z.ZodType<Prisma.MenuItemRecipeFindManyArgs> = z.object({
  select: MenuItemRecipeSelectSchema.optional(),
  include: MenuItemRecipeIncludeSchema.optional(),
  where: MenuItemRecipeWhereInputSchema.optional(),
  orderBy: z.union([ MenuItemRecipeOrderByWithRelationInputSchema.array(),MenuItemRecipeOrderByWithRelationInputSchema ]).optional(),
  cursor: MenuItemRecipeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MenuItemRecipeScalarFieldEnumSchema,MenuItemRecipeScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const MenuItemRecipeAggregateArgsSchema: z.ZodType<Prisma.MenuItemRecipeAggregateArgs> = z.object({
  where: MenuItemRecipeWhereInputSchema.optional(),
  orderBy: z.union([ MenuItemRecipeOrderByWithRelationInputSchema.array(),MenuItemRecipeOrderByWithRelationInputSchema ]).optional(),
  cursor: MenuItemRecipeWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const MenuItemRecipeGroupByArgsSchema: z.ZodType<Prisma.MenuItemRecipeGroupByArgs> = z.object({
  where: MenuItemRecipeWhereInputSchema.optional(),
  orderBy: z.union([ MenuItemRecipeOrderByWithAggregationInputSchema.array(),MenuItemRecipeOrderByWithAggregationInputSchema ]).optional(),
  by: MenuItemRecipeScalarFieldEnumSchema.array(),
  having: MenuItemRecipeScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const MenuItemRecipeFindUniqueArgsSchema: z.ZodType<Prisma.MenuItemRecipeFindUniqueArgs> = z.object({
  select: MenuItemRecipeSelectSchema.optional(),
  include: MenuItemRecipeIncludeSchema.optional(),
  where: MenuItemRecipeWhereUniqueInputSchema,
}).strict() ;

export const MenuItemRecipeFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.MenuItemRecipeFindUniqueOrThrowArgs> = z.object({
  select: MenuItemRecipeSelectSchema.optional(),
  include: MenuItemRecipeIncludeSchema.optional(),
  where: MenuItemRecipeWhereUniqueInputSchema,
}).strict() ;

export const MenuItemFindFirstArgsSchema: z.ZodType<Prisma.MenuItemFindFirstArgs> = z.object({
  select: MenuItemSelectSchema.optional(),
  include: MenuItemIncludeSchema.optional(),
  where: MenuItemWhereInputSchema.optional(),
  orderBy: z.union([ MenuItemOrderByWithRelationInputSchema.array(),MenuItemOrderByWithRelationInputSchema ]).optional(),
  cursor: MenuItemWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MenuItemScalarFieldEnumSchema,MenuItemScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const MenuItemFindFirstOrThrowArgsSchema: z.ZodType<Prisma.MenuItemFindFirstOrThrowArgs> = z.object({
  select: MenuItemSelectSchema.optional(),
  include: MenuItemIncludeSchema.optional(),
  where: MenuItemWhereInputSchema.optional(),
  orderBy: z.union([ MenuItemOrderByWithRelationInputSchema.array(),MenuItemOrderByWithRelationInputSchema ]).optional(),
  cursor: MenuItemWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MenuItemScalarFieldEnumSchema,MenuItemScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const MenuItemFindManyArgsSchema: z.ZodType<Prisma.MenuItemFindManyArgs> = z.object({
  select: MenuItemSelectSchema.optional(),
  include: MenuItemIncludeSchema.optional(),
  where: MenuItemWhereInputSchema.optional(),
  orderBy: z.union([ MenuItemOrderByWithRelationInputSchema.array(),MenuItemOrderByWithRelationInputSchema ]).optional(),
  cursor: MenuItemWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MenuItemScalarFieldEnumSchema,MenuItemScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const MenuItemAggregateArgsSchema: z.ZodType<Prisma.MenuItemAggregateArgs> = z.object({
  where: MenuItemWhereInputSchema.optional(),
  orderBy: z.union([ MenuItemOrderByWithRelationInputSchema.array(),MenuItemOrderByWithRelationInputSchema ]).optional(),
  cursor: MenuItemWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const MenuItemGroupByArgsSchema: z.ZodType<Prisma.MenuItemGroupByArgs> = z.object({
  where: MenuItemWhereInputSchema.optional(),
  orderBy: z.union([ MenuItemOrderByWithAggregationInputSchema.array(),MenuItemOrderByWithAggregationInputSchema ]).optional(),
  by: MenuItemScalarFieldEnumSchema.array(),
  having: MenuItemScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const MenuItemFindUniqueArgsSchema: z.ZodType<Prisma.MenuItemFindUniqueArgs> = z.object({
  select: MenuItemSelectSchema.optional(),
  include: MenuItemIncludeSchema.optional(),
  where: MenuItemWhereUniqueInputSchema,
}).strict() ;

export const MenuItemFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.MenuItemFindUniqueOrThrowArgs> = z.object({
  select: MenuItemSelectSchema.optional(),
  include: MenuItemIncludeSchema.optional(),
  where: MenuItemWhereUniqueInputSchema,
}).strict() ;

export const NutritionalInfoFindFirstArgsSchema: z.ZodType<Prisma.NutritionalInfoFindFirstArgs> = z.object({
  select: NutritionalInfoSelectSchema.optional(),
  include: NutritionalInfoIncludeSchema.optional(),
  where: NutritionalInfoWhereInputSchema.optional(),
  orderBy: z.union([ NutritionalInfoOrderByWithRelationInputSchema.array(),NutritionalInfoOrderByWithRelationInputSchema ]).optional(),
  cursor: NutritionalInfoWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ NutritionalInfoScalarFieldEnumSchema,NutritionalInfoScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const NutritionalInfoFindFirstOrThrowArgsSchema: z.ZodType<Prisma.NutritionalInfoFindFirstOrThrowArgs> = z.object({
  select: NutritionalInfoSelectSchema.optional(),
  include: NutritionalInfoIncludeSchema.optional(),
  where: NutritionalInfoWhereInputSchema.optional(),
  orderBy: z.union([ NutritionalInfoOrderByWithRelationInputSchema.array(),NutritionalInfoOrderByWithRelationInputSchema ]).optional(),
  cursor: NutritionalInfoWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ NutritionalInfoScalarFieldEnumSchema,NutritionalInfoScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const NutritionalInfoFindManyArgsSchema: z.ZodType<Prisma.NutritionalInfoFindManyArgs> = z.object({
  select: NutritionalInfoSelectSchema.optional(),
  include: NutritionalInfoIncludeSchema.optional(),
  where: NutritionalInfoWhereInputSchema.optional(),
  orderBy: z.union([ NutritionalInfoOrderByWithRelationInputSchema.array(),NutritionalInfoOrderByWithRelationInputSchema ]).optional(),
  cursor: NutritionalInfoWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ NutritionalInfoScalarFieldEnumSchema,NutritionalInfoScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const NutritionalInfoAggregateArgsSchema: z.ZodType<Prisma.NutritionalInfoAggregateArgs> = z.object({
  where: NutritionalInfoWhereInputSchema.optional(),
  orderBy: z.union([ NutritionalInfoOrderByWithRelationInputSchema.array(),NutritionalInfoOrderByWithRelationInputSchema ]).optional(),
  cursor: NutritionalInfoWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const NutritionalInfoGroupByArgsSchema: z.ZodType<Prisma.NutritionalInfoGroupByArgs> = z.object({
  where: NutritionalInfoWhereInputSchema.optional(),
  orderBy: z.union([ NutritionalInfoOrderByWithAggregationInputSchema.array(),NutritionalInfoOrderByWithAggregationInputSchema ]).optional(),
  by: NutritionalInfoScalarFieldEnumSchema.array(),
  having: NutritionalInfoScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const NutritionalInfoFindUniqueArgsSchema: z.ZodType<Prisma.NutritionalInfoFindUniqueArgs> = z.object({
  select: NutritionalInfoSelectSchema.optional(),
  include: NutritionalInfoIncludeSchema.optional(),
  where: NutritionalInfoWhereUniqueInputSchema,
}).strict() ;

export const NutritionalInfoFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.NutritionalInfoFindUniqueOrThrowArgs> = z.object({
  select: NutritionalInfoSelectSchema.optional(),
  include: NutritionalInfoIncludeSchema.optional(),
  where: NutritionalInfoWhereUniqueInputSchema,
}).strict() ;

export const FoodCostHistoryFindFirstArgsSchema: z.ZodType<Prisma.FoodCostHistoryFindFirstArgs> = z.object({
  select: FoodCostHistorySelectSchema.optional(),
  include: FoodCostHistoryIncludeSchema.optional(),
  where: FoodCostHistoryWhereInputSchema.optional(),
  orderBy: z.union([ FoodCostHistoryOrderByWithRelationInputSchema.array(),FoodCostHistoryOrderByWithRelationInputSchema ]).optional(),
  cursor: FoodCostHistoryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FoodCostHistoryScalarFieldEnumSchema,FoodCostHistoryScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const FoodCostHistoryFindFirstOrThrowArgsSchema: z.ZodType<Prisma.FoodCostHistoryFindFirstOrThrowArgs> = z.object({
  select: FoodCostHistorySelectSchema.optional(),
  include: FoodCostHistoryIncludeSchema.optional(),
  where: FoodCostHistoryWhereInputSchema.optional(),
  orderBy: z.union([ FoodCostHistoryOrderByWithRelationInputSchema.array(),FoodCostHistoryOrderByWithRelationInputSchema ]).optional(),
  cursor: FoodCostHistoryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FoodCostHistoryScalarFieldEnumSchema,FoodCostHistoryScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const FoodCostHistoryFindManyArgsSchema: z.ZodType<Prisma.FoodCostHistoryFindManyArgs> = z.object({
  select: FoodCostHistorySelectSchema.optional(),
  include: FoodCostHistoryIncludeSchema.optional(),
  where: FoodCostHistoryWhereInputSchema.optional(),
  orderBy: z.union([ FoodCostHistoryOrderByWithRelationInputSchema.array(),FoodCostHistoryOrderByWithRelationInputSchema ]).optional(),
  cursor: FoodCostHistoryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FoodCostHistoryScalarFieldEnumSchema,FoodCostHistoryScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const FoodCostHistoryAggregateArgsSchema: z.ZodType<Prisma.FoodCostHistoryAggregateArgs> = z.object({
  where: FoodCostHistoryWhereInputSchema.optional(),
  orderBy: z.union([ FoodCostHistoryOrderByWithRelationInputSchema.array(),FoodCostHistoryOrderByWithRelationInputSchema ]).optional(),
  cursor: FoodCostHistoryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const FoodCostHistoryGroupByArgsSchema: z.ZodType<Prisma.FoodCostHistoryGroupByArgs> = z.object({
  where: FoodCostHistoryWhereInputSchema.optional(),
  orderBy: z.union([ FoodCostHistoryOrderByWithAggregationInputSchema.array(),FoodCostHistoryOrderByWithAggregationInputSchema ]).optional(),
  by: FoodCostHistoryScalarFieldEnumSchema.array(),
  having: FoodCostHistoryScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const FoodCostHistoryFindUniqueArgsSchema: z.ZodType<Prisma.FoodCostHistoryFindUniqueArgs> = z.object({
  select: FoodCostHistorySelectSchema.optional(),
  include: FoodCostHistoryIncludeSchema.optional(),
  where: FoodCostHistoryWhereUniqueInputSchema,
}).strict() ;

export const FoodCostHistoryFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.FoodCostHistoryFindUniqueOrThrowArgs> = z.object({
  select: FoodCostHistorySelectSchema.optional(),
  include: FoodCostHistoryIncludeSchema.optional(),
  where: FoodCostHistoryWhereUniqueInputSchema,
}).strict() ;

export const PrepHistoryFindFirstArgsSchema: z.ZodType<Prisma.PrepHistoryFindFirstArgs> = z.object({
  select: PrepHistorySelectSchema.optional(),
  include: PrepHistoryIncludeSchema.optional(),
  where: PrepHistoryWhereInputSchema.optional(),
  orderBy: z.union([ PrepHistoryOrderByWithRelationInputSchema.array(),PrepHistoryOrderByWithRelationInputSchema ]).optional(),
  cursor: PrepHistoryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PrepHistoryScalarFieldEnumSchema,PrepHistoryScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PrepHistoryFindFirstOrThrowArgsSchema: z.ZodType<Prisma.PrepHistoryFindFirstOrThrowArgs> = z.object({
  select: PrepHistorySelectSchema.optional(),
  include: PrepHistoryIncludeSchema.optional(),
  where: PrepHistoryWhereInputSchema.optional(),
  orderBy: z.union([ PrepHistoryOrderByWithRelationInputSchema.array(),PrepHistoryOrderByWithRelationInputSchema ]).optional(),
  cursor: PrepHistoryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PrepHistoryScalarFieldEnumSchema,PrepHistoryScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PrepHistoryFindManyArgsSchema: z.ZodType<Prisma.PrepHistoryFindManyArgs> = z.object({
  select: PrepHistorySelectSchema.optional(),
  include: PrepHistoryIncludeSchema.optional(),
  where: PrepHistoryWhereInputSchema.optional(),
  orderBy: z.union([ PrepHistoryOrderByWithRelationInputSchema.array(),PrepHistoryOrderByWithRelationInputSchema ]).optional(),
  cursor: PrepHistoryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PrepHistoryScalarFieldEnumSchema,PrepHistoryScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PrepHistoryAggregateArgsSchema: z.ZodType<Prisma.PrepHistoryAggregateArgs> = z.object({
  where: PrepHistoryWhereInputSchema.optional(),
  orderBy: z.union([ PrepHistoryOrderByWithRelationInputSchema.array(),PrepHistoryOrderByWithRelationInputSchema ]).optional(),
  cursor: PrepHistoryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const PrepHistoryGroupByArgsSchema: z.ZodType<Prisma.PrepHistoryGroupByArgs> = z.object({
  where: PrepHistoryWhereInputSchema.optional(),
  orderBy: z.union([ PrepHistoryOrderByWithAggregationInputSchema.array(),PrepHistoryOrderByWithAggregationInputSchema ]).optional(),
  by: PrepHistoryScalarFieldEnumSchema.array(),
  having: PrepHistoryScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const PrepHistoryFindUniqueArgsSchema: z.ZodType<Prisma.PrepHistoryFindUniqueArgs> = z.object({
  select: PrepHistorySelectSchema.optional(),
  include: PrepHistoryIncludeSchema.optional(),
  where: PrepHistoryWhereUniqueInputSchema,
}).strict() ;

export const PrepHistoryFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.PrepHistoryFindUniqueOrThrowArgs> = z.object({
  select: PrepHistorySelectSchema.optional(),
  include: PrepHistoryIncludeSchema.optional(),
  where: PrepHistoryWhereUniqueInputSchema,
}).strict() ;

export const RecipeNutritionCreateArgsSchema: z.ZodType<Prisma.RecipeNutritionCreateArgs> = z.object({
  select: RecipeNutritionSelectSchema.optional(),
  include: RecipeNutritionIncludeSchema.optional(),
  data: z.union([ RecipeNutritionCreateInputSchema,RecipeNutritionUncheckedCreateInputSchema ]),
}).strict() ;

export const RecipeNutritionUpsertArgsSchema: z.ZodType<Prisma.RecipeNutritionUpsertArgs> = z.object({
  select: RecipeNutritionSelectSchema.optional(),
  include: RecipeNutritionIncludeSchema.optional(),
  where: RecipeNutritionWhereUniqueInputSchema,
  create: z.union([ RecipeNutritionCreateInputSchema,RecipeNutritionUncheckedCreateInputSchema ]),
  update: z.union([ RecipeNutritionUpdateInputSchema,RecipeNutritionUncheckedUpdateInputSchema ]),
}).strict() ;

export const RecipeNutritionCreateManyArgsSchema: z.ZodType<Prisma.RecipeNutritionCreateManyArgs> = z.object({
  data: z.union([ RecipeNutritionCreateManyInputSchema,RecipeNutritionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const RecipeNutritionCreateManyAndReturnArgsSchema: z.ZodType<Prisma.RecipeNutritionCreateManyAndReturnArgs> = z.object({
  data: z.union([ RecipeNutritionCreateManyInputSchema,RecipeNutritionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const RecipeNutritionDeleteArgsSchema: z.ZodType<Prisma.RecipeNutritionDeleteArgs> = z.object({
  select: RecipeNutritionSelectSchema.optional(),
  include: RecipeNutritionIncludeSchema.optional(),
  where: RecipeNutritionWhereUniqueInputSchema,
}).strict() ;

export const RecipeNutritionUpdateArgsSchema: z.ZodType<Prisma.RecipeNutritionUpdateArgs> = z.object({
  select: RecipeNutritionSelectSchema.optional(),
  include: RecipeNutritionIncludeSchema.optional(),
  data: z.union([ RecipeNutritionUpdateInputSchema,RecipeNutritionUncheckedUpdateInputSchema ]),
  where: RecipeNutritionWhereUniqueInputSchema,
}).strict() ;

export const RecipeNutritionUpdateManyArgsSchema: z.ZodType<Prisma.RecipeNutritionUpdateManyArgs> = z.object({
  data: z.union([ RecipeNutritionUpdateManyMutationInputSchema,RecipeNutritionUncheckedUpdateManyInputSchema ]),
  where: RecipeNutritionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RecipeNutritionUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.RecipeNutritionUpdateManyAndReturnArgs> = z.object({
  data: z.union([ RecipeNutritionUpdateManyMutationInputSchema,RecipeNutritionUncheckedUpdateManyInputSchema ]),
  where: RecipeNutritionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RecipeNutritionDeleteManyArgsSchema: z.ZodType<Prisma.RecipeNutritionDeleteManyArgs> = z.object({
  where: RecipeNutritionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RecipeCriticalPointCreateArgsSchema: z.ZodType<Prisma.RecipeCriticalPointCreateArgs> = z.object({
  select: RecipeCriticalPointSelectSchema.optional(),
  include: RecipeCriticalPointIncludeSchema.optional(),
  data: z.union([ RecipeCriticalPointCreateInputSchema,RecipeCriticalPointUncheckedCreateInputSchema ]),
}).strict() ;

export const RecipeCriticalPointUpsertArgsSchema: z.ZodType<Prisma.RecipeCriticalPointUpsertArgs> = z.object({
  select: RecipeCriticalPointSelectSchema.optional(),
  include: RecipeCriticalPointIncludeSchema.optional(),
  where: RecipeCriticalPointWhereUniqueInputSchema,
  create: z.union([ RecipeCriticalPointCreateInputSchema,RecipeCriticalPointUncheckedCreateInputSchema ]),
  update: z.union([ RecipeCriticalPointUpdateInputSchema,RecipeCriticalPointUncheckedUpdateInputSchema ]),
}).strict() ;

export const RecipeCriticalPointCreateManyArgsSchema: z.ZodType<Prisma.RecipeCriticalPointCreateManyArgs> = z.object({
  data: z.union([ RecipeCriticalPointCreateManyInputSchema,RecipeCriticalPointCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const RecipeCriticalPointCreateManyAndReturnArgsSchema: z.ZodType<Prisma.RecipeCriticalPointCreateManyAndReturnArgs> = z.object({
  data: z.union([ RecipeCriticalPointCreateManyInputSchema,RecipeCriticalPointCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const RecipeCriticalPointDeleteArgsSchema: z.ZodType<Prisma.RecipeCriticalPointDeleteArgs> = z.object({
  select: RecipeCriticalPointSelectSchema.optional(),
  include: RecipeCriticalPointIncludeSchema.optional(),
  where: RecipeCriticalPointWhereUniqueInputSchema,
}).strict() ;

export const RecipeCriticalPointUpdateArgsSchema: z.ZodType<Prisma.RecipeCriticalPointUpdateArgs> = z.object({
  select: RecipeCriticalPointSelectSchema.optional(),
  include: RecipeCriticalPointIncludeSchema.optional(),
  data: z.union([ RecipeCriticalPointUpdateInputSchema,RecipeCriticalPointUncheckedUpdateInputSchema ]),
  where: RecipeCriticalPointWhereUniqueInputSchema,
}).strict() ;

export const RecipeCriticalPointUpdateManyArgsSchema: z.ZodType<Prisma.RecipeCriticalPointUpdateManyArgs> = z.object({
  data: z.union([ RecipeCriticalPointUpdateManyMutationInputSchema,RecipeCriticalPointUncheckedUpdateManyInputSchema ]),
  where: RecipeCriticalPointWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RecipeCriticalPointUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.RecipeCriticalPointUpdateManyAndReturnArgs> = z.object({
  data: z.union([ RecipeCriticalPointUpdateManyMutationInputSchema,RecipeCriticalPointUncheckedUpdateManyInputSchema ]),
  where: RecipeCriticalPointWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RecipeCriticalPointDeleteManyArgsSchema: z.ZodType<Prisma.RecipeCriticalPointDeleteManyArgs> = z.object({
  where: RecipeCriticalPointWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RecipeStorageCreateArgsSchema: z.ZodType<Prisma.RecipeStorageCreateArgs> = z.object({
  select: RecipeStorageSelectSchema.optional(),
  include: RecipeStorageIncludeSchema.optional(),
  data: z.union([ RecipeStorageCreateInputSchema,RecipeStorageUncheckedCreateInputSchema ]),
}).strict() ;

export const RecipeStorageUpsertArgsSchema: z.ZodType<Prisma.RecipeStorageUpsertArgs> = z.object({
  select: RecipeStorageSelectSchema.optional(),
  include: RecipeStorageIncludeSchema.optional(),
  where: RecipeStorageWhereUniqueInputSchema,
  create: z.union([ RecipeStorageCreateInputSchema,RecipeStorageUncheckedCreateInputSchema ]),
  update: z.union([ RecipeStorageUpdateInputSchema,RecipeStorageUncheckedUpdateInputSchema ]),
}).strict() ;

export const RecipeStorageCreateManyArgsSchema: z.ZodType<Prisma.RecipeStorageCreateManyArgs> = z.object({
  data: z.union([ RecipeStorageCreateManyInputSchema,RecipeStorageCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const RecipeStorageCreateManyAndReturnArgsSchema: z.ZodType<Prisma.RecipeStorageCreateManyAndReturnArgs> = z.object({
  data: z.union([ RecipeStorageCreateManyInputSchema,RecipeStorageCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const RecipeStorageDeleteArgsSchema: z.ZodType<Prisma.RecipeStorageDeleteArgs> = z.object({
  select: RecipeStorageSelectSchema.optional(),
  include: RecipeStorageIncludeSchema.optional(),
  where: RecipeStorageWhereUniqueInputSchema,
}).strict() ;

export const RecipeStorageUpdateArgsSchema: z.ZodType<Prisma.RecipeStorageUpdateArgs> = z.object({
  select: RecipeStorageSelectSchema.optional(),
  include: RecipeStorageIncludeSchema.optional(),
  data: z.union([ RecipeStorageUpdateInputSchema,RecipeStorageUncheckedUpdateInputSchema ]),
  where: RecipeStorageWhereUniqueInputSchema,
}).strict() ;

export const RecipeStorageUpdateManyArgsSchema: z.ZodType<Prisma.RecipeStorageUpdateManyArgs> = z.object({
  data: z.union([ RecipeStorageUpdateManyMutationInputSchema,RecipeStorageUncheckedUpdateManyInputSchema ]),
  where: RecipeStorageWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RecipeStorageUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.RecipeStorageUpdateManyAndReturnArgs> = z.object({
  data: z.union([ RecipeStorageUpdateManyMutationInputSchema,RecipeStorageUncheckedUpdateManyInputSchema ]),
  where: RecipeStorageWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RecipeStorageDeleteManyArgsSchema: z.ZodType<Prisma.RecipeStorageDeleteManyArgs> = z.object({
  where: RecipeStorageWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RecipePhotoCreateArgsSchema: z.ZodType<Prisma.RecipePhotoCreateArgs> = z.object({
  select: RecipePhotoSelectSchema.optional(),
  include: RecipePhotoIncludeSchema.optional(),
  data: z.union([ RecipePhotoCreateInputSchema,RecipePhotoUncheckedCreateInputSchema ]),
}).strict() ;

export const RecipePhotoUpsertArgsSchema: z.ZodType<Prisma.RecipePhotoUpsertArgs> = z.object({
  select: RecipePhotoSelectSchema.optional(),
  include: RecipePhotoIncludeSchema.optional(),
  where: RecipePhotoWhereUniqueInputSchema,
  create: z.union([ RecipePhotoCreateInputSchema,RecipePhotoUncheckedCreateInputSchema ]),
  update: z.union([ RecipePhotoUpdateInputSchema,RecipePhotoUncheckedUpdateInputSchema ]),
}).strict() ;

export const RecipePhotoCreateManyArgsSchema: z.ZodType<Prisma.RecipePhotoCreateManyArgs> = z.object({
  data: z.union([ RecipePhotoCreateManyInputSchema,RecipePhotoCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const RecipePhotoCreateManyAndReturnArgsSchema: z.ZodType<Prisma.RecipePhotoCreateManyAndReturnArgs> = z.object({
  data: z.union([ RecipePhotoCreateManyInputSchema,RecipePhotoCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const RecipePhotoDeleteArgsSchema: z.ZodType<Prisma.RecipePhotoDeleteArgs> = z.object({
  select: RecipePhotoSelectSchema.optional(),
  include: RecipePhotoIncludeSchema.optional(),
  where: RecipePhotoWhereUniqueInputSchema,
}).strict() ;

export const RecipePhotoUpdateArgsSchema: z.ZodType<Prisma.RecipePhotoUpdateArgs> = z.object({
  select: RecipePhotoSelectSchema.optional(),
  include: RecipePhotoIncludeSchema.optional(),
  data: z.union([ RecipePhotoUpdateInputSchema,RecipePhotoUncheckedUpdateInputSchema ]),
  where: RecipePhotoWhereUniqueInputSchema,
}).strict() ;

export const RecipePhotoUpdateManyArgsSchema: z.ZodType<Prisma.RecipePhotoUpdateManyArgs> = z.object({
  data: z.union([ RecipePhotoUpdateManyMutationInputSchema,RecipePhotoUncheckedUpdateManyInputSchema ]),
  where: RecipePhotoWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RecipePhotoUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.RecipePhotoUpdateManyAndReturnArgs> = z.object({
  data: z.union([ RecipePhotoUpdateManyMutationInputSchema,RecipePhotoUncheckedUpdateManyInputSchema ]),
  where: RecipePhotoWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RecipePhotoDeleteManyArgsSchema: z.ZodType<Prisma.RecipePhotoDeleteManyArgs> = z.object({
  where: RecipePhotoWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RecipeTemperatureCreateArgsSchema: z.ZodType<Prisma.RecipeTemperatureCreateArgs> = z.object({
  select: RecipeTemperatureSelectSchema.optional(),
  include: RecipeTemperatureIncludeSchema.optional(),
  data: z.union([ RecipeTemperatureCreateInputSchema,RecipeTemperatureUncheckedCreateInputSchema ]),
}).strict() ;

export const RecipeTemperatureUpsertArgsSchema: z.ZodType<Prisma.RecipeTemperatureUpsertArgs> = z.object({
  select: RecipeTemperatureSelectSchema.optional(),
  include: RecipeTemperatureIncludeSchema.optional(),
  where: RecipeTemperatureWhereUniqueInputSchema,
  create: z.union([ RecipeTemperatureCreateInputSchema,RecipeTemperatureUncheckedCreateInputSchema ]),
  update: z.union([ RecipeTemperatureUpdateInputSchema,RecipeTemperatureUncheckedUpdateInputSchema ]),
}).strict() ;

export const RecipeTemperatureCreateManyArgsSchema: z.ZodType<Prisma.RecipeTemperatureCreateManyArgs> = z.object({
  data: z.union([ RecipeTemperatureCreateManyInputSchema,RecipeTemperatureCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const RecipeTemperatureCreateManyAndReturnArgsSchema: z.ZodType<Prisma.RecipeTemperatureCreateManyAndReturnArgs> = z.object({
  data: z.union([ RecipeTemperatureCreateManyInputSchema,RecipeTemperatureCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const RecipeTemperatureDeleteArgsSchema: z.ZodType<Prisma.RecipeTemperatureDeleteArgs> = z.object({
  select: RecipeTemperatureSelectSchema.optional(),
  include: RecipeTemperatureIncludeSchema.optional(),
  where: RecipeTemperatureWhereUniqueInputSchema,
}).strict() ;

export const RecipeTemperatureUpdateArgsSchema: z.ZodType<Prisma.RecipeTemperatureUpdateArgs> = z.object({
  select: RecipeTemperatureSelectSchema.optional(),
  include: RecipeTemperatureIncludeSchema.optional(),
  data: z.union([ RecipeTemperatureUpdateInputSchema,RecipeTemperatureUncheckedUpdateInputSchema ]),
  where: RecipeTemperatureWhereUniqueInputSchema,
}).strict() ;

export const RecipeTemperatureUpdateManyArgsSchema: z.ZodType<Prisma.RecipeTemperatureUpdateManyArgs> = z.object({
  data: z.union([ RecipeTemperatureUpdateManyMutationInputSchema,RecipeTemperatureUncheckedUpdateManyInputSchema ]),
  where: RecipeTemperatureWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RecipeTemperatureUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.RecipeTemperatureUpdateManyAndReturnArgs> = z.object({
  data: z.union([ RecipeTemperatureUpdateManyMutationInputSchema,RecipeTemperatureUncheckedUpdateManyInputSchema ]),
  where: RecipeTemperatureWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RecipeTemperatureDeleteManyArgsSchema: z.ZodType<Prisma.RecipeTemperatureDeleteManyArgs> = z.object({
  where: RecipeTemperatureWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RecipeYieldCreateArgsSchema: z.ZodType<Prisma.RecipeYieldCreateArgs> = z.object({
  select: RecipeYieldSelectSchema.optional(),
  include: RecipeYieldIncludeSchema.optional(),
  data: z.union([ RecipeYieldCreateInputSchema,RecipeYieldUncheckedCreateInputSchema ]),
}).strict() ;

export const RecipeYieldUpsertArgsSchema: z.ZodType<Prisma.RecipeYieldUpsertArgs> = z.object({
  select: RecipeYieldSelectSchema.optional(),
  include: RecipeYieldIncludeSchema.optional(),
  where: RecipeYieldWhereUniqueInputSchema,
  create: z.union([ RecipeYieldCreateInputSchema,RecipeYieldUncheckedCreateInputSchema ]),
  update: z.union([ RecipeYieldUpdateInputSchema,RecipeYieldUncheckedUpdateInputSchema ]),
}).strict() ;

export const RecipeYieldCreateManyArgsSchema: z.ZodType<Prisma.RecipeYieldCreateManyArgs> = z.object({
  data: z.union([ RecipeYieldCreateManyInputSchema,RecipeYieldCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const RecipeYieldCreateManyAndReturnArgsSchema: z.ZodType<Prisma.RecipeYieldCreateManyAndReturnArgs> = z.object({
  data: z.union([ RecipeYieldCreateManyInputSchema,RecipeYieldCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const RecipeYieldDeleteArgsSchema: z.ZodType<Prisma.RecipeYieldDeleteArgs> = z.object({
  select: RecipeYieldSelectSchema.optional(),
  include: RecipeYieldIncludeSchema.optional(),
  where: RecipeYieldWhereUniqueInputSchema,
}).strict() ;

export const RecipeYieldUpdateArgsSchema: z.ZodType<Prisma.RecipeYieldUpdateArgs> = z.object({
  select: RecipeYieldSelectSchema.optional(),
  include: RecipeYieldIncludeSchema.optional(),
  data: z.union([ RecipeYieldUpdateInputSchema,RecipeYieldUncheckedUpdateInputSchema ]),
  where: RecipeYieldWhereUniqueInputSchema,
}).strict() ;

export const RecipeYieldUpdateManyArgsSchema: z.ZodType<Prisma.RecipeYieldUpdateManyArgs> = z.object({
  data: z.union([ RecipeYieldUpdateManyMutationInputSchema,RecipeYieldUncheckedUpdateManyInputSchema ]),
  where: RecipeYieldWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RecipeYieldUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.RecipeYieldUpdateManyAndReturnArgs> = z.object({
  data: z.union([ RecipeYieldUpdateManyMutationInputSchema,RecipeYieldUncheckedUpdateManyInputSchema ]),
  where: RecipeYieldWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RecipeYieldDeleteManyArgsSchema: z.ZodType<Prisma.RecipeYieldDeleteManyArgs> = z.object({
  where: RecipeYieldWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RecipeLaborCostCreateArgsSchema: z.ZodType<Prisma.RecipeLaborCostCreateArgs> = z.object({
  select: RecipeLaborCostSelectSchema.optional(),
  include: RecipeLaborCostIncludeSchema.optional(),
  data: z.union([ RecipeLaborCostCreateInputSchema,RecipeLaborCostUncheckedCreateInputSchema ]),
}).strict() ;

export const RecipeLaborCostUpsertArgsSchema: z.ZodType<Prisma.RecipeLaborCostUpsertArgs> = z.object({
  select: RecipeLaborCostSelectSchema.optional(),
  include: RecipeLaborCostIncludeSchema.optional(),
  where: RecipeLaborCostWhereUniqueInputSchema,
  create: z.union([ RecipeLaborCostCreateInputSchema,RecipeLaborCostUncheckedCreateInputSchema ]),
  update: z.union([ RecipeLaborCostUpdateInputSchema,RecipeLaborCostUncheckedUpdateInputSchema ]),
}).strict() ;

export const RecipeLaborCostCreateManyArgsSchema: z.ZodType<Prisma.RecipeLaborCostCreateManyArgs> = z.object({
  data: z.union([ RecipeLaborCostCreateManyInputSchema,RecipeLaborCostCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const RecipeLaborCostCreateManyAndReturnArgsSchema: z.ZodType<Prisma.RecipeLaborCostCreateManyAndReturnArgs> = z.object({
  data: z.union([ RecipeLaborCostCreateManyInputSchema,RecipeLaborCostCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const RecipeLaborCostDeleteArgsSchema: z.ZodType<Prisma.RecipeLaborCostDeleteArgs> = z.object({
  select: RecipeLaborCostSelectSchema.optional(),
  include: RecipeLaborCostIncludeSchema.optional(),
  where: RecipeLaborCostWhereUniqueInputSchema,
}).strict() ;

export const RecipeLaborCostUpdateArgsSchema: z.ZodType<Prisma.RecipeLaborCostUpdateArgs> = z.object({
  select: RecipeLaborCostSelectSchema.optional(),
  include: RecipeLaborCostIncludeSchema.optional(),
  data: z.union([ RecipeLaborCostUpdateInputSchema,RecipeLaborCostUncheckedUpdateInputSchema ]),
  where: RecipeLaborCostWhereUniqueInputSchema,
}).strict() ;

export const RecipeLaborCostUpdateManyArgsSchema: z.ZodType<Prisma.RecipeLaborCostUpdateManyArgs> = z.object({
  data: z.union([ RecipeLaborCostUpdateManyMutationInputSchema,RecipeLaborCostUncheckedUpdateManyInputSchema ]),
  where: RecipeLaborCostWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RecipeLaborCostUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.RecipeLaborCostUpdateManyAndReturnArgs> = z.object({
  data: z.union([ RecipeLaborCostUpdateManyMutationInputSchema,RecipeLaborCostUncheckedUpdateManyInputSchema ]),
  where: RecipeLaborCostWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RecipeLaborCostDeleteManyArgsSchema: z.ZodType<Prisma.RecipeLaborCostDeleteManyArgs> = z.object({
  where: RecipeLaborCostWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const SalesTransactionsCreateArgsSchema: z.ZodType<Prisma.SalesTransactionsCreateArgs> = z.object({
  select: SalesTransactionsSelectSchema.optional(),
  include: SalesTransactionsIncludeSchema.optional(),
  data: z.union([ SalesTransactionsCreateInputSchema,SalesTransactionsUncheckedCreateInputSchema ]),
}).strict() ;

export const SalesTransactionsUpsertArgsSchema: z.ZodType<Prisma.SalesTransactionsUpsertArgs> = z.object({
  select: SalesTransactionsSelectSchema.optional(),
  include: SalesTransactionsIncludeSchema.optional(),
  where: SalesTransactionsWhereUniqueInputSchema,
  create: z.union([ SalesTransactionsCreateInputSchema,SalesTransactionsUncheckedCreateInputSchema ]),
  update: z.union([ SalesTransactionsUpdateInputSchema,SalesTransactionsUncheckedUpdateInputSchema ]),
}).strict() ;

export const SalesTransactionsCreateManyArgsSchema: z.ZodType<Prisma.SalesTransactionsCreateManyArgs> = z.object({
  data: z.union([ SalesTransactionsCreateManyInputSchema,SalesTransactionsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const SalesTransactionsCreateManyAndReturnArgsSchema: z.ZodType<Prisma.SalesTransactionsCreateManyAndReturnArgs> = z.object({
  data: z.union([ SalesTransactionsCreateManyInputSchema,SalesTransactionsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const SalesTransactionsDeleteArgsSchema: z.ZodType<Prisma.SalesTransactionsDeleteArgs> = z.object({
  select: SalesTransactionsSelectSchema.optional(),
  include: SalesTransactionsIncludeSchema.optional(),
  where: SalesTransactionsWhereUniqueInputSchema,
}).strict() ;

export const SalesTransactionsUpdateArgsSchema: z.ZodType<Prisma.SalesTransactionsUpdateArgs> = z.object({
  select: SalesTransactionsSelectSchema.optional(),
  include: SalesTransactionsIncludeSchema.optional(),
  data: z.union([ SalesTransactionsUpdateInputSchema,SalesTransactionsUncheckedUpdateInputSchema ]),
  where: SalesTransactionsWhereUniqueInputSchema,
}).strict() ;

export const SalesTransactionsUpdateManyArgsSchema: z.ZodType<Prisma.SalesTransactionsUpdateManyArgs> = z.object({
  data: z.union([ SalesTransactionsUpdateManyMutationInputSchema,SalesTransactionsUncheckedUpdateManyInputSchema ]),
  where: SalesTransactionsWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const SalesTransactionsUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.SalesTransactionsUpdateManyAndReturnArgs> = z.object({
  data: z.union([ SalesTransactionsUpdateManyMutationInputSchema,SalesTransactionsUncheckedUpdateManyInputSchema ]),
  where: SalesTransactionsWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const SalesTransactionsDeleteManyArgsSchema: z.ZodType<Prisma.SalesTransactionsDeleteManyArgs> = z.object({
  where: SalesTransactionsWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const MenuCategoryCreateArgsSchema: z.ZodType<Prisma.MenuCategoryCreateArgs> = z.object({
  select: MenuCategorySelectSchema.optional(),
  include: MenuCategoryIncludeSchema.optional(),
  data: z.union([ MenuCategoryCreateInputSchema,MenuCategoryUncheckedCreateInputSchema ]),
}).strict() ;

export const MenuCategoryUpsertArgsSchema: z.ZodType<Prisma.MenuCategoryUpsertArgs> = z.object({
  select: MenuCategorySelectSchema.optional(),
  include: MenuCategoryIncludeSchema.optional(),
  where: MenuCategoryWhereUniqueInputSchema,
  create: z.union([ MenuCategoryCreateInputSchema,MenuCategoryUncheckedCreateInputSchema ]),
  update: z.union([ MenuCategoryUpdateInputSchema,MenuCategoryUncheckedUpdateInputSchema ]),
}).strict() ;

export const MenuCategoryCreateManyArgsSchema: z.ZodType<Prisma.MenuCategoryCreateManyArgs> = z.object({
  data: z.union([ MenuCategoryCreateManyInputSchema,MenuCategoryCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const MenuCategoryCreateManyAndReturnArgsSchema: z.ZodType<Prisma.MenuCategoryCreateManyAndReturnArgs> = z.object({
  data: z.union([ MenuCategoryCreateManyInputSchema,MenuCategoryCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const MenuCategoryDeleteArgsSchema: z.ZodType<Prisma.MenuCategoryDeleteArgs> = z.object({
  select: MenuCategorySelectSchema.optional(),
  include: MenuCategoryIncludeSchema.optional(),
  where: MenuCategoryWhereUniqueInputSchema,
}).strict() ;

export const MenuCategoryUpdateArgsSchema: z.ZodType<Prisma.MenuCategoryUpdateArgs> = z.object({
  select: MenuCategorySelectSchema.optional(),
  include: MenuCategoryIncludeSchema.optional(),
  data: z.union([ MenuCategoryUpdateInputSchema,MenuCategoryUncheckedUpdateInputSchema ]),
  where: MenuCategoryWhereUniqueInputSchema,
}).strict() ;

export const MenuCategoryUpdateManyArgsSchema: z.ZodType<Prisma.MenuCategoryUpdateManyArgs> = z.object({
  data: z.union([ MenuCategoryUpdateManyMutationInputSchema,MenuCategoryUncheckedUpdateManyInputSchema ]),
  where: MenuCategoryWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const MenuCategoryUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.MenuCategoryUpdateManyAndReturnArgs> = z.object({
  data: z.union([ MenuCategoryUpdateManyMutationInputSchema,MenuCategoryUncheckedUpdateManyInputSchema ]),
  where: MenuCategoryWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const MenuCategoryDeleteManyArgsSchema: z.ZodType<Prisma.MenuCategoryDeleteManyArgs> = z.object({
  where: MenuCategoryWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RecipeVersionCreateArgsSchema: z.ZodType<Prisma.RecipeVersionCreateArgs> = z.object({
  select: RecipeVersionSelectSchema.optional(),
  include: RecipeVersionIncludeSchema.optional(),
  data: z.union([ RecipeVersionCreateInputSchema,RecipeVersionUncheckedCreateInputSchema ]),
}).strict() ;

export const RecipeVersionUpsertArgsSchema: z.ZodType<Prisma.RecipeVersionUpsertArgs> = z.object({
  select: RecipeVersionSelectSchema.optional(),
  include: RecipeVersionIncludeSchema.optional(),
  where: RecipeVersionWhereUniqueInputSchema,
  create: z.union([ RecipeVersionCreateInputSchema,RecipeVersionUncheckedCreateInputSchema ]),
  update: z.union([ RecipeVersionUpdateInputSchema,RecipeVersionUncheckedUpdateInputSchema ]),
}).strict() ;

export const RecipeVersionCreateManyArgsSchema: z.ZodType<Prisma.RecipeVersionCreateManyArgs> = z.object({
  data: z.union([ RecipeVersionCreateManyInputSchema,RecipeVersionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const RecipeVersionCreateManyAndReturnArgsSchema: z.ZodType<Prisma.RecipeVersionCreateManyAndReturnArgs> = z.object({
  data: z.union([ RecipeVersionCreateManyInputSchema,RecipeVersionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const RecipeVersionDeleteArgsSchema: z.ZodType<Prisma.RecipeVersionDeleteArgs> = z.object({
  select: RecipeVersionSelectSchema.optional(),
  include: RecipeVersionIncludeSchema.optional(),
  where: RecipeVersionWhereUniqueInputSchema,
}).strict() ;

export const RecipeVersionUpdateArgsSchema: z.ZodType<Prisma.RecipeVersionUpdateArgs> = z.object({
  select: RecipeVersionSelectSchema.optional(),
  include: RecipeVersionIncludeSchema.optional(),
  data: z.union([ RecipeVersionUpdateInputSchema,RecipeVersionUncheckedUpdateInputSchema ]),
  where: RecipeVersionWhereUniqueInputSchema,
}).strict() ;

export const RecipeVersionUpdateManyArgsSchema: z.ZodType<Prisma.RecipeVersionUpdateManyArgs> = z.object({
  data: z.union([ RecipeVersionUpdateManyMutationInputSchema,RecipeVersionUncheckedUpdateManyInputSchema ]),
  where: RecipeVersionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RecipeVersionUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.RecipeVersionUpdateManyAndReturnArgs> = z.object({
  data: z.union([ RecipeVersionUpdateManyMutationInputSchema,RecipeVersionUncheckedUpdateManyInputSchema ]),
  where: RecipeVersionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RecipeVersionDeleteManyArgsSchema: z.ZodType<Prisma.RecipeVersionDeleteManyArgs> = z.object({
  where: RecipeVersionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const EquipmentCreateArgsSchema: z.ZodType<Prisma.EquipmentCreateArgs> = z.object({
  select: EquipmentSelectSchema.optional(),
  include: EquipmentIncludeSchema.optional(),
  data: z.union([ EquipmentCreateInputSchema,EquipmentUncheckedCreateInputSchema ]),
}).strict() ;

export const EquipmentUpsertArgsSchema: z.ZodType<Prisma.EquipmentUpsertArgs> = z.object({
  select: EquipmentSelectSchema.optional(),
  include: EquipmentIncludeSchema.optional(),
  where: EquipmentWhereUniqueInputSchema,
  create: z.union([ EquipmentCreateInputSchema,EquipmentUncheckedCreateInputSchema ]),
  update: z.union([ EquipmentUpdateInputSchema,EquipmentUncheckedUpdateInputSchema ]),
}).strict() ;

export const EquipmentCreateManyArgsSchema: z.ZodType<Prisma.EquipmentCreateManyArgs> = z.object({
  data: z.union([ EquipmentCreateManyInputSchema,EquipmentCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const EquipmentCreateManyAndReturnArgsSchema: z.ZodType<Prisma.EquipmentCreateManyAndReturnArgs> = z.object({
  data: z.union([ EquipmentCreateManyInputSchema,EquipmentCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const EquipmentDeleteArgsSchema: z.ZodType<Prisma.EquipmentDeleteArgs> = z.object({
  select: EquipmentSelectSchema.optional(),
  include: EquipmentIncludeSchema.optional(),
  where: EquipmentWhereUniqueInputSchema,
}).strict() ;

export const EquipmentUpdateArgsSchema: z.ZodType<Prisma.EquipmentUpdateArgs> = z.object({
  select: EquipmentSelectSchema.optional(),
  include: EquipmentIncludeSchema.optional(),
  data: z.union([ EquipmentUpdateInputSchema,EquipmentUncheckedUpdateInputSchema ]),
  where: EquipmentWhereUniqueInputSchema,
}).strict() ;

export const EquipmentUpdateManyArgsSchema: z.ZodType<Prisma.EquipmentUpdateManyArgs> = z.object({
  data: z.union([ EquipmentUpdateManyMutationInputSchema,EquipmentUncheckedUpdateManyInputSchema ]),
  where: EquipmentWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const EquipmentUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.EquipmentUpdateManyAndReturnArgs> = z.object({
  data: z.union([ EquipmentUpdateManyMutationInputSchema,EquipmentUncheckedUpdateManyInputSchema ]),
  where: EquipmentWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const EquipmentDeleteManyArgsSchema: z.ZodType<Prisma.EquipmentDeleteManyArgs> = z.object({
  where: EquipmentWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RecipeEquipmentCreateArgsSchema: z.ZodType<Prisma.RecipeEquipmentCreateArgs> = z.object({
  select: RecipeEquipmentSelectSchema.optional(),
  include: RecipeEquipmentIncludeSchema.optional(),
  data: z.union([ RecipeEquipmentCreateInputSchema,RecipeEquipmentUncheckedCreateInputSchema ]),
}).strict() ;

export const RecipeEquipmentUpsertArgsSchema: z.ZodType<Prisma.RecipeEquipmentUpsertArgs> = z.object({
  select: RecipeEquipmentSelectSchema.optional(),
  include: RecipeEquipmentIncludeSchema.optional(),
  where: RecipeEquipmentWhereUniqueInputSchema,
  create: z.union([ RecipeEquipmentCreateInputSchema,RecipeEquipmentUncheckedCreateInputSchema ]),
  update: z.union([ RecipeEquipmentUpdateInputSchema,RecipeEquipmentUncheckedUpdateInputSchema ]),
}).strict() ;

export const RecipeEquipmentCreateManyArgsSchema: z.ZodType<Prisma.RecipeEquipmentCreateManyArgs> = z.object({
  data: z.union([ RecipeEquipmentCreateManyInputSchema,RecipeEquipmentCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const RecipeEquipmentCreateManyAndReturnArgsSchema: z.ZodType<Prisma.RecipeEquipmentCreateManyAndReturnArgs> = z.object({
  data: z.union([ RecipeEquipmentCreateManyInputSchema,RecipeEquipmentCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const RecipeEquipmentDeleteArgsSchema: z.ZodType<Prisma.RecipeEquipmentDeleteArgs> = z.object({
  select: RecipeEquipmentSelectSchema.optional(),
  include: RecipeEquipmentIncludeSchema.optional(),
  where: RecipeEquipmentWhereUniqueInputSchema,
}).strict() ;

export const RecipeEquipmentUpdateArgsSchema: z.ZodType<Prisma.RecipeEquipmentUpdateArgs> = z.object({
  select: RecipeEquipmentSelectSchema.optional(),
  include: RecipeEquipmentIncludeSchema.optional(),
  data: z.union([ RecipeEquipmentUpdateInputSchema,RecipeEquipmentUncheckedUpdateInputSchema ]),
  where: RecipeEquipmentWhereUniqueInputSchema,
}).strict() ;

export const RecipeEquipmentUpdateManyArgsSchema: z.ZodType<Prisma.RecipeEquipmentUpdateManyArgs> = z.object({
  data: z.union([ RecipeEquipmentUpdateManyMutationInputSchema,RecipeEquipmentUncheckedUpdateManyInputSchema ]),
  where: RecipeEquipmentWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RecipeEquipmentUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.RecipeEquipmentUpdateManyAndReturnArgs> = z.object({
  data: z.union([ RecipeEquipmentUpdateManyMutationInputSchema,RecipeEquipmentUncheckedUpdateManyInputSchema ]),
  where: RecipeEquipmentWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RecipeEquipmentDeleteManyArgsSchema: z.ZodType<Prisma.RecipeEquipmentDeleteManyArgs> = z.object({
  where: RecipeEquipmentWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const MaintenanceLogCreateArgsSchema: z.ZodType<Prisma.MaintenanceLogCreateArgs> = z.object({
  select: MaintenanceLogSelectSchema.optional(),
  include: MaintenanceLogIncludeSchema.optional(),
  data: z.union([ MaintenanceLogCreateInputSchema,MaintenanceLogUncheckedCreateInputSchema ]),
}).strict() ;

export const MaintenanceLogUpsertArgsSchema: z.ZodType<Prisma.MaintenanceLogUpsertArgs> = z.object({
  select: MaintenanceLogSelectSchema.optional(),
  include: MaintenanceLogIncludeSchema.optional(),
  where: MaintenanceLogWhereUniqueInputSchema,
  create: z.union([ MaintenanceLogCreateInputSchema,MaintenanceLogUncheckedCreateInputSchema ]),
  update: z.union([ MaintenanceLogUpdateInputSchema,MaintenanceLogUncheckedUpdateInputSchema ]),
}).strict() ;

export const MaintenanceLogCreateManyArgsSchema: z.ZodType<Prisma.MaintenanceLogCreateManyArgs> = z.object({
  data: z.union([ MaintenanceLogCreateManyInputSchema,MaintenanceLogCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const MaintenanceLogCreateManyAndReturnArgsSchema: z.ZodType<Prisma.MaintenanceLogCreateManyAndReturnArgs> = z.object({
  data: z.union([ MaintenanceLogCreateManyInputSchema,MaintenanceLogCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const MaintenanceLogDeleteArgsSchema: z.ZodType<Prisma.MaintenanceLogDeleteArgs> = z.object({
  select: MaintenanceLogSelectSchema.optional(),
  include: MaintenanceLogIncludeSchema.optional(),
  where: MaintenanceLogWhereUniqueInputSchema,
}).strict() ;

export const MaintenanceLogUpdateArgsSchema: z.ZodType<Prisma.MaintenanceLogUpdateArgs> = z.object({
  select: MaintenanceLogSelectSchema.optional(),
  include: MaintenanceLogIncludeSchema.optional(),
  data: z.union([ MaintenanceLogUpdateInputSchema,MaintenanceLogUncheckedUpdateInputSchema ]),
  where: MaintenanceLogWhereUniqueInputSchema,
}).strict() ;

export const MaintenanceLogUpdateManyArgsSchema: z.ZodType<Prisma.MaintenanceLogUpdateManyArgs> = z.object({
  data: z.union([ MaintenanceLogUpdateManyMutationInputSchema,MaintenanceLogUncheckedUpdateManyInputSchema ]),
  where: MaintenanceLogWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const MaintenanceLogUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.MaintenanceLogUpdateManyAndReturnArgs> = z.object({
  data: z.union([ MaintenanceLogUpdateManyMutationInputSchema,MaintenanceLogUncheckedUpdateManyInputSchema ]),
  where: MaintenanceLogWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const MaintenanceLogDeleteManyArgsSchema: z.ZodType<Prisma.MaintenanceLogDeleteManyArgs> = z.object({
  where: MaintenanceLogWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const QualityChecklistCreateArgsSchema: z.ZodType<Prisma.QualityChecklistCreateArgs> = z.object({
  select: QualityChecklistSelectSchema.optional(),
  include: QualityChecklistIncludeSchema.optional(),
  data: z.union([ QualityChecklistCreateInputSchema,QualityChecklistUncheckedCreateInputSchema ]),
}).strict() ;

export const QualityChecklistUpsertArgsSchema: z.ZodType<Prisma.QualityChecklistUpsertArgs> = z.object({
  select: QualityChecklistSelectSchema.optional(),
  include: QualityChecklistIncludeSchema.optional(),
  where: QualityChecklistWhereUniqueInputSchema,
  create: z.union([ QualityChecklistCreateInputSchema,QualityChecklistUncheckedCreateInputSchema ]),
  update: z.union([ QualityChecklistUpdateInputSchema,QualityChecklistUncheckedUpdateInputSchema ]),
}).strict() ;

export const QualityChecklistCreateManyArgsSchema: z.ZodType<Prisma.QualityChecklistCreateManyArgs> = z.object({
  data: z.union([ QualityChecklistCreateManyInputSchema,QualityChecklistCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const QualityChecklistCreateManyAndReturnArgsSchema: z.ZodType<Prisma.QualityChecklistCreateManyAndReturnArgs> = z.object({
  data: z.union([ QualityChecklistCreateManyInputSchema,QualityChecklistCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const QualityChecklistDeleteArgsSchema: z.ZodType<Prisma.QualityChecklistDeleteArgs> = z.object({
  select: QualityChecklistSelectSchema.optional(),
  include: QualityChecklistIncludeSchema.optional(),
  where: QualityChecklistWhereUniqueInputSchema,
}).strict() ;

export const QualityChecklistUpdateArgsSchema: z.ZodType<Prisma.QualityChecklistUpdateArgs> = z.object({
  select: QualityChecklistSelectSchema.optional(),
  include: QualityChecklistIncludeSchema.optional(),
  data: z.union([ QualityChecklistUpdateInputSchema,QualityChecklistUncheckedUpdateInputSchema ]),
  where: QualityChecklistWhereUniqueInputSchema,
}).strict() ;

export const QualityChecklistUpdateManyArgsSchema: z.ZodType<Prisma.QualityChecklistUpdateManyArgs> = z.object({
  data: z.union([ QualityChecklistUpdateManyMutationInputSchema,QualityChecklistUncheckedUpdateManyInputSchema ]),
  where: QualityChecklistWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const QualityChecklistUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.QualityChecklistUpdateManyAndReturnArgs> = z.object({
  data: z.union([ QualityChecklistUpdateManyMutationInputSchema,QualityChecklistUncheckedUpdateManyInputSchema ]),
  where: QualityChecklistWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const QualityChecklistDeleteManyArgsSchema: z.ZodType<Prisma.QualityChecklistDeleteManyArgs> = z.object({
  where: QualityChecklistWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ChecklistItemCreateArgsSchema: z.ZodType<Prisma.ChecklistItemCreateArgs> = z.object({
  select: ChecklistItemSelectSchema.optional(),
  include: ChecklistItemIncludeSchema.optional(),
  data: z.union([ ChecklistItemCreateInputSchema,ChecklistItemUncheckedCreateInputSchema ]),
}).strict() ;

export const ChecklistItemUpsertArgsSchema: z.ZodType<Prisma.ChecklistItemUpsertArgs> = z.object({
  select: ChecklistItemSelectSchema.optional(),
  include: ChecklistItemIncludeSchema.optional(),
  where: ChecklistItemWhereUniqueInputSchema,
  create: z.union([ ChecklistItemCreateInputSchema,ChecklistItemUncheckedCreateInputSchema ]),
  update: z.union([ ChecklistItemUpdateInputSchema,ChecklistItemUncheckedUpdateInputSchema ]),
}).strict() ;

export const ChecklistItemCreateManyArgsSchema: z.ZodType<Prisma.ChecklistItemCreateManyArgs> = z.object({
  data: z.union([ ChecklistItemCreateManyInputSchema,ChecklistItemCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ChecklistItemCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ChecklistItemCreateManyAndReturnArgs> = z.object({
  data: z.union([ ChecklistItemCreateManyInputSchema,ChecklistItemCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ChecklistItemDeleteArgsSchema: z.ZodType<Prisma.ChecklistItemDeleteArgs> = z.object({
  select: ChecklistItemSelectSchema.optional(),
  include: ChecklistItemIncludeSchema.optional(),
  where: ChecklistItemWhereUniqueInputSchema,
}).strict() ;

export const ChecklistItemUpdateArgsSchema: z.ZodType<Prisma.ChecklistItemUpdateArgs> = z.object({
  select: ChecklistItemSelectSchema.optional(),
  include: ChecklistItemIncludeSchema.optional(),
  data: z.union([ ChecklistItemUpdateInputSchema,ChecklistItemUncheckedUpdateInputSchema ]),
  where: ChecklistItemWhereUniqueInputSchema,
}).strict() ;

export const ChecklistItemUpdateManyArgsSchema: z.ZodType<Prisma.ChecklistItemUpdateManyArgs> = z.object({
  data: z.union([ ChecklistItemUpdateManyMutationInputSchema,ChecklistItemUncheckedUpdateManyInputSchema ]),
  where: ChecklistItemWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ChecklistItemUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.ChecklistItemUpdateManyAndReturnArgs> = z.object({
  data: z.union([ ChecklistItemUpdateManyMutationInputSchema,ChecklistItemUncheckedUpdateManyInputSchema ]),
  where: ChecklistItemWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ChecklistItemDeleteManyArgsSchema: z.ZodType<Prisma.ChecklistItemDeleteManyArgs> = z.object({
  where: ChecklistItemWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ChecklistCompleteCreateArgsSchema: z.ZodType<Prisma.ChecklistCompleteCreateArgs> = z.object({
  select: ChecklistCompleteSelectSchema.optional(),
  include: ChecklistCompleteIncludeSchema.optional(),
  data: z.union([ ChecklistCompleteCreateInputSchema,ChecklistCompleteUncheckedCreateInputSchema ]),
}).strict() ;

export const ChecklistCompleteUpsertArgsSchema: z.ZodType<Prisma.ChecklistCompleteUpsertArgs> = z.object({
  select: ChecklistCompleteSelectSchema.optional(),
  include: ChecklistCompleteIncludeSchema.optional(),
  where: ChecklistCompleteWhereUniqueInputSchema,
  create: z.union([ ChecklistCompleteCreateInputSchema,ChecklistCompleteUncheckedCreateInputSchema ]),
  update: z.union([ ChecklistCompleteUpdateInputSchema,ChecklistCompleteUncheckedUpdateInputSchema ]),
}).strict() ;

export const ChecklistCompleteCreateManyArgsSchema: z.ZodType<Prisma.ChecklistCompleteCreateManyArgs> = z.object({
  data: z.union([ ChecklistCompleteCreateManyInputSchema,ChecklistCompleteCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ChecklistCompleteCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ChecklistCompleteCreateManyAndReturnArgs> = z.object({
  data: z.union([ ChecklistCompleteCreateManyInputSchema,ChecklistCompleteCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ChecklistCompleteDeleteArgsSchema: z.ZodType<Prisma.ChecklistCompleteDeleteArgs> = z.object({
  select: ChecklistCompleteSelectSchema.optional(),
  include: ChecklistCompleteIncludeSchema.optional(),
  where: ChecklistCompleteWhereUniqueInputSchema,
}).strict() ;

export const ChecklistCompleteUpdateArgsSchema: z.ZodType<Prisma.ChecklistCompleteUpdateArgs> = z.object({
  select: ChecklistCompleteSelectSchema.optional(),
  include: ChecklistCompleteIncludeSchema.optional(),
  data: z.union([ ChecklistCompleteUpdateInputSchema,ChecklistCompleteUncheckedUpdateInputSchema ]),
  where: ChecklistCompleteWhereUniqueInputSchema,
}).strict() ;

export const ChecklistCompleteUpdateManyArgsSchema: z.ZodType<Prisma.ChecklistCompleteUpdateManyArgs> = z.object({
  data: z.union([ ChecklistCompleteUpdateManyMutationInputSchema,ChecklistCompleteUncheckedUpdateManyInputSchema ]),
  where: ChecklistCompleteWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ChecklistCompleteUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.ChecklistCompleteUpdateManyAndReturnArgs> = z.object({
  data: z.union([ ChecklistCompleteUpdateManyMutationInputSchema,ChecklistCompleteUncheckedUpdateManyInputSchema ]),
  where: ChecklistCompleteWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ChecklistCompleteDeleteManyArgsSchema: z.ZodType<Prisma.ChecklistCompleteDeleteManyArgs> = z.object({
  where: ChecklistCompleteWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ChecklistItemCompleteCreateArgsSchema: z.ZodType<Prisma.ChecklistItemCompleteCreateArgs> = z.object({
  select: ChecklistItemCompleteSelectSchema.optional(),
  include: ChecklistItemCompleteIncludeSchema.optional(),
  data: z.union([ ChecklistItemCompleteCreateInputSchema,ChecklistItemCompleteUncheckedCreateInputSchema ]),
}).strict() ;

export const ChecklistItemCompleteUpsertArgsSchema: z.ZodType<Prisma.ChecklistItemCompleteUpsertArgs> = z.object({
  select: ChecklistItemCompleteSelectSchema.optional(),
  include: ChecklistItemCompleteIncludeSchema.optional(),
  where: ChecklistItemCompleteWhereUniqueInputSchema,
  create: z.union([ ChecklistItemCompleteCreateInputSchema,ChecklistItemCompleteUncheckedCreateInputSchema ]),
  update: z.union([ ChecklistItemCompleteUpdateInputSchema,ChecklistItemCompleteUncheckedUpdateInputSchema ]),
}).strict() ;

export const ChecklistItemCompleteCreateManyArgsSchema: z.ZodType<Prisma.ChecklistItemCompleteCreateManyArgs> = z.object({
  data: z.union([ ChecklistItemCompleteCreateManyInputSchema,ChecklistItemCompleteCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ChecklistItemCompleteCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ChecklistItemCompleteCreateManyAndReturnArgs> = z.object({
  data: z.union([ ChecklistItemCompleteCreateManyInputSchema,ChecklistItemCompleteCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ChecklistItemCompleteDeleteArgsSchema: z.ZodType<Prisma.ChecklistItemCompleteDeleteArgs> = z.object({
  select: ChecklistItemCompleteSelectSchema.optional(),
  include: ChecklistItemCompleteIncludeSchema.optional(),
  where: ChecklistItemCompleteWhereUniqueInputSchema,
}).strict() ;

export const ChecklistItemCompleteUpdateArgsSchema: z.ZodType<Prisma.ChecklistItemCompleteUpdateArgs> = z.object({
  select: ChecklistItemCompleteSelectSchema.optional(),
  include: ChecklistItemCompleteIncludeSchema.optional(),
  data: z.union([ ChecklistItemCompleteUpdateInputSchema,ChecklistItemCompleteUncheckedUpdateInputSchema ]),
  where: ChecklistItemCompleteWhereUniqueInputSchema,
}).strict() ;

export const ChecklistItemCompleteUpdateManyArgsSchema: z.ZodType<Prisma.ChecklistItemCompleteUpdateManyArgs> = z.object({
  data: z.union([ ChecklistItemCompleteUpdateManyMutationInputSchema,ChecklistItemCompleteUncheckedUpdateManyInputSchema ]),
  where: ChecklistItemCompleteWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ChecklistItemCompleteUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.ChecklistItemCompleteUpdateManyAndReturnArgs> = z.object({
  data: z.union([ ChecklistItemCompleteUpdateManyMutationInputSchema,ChecklistItemCompleteUncheckedUpdateManyInputSchema ]),
  where: ChecklistItemCompleteWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ChecklistItemCompleteDeleteManyArgsSchema: z.ZodType<Prisma.ChecklistItemCompleteDeleteManyArgs> = z.object({
  where: ChecklistItemCompleteWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const SupplierPriceHistoryCreateArgsSchema: z.ZodType<Prisma.SupplierPriceHistoryCreateArgs> = z.object({
  select: SupplierPriceHistorySelectSchema.optional(),
  include: SupplierPriceHistoryIncludeSchema.optional(),
  data: z.union([ SupplierPriceHistoryCreateInputSchema,SupplierPriceHistoryUncheckedCreateInputSchema ]),
}).strict() ;

export const SupplierPriceHistoryUpsertArgsSchema: z.ZodType<Prisma.SupplierPriceHistoryUpsertArgs> = z.object({
  select: SupplierPriceHistorySelectSchema.optional(),
  include: SupplierPriceHistoryIncludeSchema.optional(),
  where: SupplierPriceHistoryWhereUniqueInputSchema,
  create: z.union([ SupplierPriceHistoryCreateInputSchema,SupplierPriceHistoryUncheckedCreateInputSchema ]),
  update: z.union([ SupplierPriceHistoryUpdateInputSchema,SupplierPriceHistoryUncheckedUpdateInputSchema ]),
}).strict() ;

export const SupplierPriceHistoryCreateManyArgsSchema: z.ZodType<Prisma.SupplierPriceHistoryCreateManyArgs> = z.object({
  data: z.union([ SupplierPriceHistoryCreateManyInputSchema,SupplierPriceHistoryCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const SupplierPriceHistoryCreateManyAndReturnArgsSchema: z.ZodType<Prisma.SupplierPriceHistoryCreateManyAndReturnArgs> = z.object({
  data: z.union([ SupplierPriceHistoryCreateManyInputSchema,SupplierPriceHistoryCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const SupplierPriceHistoryDeleteArgsSchema: z.ZodType<Prisma.SupplierPriceHistoryDeleteArgs> = z.object({
  select: SupplierPriceHistorySelectSchema.optional(),
  include: SupplierPriceHistoryIncludeSchema.optional(),
  where: SupplierPriceHistoryWhereUniqueInputSchema,
}).strict() ;

export const SupplierPriceHistoryUpdateArgsSchema: z.ZodType<Prisma.SupplierPriceHistoryUpdateArgs> = z.object({
  select: SupplierPriceHistorySelectSchema.optional(),
  include: SupplierPriceHistoryIncludeSchema.optional(),
  data: z.union([ SupplierPriceHistoryUpdateInputSchema,SupplierPriceHistoryUncheckedUpdateInputSchema ]),
  where: SupplierPriceHistoryWhereUniqueInputSchema,
}).strict() ;

export const SupplierPriceHistoryUpdateManyArgsSchema: z.ZodType<Prisma.SupplierPriceHistoryUpdateManyArgs> = z.object({
  data: z.union([ SupplierPriceHistoryUpdateManyMutationInputSchema,SupplierPriceHistoryUncheckedUpdateManyInputSchema ]),
  where: SupplierPriceHistoryWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const SupplierPriceHistoryUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.SupplierPriceHistoryUpdateManyAndReturnArgs> = z.object({
  data: z.union([ SupplierPriceHistoryUpdateManyMutationInputSchema,SupplierPriceHistoryUncheckedUpdateManyInputSchema ]),
  where: SupplierPriceHistoryWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const SupplierPriceHistoryDeleteManyArgsSchema: z.ZodType<Prisma.SupplierPriceHistoryDeleteManyArgs> = z.object({
  where: SupplierPriceHistoryWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const CustomerFeedbackCreateArgsSchema: z.ZodType<Prisma.CustomerFeedbackCreateArgs> = z.object({
  select: CustomerFeedbackSelectSchema.optional(),
  include: CustomerFeedbackIncludeSchema.optional(),
  data: z.union([ CustomerFeedbackCreateInputSchema,CustomerFeedbackUncheckedCreateInputSchema ]),
}).strict() ;

export const CustomerFeedbackUpsertArgsSchema: z.ZodType<Prisma.CustomerFeedbackUpsertArgs> = z.object({
  select: CustomerFeedbackSelectSchema.optional(),
  include: CustomerFeedbackIncludeSchema.optional(),
  where: CustomerFeedbackWhereUniqueInputSchema,
  create: z.union([ CustomerFeedbackCreateInputSchema,CustomerFeedbackUncheckedCreateInputSchema ]),
  update: z.union([ CustomerFeedbackUpdateInputSchema,CustomerFeedbackUncheckedUpdateInputSchema ]),
}).strict() ;

export const CustomerFeedbackCreateManyArgsSchema: z.ZodType<Prisma.CustomerFeedbackCreateManyArgs> = z.object({
  data: z.union([ CustomerFeedbackCreateManyInputSchema,CustomerFeedbackCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const CustomerFeedbackCreateManyAndReturnArgsSchema: z.ZodType<Prisma.CustomerFeedbackCreateManyAndReturnArgs> = z.object({
  data: z.union([ CustomerFeedbackCreateManyInputSchema,CustomerFeedbackCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const CustomerFeedbackDeleteArgsSchema: z.ZodType<Prisma.CustomerFeedbackDeleteArgs> = z.object({
  select: CustomerFeedbackSelectSchema.optional(),
  include: CustomerFeedbackIncludeSchema.optional(),
  where: CustomerFeedbackWhereUniqueInputSchema,
}).strict() ;

export const CustomerFeedbackUpdateArgsSchema: z.ZodType<Prisma.CustomerFeedbackUpdateArgs> = z.object({
  select: CustomerFeedbackSelectSchema.optional(),
  include: CustomerFeedbackIncludeSchema.optional(),
  data: z.union([ CustomerFeedbackUpdateInputSchema,CustomerFeedbackUncheckedUpdateInputSchema ]),
  where: CustomerFeedbackWhereUniqueInputSchema,
}).strict() ;

export const CustomerFeedbackUpdateManyArgsSchema: z.ZodType<Prisma.CustomerFeedbackUpdateManyArgs> = z.object({
  data: z.union([ CustomerFeedbackUpdateManyMutationInputSchema,CustomerFeedbackUncheckedUpdateManyInputSchema ]),
  where: CustomerFeedbackWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const CustomerFeedbackUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.CustomerFeedbackUpdateManyAndReturnArgs> = z.object({
  data: z.union([ CustomerFeedbackUpdateManyMutationInputSchema,CustomerFeedbackUncheckedUpdateManyInputSchema ]),
  where: CustomerFeedbackWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const CustomerFeedbackDeleteManyArgsSchema: z.ZodType<Prisma.CustomerFeedbackDeleteManyArgs> = z.object({
  where: CustomerFeedbackWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const DietaryRestrictionCreateArgsSchema: z.ZodType<Prisma.DietaryRestrictionCreateArgs> = z.object({
  select: DietaryRestrictionSelectSchema.optional(),
  include: DietaryRestrictionIncludeSchema.optional(),
  data: z.union([ DietaryRestrictionCreateInputSchema,DietaryRestrictionUncheckedCreateInputSchema ]),
}).strict() ;

export const DietaryRestrictionUpsertArgsSchema: z.ZodType<Prisma.DietaryRestrictionUpsertArgs> = z.object({
  select: DietaryRestrictionSelectSchema.optional(),
  include: DietaryRestrictionIncludeSchema.optional(),
  where: DietaryRestrictionWhereUniqueInputSchema,
  create: z.union([ DietaryRestrictionCreateInputSchema,DietaryRestrictionUncheckedCreateInputSchema ]),
  update: z.union([ DietaryRestrictionUpdateInputSchema,DietaryRestrictionUncheckedUpdateInputSchema ]),
}).strict() ;

export const DietaryRestrictionCreateManyArgsSchema: z.ZodType<Prisma.DietaryRestrictionCreateManyArgs> = z.object({
  data: z.union([ DietaryRestrictionCreateManyInputSchema,DietaryRestrictionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const DietaryRestrictionCreateManyAndReturnArgsSchema: z.ZodType<Prisma.DietaryRestrictionCreateManyAndReturnArgs> = z.object({
  data: z.union([ DietaryRestrictionCreateManyInputSchema,DietaryRestrictionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const DietaryRestrictionDeleteArgsSchema: z.ZodType<Prisma.DietaryRestrictionDeleteArgs> = z.object({
  select: DietaryRestrictionSelectSchema.optional(),
  include: DietaryRestrictionIncludeSchema.optional(),
  where: DietaryRestrictionWhereUniqueInputSchema,
}).strict() ;

export const DietaryRestrictionUpdateArgsSchema: z.ZodType<Prisma.DietaryRestrictionUpdateArgs> = z.object({
  select: DietaryRestrictionSelectSchema.optional(),
  include: DietaryRestrictionIncludeSchema.optional(),
  data: z.union([ DietaryRestrictionUpdateInputSchema,DietaryRestrictionUncheckedUpdateInputSchema ]),
  where: DietaryRestrictionWhereUniqueInputSchema,
}).strict() ;

export const DietaryRestrictionUpdateManyArgsSchema: z.ZodType<Prisma.DietaryRestrictionUpdateManyArgs> = z.object({
  data: z.union([ DietaryRestrictionUpdateManyMutationInputSchema,DietaryRestrictionUncheckedUpdateManyInputSchema ]),
  where: DietaryRestrictionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const DietaryRestrictionUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.DietaryRestrictionUpdateManyAndReturnArgs> = z.object({
  data: z.union([ DietaryRestrictionUpdateManyMutationInputSchema,DietaryRestrictionUncheckedUpdateManyInputSchema ]),
  where: DietaryRestrictionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const DietaryRestrictionDeleteManyArgsSchema: z.ZodType<Prisma.DietaryRestrictionDeleteManyArgs> = z.object({
  where: DietaryRestrictionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RecipeTagCreateArgsSchema: z.ZodType<Prisma.RecipeTagCreateArgs> = z.object({
  select: RecipeTagSelectSchema.optional(),
  include: RecipeTagIncludeSchema.optional(),
  data: z.union([ RecipeTagCreateInputSchema,RecipeTagUncheckedCreateInputSchema ]),
}).strict() ;

export const RecipeTagUpsertArgsSchema: z.ZodType<Prisma.RecipeTagUpsertArgs> = z.object({
  select: RecipeTagSelectSchema.optional(),
  include: RecipeTagIncludeSchema.optional(),
  where: RecipeTagWhereUniqueInputSchema,
  create: z.union([ RecipeTagCreateInputSchema,RecipeTagUncheckedCreateInputSchema ]),
  update: z.union([ RecipeTagUpdateInputSchema,RecipeTagUncheckedUpdateInputSchema ]),
}).strict() ;

export const RecipeTagCreateManyArgsSchema: z.ZodType<Prisma.RecipeTagCreateManyArgs> = z.object({
  data: z.union([ RecipeTagCreateManyInputSchema,RecipeTagCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const RecipeTagCreateManyAndReturnArgsSchema: z.ZodType<Prisma.RecipeTagCreateManyAndReturnArgs> = z.object({
  data: z.union([ RecipeTagCreateManyInputSchema,RecipeTagCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const RecipeTagDeleteArgsSchema: z.ZodType<Prisma.RecipeTagDeleteArgs> = z.object({
  select: RecipeTagSelectSchema.optional(),
  include: RecipeTagIncludeSchema.optional(),
  where: RecipeTagWhereUniqueInputSchema,
}).strict() ;

export const RecipeTagUpdateArgsSchema: z.ZodType<Prisma.RecipeTagUpdateArgs> = z.object({
  select: RecipeTagSelectSchema.optional(),
  include: RecipeTagIncludeSchema.optional(),
  data: z.union([ RecipeTagUpdateInputSchema,RecipeTagUncheckedUpdateInputSchema ]),
  where: RecipeTagWhereUniqueInputSchema,
}).strict() ;

export const RecipeTagUpdateManyArgsSchema: z.ZodType<Prisma.RecipeTagUpdateManyArgs> = z.object({
  data: z.union([ RecipeTagUpdateManyMutationInputSchema,RecipeTagUncheckedUpdateManyInputSchema ]),
  where: RecipeTagWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RecipeTagUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.RecipeTagUpdateManyAndReturnArgs> = z.object({
  data: z.union([ RecipeTagUpdateManyMutationInputSchema,RecipeTagUncheckedUpdateManyInputSchema ]),
  where: RecipeTagWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RecipeTagDeleteManyArgsSchema: z.ZodType<Prisma.RecipeTagDeleteManyArgs> = z.object({
  where: RecipeTagWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const LeftoverItemCreateArgsSchema: z.ZodType<Prisma.LeftoverItemCreateArgs> = z.object({
  select: LeftoverItemSelectSchema.optional(),
  include: LeftoverItemIncludeSchema.optional(),
  data: z.union([ LeftoverItemCreateInputSchema,LeftoverItemUncheckedCreateInputSchema ]),
}).strict() ;

export const LeftoverItemUpsertArgsSchema: z.ZodType<Prisma.LeftoverItemUpsertArgs> = z.object({
  select: LeftoverItemSelectSchema.optional(),
  include: LeftoverItemIncludeSchema.optional(),
  where: LeftoverItemWhereUniqueInputSchema,
  create: z.union([ LeftoverItemCreateInputSchema,LeftoverItemUncheckedCreateInputSchema ]),
  update: z.union([ LeftoverItemUpdateInputSchema,LeftoverItemUncheckedUpdateInputSchema ]),
}).strict() ;

export const LeftoverItemCreateManyArgsSchema: z.ZodType<Prisma.LeftoverItemCreateManyArgs> = z.object({
  data: z.union([ LeftoverItemCreateManyInputSchema,LeftoverItemCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const LeftoverItemCreateManyAndReturnArgsSchema: z.ZodType<Prisma.LeftoverItemCreateManyAndReturnArgs> = z.object({
  data: z.union([ LeftoverItemCreateManyInputSchema,LeftoverItemCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const LeftoverItemDeleteArgsSchema: z.ZodType<Prisma.LeftoverItemDeleteArgs> = z.object({
  select: LeftoverItemSelectSchema.optional(),
  include: LeftoverItemIncludeSchema.optional(),
  where: LeftoverItemWhereUniqueInputSchema,
}).strict() ;

export const LeftoverItemUpdateArgsSchema: z.ZodType<Prisma.LeftoverItemUpdateArgs> = z.object({
  select: LeftoverItemSelectSchema.optional(),
  include: LeftoverItemIncludeSchema.optional(),
  data: z.union([ LeftoverItemUpdateInputSchema,LeftoverItemUncheckedUpdateInputSchema ]),
  where: LeftoverItemWhereUniqueInputSchema,
}).strict() ;

export const LeftoverItemUpdateManyArgsSchema: z.ZodType<Prisma.LeftoverItemUpdateManyArgs> = z.object({
  data: z.union([ LeftoverItemUpdateManyMutationInputSchema,LeftoverItemUncheckedUpdateManyInputSchema ]),
  where: LeftoverItemWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const LeftoverItemUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.LeftoverItemUpdateManyAndReturnArgs> = z.object({
  data: z.union([ LeftoverItemUpdateManyMutationInputSchema,LeftoverItemUncheckedUpdateManyInputSchema ]),
  where: LeftoverItemWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const LeftoverItemDeleteManyArgsSchema: z.ZodType<Prisma.LeftoverItemDeleteManyArgs> = z.object({
  where: LeftoverItemWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const WasteRecordCreateArgsSchema: z.ZodType<Prisma.WasteRecordCreateArgs> = z.object({
  select: WasteRecordSelectSchema.optional(),
  include: WasteRecordIncludeSchema.optional(),
  data: z.union([ WasteRecordCreateInputSchema,WasteRecordUncheckedCreateInputSchema ]),
}).strict() ;

export const WasteRecordUpsertArgsSchema: z.ZodType<Prisma.WasteRecordUpsertArgs> = z.object({
  select: WasteRecordSelectSchema.optional(),
  include: WasteRecordIncludeSchema.optional(),
  where: WasteRecordWhereUniqueInputSchema,
  create: z.union([ WasteRecordCreateInputSchema,WasteRecordUncheckedCreateInputSchema ]),
  update: z.union([ WasteRecordUpdateInputSchema,WasteRecordUncheckedUpdateInputSchema ]),
}).strict() ;

export const WasteRecordCreateManyArgsSchema: z.ZodType<Prisma.WasteRecordCreateManyArgs> = z.object({
  data: z.union([ WasteRecordCreateManyInputSchema,WasteRecordCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const WasteRecordCreateManyAndReturnArgsSchema: z.ZodType<Prisma.WasteRecordCreateManyAndReturnArgs> = z.object({
  data: z.union([ WasteRecordCreateManyInputSchema,WasteRecordCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const WasteRecordDeleteArgsSchema: z.ZodType<Prisma.WasteRecordDeleteArgs> = z.object({
  select: WasteRecordSelectSchema.optional(),
  include: WasteRecordIncludeSchema.optional(),
  where: WasteRecordWhereUniqueInputSchema,
}).strict() ;

export const WasteRecordUpdateArgsSchema: z.ZodType<Prisma.WasteRecordUpdateArgs> = z.object({
  select: WasteRecordSelectSchema.optional(),
  include: WasteRecordIncludeSchema.optional(),
  data: z.union([ WasteRecordUpdateInputSchema,WasteRecordUncheckedUpdateInputSchema ]),
  where: WasteRecordWhereUniqueInputSchema,
}).strict() ;

export const WasteRecordUpdateManyArgsSchema: z.ZodType<Prisma.WasteRecordUpdateManyArgs> = z.object({
  data: z.union([ WasteRecordUpdateManyMutationInputSchema,WasteRecordUncheckedUpdateManyInputSchema ]),
  where: WasteRecordWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const WasteRecordUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.WasteRecordUpdateManyAndReturnArgs> = z.object({
  data: z.union([ WasteRecordUpdateManyMutationInputSchema,WasteRecordUncheckedUpdateManyInputSchema ]),
  where: WasteRecordWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const WasteRecordDeleteManyArgsSchema: z.ZodType<Prisma.WasteRecordDeleteManyArgs> = z.object({
  where: WasteRecordWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ProductionPlanCreateArgsSchema: z.ZodType<Prisma.ProductionPlanCreateArgs> = z.object({
  select: ProductionPlanSelectSchema.optional(),
  include: ProductionPlanIncludeSchema.optional(),
  data: z.union([ ProductionPlanCreateInputSchema,ProductionPlanUncheckedCreateInputSchema ]),
}).strict() ;

export const ProductionPlanUpsertArgsSchema: z.ZodType<Prisma.ProductionPlanUpsertArgs> = z.object({
  select: ProductionPlanSelectSchema.optional(),
  include: ProductionPlanIncludeSchema.optional(),
  where: ProductionPlanWhereUniqueInputSchema,
  create: z.union([ ProductionPlanCreateInputSchema,ProductionPlanUncheckedCreateInputSchema ]),
  update: z.union([ ProductionPlanUpdateInputSchema,ProductionPlanUncheckedUpdateInputSchema ]),
}).strict() ;

export const ProductionPlanCreateManyArgsSchema: z.ZodType<Prisma.ProductionPlanCreateManyArgs> = z.object({
  data: z.union([ ProductionPlanCreateManyInputSchema,ProductionPlanCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ProductionPlanCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ProductionPlanCreateManyAndReturnArgs> = z.object({
  data: z.union([ ProductionPlanCreateManyInputSchema,ProductionPlanCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ProductionPlanDeleteArgsSchema: z.ZodType<Prisma.ProductionPlanDeleteArgs> = z.object({
  select: ProductionPlanSelectSchema.optional(),
  include: ProductionPlanIncludeSchema.optional(),
  where: ProductionPlanWhereUniqueInputSchema,
}).strict() ;

export const ProductionPlanUpdateArgsSchema: z.ZodType<Prisma.ProductionPlanUpdateArgs> = z.object({
  select: ProductionPlanSelectSchema.optional(),
  include: ProductionPlanIncludeSchema.optional(),
  data: z.union([ ProductionPlanUpdateInputSchema,ProductionPlanUncheckedUpdateInputSchema ]),
  where: ProductionPlanWhereUniqueInputSchema,
}).strict() ;

export const ProductionPlanUpdateManyArgsSchema: z.ZodType<Prisma.ProductionPlanUpdateManyArgs> = z.object({
  data: z.union([ ProductionPlanUpdateManyMutationInputSchema,ProductionPlanUncheckedUpdateManyInputSchema ]),
  where: ProductionPlanWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ProductionPlanUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.ProductionPlanUpdateManyAndReturnArgs> = z.object({
  data: z.union([ ProductionPlanUpdateManyMutationInputSchema,ProductionPlanUncheckedUpdateManyInputSchema ]),
  where: ProductionPlanWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ProductionPlanDeleteManyArgsSchema: z.ZodType<Prisma.ProductionPlanDeleteManyArgs> = z.object({
  where: ProductionPlanWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ProductionPlanItemCreateArgsSchema: z.ZodType<Prisma.ProductionPlanItemCreateArgs> = z.object({
  select: ProductionPlanItemSelectSchema.optional(),
  include: ProductionPlanItemIncludeSchema.optional(),
  data: z.union([ ProductionPlanItemCreateInputSchema,ProductionPlanItemUncheckedCreateInputSchema ]),
}).strict() ;

export const ProductionPlanItemUpsertArgsSchema: z.ZodType<Prisma.ProductionPlanItemUpsertArgs> = z.object({
  select: ProductionPlanItemSelectSchema.optional(),
  include: ProductionPlanItemIncludeSchema.optional(),
  where: ProductionPlanItemWhereUniqueInputSchema,
  create: z.union([ ProductionPlanItemCreateInputSchema,ProductionPlanItemUncheckedCreateInputSchema ]),
  update: z.union([ ProductionPlanItemUpdateInputSchema,ProductionPlanItemUncheckedUpdateInputSchema ]),
}).strict() ;

export const ProductionPlanItemCreateManyArgsSchema: z.ZodType<Prisma.ProductionPlanItemCreateManyArgs> = z.object({
  data: z.union([ ProductionPlanItemCreateManyInputSchema,ProductionPlanItemCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ProductionPlanItemCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ProductionPlanItemCreateManyAndReturnArgs> = z.object({
  data: z.union([ ProductionPlanItemCreateManyInputSchema,ProductionPlanItemCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ProductionPlanItemDeleteArgsSchema: z.ZodType<Prisma.ProductionPlanItemDeleteArgs> = z.object({
  select: ProductionPlanItemSelectSchema.optional(),
  include: ProductionPlanItemIncludeSchema.optional(),
  where: ProductionPlanItemWhereUniqueInputSchema,
}).strict() ;

export const ProductionPlanItemUpdateArgsSchema: z.ZodType<Prisma.ProductionPlanItemUpdateArgs> = z.object({
  select: ProductionPlanItemSelectSchema.optional(),
  include: ProductionPlanItemIncludeSchema.optional(),
  data: z.union([ ProductionPlanItemUpdateInputSchema,ProductionPlanItemUncheckedUpdateInputSchema ]),
  where: ProductionPlanItemWhereUniqueInputSchema,
}).strict() ;

export const ProductionPlanItemUpdateManyArgsSchema: z.ZodType<Prisma.ProductionPlanItemUpdateManyArgs> = z.object({
  data: z.union([ ProductionPlanItemUpdateManyMutationInputSchema,ProductionPlanItemUncheckedUpdateManyInputSchema ]),
  where: ProductionPlanItemWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ProductionPlanItemUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.ProductionPlanItemUpdateManyAndReturnArgs> = z.object({
  data: z.union([ ProductionPlanItemUpdateManyMutationInputSchema,ProductionPlanItemUncheckedUpdateManyInputSchema ]),
  where: ProductionPlanItemWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ProductionPlanItemDeleteManyArgsSchema: z.ZodType<Prisma.ProductionPlanItemDeleteManyArgs> = z.object({
  where: ProductionPlanItemWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ShiftTaskCreateArgsSchema: z.ZodType<Prisma.ShiftTaskCreateArgs> = z.object({
  select: ShiftTaskSelectSchema.optional(),
  include: ShiftTaskIncludeSchema.optional(),
  data: z.union([ ShiftTaskCreateInputSchema,ShiftTaskUncheckedCreateInputSchema ]),
}).strict() ;

export const ShiftTaskUpsertArgsSchema: z.ZodType<Prisma.ShiftTaskUpsertArgs> = z.object({
  select: ShiftTaskSelectSchema.optional(),
  include: ShiftTaskIncludeSchema.optional(),
  where: ShiftTaskWhereUniqueInputSchema,
  create: z.union([ ShiftTaskCreateInputSchema,ShiftTaskUncheckedCreateInputSchema ]),
  update: z.union([ ShiftTaskUpdateInputSchema,ShiftTaskUncheckedUpdateInputSchema ]),
}).strict() ;

export const ShiftTaskCreateManyArgsSchema: z.ZodType<Prisma.ShiftTaskCreateManyArgs> = z.object({
  data: z.union([ ShiftTaskCreateManyInputSchema,ShiftTaskCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ShiftTaskCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ShiftTaskCreateManyAndReturnArgs> = z.object({
  data: z.union([ ShiftTaskCreateManyInputSchema,ShiftTaskCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ShiftTaskDeleteArgsSchema: z.ZodType<Prisma.ShiftTaskDeleteArgs> = z.object({
  select: ShiftTaskSelectSchema.optional(),
  include: ShiftTaskIncludeSchema.optional(),
  where: ShiftTaskWhereUniqueInputSchema,
}).strict() ;

export const ShiftTaskUpdateArgsSchema: z.ZodType<Prisma.ShiftTaskUpdateArgs> = z.object({
  select: ShiftTaskSelectSchema.optional(),
  include: ShiftTaskIncludeSchema.optional(),
  data: z.union([ ShiftTaskUpdateInputSchema,ShiftTaskUncheckedUpdateInputSchema ]),
  where: ShiftTaskWhereUniqueInputSchema,
}).strict() ;

export const ShiftTaskUpdateManyArgsSchema: z.ZodType<Prisma.ShiftTaskUpdateManyArgs> = z.object({
  data: z.union([ ShiftTaskUpdateManyMutationInputSchema,ShiftTaskUncheckedUpdateManyInputSchema ]),
  where: ShiftTaskWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ShiftTaskUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.ShiftTaskUpdateManyAndReturnArgs> = z.object({
  data: z.union([ ShiftTaskUpdateManyMutationInputSchema,ShiftTaskUncheckedUpdateManyInputSchema ]),
  where: ShiftTaskWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ShiftTaskDeleteManyArgsSchema: z.ZodType<Prisma.ShiftTaskDeleteManyArgs> = z.object({
  where: ShiftTaskWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const AvailabilityCreateArgsSchema: z.ZodType<Prisma.AvailabilityCreateArgs> = z.object({
  select: AvailabilitySelectSchema.optional(),
  include: AvailabilityIncludeSchema.optional(),
  data: z.union([ AvailabilityCreateInputSchema,AvailabilityUncheckedCreateInputSchema ]),
}).strict() ;

export const AvailabilityUpsertArgsSchema: z.ZodType<Prisma.AvailabilityUpsertArgs> = z.object({
  select: AvailabilitySelectSchema.optional(),
  include: AvailabilityIncludeSchema.optional(),
  where: AvailabilityWhereUniqueInputSchema,
  create: z.union([ AvailabilityCreateInputSchema,AvailabilityUncheckedCreateInputSchema ]),
  update: z.union([ AvailabilityUpdateInputSchema,AvailabilityUncheckedUpdateInputSchema ]),
}).strict() ;

export const AvailabilityCreateManyArgsSchema: z.ZodType<Prisma.AvailabilityCreateManyArgs> = z.object({
  data: z.union([ AvailabilityCreateManyInputSchema,AvailabilityCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AvailabilityCreateManyAndReturnArgsSchema: z.ZodType<Prisma.AvailabilityCreateManyAndReturnArgs> = z.object({
  data: z.union([ AvailabilityCreateManyInputSchema,AvailabilityCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AvailabilityDeleteArgsSchema: z.ZodType<Prisma.AvailabilityDeleteArgs> = z.object({
  select: AvailabilitySelectSchema.optional(),
  include: AvailabilityIncludeSchema.optional(),
  where: AvailabilityWhereUniqueInputSchema,
}).strict() ;

export const AvailabilityUpdateArgsSchema: z.ZodType<Prisma.AvailabilityUpdateArgs> = z.object({
  select: AvailabilitySelectSchema.optional(),
  include: AvailabilityIncludeSchema.optional(),
  data: z.union([ AvailabilityUpdateInputSchema,AvailabilityUncheckedUpdateInputSchema ]),
  where: AvailabilityWhereUniqueInputSchema,
}).strict() ;

export const AvailabilityUpdateManyArgsSchema: z.ZodType<Prisma.AvailabilityUpdateManyArgs> = z.object({
  data: z.union([ AvailabilityUpdateManyMutationInputSchema,AvailabilityUncheckedUpdateManyInputSchema ]),
  where: AvailabilityWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const AvailabilityUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.AvailabilityUpdateManyAndReturnArgs> = z.object({
  data: z.union([ AvailabilityUpdateManyMutationInputSchema,AvailabilityUncheckedUpdateManyInputSchema ]),
  where: AvailabilityWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const AvailabilityDeleteManyArgsSchema: z.ZodType<Prisma.AvailabilityDeleteManyArgs> = z.object({
  where: AvailabilityWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const SchedulingConstraintCreateArgsSchema: z.ZodType<Prisma.SchedulingConstraintCreateArgs> = z.object({
  select: SchedulingConstraintSelectSchema.optional(),
  include: SchedulingConstraintIncludeSchema.optional(),
  data: z.union([ SchedulingConstraintCreateInputSchema,SchedulingConstraintUncheckedCreateInputSchema ]),
}).strict() ;

export const SchedulingConstraintUpsertArgsSchema: z.ZodType<Prisma.SchedulingConstraintUpsertArgs> = z.object({
  select: SchedulingConstraintSelectSchema.optional(),
  include: SchedulingConstraintIncludeSchema.optional(),
  where: SchedulingConstraintWhereUniqueInputSchema,
  create: z.union([ SchedulingConstraintCreateInputSchema,SchedulingConstraintUncheckedCreateInputSchema ]),
  update: z.union([ SchedulingConstraintUpdateInputSchema,SchedulingConstraintUncheckedUpdateInputSchema ]),
}).strict() ;

export const SchedulingConstraintCreateManyArgsSchema: z.ZodType<Prisma.SchedulingConstraintCreateManyArgs> = z.object({
  data: z.union([ SchedulingConstraintCreateManyInputSchema,SchedulingConstraintCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const SchedulingConstraintCreateManyAndReturnArgsSchema: z.ZodType<Prisma.SchedulingConstraintCreateManyAndReturnArgs> = z.object({
  data: z.union([ SchedulingConstraintCreateManyInputSchema,SchedulingConstraintCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const SchedulingConstraintDeleteArgsSchema: z.ZodType<Prisma.SchedulingConstraintDeleteArgs> = z.object({
  select: SchedulingConstraintSelectSchema.optional(),
  include: SchedulingConstraintIncludeSchema.optional(),
  where: SchedulingConstraintWhereUniqueInputSchema,
}).strict() ;

export const SchedulingConstraintUpdateArgsSchema: z.ZodType<Prisma.SchedulingConstraintUpdateArgs> = z.object({
  select: SchedulingConstraintSelectSchema.optional(),
  include: SchedulingConstraintIncludeSchema.optional(),
  data: z.union([ SchedulingConstraintUpdateInputSchema,SchedulingConstraintUncheckedUpdateInputSchema ]),
  where: SchedulingConstraintWhereUniqueInputSchema,
}).strict() ;

export const SchedulingConstraintUpdateManyArgsSchema: z.ZodType<Prisma.SchedulingConstraintUpdateManyArgs> = z.object({
  data: z.union([ SchedulingConstraintUpdateManyMutationInputSchema,SchedulingConstraintUncheckedUpdateManyInputSchema ]),
  where: SchedulingConstraintWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const SchedulingConstraintUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.SchedulingConstraintUpdateManyAndReturnArgs> = z.object({
  data: z.union([ SchedulingConstraintUpdateManyMutationInputSchema,SchedulingConstraintUncheckedUpdateManyInputSchema ]),
  where: SchedulingConstraintWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const SchedulingConstraintDeleteManyArgsSchema: z.ZodType<Prisma.SchedulingConstraintDeleteManyArgs> = z.object({
  where: SchedulingConstraintWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const InventoryWithdrawalCreateArgsSchema: z.ZodType<Prisma.InventoryWithdrawalCreateArgs> = z.object({
  select: InventoryWithdrawalSelectSchema.optional(),
  include: InventoryWithdrawalIncludeSchema.optional(),
  data: z.union([ InventoryWithdrawalCreateInputSchema,InventoryWithdrawalUncheckedCreateInputSchema ]),
}).strict() ;

export const InventoryWithdrawalUpsertArgsSchema: z.ZodType<Prisma.InventoryWithdrawalUpsertArgs> = z.object({
  select: InventoryWithdrawalSelectSchema.optional(),
  include: InventoryWithdrawalIncludeSchema.optional(),
  where: InventoryWithdrawalWhereUniqueInputSchema,
  create: z.union([ InventoryWithdrawalCreateInputSchema,InventoryWithdrawalUncheckedCreateInputSchema ]),
  update: z.union([ InventoryWithdrawalUpdateInputSchema,InventoryWithdrawalUncheckedUpdateInputSchema ]),
}).strict() ;

export const InventoryWithdrawalCreateManyArgsSchema: z.ZodType<Prisma.InventoryWithdrawalCreateManyArgs> = z.object({
  data: z.union([ InventoryWithdrawalCreateManyInputSchema,InventoryWithdrawalCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const InventoryWithdrawalCreateManyAndReturnArgsSchema: z.ZodType<Prisma.InventoryWithdrawalCreateManyAndReturnArgs> = z.object({
  data: z.union([ InventoryWithdrawalCreateManyInputSchema,InventoryWithdrawalCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const InventoryWithdrawalDeleteArgsSchema: z.ZodType<Prisma.InventoryWithdrawalDeleteArgs> = z.object({
  select: InventoryWithdrawalSelectSchema.optional(),
  include: InventoryWithdrawalIncludeSchema.optional(),
  where: InventoryWithdrawalWhereUniqueInputSchema,
}).strict() ;

export const InventoryWithdrawalUpdateArgsSchema: z.ZodType<Prisma.InventoryWithdrawalUpdateArgs> = z.object({
  select: InventoryWithdrawalSelectSchema.optional(),
  include: InventoryWithdrawalIncludeSchema.optional(),
  data: z.union([ InventoryWithdrawalUpdateInputSchema,InventoryWithdrawalUncheckedUpdateInputSchema ]),
  where: InventoryWithdrawalWhereUniqueInputSchema,
}).strict() ;

export const InventoryWithdrawalUpdateManyArgsSchema: z.ZodType<Prisma.InventoryWithdrawalUpdateManyArgs> = z.object({
  data: z.union([ InventoryWithdrawalUpdateManyMutationInputSchema,InventoryWithdrawalUncheckedUpdateManyInputSchema ]),
  where: InventoryWithdrawalWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const InventoryWithdrawalUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.InventoryWithdrawalUpdateManyAndReturnArgs> = z.object({
  data: z.union([ InventoryWithdrawalUpdateManyMutationInputSchema,InventoryWithdrawalUncheckedUpdateManyInputSchema ]),
  where: InventoryWithdrawalWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const InventoryWithdrawalDeleteManyArgsSchema: z.ZodType<Prisma.InventoryWithdrawalDeleteManyArgs> = z.object({
  where: InventoryWithdrawalWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const AllergenCreateArgsSchema: z.ZodType<Prisma.AllergenCreateArgs> = z.object({
  select: AllergenSelectSchema.optional(),
  include: AllergenIncludeSchema.optional(),
  data: z.union([ AllergenCreateInputSchema,AllergenUncheckedCreateInputSchema ]),
}).strict() ;

export const AllergenUpsertArgsSchema: z.ZodType<Prisma.AllergenUpsertArgs> = z.object({
  select: AllergenSelectSchema.optional(),
  include: AllergenIncludeSchema.optional(),
  where: AllergenWhereUniqueInputSchema,
  create: z.union([ AllergenCreateInputSchema,AllergenUncheckedCreateInputSchema ]),
  update: z.union([ AllergenUpdateInputSchema,AllergenUncheckedUpdateInputSchema ]),
}).strict() ;

export const AllergenCreateManyArgsSchema: z.ZodType<Prisma.AllergenCreateManyArgs> = z.object({
  data: z.union([ AllergenCreateManyInputSchema,AllergenCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AllergenCreateManyAndReturnArgsSchema: z.ZodType<Prisma.AllergenCreateManyAndReturnArgs> = z.object({
  data: z.union([ AllergenCreateManyInputSchema,AllergenCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AllergenDeleteArgsSchema: z.ZodType<Prisma.AllergenDeleteArgs> = z.object({
  select: AllergenSelectSchema.optional(),
  include: AllergenIncludeSchema.optional(),
  where: AllergenWhereUniqueInputSchema,
}).strict() ;

export const AllergenUpdateArgsSchema: z.ZodType<Prisma.AllergenUpdateArgs> = z.object({
  select: AllergenSelectSchema.optional(),
  include: AllergenIncludeSchema.optional(),
  data: z.union([ AllergenUpdateInputSchema,AllergenUncheckedUpdateInputSchema ]),
  where: AllergenWhereUniqueInputSchema,
}).strict() ;

export const AllergenUpdateManyArgsSchema: z.ZodType<Prisma.AllergenUpdateManyArgs> = z.object({
  data: z.union([ AllergenUpdateManyMutationInputSchema,AllergenUncheckedUpdateManyInputSchema ]),
  where: AllergenWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const AllergenUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.AllergenUpdateManyAndReturnArgs> = z.object({
  data: z.union([ AllergenUpdateManyMutationInputSchema,AllergenUncheckedUpdateManyInputSchema ]),
  where: AllergenWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const AllergenDeleteManyArgsSchema: z.ZodType<Prisma.AllergenDeleteManyArgs> = z.object({
  where: AllergenWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const IngredientAllergenCreateArgsSchema: z.ZodType<Prisma.IngredientAllergenCreateArgs> = z.object({
  select: IngredientAllergenSelectSchema.optional(),
  include: IngredientAllergenIncludeSchema.optional(),
  data: z.union([ IngredientAllergenCreateInputSchema,IngredientAllergenUncheckedCreateInputSchema ]),
}).strict() ;

export const IngredientAllergenUpsertArgsSchema: z.ZodType<Prisma.IngredientAllergenUpsertArgs> = z.object({
  select: IngredientAllergenSelectSchema.optional(),
  include: IngredientAllergenIncludeSchema.optional(),
  where: IngredientAllergenWhereUniqueInputSchema,
  create: z.union([ IngredientAllergenCreateInputSchema,IngredientAllergenUncheckedCreateInputSchema ]),
  update: z.union([ IngredientAllergenUpdateInputSchema,IngredientAllergenUncheckedUpdateInputSchema ]),
}).strict() ;

export const IngredientAllergenCreateManyArgsSchema: z.ZodType<Prisma.IngredientAllergenCreateManyArgs> = z.object({
  data: z.union([ IngredientAllergenCreateManyInputSchema,IngredientAllergenCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const IngredientAllergenCreateManyAndReturnArgsSchema: z.ZodType<Prisma.IngredientAllergenCreateManyAndReturnArgs> = z.object({
  data: z.union([ IngredientAllergenCreateManyInputSchema,IngredientAllergenCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const IngredientAllergenDeleteArgsSchema: z.ZodType<Prisma.IngredientAllergenDeleteArgs> = z.object({
  select: IngredientAllergenSelectSchema.optional(),
  include: IngredientAllergenIncludeSchema.optional(),
  where: IngredientAllergenWhereUniqueInputSchema,
}).strict() ;

export const IngredientAllergenUpdateArgsSchema: z.ZodType<Prisma.IngredientAllergenUpdateArgs> = z.object({
  select: IngredientAllergenSelectSchema.optional(),
  include: IngredientAllergenIncludeSchema.optional(),
  data: z.union([ IngredientAllergenUpdateInputSchema,IngredientAllergenUncheckedUpdateInputSchema ]),
  where: IngredientAllergenWhereUniqueInputSchema,
}).strict() ;

export const IngredientAllergenUpdateManyArgsSchema: z.ZodType<Prisma.IngredientAllergenUpdateManyArgs> = z.object({
  data: z.union([ IngredientAllergenUpdateManyMutationInputSchema,IngredientAllergenUncheckedUpdateManyInputSchema ]),
  where: IngredientAllergenWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const IngredientAllergenUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.IngredientAllergenUpdateManyAndReturnArgs> = z.object({
  data: z.union([ IngredientAllergenUpdateManyMutationInputSchema,IngredientAllergenUncheckedUpdateManyInputSchema ]),
  where: IngredientAllergenWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const IngredientAllergenDeleteManyArgsSchema: z.ZodType<Prisma.IngredientAllergenDeleteManyArgs> = z.object({
  where: IngredientAllergenWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const NutritionalRecommendationCreateArgsSchema: z.ZodType<Prisma.NutritionalRecommendationCreateArgs> = z.object({
  select: NutritionalRecommendationSelectSchema.optional(),
  include: NutritionalRecommendationIncludeSchema.optional(),
  data: z.union([ NutritionalRecommendationCreateInputSchema,NutritionalRecommendationUncheckedCreateInputSchema ]),
}).strict() ;

export const NutritionalRecommendationUpsertArgsSchema: z.ZodType<Prisma.NutritionalRecommendationUpsertArgs> = z.object({
  select: NutritionalRecommendationSelectSchema.optional(),
  include: NutritionalRecommendationIncludeSchema.optional(),
  where: NutritionalRecommendationWhereUniqueInputSchema,
  create: z.union([ NutritionalRecommendationCreateInputSchema,NutritionalRecommendationUncheckedCreateInputSchema ]),
  update: z.union([ NutritionalRecommendationUpdateInputSchema,NutritionalRecommendationUncheckedUpdateInputSchema ]),
}).strict() ;

export const NutritionalRecommendationCreateManyArgsSchema: z.ZodType<Prisma.NutritionalRecommendationCreateManyArgs> = z.object({
  data: z.union([ NutritionalRecommendationCreateManyInputSchema,NutritionalRecommendationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const NutritionalRecommendationCreateManyAndReturnArgsSchema: z.ZodType<Prisma.NutritionalRecommendationCreateManyAndReturnArgs> = z.object({
  data: z.union([ NutritionalRecommendationCreateManyInputSchema,NutritionalRecommendationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const NutritionalRecommendationDeleteArgsSchema: z.ZodType<Prisma.NutritionalRecommendationDeleteArgs> = z.object({
  select: NutritionalRecommendationSelectSchema.optional(),
  include: NutritionalRecommendationIncludeSchema.optional(),
  where: NutritionalRecommendationWhereUniqueInputSchema,
}).strict() ;

export const NutritionalRecommendationUpdateArgsSchema: z.ZodType<Prisma.NutritionalRecommendationUpdateArgs> = z.object({
  select: NutritionalRecommendationSelectSchema.optional(),
  include: NutritionalRecommendationIncludeSchema.optional(),
  data: z.union([ NutritionalRecommendationUpdateInputSchema,NutritionalRecommendationUncheckedUpdateInputSchema ]),
  where: NutritionalRecommendationWhereUniqueInputSchema,
}).strict() ;

export const NutritionalRecommendationUpdateManyArgsSchema: z.ZodType<Prisma.NutritionalRecommendationUpdateManyArgs> = z.object({
  data: z.union([ NutritionalRecommendationUpdateManyMutationInputSchema,NutritionalRecommendationUncheckedUpdateManyInputSchema ]),
  where: NutritionalRecommendationWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const NutritionalRecommendationUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.NutritionalRecommendationUpdateManyAndReturnArgs> = z.object({
  data: z.union([ NutritionalRecommendationUpdateManyMutationInputSchema,NutritionalRecommendationUncheckedUpdateManyInputSchema ]),
  where: NutritionalRecommendationWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const NutritionalRecommendationDeleteManyArgsSchema: z.ZodType<Prisma.NutritionalRecommendationDeleteManyArgs> = z.object({
  where: NutritionalRecommendationWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const EarlyAccessCreateArgsSchema: z.ZodType<Prisma.EarlyAccessCreateArgs> = z.object({
  select: EarlyAccessSelectSchema.optional(),
  data: z.union([ EarlyAccessCreateInputSchema,EarlyAccessUncheckedCreateInputSchema ]),
}).strict() ;

export const EarlyAccessUpsertArgsSchema: z.ZodType<Prisma.EarlyAccessUpsertArgs> = z.object({
  select: EarlyAccessSelectSchema.optional(),
  where: EarlyAccessWhereUniqueInputSchema,
  create: z.union([ EarlyAccessCreateInputSchema,EarlyAccessUncheckedCreateInputSchema ]),
  update: z.union([ EarlyAccessUpdateInputSchema,EarlyAccessUncheckedUpdateInputSchema ]),
}).strict() ;

export const EarlyAccessCreateManyArgsSchema: z.ZodType<Prisma.EarlyAccessCreateManyArgs> = z.object({
  data: z.union([ EarlyAccessCreateManyInputSchema,EarlyAccessCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const EarlyAccessCreateManyAndReturnArgsSchema: z.ZodType<Prisma.EarlyAccessCreateManyAndReturnArgs> = z.object({
  data: z.union([ EarlyAccessCreateManyInputSchema,EarlyAccessCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const EarlyAccessDeleteArgsSchema: z.ZodType<Prisma.EarlyAccessDeleteArgs> = z.object({
  select: EarlyAccessSelectSchema.optional(),
  where: EarlyAccessWhereUniqueInputSchema,
}).strict() ;

export const EarlyAccessUpdateArgsSchema: z.ZodType<Prisma.EarlyAccessUpdateArgs> = z.object({
  select: EarlyAccessSelectSchema.optional(),
  data: z.union([ EarlyAccessUpdateInputSchema,EarlyAccessUncheckedUpdateInputSchema ]),
  where: EarlyAccessWhereUniqueInputSchema,
}).strict() ;

export const EarlyAccessUpdateManyArgsSchema: z.ZodType<Prisma.EarlyAccessUpdateManyArgs> = z.object({
  data: z.union([ EarlyAccessUpdateManyMutationInputSchema,EarlyAccessUncheckedUpdateManyInputSchema ]),
  where: EarlyAccessWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const EarlyAccessUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.EarlyAccessUpdateManyAndReturnArgs> = z.object({
  data: z.union([ EarlyAccessUpdateManyMutationInputSchema,EarlyAccessUncheckedUpdateManyInputSchema ]),
  where: EarlyAccessWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const EarlyAccessDeleteManyArgsSchema: z.ZodType<Prisma.EarlyAccessDeleteManyArgs> = z.object({
  where: EarlyAccessWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const OrganizationCreateArgsSchema: z.ZodType<Prisma.OrganizationCreateArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  data: z.union([ OrganizationCreateInputSchema,OrganizationUncheckedCreateInputSchema ]),
}).strict() ;

export const OrganizationUpsertArgsSchema: z.ZodType<Prisma.OrganizationUpsertArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereUniqueInputSchema,
  create: z.union([ OrganizationCreateInputSchema,OrganizationUncheckedCreateInputSchema ]),
  update: z.union([ OrganizationUpdateInputSchema,OrganizationUncheckedUpdateInputSchema ]),
}).strict() ;

export const OrganizationCreateManyArgsSchema: z.ZodType<Prisma.OrganizationCreateManyArgs> = z.object({
  data: z.union([ OrganizationCreateManyInputSchema,OrganizationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const OrganizationCreateManyAndReturnArgsSchema: z.ZodType<Prisma.OrganizationCreateManyAndReturnArgs> = z.object({
  data: z.union([ OrganizationCreateManyInputSchema,OrganizationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const OrganizationDeleteArgsSchema: z.ZodType<Prisma.OrganizationDeleteArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereUniqueInputSchema,
}).strict() ;

export const OrganizationUpdateArgsSchema: z.ZodType<Prisma.OrganizationUpdateArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  data: z.union([ OrganizationUpdateInputSchema,OrganizationUncheckedUpdateInputSchema ]),
  where: OrganizationWhereUniqueInputSchema,
}).strict() ;

export const OrganizationUpdateManyArgsSchema: z.ZodType<Prisma.OrganizationUpdateManyArgs> = z.object({
  data: z.union([ OrganizationUpdateManyMutationInputSchema,OrganizationUncheckedUpdateManyInputSchema ]),
  where: OrganizationWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const OrganizationUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.OrganizationUpdateManyAndReturnArgs> = z.object({
  data: z.union([ OrganizationUpdateManyMutationInputSchema,OrganizationUncheckedUpdateManyInputSchema ]),
  where: OrganizationWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const OrganizationDeleteManyArgsSchema: z.ZodType<Prisma.OrganizationDeleteManyArgs> = z.object({
  where: OrganizationWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const InventoryCreateArgsSchema: z.ZodType<Prisma.InventoryCreateArgs> = z.object({
  select: InventorySelectSchema.optional(),
  include: InventoryIncludeSchema.optional(),
  data: z.union([ InventoryCreateInputSchema,InventoryUncheckedCreateInputSchema ]),
}).strict() ;

export const InventoryUpsertArgsSchema: z.ZodType<Prisma.InventoryUpsertArgs> = z.object({
  select: InventorySelectSchema.optional(),
  include: InventoryIncludeSchema.optional(),
  where: InventoryWhereUniqueInputSchema,
  create: z.union([ InventoryCreateInputSchema,InventoryUncheckedCreateInputSchema ]),
  update: z.union([ InventoryUpdateInputSchema,InventoryUncheckedUpdateInputSchema ]),
}).strict() ;

export const InventoryCreateManyArgsSchema: z.ZodType<Prisma.InventoryCreateManyArgs> = z.object({
  data: z.union([ InventoryCreateManyInputSchema,InventoryCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const InventoryCreateManyAndReturnArgsSchema: z.ZodType<Prisma.InventoryCreateManyAndReturnArgs> = z.object({
  data: z.union([ InventoryCreateManyInputSchema,InventoryCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const InventoryDeleteArgsSchema: z.ZodType<Prisma.InventoryDeleteArgs> = z.object({
  select: InventorySelectSchema.optional(),
  include: InventoryIncludeSchema.optional(),
  where: InventoryWhereUniqueInputSchema,
}).strict() ;

export const InventoryUpdateArgsSchema: z.ZodType<Prisma.InventoryUpdateArgs> = z.object({
  select: InventorySelectSchema.optional(),
  include: InventoryIncludeSchema.optional(),
  data: z.union([ InventoryUpdateInputSchema,InventoryUncheckedUpdateInputSchema ]),
  where: InventoryWhereUniqueInputSchema,
}).strict() ;

export const InventoryUpdateManyArgsSchema: z.ZodType<Prisma.InventoryUpdateManyArgs> = z.object({
  data: z.union([ InventoryUpdateManyMutationInputSchema,InventoryUncheckedUpdateManyInputSchema ]),
  where: InventoryWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const InventoryUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.InventoryUpdateManyAndReturnArgs> = z.object({
  data: z.union([ InventoryUpdateManyMutationInputSchema,InventoryUncheckedUpdateManyInputSchema ]),
  where: InventoryWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const InventoryDeleteManyArgsSchema: z.ZodType<Prisma.InventoryDeleteManyArgs> = z.object({
  where: InventoryWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RestaurantCreateArgsSchema: z.ZodType<Prisma.RestaurantCreateArgs> = z.object({
  select: RestaurantSelectSchema.optional(),
  include: RestaurantIncludeSchema.optional(),
  data: z.union([ RestaurantCreateInputSchema,RestaurantUncheckedCreateInputSchema ]),
}).strict() ;

export const RestaurantUpsertArgsSchema: z.ZodType<Prisma.RestaurantUpsertArgs> = z.object({
  select: RestaurantSelectSchema.optional(),
  include: RestaurantIncludeSchema.optional(),
  where: RestaurantWhereUniqueInputSchema,
  create: z.union([ RestaurantCreateInputSchema,RestaurantUncheckedCreateInputSchema ]),
  update: z.union([ RestaurantUpdateInputSchema,RestaurantUncheckedUpdateInputSchema ]),
}).strict() ;

export const RestaurantCreateManyArgsSchema: z.ZodType<Prisma.RestaurantCreateManyArgs> = z.object({
  data: z.union([ RestaurantCreateManyInputSchema,RestaurantCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const RestaurantCreateManyAndReturnArgsSchema: z.ZodType<Prisma.RestaurantCreateManyAndReturnArgs> = z.object({
  data: z.union([ RestaurantCreateManyInputSchema,RestaurantCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const RestaurantDeleteArgsSchema: z.ZodType<Prisma.RestaurantDeleteArgs> = z.object({
  select: RestaurantSelectSchema.optional(),
  include: RestaurantIncludeSchema.optional(),
  where: RestaurantWhereUniqueInputSchema,
}).strict() ;

export const RestaurantUpdateArgsSchema: z.ZodType<Prisma.RestaurantUpdateArgs> = z.object({
  select: RestaurantSelectSchema.optional(),
  include: RestaurantIncludeSchema.optional(),
  data: z.union([ RestaurantUpdateInputSchema,RestaurantUncheckedUpdateInputSchema ]),
  where: RestaurantWhereUniqueInputSchema,
}).strict() ;

export const RestaurantUpdateManyArgsSchema: z.ZodType<Prisma.RestaurantUpdateManyArgs> = z.object({
  data: z.union([ RestaurantUpdateManyMutationInputSchema,RestaurantUncheckedUpdateManyInputSchema ]),
  where: RestaurantWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RestaurantUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.RestaurantUpdateManyAndReturnArgs> = z.object({
  data: z.union([ RestaurantUpdateManyMutationInputSchema,RestaurantUncheckedUpdateManyInputSchema ]),
  where: RestaurantWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RestaurantDeleteManyArgsSchema: z.ZodType<Prisma.RestaurantDeleteManyArgs> = z.object({
  where: RestaurantWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const UserCreateArgsSchema: z.ZodType<Prisma.UserCreateArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  data: z.union([ UserCreateInputSchema,UserUncheckedCreateInputSchema ]),
}).strict() ;

export const UserUpsertArgsSchema: z.ZodType<Prisma.UserUpsertArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
  create: z.union([ UserCreateInputSchema,UserUncheckedCreateInputSchema ]),
  update: z.union([ UserUpdateInputSchema,UserUncheckedUpdateInputSchema ]),
}).strict() ;

export const UserCreateManyArgsSchema: z.ZodType<Prisma.UserCreateManyArgs> = z.object({
  data: z.union([ UserCreateManyInputSchema,UserCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const UserCreateManyAndReturnArgsSchema: z.ZodType<Prisma.UserCreateManyAndReturnArgs> = z.object({
  data: z.union([ UserCreateManyInputSchema,UserCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const UserDeleteArgsSchema: z.ZodType<Prisma.UserDeleteArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const UserUpdateArgsSchema: z.ZodType<Prisma.UserUpdateArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  data: z.union([ UserUpdateInputSchema,UserUncheckedUpdateInputSchema ]),
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const UserUpdateManyArgsSchema: z.ZodType<Prisma.UserUpdateManyArgs> = z.object({
  data: z.union([ UserUpdateManyMutationInputSchema,UserUncheckedUpdateManyInputSchema ]),
  where: UserWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const UserUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.UserUpdateManyAndReturnArgs> = z.object({
  data: z.union([ UserUpdateManyMutationInputSchema,UserUncheckedUpdateManyInputSchema ]),
  where: UserWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const UserDeleteManyArgsSchema: z.ZodType<Prisma.UserDeleteManyArgs> = z.object({
  where: UserWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const SessionCreateArgsSchema: z.ZodType<Prisma.SessionCreateArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  data: z.union([ SessionCreateInputSchema,SessionUncheckedCreateInputSchema ]),
}).strict() ;

export const SessionUpsertArgsSchema: z.ZodType<Prisma.SessionUpsertArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereUniqueInputSchema,
  create: z.union([ SessionCreateInputSchema,SessionUncheckedCreateInputSchema ]),
  update: z.union([ SessionUpdateInputSchema,SessionUncheckedUpdateInputSchema ]),
}).strict() ;

export const SessionCreateManyArgsSchema: z.ZodType<Prisma.SessionCreateManyArgs> = z.object({
  data: z.union([ SessionCreateManyInputSchema,SessionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const SessionCreateManyAndReturnArgsSchema: z.ZodType<Prisma.SessionCreateManyAndReturnArgs> = z.object({
  data: z.union([ SessionCreateManyInputSchema,SessionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const SessionDeleteArgsSchema: z.ZodType<Prisma.SessionDeleteArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereUniqueInputSchema,
}).strict() ;

export const SessionUpdateArgsSchema: z.ZodType<Prisma.SessionUpdateArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  data: z.union([ SessionUpdateInputSchema,SessionUncheckedUpdateInputSchema ]),
  where: SessionWhereUniqueInputSchema,
}).strict() ;

export const SessionUpdateManyArgsSchema: z.ZodType<Prisma.SessionUpdateManyArgs> = z.object({
  data: z.union([ SessionUpdateManyMutationInputSchema,SessionUncheckedUpdateManyInputSchema ]),
  where: SessionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const SessionUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.SessionUpdateManyAndReturnArgs> = z.object({
  data: z.union([ SessionUpdateManyMutationInputSchema,SessionUncheckedUpdateManyInputSchema ]),
  where: SessionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const SessionDeleteManyArgsSchema: z.ZodType<Prisma.SessionDeleteManyArgs> = z.object({
  where: SessionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const CookBookCreateArgsSchema: z.ZodType<Prisma.CookBookCreateArgs> = z.object({
  select: CookBookSelectSchema.optional(),
  include: CookBookIncludeSchema.optional(),
  data: z.union([ CookBookCreateInputSchema,CookBookUncheckedCreateInputSchema ]),
}).strict() ;

export const CookBookUpsertArgsSchema: z.ZodType<Prisma.CookBookUpsertArgs> = z.object({
  select: CookBookSelectSchema.optional(),
  include: CookBookIncludeSchema.optional(),
  where: CookBookWhereUniqueInputSchema,
  create: z.union([ CookBookCreateInputSchema,CookBookUncheckedCreateInputSchema ]),
  update: z.union([ CookBookUpdateInputSchema,CookBookUncheckedUpdateInputSchema ]),
}).strict() ;

export const CookBookCreateManyArgsSchema: z.ZodType<Prisma.CookBookCreateManyArgs> = z.object({
  data: z.union([ CookBookCreateManyInputSchema,CookBookCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const CookBookCreateManyAndReturnArgsSchema: z.ZodType<Prisma.CookBookCreateManyAndReturnArgs> = z.object({
  data: z.union([ CookBookCreateManyInputSchema,CookBookCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const CookBookDeleteArgsSchema: z.ZodType<Prisma.CookBookDeleteArgs> = z.object({
  select: CookBookSelectSchema.optional(),
  include: CookBookIncludeSchema.optional(),
  where: CookBookWhereUniqueInputSchema,
}).strict() ;

export const CookBookUpdateArgsSchema: z.ZodType<Prisma.CookBookUpdateArgs> = z.object({
  select: CookBookSelectSchema.optional(),
  include: CookBookIncludeSchema.optional(),
  data: z.union([ CookBookUpdateInputSchema,CookBookUncheckedUpdateInputSchema ]),
  where: CookBookWhereUniqueInputSchema,
}).strict() ;

export const CookBookUpdateManyArgsSchema: z.ZodType<Prisma.CookBookUpdateManyArgs> = z.object({
  data: z.union([ CookBookUpdateManyMutationInputSchema,CookBookUncheckedUpdateManyInputSchema ]),
  where: CookBookWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const CookBookUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.CookBookUpdateManyAndReturnArgs> = z.object({
  data: z.union([ CookBookUpdateManyMutationInputSchema,CookBookUncheckedUpdateManyInputSchema ]),
  where: CookBookWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const CookBookDeleteManyArgsSchema: z.ZodType<Prisma.CookBookDeleteManyArgs> = z.object({
  where: CookBookWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RecipeCreateArgsSchema: z.ZodType<Prisma.RecipeCreateArgs> = z.object({
  select: RecipeSelectSchema.optional(),
  include: RecipeIncludeSchema.optional(),
  data: z.union([ RecipeCreateInputSchema,RecipeUncheckedCreateInputSchema ]),
}).strict() ;

export const RecipeUpsertArgsSchema: z.ZodType<Prisma.RecipeUpsertArgs> = z.object({
  select: RecipeSelectSchema.optional(),
  include: RecipeIncludeSchema.optional(),
  where: RecipeWhereUniqueInputSchema,
  create: z.union([ RecipeCreateInputSchema,RecipeUncheckedCreateInputSchema ]),
  update: z.union([ RecipeUpdateInputSchema,RecipeUncheckedUpdateInputSchema ]),
}).strict() ;

export const RecipeCreateManyArgsSchema: z.ZodType<Prisma.RecipeCreateManyArgs> = z.object({
  data: z.union([ RecipeCreateManyInputSchema,RecipeCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const RecipeCreateManyAndReturnArgsSchema: z.ZodType<Prisma.RecipeCreateManyAndReturnArgs> = z.object({
  data: z.union([ RecipeCreateManyInputSchema,RecipeCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const RecipeDeleteArgsSchema: z.ZodType<Prisma.RecipeDeleteArgs> = z.object({
  select: RecipeSelectSchema.optional(),
  include: RecipeIncludeSchema.optional(),
  where: RecipeWhereUniqueInputSchema,
}).strict() ;

export const RecipeUpdateArgsSchema: z.ZodType<Prisma.RecipeUpdateArgs> = z.object({
  select: RecipeSelectSchema.optional(),
  include: RecipeIncludeSchema.optional(),
  data: z.union([ RecipeUpdateInputSchema,RecipeUncheckedUpdateInputSchema ]),
  where: RecipeWhereUniqueInputSchema,
}).strict() ;

export const RecipeUpdateManyArgsSchema: z.ZodType<Prisma.RecipeUpdateManyArgs> = z.object({
  data: z.union([ RecipeUpdateManyMutationInputSchema,RecipeUncheckedUpdateManyInputSchema ]),
  where: RecipeWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RecipeUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.RecipeUpdateManyAndReturnArgs> = z.object({
  data: z.union([ RecipeUpdateManyMutationInputSchema,RecipeUncheckedUpdateManyInputSchema ]),
  where: RecipeWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RecipeDeleteManyArgsSchema: z.ZodType<Prisma.RecipeDeleteManyArgs> = z.object({
  where: RecipeWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const IngredientCreateArgsSchema: z.ZodType<Prisma.IngredientCreateArgs> = z.object({
  select: IngredientSelectSchema.optional(),
  include: IngredientIncludeSchema.optional(),
  data: z.union([ IngredientCreateInputSchema,IngredientUncheckedCreateInputSchema ]),
}).strict() ;

export const IngredientUpsertArgsSchema: z.ZodType<Prisma.IngredientUpsertArgs> = z.object({
  select: IngredientSelectSchema.optional(),
  include: IngredientIncludeSchema.optional(),
  where: IngredientWhereUniqueInputSchema,
  create: z.union([ IngredientCreateInputSchema,IngredientUncheckedCreateInputSchema ]),
  update: z.union([ IngredientUpdateInputSchema,IngredientUncheckedUpdateInputSchema ]),
}).strict() ;

export const IngredientCreateManyArgsSchema: z.ZodType<Prisma.IngredientCreateManyArgs> = z.object({
  data: z.union([ IngredientCreateManyInputSchema,IngredientCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const IngredientCreateManyAndReturnArgsSchema: z.ZodType<Prisma.IngredientCreateManyAndReturnArgs> = z.object({
  data: z.union([ IngredientCreateManyInputSchema,IngredientCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const IngredientDeleteArgsSchema: z.ZodType<Prisma.IngredientDeleteArgs> = z.object({
  select: IngredientSelectSchema.optional(),
  include: IngredientIncludeSchema.optional(),
  where: IngredientWhereUniqueInputSchema,
}).strict() ;

export const IngredientUpdateArgsSchema: z.ZodType<Prisma.IngredientUpdateArgs> = z.object({
  select: IngredientSelectSchema.optional(),
  include: IngredientIncludeSchema.optional(),
  data: z.union([ IngredientUpdateInputSchema,IngredientUncheckedUpdateInputSchema ]),
  where: IngredientWhereUniqueInputSchema,
}).strict() ;

export const IngredientUpdateManyArgsSchema: z.ZodType<Prisma.IngredientUpdateManyArgs> = z.object({
  data: z.union([ IngredientUpdateManyMutationInputSchema,IngredientUncheckedUpdateManyInputSchema ]),
  where: IngredientWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const IngredientUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.IngredientUpdateManyAndReturnArgs> = z.object({
  data: z.union([ IngredientUpdateManyMutationInputSchema,IngredientUncheckedUpdateManyInputSchema ]),
  where: IngredientWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const IngredientDeleteManyArgsSchema: z.ZodType<Prisma.IngredientDeleteManyArgs> = z.object({
  where: IngredientWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RecipeIngredientCreateArgsSchema: z.ZodType<Prisma.RecipeIngredientCreateArgs> = z.object({
  select: RecipeIngredientSelectSchema.optional(),
  include: RecipeIngredientIncludeSchema.optional(),
  data: z.union([ RecipeIngredientCreateInputSchema,RecipeIngredientUncheckedCreateInputSchema ]),
}).strict() ;

export const RecipeIngredientUpsertArgsSchema: z.ZodType<Prisma.RecipeIngredientUpsertArgs> = z.object({
  select: RecipeIngredientSelectSchema.optional(),
  include: RecipeIngredientIncludeSchema.optional(),
  where: RecipeIngredientWhereUniqueInputSchema,
  create: z.union([ RecipeIngredientCreateInputSchema,RecipeIngredientUncheckedCreateInputSchema ]),
  update: z.union([ RecipeIngredientUpdateInputSchema,RecipeIngredientUncheckedUpdateInputSchema ]),
}).strict() ;

export const RecipeIngredientCreateManyArgsSchema: z.ZodType<Prisma.RecipeIngredientCreateManyArgs> = z.object({
  data: z.union([ RecipeIngredientCreateManyInputSchema,RecipeIngredientCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const RecipeIngredientCreateManyAndReturnArgsSchema: z.ZodType<Prisma.RecipeIngredientCreateManyAndReturnArgs> = z.object({
  data: z.union([ RecipeIngredientCreateManyInputSchema,RecipeIngredientCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const RecipeIngredientDeleteArgsSchema: z.ZodType<Prisma.RecipeIngredientDeleteArgs> = z.object({
  select: RecipeIngredientSelectSchema.optional(),
  include: RecipeIngredientIncludeSchema.optional(),
  where: RecipeIngredientWhereUniqueInputSchema,
}).strict() ;

export const RecipeIngredientUpdateArgsSchema: z.ZodType<Prisma.RecipeIngredientUpdateArgs> = z.object({
  select: RecipeIngredientSelectSchema.optional(),
  include: RecipeIngredientIncludeSchema.optional(),
  data: z.union([ RecipeIngredientUpdateInputSchema,RecipeIngredientUncheckedUpdateInputSchema ]),
  where: RecipeIngredientWhereUniqueInputSchema,
}).strict() ;

export const RecipeIngredientUpdateManyArgsSchema: z.ZodType<Prisma.RecipeIngredientUpdateManyArgs> = z.object({
  data: z.union([ RecipeIngredientUpdateManyMutationInputSchema,RecipeIngredientUncheckedUpdateManyInputSchema ]),
  where: RecipeIngredientWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RecipeIngredientUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.RecipeIngredientUpdateManyAndReturnArgs> = z.object({
  data: z.union([ RecipeIngredientUpdateManyMutationInputSchema,RecipeIngredientUncheckedUpdateManyInputSchema ]),
  where: RecipeIngredientWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RecipeIngredientDeleteManyArgsSchema: z.ZodType<Prisma.RecipeIngredientDeleteManyArgs> = z.object({
  where: RecipeIngredientWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RecipeInstructionCreateArgsSchema: z.ZodType<Prisma.RecipeInstructionCreateArgs> = z.object({
  select: RecipeInstructionSelectSchema.optional(),
  include: RecipeInstructionIncludeSchema.optional(),
  data: z.union([ RecipeInstructionCreateInputSchema,RecipeInstructionUncheckedCreateInputSchema ]),
}).strict() ;

export const RecipeInstructionUpsertArgsSchema: z.ZodType<Prisma.RecipeInstructionUpsertArgs> = z.object({
  select: RecipeInstructionSelectSchema.optional(),
  include: RecipeInstructionIncludeSchema.optional(),
  where: RecipeInstructionWhereUniqueInputSchema,
  create: z.union([ RecipeInstructionCreateInputSchema,RecipeInstructionUncheckedCreateInputSchema ]),
  update: z.union([ RecipeInstructionUpdateInputSchema,RecipeInstructionUncheckedUpdateInputSchema ]),
}).strict() ;

export const RecipeInstructionCreateManyArgsSchema: z.ZodType<Prisma.RecipeInstructionCreateManyArgs> = z.object({
  data: z.union([ RecipeInstructionCreateManyInputSchema,RecipeInstructionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const RecipeInstructionCreateManyAndReturnArgsSchema: z.ZodType<Prisma.RecipeInstructionCreateManyAndReturnArgs> = z.object({
  data: z.union([ RecipeInstructionCreateManyInputSchema,RecipeInstructionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const RecipeInstructionDeleteArgsSchema: z.ZodType<Prisma.RecipeInstructionDeleteArgs> = z.object({
  select: RecipeInstructionSelectSchema.optional(),
  include: RecipeInstructionIncludeSchema.optional(),
  where: RecipeInstructionWhereUniqueInputSchema,
}).strict() ;

export const RecipeInstructionUpdateArgsSchema: z.ZodType<Prisma.RecipeInstructionUpdateArgs> = z.object({
  select: RecipeInstructionSelectSchema.optional(),
  include: RecipeInstructionIncludeSchema.optional(),
  data: z.union([ RecipeInstructionUpdateInputSchema,RecipeInstructionUncheckedUpdateInputSchema ]),
  where: RecipeInstructionWhereUniqueInputSchema,
}).strict() ;

export const RecipeInstructionUpdateManyArgsSchema: z.ZodType<Prisma.RecipeInstructionUpdateManyArgs> = z.object({
  data: z.union([ RecipeInstructionUpdateManyMutationInputSchema,RecipeInstructionUncheckedUpdateManyInputSchema ]),
  where: RecipeInstructionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RecipeInstructionUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.RecipeInstructionUpdateManyAndReturnArgs> = z.object({
  data: z.union([ RecipeInstructionUpdateManyMutationInputSchema,RecipeInstructionUncheckedUpdateManyInputSchema ]),
  where: RecipeInstructionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RecipeInstructionDeleteManyArgsSchema: z.ZodType<Prisma.RecipeInstructionDeleteManyArgs> = z.object({
  where: RecipeInstructionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const InventoryItemCreateArgsSchema: z.ZodType<Prisma.InventoryItemCreateArgs> = z.object({
  select: InventoryItemSelectSchema.optional(),
  include: InventoryItemIncludeSchema.optional(),
  data: z.union([ InventoryItemCreateInputSchema,InventoryItemUncheckedCreateInputSchema ]),
}).strict() ;

export const InventoryItemUpsertArgsSchema: z.ZodType<Prisma.InventoryItemUpsertArgs> = z.object({
  select: InventoryItemSelectSchema.optional(),
  include: InventoryItemIncludeSchema.optional(),
  where: InventoryItemWhereUniqueInputSchema,
  create: z.union([ InventoryItemCreateInputSchema,InventoryItemUncheckedCreateInputSchema ]),
  update: z.union([ InventoryItemUpdateInputSchema,InventoryItemUncheckedUpdateInputSchema ]),
}).strict() ;

export const InventoryItemCreateManyArgsSchema: z.ZodType<Prisma.InventoryItemCreateManyArgs> = z.object({
  data: z.union([ InventoryItemCreateManyInputSchema,InventoryItemCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const InventoryItemCreateManyAndReturnArgsSchema: z.ZodType<Prisma.InventoryItemCreateManyAndReturnArgs> = z.object({
  data: z.union([ InventoryItemCreateManyInputSchema,InventoryItemCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const InventoryItemDeleteArgsSchema: z.ZodType<Prisma.InventoryItemDeleteArgs> = z.object({
  select: InventoryItemSelectSchema.optional(),
  include: InventoryItemIncludeSchema.optional(),
  where: InventoryItemWhereUniqueInputSchema,
}).strict() ;

export const InventoryItemUpdateArgsSchema: z.ZodType<Prisma.InventoryItemUpdateArgs> = z.object({
  select: InventoryItemSelectSchema.optional(),
  include: InventoryItemIncludeSchema.optional(),
  data: z.union([ InventoryItemUpdateInputSchema,InventoryItemUncheckedUpdateInputSchema ]),
  where: InventoryItemWhereUniqueInputSchema,
}).strict() ;

export const InventoryItemUpdateManyArgsSchema: z.ZodType<Prisma.InventoryItemUpdateManyArgs> = z.object({
  data: z.union([ InventoryItemUpdateManyMutationInputSchema,InventoryItemUncheckedUpdateManyInputSchema ]),
  where: InventoryItemWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const InventoryItemUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.InventoryItemUpdateManyAndReturnArgs> = z.object({
  data: z.union([ InventoryItemUpdateManyMutationInputSchema,InventoryItemUncheckedUpdateManyInputSchema ]),
  where: InventoryItemWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const InventoryItemDeleteManyArgsSchema: z.ZodType<Prisma.InventoryItemDeleteManyArgs> = z.object({
  where: InventoryItemWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const InventoryTransactionCreateArgsSchema: z.ZodType<Prisma.InventoryTransactionCreateArgs> = z.object({
  select: InventoryTransactionSelectSchema.optional(),
  include: InventoryTransactionIncludeSchema.optional(),
  data: z.union([ InventoryTransactionCreateInputSchema,InventoryTransactionUncheckedCreateInputSchema ]),
}).strict() ;

export const InventoryTransactionUpsertArgsSchema: z.ZodType<Prisma.InventoryTransactionUpsertArgs> = z.object({
  select: InventoryTransactionSelectSchema.optional(),
  include: InventoryTransactionIncludeSchema.optional(),
  where: InventoryTransactionWhereUniqueInputSchema,
  create: z.union([ InventoryTransactionCreateInputSchema,InventoryTransactionUncheckedCreateInputSchema ]),
  update: z.union([ InventoryTransactionUpdateInputSchema,InventoryTransactionUncheckedUpdateInputSchema ]),
}).strict() ;

export const InventoryTransactionCreateManyArgsSchema: z.ZodType<Prisma.InventoryTransactionCreateManyArgs> = z.object({
  data: z.union([ InventoryTransactionCreateManyInputSchema,InventoryTransactionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const InventoryTransactionCreateManyAndReturnArgsSchema: z.ZodType<Prisma.InventoryTransactionCreateManyAndReturnArgs> = z.object({
  data: z.union([ InventoryTransactionCreateManyInputSchema,InventoryTransactionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const InventoryTransactionDeleteArgsSchema: z.ZodType<Prisma.InventoryTransactionDeleteArgs> = z.object({
  select: InventoryTransactionSelectSchema.optional(),
  include: InventoryTransactionIncludeSchema.optional(),
  where: InventoryTransactionWhereUniqueInputSchema,
}).strict() ;

export const InventoryTransactionUpdateArgsSchema: z.ZodType<Prisma.InventoryTransactionUpdateArgs> = z.object({
  select: InventoryTransactionSelectSchema.optional(),
  include: InventoryTransactionIncludeSchema.optional(),
  data: z.union([ InventoryTransactionUpdateInputSchema,InventoryTransactionUncheckedUpdateInputSchema ]),
  where: InventoryTransactionWhereUniqueInputSchema,
}).strict() ;

export const InventoryTransactionUpdateManyArgsSchema: z.ZodType<Prisma.InventoryTransactionUpdateManyArgs> = z.object({
  data: z.union([ InventoryTransactionUpdateManyMutationInputSchema,InventoryTransactionUncheckedUpdateManyInputSchema ]),
  where: InventoryTransactionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const InventoryTransactionUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.InventoryTransactionUpdateManyAndReturnArgs> = z.object({
  data: z.union([ InventoryTransactionUpdateManyMutationInputSchema,InventoryTransactionUncheckedUpdateManyInputSchema ]),
  where: InventoryTransactionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const InventoryTransactionDeleteManyArgsSchema: z.ZodType<Prisma.InventoryTransactionDeleteManyArgs> = z.object({
  where: InventoryTransactionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const StockCountCreateArgsSchema: z.ZodType<Prisma.StockCountCreateArgs> = z.object({
  select: StockCountSelectSchema.optional(),
  include: StockCountIncludeSchema.optional(),
  data: z.union([ StockCountCreateInputSchema,StockCountUncheckedCreateInputSchema ]),
}).strict() ;

export const StockCountUpsertArgsSchema: z.ZodType<Prisma.StockCountUpsertArgs> = z.object({
  select: StockCountSelectSchema.optional(),
  include: StockCountIncludeSchema.optional(),
  where: StockCountWhereUniqueInputSchema,
  create: z.union([ StockCountCreateInputSchema,StockCountUncheckedCreateInputSchema ]),
  update: z.union([ StockCountUpdateInputSchema,StockCountUncheckedUpdateInputSchema ]),
}).strict() ;

export const StockCountCreateManyArgsSchema: z.ZodType<Prisma.StockCountCreateManyArgs> = z.object({
  data: z.union([ StockCountCreateManyInputSchema,StockCountCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const StockCountCreateManyAndReturnArgsSchema: z.ZodType<Prisma.StockCountCreateManyAndReturnArgs> = z.object({
  data: z.union([ StockCountCreateManyInputSchema,StockCountCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const StockCountDeleteArgsSchema: z.ZodType<Prisma.StockCountDeleteArgs> = z.object({
  select: StockCountSelectSchema.optional(),
  include: StockCountIncludeSchema.optional(),
  where: StockCountWhereUniqueInputSchema,
}).strict() ;

export const StockCountUpdateArgsSchema: z.ZodType<Prisma.StockCountUpdateArgs> = z.object({
  select: StockCountSelectSchema.optional(),
  include: StockCountIncludeSchema.optional(),
  data: z.union([ StockCountUpdateInputSchema,StockCountUncheckedUpdateInputSchema ]),
  where: StockCountWhereUniqueInputSchema,
}).strict() ;

export const StockCountUpdateManyArgsSchema: z.ZodType<Prisma.StockCountUpdateManyArgs> = z.object({
  data: z.union([ StockCountUpdateManyMutationInputSchema,StockCountUncheckedUpdateManyInputSchema ]),
  where: StockCountWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const StockCountUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.StockCountUpdateManyAndReturnArgs> = z.object({
  data: z.union([ StockCountUpdateManyMutationInputSchema,StockCountUncheckedUpdateManyInputSchema ]),
  where: StockCountWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const StockCountDeleteManyArgsSchema: z.ZodType<Prisma.StockCountDeleteManyArgs> = z.object({
  where: StockCountWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const StockCountItemCreateArgsSchema: z.ZodType<Prisma.StockCountItemCreateArgs> = z.object({
  select: StockCountItemSelectSchema.optional(),
  include: StockCountItemIncludeSchema.optional(),
  data: z.union([ StockCountItemCreateInputSchema,StockCountItemUncheckedCreateInputSchema ]),
}).strict() ;

export const StockCountItemUpsertArgsSchema: z.ZodType<Prisma.StockCountItemUpsertArgs> = z.object({
  select: StockCountItemSelectSchema.optional(),
  include: StockCountItemIncludeSchema.optional(),
  where: StockCountItemWhereUniqueInputSchema,
  create: z.union([ StockCountItemCreateInputSchema,StockCountItemUncheckedCreateInputSchema ]),
  update: z.union([ StockCountItemUpdateInputSchema,StockCountItemUncheckedUpdateInputSchema ]),
}).strict() ;

export const StockCountItemCreateManyArgsSchema: z.ZodType<Prisma.StockCountItemCreateManyArgs> = z.object({
  data: z.union([ StockCountItemCreateManyInputSchema,StockCountItemCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const StockCountItemCreateManyAndReturnArgsSchema: z.ZodType<Prisma.StockCountItemCreateManyAndReturnArgs> = z.object({
  data: z.union([ StockCountItemCreateManyInputSchema,StockCountItemCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const StockCountItemDeleteArgsSchema: z.ZodType<Prisma.StockCountItemDeleteArgs> = z.object({
  select: StockCountItemSelectSchema.optional(),
  include: StockCountItemIncludeSchema.optional(),
  where: StockCountItemWhereUniqueInputSchema,
}).strict() ;

export const StockCountItemUpdateArgsSchema: z.ZodType<Prisma.StockCountItemUpdateArgs> = z.object({
  select: StockCountItemSelectSchema.optional(),
  include: StockCountItemIncludeSchema.optional(),
  data: z.union([ StockCountItemUpdateInputSchema,StockCountItemUncheckedUpdateInputSchema ]),
  where: StockCountItemWhereUniqueInputSchema,
}).strict() ;

export const StockCountItemUpdateManyArgsSchema: z.ZodType<Prisma.StockCountItemUpdateManyArgs> = z.object({
  data: z.union([ StockCountItemUpdateManyMutationInputSchema,StockCountItemUncheckedUpdateManyInputSchema ]),
  where: StockCountItemWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const StockCountItemUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.StockCountItemUpdateManyAndReturnArgs> = z.object({
  data: z.union([ StockCountItemUpdateManyMutationInputSchema,StockCountItemUncheckedUpdateManyInputSchema ]),
  where: StockCountItemWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const StockCountItemDeleteManyArgsSchema: z.ZodType<Prisma.StockCountItemDeleteManyArgs> = z.object({
  where: StockCountItemWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RecipeStatsCreateArgsSchema: z.ZodType<Prisma.RecipeStatsCreateArgs> = z.object({
  select: RecipeStatsSelectSchema.optional(),
  include: RecipeStatsIncludeSchema.optional(),
  data: z.union([ RecipeStatsCreateInputSchema,RecipeStatsUncheckedCreateInputSchema ]),
}).strict() ;

export const RecipeStatsUpsertArgsSchema: z.ZodType<Prisma.RecipeStatsUpsertArgs> = z.object({
  select: RecipeStatsSelectSchema.optional(),
  include: RecipeStatsIncludeSchema.optional(),
  where: RecipeStatsWhereUniqueInputSchema,
  create: z.union([ RecipeStatsCreateInputSchema,RecipeStatsUncheckedCreateInputSchema ]),
  update: z.union([ RecipeStatsUpdateInputSchema,RecipeStatsUncheckedUpdateInputSchema ]),
}).strict() ;

export const RecipeStatsCreateManyArgsSchema: z.ZodType<Prisma.RecipeStatsCreateManyArgs> = z.object({
  data: z.union([ RecipeStatsCreateManyInputSchema,RecipeStatsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const RecipeStatsCreateManyAndReturnArgsSchema: z.ZodType<Prisma.RecipeStatsCreateManyAndReturnArgs> = z.object({
  data: z.union([ RecipeStatsCreateManyInputSchema,RecipeStatsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const RecipeStatsDeleteArgsSchema: z.ZodType<Prisma.RecipeStatsDeleteArgs> = z.object({
  select: RecipeStatsSelectSchema.optional(),
  include: RecipeStatsIncludeSchema.optional(),
  where: RecipeStatsWhereUniqueInputSchema,
}).strict() ;

export const RecipeStatsUpdateArgsSchema: z.ZodType<Prisma.RecipeStatsUpdateArgs> = z.object({
  select: RecipeStatsSelectSchema.optional(),
  include: RecipeStatsIncludeSchema.optional(),
  data: z.union([ RecipeStatsUpdateInputSchema,RecipeStatsUncheckedUpdateInputSchema ]),
  where: RecipeStatsWhereUniqueInputSchema,
}).strict() ;

export const RecipeStatsUpdateManyArgsSchema: z.ZodType<Prisma.RecipeStatsUpdateManyArgs> = z.object({
  data: z.union([ RecipeStatsUpdateManyMutationInputSchema,RecipeStatsUncheckedUpdateManyInputSchema ]),
  where: RecipeStatsWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RecipeStatsUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.RecipeStatsUpdateManyAndReturnArgs> = z.object({
  data: z.union([ RecipeStatsUpdateManyMutationInputSchema,RecipeStatsUncheckedUpdateManyInputSchema ]),
  where: RecipeStatsWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const RecipeStatsDeleteManyArgsSchema: z.ZodType<Prisma.RecipeStatsDeleteManyArgs> = z.object({
  where: RecipeStatsWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const OrderCreateArgsSchema: z.ZodType<Prisma.OrderCreateArgs> = z.object({
  select: OrderSelectSchema.optional(),
  include: OrderIncludeSchema.optional(),
  data: z.union([ OrderCreateInputSchema,OrderUncheckedCreateInputSchema ]),
}).strict() ;

export const OrderUpsertArgsSchema: z.ZodType<Prisma.OrderUpsertArgs> = z.object({
  select: OrderSelectSchema.optional(),
  include: OrderIncludeSchema.optional(),
  where: OrderWhereUniqueInputSchema,
  create: z.union([ OrderCreateInputSchema,OrderUncheckedCreateInputSchema ]),
  update: z.union([ OrderUpdateInputSchema,OrderUncheckedUpdateInputSchema ]),
}).strict() ;

export const OrderCreateManyArgsSchema: z.ZodType<Prisma.OrderCreateManyArgs> = z.object({
  data: z.union([ OrderCreateManyInputSchema,OrderCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const OrderCreateManyAndReturnArgsSchema: z.ZodType<Prisma.OrderCreateManyAndReturnArgs> = z.object({
  data: z.union([ OrderCreateManyInputSchema,OrderCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const OrderDeleteArgsSchema: z.ZodType<Prisma.OrderDeleteArgs> = z.object({
  select: OrderSelectSchema.optional(),
  include: OrderIncludeSchema.optional(),
  where: OrderWhereUniqueInputSchema,
}).strict() ;

export const OrderUpdateArgsSchema: z.ZodType<Prisma.OrderUpdateArgs> = z.object({
  select: OrderSelectSchema.optional(),
  include: OrderIncludeSchema.optional(),
  data: z.union([ OrderUpdateInputSchema,OrderUncheckedUpdateInputSchema ]),
  where: OrderWhereUniqueInputSchema,
}).strict() ;

export const OrderUpdateManyArgsSchema: z.ZodType<Prisma.OrderUpdateManyArgs> = z.object({
  data: z.union([ OrderUpdateManyMutationInputSchema,OrderUncheckedUpdateManyInputSchema ]),
  where: OrderWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const OrderUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.OrderUpdateManyAndReturnArgs> = z.object({
  data: z.union([ OrderUpdateManyMutationInputSchema,OrderUncheckedUpdateManyInputSchema ]),
  where: OrderWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const OrderDeleteManyArgsSchema: z.ZodType<Prisma.OrderDeleteManyArgs> = z.object({
  where: OrderWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const OrderItemCreateArgsSchema: z.ZodType<Prisma.OrderItemCreateArgs> = z.object({
  select: OrderItemSelectSchema.optional(),
  include: OrderItemIncludeSchema.optional(),
  data: z.union([ OrderItemCreateInputSchema,OrderItemUncheckedCreateInputSchema ]),
}).strict() ;

export const OrderItemUpsertArgsSchema: z.ZodType<Prisma.OrderItemUpsertArgs> = z.object({
  select: OrderItemSelectSchema.optional(),
  include: OrderItemIncludeSchema.optional(),
  where: OrderItemWhereUniqueInputSchema,
  create: z.union([ OrderItemCreateInputSchema,OrderItemUncheckedCreateInputSchema ]),
  update: z.union([ OrderItemUpdateInputSchema,OrderItemUncheckedUpdateInputSchema ]),
}).strict() ;

export const OrderItemCreateManyArgsSchema: z.ZodType<Prisma.OrderItemCreateManyArgs> = z.object({
  data: z.union([ OrderItemCreateManyInputSchema,OrderItemCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const OrderItemCreateManyAndReturnArgsSchema: z.ZodType<Prisma.OrderItemCreateManyAndReturnArgs> = z.object({
  data: z.union([ OrderItemCreateManyInputSchema,OrderItemCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const OrderItemDeleteArgsSchema: z.ZodType<Prisma.OrderItemDeleteArgs> = z.object({
  select: OrderItemSelectSchema.optional(),
  include: OrderItemIncludeSchema.optional(),
  where: OrderItemWhereUniqueInputSchema,
}).strict() ;

export const OrderItemUpdateArgsSchema: z.ZodType<Prisma.OrderItemUpdateArgs> = z.object({
  select: OrderItemSelectSchema.optional(),
  include: OrderItemIncludeSchema.optional(),
  data: z.union([ OrderItemUpdateInputSchema,OrderItemUncheckedUpdateInputSchema ]),
  where: OrderItemWhereUniqueInputSchema,
}).strict() ;

export const OrderItemUpdateManyArgsSchema: z.ZodType<Prisma.OrderItemUpdateManyArgs> = z.object({
  data: z.union([ OrderItemUpdateManyMutationInputSchema,OrderItemUncheckedUpdateManyInputSchema ]),
  where: OrderItemWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const OrderItemUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.OrderItemUpdateManyAndReturnArgs> = z.object({
  data: z.union([ OrderItemUpdateManyMutationInputSchema,OrderItemUncheckedUpdateManyInputSchema ]),
  where: OrderItemWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const OrderItemDeleteManyArgsSchema: z.ZodType<Prisma.OrderItemDeleteManyArgs> = z.object({
  where: OrderItemWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const VendorCreateArgsSchema: z.ZodType<Prisma.VendorCreateArgs> = z.object({
  select: VendorSelectSchema.optional(),
  include: VendorIncludeSchema.optional(),
  data: z.union([ VendorCreateInputSchema,VendorUncheckedCreateInputSchema ]),
}).strict() ;

export const VendorUpsertArgsSchema: z.ZodType<Prisma.VendorUpsertArgs> = z.object({
  select: VendorSelectSchema.optional(),
  include: VendorIncludeSchema.optional(),
  where: VendorWhereUniqueInputSchema,
  create: z.union([ VendorCreateInputSchema,VendorUncheckedCreateInputSchema ]),
  update: z.union([ VendorUpdateInputSchema,VendorUncheckedUpdateInputSchema ]),
}).strict() ;

export const VendorCreateManyArgsSchema: z.ZodType<Prisma.VendorCreateManyArgs> = z.object({
  data: z.union([ VendorCreateManyInputSchema,VendorCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const VendorCreateManyAndReturnArgsSchema: z.ZodType<Prisma.VendorCreateManyAndReturnArgs> = z.object({
  data: z.union([ VendorCreateManyInputSchema,VendorCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const VendorDeleteArgsSchema: z.ZodType<Prisma.VendorDeleteArgs> = z.object({
  select: VendorSelectSchema.optional(),
  include: VendorIncludeSchema.optional(),
  where: VendorWhereUniqueInputSchema,
}).strict() ;

export const VendorUpdateArgsSchema: z.ZodType<Prisma.VendorUpdateArgs> = z.object({
  select: VendorSelectSchema.optional(),
  include: VendorIncludeSchema.optional(),
  data: z.union([ VendorUpdateInputSchema,VendorUncheckedUpdateInputSchema ]),
  where: VendorWhereUniqueInputSchema,
}).strict() ;

export const VendorUpdateManyArgsSchema: z.ZodType<Prisma.VendorUpdateManyArgs> = z.object({
  data: z.union([ VendorUpdateManyMutationInputSchema,VendorUncheckedUpdateManyInputSchema ]),
  where: VendorWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const VendorUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.VendorUpdateManyAndReturnArgs> = z.object({
  data: z.union([ VendorUpdateManyMutationInputSchema,VendorUncheckedUpdateManyInputSchema ]),
  where: VendorWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const VendorDeleteManyArgsSchema: z.ZodType<Prisma.VendorDeleteManyArgs> = z.object({
  where: VendorWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ShiftCreateArgsSchema: z.ZodType<Prisma.ShiftCreateArgs> = z.object({
  select: ShiftSelectSchema.optional(),
  include: ShiftIncludeSchema.optional(),
  data: z.union([ ShiftCreateInputSchema,ShiftUncheckedCreateInputSchema ]),
}).strict() ;

export const ShiftUpsertArgsSchema: z.ZodType<Prisma.ShiftUpsertArgs> = z.object({
  select: ShiftSelectSchema.optional(),
  include: ShiftIncludeSchema.optional(),
  where: ShiftWhereUniqueInputSchema,
  create: z.union([ ShiftCreateInputSchema,ShiftUncheckedCreateInputSchema ]),
  update: z.union([ ShiftUpdateInputSchema,ShiftUncheckedUpdateInputSchema ]),
}).strict() ;

export const ShiftCreateManyArgsSchema: z.ZodType<Prisma.ShiftCreateManyArgs> = z.object({
  data: z.union([ ShiftCreateManyInputSchema,ShiftCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ShiftCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ShiftCreateManyAndReturnArgs> = z.object({
  data: z.union([ ShiftCreateManyInputSchema,ShiftCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ShiftDeleteArgsSchema: z.ZodType<Prisma.ShiftDeleteArgs> = z.object({
  select: ShiftSelectSchema.optional(),
  include: ShiftIncludeSchema.optional(),
  where: ShiftWhereUniqueInputSchema,
}).strict() ;

export const ShiftUpdateArgsSchema: z.ZodType<Prisma.ShiftUpdateArgs> = z.object({
  select: ShiftSelectSchema.optional(),
  include: ShiftIncludeSchema.optional(),
  data: z.union([ ShiftUpdateInputSchema,ShiftUncheckedUpdateInputSchema ]),
  where: ShiftWhereUniqueInputSchema,
}).strict() ;

export const ShiftUpdateManyArgsSchema: z.ZodType<Prisma.ShiftUpdateManyArgs> = z.object({
  data: z.union([ ShiftUpdateManyMutationInputSchema,ShiftUncheckedUpdateManyInputSchema ]),
  where: ShiftWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ShiftUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.ShiftUpdateManyAndReturnArgs> = z.object({
  data: z.union([ ShiftUpdateManyMutationInputSchema,ShiftUncheckedUpdateManyInputSchema ]),
  where: ShiftWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ShiftDeleteManyArgsSchema: z.ZodType<Prisma.ShiftDeleteManyArgs> = z.object({
  where: ShiftWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const PrepBoardCreateArgsSchema: z.ZodType<Prisma.PrepBoardCreateArgs> = z.object({
  select: PrepBoardSelectSchema.optional(),
  include: PrepBoardIncludeSchema.optional(),
  data: z.union([ PrepBoardCreateInputSchema,PrepBoardUncheckedCreateInputSchema ]),
}).strict() ;

export const PrepBoardUpsertArgsSchema: z.ZodType<Prisma.PrepBoardUpsertArgs> = z.object({
  select: PrepBoardSelectSchema.optional(),
  include: PrepBoardIncludeSchema.optional(),
  where: PrepBoardWhereUniqueInputSchema,
  create: z.union([ PrepBoardCreateInputSchema,PrepBoardUncheckedCreateInputSchema ]),
  update: z.union([ PrepBoardUpdateInputSchema,PrepBoardUncheckedUpdateInputSchema ]),
}).strict() ;

export const PrepBoardCreateManyArgsSchema: z.ZodType<Prisma.PrepBoardCreateManyArgs> = z.object({
  data: z.union([ PrepBoardCreateManyInputSchema,PrepBoardCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const PrepBoardCreateManyAndReturnArgsSchema: z.ZodType<Prisma.PrepBoardCreateManyAndReturnArgs> = z.object({
  data: z.union([ PrepBoardCreateManyInputSchema,PrepBoardCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const PrepBoardDeleteArgsSchema: z.ZodType<Prisma.PrepBoardDeleteArgs> = z.object({
  select: PrepBoardSelectSchema.optional(),
  include: PrepBoardIncludeSchema.optional(),
  where: PrepBoardWhereUniqueInputSchema,
}).strict() ;

export const PrepBoardUpdateArgsSchema: z.ZodType<Prisma.PrepBoardUpdateArgs> = z.object({
  select: PrepBoardSelectSchema.optional(),
  include: PrepBoardIncludeSchema.optional(),
  data: z.union([ PrepBoardUpdateInputSchema,PrepBoardUncheckedUpdateInputSchema ]),
  where: PrepBoardWhereUniqueInputSchema,
}).strict() ;

export const PrepBoardUpdateManyArgsSchema: z.ZodType<Prisma.PrepBoardUpdateManyArgs> = z.object({
  data: z.union([ PrepBoardUpdateManyMutationInputSchema,PrepBoardUncheckedUpdateManyInputSchema ]),
  where: PrepBoardWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const PrepBoardUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.PrepBoardUpdateManyAndReturnArgs> = z.object({
  data: z.union([ PrepBoardUpdateManyMutationInputSchema,PrepBoardUncheckedUpdateManyInputSchema ]),
  where: PrepBoardWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const PrepBoardDeleteManyArgsSchema: z.ZodType<Prisma.PrepBoardDeleteManyArgs> = z.object({
  where: PrepBoardWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const PrepItemCreateArgsSchema: z.ZodType<Prisma.PrepItemCreateArgs> = z.object({
  select: PrepItemSelectSchema.optional(),
  include: PrepItemIncludeSchema.optional(),
  data: z.union([ PrepItemCreateInputSchema,PrepItemUncheckedCreateInputSchema ]),
}).strict() ;

export const PrepItemUpsertArgsSchema: z.ZodType<Prisma.PrepItemUpsertArgs> = z.object({
  select: PrepItemSelectSchema.optional(),
  include: PrepItemIncludeSchema.optional(),
  where: PrepItemWhereUniqueInputSchema,
  create: z.union([ PrepItemCreateInputSchema,PrepItemUncheckedCreateInputSchema ]),
  update: z.union([ PrepItemUpdateInputSchema,PrepItemUncheckedUpdateInputSchema ]),
}).strict() ;

export const PrepItemCreateManyArgsSchema: z.ZodType<Prisma.PrepItemCreateManyArgs> = z.object({
  data: z.union([ PrepItemCreateManyInputSchema,PrepItemCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const PrepItemCreateManyAndReturnArgsSchema: z.ZodType<Prisma.PrepItemCreateManyAndReturnArgs> = z.object({
  data: z.union([ PrepItemCreateManyInputSchema,PrepItemCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const PrepItemDeleteArgsSchema: z.ZodType<Prisma.PrepItemDeleteArgs> = z.object({
  select: PrepItemSelectSchema.optional(),
  include: PrepItemIncludeSchema.optional(),
  where: PrepItemWhereUniqueInputSchema,
}).strict() ;

export const PrepItemUpdateArgsSchema: z.ZodType<Prisma.PrepItemUpdateArgs> = z.object({
  select: PrepItemSelectSchema.optional(),
  include: PrepItemIncludeSchema.optional(),
  data: z.union([ PrepItemUpdateInputSchema,PrepItemUncheckedUpdateInputSchema ]),
  where: PrepItemWhereUniqueInputSchema,
}).strict() ;

export const PrepItemUpdateManyArgsSchema: z.ZodType<Prisma.PrepItemUpdateManyArgs> = z.object({
  data: z.union([ PrepItemUpdateManyMutationInputSchema,PrepItemUncheckedUpdateManyInputSchema ]),
  where: PrepItemWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const PrepItemUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.PrepItemUpdateManyAndReturnArgs> = z.object({
  data: z.union([ PrepItemUpdateManyMutationInputSchema,PrepItemUncheckedUpdateManyInputSchema ]),
  where: PrepItemWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const PrepItemDeleteManyArgsSchema: z.ZodType<Prisma.PrepItemDeleteManyArgs> = z.object({
  where: PrepItemWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const PasswordResetCreateArgsSchema: z.ZodType<Prisma.PasswordResetCreateArgs> = z.object({
  select: PasswordResetSelectSchema.optional(),
  include: PasswordResetIncludeSchema.optional(),
  data: z.union([ PasswordResetCreateInputSchema,PasswordResetUncheckedCreateInputSchema ]),
}).strict() ;

export const PasswordResetUpsertArgsSchema: z.ZodType<Prisma.PasswordResetUpsertArgs> = z.object({
  select: PasswordResetSelectSchema.optional(),
  include: PasswordResetIncludeSchema.optional(),
  where: PasswordResetWhereUniqueInputSchema,
  create: z.union([ PasswordResetCreateInputSchema,PasswordResetUncheckedCreateInputSchema ]),
  update: z.union([ PasswordResetUpdateInputSchema,PasswordResetUncheckedUpdateInputSchema ]),
}).strict() ;

export const PasswordResetCreateManyArgsSchema: z.ZodType<Prisma.PasswordResetCreateManyArgs> = z.object({
  data: z.union([ PasswordResetCreateManyInputSchema,PasswordResetCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const PasswordResetCreateManyAndReturnArgsSchema: z.ZodType<Prisma.PasswordResetCreateManyAndReturnArgs> = z.object({
  data: z.union([ PasswordResetCreateManyInputSchema,PasswordResetCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const PasswordResetDeleteArgsSchema: z.ZodType<Prisma.PasswordResetDeleteArgs> = z.object({
  select: PasswordResetSelectSchema.optional(),
  include: PasswordResetIncludeSchema.optional(),
  where: PasswordResetWhereUniqueInputSchema,
}).strict() ;

export const PasswordResetUpdateArgsSchema: z.ZodType<Prisma.PasswordResetUpdateArgs> = z.object({
  select: PasswordResetSelectSchema.optional(),
  include: PasswordResetIncludeSchema.optional(),
  data: z.union([ PasswordResetUpdateInputSchema,PasswordResetUncheckedUpdateInputSchema ]),
  where: PasswordResetWhereUniqueInputSchema,
}).strict() ;

export const PasswordResetUpdateManyArgsSchema: z.ZodType<Prisma.PasswordResetUpdateManyArgs> = z.object({
  data: z.union([ PasswordResetUpdateManyMutationInputSchema,PasswordResetUncheckedUpdateManyInputSchema ]),
  where: PasswordResetWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const PasswordResetUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.PasswordResetUpdateManyAndReturnArgs> = z.object({
  data: z.union([ PasswordResetUpdateManyMutationInputSchema,PasswordResetUncheckedUpdateManyInputSchema ]),
  where: PasswordResetWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const PasswordResetDeleteManyArgsSchema: z.ZodType<Prisma.PasswordResetDeleteManyArgs> = z.object({
  where: PasswordResetWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const MenuCreateArgsSchema: z.ZodType<Prisma.MenuCreateArgs> = z.object({
  select: MenuSelectSchema.optional(),
  include: MenuIncludeSchema.optional(),
  data: z.union([ MenuCreateInputSchema,MenuUncheckedCreateInputSchema ]),
}).strict() ;

export const MenuUpsertArgsSchema: z.ZodType<Prisma.MenuUpsertArgs> = z.object({
  select: MenuSelectSchema.optional(),
  include: MenuIncludeSchema.optional(),
  where: MenuWhereUniqueInputSchema,
  create: z.union([ MenuCreateInputSchema,MenuUncheckedCreateInputSchema ]),
  update: z.union([ MenuUpdateInputSchema,MenuUncheckedUpdateInputSchema ]),
}).strict() ;

export const MenuCreateManyArgsSchema: z.ZodType<Prisma.MenuCreateManyArgs> = z.object({
  data: z.union([ MenuCreateManyInputSchema,MenuCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const MenuCreateManyAndReturnArgsSchema: z.ZodType<Prisma.MenuCreateManyAndReturnArgs> = z.object({
  data: z.union([ MenuCreateManyInputSchema,MenuCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const MenuDeleteArgsSchema: z.ZodType<Prisma.MenuDeleteArgs> = z.object({
  select: MenuSelectSchema.optional(),
  include: MenuIncludeSchema.optional(),
  where: MenuWhereUniqueInputSchema,
}).strict() ;

export const MenuUpdateArgsSchema: z.ZodType<Prisma.MenuUpdateArgs> = z.object({
  select: MenuSelectSchema.optional(),
  include: MenuIncludeSchema.optional(),
  data: z.union([ MenuUpdateInputSchema,MenuUncheckedUpdateInputSchema ]),
  where: MenuWhereUniqueInputSchema,
}).strict() ;

export const MenuUpdateManyArgsSchema: z.ZodType<Prisma.MenuUpdateManyArgs> = z.object({
  data: z.union([ MenuUpdateManyMutationInputSchema,MenuUncheckedUpdateManyInputSchema ]),
  where: MenuWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const MenuUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.MenuUpdateManyAndReturnArgs> = z.object({
  data: z.union([ MenuUpdateManyMutationInputSchema,MenuUncheckedUpdateManyInputSchema ]),
  where: MenuWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const MenuDeleteManyArgsSchema: z.ZodType<Prisma.MenuDeleteManyArgs> = z.object({
  where: MenuWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const MenuItemRecipeCreateArgsSchema: z.ZodType<Prisma.MenuItemRecipeCreateArgs> = z.object({
  select: MenuItemRecipeSelectSchema.optional(),
  include: MenuItemRecipeIncludeSchema.optional(),
  data: z.union([ MenuItemRecipeCreateInputSchema,MenuItemRecipeUncheckedCreateInputSchema ]),
}).strict() ;

export const MenuItemRecipeUpsertArgsSchema: z.ZodType<Prisma.MenuItemRecipeUpsertArgs> = z.object({
  select: MenuItemRecipeSelectSchema.optional(),
  include: MenuItemRecipeIncludeSchema.optional(),
  where: MenuItemRecipeWhereUniqueInputSchema,
  create: z.union([ MenuItemRecipeCreateInputSchema,MenuItemRecipeUncheckedCreateInputSchema ]),
  update: z.union([ MenuItemRecipeUpdateInputSchema,MenuItemRecipeUncheckedUpdateInputSchema ]),
}).strict() ;

export const MenuItemRecipeCreateManyArgsSchema: z.ZodType<Prisma.MenuItemRecipeCreateManyArgs> = z.object({
  data: z.union([ MenuItemRecipeCreateManyInputSchema,MenuItemRecipeCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const MenuItemRecipeCreateManyAndReturnArgsSchema: z.ZodType<Prisma.MenuItemRecipeCreateManyAndReturnArgs> = z.object({
  data: z.union([ MenuItemRecipeCreateManyInputSchema,MenuItemRecipeCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const MenuItemRecipeDeleteArgsSchema: z.ZodType<Prisma.MenuItemRecipeDeleteArgs> = z.object({
  select: MenuItemRecipeSelectSchema.optional(),
  include: MenuItemRecipeIncludeSchema.optional(),
  where: MenuItemRecipeWhereUniqueInputSchema,
}).strict() ;

export const MenuItemRecipeUpdateArgsSchema: z.ZodType<Prisma.MenuItemRecipeUpdateArgs> = z.object({
  select: MenuItemRecipeSelectSchema.optional(),
  include: MenuItemRecipeIncludeSchema.optional(),
  data: z.union([ MenuItemRecipeUpdateInputSchema,MenuItemRecipeUncheckedUpdateInputSchema ]),
  where: MenuItemRecipeWhereUniqueInputSchema,
}).strict() ;

export const MenuItemRecipeUpdateManyArgsSchema: z.ZodType<Prisma.MenuItemRecipeUpdateManyArgs> = z.object({
  data: z.union([ MenuItemRecipeUpdateManyMutationInputSchema,MenuItemRecipeUncheckedUpdateManyInputSchema ]),
  where: MenuItemRecipeWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const MenuItemRecipeUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.MenuItemRecipeUpdateManyAndReturnArgs> = z.object({
  data: z.union([ MenuItemRecipeUpdateManyMutationInputSchema,MenuItemRecipeUncheckedUpdateManyInputSchema ]),
  where: MenuItemRecipeWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const MenuItemRecipeDeleteManyArgsSchema: z.ZodType<Prisma.MenuItemRecipeDeleteManyArgs> = z.object({
  where: MenuItemRecipeWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const MenuItemCreateArgsSchema: z.ZodType<Prisma.MenuItemCreateArgs> = z.object({
  select: MenuItemSelectSchema.optional(),
  include: MenuItemIncludeSchema.optional(),
  data: z.union([ MenuItemCreateInputSchema,MenuItemUncheckedCreateInputSchema ]),
}).strict() ;

export const MenuItemUpsertArgsSchema: z.ZodType<Prisma.MenuItemUpsertArgs> = z.object({
  select: MenuItemSelectSchema.optional(),
  include: MenuItemIncludeSchema.optional(),
  where: MenuItemWhereUniqueInputSchema,
  create: z.union([ MenuItemCreateInputSchema,MenuItemUncheckedCreateInputSchema ]),
  update: z.union([ MenuItemUpdateInputSchema,MenuItemUncheckedUpdateInputSchema ]),
}).strict() ;

export const MenuItemCreateManyArgsSchema: z.ZodType<Prisma.MenuItemCreateManyArgs> = z.object({
  data: z.union([ MenuItemCreateManyInputSchema,MenuItemCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const MenuItemCreateManyAndReturnArgsSchema: z.ZodType<Prisma.MenuItemCreateManyAndReturnArgs> = z.object({
  data: z.union([ MenuItemCreateManyInputSchema,MenuItemCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const MenuItemDeleteArgsSchema: z.ZodType<Prisma.MenuItemDeleteArgs> = z.object({
  select: MenuItemSelectSchema.optional(),
  include: MenuItemIncludeSchema.optional(),
  where: MenuItemWhereUniqueInputSchema,
}).strict() ;

export const MenuItemUpdateArgsSchema: z.ZodType<Prisma.MenuItemUpdateArgs> = z.object({
  select: MenuItemSelectSchema.optional(),
  include: MenuItemIncludeSchema.optional(),
  data: z.union([ MenuItemUpdateInputSchema,MenuItemUncheckedUpdateInputSchema ]),
  where: MenuItemWhereUniqueInputSchema,
}).strict() ;

export const MenuItemUpdateManyArgsSchema: z.ZodType<Prisma.MenuItemUpdateManyArgs> = z.object({
  data: z.union([ MenuItemUpdateManyMutationInputSchema,MenuItemUncheckedUpdateManyInputSchema ]),
  where: MenuItemWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const MenuItemUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.MenuItemUpdateManyAndReturnArgs> = z.object({
  data: z.union([ MenuItemUpdateManyMutationInputSchema,MenuItemUncheckedUpdateManyInputSchema ]),
  where: MenuItemWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const MenuItemDeleteManyArgsSchema: z.ZodType<Prisma.MenuItemDeleteManyArgs> = z.object({
  where: MenuItemWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const NutritionalInfoCreateArgsSchema: z.ZodType<Prisma.NutritionalInfoCreateArgs> = z.object({
  select: NutritionalInfoSelectSchema.optional(),
  include: NutritionalInfoIncludeSchema.optional(),
  data: z.union([ NutritionalInfoCreateInputSchema,NutritionalInfoUncheckedCreateInputSchema ]),
}).strict() ;

export const NutritionalInfoUpsertArgsSchema: z.ZodType<Prisma.NutritionalInfoUpsertArgs> = z.object({
  select: NutritionalInfoSelectSchema.optional(),
  include: NutritionalInfoIncludeSchema.optional(),
  where: NutritionalInfoWhereUniqueInputSchema,
  create: z.union([ NutritionalInfoCreateInputSchema,NutritionalInfoUncheckedCreateInputSchema ]),
  update: z.union([ NutritionalInfoUpdateInputSchema,NutritionalInfoUncheckedUpdateInputSchema ]),
}).strict() ;

export const NutritionalInfoCreateManyArgsSchema: z.ZodType<Prisma.NutritionalInfoCreateManyArgs> = z.object({
  data: z.union([ NutritionalInfoCreateManyInputSchema,NutritionalInfoCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const NutritionalInfoCreateManyAndReturnArgsSchema: z.ZodType<Prisma.NutritionalInfoCreateManyAndReturnArgs> = z.object({
  data: z.union([ NutritionalInfoCreateManyInputSchema,NutritionalInfoCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const NutritionalInfoDeleteArgsSchema: z.ZodType<Prisma.NutritionalInfoDeleteArgs> = z.object({
  select: NutritionalInfoSelectSchema.optional(),
  include: NutritionalInfoIncludeSchema.optional(),
  where: NutritionalInfoWhereUniqueInputSchema,
}).strict() ;

export const NutritionalInfoUpdateArgsSchema: z.ZodType<Prisma.NutritionalInfoUpdateArgs> = z.object({
  select: NutritionalInfoSelectSchema.optional(),
  include: NutritionalInfoIncludeSchema.optional(),
  data: z.union([ NutritionalInfoUpdateInputSchema,NutritionalInfoUncheckedUpdateInputSchema ]),
  where: NutritionalInfoWhereUniqueInputSchema,
}).strict() ;

export const NutritionalInfoUpdateManyArgsSchema: z.ZodType<Prisma.NutritionalInfoUpdateManyArgs> = z.object({
  data: z.union([ NutritionalInfoUpdateManyMutationInputSchema,NutritionalInfoUncheckedUpdateManyInputSchema ]),
  where: NutritionalInfoWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const NutritionalInfoUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.NutritionalInfoUpdateManyAndReturnArgs> = z.object({
  data: z.union([ NutritionalInfoUpdateManyMutationInputSchema,NutritionalInfoUncheckedUpdateManyInputSchema ]),
  where: NutritionalInfoWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const NutritionalInfoDeleteManyArgsSchema: z.ZodType<Prisma.NutritionalInfoDeleteManyArgs> = z.object({
  where: NutritionalInfoWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const FoodCostHistoryCreateArgsSchema: z.ZodType<Prisma.FoodCostHistoryCreateArgs> = z.object({
  select: FoodCostHistorySelectSchema.optional(),
  include: FoodCostHistoryIncludeSchema.optional(),
  data: z.union([ FoodCostHistoryCreateInputSchema,FoodCostHistoryUncheckedCreateInputSchema ]),
}).strict() ;

export const FoodCostHistoryUpsertArgsSchema: z.ZodType<Prisma.FoodCostHistoryUpsertArgs> = z.object({
  select: FoodCostHistorySelectSchema.optional(),
  include: FoodCostHistoryIncludeSchema.optional(),
  where: FoodCostHistoryWhereUniqueInputSchema,
  create: z.union([ FoodCostHistoryCreateInputSchema,FoodCostHistoryUncheckedCreateInputSchema ]),
  update: z.union([ FoodCostHistoryUpdateInputSchema,FoodCostHistoryUncheckedUpdateInputSchema ]),
}).strict() ;

export const FoodCostHistoryCreateManyArgsSchema: z.ZodType<Prisma.FoodCostHistoryCreateManyArgs> = z.object({
  data: z.union([ FoodCostHistoryCreateManyInputSchema,FoodCostHistoryCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const FoodCostHistoryCreateManyAndReturnArgsSchema: z.ZodType<Prisma.FoodCostHistoryCreateManyAndReturnArgs> = z.object({
  data: z.union([ FoodCostHistoryCreateManyInputSchema,FoodCostHistoryCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const FoodCostHistoryDeleteArgsSchema: z.ZodType<Prisma.FoodCostHistoryDeleteArgs> = z.object({
  select: FoodCostHistorySelectSchema.optional(),
  include: FoodCostHistoryIncludeSchema.optional(),
  where: FoodCostHistoryWhereUniqueInputSchema,
}).strict() ;

export const FoodCostHistoryUpdateArgsSchema: z.ZodType<Prisma.FoodCostHistoryUpdateArgs> = z.object({
  select: FoodCostHistorySelectSchema.optional(),
  include: FoodCostHistoryIncludeSchema.optional(),
  data: z.union([ FoodCostHistoryUpdateInputSchema,FoodCostHistoryUncheckedUpdateInputSchema ]),
  where: FoodCostHistoryWhereUniqueInputSchema,
}).strict() ;

export const FoodCostHistoryUpdateManyArgsSchema: z.ZodType<Prisma.FoodCostHistoryUpdateManyArgs> = z.object({
  data: z.union([ FoodCostHistoryUpdateManyMutationInputSchema,FoodCostHistoryUncheckedUpdateManyInputSchema ]),
  where: FoodCostHistoryWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const FoodCostHistoryUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.FoodCostHistoryUpdateManyAndReturnArgs> = z.object({
  data: z.union([ FoodCostHistoryUpdateManyMutationInputSchema,FoodCostHistoryUncheckedUpdateManyInputSchema ]),
  where: FoodCostHistoryWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const FoodCostHistoryDeleteManyArgsSchema: z.ZodType<Prisma.FoodCostHistoryDeleteManyArgs> = z.object({
  where: FoodCostHistoryWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const PrepHistoryCreateArgsSchema: z.ZodType<Prisma.PrepHistoryCreateArgs> = z.object({
  select: PrepHistorySelectSchema.optional(),
  include: PrepHistoryIncludeSchema.optional(),
  data: z.union([ PrepHistoryCreateInputSchema,PrepHistoryUncheckedCreateInputSchema ]),
}).strict() ;

export const PrepHistoryUpsertArgsSchema: z.ZodType<Prisma.PrepHistoryUpsertArgs> = z.object({
  select: PrepHistorySelectSchema.optional(),
  include: PrepHistoryIncludeSchema.optional(),
  where: PrepHistoryWhereUniqueInputSchema,
  create: z.union([ PrepHistoryCreateInputSchema,PrepHistoryUncheckedCreateInputSchema ]),
  update: z.union([ PrepHistoryUpdateInputSchema,PrepHistoryUncheckedUpdateInputSchema ]),
}).strict() ;

export const PrepHistoryCreateManyArgsSchema: z.ZodType<Prisma.PrepHistoryCreateManyArgs> = z.object({
  data: z.union([ PrepHistoryCreateManyInputSchema,PrepHistoryCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const PrepHistoryCreateManyAndReturnArgsSchema: z.ZodType<Prisma.PrepHistoryCreateManyAndReturnArgs> = z.object({
  data: z.union([ PrepHistoryCreateManyInputSchema,PrepHistoryCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const PrepHistoryDeleteArgsSchema: z.ZodType<Prisma.PrepHistoryDeleteArgs> = z.object({
  select: PrepHistorySelectSchema.optional(),
  include: PrepHistoryIncludeSchema.optional(),
  where: PrepHistoryWhereUniqueInputSchema,
}).strict() ;

export const PrepHistoryUpdateArgsSchema: z.ZodType<Prisma.PrepHistoryUpdateArgs> = z.object({
  select: PrepHistorySelectSchema.optional(),
  include: PrepHistoryIncludeSchema.optional(),
  data: z.union([ PrepHistoryUpdateInputSchema,PrepHistoryUncheckedUpdateInputSchema ]),
  where: PrepHistoryWhereUniqueInputSchema,
}).strict() ;

export const PrepHistoryUpdateManyArgsSchema: z.ZodType<Prisma.PrepHistoryUpdateManyArgs> = z.object({
  data: z.union([ PrepHistoryUpdateManyMutationInputSchema,PrepHistoryUncheckedUpdateManyInputSchema ]),
  where: PrepHistoryWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const PrepHistoryUpdateManyAndReturnArgsSchema: z.ZodType<Prisma.PrepHistoryUpdateManyAndReturnArgs> = z.object({
  data: z.union([ PrepHistoryUpdateManyMutationInputSchema,PrepHistoryUncheckedUpdateManyInputSchema ]),
  where: PrepHistoryWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const PrepHistoryDeleteManyArgsSchema: z.ZodType<Prisma.PrepHistoryDeleteManyArgs> = z.object({
  where: PrepHistoryWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;