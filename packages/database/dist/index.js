"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  zodSchemas: () => zod_exports
});
module.exports = __toCommonJS(src_exports);
__reExport(src_exports, require("@prisma/client"), module.exports);

// src/generated/zod/index.ts
var zod_exports = {};
__export(zod_exports, {
  AllergenAggregateArgsSchema: () => AllergenAggregateArgsSchema,
  AllergenArgsSchema: () => AllergenArgsSchema,
  AllergenAvgOrderByAggregateInputSchema: () => AllergenAvgOrderByAggregateInputSchema,
  AllergenCountOrderByAggregateInputSchema: () => AllergenCountOrderByAggregateInputSchema,
  AllergenCountOutputTypeArgsSchema: () => AllergenCountOutputTypeArgsSchema,
  AllergenCountOutputTypeSelectSchema: () => AllergenCountOutputTypeSelectSchema,
  AllergenCreateArgsSchema: () => AllergenCreateArgsSchema,
  AllergenCreateInputSchema: () => AllergenCreateInputSchema,
  AllergenCreateManyAndReturnArgsSchema: () => AllergenCreateManyAndReturnArgsSchema,
  AllergenCreateManyArgsSchema: () => AllergenCreateManyArgsSchema,
  AllergenCreateManyInputSchema: () => AllergenCreateManyInputSchema,
  AllergenCreateNestedOneWithoutIngredientsInputSchema: () => AllergenCreateNestedOneWithoutIngredientsInputSchema,
  AllergenCreateOrConnectWithoutIngredientsInputSchema: () => AllergenCreateOrConnectWithoutIngredientsInputSchema,
  AllergenCreateWithoutIngredientsInputSchema: () => AllergenCreateWithoutIngredientsInputSchema,
  AllergenDeleteArgsSchema: () => AllergenDeleteArgsSchema,
  AllergenDeleteManyArgsSchema: () => AllergenDeleteManyArgsSchema,
  AllergenFindFirstArgsSchema: () => AllergenFindFirstArgsSchema,
  AllergenFindFirstOrThrowArgsSchema: () => AllergenFindFirstOrThrowArgsSchema,
  AllergenFindManyArgsSchema: () => AllergenFindManyArgsSchema,
  AllergenFindUniqueArgsSchema: () => AllergenFindUniqueArgsSchema,
  AllergenFindUniqueOrThrowArgsSchema: () => AllergenFindUniqueOrThrowArgsSchema,
  AllergenGroupByArgsSchema: () => AllergenGroupByArgsSchema,
  AllergenIncludeSchema: () => AllergenIncludeSchema,
  AllergenMaxOrderByAggregateInputSchema: () => AllergenMaxOrderByAggregateInputSchema,
  AllergenMinOrderByAggregateInputSchema: () => AllergenMinOrderByAggregateInputSchema,
  AllergenOrderByWithAggregationInputSchema: () => AllergenOrderByWithAggregationInputSchema,
  AllergenOrderByWithRelationInputSchema: () => AllergenOrderByWithRelationInputSchema,
  AllergenRelationFilterSchema: () => AllergenRelationFilterSchema,
  AllergenScalarFieldEnumSchema: () => AllergenScalarFieldEnumSchema,
  AllergenScalarWhereWithAggregatesInputSchema: () => AllergenScalarWhereWithAggregatesInputSchema,
  AllergenSchema: () => AllergenSchema,
  AllergenSelectSchema: () => AllergenSelectSchema,
  AllergenSumOrderByAggregateInputSchema: () => AllergenSumOrderByAggregateInputSchema,
  AllergenUncheckedCreateInputSchema: () => AllergenUncheckedCreateInputSchema,
  AllergenUncheckedCreateWithoutIngredientsInputSchema: () => AllergenUncheckedCreateWithoutIngredientsInputSchema,
  AllergenUncheckedUpdateInputSchema: () => AllergenUncheckedUpdateInputSchema,
  AllergenUncheckedUpdateManyInputSchema: () => AllergenUncheckedUpdateManyInputSchema,
  AllergenUncheckedUpdateWithoutIngredientsInputSchema: () => AllergenUncheckedUpdateWithoutIngredientsInputSchema,
  AllergenUpdateArgsSchema: () => AllergenUpdateArgsSchema,
  AllergenUpdateInputSchema: () => AllergenUpdateInputSchema,
  AllergenUpdateManyArgsSchema: () => AllergenUpdateManyArgsSchema,
  AllergenUpdateManyMutationInputSchema: () => AllergenUpdateManyMutationInputSchema,
  AllergenUpdateOneRequiredWithoutIngredientsNestedInputSchema: () => AllergenUpdateOneRequiredWithoutIngredientsNestedInputSchema,
  AllergenUpdateToOneWithWhereWithoutIngredientsInputSchema: () => AllergenUpdateToOneWithWhereWithoutIngredientsInputSchema,
  AllergenUpdateWithoutIngredientsInputSchema: () => AllergenUpdateWithoutIngredientsInputSchema,
  AllergenUpsertArgsSchema: () => AllergenUpsertArgsSchema,
  AllergenUpsertWithoutIngredientsInputSchema: () => AllergenUpsertWithoutIngredientsInputSchema,
  AllergenWhereInputSchema: () => AllergenWhereInputSchema,
  AllergenWhereUniqueInputSchema: () => AllergenWhereUniqueInputSchema,
  AvailabilityAggregateArgsSchema: () => AvailabilityAggregateArgsSchema,
  AvailabilityArgsSchema: () => AvailabilityArgsSchema,
  AvailabilityAvgOrderByAggregateInputSchema: () => AvailabilityAvgOrderByAggregateInputSchema,
  AvailabilityCountOrderByAggregateInputSchema: () => AvailabilityCountOrderByAggregateInputSchema,
  AvailabilityCreateArgsSchema: () => AvailabilityCreateArgsSchema,
  AvailabilityCreateInputSchema: () => AvailabilityCreateInputSchema,
  AvailabilityCreateManyAndReturnArgsSchema: () => AvailabilityCreateManyAndReturnArgsSchema,
  AvailabilityCreateManyArgsSchema: () => AvailabilityCreateManyArgsSchema,
  AvailabilityCreateManyInputSchema: () => AvailabilityCreateManyInputSchema,
  AvailabilityCreateManyUserInputEnvelopeSchema: () => AvailabilityCreateManyUserInputEnvelopeSchema,
  AvailabilityCreateManyUserInputSchema: () => AvailabilityCreateManyUserInputSchema,
  AvailabilityCreateNestedManyWithoutUserInputSchema: () => AvailabilityCreateNestedManyWithoutUserInputSchema,
  AvailabilityCreateOrConnectWithoutUserInputSchema: () => AvailabilityCreateOrConnectWithoutUserInputSchema,
  AvailabilityCreateWithoutUserInputSchema: () => AvailabilityCreateWithoutUserInputSchema,
  AvailabilityDeleteArgsSchema: () => AvailabilityDeleteArgsSchema,
  AvailabilityDeleteManyArgsSchema: () => AvailabilityDeleteManyArgsSchema,
  AvailabilityFindFirstArgsSchema: () => AvailabilityFindFirstArgsSchema,
  AvailabilityFindFirstOrThrowArgsSchema: () => AvailabilityFindFirstOrThrowArgsSchema,
  AvailabilityFindManyArgsSchema: () => AvailabilityFindManyArgsSchema,
  AvailabilityFindUniqueArgsSchema: () => AvailabilityFindUniqueArgsSchema,
  AvailabilityFindUniqueOrThrowArgsSchema: () => AvailabilityFindUniqueOrThrowArgsSchema,
  AvailabilityGroupByArgsSchema: () => AvailabilityGroupByArgsSchema,
  AvailabilityIncludeSchema: () => AvailabilityIncludeSchema,
  AvailabilityListRelationFilterSchema: () => AvailabilityListRelationFilterSchema,
  AvailabilityMaxOrderByAggregateInputSchema: () => AvailabilityMaxOrderByAggregateInputSchema,
  AvailabilityMinOrderByAggregateInputSchema: () => AvailabilityMinOrderByAggregateInputSchema,
  AvailabilityOrderByRelationAggregateInputSchema: () => AvailabilityOrderByRelationAggregateInputSchema,
  AvailabilityOrderByWithAggregationInputSchema: () => AvailabilityOrderByWithAggregationInputSchema,
  AvailabilityOrderByWithRelationInputSchema: () => AvailabilityOrderByWithRelationInputSchema,
  AvailabilityScalarFieldEnumSchema: () => AvailabilityScalarFieldEnumSchema,
  AvailabilityScalarWhereInputSchema: () => AvailabilityScalarWhereInputSchema,
  AvailabilityScalarWhereWithAggregatesInputSchema: () => AvailabilityScalarWhereWithAggregatesInputSchema,
  AvailabilitySchema: () => AvailabilitySchema,
  AvailabilitySelectSchema: () => AvailabilitySelectSchema,
  AvailabilitySumOrderByAggregateInputSchema: () => AvailabilitySumOrderByAggregateInputSchema,
  AvailabilityUncheckedCreateInputSchema: () => AvailabilityUncheckedCreateInputSchema,
  AvailabilityUncheckedCreateNestedManyWithoutUserInputSchema: () => AvailabilityUncheckedCreateNestedManyWithoutUserInputSchema,
  AvailabilityUncheckedCreateWithoutUserInputSchema: () => AvailabilityUncheckedCreateWithoutUserInputSchema,
  AvailabilityUncheckedUpdateInputSchema: () => AvailabilityUncheckedUpdateInputSchema,
  AvailabilityUncheckedUpdateManyInputSchema: () => AvailabilityUncheckedUpdateManyInputSchema,
  AvailabilityUncheckedUpdateManyWithoutUserInputSchema: () => AvailabilityUncheckedUpdateManyWithoutUserInputSchema,
  AvailabilityUncheckedUpdateManyWithoutUserNestedInputSchema: () => AvailabilityUncheckedUpdateManyWithoutUserNestedInputSchema,
  AvailabilityUncheckedUpdateWithoutUserInputSchema: () => AvailabilityUncheckedUpdateWithoutUserInputSchema,
  AvailabilityUpdateArgsSchema: () => AvailabilityUpdateArgsSchema,
  AvailabilityUpdateInputSchema: () => AvailabilityUpdateInputSchema,
  AvailabilityUpdateManyArgsSchema: () => AvailabilityUpdateManyArgsSchema,
  AvailabilityUpdateManyMutationInputSchema: () => AvailabilityUpdateManyMutationInputSchema,
  AvailabilityUpdateManyWithWhereWithoutUserInputSchema: () => AvailabilityUpdateManyWithWhereWithoutUserInputSchema,
  AvailabilityUpdateManyWithoutUserNestedInputSchema: () => AvailabilityUpdateManyWithoutUserNestedInputSchema,
  AvailabilityUpdateWithWhereUniqueWithoutUserInputSchema: () => AvailabilityUpdateWithWhereUniqueWithoutUserInputSchema,
  AvailabilityUpdateWithoutUserInputSchema: () => AvailabilityUpdateWithoutUserInputSchema,
  AvailabilityUpsertArgsSchema: () => AvailabilityUpsertArgsSchema,
  AvailabilityUpsertWithWhereUniqueWithoutUserInputSchema: () => AvailabilityUpsertWithWhereUniqueWithoutUserInputSchema,
  AvailabilityWhereInputSchema: () => AvailabilityWhereInputSchema,
  AvailabilityWhereUniqueInputSchema: () => AvailabilityWhereUniqueInputSchema,
  BoolFieldUpdateOperationsInputSchema: () => BoolFieldUpdateOperationsInputSchema,
  BoolFilterSchema: () => BoolFilterSchema,
  BoolWithAggregatesFilterSchema: () => BoolWithAggregatesFilterSchema,
  ChecklistCompleteAggregateArgsSchema: () => ChecklistCompleteAggregateArgsSchema,
  ChecklistCompleteArgsSchema: () => ChecklistCompleteArgsSchema,
  ChecklistCompleteAvgOrderByAggregateInputSchema: () => ChecklistCompleteAvgOrderByAggregateInputSchema,
  ChecklistCompleteCountOrderByAggregateInputSchema: () => ChecklistCompleteCountOrderByAggregateInputSchema,
  ChecklistCompleteCountOutputTypeArgsSchema: () => ChecklistCompleteCountOutputTypeArgsSchema,
  ChecklistCompleteCountOutputTypeSelectSchema: () => ChecklistCompleteCountOutputTypeSelectSchema,
  ChecklistCompleteCreateArgsSchema: () => ChecklistCompleteCreateArgsSchema,
  ChecklistCompleteCreateInputSchema: () => ChecklistCompleteCreateInputSchema,
  ChecklistCompleteCreateManyAndReturnArgsSchema: () => ChecklistCompleteCreateManyAndReturnArgsSchema,
  ChecklistCompleteCreateManyArgsSchema: () => ChecklistCompleteCreateManyArgsSchema,
  ChecklistCompleteCreateManyChecklistInputEnvelopeSchema: () => ChecklistCompleteCreateManyChecklistInputEnvelopeSchema,
  ChecklistCompleteCreateManyChecklistInputSchema: () => ChecklistCompleteCreateManyChecklistInputSchema,
  ChecklistCompleteCreateManyCompletedByInputEnvelopeSchema: () => ChecklistCompleteCreateManyCompletedByInputEnvelopeSchema,
  ChecklistCompleteCreateManyCompletedByInputSchema: () => ChecklistCompleteCreateManyCompletedByInputSchema,
  ChecklistCompleteCreateManyInputSchema: () => ChecklistCompleteCreateManyInputSchema,
  ChecklistCompleteCreateNestedManyWithoutChecklistInputSchema: () => ChecklistCompleteCreateNestedManyWithoutChecklistInputSchema,
  ChecklistCompleteCreateNestedManyWithoutCompletedByInputSchema: () => ChecklistCompleteCreateNestedManyWithoutCompletedByInputSchema,
  ChecklistCompleteCreateNestedOneWithoutItemsInputSchema: () => ChecklistCompleteCreateNestedOneWithoutItemsInputSchema,
  ChecklistCompleteCreateOrConnectWithoutChecklistInputSchema: () => ChecklistCompleteCreateOrConnectWithoutChecklistInputSchema,
  ChecklistCompleteCreateOrConnectWithoutCompletedByInputSchema: () => ChecklistCompleteCreateOrConnectWithoutCompletedByInputSchema,
  ChecklistCompleteCreateOrConnectWithoutItemsInputSchema: () => ChecklistCompleteCreateOrConnectWithoutItemsInputSchema,
  ChecklistCompleteCreateWithoutChecklistInputSchema: () => ChecklistCompleteCreateWithoutChecklistInputSchema,
  ChecklistCompleteCreateWithoutCompletedByInputSchema: () => ChecklistCompleteCreateWithoutCompletedByInputSchema,
  ChecklistCompleteCreateWithoutItemsInputSchema: () => ChecklistCompleteCreateWithoutItemsInputSchema,
  ChecklistCompleteDeleteArgsSchema: () => ChecklistCompleteDeleteArgsSchema,
  ChecklistCompleteDeleteManyArgsSchema: () => ChecklistCompleteDeleteManyArgsSchema,
  ChecklistCompleteFindFirstArgsSchema: () => ChecklistCompleteFindFirstArgsSchema,
  ChecklistCompleteFindFirstOrThrowArgsSchema: () => ChecklistCompleteFindFirstOrThrowArgsSchema,
  ChecklistCompleteFindManyArgsSchema: () => ChecklistCompleteFindManyArgsSchema,
  ChecklistCompleteFindUniqueArgsSchema: () => ChecklistCompleteFindUniqueArgsSchema,
  ChecklistCompleteFindUniqueOrThrowArgsSchema: () => ChecklistCompleteFindUniqueOrThrowArgsSchema,
  ChecklistCompleteGroupByArgsSchema: () => ChecklistCompleteGroupByArgsSchema,
  ChecklistCompleteIncludeSchema: () => ChecklistCompleteIncludeSchema,
  ChecklistCompleteListRelationFilterSchema: () => ChecklistCompleteListRelationFilterSchema,
  ChecklistCompleteMaxOrderByAggregateInputSchema: () => ChecklistCompleteMaxOrderByAggregateInputSchema,
  ChecklistCompleteMinOrderByAggregateInputSchema: () => ChecklistCompleteMinOrderByAggregateInputSchema,
  ChecklistCompleteOrderByRelationAggregateInputSchema: () => ChecklistCompleteOrderByRelationAggregateInputSchema,
  ChecklistCompleteOrderByWithAggregationInputSchema: () => ChecklistCompleteOrderByWithAggregationInputSchema,
  ChecklistCompleteOrderByWithRelationInputSchema: () => ChecklistCompleteOrderByWithRelationInputSchema,
  ChecklistCompleteRelationFilterSchema: () => ChecklistCompleteRelationFilterSchema,
  ChecklistCompleteScalarFieldEnumSchema: () => ChecklistCompleteScalarFieldEnumSchema,
  ChecklistCompleteScalarWhereInputSchema: () => ChecklistCompleteScalarWhereInputSchema,
  ChecklistCompleteScalarWhereWithAggregatesInputSchema: () => ChecklistCompleteScalarWhereWithAggregatesInputSchema,
  ChecklistCompleteSchema: () => ChecklistCompleteSchema,
  ChecklistCompleteSelectSchema: () => ChecklistCompleteSelectSchema,
  ChecklistCompleteSumOrderByAggregateInputSchema: () => ChecklistCompleteSumOrderByAggregateInputSchema,
  ChecklistCompleteUncheckedCreateInputSchema: () => ChecklistCompleteUncheckedCreateInputSchema,
  ChecklistCompleteUncheckedCreateNestedManyWithoutChecklistInputSchema: () => ChecklistCompleteUncheckedCreateNestedManyWithoutChecklistInputSchema,
  ChecklistCompleteUncheckedCreateNestedManyWithoutCompletedByInputSchema: () => ChecklistCompleteUncheckedCreateNestedManyWithoutCompletedByInputSchema,
  ChecklistCompleteUncheckedCreateWithoutChecklistInputSchema: () => ChecklistCompleteUncheckedCreateWithoutChecklistInputSchema,
  ChecklistCompleteUncheckedCreateWithoutCompletedByInputSchema: () => ChecklistCompleteUncheckedCreateWithoutCompletedByInputSchema,
  ChecklistCompleteUncheckedCreateWithoutItemsInputSchema: () => ChecklistCompleteUncheckedCreateWithoutItemsInputSchema,
  ChecklistCompleteUncheckedUpdateInputSchema: () => ChecklistCompleteUncheckedUpdateInputSchema,
  ChecklistCompleteUncheckedUpdateManyInputSchema: () => ChecklistCompleteUncheckedUpdateManyInputSchema,
  ChecklistCompleteUncheckedUpdateManyWithoutChecklistInputSchema: () => ChecklistCompleteUncheckedUpdateManyWithoutChecklistInputSchema,
  ChecklistCompleteUncheckedUpdateManyWithoutChecklistNestedInputSchema: () => ChecklistCompleteUncheckedUpdateManyWithoutChecklistNestedInputSchema,
  ChecklistCompleteUncheckedUpdateManyWithoutCompletedByInputSchema: () => ChecklistCompleteUncheckedUpdateManyWithoutCompletedByInputSchema,
  ChecklistCompleteUncheckedUpdateManyWithoutCompletedByNestedInputSchema: () => ChecklistCompleteUncheckedUpdateManyWithoutCompletedByNestedInputSchema,
  ChecklistCompleteUncheckedUpdateWithoutChecklistInputSchema: () => ChecklistCompleteUncheckedUpdateWithoutChecklistInputSchema,
  ChecklistCompleteUncheckedUpdateWithoutCompletedByInputSchema: () => ChecklistCompleteUncheckedUpdateWithoutCompletedByInputSchema,
  ChecklistCompleteUncheckedUpdateWithoutItemsInputSchema: () => ChecklistCompleteUncheckedUpdateWithoutItemsInputSchema,
  ChecklistCompleteUpdateArgsSchema: () => ChecklistCompleteUpdateArgsSchema,
  ChecklistCompleteUpdateInputSchema: () => ChecklistCompleteUpdateInputSchema,
  ChecklistCompleteUpdateManyArgsSchema: () => ChecklistCompleteUpdateManyArgsSchema,
  ChecklistCompleteUpdateManyMutationInputSchema: () => ChecklistCompleteUpdateManyMutationInputSchema,
  ChecklistCompleteUpdateManyWithWhereWithoutChecklistInputSchema: () => ChecklistCompleteUpdateManyWithWhereWithoutChecklistInputSchema,
  ChecklistCompleteUpdateManyWithWhereWithoutCompletedByInputSchema: () => ChecklistCompleteUpdateManyWithWhereWithoutCompletedByInputSchema,
  ChecklistCompleteUpdateManyWithoutChecklistNestedInputSchema: () => ChecklistCompleteUpdateManyWithoutChecklistNestedInputSchema,
  ChecklistCompleteUpdateManyWithoutCompletedByNestedInputSchema: () => ChecklistCompleteUpdateManyWithoutCompletedByNestedInputSchema,
  ChecklistCompleteUpdateOneRequiredWithoutItemsNestedInputSchema: () => ChecklistCompleteUpdateOneRequiredWithoutItemsNestedInputSchema,
  ChecklistCompleteUpdateToOneWithWhereWithoutItemsInputSchema: () => ChecklistCompleteUpdateToOneWithWhereWithoutItemsInputSchema,
  ChecklistCompleteUpdateWithWhereUniqueWithoutChecklistInputSchema: () => ChecklistCompleteUpdateWithWhereUniqueWithoutChecklistInputSchema,
  ChecklistCompleteUpdateWithWhereUniqueWithoutCompletedByInputSchema: () => ChecklistCompleteUpdateWithWhereUniqueWithoutCompletedByInputSchema,
  ChecklistCompleteUpdateWithoutChecklistInputSchema: () => ChecklistCompleteUpdateWithoutChecklistInputSchema,
  ChecklistCompleteUpdateWithoutCompletedByInputSchema: () => ChecklistCompleteUpdateWithoutCompletedByInputSchema,
  ChecklistCompleteUpdateWithoutItemsInputSchema: () => ChecklistCompleteUpdateWithoutItemsInputSchema,
  ChecklistCompleteUpsertArgsSchema: () => ChecklistCompleteUpsertArgsSchema,
  ChecklistCompleteUpsertWithWhereUniqueWithoutChecklistInputSchema: () => ChecklistCompleteUpsertWithWhereUniqueWithoutChecklistInputSchema,
  ChecklistCompleteUpsertWithWhereUniqueWithoutCompletedByInputSchema: () => ChecklistCompleteUpsertWithWhereUniqueWithoutCompletedByInputSchema,
  ChecklistCompleteUpsertWithoutItemsInputSchema: () => ChecklistCompleteUpsertWithoutItemsInputSchema,
  ChecklistCompleteWhereInputSchema: () => ChecklistCompleteWhereInputSchema,
  ChecklistCompleteWhereUniqueInputSchema: () => ChecklistCompleteWhereUniqueInputSchema,
  ChecklistFrequencySchema: () => ChecklistFrequencySchema,
  ChecklistItemAggregateArgsSchema: () => ChecklistItemAggregateArgsSchema,
  ChecklistItemArgsSchema: () => ChecklistItemArgsSchema,
  ChecklistItemAvgOrderByAggregateInputSchema: () => ChecklistItemAvgOrderByAggregateInputSchema,
  ChecklistItemCompleteAggregateArgsSchema: () => ChecklistItemCompleteAggregateArgsSchema,
  ChecklistItemCompleteArgsSchema: () => ChecklistItemCompleteArgsSchema,
  ChecklistItemCompleteAvgOrderByAggregateInputSchema: () => ChecklistItemCompleteAvgOrderByAggregateInputSchema,
  ChecklistItemCompleteCountOrderByAggregateInputSchema: () => ChecklistItemCompleteCountOrderByAggregateInputSchema,
  ChecklistItemCompleteCreateArgsSchema: () => ChecklistItemCompleteCreateArgsSchema,
  ChecklistItemCompleteCreateInputSchema: () => ChecklistItemCompleteCreateInputSchema,
  ChecklistItemCompleteCreateManyAndReturnArgsSchema: () => ChecklistItemCompleteCreateManyAndReturnArgsSchema,
  ChecklistItemCompleteCreateManyArgsSchema: () => ChecklistItemCompleteCreateManyArgsSchema,
  ChecklistItemCompleteCreateManyChecklistCompleteInputEnvelopeSchema: () => ChecklistItemCompleteCreateManyChecklistCompleteInputEnvelopeSchema,
  ChecklistItemCompleteCreateManyChecklistCompleteInputSchema: () => ChecklistItemCompleteCreateManyChecklistCompleteInputSchema,
  ChecklistItemCompleteCreateManyChecklistItemInputEnvelopeSchema: () => ChecklistItemCompleteCreateManyChecklistItemInputEnvelopeSchema,
  ChecklistItemCompleteCreateManyChecklistItemInputSchema: () => ChecklistItemCompleteCreateManyChecklistItemInputSchema,
  ChecklistItemCompleteCreateManyInputSchema: () => ChecklistItemCompleteCreateManyInputSchema,
  ChecklistItemCompleteCreateNestedManyWithoutChecklistCompleteInputSchema: () => ChecklistItemCompleteCreateNestedManyWithoutChecklistCompleteInputSchema,
  ChecklistItemCompleteCreateNestedManyWithoutChecklistItemInputSchema: () => ChecklistItemCompleteCreateNestedManyWithoutChecklistItemInputSchema,
  ChecklistItemCompleteCreateOrConnectWithoutChecklistCompleteInputSchema: () => ChecklistItemCompleteCreateOrConnectWithoutChecklistCompleteInputSchema,
  ChecklistItemCompleteCreateOrConnectWithoutChecklistItemInputSchema: () => ChecklistItemCompleteCreateOrConnectWithoutChecklistItemInputSchema,
  ChecklistItemCompleteCreateWithoutChecklistCompleteInputSchema: () => ChecklistItemCompleteCreateWithoutChecklistCompleteInputSchema,
  ChecklistItemCompleteCreateWithoutChecklistItemInputSchema: () => ChecklistItemCompleteCreateWithoutChecklistItemInputSchema,
  ChecklistItemCompleteCreatephotoUrlsInputSchema: () => ChecklistItemCompleteCreatephotoUrlsInputSchema,
  ChecklistItemCompleteDeleteArgsSchema: () => ChecklistItemCompleteDeleteArgsSchema,
  ChecklistItemCompleteDeleteManyArgsSchema: () => ChecklistItemCompleteDeleteManyArgsSchema,
  ChecklistItemCompleteFindFirstArgsSchema: () => ChecklistItemCompleteFindFirstArgsSchema,
  ChecklistItemCompleteFindFirstOrThrowArgsSchema: () => ChecklistItemCompleteFindFirstOrThrowArgsSchema,
  ChecklistItemCompleteFindManyArgsSchema: () => ChecklistItemCompleteFindManyArgsSchema,
  ChecklistItemCompleteFindUniqueArgsSchema: () => ChecklistItemCompleteFindUniqueArgsSchema,
  ChecklistItemCompleteFindUniqueOrThrowArgsSchema: () => ChecklistItemCompleteFindUniqueOrThrowArgsSchema,
  ChecklistItemCompleteGroupByArgsSchema: () => ChecklistItemCompleteGroupByArgsSchema,
  ChecklistItemCompleteIncludeSchema: () => ChecklistItemCompleteIncludeSchema,
  ChecklistItemCompleteListRelationFilterSchema: () => ChecklistItemCompleteListRelationFilterSchema,
  ChecklistItemCompleteMaxOrderByAggregateInputSchema: () => ChecklistItemCompleteMaxOrderByAggregateInputSchema,
  ChecklistItemCompleteMinOrderByAggregateInputSchema: () => ChecklistItemCompleteMinOrderByAggregateInputSchema,
  ChecklistItemCompleteOrderByRelationAggregateInputSchema: () => ChecklistItemCompleteOrderByRelationAggregateInputSchema,
  ChecklistItemCompleteOrderByWithAggregationInputSchema: () => ChecklistItemCompleteOrderByWithAggregationInputSchema,
  ChecklistItemCompleteOrderByWithRelationInputSchema: () => ChecklistItemCompleteOrderByWithRelationInputSchema,
  ChecklistItemCompleteScalarFieldEnumSchema: () => ChecklistItemCompleteScalarFieldEnumSchema,
  ChecklistItemCompleteScalarWhereInputSchema: () => ChecklistItemCompleteScalarWhereInputSchema,
  ChecklistItemCompleteScalarWhereWithAggregatesInputSchema: () => ChecklistItemCompleteScalarWhereWithAggregatesInputSchema,
  ChecklistItemCompleteSchema: () => ChecklistItemCompleteSchema,
  ChecklistItemCompleteSelectSchema: () => ChecklistItemCompleteSelectSchema,
  ChecklistItemCompleteSumOrderByAggregateInputSchema: () => ChecklistItemCompleteSumOrderByAggregateInputSchema,
  ChecklistItemCompleteUncheckedCreateInputSchema: () => ChecklistItemCompleteUncheckedCreateInputSchema,
  ChecklistItemCompleteUncheckedCreateNestedManyWithoutChecklistCompleteInputSchema: () => ChecklistItemCompleteUncheckedCreateNestedManyWithoutChecklistCompleteInputSchema,
  ChecklistItemCompleteUncheckedCreateNestedManyWithoutChecklistItemInputSchema: () => ChecklistItemCompleteUncheckedCreateNestedManyWithoutChecklistItemInputSchema,
  ChecklistItemCompleteUncheckedCreateWithoutChecklistCompleteInputSchema: () => ChecklistItemCompleteUncheckedCreateWithoutChecklistCompleteInputSchema,
  ChecklistItemCompleteUncheckedCreateWithoutChecklistItemInputSchema: () => ChecklistItemCompleteUncheckedCreateWithoutChecklistItemInputSchema,
  ChecklistItemCompleteUncheckedUpdateInputSchema: () => ChecklistItemCompleteUncheckedUpdateInputSchema,
  ChecklistItemCompleteUncheckedUpdateManyInputSchema: () => ChecklistItemCompleteUncheckedUpdateManyInputSchema,
  ChecklistItemCompleteUncheckedUpdateManyWithoutChecklistCompleteInputSchema: () => ChecklistItemCompleteUncheckedUpdateManyWithoutChecklistCompleteInputSchema,
  ChecklistItemCompleteUncheckedUpdateManyWithoutChecklistCompleteNestedInputSchema: () => ChecklistItemCompleteUncheckedUpdateManyWithoutChecklistCompleteNestedInputSchema,
  ChecklistItemCompleteUncheckedUpdateManyWithoutChecklistItemInputSchema: () => ChecklistItemCompleteUncheckedUpdateManyWithoutChecklistItemInputSchema,
  ChecklistItemCompleteUncheckedUpdateManyWithoutChecklistItemNestedInputSchema: () => ChecklistItemCompleteUncheckedUpdateManyWithoutChecklistItemNestedInputSchema,
  ChecklistItemCompleteUncheckedUpdateWithoutChecklistCompleteInputSchema: () => ChecklistItemCompleteUncheckedUpdateWithoutChecklistCompleteInputSchema,
  ChecklistItemCompleteUncheckedUpdateWithoutChecklistItemInputSchema: () => ChecklistItemCompleteUncheckedUpdateWithoutChecklistItemInputSchema,
  ChecklistItemCompleteUpdateArgsSchema: () => ChecklistItemCompleteUpdateArgsSchema,
  ChecklistItemCompleteUpdateInputSchema: () => ChecklistItemCompleteUpdateInputSchema,
  ChecklistItemCompleteUpdateManyArgsSchema: () => ChecklistItemCompleteUpdateManyArgsSchema,
  ChecklistItemCompleteUpdateManyMutationInputSchema: () => ChecklistItemCompleteUpdateManyMutationInputSchema,
  ChecklistItemCompleteUpdateManyWithWhereWithoutChecklistCompleteInputSchema: () => ChecklistItemCompleteUpdateManyWithWhereWithoutChecklistCompleteInputSchema,
  ChecklistItemCompleteUpdateManyWithWhereWithoutChecklistItemInputSchema: () => ChecklistItemCompleteUpdateManyWithWhereWithoutChecklistItemInputSchema,
  ChecklistItemCompleteUpdateManyWithoutChecklistCompleteNestedInputSchema: () => ChecklistItemCompleteUpdateManyWithoutChecklistCompleteNestedInputSchema,
  ChecklistItemCompleteUpdateManyWithoutChecklistItemNestedInputSchema: () => ChecklistItemCompleteUpdateManyWithoutChecklistItemNestedInputSchema,
  ChecklistItemCompleteUpdateWithWhereUniqueWithoutChecklistCompleteInputSchema: () => ChecklistItemCompleteUpdateWithWhereUniqueWithoutChecklistCompleteInputSchema,
  ChecklistItemCompleteUpdateWithWhereUniqueWithoutChecklistItemInputSchema: () => ChecklistItemCompleteUpdateWithWhereUniqueWithoutChecklistItemInputSchema,
  ChecklistItemCompleteUpdateWithoutChecklistCompleteInputSchema: () => ChecklistItemCompleteUpdateWithoutChecklistCompleteInputSchema,
  ChecklistItemCompleteUpdateWithoutChecklistItemInputSchema: () => ChecklistItemCompleteUpdateWithoutChecklistItemInputSchema,
  ChecklistItemCompleteUpdatephotoUrlsInputSchema: () => ChecklistItemCompleteUpdatephotoUrlsInputSchema,
  ChecklistItemCompleteUpsertArgsSchema: () => ChecklistItemCompleteUpsertArgsSchema,
  ChecklistItemCompleteUpsertWithWhereUniqueWithoutChecklistCompleteInputSchema: () => ChecklistItemCompleteUpsertWithWhereUniqueWithoutChecklistCompleteInputSchema,
  ChecklistItemCompleteUpsertWithWhereUniqueWithoutChecklistItemInputSchema: () => ChecklistItemCompleteUpsertWithWhereUniqueWithoutChecklistItemInputSchema,
  ChecklistItemCompleteWhereInputSchema: () => ChecklistItemCompleteWhereInputSchema,
  ChecklistItemCompleteWhereUniqueInputSchema: () => ChecklistItemCompleteWhereUniqueInputSchema,
  ChecklistItemCountOrderByAggregateInputSchema: () => ChecklistItemCountOrderByAggregateInputSchema,
  ChecklistItemCountOutputTypeArgsSchema: () => ChecklistItemCountOutputTypeArgsSchema,
  ChecklistItemCountOutputTypeSelectSchema: () => ChecklistItemCountOutputTypeSelectSchema,
  ChecklistItemCreateArgsSchema: () => ChecklistItemCreateArgsSchema,
  ChecklistItemCreateInputSchema: () => ChecklistItemCreateInputSchema,
  ChecklistItemCreateManyAndReturnArgsSchema: () => ChecklistItemCreateManyAndReturnArgsSchema,
  ChecklistItemCreateManyArgsSchema: () => ChecklistItemCreateManyArgsSchema,
  ChecklistItemCreateManyChecklistInputEnvelopeSchema: () => ChecklistItemCreateManyChecklistInputEnvelopeSchema,
  ChecklistItemCreateManyChecklistInputSchema: () => ChecklistItemCreateManyChecklistInputSchema,
  ChecklistItemCreateManyInputSchema: () => ChecklistItemCreateManyInputSchema,
  ChecklistItemCreateNestedManyWithoutChecklistInputSchema: () => ChecklistItemCreateNestedManyWithoutChecklistInputSchema,
  ChecklistItemCreateNestedOneWithoutCompletionsInputSchema: () => ChecklistItemCreateNestedOneWithoutCompletionsInputSchema,
  ChecklistItemCreateOrConnectWithoutChecklistInputSchema: () => ChecklistItemCreateOrConnectWithoutChecklistInputSchema,
  ChecklistItemCreateOrConnectWithoutCompletionsInputSchema: () => ChecklistItemCreateOrConnectWithoutCompletionsInputSchema,
  ChecklistItemCreateWithoutChecklistInputSchema: () => ChecklistItemCreateWithoutChecklistInputSchema,
  ChecklistItemCreateWithoutCompletionsInputSchema: () => ChecklistItemCreateWithoutCompletionsInputSchema,
  ChecklistItemDeleteArgsSchema: () => ChecklistItemDeleteArgsSchema,
  ChecklistItemDeleteManyArgsSchema: () => ChecklistItemDeleteManyArgsSchema,
  ChecklistItemFindFirstArgsSchema: () => ChecklistItemFindFirstArgsSchema,
  ChecklistItemFindFirstOrThrowArgsSchema: () => ChecklistItemFindFirstOrThrowArgsSchema,
  ChecklistItemFindManyArgsSchema: () => ChecklistItemFindManyArgsSchema,
  ChecklistItemFindUniqueArgsSchema: () => ChecklistItemFindUniqueArgsSchema,
  ChecklistItemFindUniqueOrThrowArgsSchema: () => ChecklistItemFindUniqueOrThrowArgsSchema,
  ChecklistItemGroupByArgsSchema: () => ChecklistItemGroupByArgsSchema,
  ChecklistItemIncludeSchema: () => ChecklistItemIncludeSchema,
  ChecklistItemListRelationFilterSchema: () => ChecklistItemListRelationFilterSchema,
  ChecklistItemMaxOrderByAggregateInputSchema: () => ChecklistItemMaxOrderByAggregateInputSchema,
  ChecklistItemMinOrderByAggregateInputSchema: () => ChecklistItemMinOrderByAggregateInputSchema,
  ChecklistItemOrderByRelationAggregateInputSchema: () => ChecklistItemOrderByRelationAggregateInputSchema,
  ChecklistItemOrderByWithAggregationInputSchema: () => ChecklistItemOrderByWithAggregationInputSchema,
  ChecklistItemOrderByWithRelationInputSchema: () => ChecklistItemOrderByWithRelationInputSchema,
  ChecklistItemRelationFilterSchema: () => ChecklistItemRelationFilterSchema,
  ChecklistItemScalarFieldEnumSchema: () => ChecklistItemScalarFieldEnumSchema,
  ChecklistItemScalarWhereInputSchema: () => ChecklistItemScalarWhereInputSchema,
  ChecklistItemScalarWhereWithAggregatesInputSchema: () => ChecklistItemScalarWhereWithAggregatesInputSchema,
  ChecklistItemSchema: () => ChecklistItemSchema,
  ChecklistItemSelectSchema: () => ChecklistItemSelectSchema,
  ChecklistItemSumOrderByAggregateInputSchema: () => ChecklistItemSumOrderByAggregateInputSchema,
  ChecklistItemTypeSchema: () => ChecklistItemTypeSchema,
  ChecklistItemUncheckedCreateInputSchema: () => ChecklistItemUncheckedCreateInputSchema,
  ChecklistItemUncheckedCreateNestedManyWithoutChecklistInputSchema: () => ChecklistItemUncheckedCreateNestedManyWithoutChecklistInputSchema,
  ChecklistItemUncheckedCreateWithoutChecklistInputSchema: () => ChecklistItemUncheckedCreateWithoutChecklistInputSchema,
  ChecklistItemUncheckedCreateWithoutCompletionsInputSchema: () => ChecklistItemUncheckedCreateWithoutCompletionsInputSchema,
  ChecklistItemUncheckedUpdateInputSchema: () => ChecklistItemUncheckedUpdateInputSchema,
  ChecklistItemUncheckedUpdateManyInputSchema: () => ChecklistItemUncheckedUpdateManyInputSchema,
  ChecklistItemUncheckedUpdateManyWithoutChecklistInputSchema: () => ChecklistItemUncheckedUpdateManyWithoutChecklistInputSchema,
  ChecklistItemUncheckedUpdateManyWithoutChecklistNestedInputSchema: () => ChecklistItemUncheckedUpdateManyWithoutChecklistNestedInputSchema,
  ChecklistItemUncheckedUpdateWithoutChecklistInputSchema: () => ChecklistItemUncheckedUpdateWithoutChecklistInputSchema,
  ChecklistItemUncheckedUpdateWithoutCompletionsInputSchema: () => ChecklistItemUncheckedUpdateWithoutCompletionsInputSchema,
  ChecklistItemUpdateArgsSchema: () => ChecklistItemUpdateArgsSchema,
  ChecklistItemUpdateInputSchema: () => ChecklistItemUpdateInputSchema,
  ChecklistItemUpdateManyArgsSchema: () => ChecklistItemUpdateManyArgsSchema,
  ChecklistItemUpdateManyMutationInputSchema: () => ChecklistItemUpdateManyMutationInputSchema,
  ChecklistItemUpdateManyWithWhereWithoutChecklistInputSchema: () => ChecklistItemUpdateManyWithWhereWithoutChecklistInputSchema,
  ChecklistItemUpdateManyWithoutChecklistNestedInputSchema: () => ChecklistItemUpdateManyWithoutChecklistNestedInputSchema,
  ChecklistItemUpdateOneRequiredWithoutCompletionsNestedInputSchema: () => ChecklistItemUpdateOneRequiredWithoutCompletionsNestedInputSchema,
  ChecklistItemUpdateToOneWithWhereWithoutCompletionsInputSchema: () => ChecklistItemUpdateToOneWithWhereWithoutCompletionsInputSchema,
  ChecklistItemUpdateWithWhereUniqueWithoutChecklistInputSchema: () => ChecklistItemUpdateWithWhereUniqueWithoutChecklistInputSchema,
  ChecklistItemUpdateWithoutChecklistInputSchema: () => ChecklistItemUpdateWithoutChecklistInputSchema,
  ChecklistItemUpdateWithoutCompletionsInputSchema: () => ChecklistItemUpdateWithoutCompletionsInputSchema,
  ChecklistItemUpsertArgsSchema: () => ChecklistItemUpsertArgsSchema,
  ChecklistItemUpsertWithWhereUniqueWithoutChecklistInputSchema: () => ChecklistItemUpsertWithWhereUniqueWithoutChecklistInputSchema,
  ChecklistItemUpsertWithoutCompletionsInputSchema: () => ChecklistItemUpsertWithoutCompletionsInputSchema,
  ChecklistItemWhereInputSchema: () => ChecklistItemWhereInputSchema,
  ChecklistItemWhereUniqueInputSchema: () => ChecklistItemWhereUniqueInputSchema,
  ChecklistStatusSchema: () => ChecklistStatusSchema,
  ConstraintTypeSchema: () => ConstraintTypeSchema,
  CookBookAggregateArgsSchema: () => CookBookAggregateArgsSchema,
  CookBookArgsSchema: () => CookBookArgsSchema,
  CookBookAvgOrderByAggregateInputSchema: () => CookBookAvgOrderByAggregateInputSchema,
  CookBookCountOrderByAggregateInputSchema: () => CookBookCountOrderByAggregateInputSchema,
  CookBookCountOutputTypeArgsSchema: () => CookBookCountOutputTypeArgsSchema,
  CookBookCountOutputTypeSelectSchema: () => CookBookCountOutputTypeSelectSchema,
  CookBookCreateArgsSchema: () => CookBookCreateArgsSchema,
  CookBookCreateInputSchema: () => CookBookCreateInputSchema,
  CookBookCreateManyAndReturnArgsSchema: () => CookBookCreateManyAndReturnArgsSchema,
  CookBookCreateManyArgsSchema: () => CookBookCreateManyArgsSchema,
  CookBookCreateManyInputSchema: () => CookBookCreateManyInputSchema,
  CookBookCreateManyRestaurantInputEnvelopeSchema: () => CookBookCreateManyRestaurantInputEnvelopeSchema,
  CookBookCreateManyRestaurantInputSchema: () => CookBookCreateManyRestaurantInputSchema,
  CookBookCreateNestedManyWithoutRestaurantInputSchema: () => CookBookCreateNestedManyWithoutRestaurantInputSchema,
  CookBookCreateNestedOneWithoutRecipesInputSchema: () => CookBookCreateNestedOneWithoutRecipesInputSchema,
  CookBookCreateOrConnectWithoutRecipesInputSchema: () => CookBookCreateOrConnectWithoutRecipesInputSchema,
  CookBookCreateOrConnectWithoutRestaurantInputSchema: () => CookBookCreateOrConnectWithoutRestaurantInputSchema,
  CookBookCreateWithoutRecipesInputSchema: () => CookBookCreateWithoutRecipesInputSchema,
  CookBookCreateWithoutRestaurantInputSchema: () => CookBookCreateWithoutRestaurantInputSchema,
  CookBookDeleteArgsSchema: () => CookBookDeleteArgsSchema,
  CookBookDeleteManyArgsSchema: () => CookBookDeleteManyArgsSchema,
  CookBookFindFirstArgsSchema: () => CookBookFindFirstArgsSchema,
  CookBookFindFirstOrThrowArgsSchema: () => CookBookFindFirstOrThrowArgsSchema,
  CookBookFindManyArgsSchema: () => CookBookFindManyArgsSchema,
  CookBookFindUniqueArgsSchema: () => CookBookFindUniqueArgsSchema,
  CookBookFindUniqueOrThrowArgsSchema: () => CookBookFindUniqueOrThrowArgsSchema,
  CookBookGroupByArgsSchema: () => CookBookGroupByArgsSchema,
  CookBookIncludeSchema: () => CookBookIncludeSchema,
  CookBookListRelationFilterSchema: () => CookBookListRelationFilterSchema,
  CookBookMaxOrderByAggregateInputSchema: () => CookBookMaxOrderByAggregateInputSchema,
  CookBookMinOrderByAggregateInputSchema: () => CookBookMinOrderByAggregateInputSchema,
  CookBookOrderByRelationAggregateInputSchema: () => CookBookOrderByRelationAggregateInputSchema,
  CookBookOrderByWithAggregationInputSchema: () => CookBookOrderByWithAggregationInputSchema,
  CookBookOrderByWithRelationInputSchema: () => CookBookOrderByWithRelationInputSchema,
  CookBookRelationFilterSchema: () => CookBookRelationFilterSchema,
  CookBookScalarFieldEnumSchema: () => CookBookScalarFieldEnumSchema,
  CookBookScalarWhereInputSchema: () => CookBookScalarWhereInputSchema,
  CookBookScalarWhereWithAggregatesInputSchema: () => CookBookScalarWhereWithAggregatesInputSchema,
  CookBookSchema: () => CookBookSchema,
  CookBookSelectSchema: () => CookBookSelectSchema,
  CookBookSumOrderByAggregateInputSchema: () => CookBookSumOrderByAggregateInputSchema,
  CookBookUncheckedCreateInputSchema: () => CookBookUncheckedCreateInputSchema,
  CookBookUncheckedCreateNestedManyWithoutRestaurantInputSchema: () => CookBookUncheckedCreateNestedManyWithoutRestaurantInputSchema,
  CookBookUncheckedCreateWithoutRecipesInputSchema: () => CookBookUncheckedCreateWithoutRecipesInputSchema,
  CookBookUncheckedCreateWithoutRestaurantInputSchema: () => CookBookUncheckedCreateWithoutRestaurantInputSchema,
  CookBookUncheckedUpdateInputSchema: () => CookBookUncheckedUpdateInputSchema,
  CookBookUncheckedUpdateManyInputSchema: () => CookBookUncheckedUpdateManyInputSchema,
  CookBookUncheckedUpdateManyWithoutRestaurantInputSchema: () => CookBookUncheckedUpdateManyWithoutRestaurantInputSchema,
  CookBookUncheckedUpdateManyWithoutRestaurantNestedInputSchema: () => CookBookUncheckedUpdateManyWithoutRestaurantNestedInputSchema,
  CookBookUncheckedUpdateWithoutRecipesInputSchema: () => CookBookUncheckedUpdateWithoutRecipesInputSchema,
  CookBookUncheckedUpdateWithoutRestaurantInputSchema: () => CookBookUncheckedUpdateWithoutRestaurantInputSchema,
  CookBookUpdateArgsSchema: () => CookBookUpdateArgsSchema,
  CookBookUpdateInputSchema: () => CookBookUpdateInputSchema,
  CookBookUpdateManyArgsSchema: () => CookBookUpdateManyArgsSchema,
  CookBookUpdateManyMutationInputSchema: () => CookBookUpdateManyMutationInputSchema,
  CookBookUpdateManyWithWhereWithoutRestaurantInputSchema: () => CookBookUpdateManyWithWhereWithoutRestaurantInputSchema,
  CookBookUpdateManyWithoutRestaurantNestedInputSchema: () => CookBookUpdateManyWithoutRestaurantNestedInputSchema,
  CookBookUpdateOneRequiredWithoutRecipesNestedInputSchema: () => CookBookUpdateOneRequiredWithoutRecipesNestedInputSchema,
  CookBookUpdateToOneWithWhereWithoutRecipesInputSchema: () => CookBookUpdateToOneWithWhereWithoutRecipesInputSchema,
  CookBookUpdateWithWhereUniqueWithoutRestaurantInputSchema: () => CookBookUpdateWithWhereUniqueWithoutRestaurantInputSchema,
  CookBookUpdateWithoutRecipesInputSchema: () => CookBookUpdateWithoutRecipesInputSchema,
  CookBookUpdateWithoutRestaurantInputSchema: () => CookBookUpdateWithoutRestaurantInputSchema,
  CookBookUpsertArgsSchema: () => CookBookUpsertArgsSchema,
  CookBookUpsertWithWhereUniqueWithoutRestaurantInputSchema: () => CookBookUpsertWithWhereUniqueWithoutRestaurantInputSchema,
  CookBookUpsertWithoutRecipesInputSchema: () => CookBookUpsertWithoutRecipesInputSchema,
  CookBookWhereInputSchema: () => CookBookWhereInputSchema,
  CookBookWhereUniqueInputSchema: () => CookBookWhereUniqueInputSchema,
  CustomerFeedbackAggregateArgsSchema: () => CustomerFeedbackAggregateArgsSchema,
  CustomerFeedbackArgsSchema: () => CustomerFeedbackArgsSchema,
  CustomerFeedbackAvgOrderByAggregateInputSchema: () => CustomerFeedbackAvgOrderByAggregateInputSchema,
  CustomerFeedbackCountOrderByAggregateInputSchema: () => CustomerFeedbackCountOrderByAggregateInputSchema,
  CustomerFeedbackCreateArgsSchema: () => CustomerFeedbackCreateArgsSchema,
  CustomerFeedbackCreateInputSchema: () => CustomerFeedbackCreateInputSchema,
  CustomerFeedbackCreateManyAndReturnArgsSchema: () => CustomerFeedbackCreateManyAndReturnArgsSchema,
  CustomerFeedbackCreateManyArgsSchema: () => CustomerFeedbackCreateManyArgsSchema,
  CustomerFeedbackCreateManyInputSchema: () => CustomerFeedbackCreateManyInputSchema,
  CustomerFeedbackCreateManyMenuItemInputEnvelopeSchema: () => CustomerFeedbackCreateManyMenuItemInputEnvelopeSchema,
  CustomerFeedbackCreateManyMenuItemInputSchema: () => CustomerFeedbackCreateManyMenuItemInputSchema,
  CustomerFeedbackCreateManyRespondedByInputEnvelopeSchema: () => CustomerFeedbackCreateManyRespondedByInputEnvelopeSchema,
  CustomerFeedbackCreateManyRespondedByInputSchema: () => CustomerFeedbackCreateManyRespondedByInputSchema,
  CustomerFeedbackCreateManyRestaurantInputEnvelopeSchema: () => CustomerFeedbackCreateManyRestaurantInputEnvelopeSchema,
  CustomerFeedbackCreateManyRestaurantInputSchema: () => CustomerFeedbackCreateManyRestaurantInputSchema,
  CustomerFeedbackCreateNestedManyWithoutMenuItemInputSchema: () => CustomerFeedbackCreateNestedManyWithoutMenuItemInputSchema,
  CustomerFeedbackCreateNestedManyWithoutRespondedByInputSchema: () => CustomerFeedbackCreateNestedManyWithoutRespondedByInputSchema,
  CustomerFeedbackCreateNestedManyWithoutRestaurantInputSchema: () => CustomerFeedbackCreateNestedManyWithoutRestaurantInputSchema,
  CustomerFeedbackCreateOrConnectWithoutMenuItemInputSchema: () => CustomerFeedbackCreateOrConnectWithoutMenuItemInputSchema,
  CustomerFeedbackCreateOrConnectWithoutRespondedByInputSchema: () => CustomerFeedbackCreateOrConnectWithoutRespondedByInputSchema,
  CustomerFeedbackCreateOrConnectWithoutRestaurantInputSchema: () => CustomerFeedbackCreateOrConnectWithoutRestaurantInputSchema,
  CustomerFeedbackCreateWithoutMenuItemInputSchema: () => CustomerFeedbackCreateWithoutMenuItemInputSchema,
  CustomerFeedbackCreateWithoutRespondedByInputSchema: () => CustomerFeedbackCreateWithoutRespondedByInputSchema,
  CustomerFeedbackCreateWithoutRestaurantInputSchema: () => CustomerFeedbackCreateWithoutRestaurantInputSchema,
  CustomerFeedbackCreatetagsInputSchema: () => CustomerFeedbackCreatetagsInputSchema,
  CustomerFeedbackDeleteArgsSchema: () => CustomerFeedbackDeleteArgsSchema,
  CustomerFeedbackDeleteManyArgsSchema: () => CustomerFeedbackDeleteManyArgsSchema,
  CustomerFeedbackFindFirstArgsSchema: () => CustomerFeedbackFindFirstArgsSchema,
  CustomerFeedbackFindFirstOrThrowArgsSchema: () => CustomerFeedbackFindFirstOrThrowArgsSchema,
  CustomerFeedbackFindManyArgsSchema: () => CustomerFeedbackFindManyArgsSchema,
  CustomerFeedbackFindUniqueArgsSchema: () => CustomerFeedbackFindUniqueArgsSchema,
  CustomerFeedbackFindUniqueOrThrowArgsSchema: () => CustomerFeedbackFindUniqueOrThrowArgsSchema,
  CustomerFeedbackGroupByArgsSchema: () => CustomerFeedbackGroupByArgsSchema,
  CustomerFeedbackIncludeSchema: () => CustomerFeedbackIncludeSchema,
  CustomerFeedbackListRelationFilterSchema: () => CustomerFeedbackListRelationFilterSchema,
  CustomerFeedbackMaxOrderByAggregateInputSchema: () => CustomerFeedbackMaxOrderByAggregateInputSchema,
  CustomerFeedbackMinOrderByAggregateInputSchema: () => CustomerFeedbackMinOrderByAggregateInputSchema,
  CustomerFeedbackOrderByRelationAggregateInputSchema: () => CustomerFeedbackOrderByRelationAggregateInputSchema,
  CustomerFeedbackOrderByWithAggregationInputSchema: () => CustomerFeedbackOrderByWithAggregationInputSchema,
  CustomerFeedbackOrderByWithRelationInputSchema: () => CustomerFeedbackOrderByWithRelationInputSchema,
  CustomerFeedbackScalarFieldEnumSchema: () => CustomerFeedbackScalarFieldEnumSchema,
  CustomerFeedbackScalarWhereInputSchema: () => CustomerFeedbackScalarWhereInputSchema,
  CustomerFeedbackScalarWhereWithAggregatesInputSchema: () => CustomerFeedbackScalarWhereWithAggregatesInputSchema,
  CustomerFeedbackSchema: () => CustomerFeedbackSchema,
  CustomerFeedbackSelectSchema: () => CustomerFeedbackSelectSchema,
  CustomerFeedbackSumOrderByAggregateInputSchema: () => CustomerFeedbackSumOrderByAggregateInputSchema,
  CustomerFeedbackUncheckedCreateInputSchema: () => CustomerFeedbackUncheckedCreateInputSchema,
  CustomerFeedbackUncheckedCreateNestedManyWithoutMenuItemInputSchema: () => CustomerFeedbackUncheckedCreateNestedManyWithoutMenuItemInputSchema,
  CustomerFeedbackUncheckedCreateNestedManyWithoutRespondedByInputSchema: () => CustomerFeedbackUncheckedCreateNestedManyWithoutRespondedByInputSchema,
  CustomerFeedbackUncheckedCreateNestedManyWithoutRestaurantInputSchema: () => CustomerFeedbackUncheckedCreateNestedManyWithoutRestaurantInputSchema,
  CustomerFeedbackUncheckedCreateWithoutMenuItemInputSchema: () => CustomerFeedbackUncheckedCreateWithoutMenuItemInputSchema,
  CustomerFeedbackUncheckedCreateWithoutRespondedByInputSchema: () => CustomerFeedbackUncheckedCreateWithoutRespondedByInputSchema,
  CustomerFeedbackUncheckedCreateWithoutRestaurantInputSchema: () => CustomerFeedbackUncheckedCreateWithoutRestaurantInputSchema,
  CustomerFeedbackUncheckedUpdateInputSchema: () => CustomerFeedbackUncheckedUpdateInputSchema,
  CustomerFeedbackUncheckedUpdateManyInputSchema: () => CustomerFeedbackUncheckedUpdateManyInputSchema,
  CustomerFeedbackUncheckedUpdateManyWithoutMenuItemInputSchema: () => CustomerFeedbackUncheckedUpdateManyWithoutMenuItemInputSchema,
  CustomerFeedbackUncheckedUpdateManyWithoutMenuItemNestedInputSchema: () => CustomerFeedbackUncheckedUpdateManyWithoutMenuItemNestedInputSchema,
  CustomerFeedbackUncheckedUpdateManyWithoutRespondedByInputSchema: () => CustomerFeedbackUncheckedUpdateManyWithoutRespondedByInputSchema,
  CustomerFeedbackUncheckedUpdateManyWithoutRespondedByNestedInputSchema: () => CustomerFeedbackUncheckedUpdateManyWithoutRespondedByNestedInputSchema,
  CustomerFeedbackUncheckedUpdateManyWithoutRestaurantInputSchema: () => CustomerFeedbackUncheckedUpdateManyWithoutRestaurantInputSchema,
  CustomerFeedbackUncheckedUpdateManyWithoutRestaurantNestedInputSchema: () => CustomerFeedbackUncheckedUpdateManyWithoutRestaurantNestedInputSchema,
  CustomerFeedbackUncheckedUpdateWithoutMenuItemInputSchema: () => CustomerFeedbackUncheckedUpdateWithoutMenuItemInputSchema,
  CustomerFeedbackUncheckedUpdateWithoutRespondedByInputSchema: () => CustomerFeedbackUncheckedUpdateWithoutRespondedByInputSchema,
  CustomerFeedbackUncheckedUpdateWithoutRestaurantInputSchema: () => CustomerFeedbackUncheckedUpdateWithoutRestaurantInputSchema,
  CustomerFeedbackUpdateArgsSchema: () => CustomerFeedbackUpdateArgsSchema,
  CustomerFeedbackUpdateInputSchema: () => CustomerFeedbackUpdateInputSchema,
  CustomerFeedbackUpdateManyArgsSchema: () => CustomerFeedbackUpdateManyArgsSchema,
  CustomerFeedbackUpdateManyMutationInputSchema: () => CustomerFeedbackUpdateManyMutationInputSchema,
  CustomerFeedbackUpdateManyWithWhereWithoutMenuItemInputSchema: () => CustomerFeedbackUpdateManyWithWhereWithoutMenuItemInputSchema,
  CustomerFeedbackUpdateManyWithWhereWithoutRespondedByInputSchema: () => CustomerFeedbackUpdateManyWithWhereWithoutRespondedByInputSchema,
  CustomerFeedbackUpdateManyWithWhereWithoutRestaurantInputSchema: () => CustomerFeedbackUpdateManyWithWhereWithoutRestaurantInputSchema,
  CustomerFeedbackUpdateManyWithoutMenuItemNestedInputSchema: () => CustomerFeedbackUpdateManyWithoutMenuItemNestedInputSchema,
  CustomerFeedbackUpdateManyWithoutRespondedByNestedInputSchema: () => CustomerFeedbackUpdateManyWithoutRespondedByNestedInputSchema,
  CustomerFeedbackUpdateManyWithoutRestaurantNestedInputSchema: () => CustomerFeedbackUpdateManyWithoutRestaurantNestedInputSchema,
  CustomerFeedbackUpdateWithWhereUniqueWithoutMenuItemInputSchema: () => CustomerFeedbackUpdateWithWhereUniqueWithoutMenuItemInputSchema,
  CustomerFeedbackUpdateWithWhereUniqueWithoutRespondedByInputSchema: () => CustomerFeedbackUpdateWithWhereUniqueWithoutRespondedByInputSchema,
  CustomerFeedbackUpdateWithWhereUniqueWithoutRestaurantInputSchema: () => CustomerFeedbackUpdateWithWhereUniqueWithoutRestaurantInputSchema,
  CustomerFeedbackUpdateWithoutMenuItemInputSchema: () => CustomerFeedbackUpdateWithoutMenuItemInputSchema,
  CustomerFeedbackUpdateWithoutRespondedByInputSchema: () => CustomerFeedbackUpdateWithoutRespondedByInputSchema,
  CustomerFeedbackUpdateWithoutRestaurantInputSchema: () => CustomerFeedbackUpdateWithoutRestaurantInputSchema,
  CustomerFeedbackUpdatetagsInputSchema: () => CustomerFeedbackUpdatetagsInputSchema,
  CustomerFeedbackUpsertArgsSchema: () => CustomerFeedbackUpsertArgsSchema,
  CustomerFeedbackUpsertWithWhereUniqueWithoutMenuItemInputSchema: () => CustomerFeedbackUpsertWithWhereUniqueWithoutMenuItemInputSchema,
  CustomerFeedbackUpsertWithWhereUniqueWithoutRespondedByInputSchema: () => CustomerFeedbackUpsertWithWhereUniqueWithoutRespondedByInputSchema,
  CustomerFeedbackUpsertWithWhereUniqueWithoutRestaurantInputSchema: () => CustomerFeedbackUpsertWithWhereUniqueWithoutRestaurantInputSchema,
  CustomerFeedbackWhereInputSchema: () => CustomerFeedbackWhereInputSchema,
  CustomerFeedbackWhereUniqueInputSchema: () => CustomerFeedbackWhereUniqueInputSchema,
  DateTimeFieldUpdateOperationsInputSchema: () => DateTimeFieldUpdateOperationsInputSchema,
  DateTimeFilterSchema: () => DateTimeFilterSchema,
  DateTimeNullableFilterSchema: () => DateTimeNullableFilterSchema,
  DateTimeNullableWithAggregatesFilterSchema: () => DateTimeNullableWithAggregatesFilterSchema,
  DateTimeWithAggregatesFilterSchema: () => DateTimeWithAggregatesFilterSchema,
  DayOfWeekSchema: () => DayOfWeekSchema,
  DietaryRestrictionAggregateArgsSchema: () => DietaryRestrictionAggregateArgsSchema,
  DietaryRestrictionArgsSchema: () => DietaryRestrictionArgsSchema,
  DietaryRestrictionAvgOrderByAggregateInputSchema: () => DietaryRestrictionAvgOrderByAggregateInputSchema,
  DietaryRestrictionCountOrderByAggregateInputSchema: () => DietaryRestrictionCountOrderByAggregateInputSchema,
  DietaryRestrictionCountOutputTypeArgsSchema: () => DietaryRestrictionCountOutputTypeArgsSchema,
  DietaryRestrictionCountOutputTypeSelectSchema: () => DietaryRestrictionCountOutputTypeSelectSchema,
  DietaryRestrictionCreateArgsSchema: () => DietaryRestrictionCreateArgsSchema,
  DietaryRestrictionCreateInputSchema: () => DietaryRestrictionCreateInputSchema,
  DietaryRestrictionCreateManyAndReturnArgsSchema: () => DietaryRestrictionCreateManyAndReturnArgsSchema,
  DietaryRestrictionCreateManyArgsSchema: () => DietaryRestrictionCreateManyArgsSchema,
  DietaryRestrictionCreateManyInputSchema: () => DietaryRestrictionCreateManyInputSchema,
  DietaryRestrictionCreateNestedManyWithoutMenuItemsInputSchema: () => DietaryRestrictionCreateNestedManyWithoutMenuItemsInputSchema,
  DietaryRestrictionCreateNestedManyWithoutRecipesInputSchema: () => DietaryRestrictionCreateNestedManyWithoutRecipesInputSchema,
  DietaryRestrictionCreateNestedOneWithoutIngredientsInputSchema: () => DietaryRestrictionCreateNestedOneWithoutIngredientsInputSchema,
  DietaryRestrictionCreateOrConnectWithoutIngredientsInputSchema: () => DietaryRestrictionCreateOrConnectWithoutIngredientsInputSchema,
  DietaryRestrictionCreateOrConnectWithoutMenuItemsInputSchema: () => DietaryRestrictionCreateOrConnectWithoutMenuItemsInputSchema,
  DietaryRestrictionCreateOrConnectWithoutRecipesInputSchema: () => DietaryRestrictionCreateOrConnectWithoutRecipesInputSchema,
  DietaryRestrictionCreateWithoutIngredientsInputSchema: () => DietaryRestrictionCreateWithoutIngredientsInputSchema,
  DietaryRestrictionCreateWithoutMenuItemsInputSchema: () => DietaryRestrictionCreateWithoutMenuItemsInputSchema,
  DietaryRestrictionCreateWithoutRecipesInputSchema: () => DietaryRestrictionCreateWithoutRecipesInputSchema,
  DietaryRestrictionDeleteArgsSchema: () => DietaryRestrictionDeleteArgsSchema,
  DietaryRestrictionDeleteManyArgsSchema: () => DietaryRestrictionDeleteManyArgsSchema,
  DietaryRestrictionFindFirstArgsSchema: () => DietaryRestrictionFindFirstArgsSchema,
  DietaryRestrictionFindFirstOrThrowArgsSchema: () => DietaryRestrictionFindFirstOrThrowArgsSchema,
  DietaryRestrictionFindManyArgsSchema: () => DietaryRestrictionFindManyArgsSchema,
  DietaryRestrictionFindUniqueArgsSchema: () => DietaryRestrictionFindUniqueArgsSchema,
  DietaryRestrictionFindUniqueOrThrowArgsSchema: () => DietaryRestrictionFindUniqueOrThrowArgsSchema,
  DietaryRestrictionGroupByArgsSchema: () => DietaryRestrictionGroupByArgsSchema,
  DietaryRestrictionIncludeSchema: () => DietaryRestrictionIncludeSchema,
  DietaryRestrictionListRelationFilterSchema: () => DietaryRestrictionListRelationFilterSchema,
  DietaryRestrictionMaxOrderByAggregateInputSchema: () => DietaryRestrictionMaxOrderByAggregateInputSchema,
  DietaryRestrictionMinOrderByAggregateInputSchema: () => DietaryRestrictionMinOrderByAggregateInputSchema,
  DietaryRestrictionNullableRelationFilterSchema: () => DietaryRestrictionNullableRelationFilterSchema,
  DietaryRestrictionOrderByRelationAggregateInputSchema: () => DietaryRestrictionOrderByRelationAggregateInputSchema,
  DietaryRestrictionOrderByWithAggregationInputSchema: () => DietaryRestrictionOrderByWithAggregationInputSchema,
  DietaryRestrictionOrderByWithRelationInputSchema: () => DietaryRestrictionOrderByWithRelationInputSchema,
  DietaryRestrictionScalarFieldEnumSchema: () => DietaryRestrictionScalarFieldEnumSchema,
  DietaryRestrictionScalarWhereInputSchema: () => DietaryRestrictionScalarWhereInputSchema,
  DietaryRestrictionScalarWhereWithAggregatesInputSchema: () => DietaryRestrictionScalarWhereWithAggregatesInputSchema,
  DietaryRestrictionSchema: () => DietaryRestrictionSchema,
  DietaryRestrictionSelectSchema: () => DietaryRestrictionSelectSchema,
  DietaryRestrictionSumOrderByAggregateInputSchema: () => DietaryRestrictionSumOrderByAggregateInputSchema,
  DietaryRestrictionUncheckedCreateInputSchema: () => DietaryRestrictionUncheckedCreateInputSchema,
  DietaryRestrictionUncheckedCreateNestedManyWithoutMenuItemsInputSchema: () => DietaryRestrictionUncheckedCreateNestedManyWithoutMenuItemsInputSchema,
  DietaryRestrictionUncheckedCreateNestedManyWithoutRecipesInputSchema: () => DietaryRestrictionUncheckedCreateNestedManyWithoutRecipesInputSchema,
  DietaryRestrictionUncheckedCreateWithoutIngredientsInputSchema: () => DietaryRestrictionUncheckedCreateWithoutIngredientsInputSchema,
  DietaryRestrictionUncheckedCreateWithoutMenuItemsInputSchema: () => DietaryRestrictionUncheckedCreateWithoutMenuItemsInputSchema,
  DietaryRestrictionUncheckedCreateWithoutRecipesInputSchema: () => DietaryRestrictionUncheckedCreateWithoutRecipesInputSchema,
  DietaryRestrictionUncheckedUpdateInputSchema: () => DietaryRestrictionUncheckedUpdateInputSchema,
  DietaryRestrictionUncheckedUpdateManyInputSchema: () => DietaryRestrictionUncheckedUpdateManyInputSchema,
  DietaryRestrictionUncheckedUpdateManyWithoutMenuItemsInputSchema: () => DietaryRestrictionUncheckedUpdateManyWithoutMenuItemsInputSchema,
  DietaryRestrictionUncheckedUpdateManyWithoutMenuItemsNestedInputSchema: () => DietaryRestrictionUncheckedUpdateManyWithoutMenuItemsNestedInputSchema,
  DietaryRestrictionUncheckedUpdateManyWithoutRecipesInputSchema: () => DietaryRestrictionUncheckedUpdateManyWithoutRecipesInputSchema,
  DietaryRestrictionUncheckedUpdateManyWithoutRecipesNestedInputSchema: () => DietaryRestrictionUncheckedUpdateManyWithoutRecipesNestedInputSchema,
  DietaryRestrictionUncheckedUpdateWithoutIngredientsInputSchema: () => DietaryRestrictionUncheckedUpdateWithoutIngredientsInputSchema,
  DietaryRestrictionUncheckedUpdateWithoutMenuItemsInputSchema: () => DietaryRestrictionUncheckedUpdateWithoutMenuItemsInputSchema,
  DietaryRestrictionUncheckedUpdateWithoutRecipesInputSchema: () => DietaryRestrictionUncheckedUpdateWithoutRecipesInputSchema,
  DietaryRestrictionUpdateArgsSchema: () => DietaryRestrictionUpdateArgsSchema,
  DietaryRestrictionUpdateInputSchema: () => DietaryRestrictionUpdateInputSchema,
  DietaryRestrictionUpdateManyArgsSchema: () => DietaryRestrictionUpdateManyArgsSchema,
  DietaryRestrictionUpdateManyMutationInputSchema: () => DietaryRestrictionUpdateManyMutationInputSchema,
  DietaryRestrictionUpdateManyWithWhereWithoutMenuItemsInputSchema: () => DietaryRestrictionUpdateManyWithWhereWithoutMenuItemsInputSchema,
  DietaryRestrictionUpdateManyWithWhereWithoutRecipesInputSchema: () => DietaryRestrictionUpdateManyWithWhereWithoutRecipesInputSchema,
  DietaryRestrictionUpdateManyWithoutMenuItemsNestedInputSchema: () => DietaryRestrictionUpdateManyWithoutMenuItemsNestedInputSchema,
  DietaryRestrictionUpdateManyWithoutRecipesNestedInputSchema: () => DietaryRestrictionUpdateManyWithoutRecipesNestedInputSchema,
  DietaryRestrictionUpdateOneWithoutIngredientsNestedInputSchema: () => DietaryRestrictionUpdateOneWithoutIngredientsNestedInputSchema,
  DietaryRestrictionUpdateToOneWithWhereWithoutIngredientsInputSchema: () => DietaryRestrictionUpdateToOneWithWhereWithoutIngredientsInputSchema,
  DietaryRestrictionUpdateWithWhereUniqueWithoutMenuItemsInputSchema: () => DietaryRestrictionUpdateWithWhereUniqueWithoutMenuItemsInputSchema,
  DietaryRestrictionUpdateWithWhereUniqueWithoutRecipesInputSchema: () => DietaryRestrictionUpdateWithWhereUniqueWithoutRecipesInputSchema,
  DietaryRestrictionUpdateWithoutIngredientsInputSchema: () => DietaryRestrictionUpdateWithoutIngredientsInputSchema,
  DietaryRestrictionUpdateWithoutMenuItemsInputSchema: () => DietaryRestrictionUpdateWithoutMenuItemsInputSchema,
  DietaryRestrictionUpdateWithoutRecipesInputSchema: () => DietaryRestrictionUpdateWithoutRecipesInputSchema,
  DietaryRestrictionUpsertArgsSchema: () => DietaryRestrictionUpsertArgsSchema,
  DietaryRestrictionUpsertWithWhereUniqueWithoutMenuItemsInputSchema: () => DietaryRestrictionUpsertWithWhereUniqueWithoutMenuItemsInputSchema,
  DietaryRestrictionUpsertWithWhereUniqueWithoutRecipesInputSchema: () => DietaryRestrictionUpsertWithWhereUniqueWithoutRecipesInputSchema,
  DietaryRestrictionUpsertWithoutIngredientsInputSchema: () => DietaryRestrictionUpsertWithoutIngredientsInputSchema,
  DietaryRestrictionWhereInputSchema: () => DietaryRestrictionWhereInputSchema,
  DietaryRestrictionWhereUniqueInputSchema: () => DietaryRestrictionWhereUniqueInputSchema,
  EarlyAccessAggregateArgsSchema: () => EarlyAccessAggregateArgsSchema,
  EarlyAccessAvgOrderByAggregateInputSchema: () => EarlyAccessAvgOrderByAggregateInputSchema,
  EarlyAccessCountOrderByAggregateInputSchema: () => EarlyAccessCountOrderByAggregateInputSchema,
  EarlyAccessCreateArgsSchema: () => EarlyAccessCreateArgsSchema,
  EarlyAccessCreateInputSchema: () => EarlyAccessCreateInputSchema,
  EarlyAccessCreateManyAndReturnArgsSchema: () => EarlyAccessCreateManyAndReturnArgsSchema,
  EarlyAccessCreateManyArgsSchema: () => EarlyAccessCreateManyArgsSchema,
  EarlyAccessCreateManyInputSchema: () => EarlyAccessCreateManyInputSchema,
  EarlyAccessDeleteArgsSchema: () => EarlyAccessDeleteArgsSchema,
  EarlyAccessDeleteManyArgsSchema: () => EarlyAccessDeleteManyArgsSchema,
  EarlyAccessFindFirstArgsSchema: () => EarlyAccessFindFirstArgsSchema,
  EarlyAccessFindFirstOrThrowArgsSchema: () => EarlyAccessFindFirstOrThrowArgsSchema,
  EarlyAccessFindManyArgsSchema: () => EarlyAccessFindManyArgsSchema,
  EarlyAccessFindUniqueArgsSchema: () => EarlyAccessFindUniqueArgsSchema,
  EarlyAccessFindUniqueOrThrowArgsSchema: () => EarlyAccessFindUniqueOrThrowArgsSchema,
  EarlyAccessGroupByArgsSchema: () => EarlyAccessGroupByArgsSchema,
  EarlyAccessMaxOrderByAggregateInputSchema: () => EarlyAccessMaxOrderByAggregateInputSchema,
  EarlyAccessMinOrderByAggregateInputSchema: () => EarlyAccessMinOrderByAggregateInputSchema,
  EarlyAccessOrderByWithAggregationInputSchema: () => EarlyAccessOrderByWithAggregationInputSchema,
  EarlyAccessOrderByWithRelationInputSchema: () => EarlyAccessOrderByWithRelationInputSchema,
  EarlyAccessScalarFieldEnumSchema: () => EarlyAccessScalarFieldEnumSchema,
  EarlyAccessScalarWhereWithAggregatesInputSchema: () => EarlyAccessScalarWhereWithAggregatesInputSchema,
  EarlyAccessSchema: () => EarlyAccessSchema,
  EarlyAccessSelectSchema: () => EarlyAccessSelectSchema,
  EarlyAccessSumOrderByAggregateInputSchema: () => EarlyAccessSumOrderByAggregateInputSchema,
  EarlyAccessUncheckedCreateInputSchema: () => EarlyAccessUncheckedCreateInputSchema,
  EarlyAccessUncheckedUpdateInputSchema: () => EarlyAccessUncheckedUpdateInputSchema,
  EarlyAccessUncheckedUpdateManyInputSchema: () => EarlyAccessUncheckedUpdateManyInputSchema,
  EarlyAccessUpdateArgsSchema: () => EarlyAccessUpdateArgsSchema,
  EarlyAccessUpdateInputSchema: () => EarlyAccessUpdateInputSchema,
  EarlyAccessUpdateManyArgsSchema: () => EarlyAccessUpdateManyArgsSchema,
  EarlyAccessUpdateManyMutationInputSchema: () => EarlyAccessUpdateManyMutationInputSchema,
  EarlyAccessUpsertArgsSchema: () => EarlyAccessUpsertArgsSchema,
  EarlyAccessWhereInputSchema: () => EarlyAccessWhereInputSchema,
  EarlyAccessWhereUniqueInputSchema: () => EarlyAccessWhereUniqueInputSchema,
  EnumChecklistFrequencyFieldUpdateOperationsInputSchema: () => EnumChecklistFrequencyFieldUpdateOperationsInputSchema,
  EnumChecklistFrequencyFilterSchema: () => EnumChecklistFrequencyFilterSchema,
  EnumChecklistFrequencyWithAggregatesFilterSchema: () => EnumChecklistFrequencyWithAggregatesFilterSchema,
  EnumChecklistItemTypeFieldUpdateOperationsInputSchema: () => EnumChecklistItemTypeFieldUpdateOperationsInputSchema,
  EnumChecklistItemTypeFilterSchema: () => EnumChecklistItemTypeFilterSchema,
  EnumChecklistItemTypeWithAggregatesFilterSchema: () => EnumChecklistItemTypeWithAggregatesFilterSchema,
  EnumChecklistStatusFieldUpdateOperationsInputSchema: () => EnumChecklistStatusFieldUpdateOperationsInputSchema,
  EnumChecklistStatusFilterSchema: () => EnumChecklistStatusFilterSchema,
  EnumChecklistStatusWithAggregatesFilterSchema: () => EnumChecklistStatusWithAggregatesFilterSchema,
  EnumConstraintTypeFieldUpdateOperationsInputSchema: () => EnumConstraintTypeFieldUpdateOperationsInputSchema,
  EnumConstraintTypeFilterSchema: () => EnumConstraintTypeFilterSchema,
  EnumConstraintTypeWithAggregatesFilterSchema: () => EnumConstraintTypeWithAggregatesFilterSchema,
  EnumDayOfWeekFieldUpdateOperationsInputSchema: () => EnumDayOfWeekFieldUpdateOperationsInputSchema,
  EnumDayOfWeekFilterSchema: () => EnumDayOfWeekFilterSchema,
  EnumDayOfWeekWithAggregatesFilterSchema: () => EnumDayOfWeekWithAggregatesFilterSchema,
  EnumEquipmentStatusFieldUpdateOperationsInputSchema: () => EnumEquipmentStatusFieldUpdateOperationsInputSchema,
  EnumEquipmentStatusFilterSchema: () => EnumEquipmentStatusFilterSchema,
  EnumEquipmentStatusWithAggregatesFilterSchema: () => EnumEquipmentStatusWithAggregatesFilterSchema,
  EnumFeedbackSourceFieldUpdateOperationsInputSchema: () => EnumFeedbackSourceFieldUpdateOperationsInputSchema,
  EnumFeedbackSourceFilterSchema: () => EnumFeedbackSourceFilterSchema,
  EnumFeedbackSourceWithAggregatesFilterSchema: () => EnumFeedbackSourceWithAggregatesFilterSchema,
  EnumFeedbackStatusFieldUpdateOperationsInputSchema: () => EnumFeedbackStatusFieldUpdateOperationsInputSchema,
  EnumFeedbackStatusFilterSchema: () => EnumFeedbackStatusFilterSchema,
  EnumFeedbackStatusWithAggregatesFilterSchema: () => EnumFeedbackStatusWithAggregatesFilterSchema,
  EnumMaintenanceTypeFieldUpdateOperationsInputSchema: () => EnumMaintenanceTypeFieldUpdateOperationsInputSchema,
  EnumMaintenanceTypeFilterSchema: () => EnumMaintenanceTypeFilterSchema,
  EnumMaintenanceTypeWithAggregatesFilterSchema: () => EnumMaintenanceTypeWithAggregatesFilterSchema,
  EnumOrderStatusFieldUpdateOperationsInputSchema: () => EnumOrderStatusFieldUpdateOperationsInputSchema,
  EnumOrderStatusFilterSchema: () => EnumOrderStatusFilterSchema,
  EnumOrderStatusWithAggregatesFilterSchema: () => EnumOrderStatusWithAggregatesFilterSchema,
  EnumPrepStatusFieldUpdateOperationsInputSchema: () => EnumPrepStatusFieldUpdateOperationsInputSchema,
  EnumPrepStatusFilterSchema: () => EnumPrepStatusFilterSchema,
  EnumPrepStatusWithAggregatesFilterSchema: () => EnumPrepStatusWithAggregatesFilterSchema,
  EnumShiftStatusFieldUpdateOperationsInputSchema: () => EnumShiftStatusFieldUpdateOperationsInputSchema,
  EnumShiftStatusFilterSchema: () => EnumShiftStatusFilterSchema,
  EnumShiftStatusWithAggregatesFilterSchema: () => EnumShiftStatusWithAggregatesFilterSchema,
  EnumTaskTypeFieldUpdateOperationsInputSchema: () => EnumTaskTypeFieldUpdateOperationsInputSchema,
  EnumTaskTypeFilterSchema: () => EnumTaskTypeFilterSchema,
  EnumTaskTypeWithAggregatesFilterSchema: () => EnumTaskTypeWithAggregatesFilterSchema,
  EnumUserRoleFieldUpdateOperationsInputSchema: () => EnumUserRoleFieldUpdateOperationsInputSchema,
  EnumUserRoleFilterSchema: () => EnumUserRoleFilterSchema,
  EnumUserRoleWithAggregatesFilterSchema: () => EnumUserRoleWithAggregatesFilterSchema,
  EquipmentAggregateArgsSchema: () => EquipmentAggregateArgsSchema,
  EquipmentArgsSchema: () => EquipmentArgsSchema,
  EquipmentAvgOrderByAggregateInputSchema: () => EquipmentAvgOrderByAggregateInputSchema,
  EquipmentCountOrderByAggregateInputSchema: () => EquipmentCountOrderByAggregateInputSchema,
  EquipmentCountOutputTypeArgsSchema: () => EquipmentCountOutputTypeArgsSchema,
  EquipmentCountOutputTypeSelectSchema: () => EquipmentCountOutputTypeSelectSchema,
  EquipmentCreateArgsSchema: () => EquipmentCreateArgsSchema,
  EquipmentCreateInputSchema: () => EquipmentCreateInputSchema,
  EquipmentCreateManyAndReturnArgsSchema: () => EquipmentCreateManyAndReturnArgsSchema,
  EquipmentCreateManyArgsSchema: () => EquipmentCreateManyArgsSchema,
  EquipmentCreateManyInputSchema: () => EquipmentCreateManyInputSchema,
  EquipmentCreateManyRestaurantInputEnvelopeSchema: () => EquipmentCreateManyRestaurantInputEnvelopeSchema,
  EquipmentCreateManyRestaurantInputSchema: () => EquipmentCreateManyRestaurantInputSchema,
  EquipmentCreateNestedManyWithoutRestaurantInputSchema: () => EquipmentCreateNestedManyWithoutRestaurantInputSchema,
  EquipmentCreateNestedOneWithoutMaintenanceLogsInputSchema: () => EquipmentCreateNestedOneWithoutMaintenanceLogsInputSchema,
  EquipmentCreateNestedOneWithoutRecipesInputSchema: () => EquipmentCreateNestedOneWithoutRecipesInputSchema,
  EquipmentCreateOrConnectWithoutMaintenanceLogsInputSchema: () => EquipmentCreateOrConnectWithoutMaintenanceLogsInputSchema,
  EquipmentCreateOrConnectWithoutRecipesInputSchema: () => EquipmentCreateOrConnectWithoutRecipesInputSchema,
  EquipmentCreateOrConnectWithoutRestaurantInputSchema: () => EquipmentCreateOrConnectWithoutRestaurantInputSchema,
  EquipmentCreateWithoutMaintenanceLogsInputSchema: () => EquipmentCreateWithoutMaintenanceLogsInputSchema,
  EquipmentCreateWithoutRecipesInputSchema: () => EquipmentCreateWithoutRecipesInputSchema,
  EquipmentCreateWithoutRestaurantInputSchema: () => EquipmentCreateWithoutRestaurantInputSchema,
  EquipmentDeleteArgsSchema: () => EquipmentDeleteArgsSchema,
  EquipmentDeleteManyArgsSchema: () => EquipmentDeleteManyArgsSchema,
  EquipmentFindFirstArgsSchema: () => EquipmentFindFirstArgsSchema,
  EquipmentFindFirstOrThrowArgsSchema: () => EquipmentFindFirstOrThrowArgsSchema,
  EquipmentFindManyArgsSchema: () => EquipmentFindManyArgsSchema,
  EquipmentFindUniqueArgsSchema: () => EquipmentFindUniqueArgsSchema,
  EquipmentFindUniqueOrThrowArgsSchema: () => EquipmentFindUniqueOrThrowArgsSchema,
  EquipmentGroupByArgsSchema: () => EquipmentGroupByArgsSchema,
  EquipmentIncludeSchema: () => EquipmentIncludeSchema,
  EquipmentListRelationFilterSchema: () => EquipmentListRelationFilterSchema,
  EquipmentMaxOrderByAggregateInputSchema: () => EquipmentMaxOrderByAggregateInputSchema,
  EquipmentMinOrderByAggregateInputSchema: () => EquipmentMinOrderByAggregateInputSchema,
  EquipmentOrderByRelationAggregateInputSchema: () => EquipmentOrderByRelationAggregateInputSchema,
  EquipmentOrderByWithAggregationInputSchema: () => EquipmentOrderByWithAggregationInputSchema,
  EquipmentOrderByWithRelationInputSchema: () => EquipmentOrderByWithRelationInputSchema,
  EquipmentRelationFilterSchema: () => EquipmentRelationFilterSchema,
  EquipmentScalarFieldEnumSchema: () => EquipmentScalarFieldEnumSchema,
  EquipmentScalarWhereInputSchema: () => EquipmentScalarWhereInputSchema,
  EquipmentScalarWhereWithAggregatesInputSchema: () => EquipmentScalarWhereWithAggregatesInputSchema,
  EquipmentSchema: () => EquipmentSchema,
  EquipmentSelectSchema: () => EquipmentSelectSchema,
  EquipmentStatusSchema: () => EquipmentStatusSchema,
  EquipmentSumOrderByAggregateInputSchema: () => EquipmentSumOrderByAggregateInputSchema,
  EquipmentUncheckedCreateInputSchema: () => EquipmentUncheckedCreateInputSchema,
  EquipmentUncheckedCreateNestedManyWithoutRestaurantInputSchema: () => EquipmentUncheckedCreateNestedManyWithoutRestaurantInputSchema,
  EquipmentUncheckedCreateWithoutMaintenanceLogsInputSchema: () => EquipmentUncheckedCreateWithoutMaintenanceLogsInputSchema,
  EquipmentUncheckedCreateWithoutRecipesInputSchema: () => EquipmentUncheckedCreateWithoutRecipesInputSchema,
  EquipmentUncheckedCreateWithoutRestaurantInputSchema: () => EquipmentUncheckedCreateWithoutRestaurantInputSchema,
  EquipmentUncheckedUpdateInputSchema: () => EquipmentUncheckedUpdateInputSchema,
  EquipmentUncheckedUpdateManyInputSchema: () => EquipmentUncheckedUpdateManyInputSchema,
  EquipmentUncheckedUpdateManyWithoutRestaurantInputSchema: () => EquipmentUncheckedUpdateManyWithoutRestaurantInputSchema,
  EquipmentUncheckedUpdateManyWithoutRestaurantNestedInputSchema: () => EquipmentUncheckedUpdateManyWithoutRestaurantNestedInputSchema,
  EquipmentUncheckedUpdateWithoutMaintenanceLogsInputSchema: () => EquipmentUncheckedUpdateWithoutMaintenanceLogsInputSchema,
  EquipmentUncheckedUpdateWithoutRecipesInputSchema: () => EquipmentUncheckedUpdateWithoutRecipesInputSchema,
  EquipmentUncheckedUpdateWithoutRestaurantInputSchema: () => EquipmentUncheckedUpdateWithoutRestaurantInputSchema,
  EquipmentUpdateArgsSchema: () => EquipmentUpdateArgsSchema,
  EquipmentUpdateInputSchema: () => EquipmentUpdateInputSchema,
  EquipmentUpdateManyArgsSchema: () => EquipmentUpdateManyArgsSchema,
  EquipmentUpdateManyMutationInputSchema: () => EquipmentUpdateManyMutationInputSchema,
  EquipmentUpdateManyWithWhereWithoutRestaurantInputSchema: () => EquipmentUpdateManyWithWhereWithoutRestaurantInputSchema,
  EquipmentUpdateManyWithoutRestaurantNestedInputSchema: () => EquipmentUpdateManyWithoutRestaurantNestedInputSchema,
  EquipmentUpdateOneRequiredWithoutMaintenanceLogsNestedInputSchema: () => EquipmentUpdateOneRequiredWithoutMaintenanceLogsNestedInputSchema,
  EquipmentUpdateOneRequiredWithoutRecipesNestedInputSchema: () => EquipmentUpdateOneRequiredWithoutRecipesNestedInputSchema,
  EquipmentUpdateToOneWithWhereWithoutMaintenanceLogsInputSchema: () => EquipmentUpdateToOneWithWhereWithoutMaintenanceLogsInputSchema,
  EquipmentUpdateToOneWithWhereWithoutRecipesInputSchema: () => EquipmentUpdateToOneWithWhereWithoutRecipesInputSchema,
  EquipmentUpdateWithWhereUniqueWithoutRestaurantInputSchema: () => EquipmentUpdateWithWhereUniqueWithoutRestaurantInputSchema,
  EquipmentUpdateWithoutMaintenanceLogsInputSchema: () => EquipmentUpdateWithoutMaintenanceLogsInputSchema,
  EquipmentUpdateWithoutRecipesInputSchema: () => EquipmentUpdateWithoutRecipesInputSchema,
  EquipmentUpdateWithoutRestaurantInputSchema: () => EquipmentUpdateWithoutRestaurantInputSchema,
  EquipmentUpsertArgsSchema: () => EquipmentUpsertArgsSchema,
  EquipmentUpsertWithWhereUniqueWithoutRestaurantInputSchema: () => EquipmentUpsertWithWhereUniqueWithoutRestaurantInputSchema,
  EquipmentUpsertWithoutMaintenanceLogsInputSchema: () => EquipmentUpsertWithoutMaintenanceLogsInputSchema,
  EquipmentUpsertWithoutRecipesInputSchema: () => EquipmentUpsertWithoutRecipesInputSchema,
  EquipmentWhereInputSchema: () => EquipmentWhereInputSchema,
  EquipmentWhereUniqueInputSchema: () => EquipmentWhereUniqueInputSchema,
  FeedbackSourceSchema: () => FeedbackSourceSchema,
  FeedbackStatusSchema: () => FeedbackStatusSchema,
  FloatFieldUpdateOperationsInputSchema: () => FloatFieldUpdateOperationsInputSchema,
  FloatFilterSchema: () => FloatFilterSchema,
  FloatNullableFilterSchema: () => FloatNullableFilterSchema,
  FloatNullableListFilterSchema: () => FloatNullableListFilterSchema,
  FloatNullableWithAggregatesFilterSchema: () => FloatNullableWithAggregatesFilterSchema,
  FloatWithAggregatesFilterSchema: () => FloatWithAggregatesFilterSchema,
  FoodCostHistoryAggregateArgsSchema: () => FoodCostHistoryAggregateArgsSchema,
  FoodCostHistoryArgsSchema: () => FoodCostHistoryArgsSchema,
  FoodCostHistoryAvgOrderByAggregateInputSchema: () => FoodCostHistoryAvgOrderByAggregateInputSchema,
  FoodCostHistoryCountOrderByAggregateInputSchema: () => FoodCostHistoryCountOrderByAggregateInputSchema,
  FoodCostHistoryCreateArgsSchema: () => FoodCostHistoryCreateArgsSchema,
  FoodCostHistoryCreateInputSchema: () => FoodCostHistoryCreateInputSchema,
  FoodCostHistoryCreateManyAndReturnArgsSchema: () => FoodCostHistoryCreateManyAndReturnArgsSchema,
  FoodCostHistoryCreateManyArgsSchema: () => FoodCostHistoryCreateManyArgsSchema,
  FoodCostHistoryCreateManyInputSchema: () => FoodCostHistoryCreateManyInputSchema,
  FoodCostHistoryCreateManyRecipeInputEnvelopeSchema: () => FoodCostHistoryCreateManyRecipeInputEnvelopeSchema,
  FoodCostHistoryCreateManyRecipeInputSchema: () => FoodCostHistoryCreateManyRecipeInputSchema,
  FoodCostHistoryCreateNestedManyWithoutRecipeInputSchema: () => FoodCostHistoryCreateNestedManyWithoutRecipeInputSchema,
  FoodCostHistoryCreateOrConnectWithoutRecipeInputSchema: () => FoodCostHistoryCreateOrConnectWithoutRecipeInputSchema,
  FoodCostHistoryCreateWithoutRecipeInputSchema: () => FoodCostHistoryCreateWithoutRecipeInputSchema,
  FoodCostHistoryDeleteArgsSchema: () => FoodCostHistoryDeleteArgsSchema,
  FoodCostHistoryDeleteManyArgsSchema: () => FoodCostHistoryDeleteManyArgsSchema,
  FoodCostHistoryFindFirstArgsSchema: () => FoodCostHistoryFindFirstArgsSchema,
  FoodCostHistoryFindFirstOrThrowArgsSchema: () => FoodCostHistoryFindFirstOrThrowArgsSchema,
  FoodCostHistoryFindManyArgsSchema: () => FoodCostHistoryFindManyArgsSchema,
  FoodCostHistoryFindUniqueArgsSchema: () => FoodCostHistoryFindUniqueArgsSchema,
  FoodCostHistoryFindUniqueOrThrowArgsSchema: () => FoodCostHistoryFindUniqueOrThrowArgsSchema,
  FoodCostHistoryGroupByArgsSchema: () => FoodCostHistoryGroupByArgsSchema,
  FoodCostHistoryIncludeSchema: () => FoodCostHistoryIncludeSchema,
  FoodCostHistoryListRelationFilterSchema: () => FoodCostHistoryListRelationFilterSchema,
  FoodCostHistoryMaxOrderByAggregateInputSchema: () => FoodCostHistoryMaxOrderByAggregateInputSchema,
  FoodCostHistoryMinOrderByAggregateInputSchema: () => FoodCostHistoryMinOrderByAggregateInputSchema,
  FoodCostHistoryOrderByRelationAggregateInputSchema: () => FoodCostHistoryOrderByRelationAggregateInputSchema,
  FoodCostHistoryOrderByWithAggregationInputSchema: () => FoodCostHistoryOrderByWithAggregationInputSchema,
  FoodCostHistoryOrderByWithRelationInputSchema: () => FoodCostHistoryOrderByWithRelationInputSchema,
  FoodCostHistoryScalarFieldEnumSchema: () => FoodCostHistoryScalarFieldEnumSchema,
  FoodCostHistoryScalarWhereInputSchema: () => FoodCostHistoryScalarWhereInputSchema,
  FoodCostHistoryScalarWhereWithAggregatesInputSchema: () => FoodCostHistoryScalarWhereWithAggregatesInputSchema,
  FoodCostHistorySchema: () => FoodCostHistorySchema,
  FoodCostHistorySelectSchema: () => FoodCostHistorySelectSchema,
  FoodCostHistorySumOrderByAggregateInputSchema: () => FoodCostHistorySumOrderByAggregateInputSchema,
  FoodCostHistoryUncheckedCreateInputSchema: () => FoodCostHistoryUncheckedCreateInputSchema,
  FoodCostHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema: () => FoodCostHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema,
  FoodCostHistoryUncheckedCreateWithoutRecipeInputSchema: () => FoodCostHistoryUncheckedCreateWithoutRecipeInputSchema,
  FoodCostHistoryUncheckedUpdateInputSchema: () => FoodCostHistoryUncheckedUpdateInputSchema,
  FoodCostHistoryUncheckedUpdateManyInputSchema: () => FoodCostHistoryUncheckedUpdateManyInputSchema,
  FoodCostHistoryUncheckedUpdateManyWithoutRecipeInputSchema: () => FoodCostHistoryUncheckedUpdateManyWithoutRecipeInputSchema,
  FoodCostHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema: () => FoodCostHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema,
  FoodCostHistoryUncheckedUpdateWithoutRecipeInputSchema: () => FoodCostHistoryUncheckedUpdateWithoutRecipeInputSchema,
  FoodCostHistoryUpdateArgsSchema: () => FoodCostHistoryUpdateArgsSchema,
  FoodCostHistoryUpdateInputSchema: () => FoodCostHistoryUpdateInputSchema,
  FoodCostHistoryUpdateManyArgsSchema: () => FoodCostHistoryUpdateManyArgsSchema,
  FoodCostHistoryUpdateManyMutationInputSchema: () => FoodCostHistoryUpdateManyMutationInputSchema,
  FoodCostHistoryUpdateManyWithWhereWithoutRecipeInputSchema: () => FoodCostHistoryUpdateManyWithWhereWithoutRecipeInputSchema,
  FoodCostHistoryUpdateManyWithoutRecipeNestedInputSchema: () => FoodCostHistoryUpdateManyWithoutRecipeNestedInputSchema,
  FoodCostHistoryUpdateWithWhereUniqueWithoutRecipeInputSchema: () => FoodCostHistoryUpdateWithWhereUniqueWithoutRecipeInputSchema,
  FoodCostHistoryUpdateWithoutRecipeInputSchema: () => FoodCostHistoryUpdateWithoutRecipeInputSchema,
  FoodCostHistoryUpsertArgsSchema: () => FoodCostHistoryUpsertArgsSchema,
  FoodCostHistoryUpsertWithWhereUniqueWithoutRecipeInputSchema: () => FoodCostHistoryUpsertWithWhereUniqueWithoutRecipeInputSchema,
  FoodCostHistoryWhereInputSchema: () => FoodCostHistoryWhereInputSchema,
  FoodCostHistoryWhereUniqueInputSchema: () => FoodCostHistoryWhereUniqueInputSchema,
  IngredientAggregateArgsSchema: () => IngredientAggregateArgsSchema,
  IngredientAllergenAggregateArgsSchema: () => IngredientAllergenAggregateArgsSchema,
  IngredientAllergenArgsSchema: () => IngredientAllergenArgsSchema,
  IngredientAllergenAvgOrderByAggregateInputSchema: () => IngredientAllergenAvgOrderByAggregateInputSchema,
  IngredientAllergenCountOrderByAggregateInputSchema: () => IngredientAllergenCountOrderByAggregateInputSchema,
  IngredientAllergenCreateArgsSchema: () => IngredientAllergenCreateArgsSchema,
  IngredientAllergenCreateInputSchema: () => IngredientAllergenCreateInputSchema,
  IngredientAllergenCreateManyAllergenInputEnvelopeSchema: () => IngredientAllergenCreateManyAllergenInputEnvelopeSchema,
  IngredientAllergenCreateManyAllergenInputSchema: () => IngredientAllergenCreateManyAllergenInputSchema,
  IngredientAllergenCreateManyAndReturnArgsSchema: () => IngredientAllergenCreateManyAndReturnArgsSchema,
  IngredientAllergenCreateManyArgsSchema: () => IngredientAllergenCreateManyArgsSchema,
  IngredientAllergenCreateManyIngredientInputEnvelopeSchema: () => IngredientAllergenCreateManyIngredientInputEnvelopeSchema,
  IngredientAllergenCreateManyIngredientInputSchema: () => IngredientAllergenCreateManyIngredientInputSchema,
  IngredientAllergenCreateManyInputSchema: () => IngredientAllergenCreateManyInputSchema,
  IngredientAllergenCreateNestedManyWithoutAllergenInputSchema: () => IngredientAllergenCreateNestedManyWithoutAllergenInputSchema,
  IngredientAllergenCreateNestedManyWithoutIngredientInputSchema: () => IngredientAllergenCreateNestedManyWithoutIngredientInputSchema,
  IngredientAllergenCreateOrConnectWithoutAllergenInputSchema: () => IngredientAllergenCreateOrConnectWithoutAllergenInputSchema,
  IngredientAllergenCreateOrConnectWithoutIngredientInputSchema: () => IngredientAllergenCreateOrConnectWithoutIngredientInputSchema,
  IngredientAllergenCreateWithoutAllergenInputSchema: () => IngredientAllergenCreateWithoutAllergenInputSchema,
  IngredientAllergenCreateWithoutIngredientInputSchema: () => IngredientAllergenCreateWithoutIngredientInputSchema,
  IngredientAllergenDeleteArgsSchema: () => IngredientAllergenDeleteArgsSchema,
  IngredientAllergenDeleteManyArgsSchema: () => IngredientAllergenDeleteManyArgsSchema,
  IngredientAllergenFindFirstArgsSchema: () => IngredientAllergenFindFirstArgsSchema,
  IngredientAllergenFindFirstOrThrowArgsSchema: () => IngredientAllergenFindFirstOrThrowArgsSchema,
  IngredientAllergenFindManyArgsSchema: () => IngredientAllergenFindManyArgsSchema,
  IngredientAllergenFindUniqueArgsSchema: () => IngredientAllergenFindUniqueArgsSchema,
  IngredientAllergenFindUniqueOrThrowArgsSchema: () => IngredientAllergenFindUniqueOrThrowArgsSchema,
  IngredientAllergenGroupByArgsSchema: () => IngredientAllergenGroupByArgsSchema,
  IngredientAllergenIncludeSchema: () => IngredientAllergenIncludeSchema,
  IngredientAllergenListRelationFilterSchema: () => IngredientAllergenListRelationFilterSchema,
  IngredientAllergenMaxOrderByAggregateInputSchema: () => IngredientAllergenMaxOrderByAggregateInputSchema,
  IngredientAllergenMinOrderByAggregateInputSchema: () => IngredientAllergenMinOrderByAggregateInputSchema,
  IngredientAllergenOrderByRelationAggregateInputSchema: () => IngredientAllergenOrderByRelationAggregateInputSchema,
  IngredientAllergenOrderByWithAggregationInputSchema: () => IngredientAllergenOrderByWithAggregationInputSchema,
  IngredientAllergenOrderByWithRelationInputSchema: () => IngredientAllergenOrderByWithRelationInputSchema,
  IngredientAllergenScalarFieldEnumSchema: () => IngredientAllergenScalarFieldEnumSchema,
  IngredientAllergenScalarWhereInputSchema: () => IngredientAllergenScalarWhereInputSchema,
  IngredientAllergenScalarWhereWithAggregatesInputSchema: () => IngredientAllergenScalarWhereWithAggregatesInputSchema,
  IngredientAllergenSchema: () => IngredientAllergenSchema,
  IngredientAllergenSelectSchema: () => IngredientAllergenSelectSchema,
  IngredientAllergenSumOrderByAggregateInputSchema: () => IngredientAllergenSumOrderByAggregateInputSchema,
  IngredientAllergenUncheckedCreateInputSchema: () => IngredientAllergenUncheckedCreateInputSchema,
  IngredientAllergenUncheckedCreateNestedManyWithoutAllergenInputSchema: () => IngredientAllergenUncheckedCreateNestedManyWithoutAllergenInputSchema,
  IngredientAllergenUncheckedCreateNestedManyWithoutIngredientInputSchema: () => IngredientAllergenUncheckedCreateNestedManyWithoutIngredientInputSchema,
  IngredientAllergenUncheckedCreateWithoutAllergenInputSchema: () => IngredientAllergenUncheckedCreateWithoutAllergenInputSchema,
  IngredientAllergenUncheckedCreateWithoutIngredientInputSchema: () => IngredientAllergenUncheckedCreateWithoutIngredientInputSchema,
  IngredientAllergenUncheckedUpdateInputSchema: () => IngredientAllergenUncheckedUpdateInputSchema,
  IngredientAllergenUncheckedUpdateManyInputSchema: () => IngredientAllergenUncheckedUpdateManyInputSchema,
  IngredientAllergenUncheckedUpdateManyWithoutAllergenInputSchema: () => IngredientAllergenUncheckedUpdateManyWithoutAllergenInputSchema,
  IngredientAllergenUncheckedUpdateManyWithoutAllergenNestedInputSchema: () => IngredientAllergenUncheckedUpdateManyWithoutAllergenNestedInputSchema,
  IngredientAllergenUncheckedUpdateManyWithoutIngredientInputSchema: () => IngredientAllergenUncheckedUpdateManyWithoutIngredientInputSchema,
  IngredientAllergenUncheckedUpdateManyWithoutIngredientNestedInputSchema: () => IngredientAllergenUncheckedUpdateManyWithoutIngredientNestedInputSchema,
  IngredientAllergenUncheckedUpdateWithoutAllergenInputSchema: () => IngredientAllergenUncheckedUpdateWithoutAllergenInputSchema,
  IngredientAllergenUncheckedUpdateWithoutIngredientInputSchema: () => IngredientAllergenUncheckedUpdateWithoutIngredientInputSchema,
  IngredientAllergenUpdateArgsSchema: () => IngredientAllergenUpdateArgsSchema,
  IngredientAllergenUpdateInputSchema: () => IngredientAllergenUpdateInputSchema,
  IngredientAllergenUpdateManyArgsSchema: () => IngredientAllergenUpdateManyArgsSchema,
  IngredientAllergenUpdateManyMutationInputSchema: () => IngredientAllergenUpdateManyMutationInputSchema,
  IngredientAllergenUpdateManyWithWhereWithoutAllergenInputSchema: () => IngredientAllergenUpdateManyWithWhereWithoutAllergenInputSchema,
  IngredientAllergenUpdateManyWithWhereWithoutIngredientInputSchema: () => IngredientAllergenUpdateManyWithWhereWithoutIngredientInputSchema,
  IngredientAllergenUpdateManyWithoutAllergenNestedInputSchema: () => IngredientAllergenUpdateManyWithoutAllergenNestedInputSchema,
  IngredientAllergenUpdateManyWithoutIngredientNestedInputSchema: () => IngredientAllergenUpdateManyWithoutIngredientNestedInputSchema,
  IngredientAllergenUpdateWithWhereUniqueWithoutAllergenInputSchema: () => IngredientAllergenUpdateWithWhereUniqueWithoutAllergenInputSchema,
  IngredientAllergenUpdateWithWhereUniqueWithoutIngredientInputSchema: () => IngredientAllergenUpdateWithWhereUniqueWithoutIngredientInputSchema,
  IngredientAllergenUpdateWithoutAllergenInputSchema: () => IngredientAllergenUpdateWithoutAllergenInputSchema,
  IngredientAllergenUpdateWithoutIngredientInputSchema: () => IngredientAllergenUpdateWithoutIngredientInputSchema,
  IngredientAllergenUpsertArgsSchema: () => IngredientAllergenUpsertArgsSchema,
  IngredientAllergenUpsertWithWhereUniqueWithoutAllergenInputSchema: () => IngredientAllergenUpsertWithWhereUniqueWithoutAllergenInputSchema,
  IngredientAllergenUpsertWithWhereUniqueWithoutIngredientInputSchema: () => IngredientAllergenUpsertWithWhereUniqueWithoutIngredientInputSchema,
  IngredientAllergenWhereInputSchema: () => IngredientAllergenWhereInputSchema,
  IngredientAllergenWhereUniqueInputSchema: () => IngredientAllergenWhereUniqueInputSchema,
  IngredientArgsSchema: () => IngredientArgsSchema,
  IngredientAvgOrderByAggregateInputSchema: () => IngredientAvgOrderByAggregateInputSchema,
  IngredientCountOrderByAggregateInputSchema: () => IngredientCountOrderByAggregateInputSchema,
  IngredientCountOutputTypeArgsSchema: () => IngredientCountOutputTypeArgsSchema,
  IngredientCountOutputTypeSelectSchema: () => IngredientCountOutputTypeSelectSchema,
  IngredientCreateArgsSchema: () => IngredientCreateArgsSchema,
  IngredientCreateInputSchema: () => IngredientCreateInputSchema,
  IngredientCreateManyAndReturnArgsSchema: () => IngredientCreateManyAndReturnArgsSchema,
  IngredientCreateManyArgsSchema: () => IngredientCreateManyArgsSchema,
  IngredientCreateManyDietaryRestrictionInputEnvelopeSchema: () => IngredientCreateManyDietaryRestrictionInputEnvelopeSchema,
  IngredientCreateManyDietaryRestrictionInputSchema: () => IngredientCreateManyDietaryRestrictionInputSchema,
  IngredientCreateManyInputSchema: () => IngredientCreateManyInputSchema,
  IngredientCreateNestedManyWithoutDietaryRestrictionInputSchema: () => IngredientCreateNestedManyWithoutDietaryRestrictionInputSchema,
  IngredientCreateNestedManyWithoutVendorsInputSchema: () => IngredientCreateNestedManyWithoutVendorsInputSchema,
  IngredientCreateNestedOneWithoutIngredientAllergenInputSchema: () => IngredientCreateNestedOneWithoutIngredientAllergenInputSchema,
  IngredientCreateNestedOneWithoutInventoryItemsInputSchema: () => IngredientCreateNestedOneWithoutInventoryItemsInputSchema,
  IngredientCreateNestedOneWithoutOrderItemsInputSchema: () => IngredientCreateNestedOneWithoutOrderItemsInputSchema,
  IngredientCreateNestedOneWithoutRecipeIngredientsInputSchema: () => IngredientCreateNestedOneWithoutRecipeIngredientsInputSchema,
  IngredientCreateNestedOneWithoutSupplierPriceHistoryInputSchema: () => IngredientCreateNestedOneWithoutSupplierPriceHistoryInputSchema,
  IngredientCreateNestedOneWithoutWasteRecordInputSchema: () => IngredientCreateNestedOneWithoutWasteRecordInputSchema,
  IngredientCreateOrConnectWithoutDietaryRestrictionInputSchema: () => IngredientCreateOrConnectWithoutDietaryRestrictionInputSchema,
  IngredientCreateOrConnectWithoutIngredientAllergenInputSchema: () => IngredientCreateOrConnectWithoutIngredientAllergenInputSchema,
  IngredientCreateOrConnectWithoutInventoryItemsInputSchema: () => IngredientCreateOrConnectWithoutInventoryItemsInputSchema,
  IngredientCreateOrConnectWithoutOrderItemsInputSchema: () => IngredientCreateOrConnectWithoutOrderItemsInputSchema,
  IngredientCreateOrConnectWithoutRecipeIngredientsInputSchema: () => IngredientCreateOrConnectWithoutRecipeIngredientsInputSchema,
  IngredientCreateOrConnectWithoutSupplierPriceHistoryInputSchema: () => IngredientCreateOrConnectWithoutSupplierPriceHistoryInputSchema,
  IngredientCreateOrConnectWithoutVendorsInputSchema: () => IngredientCreateOrConnectWithoutVendorsInputSchema,
  IngredientCreateOrConnectWithoutWasteRecordInputSchema: () => IngredientCreateOrConnectWithoutWasteRecordInputSchema,
  IngredientCreateWithoutDietaryRestrictionInputSchema: () => IngredientCreateWithoutDietaryRestrictionInputSchema,
  IngredientCreateWithoutIngredientAllergenInputSchema: () => IngredientCreateWithoutIngredientAllergenInputSchema,
  IngredientCreateWithoutInventoryItemsInputSchema: () => IngredientCreateWithoutInventoryItemsInputSchema,
  IngredientCreateWithoutOrderItemsInputSchema: () => IngredientCreateWithoutOrderItemsInputSchema,
  IngredientCreateWithoutRecipeIngredientsInputSchema: () => IngredientCreateWithoutRecipeIngredientsInputSchema,
  IngredientCreateWithoutSupplierPriceHistoryInputSchema: () => IngredientCreateWithoutSupplierPriceHistoryInputSchema,
  IngredientCreateWithoutVendorsInputSchema: () => IngredientCreateWithoutVendorsInputSchema,
  IngredientCreateWithoutWasteRecordInputSchema: () => IngredientCreateWithoutWasteRecordInputSchema,
  IngredientDeleteArgsSchema: () => IngredientDeleteArgsSchema,
  IngredientDeleteManyArgsSchema: () => IngredientDeleteManyArgsSchema,
  IngredientFindFirstArgsSchema: () => IngredientFindFirstArgsSchema,
  IngredientFindFirstOrThrowArgsSchema: () => IngredientFindFirstOrThrowArgsSchema,
  IngredientFindManyArgsSchema: () => IngredientFindManyArgsSchema,
  IngredientFindUniqueArgsSchema: () => IngredientFindUniqueArgsSchema,
  IngredientFindUniqueOrThrowArgsSchema: () => IngredientFindUniqueOrThrowArgsSchema,
  IngredientGroupByArgsSchema: () => IngredientGroupByArgsSchema,
  IngredientIncludeSchema: () => IngredientIncludeSchema,
  IngredientListRelationFilterSchema: () => IngredientListRelationFilterSchema,
  IngredientMaxOrderByAggregateInputSchema: () => IngredientMaxOrderByAggregateInputSchema,
  IngredientMinOrderByAggregateInputSchema: () => IngredientMinOrderByAggregateInputSchema,
  IngredientOrderByRelationAggregateInputSchema: () => IngredientOrderByRelationAggregateInputSchema,
  IngredientOrderByWithAggregationInputSchema: () => IngredientOrderByWithAggregationInputSchema,
  IngredientOrderByWithRelationInputSchema: () => IngredientOrderByWithRelationInputSchema,
  IngredientRelationFilterSchema: () => IngredientRelationFilterSchema,
  IngredientScalarFieldEnumSchema: () => IngredientScalarFieldEnumSchema,
  IngredientScalarWhereInputSchema: () => IngredientScalarWhereInputSchema,
  IngredientScalarWhereWithAggregatesInputSchema: () => IngredientScalarWhereWithAggregatesInputSchema,
  IngredientSchema: () => IngredientSchema,
  IngredientSelectSchema: () => IngredientSelectSchema,
  IngredientSumOrderByAggregateInputSchema: () => IngredientSumOrderByAggregateInputSchema,
  IngredientUncheckedCreateInputSchema: () => IngredientUncheckedCreateInputSchema,
  IngredientUncheckedCreateNestedManyWithoutDietaryRestrictionInputSchema: () => IngredientUncheckedCreateNestedManyWithoutDietaryRestrictionInputSchema,
  IngredientUncheckedCreateNestedManyWithoutVendorsInputSchema: () => IngredientUncheckedCreateNestedManyWithoutVendorsInputSchema,
  IngredientUncheckedCreateWithoutDietaryRestrictionInputSchema: () => IngredientUncheckedCreateWithoutDietaryRestrictionInputSchema,
  IngredientUncheckedCreateWithoutIngredientAllergenInputSchema: () => IngredientUncheckedCreateWithoutIngredientAllergenInputSchema,
  IngredientUncheckedCreateWithoutInventoryItemsInputSchema: () => IngredientUncheckedCreateWithoutInventoryItemsInputSchema,
  IngredientUncheckedCreateWithoutOrderItemsInputSchema: () => IngredientUncheckedCreateWithoutOrderItemsInputSchema,
  IngredientUncheckedCreateWithoutRecipeIngredientsInputSchema: () => IngredientUncheckedCreateWithoutRecipeIngredientsInputSchema,
  IngredientUncheckedCreateWithoutSupplierPriceHistoryInputSchema: () => IngredientUncheckedCreateWithoutSupplierPriceHistoryInputSchema,
  IngredientUncheckedCreateWithoutVendorsInputSchema: () => IngredientUncheckedCreateWithoutVendorsInputSchema,
  IngredientUncheckedCreateWithoutWasteRecordInputSchema: () => IngredientUncheckedCreateWithoutWasteRecordInputSchema,
  IngredientUncheckedUpdateInputSchema: () => IngredientUncheckedUpdateInputSchema,
  IngredientUncheckedUpdateManyInputSchema: () => IngredientUncheckedUpdateManyInputSchema,
  IngredientUncheckedUpdateManyWithoutDietaryRestrictionInputSchema: () => IngredientUncheckedUpdateManyWithoutDietaryRestrictionInputSchema,
  IngredientUncheckedUpdateManyWithoutDietaryRestrictionNestedInputSchema: () => IngredientUncheckedUpdateManyWithoutDietaryRestrictionNestedInputSchema,
  IngredientUncheckedUpdateManyWithoutVendorsInputSchema: () => IngredientUncheckedUpdateManyWithoutVendorsInputSchema,
  IngredientUncheckedUpdateManyWithoutVendorsNestedInputSchema: () => IngredientUncheckedUpdateManyWithoutVendorsNestedInputSchema,
  IngredientUncheckedUpdateWithoutDietaryRestrictionInputSchema: () => IngredientUncheckedUpdateWithoutDietaryRestrictionInputSchema,
  IngredientUncheckedUpdateWithoutIngredientAllergenInputSchema: () => IngredientUncheckedUpdateWithoutIngredientAllergenInputSchema,
  IngredientUncheckedUpdateWithoutInventoryItemsInputSchema: () => IngredientUncheckedUpdateWithoutInventoryItemsInputSchema,
  IngredientUncheckedUpdateWithoutOrderItemsInputSchema: () => IngredientUncheckedUpdateWithoutOrderItemsInputSchema,
  IngredientUncheckedUpdateWithoutRecipeIngredientsInputSchema: () => IngredientUncheckedUpdateWithoutRecipeIngredientsInputSchema,
  IngredientUncheckedUpdateWithoutSupplierPriceHistoryInputSchema: () => IngredientUncheckedUpdateWithoutSupplierPriceHistoryInputSchema,
  IngredientUncheckedUpdateWithoutVendorsInputSchema: () => IngredientUncheckedUpdateWithoutVendorsInputSchema,
  IngredientUncheckedUpdateWithoutWasteRecordInputSchema: () => IngredientUncheckedUpdateWithoutWasteRecordInputSchema,
  IngredientUpdateArgsSchema: () => IngredientUpdateArgsSchema,
  IngredientUpdateInputSchema: () => IngredientUpdateInputSchema,
  IngredientUpdateManyArgsSchema: () => IngredientUpdateManyArgsSchema,
  IngredientUpdateManyMutationInputSchema: () => IngredientUpdateManyMutationInputSchema,
  IngredientUpdateManyWithWhereWithoutDietaryRestrictionInputSchema: () => IngredientUpdateManyWithWhereWithoutDietaryRestrictionInputSchema,
  IngredientUpdateManyWithWhereWithoutVendorsInputSchema: () => IngredientUpdateManyWithWhereWithoutVendorsInputSchema,
  IngredientUpdateManyWithoutDietaryRestrictionNestedInputSchema: () => IngredientUpdateManyWithoutDietaryRestrictionNestedInputSchema,
  IngredientUpdateManyWithoutVendorsNestedInputSchema: () => IngredientUpdateManyWithoutVendorsNestedInputSchema,
  IngredientUpdateOneRequiredWithoutIngredientAllergenNestedInputSchema: () => IngredientUpdateOneRequiredWithoutIngredientAllergenNestedInputSchema,
  IngredientUpdateOneRequiredWithoutInventoryItemsNestedInputSchema: () => IngredientUpdateOneRequiredWithoutInventoryItemsNestedInputSchema,
  IngredientUpdateOneRequiredWithoutOrderItemsNestedInputSchema: () => IngredientUpdateOneRequiredWithoutOrderItemsNestedInputSchema,
  IngredientUpdateOneRequiredWithoutRecipeIngredientsNestedInputSchema: () => IngredientUpdateOneRequiredWithoutRecipeIngredientsNestedInputSchema,
  IngredientUpdateOneRequiredWithoutSupplierPriceHistoryNestedInputSchema: () => IngredientUpdateOneRequiredWithoutSupplierPriceHistoryNestedInputSchema,
  IngredientUpdateOneRequiredWithoutWasteRecordNestedInputSchema: () => IngredientUpdateOneRequiredWithoutWasteRecordNestedInputSchema,
  IngredientUpdateToOneWithWhereWithoutIngredientAllergenInputSchema: () => IngredientUpdateToOneWithWhereWithoutIngredientAllergenInputSchema,
  IngredientUpdateToOneWithWhereWithoutInventoryItemsInputSchema: () => IngredientUpdateToOneWithWhereWithoutInventoryItemsInputSchema,
  IngredientUpdateToOneWithWhereWithoutOrderItemsInputSchema: () => IngredientUpdateToOneWithWhereWithoutOrderItemsInputSchema,
  IngredientUpdateToOneWithWhereWithoutRecipeIngredientsInputSchema: () => IngredientUpdateToOneWithWhereWithoutRecipeIngredientsInputSchema,
  IngredientUpdateToOneWithWhereWithoutSupplierPriceHistoryInputSchema: () => IngredientUpdateToOneWithWhereWithoutSupplierPriceHistoryInputSchema,
  IngredientUpdateToOneWithWhereWithoutWasteRecordInputSchema: () => IngredientUpdateToOneWithWhereWithoutWasteRecordInputSchema,
  IngredientUpdateWithWhereUniqueWithoutDietaryRestrictionInputSchema: () => IngredientUpdateWithWhereUniqueWithoutDietaryRestrictionInputSchema,
  IngredientUpdateWithWhereUniqueWithoutVendorsInputSchema: () => IngredientUpdateWithWhereUniqueWithoutVendorsInputSchema,
  IngredientUpdateWithoutDietaryRestrictionInputSchema: () => IngredientUpdateWithoutDietaryRestrictionInputSchema,
  IngredientUpdateWithoutIngredientAllergenInputSchema: () => IngredientUpdateWithoutIngredientAllergenInputSchema,
  IngredientUpdateWithoutInventoryItemsInputSchema: () => IngredientUpdateWithoutInventoryItemsInputSchema,
  IngredientUpdateWithoutOrderItemsInputSchema: () => IngredientUpdateWithoutOrderItemsInputSchema,
  IngredientUpdateWithoutRecipeIngredientsInputSchema: () => IngredientUpdateWithoutRecipeIngredientsInputSchema,
  IngredientUpdateWithoutSupplierPriceHistoryInputSchema: () => IngredientUpdateWithoutSupplierPriceHistoryInputSchema,
  IngredientUpdateWithoutVendorsInputSchema: () => IngredientUpdateWithoutVendorsInputSchema,
  IngredientUpdateWithoutWasteRecordInputSchema: () => IngredientUpdateWithoutWasteRecordInputSchema,
  IngredientUpsertArgsSchema: () => IngredientUpsertArgsSchema,
  IngredientUpsertWithWhereUniqueWithoutDietaryRestrictionInputSchema: () => IngredientUpsertWithWhereUniqueWithoutDietaryRestrictionInputSchema,
  IngredientUpsertWithWhereUniqueWithoutVendorsInputSchema: () => IngredientUpsertWithWhereUniqueWithoutVendorsInputSchema,
  IngredientUpsertWithoutIngredientAllergenInputSchema: () => IngredientUpsertWithoutIngredientAllergenInputSchema,
  IngredientUpsertWithoutInventoryItemsInputSchema: () => IngredientUpsertWithoutInventoryItemsInputSchema,
  IngredientUpsertWithoutOrderItemsInputSchema: () => IngredientUpsertWithoutOrderItemsInputSchema,
  IngredientUpsertWithoutRecipeIngredientsInputSchema: () => IngredientUpsertWithoutRecipeIngredientsInputSchema,
  IngredientUpsertWithoutSupplierPriceHistoryInputSchema: () => IngredientUpsertWithoutSupplierPriceHistoryInputSchema,
  IngredientUpsertWithoutWasteRecordInputSchema: () => IngredientUpsertWithoutWasteRecordInputSchema,
  IngredientWhereInputSchema: () => IngredientWhereInputSchema,
  IngredientWhereUniqueInputSchema: () => IngredientWhereUniqueInputSchema,
  IntFieldUpdateOperationsInputSchema: () => IntFieldUpdateOperationsInputSchema,
  IntFilterSchema: () => IntFilterSchema,
  IntNullableFilterSchema: () => IntNullableFilterSchema,
  IntNullableListFilterSchema: () => IntNullableListFilterSchema,
  IntNullableWithAggregatesFilterSchema: () => IntNullableWithAggregatesFilterSchema,
  IntWithAggregatesFilterSchema: () => IntWithAggregatesFilterSchema,
  InventoryAggregateArgsSchema: () => InventoryAggregateArgsSchema,
  InventoryArgsSchema: () => InventoryArgsSchema,
  InventoryAvgOrderByAggregateInputSchema: () => InventoryAvgOrderByAggregateInputSchema,
  InventoryCountOrderByAggregateInputSchema: () => InventoryCountOrderByAggregateInputSchema,
  InventoryCountOutputTypeArgsSchema: () => InventoryCountOutputTypeArgsSchema,
  InventoryCountOutputTypeSelectSchema: () => InventoryCountOutputTypeSelectSchema,
  InventoryCreateArgsSchema: () => InventoryCreateArgsSchema,
  InventoryCreateInputSchema: () => InventoryCreateInputSchema,
  InventoryCreateManyAndReturnArgsSchema: () => InventoryCreateManyAndReturnArgsSchema,
  InventoryCreateManyArgsSchema: () => InventoryCreateManyArgsSchema,
  InventoryCreateManyInputSchema: () => InventoryCreateManyInputSchema,
  InventoryCreateNestedOneWithoutItemsInputSchema: () => InventoryCreateNestedOneWithoutItemsInputSchema,
  InventoryCreateNestedOneWithoutRestaurantInputSchema: () => InventoryCreateNestedOneWithoutRestaurantInputSchema,
  InventoryCreateOrConnectWithoutItemsInputSchema: () => InventoryCreateOrConnectWithoutItemsInputSchema,
  InventoryCreateOrConnectWithoutRestaurantInputSchema: () => InventoryCreateOrConnectWithoutRestaurantInputSchema,
  InventoryCreateWithoutItemsInputSchema: () => InventoryCreateWithoutItemsInputSchema,
  InventoryCreateWithoutRestaurantInputSchema: () => InventoryCreateWithoutRestaurantInputSchema,
  InventoryDeleteArgsSchema: () => InventoryDeleteArgsSchema,
  InventoryDeleteManyArgsSchema: () => InventoryDeleteManyArgsSchema,
  InventoryFindFirstArgsSchema: () => InventoryFindFirstArgsSchema,
  InventoryFindFirstOrThrowArgsSchema: () => InventoryFindFirstOrThrowArgsSchema,
  InventoryFindManyArgsSchema: () => InventoryFindManyArgsSchema,
  InventoryFindUniqueArgsSchema: () => InventoryFindUniqueArgsSchema,
  InventoryFindUniqueOrThrowArgsSchema: () => InventoryFindUniqueOrThrowArgsSchema,
  InventoryGroupByArgsSchema: () => InventoryGroupByArgsSchema,
  InventoryIncludeSchema: () => InventoryIncludeSchema,
  InventoryItemAggregateArgsSchema: () => InventoryItemAggregateArgsSchema,
  InventoryItemArgsSchema: () => InventoryItemArgsSchema,
  InventoryItemAvgOrderByAggregateInputSchema: () => InventoryItemAvgOrderByAggregateInputSchema,
  InventoryItemCountOrderByAggregateInputSchema: () => InventoryItemCountOrderByAggregateInputSchema,
  InventoryItemCountOutputTypeArgsSchema: () => InventoryItemCountOutputTypeArgsSchema,
  InventoryItemCountOutputTypeSelectSchema: () => InventoryItemCountOutputTypeSelectSchema,
  InventoryItemCreateArgsSchema: () => InventoryItemCreateArgsSchema,
  InventoryItemCreateInputSchema: () => InventoryItemCreateInputSchema,
  InventoryItemCreateManyAndReturnArgsSchema: () => InventoryItemCreateManyAndReturnArgsSchema,
  InventoryItemCreateManyArgsSchema: () => InventoryItemCreateManyArgsSchema,
  InventoryItemCreateManyIngredientInputEnvelopeSchema: () => InventoryItemCreateManyIngredientInputEnvelopeSchema,
  InventoryItemCreateManyIngredientInputSchema: () => InventoryItemCreateManyIngredientInputSchema,
  InventoryItemCreateManyInputSchema: () => InventoryItemCreateManyInputSchema,
  InventoryItemCreateManyInventoryInputEnvelopeSchema: () => InventoryItemCreateManyInventoryInputEnvelopeSchema,
  InventoryItemCreateManyInventoryInputSchema: () => InventoryItemCreateManyInventoryInputSchema,
  InventoryItemCreateManyLastUpdatedByInputEnvelopeSchema: () => InventoryItemCreateManyLastUpdatedByInputEnvelopeSchema,
  InventoryItemCreateManyLastUpdatedByInputSchema: () => InventoryItemCreateManyLastUpdatedByInputSchema,
  InventoryItemCreateNestedManyWithoutIngredientInputSchema: () => InventoryItemCreateNestedManyWithoutIngredientInputSchema,
  InventoryItemCreateNestedManyWithoutInventoryInputSchema: () => InventoryItemCreateNestedManyWithoutInventoryInputSchema,
  InventoryItemCreateNestedManyWithoutLastUpdatedByInputSchema: () => InventoryItemCreateNestedManyWithoutLastUpdatedByInputSchema,
  InventoryItemCreateNestedOneWithoutInventoryWithdrawalInputSchema: () => InventoryItemCreateNestedOneWithoutInventoryWithdrawalInputSchema,
  InventoryItemCreateOrConnectWithoutIngredientInputSchema: () => InventoryItemCreateOrConnectWithoutIngredientInputSchema,
  InventoryItemCreateOrConnectWithoutInventoryInputSchema: () => InventoryItemCreateOrConnectWithoutInventoryInputSchema,
  InventoryItemCreateOrConnectWithoutInventoryWithdrawalInputSchema: () => InventoryItemCreateOrConnectWithoutInventoryWithdrawalInputSchema,
  InventoryItemCreateOrConnectWithoutLastUpdatedByInputSchema: () => InventoryItemCreateOrConnectWithoutLastUpdatedByInputSchema,
  InventoryItemCreateWithoutIngredientInputSchema: () => InventoryItemCreateWithoutIngredientInputSchema,
  InventoryItemCreateWithoutInventoryInputSchema: () => InventoryItemCreateWithoutInventoryInputSchema,
  InventoryItemCreateWithoutInventoryWithdrawalInputSchema: () => InventoryItemCreateWithoutInventoryWithdrawalInputSchema,
  InventoryItemCreateWithoutLastUpdatedByInputSchema: () => InventoryItemCreateWithoutLastUpdatedByInputSchema,
  InventoryItemDeleteArgsSchema: () => InventoryItemDeleteArgsSchema,
  InventoryItemDeleteManyArgsSchema: () => InventoryItemDeleteManyArgsSchema,
  InventoryItemFindFirstArgsSchema: () => InventoryItemFindFirstArgsSchema,
  InventoryItemFindFirstOrThrowArgsSchema: () => InventoryItemFindFirstOrThrowArgsSchema,
  InventoryItemFindManyArgsSchema: () => InventoryItemFindManyArgsSchema,
  InventoryItemFindUniqueArgsSchema: () => InventoryItemFindUniqueArgsSchema,
  InventoryItemFindUniqueOrThrowArgsSchema: () => InventoryItemFindUniqueOrThrowArgsSchema,
  InventoryItemGroupByArgsSchema: () => InventoryItemGroupByArgsSchema,
  InventoryItemIncludeSchema: () => InventoryItemIncludeSchema,
  InventoryItemListRelationFilterSchema: () => InventoryItemListRelationFilterSchema,
  InventoryItemMaxOrderByAggregateInputSchema: () => InventoryItemMaxOrderByAggregateInputSchema,
  InventoryItemMinOrderByAggregateInputSchema: () => InventoryItemMinOrderByAggregateInputSchema,
  InventoryItemOrderByRelationAggregateInputSchema: () => InventoryItemOrderByRelationAggregateInputSchema,
  InventoryItemOrderByWithAggregationInputSchema: () => InventoryItemOrderByWithAggregationInputSchema,
  InventoryItemOrderByWithRelationInputSchema: () => InventoryItemOrderByWithRelationInputSchema,
  InventoryItemRelationFilterSchema: () => InventoryItemRelationFilterSchema,
  InventoryItemScalarFieldEnumSchema: () => InventoryItemScalarFieldEnumSchema,
  InventoryItemScalarWhereInputSchema: () => InventoryItemScalarWhereInputSchema,
  InventoryItemScalarWhereWithAggregatesInputSchema: () => InventoryItemScalarWhereWithAggregatesInputSchema,
  InventoryItemSchema: () => InventoryItemSchema,
  InventoryItemSelectSchema: () => InventoryItemSelectSchema,
  InventoryItemSumOrderByAggregateInputSchema: () => InventoryItemSumOrderByAggregateInputSchema,
  InventoryItemUncheckedCreateInputSchema: () => InventoryItemUncheckedCreateInputSchema,
  InventoryItemUncheckedCreateNestedManyWithoutIngredientInputSchema: () => InventoryItemUncheckedCreateNestedManyWithoutIngredientInputSchema,
  InventoryItemUncheckedCreateNestedManyWithoutInventoryInputSchema: () => InventoryItemUncheckedCreateNestedManyWithoutInventoryInputSchema,
  InventoryItemUncheckedCreateNestedManyWithoutLastUpdatedByInputSchema: () => InventoryItemUncheckedCreateNestedManyWithoutLastUpdatedByInputSchema,
  InventoryItemUncheckedCreateWithoutIngredientInputSchema: () => InventoryItemUncheckedCreateWithoutIngredientInputSchema,
  InventoryItemUncheckedCreateWithoutInventoryInputSchema: () => InventoryItemUncheckedCreateWithoutInventoryInputSchema,
  InventoryItemUncheckedCreateWithoutInventoryWithdrawalInputSchema: () => InventoryItemUncheckedCreateWithoutInventoryWithdrawalInputSchema,
  InventoryItemUncheckedCreateWithoutLastUpdatedByInputSchema: () => InventoryItemUncheckedCreateWithoutLastUpdatedByInputSchema,
  InventoryItemUncheckedUpdateInputSchema: () => InventoryItemUncheckedUpdateInputSchema,
  InventoryItemUncheckedUpdateManyInputSchema: () => InventoryItemUncheckedUpdateManyInputSchema,
  InventoryItemUncheckedUpdateManyWithoutIngredientInputSchema: () => InventoryItemUncheckedUpdateManyWithoutIngredientInputSchema,
  InventoryItemUncheckedUpdateManyWithoutIngredientNestedInputSchema: () => InventoryItemUncheckedUpdateManyWithoutIngredientNestedInputSchema,
  InventoryItemUncheckedUpdateManyWithoutInventoryInputSchema: () => InventoryItemUncheckedUpdateManyWithoutInventoryInputSchema,
  InventoryItemUncheckedUpdateManyWithoutInventoryNestedInputSchema: () => InventoryItemUncheckedUpdateManyWithoutInventoryNestedInputSchema,
  InventoryItemUncheckedUpdateManyWithoutLastUpdatedByInputSchema: () => InventoryItemUncheckedUpdateManyWithoutLastUpdatedByInputSchema,
  InventoryItemUncheckedUpdateManyWithoutLastUpdatedByNestedInputSchema: () => InventoryItemUncheckedUpdateManyWithoutLastUpdatedByNestedInputSchema,
  InventoryItemUncheckedUpdateWithoutIngredientInputSchema: () => InventoryItemUncheckedUpdateWithoutIngredientInputSchema,
  InventoryItemUncheckedUpdateWithoutInventoryInputSchema: () => InventoryItemUncheckedUpdateWithoutInventoryInputSchema,
  InventoryItemUncheckedUpdateWithoutInventoryWithdrawalInputSchema: () => InventoryItemUncheckedUpdateWithoutInventoryWithdrawalInputSchema,
  InventoryItemUncheckedUpdateWithoutLastUpdatedByInputSchema: () => InventoryItemUncheckedUpdateWithoutLastUpdatedByInputSchema,
  InventoryItemUpdateArgsSchema: () => InventoryItemUpdateArgsSchema,
  InventoryItemUpdateInputSchema: () => InventoryItemUpdateInputSchema,
  InventoryItemUpdateManyArgsSchema: () => InventoryItemUpdateManyArgsSchema,
  InventoryItemUpdateManyMutationInputSchema: () => InventoryItemUpdateManyMutationInputSchema,
  InventoryItemUpdateManyWithWhereWithoutIngredientInputSchema: () => InventoryItemUpdateManyWithWhereWithoutIngredientInputSchema,
  InventoryItemUpdateManyWithWhereWithoutInventoryInputSchema: () => InventoryItemUpdateManyWithWhereWithoutInventoryInputSchema,
  InventoryItemUpdateManyWithWhereWithoutLastUpdatedByInputSchema: () => InventoryItemUpdateManyWithWhereWithoutLastUpdatedByInputSchema,
  InventoryItemUpdateManyWithoutIngredientNestedInputSchema: () => InventoryItemUpdateManyWithoutIngredientNestedInputSchema,
  InventoryItemUpdateManyWithoutInventoryNestedInputSchema: () => InventoryItemUpdateManyWithoutInventoryNestedInputSchema,
  InventoryItemUpdateManyWithoutLastUpdatedByNestedInputSchema: () => InventoryItemUpdateManyWithoutLastUpdatedByNestedInputSchema,
  InventoryItemUpdateOneRequiredWithoutInventoryWithdrawalNestedInputSchema: () => InventoryItemUpdateOneRequiredWithoutInventoryWithdrawalNestedInputSchema,
  InventoryItemUpdateToOneWithWhereWithoutInventoryWithdrawalInputSchema: () => InventoryItemUpdateToOneWithWhereWithoutInventoryWithdrawalInputSchema,
  InventoryItemUpdateWithWhereUniqueWithoutIngredientInputSchema: () => InventoryItemUpdateWithWhereUniqueWithoutIngredientInputSchema,
  InventoryItemUpdateWithWhereUniqueWithoutInventoryInputSchema: () => InventoryItemUpdateWithWhereUniqueWithoutInventoryInputSchema,
  InventoryItemUpdateWithWhereUniqueWithoutLastUpdatedByInputSchema: () => InventoryItemUpdateWithWhereUniqueWithoutLastUpdatedByInputSchema,
  InventoryItemUpdateWithoutIngredientInputSchema: () => InventoryItemUpdateWithoutIngredientInputSchema,
  InventoryItemUpdateWithoutInventoryInputSchema: () => InventoryItemUpdateWithoutInventoryInputSchema,
  InventoryItemUpdateWithoutInventoryWithdrawalInputSchema: () => InventoryItemUpdateWithoutInventoryWithdrawalInputSchema,
  InventoryItemUpdateWithoutLastUpdatedByInputSchema: () => InventoryItemUpdateWithoutLastUpdatedByInputSchema,
  InventoryItemUpsertArgsSchema: () => InventoryItemUpsertArgsSchema,
  InventoryItemUpsertWithWhereUniqueWithoutIngredientInputSchema: () => InventoryItemUpsertWithWhereUniqueWithoutIngredientInputSchema,
  InventoryItemUpsertWithWhereUniqueWithoutInventoryInputSchema: () => InventoryItemUpsertWithWhereUniqueWithoutInventoryInputSchema,
  InventoryItemUpsertWithWhereUniqueWithoutLastUpdatedByInputSchema: () => InventoryItemUpsertWithWhereUniqueWithoutLastUpdatedByInputSchema,
  InventoryItemUpsertWithoutInventoryWithdrawalInputSchema: () => InventoryItemUpsertWithoutInventoryWithdrawalInputSchema,
  InventoryItemWhereInputSchema: () => InventoryItemWhereInputSchema,
  InventoryItemWhereUniqueInputSchema: () => InventoryItemWhereUniqueInputSchema,
  InventoryMaxOrderByAggregateInputSchema: () => InventoryMaxOrderByAggregateInputSchema,
  InventoryMinOrderByAggregateInputSchema: () => InventoryMinOrderByAggregateInputSchema,
  InventoryNullableRelationFilterSchema: () => InventoryNullableRelationFilterSchema,
  InventoryOrderByWithAggregationInputSchema: () => InventoryOrderByWithAggregationInputSchema,
  InventoryOrderByWithRelationInputSchema: () => InventoryOrderByWithRelationInputSchema,
  InventoryRelationFilterSchema: () => InventoryRelationFilterSchema,
  InventoryScalarFieldEnumSchema: () => InventoryScalarFieldEnumSchema,
  InventoryScalarWhereWithAggregatesInputSchema: () => InventoryScalarWhereWithAggregatesInputSchema,
  InventorySchema: () => InventorySchema,
  InventorySelectSchema: () => InventorySelectSchema,
  InventorySumOrderByAggregateInputSchema: () => InventorySumOrderByAggregateInputSchema,
  InventoryUncheckedCreateInputSchema: () => InventoryUncheckedCreateInputSchema,
  InventoryUncheckedCreateNestedOneWithoutRestaurantInputSchema: () => InventoryUncheckedCreateNestedOneWithoutRestaurantInputSchema,
  InventoryUncheckedCreateWithoutItemsInputSchema: () => InventoryUncheckedCreateWithoutItemsInputSchema,
  InventoryUncheckedCreateWithoutRestaurantInputSchema: () => InventoryUncheckedCreateWithoutRestaurantInputSchema,
  InventoryUncheckedUpdateInputSchema: () => InventoryUncheckedUpdateInputSchema,
  InventoryUncheckedUpdateManyInputSchema: () => InventoryUncheckedUpdateManyInputSchema,
  InventoryUncheckedUpdateOneWithoutRestaurantNestedInputSchema: () => InventoryUncheckedUpdateOneWithoutRestaurantNestedInputSchema,
  InventoryUncheckedUpdateWithoutItemsInputSchema: () => InventoryUncheckedUpdateWithoutItemsInputSchema,
  InventoryUncheckedUpdateWithoutRestaurantInputSchema: () => InventoryUncheckedUpdateWithoutRestaurantInputSchema,
  InventoryUpdateArgsSchema: () => InventoryUpdateArgsSchema,
  InventoryUpdateInputSchema: () => InventoryUpdateInputSchema,
  InventoryUpdateManyArgsSchema: () => InventoryUpdateManyArgsSchema,
  InventoryUpdateManyMutationInputSchema: () => InventoryUpdateManyMutationInputSchema,
  InventoryUpdateOneRequiredWithoutItemsNestedInputSchema: () => InventoryUpdateOneRequiredWithoutItemsNestedInputSchema,
  InventoryUpdateOneWithoutRestaurantNestedInputSchema: () => InventoryUpdateOneWithoutRestaurantNestedInputSchema,
  InventoryUpdateToOneWithWhereWithoutItemsInputSchema: () => InventoryUpdateToOneWithWhereWithoutItemsInputSchema,
  InventoryUpdateToOneWithWhereWithoutRestaurantInputSchema: () => InventoryUpdateToOneWithWhereWithoutRestaurantInputSchema,
  InventoryUpdateWithoutItemsInputSchema: () => InventoryUpdateWithoutItemsInputSchema,
  InventoryUpdateWithoutRestaurantInputSchema: () => InventoryUpdateWithoutRestaurantInputSchema,
  InventoryUpsertArgsSchema: () => InventoryUpsertArgsSchema,
  InventoryUpsertWithoutItemsInputSchema: () => InventoryUpsertWithoutItemsInputSchema,
  InventoryUpsertWithoutRestaurantInputSchema: () => InventoryUpsertWithoutRestaurantInputSchema,
  InventoryWhereInputSchema: () => InventoryWhereInputSchema,
  InventoryWhereUniqueInputSchema: () => InventoryWhereUniqueInputSchema,
  InventoryWithdrawalAggregateArgsSchema: () => InventoryWithdrawalAggregateArgsSchema,
  InventoryWithdrawalArgsSchema: () => InventoryWithdrawalArgsSchema,
  InventoryWithdrawalAvgOrderByAggregateInputSchema: () => InventoryWithdrawalAvgOrderByAggregateInputSchema,
  InventoryWithdrawalCountOrderByAggregateInputSchema: () => InventoryWithdrawalCountOrderByAggregateInputSchema,
  InventoryWithdrawalCreateArgsSchema: () => InventoryWithdrawalCreateArgsSchema,
  InventoryWithdrawalCreateInputSchema: () => InventoryWithdrawalCreateInputSchema,
  InventoryWithdrawalCreateManyAndReturnArgsSchema: () => InventoryWithdrawalCreateManyAndReturnArgsSchema,
  InventoryWithdrawalCreateManyArgsSchema: () => InventoryWithdrawalCreateManyArgsSchema,
  InventoryWithdrawalCreateManyCreatedByInputEnvelopeSchema: () => InventoryWithdrawalCreateManyCreatedByInputEnvelopeSchema,
  InventoryWithdrawalCreateManyCreatedByInputSchema: () => InventoryWithdrawalCreateManyCreatedByInputSchema,
  InventoryWithdrawalCreateManyInputSchema: () => InventoryWithdrawalCreateManyInputSchema,
  InventoryWithdrawalCreateManyInventoryItemInputEnvelopeSchema: () => InventoryWithdrawalCreateManyInventoryItemInputEnvelopeSchema,
  InventoryWithdrawalCreateManyInventoryItemInputSchema: () => InventoryWithdrawalCreateManyInventoryItemInputSchema,
  InventoryWithdrawalCreateManyRecipeInputEnvelopeSchema: () => InventoryWithdrawalCreateManyRecipeInputEnvelopeSchema,
  InventoryWithdrawalCreateManyRecipeInputSchema: () => InventoryWithdrawalCreateManyRecipeInputSchema,
  InventoryWithdrawalCreateNestedManyWithoutCreatedByInputSchema: () => InventoryWithdrawalCreateNestedManyWithoutCreatedByInputSchema,
  InventoryWithdrawalCreateNestedManyWithoutInventoryItemInputSchema: () => InventoryWithdrawalCreateNestedManyWithoutInventoryItemInputSchema,
  InventoryWithdrawalCreateNestedManyWithoutRecipeInputSchema: () => InventoryWithdrawalCreateNestedManyWithoutRecipeInputSchema,
  InventoryWithdrawalCreateOrConnectWithoutCreatedByInputSchema: () => InventoryWithdrawalCreateOrConnectWithoutCreatedByInputSchema,
  InventoryWithdrawalCreateOrConnectWithoutInventoryItemInputSchema: () => InventoryWithdrawalCreateOrConnectWithoutInventoryItemInputSchema,
  InventoryWithdrawalCreateOrConnectWithoutRecipeInputSchema: () => InventoryWithdrawalCreateOrConnectWithoutRecipeInputSchema,
  InventoryWithdrawalCreateWithoutCreatedByInputSchema: () => InventoryWithdrawalCreateWithoutCreatedByInputSchema,
  InventoryWithdrawalCreateWithoutInventoryItemInputSchema: () => InventoryWithdrawalCreateWithoutInventoryItemInputSchema,
  InventoryWithdrawalCreateWithoutRecipeInputSchema: () => InventoryWithdrawalCreateWithoutRecipeInputSchema,
  InventoryWithdrawalDeleteArgsSchema: () => InventoryWithdrawalDeleteArgsSchema,
  InventoryWithdrawalDeleteManyArgsSchema: () => InventoryWithdrawalDeleteManyArgsSchema,
  InventoryWithdrawalFindFirstArgsSchema: () => InventoryWithdrawalFindFirstArgsSchema,
  InventoryWithdrawalFindFirstOrThrowArgsSchema: () => InventoryWithdrawalFindFirstOrThrowArgsSchema,
  InventoryWithdrawalFindManyArgsSchema: () => InventoryWithdrawalFindManyArgsSchema,
  InventoryWithdrawalFindUniqueArgsSchema: () => InventoryWithdrawalFindUniqueArgsSchema,
  InventoryWithdrawalFindUniqueOrThrowArgsSchema: () => InventoryWithdrawalFindUniqueOrThrowArgsSchema,
  InventoryWithdrawalGroupByArgsSchema: () => InventoryWithdrawalGroupByArgsSchema,
  InventoryWithdrawalIncludeSchema: () => InventoryWithdrawalIncludeSchema,
  InventoryWithdrawalListRelationFilterSchema: () => InventoryWithdrawalListRelationFilterSchema,
  InventoryWithdrawalMaxOrderByAggregateInputSchema: () => InventoryWithdrawalMaxOrderByAggregateInputSchema,
  InventoryWithdrawalMinOrderByAggregateInputSchema: () => InventoryWithdrawalMinOrderByAggregateInputSchema,
  InventoryWithdrawalOrderByRelationAggregateInputSchema: () => InventoryWithdrawalOrderByRelationAggregateInputSchema,
  InventoryWithdrawalOrderByWithAggregationInputSchema: () => InventoryWithdrawalOrderByWithAggregationInputSchema,
  InventoryWithdrawalOrderByWithRelationInputSchema: () => InventoryWithdrawalOrderByWithRelationInputSchema,
  InventoryWithdrawalScalarFieldEnumSchema: () => InventoryWithdrawalScalarFieldEnumSchema,
  InventoryWithdrawalScalarWhereInputSchema: () => InventoryWithdrawalScalarWhereInputSchema,
  InventoryWithdrawalScalarWhereWithAggregatesInputSchema: () => InventoryWithdrawalScalarWhereWithAggregatesInputSchema,
  InventoryWithdrawalSchema: () => InventoryWithdrawalSchema,
  InventoryWithdrawalSelectSchema: () => InventoryWithdrawalSelectSchema,
  InventoryWithdrawalSumOrderByAggregateInputSchema: () => InventoryWithdrawalSumOrderByAggregateInputSchema,
  InventoryWithdrawalUncheckedCreateInputSchema: () => InventoryWithdrawalUncheckedCreateInputSchema,
  InventoryWithdrawalUncheckedCreateNestedManyWithoutCreatedByInputSchema: () => InventoryWithdrawalUncheckedCreateNestedManyWithoutCreatedByInputSchema,
  InventoryWithdrawalUncheckedCreateNestedManyWithoutInventoryItemInputSchema: () => InventoryWithdrawalUncheckedCreateNestedManyWithoutInventoryItemInputSchema,
  InventoryWithdrawalUncheckedCreateNestedManyWithoutRecipeInputSchema: () => InventoryWithdrawalUncheckedCreateNestedManyWithoutRecipeInputSchema,
  InventoryWithdrawalUncheckedCreateWithoutCreatedByInputSchema: () => InventoryWithdrawalUncheckedCreateWithoutCreatedByInputSchema,
  InventoryWithdrawalUncheckedCreateWithoutInventoryItemInputSchema: () => InventoryWithdrawalUncheckedCreateWithoutInventoryItemInputSchema,
  InventoryWithdrawalUncheckedCreateWithoutRecipeInputSchema: () => InventoryWithdrawalUncheckedCreateWithoutRecipeInputSchema,
  InventoryWithdrawalUncheckedUpdateInputSchema: () => InventoryWithdrawalUncheckedUpdateInputSchema,
  InventoryWithdrawalUncheckedUpdateManyInputSchema: () => InventoryWithdrawalUncheckedUpdateManyInputSchema,
  InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByInputSchema: () => InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByInputSchema,
  InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByNestedInputSchema: () => InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByNestedInputSchema,
  InventoryWithdrawalUncheckedUpdateManyWithoutInventoryItemInputSchema: () => InventoryWithdrawalUncheckedUpdateManyWithoutInventoryItemInputSchema,
  InventoryWithdrawalUncheckedUpdateManyWithoutInventoryItemNestedInputSchema: () => InventoryWithdrawalUncheckedUpdateManyWithoutInventoryItemNestedInputSchema,
  InventoryWithdrawalUncheckedUpdateManyWithoutRecipeInputSchema: () => InventoryWithdrawalUncheckedUpdateManyWithoutRecipeInputSchema,
  InventoryWithdrawalUncheckedUpdateManyWithoutRecipeNestedInputSchema: () => InventoryWithdrawalUncheckedUpdateManyWithoutRecipeNestedInputSchema,
  InventoryWithdrawalUncheckedUpdateWithoutCreatedByInputSchema: () => InventoryWithdrawalUncheckedUpdateWithoutCreatedByInputSchema,
  InventoryWithdrawalUncheckedUpdateWithoutInventoryItemInputSchema: () => InventoryWithdrawalUncheckedUpdateWithoutInventoryItemInputSchema,
  InventoryWithdrawalUncheckedUpdateWithoutRecipeInputSchema: () => InventoryWithdrawalUncheckedUpdateWithoutRecipeInputSchema,
  InventoryWithdrawalUpdateArgsSchema: () => InventoryWithdrawalUpdateArgsSchema,
  InventoryWithdrawalUpdateInputSchema: () => InventoryWithdrawalUpdateInputSchema,
  InventoryWithdrawalUpdateManyArgsSchema: () => InventoryWithdrawalUpdateManyArgsSchema,
  InventoryWithdrawalUpdateManyMutationInputSchema: () => InventoryWithdrawalUpdateManyMutationInputSchema,
  InventoryWithdrawalUpdateManyWithWhereWithoutCreatedByInputSchema: () => InventoryWithdrawalUpdateManyWithWhereWithoutCreatedByInputSchema,
  InventoryWithdrawalUpdateManyWithWhereWithoutInventoryItemInputSchema: () => InventoryWithdrawalUpdateManyWithWhereWithoutInventoryItemInputSchema,
  InventoryWithdrawalUpdateManyWithWhereWithoutRecipeInputSchema: () => InventoryWithdrawalUpdateManyWithWhereWithoutRecipeInputSchema,
  InventoryWithdrawalUpdateManyWithoutCreatedByNestedInputSchema: () => InventoryWithdrawalUpdateManyWithoutCreatedByNestedInputSchema,
  InventoryWithdrawalUpdateManyWithoutInventoryItemNestedInputSchema: () => InventoryWithdrawalUpdateManyWithoutInventoryItemNestedInputSchema,
  InventoryWithdrawalUpdateManyWithoutRecipeNestedInputSchema: () => InventoryWithdrawalUpdateManyWithoutRecipeNestedInputSchema,
  InventoryWithdrawalUpdateWithWhereUniqueWithoutCreatedByInputSchema: () => InventoryWithdrawalUpdateWithWhereUniqueWithoutCreatedByInputSchema,
  InventoryWithdrawalUpdateWithWhereUniqueWithoutInventoryItemInputSchema: () => InventoryWithdrawalUpdateWithWhereUniqueWithoutInventoryItemInputSchema,
  InventoryWithdrawalUpdateWithWhereUniqueWithoutRecipeInputSchema: () => InventoryWithdrawalUpdateWithWhereUniqueWithoutRecipeInputSchema,
  InventoryWithdrawalUpdateWithoutCreatedByInputSchema: () => InventoryWithdrawalUpdateWithoutCreatedByInputSchema,
  InventoryWithdrawalUpdateWithoutInventoryItemInputSchema: () => InventoryWithdrawalUpdateWithoutInventoryItemInputSchema,
  InventoryWithdrawalUpdateWithoutRecipeInputSchema: () => InventoryWithdrawalUpdateWithoutRecipeInputSchema,
  InventoryWithdrawalUpsertArgsSchema: () => InventoryWithdrawalUpsertArgsSchema,
  InventoryWithdrawalUpsertWithWhereUniqueWithoutCreatedByInputSchema: () => InventoryWithdrawalUpsertWithWhereUniqueWithoutCreatedByInputSchema,
  InventoryWithdrawalUpsertWithWhereUniqueWithoutInventoryItemInputSchema: () => InventoryWithdrawalUpsertWithWhereUniqueWithoutInventoryItemInputSchema,
  InventoryWithdrawalUpsertWithWhereUniqueWithoutRecipeInputSchema: () => InventoryWithdrawalUpsertWithWhereUniqueWithoutRecipeInputSchema,
  InventoryWithdrawalWhereInputSchema: () => InventoryWithdrawalWhereInputSchema,
  InventoryWithdrawalWhereUniqueInputSchema: () => InventoryWithdrawalWhereUniqueInputSchema,
  LeftoverItemAggregateArgsSchema: () => LeftoverItemAggregateArgsSchema,
  LeftoverItemArgsSchema: () => LeftoverItemArgsSchema,
  LeftoverItemAvgOrderByAggregateInputSchema: () => LeftoverItemAvgOrderByAggregateInputSchema,
  LeftoverItemCountOrderByAggregateInputSchema: () => LeftoverItemCountOrderByAggregateInputSchema,
  LeftoverItemCreateArgsSchema: () => LeftoverItemCreateArgsSchema,
  LeftoverItemCreateInputSchema: () => LeftoverItemCreateInputSchema,
  LeftoverItemCreateManyAndReturnArgsSchema: () => LeftoverItemCreateManyAndReturnArgsSchema,
  LeftoverItemCreateManyArgsSchema: () => LeftoverItemCreateManyArgsSchema,
  LeftoverItemCreateManyInputSchema: () => LeftoverItemCreateManyInputSchema,
  LeftoverItemCreateManyMenuItemInputEnvelopeSchema: () => LeftoverItemCreateManyMenuItemInputEnvelopeSchema,
  LeftoverItemCreateManyMenuItemInputSchema: () => LeftoverItemCreateManyMenuItemInputSchema,
  LeftoverItemCreateManyRecordedByInputEnvelopeSchema: () => LeftoverItemCreateManyRecordedByInputEnvelopeSchema,
  LeftoverItemCreateManyRecordedByInputSchema: () => LeftoverItemCreateManyRecordedByInputSchema,
  LeftoverItemCreateManyRestaurantInputEnvelopeSchema: () => LeftoverItemCreateManyRestaurantInputEnvelopeSchema,
  LeftoverItemCreateManyRestaurantInputSchema: () => LeftoverItemCreateManyRestaurantInputSchema,
  LeftoverItemCreateNestedManyWithoutMenuItemInputSchema: () => LeftoverItemCreateNestedManyWithoutMenuItemInputSchema,
  LeftoverItemCreateNestedManyWithoutRecordedByInputSchema: () => LeftoverItemCreateNestedManyWithoutRecordedByInputSchema,
  LeftoverItemCreateNestedManyWithoutRestaurantInputSchema: () => LeftoverItemCreateNestedManyWithoutRestaurantInputSchema,
  LeftoverItemCreateOrConnectWithoutMenuItemInputSchema: () => LeftoverItemCreateOrConnectWithoutMenuItemInputSchema,
  LeftoverItemCreateOrConnectWithoutRecordedByInputSchema: () => LeftoverItemCreateOrConnectWithoutRecordedByInputSchema,
  LeftoverItemCreateOrConnectWithoutRestaurantInputSchema: () => LeftoverItemCreateOrConnectWithoutRestaurantInputSchema,
  LeftoverItemCreateWithoutMenuItemInputSchema: () => LeftoverItemCreateWithoutMenuItemInputSchema,
  LeftoverItemCreateWithoutRecordedByInputSchema: () => LeftoverItemCreateWithoutRecordedByInputSchema,
  LeftoverItemCreateWithoutRestaurantInputSchema: () => LeftoverItemCreateWithoutRestaurantInputSchema,
  LeftoverItemDeleteArgsSchema: () => LeftoverItemDeleteArgsSchema,
  LeftoverItemDeleteManyArgsSchema: () => LeftoverItemDeleteManyArgsSchema,
  LeftoverItemFindFirstArgsSchema: () => LeftoverItemFindFirstArgsSchema,
  LeftoverItemFindFirstOrThrowArgsSchema: () => LeftoverItemFindFirstOrThrowArgsSchema,
  LeftoverItemFindManyArgsSchema: () => LeftoverItemFindManyArgsSchema,
  LeftoverItemFindUniqueArgsSchema: () => LeftoverItemFindUniqueArgsSchema,
  LeftoverItemFindUniqueOrThrowArgsSchema: () => LeftoverItemFindUniqueOrThrowArgsSchema,
  LeftoverItemGroupByArgsSchema: () => LeftoverItemGroupByArgsSchema,
  LeftoverItemIncludeSchema: () => LeftoverItemIncludeSchema,
  LeftoverItemListRelationFilterSchema: () => LeftoverItemListRelationFilterSchema,
  LeftoverItemMaxOrderByAggregateInputSchema: () => LeftoverItemMaxOrderByAggregateInputSchema,
  LeftoverItemMinOrderByAggregateInputSchema: () => LeftoverItemMinOrderByAggregateInputSchema,
  LeftoverItemOrderByRelationAggregateInputSchema: () => LeftoverItemOrderByRelationAggregateInputSchema,
  LeftoverItemOrderByWithAggregationInputSchema: () => LeftoverItemOrderByWithAggregationInputSchema,
  LeftoverItemOrderByWithRelationInputSchema: () => LeftoverItemOrderByWithRelationInputSchema,
  LeftoverItemScalarFieldEnumSchema: () => LeftoverItemScalarFieldEnumSchema,
  LeftoverItemScalarWhereInputSchema: () => LeftoverItemScalarWhereInputSchema,
  LeftoverItemScalarWhereWithAggregatesInputSchema: () => LeftoverItemScalarWhereWithAggregatesInputSchema,
  LeftoverItemSchema: () => LeftoverItemSchema,
  LeftoverItemSelectSchema: () => LeftoverItemSelectSchema,
  LeftoverItemSumOrderByAggregateInputSchema: () => LeftoverItemSumOrderByAggregateInputSchema,
  LeftoverItemUncheckedCreateInputSchema: () => LeftoverItemUncheckedCreateInputSchema,
  LeftoverItemUncheckedCreateNestedManyWithoutMenuItemInputSchema: () => LeftoverItemUncheckedCreateNestedManyWithoutMenuItemInputSchema,
  LeftoverItemUncheckedCreateNestedManyWithoutRecordedByInputSchema: () => LeftoverItemUncheckedCreateNestedManyWithoutRecordedByInputSchema,
  LeftoverItemUncheckedCreateNestedManyWithoutRestaurantInputSchema: () => LeftoverItemUncheckedCreateNestedManyWithoutRestaurantInputSchema,
  LeftoverItemUncheckedCreateWithoutMenuItemInputSchema: () => LeftoverItemUncheckedCreateWithoutMenuItemInputSchema,
  LeftoverItemUncheckedCreateWithoutRecordedByInputSchema: () => LeftoverItemUncheckedCreateWithoutRecordedByInputSchema,
  LeftoverItemUncheckedCreateWithoutRestaurantInputSchema: () => LeftoverItemUncheckedCreateWithoutRestaurantInputSchema,
  LeftoverItemUncheckedUpdateInputSchema: () => LeftoverItemUncheckedUpdateInputSchema,
  LeftoverItemUncheckedUpdateManyInputSchema: () => LeftoverItemUncheckedUpdateManyInputSchema,
  LeftoverItemUncheckedUpdateManyWithoutMenuItemInputSchema: () => LeftoverItemUncheckedUpdateManyWithoutMenuItemInputSchema,
  LeftoverItemUncheckedUpdateManyWithoutMenuItemNestedInputSchema: () => LeftoverItemUncheckedUpdateManyWithoutMenuItemNestedInputSchema,
  LeftoverItemUncheckedUpdateManyWithoutRecordedByInputSchema: () => LeftoverItemUncheckedUpdateManyWithoutRecordedByInputSchema,
  LeftoverItemUncheckedUpdateManyWithoutRecordedByNestedInputSchema: () => LeftoverItemUncheckedUpdateManyWithoutRecordedByNestedInputSchema,
  LeftoverItemUncheckedUpdateManyWithoutRestaurantInputSchema: () => LeftoverItemUncheckedUpdateManyWithoutRestaurantInputSchema,
  LeftoverItemUncheckedUpdateManyWithoutRestaurantNestedInputSchema: () => LeftoverItemUncheckedUpdateManyWithoutRestaurantNestedInputSchema,
  LeftoverItemUncheckedUpdateWithoutMenuItemInputSchema: () => LeftoverItemUncheckedUpdateWithoutMenuItemInputSchema,
  LeftoverItemUncheckedUpdateWithoutRecordedByInputSchema: () => LeftoverItemUncheckedUpdateWithoutRecordedByInputSchema,
  LeftoverItemUncheckedUpdateWithoutRestaurantInputSchema: () => LeftoverItemUncheckedUpdateWithoutRestaurantInputSchema,
  LeftoverItemUpdateArgsSchema: () => LeftoverItemUpdateArgsSchema,
  LeftoverItemUpdateInputSchema: () => LeftoverItemUpdateInputSchema,
  LeftoverItemUpdateManyArgsSchema: () => LeftoverItemUpdateManyArgsSchema,
  LeftoverItemUpdateManyMutationInputSchema: () => LeftoverItemUpdateManyMutationInputSchema,
  LeftoverItemUpdateManyWithWhereWithoutMenuItemInputSchema: () => LeftoverItemUpdateManyWithWhereWithoutMenuItemInputSchema,
  LeftoverItemUpdateManyWithWhereWithoutRecordedByInputSchema: () => LeftoverItemUpdateManyWithWhereWithoutRecordedByInputSchema,
  LeftoverItemUpdateManyWithWhereWithoutRestaurantInputSchema: () => LeftoverItemUpdateManyWithWhereWithoutRestaurantInputSchema,
  LeftoverItemUpdateManyWithoutMenuItemNestedInputSchema: () => LeftoverItemUpdateManyWithoutMenuItemNestedInputSchema,
  LeftoverItemUpdateManyWithoutRecordedByNestedInputSchema: () => LeftoverItemUpdateManyWithoutRecordedByNestedInputSchema,
  LeftoverItemUpdateManyWithoutRestaurantNestedInputSchema: () => LeftoverItemUpdateManyWithoutRestaurantNestedInputSchema,
  LeftoverItemUpdateWithWhereUniqueWithoutMenuItemInputSchema: () => LeftoverItemUpdateWithWhereUniqueWithoutMenuItemInputSchema,
  LeftoverItemUpdateWithWhereUniqueWithoutRecordedByInputSchema: () => LeftoverItemUpdateWithWhereUniqueWithoutRecordedByInputSchema,
  LeftoverItemUpdateWithWhereUniqueWithoutRestaurantInputSchema: () => LeftoverItemUpdateWithWhereUniqueWithoutRestaurantInputSchema,
  LeftoverItemUpdateWithoutMenuItemInputSchema: () => LeftoverItemUpdateWithoutMenuItemInputSchema,
  LeftoverItemUpdateWithoutRecordedByInputSchema: () => LeftoverItemUpdateWithoutRecordedByInputSchema,
  LeftoverItemUpdateWithoutRestaurantInputSchema: () => LeftoverItemUpdateWithoutRestaurantInputSchema,
  LeftoverItemUpsertArgsSchema: () => LeftoverItemUpsertArgsSchema,
  LeftoverItemUpsertWithWhereUniqueWithoutMenuItemInputSchema: () => LeftoverItemUpsertWithWhereUniqueWithoutMenuItemInputSchema,
  LeftoverItemUpsertWithWhereUniqueWithoutRecordedByInputSchema: () => LeftoverItemUpsertWithWhereUniqueWithoutRecordedByInputSchema,
  LeftoverItemUpsertWithWhereUniqueWithoutRestaurantInputSchema: () => LeftoverItemUpsertWithWhereUniqueWithoutRestaurantInputSchema,
  LeftoverItemWhereInputSchema: () => LeftoverItemWhereInputSchema,
  LeftoverItemWhereUniqueInputSchema: () => LeftoverItemWhereUniqueInputSchema,
  MaintenanceLogAggregateArgsSchema: () => MaintenanceLogAggregateArgsSchema,
  MaintenanceLogArgsSchema: () => MaintenanceLogArgsSchema,
  MaintenanceLogAvgOrderByAggregateInputSchema: () => MaintenanceLogAvgOrderByAggregateInputSchema,
  MaintenanceLogCountOrderByAggregateInputSchema: () => MaintenanceLogCountOrderByAggregateInputSchema,
  MaintenanceLogCreateArgsSchema: () => MaintenanceLogCreateArgsSchema,
  MaintenanceLogCreateInputSchema: () => MaintenanceLogCreateInputSchema,
  MaintenanceLogCreateManyAndReturnArgsSchema: () => MaintenanceLogCreateManyAndReturnArgsSchema,
  MaintenanceLogCreateManyArgsSchema: () => MaintenanceLogCreateManyArgsSchema,
  MaintenanceLogCreateManyEquipmentInputEnvelopeSchema: () => MaintenanceLogCreateManyEquipmentInputEnvelopeSchema,
  MaintenanceLogCreateManyEquipmentInputSchema: () => MaintenanceLogCreateManyEquipmentInputSchema,
  MaintenanceLogCreateManyInputSchema: () => MaintenanceLogCreateManyInputSchema,
  MaintenanceLogCreateNestedManyWithoutEquipmentInputSchema: () => MaintenanceLogCreateNestedManyWithoutEquipmentInputSchema,
  MaintenanceLogCreateOrConnectWithoutEquipmentInputSchema: () => MaintenanceLogCreateOrConnectWithoutEquipmentInputSchema,
  MaintenanceLogCreateWithoutEquipmentInputSchema: () => MaintenanceLogCreateWithoutEquipmentInputSchema,
  MaintenanceLogDeleteArgsSchema: () => MaintenanceLogDeleteArgsSchema,
  MaintenanceLogDeleteManyArgsSchema: () => MaintenanceLogDeleteManyArgsSchema,
  MaintenanceLogFindFirstArgsSchema: () => MaintenanceLogFindFirstArgsSchema,
  MaintenanceLogFindFirstOrThrowArgsSchema: () => MaintenanceLogFindFirstOrThrowArgsSchema,
  MaintenanceLogFindManyArgsSchema: () => MaintenanceLogFindManyArgsSchema,
  MaintenanceLogFindUniqueArgsSchema: () => MaintenanceLogFindUniqueArgsSchema,
  MaintenanceLogFindUniqueOrThrowArgsSchema: () => MaintenanceLogFindUniqueOrThrowArgsSchema,
  MaintenanceLogGroupByArgsSchema: () => MaintenanceLogGroupByArgsSchema,
  MaintenanceLogIncludeSchema: () => MaintenanceLogIncludeSchema,
  MaintenanceLogListRelationFilterSchema: () => MaintenanceLogListRelationFilterSchema,
  MaintenanceLogMaxOrderByAggregateInputSchema: () => MaintenanceLogMaxOrderByAggregateInputSchema,
  MaintenanceLogMinOrderByAggregateInputSchema: () => MaintenanceLogMinOrderByAggregateInputSchema,
  MaintenanceLogOrderByRelationAggregateInputSchema: () => MaintenanceLogOrderByRelationAggregateInputSchema,
  MaintenanceLogOrderByWithAggregationInputSchema: () => MaintenanceLogOrderByWithAggregationInputSchema,
  MaintenanceLogOrderByWithRelationInputSchema: () => MaintenanceLogOrderByWithRelationInputSchema,
  MaintenanceLogScalarFieldEnumSchema: () => MaintenanceLogScalarFieldEnumSchema,
  MaintenanceLogScalarWhereInputSchema: () => MaintenanceLogScalarWhereInputSchema,
  MaintenanceLogScalarWhereWithAggregatesInputSchema: () => MaintenanceLogScalarWhereWithAggregatesInputSchema,
  MaintenanceLogSchema: () => MaintenanceLogSchema,
  MaintenanceLogSelectSchema: () => MaintenanceLogSelectSchema,
  MaintenanceLogSumOrderByAggregateInputSchema: () => MaintenanceLogSumOrderByAggregateInputSchema,
  MaintenanceLogUncheckedCreateInputSchema: () => MaintenanceLogUncheckedCreateInputSchema,
  MaintenanceLogUncheckedCreateNestedManyWithoutEquipmentInputSchema: () => MaintenanceLogUncheckedCreateNestedManyWithoutEquipmentInputSchema,
  MaintenanceLogUncheckedCreateWithoutEquipmentInputSchema: () => MaintenanceLogUncheckedCreateWithoutEquipmentInputSchema,
  MaintenanceLogUncheckedUpdateInputSchema: () => MaintenanceLogUncheckedUpdateInputSchema,
  MaintenanceLogUncheckedUpdateManyInputSchema: () => MaintenanceLogUncheckedUpdateManyInputSchema,
  MaintenanceLogUncheckedUpdateManyWithoutEquipmentInputSchema: () => MaintenanceLogUncheckedUpdateManyWithoutEquipmentInputSchema,
  MaintenanceLogUncheckedUpdateManyWithoutEquipmentNestedInputSchema: () => MaintenanceLogUncheckedUpdateManyWithoutEquipmentNestedInputSchema,
  MaintenanceLogUncheckedUpdateWithoutEquipmentInputSchema: () => MaintenanceLogUncheckedUpdateWithoutEquipmentInputSchema,
  MaintenanceLogUpdateArgsSchema: () => MaintenanceLogUpdateArgsSchema,
  MaintenanceLogUpdateInputSchema: () => MaintenanceLogUpdateInputSchema,
  MaintenanceLogUpdateManyArgsSchema: () => MaintenanceLogUpdateManyArgsSchema,
  MaintenanceLogUpdateManyMutationInputSchema: () => MaintenanceLogUpdateManyMutationInputSchema,
  MaintenanceLogUpdateManyWithWhereWithoutEquipmentInputSchema: () => MaintenanceLogUpdateManyWithWhereWithoutEquipmentInputSchema,
  MaintenanceLogUpdateManyWithoutEquipmentNestedInputSchema: () => MaintenanceLogUpdateManyWithoutEquipmentNestedInputSchema,
  MaintenanceLogUpdateWithWhereUniqueWithoutEquipmentInputSchema: () => MaintenanceLogUpdateWithWhereUniqueWithoutEquipmentInputSchema,
  MaintenanceLogUpdateWithoutEquipmentInputSchema: () => MaintenanceLogUpdateWithoutEquipmentInputSchema,
  MaintenanceLogUpsertArgsSchema: () => MaintenanceLogUpsertArgsSchema,
  MaintenanceLogUpsertWithWhereUniqueWithoutEquipmentInputSchema: () => MaintenanceLogUpsertWithWhereUniqueWithoutEquipmentInputSchema,
  MaintenanceLogWhereInputSchema: () => MaintenanceLogWhereInputSchema,
  MaintenanceLogWhereUniqueInputSchema: () => MaintenanceLogWhereUniqueInputSchema,
  MaintenanceTypeSchema: () => MaintenanceTypeSchema,
  MenuAggregateArgsSchema: () => MenuAggregateArgsSchema,
  MenuArgsSchema: () => MenuArgsSchema,
  MenuAvgOrderByAggregateInputSchema: () => MenuAvgOrderByAggregateInputSchema,
  MenuCategoryAggregateArgsSchema: () => MenuCategoryAggregateArgsSchema,
  MenuCategoryArgsSchema: () => MenuCategoryArgsSchema,
  MenuCategoryAvgOrderByAggregateInputSchema: () => MenuCategoryAvgOrderByAggregateInputSchema,
  MenuCategoryCountOrderByAggregateInputSchema: () => MenuCategoryCountOrderByAggregateInputSchema,
  MenuCategoryCountOutputTypeArgsSchema: () => MenuCategoryCountOutputTypeArgsSchema,
  MenuCategoryCountOutputTypeSelectSchema: () => MenuCategoryCountOutputTypeSelectSchema,
  MenuCategoryCreateArgsSchema: () => MenuCategoryCreateArgsSchema,
  MenuCategoryCreateInputSchema: () => MenuCategoryCreateInputSchema,
  MenuCategoryCreateManyAndReturnArgsSchema: () => MenuCategoryCreateManyAndReturnArgsSchema,
  MenuCategoryCreateManyArgsSchema: () => MenuCategoryCreateManyArgsSchema,
  MenuCategoryCreateManyInputSchema: () => MenuCategoryCreateManyInputSchema,
  MenuCategoryCreateManyMenuInputEnvelopeSchema: () => MenuCategoryCreateManyMenuInputEnvelopeSchema,
  MenuCategoryCreateManyMenuInputSchema: () => MenuCategoryCreateManyMenuInputSchema,
  MenuCategoryCreateNestedManyWithoutMenuInputSchema: () => MenuCategoryCreateNestedManyWithoutMenuInputSchema,
  MenuCategoryCreateNestedOneWithoutMenuItemsInputSchema: () => MenuCategoryCreateNestedOneWithoutMenuItemsInputSchema,
  MenuCategoryCreateOrConnectWithoutMenuInputSchema: () => MenuCategoryCreateOrConnectWithoutMenuInputSchema,
  MenuCategoryCreateOrConnectWithoutMenuItemsInputSchema: () => MenuCategoryCreateOrConnectWithoutMenuItemsInputSchema,
  MenuCategoryCreateWithoutMenuInputSchema: () => MenuCategoryCreateWithoutMenuInputSchema,
  MenuCategoryCreateWithoutMenuItemsInputSchema: () => MenuCategoryCreateWithoutMenuItemsInputSchema,
  MenuCategoryDeleteArgsSchema: () => MenuCategoryDeleteArgsSchema,
  MenuCategoryDeleteManyArgsSchema: () => MenuCategoryDeleteManyArgsSchema,
  MenuCategoryFindFirstArgsSchema: () => MenuCategoryFindFirstArgsSchema,
  MenuCategoryFindFirstOrThrowArgsSchema: () => MenuCategoryFindFirstOrThrowArgsSchema,
  MenuCategoryFindManyArgsSchema: () => MenuCategoryFindManyArgsSchema,
  MenuCategoryFindUniqueArgsSchema: () => MenuCategoryFindUniqueArgsSchema,
  MenuCategoryFindUniqueOrThrowArgsSchema: () => MenuCategoryFindUniqueOrThrowArgsSchema,
  MenuCategoryGroupByArgsSchema: () => MenuCategoryGroupByArgsSchema,
  MenuCategoryIncludeSchema: () => MenuCategoryIncludeSchema,
  MenuCategoryListRelationFilterSchema: () => MenuCategoryListRelationFilterSchema,
  MenuCategoryMaxOrderByAggregateInputSchema: () => MenuCategoryMaxOrderByAggregateInputSchema,
  MenuCategoryMenuIdNameCompoundUniqueInputSchema: () => MenuCategoryMenuIdNameCompoundUniqueInputSchema,
  MenuCategoryMinOrderByAggregateInputSchema: () => MenuCategoryMinOrderByAggregateInputSchema,
  MenuCategoryNullableRelationFilterSchema: () => MenuCategoryNullableRelationFilterSchema,
  MenuCategoryOrderByRelationAggregateInputSchema: () => MenuCategoryOrderByRelationAggregateInputSchema,
  MenuCategoryOrderByWithAggregationInputSchema: () => MenuCategoryOrderByWithAggregationInputSchema,
  MenuCategoryOrderByWithRelationInputSchema: () => MenuCategoryOrderByWithRelationInputSchema,
  MenuCategoryScalarFieldEnumSchema: () => MenuCategoryScalarFieldEnumSchema,
  MenuCategoryScalarWhereInputSchema: () => MenuCategoryScalarWhereInputSchema,
  MenuCategoryScalarWhereWithAggregatesInputSchema: () => MenuCategoryScalarWhereWithAggregatesInputSchema,
  MenuCategorySchema: () => MenuCategorySchema,
  MenuCategorySelectSchema: () => MenuCategorySelectSchema,
  MenuCategorySumOrderByAggregateInputSchema: () => MenuCategorySumOrderByAggregateInputSchema,
  MenuCategoryUncheckedCreateInputSchema: () => MenuCategoryUncheckedCreateInputSchema,
  MenuCategoryUncheckedCreateNestedManyWithoutMenuInputSchema: () => MenuCategoryUncheckedCreateNestedManyWithoutMenuInputSchema,
  MenuCategoryUncheckedCreateWithoutMenuInputSchema: () => MenuCategoryUncheckedCreateWithoutMenuInputSchema,
  MenuCategoryUncheckedCreateWithoutMenuItemsInputSchema: () => MenuCategoryUncheckedCreateWithoutMenuItemsInputSchema,
  MenuCategoryUncheckedUpdateInputSchema: () => MenuCategoryUncheckedUpdateInputSchema,
  MenuCategoryUncheckedUpdateManyInputSchema: () => MenuCategoryUncheckedUpdateManyInputSchema,
  MenuCategoryUncheckedUpdateManyWithoutMenuInputSchema: () => MenuCategoryUncheckedUpdateManyWithoutMenuInputSchema,
  MenuCategoryUncheckedUpdateManyWithoutMenuNestedInputSchema: () => MenuCategoryUncheckedUpdateManyWithoutMenuNestedInputSchema,
  MenuCategoryUncheckedUpdateWithoutMenuInputSchema: () => MenuCategoryUncheckedUpdateWithoutMenuInputSchema,
  MenuCategoryUncheckedUpdateWithoutMenuItemsInputSchema: () => MenuCategoryUncheckedUpdateWithoutMenuItemsInputSchema,
  MenuCategoryUpdateArgsSchema: () => MenuCategoryUpdateArgsSchema,
  MenuCategoryUpdateInputSchema: () => MenuCategoryUpdateInputSchema,
  MenuCategoryUpdateManyArgsSchema: () => MenuCategoryUpdateManyArgsSchema,
  MenuCategoryUpdateManyMutationInputSchema: () => MenuCategoryUpdateManyMutationInputSchema,
  MenuCategoryUpdateManyWithWhereWithoutMenuInputSchema: () => MenuCategoryUpdateManyWithWhereWithoutMenuInputSchema,
  MenuCategoryUpdateManyWithoutMenuNestedInputSchema: () => MenuCategoryUpdateManyWithoutMenuNestedInputSchema,
  MenuCategoryUpdateOneWithoutMenuItemsNestedInputSchema: () => MenuCategoryUpdateOneWithoutMenuItemsNestedInputSchema,
  MenuCategoryUpdateToOneWithWhereWithoutMenuItemsInputSchema: () => MenuCategoryUpdateToOneWithWhereWithoutMenuItemsInputSchema,
  MenuCategoryUpdateWithWhereUniqueWithoutMenuInputSchema: () => MenuCategoryUpdateWithWhereUniqueWithoutMenuInputSchema,
  MenuCategoryUpdateWithoutMenuInputSchema: () => MenuCategoryUpdateWithoutMenuInputSchema,
  MenuCategoryUpdateWithoutMenuItemsInputSchema: () => MenuCategoryUpdateWithoutMenuItemsInputSchema,
  MenuCategoryUpsertArgsSchema: () => MenuCategoryUpsertArgsSchema,
  MenuCategoryUpsertWithWhereUniqueWithoutMenuInputSchema: () => MenuCategoryUpsertWithWhereUniqueWithoutMenuInputSchema,
  MenuCategoryUpsertWithoutMenuItemsInputSchema: () => MenuCategoryUpsertWithoutMenuItemsInputSchema,
  MenuCategoryWhereInputSchema: () => MenuCategoryWhereInputSchema,
  MenuCategoryWhereUniqueInputSchema: () => MenuCategoryWhereUniqueInputSchema,
  MenuCountOrderByAggregateInputSchema: () => MenuCountOrderByAggregateInputSchema,
  MenuCountOutputTypeArgsSchema: () => MenuCountOutputTypeArgsSchema,
  MenuCountOutputTypeSelectSchema: () => MenuCountOutputTypeSelectSchema,
  MenuCreateArgsSchema: () => MenuCreateArgsSchema,
  MenuCreateInputSchema: () => MenuCreateInputSchema,
  MenuCreateManyAndReturnArgsSchema: () => MenuCreateManyAndReturnArgsSchema,
  MenuCreateManyArgsSchema: () => MenuCreateManyArgsSchema,
  MenuCreateManyInputSchema: () => MenuCreateManyInputSchema,
  MenuCreateManyRestaurantInputEnvelopeSchema: () => MenuCreateManyRestaurantInputEnvelopeSchema,
  MenuCreateManyRestaurantInputSchema: () => MenuCreateManyRestaurantInputSchema,
  MenuCreateNestedManyWithoutRestaurantInputSchema: () => MenuCreateNestedManyWithoutRestaurantInputSchema,
  MenuCreateNestedOneWithoutMenuCategoryInputSchema: () => MenuCreateNestedOneWithoutMenuCategoryInputSchema,
  MenuCreateNestedOneWithoutMenuItemsInputSchema: () => MenuCreateNestedOneWithoutMenuItemsInputSchema,
  MenuCreateOrConnectWithoutMenuCategoryInputSchema: () => MenuCreateOrConnectWithoutMenuCategoryInputSchema,
  MenuCreateOrConnectWithoutMenuItemsInputSchema: () => MenuCreateOrConnectWithoutMenuItemsInputSchema,
  MenuCreateOrConnectWithoutRestaurantInputSchema: () => MenuCreateOrConnectWithoutRestaurantInputSchema,
  MenuCreateWithoutMenuCategoryInputSchema: () => MenuCreateWithoutMenuCategoryInputSchema,
  MenuCreateWithoutMenuItemsInputSchema: () => MenuCreateWithoutMenuItemsInputSchema,
  MenuCreateWithoutRestaurantInputSchema: () => MenuCreateWithoutRestaurantInputSchema,
  MenuDeleteArgsSchema: () => MenuDeleteArgsSchema,
  MenuDeleteManyArgsSchema: () => MenuDeleteManyArgsSchema,
  MenuFindFirstArgsSchema: () => MenuFindFirstArgsSchema,
  MenuFindFirstOrThrowArgsSchema: () => MenuFindFirstOrThrowArgsSchema,
  MenuFindManyArgsSchema: () => MenuFindManyArgsSchema,
  MenuFindUniqueArgsSchema: () => MenuFindUniqueArgsSchema,
  MenuFindUniqueOrThrowArgsSchema: () => MenuFindUniqueOrThrowArgsSchema,
  MenuGroupByArgsSchema: () => MenuGroupByArgsSchema,
  MenuIncludeSchema: () => MenuIncludeSchema,
  MenuItemAggregateArgsSchema: () => MenuItemAggregateArgsSchema,
  MenuItemArgsSchema: () => MenuItemArgsSchema,
  MenuItemAvgOrderByAggregateInputSchema: () => MenuItemAvgOrderByAggregateInputSchema,
  MenuItemCountOrderByAggregateInputSchema: () => MenuItemCountOrderByAggregateInputSchema,
  MenuItemCountOutputTypeArgsSchema: () => MenuItemCountOutputTypeArgsSchema,
  MenuItemCountOutputTypeSelectSchema: () => MenuItemCountOutputTypeSelectSchema,
  MenuItemCreateArgsSchema: () => MenuItemCreateArgsSchema,
  MenuItemCreateInputSchema: () => MenuItemCreateInputSchema,
  MenuItemCreateManyAndReturnArgsSchema: () => MenuItemCreateManyAndReturnArgsSchema,
  MenuItemCreateManyArgsSchema: () => MenuItemCreateManyArgsSchema,
  MenuItemCreateManyCategoryInputEnvelopeSchema: () => MenuItemCreateManyCategoryInputEnvelopeSchema,
  MenuItemCreateManyCategoryInputSchema: () => MenuItemCreateManyCategoryInputSchema,
  MenuItemCreateManyInputSchema: () => MenuItemCreateManyInputSchema,
  MenuItemCreateManyMenuInputEnvelopeSchema: () => MenuItemCreateManyMenuInputEnvelopeSchema,
  MenuItemCreateManyMenuInputSchema: () => MenuItemCreateManyMenuInputSchema,
  MenuItemCreateNestedManyWithoutCategoryInputSchema: () => MenuItemCreateNestedManyWithoutCategoryInputSchema,
  MenuItemCreateNestedManyWithoutDietaryRestrictionsInputSchema: () => MenuItemCreateNestedManyWithoutDietaryRestrictionsInputSchema,
  MenuItemCreateNestedManyWithoutMenuInputSchema: () => MenuItemCreateNestedManyWithoutMenuInputSchema,
  MenuItemCreateNestedManyWithoutRecipesInputSchema: () => MenuItemCreateNestedManyWithoutRecipesInputSchema,
  MenuItemCreateNestedOneWithoutFeedbackInputSchema: () => MenuItemCreateNestedOneWithoutFeedbackInputSchema,
  MenuItemCreateNestedOneWithoutLeftoverItemInputSchema: () => MenuItemCreateNestedOneWithoutLeftoverItemInputSchema,
  MenuItemCreateNestedOneWithoutMenuItemRecipeInputSchema: () => MenuItemCreateNestedOneWithoutMenuItemRecipeInputSchema,
  MenuItemCreateNestedOneWithoutNutritionalInfoInputSchema: () => MenuItemCreateNestedOneWithoutNutritionalInfoInputSchema,
  MenuItemCreateNestedOneWithoutNutritionalRecommendationInputSchema: () => MenuItemCreateNestedOneWithoutNutritionalRecommendationInputSchema,
  MenuItemCreateNestedOneWithoutSalesTransactionsInputSchema: () => MenuItemCreateNestedOneWithoutSalesTransactionsInputSchema,
  MenuItemCreateOrConnectWithoutCategoryInputSchema: () => MenuItemCreateOrConnectWithoutCategoryInputSchema,
  MenuItemCreateOrConnectWithoutDietaryRestrictionsInputSchema: () => MenuItemCreateOrConnectWithoutDietaryRestrictionsInputSchema,
  MenuItemCreateOrConnectWithoutFeedbackInputSchema: () => MenuItemCreateOrConnectWithoutFeedbackInputSchema,
  MenuItemCreateOrConnectWithoutLeftoverItemInputSchema: () => MenuItemCreateOrConnectWithoutLeftoverItemInputSchema,
  MenuItemCreateOrConnectWithoutMenuInputSchema: () => MenuItemCreateOrConnectWithoutMenuInputSchema,
  MenuItemCreateOrConnectWithoutMenuItemRecipeInputSchema: () => MenuItemCreateOrConnectWithoutMenuItemRecipeInputSchema,
  MenuItemCreateOrConnectWithoutNutritionalInfoInputSchema: () => MenuItemCreateOrConnectWithoutNutritionalInfoInputSchema,
  MenuItemCreateOrConnectWithoutNutritionalRecommendationInputSchema: () => MenuItemCreateOrConnectWithoutNutritionalRecommendationInputSchema,
  MenuItemCreateOrConnectWithoutRecipesInputSchema: () => MenuItemCreateOrConnectWithoutRecipesInputSchema,
  MenuItemCreateOrConnectWithoutSalesTransactionsInputSchema: () => MenuItemCreateOrConnectWithoutSalesTransactionsInputSchema,
  MenuItemCreateWithoutCategoryInputSchema: () => MenuItemCreateWithoutCategoryInputSchema,
  MenuItemCreateWithoutDietaryRestrictionsInputSchema: () => MenuItemCreateWithoutDietaryRestrictionsInputSchema,
  MenuItemCreateWithoutFeedbackInputSchema: () => MenuItemCreateWithoutFeedbackInputSchema,
  MenuItemCreateWithoutLeftoverItemInputSchema: () => MenuItemCreateWithoutLeftoverItemInputSchema,
  MenuItemCreateWithoutMenuInputSchema: () => MenuItemCreateWithoutMenuInputSchema,
  MenuItemCreateWithoutMenuItemRecipeInputSchema: () => MenuItemCreateWithoutMenuItemRecipeInputSchema,
  MenuItemCreateWithoutNutritionalInfoInputSchema: () => MenuItemCreateWithoutNutritionalInfoInputSchema,
  MenuItemCreateWithoutNutritionalRecommendationInputSchema: () => MenuItemCreateWithoutNutritionalRecommendationInputSchema,
  MenuItemCreateWithoutRecipesInputSchema: () => MenuItemCreateWithoutRecipesInputSchema,
  MenuItemCreateWithoutSalesTransactionsInputSchema: () => MenuItemCreateWithoutSalesTransactionsInputSchema,
  MenuItemCreateallergensInputSchema: () => MenuItemCreateallergensInputSchema,
  MenuItemCreaterecipeIdsInputSchema: () => MenuItemCreaterecipeIdsInputSchema,
  MenuItemCreaterecipeServingsAmountInputSchema: () => MenuItemCreaterecipeServingsAmountInputSchema,
  MenuItemCreaterecipeServingsCostInputSchema: () => MenuItemCreaterecipeServingsCostInputSchema,
  MenuItemDeleteArgsSchema: () => MenuItemDeleteArgsSchema,
  MenuItemDeleteManyArgsSchema: () => MenuItemDeleteManyArgsSchema,
  MenuItemFindFirstArgsSchema: () => MenuItemFindFirstArgsSchema,
  MenuItemFindFirstOrThrowArgsSchema: () => MenuItemFindFirstOrThrowArgsSchema,
  MenuItemFindManyArgsSchema: () => MenuItemFindManyArgsSchema,
  MenuItemFindUniqueArgsSchema: () => MenuItemFindUniqueArgsSchema,
  MenuItemFindUniqueOrThrowArgsSchema: () => MenuItemFindUniqueOrThrowArgsSchema,
  MenuItemGroupByArgsSchema: () => MenuItemGroupByArgsSchema,
  MenuItemIncludeSchema: () => MenuItemIncludeSchema,
  MenuItemListRelationFilterSchema: () => MenuItemListRelationFilterSchema,
  MenuItemMaxOrderByAggregateInputSchema: () => MenuItemMaxOrderByAggregateInputSchema,
  MenuItemMinOrderByAggregateInputSchema: () => MenuItemMinOrderByAggregateInputSchema,
  MenuItemNullableRelationFilterSchema: () => MenuItemNullableRelationFilterSchema,
  MenuItemOrderByRelationAggregateInputSchema: () => MenuItemOrderByRelationAggregateInputSchema,
  MenuItemOrderByWithAggregationInputSchema: () => MenuItemOrderByWithAggregationInputSchema,
  MenuItemOrderByWithRelationInputSchema: () => MenuItemOrderByWithRelationInputSchema,
  MenuItemRecipeAggregateArgsSchema: () => MenuItemRecipeAggregateArgsSchema,
  MenuItemRecipeArgsSchema: () => MenuItemRecipeArgsSchema,
  MenuItemRecipeAvgOrderByAggregateInputSchema: () => MenuItemRecipeAvgOrderByAggregateInputSchema,
  MenuItemRecipeCountOrderByAggregateInputSchema: () => MenuItemRecipeCountOrderByAggregateInputSchema,
  MenuItemRecipeCreateArgsSchema: () => MenuItemRecipeCreateArgsSchema,
  MenuItemRecipeCreateInputSchema: () => MenuItemRecipeCreateInputSchema,
  MenuItemRecipeCreateManyAndReturnArgsSchema: () => MenuItemRecipeCreateManyAndReturnArgsSchema,
  MenuItemRecipeCreateManyArgsSchema: () => MenuItemRecipeCreateManyArgsSchema,
  MenuItemRecipeCreateManyInputSchema: () => MenuItemRecipeCreateManyInputSchema,
  MenuItemRecipeCreateManyMenuItemInputEnvelopeSchema: () => MenuItemRecipeCreateManyMenuItemInputEnvelopeSchema,
  MenuItemRecipeCreateManyMenuItemInputSchema: () => MenuItemRecipeCreateManyMenuItemInputSchema,
  MenuItemRecipeCreateManyRecipeInputEnvelopeSchema: () => MenuItemRecipeCreateManyRecipeInputEnvelopeSchema,
  MenuItemRecipeCreateManyRecipeInputSchema: () => MenuItemRecipeCreateManyRecipeInputSchema,
  MenuItemRecipeCreateNestedManyWithoutMenuItemInputSchema: () => MenuItemRecipeCreateNestedManyWithoutMenuItemInputSchema,
  MenuItemRecipeCreateNestedManyWithoutRecipeInputSchema: () => MenuItemRecipeCreateNestedManyWithoutRecipeInputSchema,
  MenuItemRecipeCreateOrConnectWithoutMenuItemInputSchema: () => MenuItemRecipeCreateOrConnectWithoutMenuItemInputSchema,
  MenuItemRecipeCreateOrConnectWithoutRecipeInputSchema: () => MenuItemRecipeCreateOrConnectWithoutRecipeInputSchema,
  MenuItemRecipeCreateWithoutMenuItemInputSchema: () => MenuItemRecipeCreateWithoutMenuItemInputSchema,
  MenuItemRecipeCreateWithoutRecipeInputSchema: () => MenuItemRecipeCreateWithoutRecipeInputSchema,
  MenuItemRecipeDeleteArgsSchema: () => MenuItemRecipeDeleteArgsSchema,
  MenuItemRecipeDeleteManyArgsSchema: () => MenuItemRecipeDeleteManyArgsSchema,
  MenuItemRecipeFindFirstArgsSchema: () => MenuItemRecipeFindFirstArgsSchema,
  MenuItemRecipeFindFirstOrThrowArgsSchema: () => MenuItemRecipeFindFirstOrThrowArgsSchema,
  MenuItemRecipeFindManyArgsSchema: () => MenuItemRecipeFindManyArgsSchema,
  MenuItemRecipeFindUniqueArgsSchema: () => MenuItemRecipeFindUniqueArgsSchema,
  MenuItemRecipeFindUniqueOrThrowArgsSchema: () => MenuItemRecipeFindUniqueOrThrowArgsSchema,
  MenuItemRecipeGroupByArgsSchema: () => MenuItemRecipeGroupByArgsSchema,
  MenuItemRecipeIncludeSchema: () => MenuItemRecipeIncludeSchema,
  MenuItemRecipeListRelationFilterSchema: () => MenuItemRecipeListRelationFilterSchema,
  MenuItemRecipeMaxOrderByAggregateInputSchema: () => MenuItemRecipeMaxOrderByAggregateInputSchema,
  MenuItemRecipeMenuItemIdRecipeIdCompoundUniqueInputSchema: () => MenuItemRecipeMenuItemIdRecipeIdCompoundUniqueInputSchema,
  MenuItemRecipeMinOrderByAggregateInputSchema: () => MenuItemRecipeMinOrderByAggregateInputSchema,
  MenuItemRecipeOrderByRelationAggregateInputSchema: () => MenuItemRecipeOrderByRelationAggregateInputSchema,
  MenuItemRecipeOrderByWithAggregationInputSchema: () => MenuItemRecipeOrderByWithAggregationInputSchema,
  MenuItemRecipeOrderByWithRelationInputSchema: () => MenuItemRecipeOrderByWithRelationInputSchema,
  MenuItemRecipeScalarFieldEnumSchema: () => MenuItemRecipeScalarFieldEnumSchema,
  MenuItemRecipeScalarWhereInputSchema: () => MenuItemRecipeScalarWhereInputSchema,
  MenuItemRecipeScalarWhereWithAggregatesInputSchema: () => MenuItemRecipeScalarWhereWithAggregatesInputSchema,
  MenuItemRecipeSchema: () => MenuItemRecipeSchema,
  MenuItemRecipeSelectSchema: () => MenuItemRecipeSelectSchema,
  MenuItemRecipeSumOrderByAggregateInputSchema: () => MenuItemRecipeSumOrderByAggregateInputSchema,
  MenuItemRecipeUncheckedCreateInputSchema: () => MenuItemRecipeUncheckedCreateInputSchema,
  MenuItemRecipeUncheckedCreateNestedManyWithoutMenuItemInputSchema: () => MenuItemRecipeUncheckedCreateNestedManyWithoutMenuItemInputSchema,
  MenuItemRecipeUncheckedCreateNestedManyWithoutRecipeInputSchema: () => MenuItemRecipeUncheckedCreateNestedManyWithoutRecipeInputSchema,
  MenuItemRecipeUncheckedCreateWithoutMenuItemInputSchema: () => MenuItemRecipeUncheckedCreateWithoutMenuItemInputSchema,
  MenuItemRecipeUncheckedCreateWithoutRecipeInputSchema: () => MenuItemRecipeUncheckedCreateWithoutRecipeInputSchema,
  MenuItemRecipeUncheckedUpdateInputSchema: () => MenuItemRecipeUncheckedUpdateInputSchema,
  MenuItemRecipeUncheckedUpdateManyInputSchema: () => MenuItemRecipeUncheckedUpdateManyInputSchema,
  MenuItemRecipeUncheckedUpdateManyWithoutMenuItemInputSchema: () => MenuItemRecipeUncheckedUpdateManyWithoutMenuItemInputSchema,
  MenuItemRecipeUncheckedUpdateManyWithoutMenuItemNestedInputSchema: () => MenuItemRecipeUncheckedUpdateManyWithoutMenuItemNestedInputSchema,
  MenuItemRecipeUncheckedUpdateManyWithoutRecipeInputSchema: () => MenuItemRecipeUncheckedUpdateManyWithoutRecipeInputSchema,
  MenuItemRecipeUncheckedUpdateManyWithoutRecipeNestedInputSchema: () => MenuItemRecipeUncheckedUpdateManyWithoutRecipeNestedInputSchema,
  MenuItemRecipeUncheckedUpdateWithoutMenuItemInputSchema: () => MenuItemRecipeUncheckedUpdateWithoutMenuItemInputSchema,
  MenuItemRecipeUncheckedUpdateWithoutRecipeInputSchema: () => MenuItemRecipeUncheckedUpdateWithoutRecipeInputSchema,
  MenuItemRecipeUpdateArgsSchema: () => MenuItemRecipeUpdateArgsSchema,
  MenuItemRecipeUpdateInputSchema: () => MenuItemRecipeUpdateInputSchema,
  MenuItemRecipeUpdateManyArgsSchema: () => MenuItemRecipeUpdateManyArgsSchema,
  MenuItemRecipeUpdateManyMutationInputSchema: () => MenuItemRecipeUpdateManyMutationInputSchema,
  MenuItemRecipeUpdateManyWithWhereWithoutMenuItemInputSchema: () => MenuItemRecipeUpdateManyWithWhereWithoutMenuItemInputSchema,
  MenuItemRecipeUpdateManyWithWhereWithoutRecipeInputSchema: () => MenuItemRecipeUpdateManyWithWhereWithoutRecipeInputSchema,
  MenuItemRecipeUpdateManyWithoutMenuItemNestedInputSchema: () => MenuItemRecipeUpdateManyWithoutMenuItemNestedInputSchema,
  MenuItemRecipeUpdateManyWithoutRecipeNestedInputSchema: () => MenuItemRecipeUpdateManyWithoutRecipeNestedInputSchema,
  MenuItemRecipeUpdateWithWhereUniqueWithoutMenuItemInputSchema: () => MenuItemRecipeUpdateWithWhereUniqueWithoutMenuItemInputSchema,
  MenuItemRecipeUpdateWithWhereUniqueWithoutRecipeInputSchema: () => MenuItemRecipeUpdateWithWhereUniqueWithoutRecipeInputSchema,
  MenuItemRecipeUpdateWithoutMenuItemInputSchema: () => MenuItemRecipeUpdateWithoutMenuItemInputSchema,
  MenuItemRecipeUpdateWithoutRecipeInputSchema: () => MenuItemRecipeUpdateWithoutRecipeInputSchema,
  MenuItemRecipeUpsertArgsSchema: () => MenuItemRecipeUpsertArgsSchema,
  MenuItemRecipeUpsertWithWhereUniqueWithoutMenuItemInputSchema: () => MenuItemRecipeUpsertWithWhereUniqueWithoutMenuItemInputSchema,
  MenuItemRecipeUpsertWithWhereUniqueWithoutRecipeInputSchema: () => MenuItemRecipeUpsertWithWhereUniqueWithoutRecipeInputSchema,
  MenuItemRecipeWhereInputSchema: () => MenuItemRecipeWhereInputSchema,
  MenuItemRecipeWhereUniqueInputSchema: () => MenuItemRecipeWhereUniqueInputSchema,
  MenuItemRelationFilterSchema: () => MenuItemRelationFilterSchema,
  MenuItemScalarFieldEnumSchema: () => MenuItemScalarFieldEnumSchema,
  MenuItemScalarWhereInputSchema: () => MenuItemScalarWhereInputSchema,
  MenuItemScalarWhereWithAggregatesInputSchema: () => MenuItemScalarWhereWithAggregatesInputSchema,
  MenuItemSchema: () => MenuItemSchema,
  MenuItemSelectSchema: () => MenuItemSelectSchema,
  MenuItemSumOrderByAggregateInputSchema: () => MenuItemSumOrderByAggregateInputSchema,
  MenuItemUncheckedCreateInputSchema: () => MenuItemUncheckedCreateInputSchema,
  MenuItemUncheckedCreateNestedManyWithoutCategoryInputSchema: () => MenuItemUncheckedCreateNestedManyWithoutCategoryInputSchema,
  MenuItemUncheckedCreateNestedManyWithoutDietaryRestrictionsInputSchema: () => MenuItemUncheckedCreateNestedManyWithoutDietaryRestrictionsInputSchema,
  MenuItemUncheckedCreateNestedManyWithoutMenuInputSchema: () => MenuItemUncheckedCreateNestedManyWithoutMenuInputSchema,
  MenuItemUncheckedCreateNestedManyWithoutRecipesInputSchema: () => MenuItemUncheckedCreateNestedManyWithoutRecipesInputSchema,
  MenuItemUncheckedCreateWithoutCategoryInputSchema: () => MenuItemUncheckedCreateWithoutCategoryInputSchema,
  MenuItemUncheckedCreateWithoutDietaryRestrictionsInputSchema: () => MenuItemUncheckedCreateWithoutDietaryRestrictionsInputSchema,
  MenuItemUncheckedCreateWithoutFeedbackInputSchema: () => MenuItemUncheckedCreateWithoutFeedbackInputSchema,
  MenuItemUncheckedCreateWithoutLeftoverItemInputSchema: () => MenuItemUncheckedCreateWithoutLeftoverItemInputSchema,
  MenuItemUncheckedCreateWithoutMenuInputSchema: () => MenuItemUncheckedCreateWithoutMenuInputSchema,
  MenuItemUncheckedCreateWithoutMenuItemRecipeInputSchema: () => MenuItemUncheckedCreateWithoutMenuItemRecipeInputSchema,
  MenuItemUncheckedCreateWithoutNutritionalInfoInputSchema: () => MenuItemUncheckedCreateWithoutNutritionalInfoInputSchema,
  MenuItemUncheckedCreateWithoutNutritionalRecommendationInputSchema: () => MenuItemUncheckedCreateWithoutNutritionalRecommendationInputSchema,
  MenuItemUncheckedCreateWithoutRecipesInputSchema: () => MenuItemUncheckedCreateWithoutRecipesInputSchema,
  MenuItemUncheckedCreateWithoutSalesTransactionsInputSchema: () => MenuItemUncheckedCreateWithoutSalesTransactionsInputSchema,
  MenuItemUncheckedUpdateInputSchema: () => MenuItemUncheckedUpdateInputSchema,
  MenuItemUncheckedUpdateManyInputSchema: () => MenuItemUncheckedUpdateManyInputSchema,
  MenuItemUncheckedUpdateManyWithoutCategoryInputSchema: () => MenuItemUncheckedUpdateManyWithoutCategoryInputSchema,
  MenuItemUncheckedUpdateManyWithoutCategoryNestedInputSchema: () => MenuItemUncheckedUpdateManyWithoutCategoryNestedInputSchema,
  MenuItemUncheckedUpdateManyWithoutDietaryRestrictionsInputSchema: () => MenuItemUncheckedUpdateManyWithoutDietaryRestrictionsInputSchema,
  MenuItemUncheckedUpdateManyWithoutDietaryRestrictionsNestedInputSchema: () => MenuItemUncheckedUpdateManyWithoutDietaryRestrictionsNestedInputSchema,
  MenuItemUncheckedUpdateManyWithoutMenuInputSchema: () => MenuItemUncheckedUpdateManyWithoutMenuInputSchema,
  MenuItemUncheckedUpdateManyWithoutMenuNestedInputSchema: () => MenuItemUncheckedUpdateManyWithoutMenuNestedInputSchema,
  MenuItemUncheckedUpdateManyWithoutRecipesInputSchema: () => MenuItemUncheckedUpdateManyWithoutRecipesInputSchema,
  MenuItemUncheckedUpdateManyWithoutRecipesNestedInputSchema: () => MenuItemUncheckedUpdateManyWithoutRecipesNestedInputSchema,
  MenuItemUncheckedUpdateWithoutCategoryInputSchema: () => MenuItemUncheckedUpdateWithoutCategoryInputSchema,
  MenuItemUncheckedUpdateWithoutDietaryRestrictionsInputSchema: () => MenuItemUncheckedUpdateWithoutDietaryRestrictionsInputSchema,
  MenuItemUncheckedUpdateWithoutFeedbackInputSchema: () => MenuItemUncheckedUpdateWithoutFeedbackInputSchema,
  MenuItemUncheckedUpdateWithoutLeftoverItemInputSchema: () => MenuItemUncheckedUpdateWithoutLeftoverItemInputSchema,
  MenuItemUncheckedUpdateWithoutMenuInputSchema: () => MenuItemUncheckedUpdateWithoutMenuInputSchema,
  MenuItemUncheckedUpdateWithoutMenuItemRecipeInputSchema: () => MenuItemUncheckedUpdateWithoutMenuItemRecipeInputSchema,
  MenuItemUncheckedUpdateWithoutNutritionalInfoInputSchema: () => MenuItemUncheckedUpdateWithoutNutritionalInfoInputSchema,
  MenuItemUncheckedUpdateWithoutNutritionalRecommendationInputSchema: () => MenuItemUncheckedUpdateWithoutNutritionalRecommendationInputSchema,
  MenuItemUncheckedUpdateWithoutRecipesInputSchema: () => MenuItemUncheckedUpdateWithoutRecipesInputSchema,
  MenuItemUncheckedUpdateWithoutSalesTransactionsInputSchema: () => MenuItemUncheckedUpdateWithoutSalesTransactionsInputSchema,
  MenuItemUpdateArgsSchema: () => MenuItemUpdateArgsSchema,
  MenuItemUpdateInputSchema: () => MenuItemUpdateInputSchema,
  MenuItemUpdateManyArgsSchema: () => MenuItemUpdateManyArgsSchema,
  MenuItemUpdateManyMutationInputSchema: () => MenuItemUpdateManyMutationInputSchema,
  MenuItemUpdateManyWithWhereWithoutCategoryInputSchema: () => MenuItemUpdateManyWithWhereWithoutCategoryInputSchema,
  MenuItemUpdateManyWithWhereWithoutDietaryRestrictionsInputSchema: () => MenuItemUpdateManyWithWhereWithoutDietaryRestrictionsInputSchema,
  MenuItemUpdateManyWithWhereWithoutMenuInputSchema: () => MenuItemUpdateManyWithWhereWithoutMenuInputSchema,
  MenuItemUpdateManyWithWhereWithoutRecipesInputSchema: () => MenuItemUpdateManyWithWhereWithoutRecipesInputSchema,
  MenuItemUpdateManyWithoutCategoryNestedInputSchema: () => MenuItemUpdateManyWithoutCategoryNestedInputSchema,
  MenuItemUpdateManyWithoutDietaryRestrictionsNestedInputSchema: () => MenuItemUpdateManyWithoutDietaryRestrictionsNestedInputSchema,
  MenuItemUpdateManyWithoutMenuNestedInputSchema: () => MenuItemUpdateManyWithoutMenuNestedInputSchema,
  MenuItemUpdateManyWithoutRecipesNestedInputSchema: () => MenuItemUpdateManyWithoutRecipesNestedInputSchema,
  MenuItemUpdateOneRequiredWithoutLeftoverItemNestedInputSchema: () => MenuItemUpdateOneRequiredWithoutLeftoverItemNestedInputSchema,
  MenuItemUpdateOneRequiredWithoutMenuItemRecipeNestedInputSchema: () => MenuItemUpdateOneRequiredWithoutMenuItemRecipeNestedInputSchema,
  MenuItemUpdateOneRequiredWithoutNutritionalRecommendationNestedInputSchema: () => MenuItemUpdateOneRequiredWithoutNutritionalRecommendationNestedInputSchema,
  MenuItemUpdateOneRequiredWithoutSalesTransactionsNestedInputSchema: () => MenuItemUpdateOneRequiredWithoutSalesTransactionsNestedInputSchema,
  MenuItemUpdateOneWithoutFeedbackNestedInputSchema: () => MenuItemUpdateOneWithoutFeedbackNestedInputSchema,
  MenuItemUpdateOneWithoutNutritionalInfoNestedInputSchema: () => MenuItemUpdateOneWithoutNutritionalInfoNestedInputSchema,
  MenuItemUpdateToOneWithWhereWithoutFeedbackInputSchema: () => MenuItemUpdateToOneWithWhereWithoutFeedbackInputSchema,
  MenuItemUpdateToOneWithWhereWithoutLeftoverItemInputSchema: () => MenuItemUpdateToOneWithWhereWithoutLeftoverItemInputSchema,
  MenuItemUpdateToOneWithWhereWithoutMenuItemRecipeInputSchema: () => MenuItemUpdateToOneWithWhereWithoutMenuItemRecipeInputSchema,
  MenuItemUpdateToOneWithWhereWithoutNutritionalInfoInputSchema: () => MenuItemUpdateToOneWithWhereWithoutNutritionalInfoInputSchema,
  MenuItemUpdateToOneWithWhereWithoutNutritionalRecommendationInputSchema: () => MenuItemUpdateToOneWithWhereWithoutNutritionalRecommendationInputSchema,
  MenuItemUpdateToOneWithWhereWithoutSalesTransactionsInputSchema: () => MenuItemUpdateToOneWithWhereWithoutSalesTransactionsInputSchema,
  MenuItemUpdateWithWhereUniqueWithoutCategoryInputSchema: () => MenuItemUpdateWithWhereUniqueWithoutCategoryInputSchema,
  MenuItemUpdateWithWhereUniqueWithoutDietaryRestrictionsInputSchema: () => MenuItemUpdateWithWhereUniqueWithoutDietaryRestrictionsInputSchema,
  MenuItemUpdateWithWhereUniqueWithoutMenuInputSchema: () => MenuItemUpdateWithWhereUniqueWithoutMenuInputSchema,
  MenuItemUpdateWithWhereUniqueWithoutRecipesInputSchema: () => MenuItemUpdateWithWhereUniqueWithoutRecipesInputSchema,
  MenuItemUpdateWithoutCategoryInputSchema: () => MenuItemUpdateWithoutCategoryInputSchema,
  MenuItemUpdateWithoutDietaryRestrictionsInputSchema: () => MenuItemUpdateWithoutDietaryRestrictionsInputSchema,
  MenuItemUpdateWithoutFeedbackInputSchema: () => MenuItemUpdateWithoutFeedbackInputSchema,
  MenuItemUpdateWithoutLeftoverItemInputSchema: () => MenuItemUpdateWithoutLeftoverItemInputSchema,
  MenuItemUpdateWithoutMenuInputSchema: () => MenuItemUpdateWithoutMenuInputSchema,
  MenuItemUpdateWithoutMenuItemRecipeInputSchema: () => MenuItemUpdateWithoutMenuItemRecipeInputSchema,
  MenuItemUpdateWithoutNutritionalInfoInputSchema: () => MenuItemUpdateWithoutNutritionalInfoInputSchema,
  MenuItemUpdateWithoutNutritionalRecommendationInputSchema: () => MenuItemUpdateWithoutNutritionalRecommendationInputSchema,
  MenuItemUpdateWithoutRecipesInputSchema: () => MenuItemUpdateWithoutRecipesInputSchema,
  MenuItemUpdateWithoutSalesTransactionsInputSchema: () => MenuItemUpdateWithoutSalesTransactionsInputSchema,
  MenuItemUpdateallergensInputSchema: () => MenuItemUpdateallergensInputSchema,
  MenuItemUpdaterecipeIdsInputSchema: () => MenuItemUpdaterecipeIdsInputSchema,
  MenuItemUpdaterecipeServingsAmountInputSchema: () => MenuItemUpdaterecipeServingsAmountInputSchema,
  MenuItemUpdaterecipeServingsCostInputSchema: () => MenuItemUpdaterecipeServingsCostInputSchema,
  MenuItemUpsertArgsSchema: () => MenuItemUpsertArgsSchema,
  MenuItemUpsertWithWhereUniqueWithoutCategoryInputSchema: () => MenuItemUpsertWithWhereUniqueWithoutCategoryInputSchema,
  MenuItemUpsertWithWhereUniqueWithoutDietaryRestrictionsInputSchema: () => MenuItemUpsertWithWhereUniqueWithoutDietaryRestrictionsInputSchema,
  MenuItemUpsertWithWhereUniqueWithoutMenuInputSchema: () => MenuItemUpsertWithWhereUniqueWithoutMenuInputSchema,
  MenuItemUpsertWithWhereUniqueWithoutRecipesInputSchema: () => MenuItemUpsertWithWhereUniqueWithoutRecipesInputSchema,
  MenuItemUpsertWithoutFeedbackInputSchema: () => MenuItemUpsertWithoutFeedbackInputSchema,
  MenuItemUpsertWithoutLeftoverItemInputSchema: () => MenuItemUpsertWithoutLeftoverItemInputSchema,
  MenuItemUpsertWithoutMenuItemRecipeInputSchema: () => MenuItemUpsertWithoutMenuItemRecipeInputSchema,
  MenuItemUpsertWithoutNutritionalInfoInputSchema: () => MenuItemUpsertWithoutNutritionalInfoInputSchema,
  MenuItemUpsertWithoutNutritionalRecommendationInputSchema: () => MenuItemUpsertWithoutNutritionalRecommendationInputSchema,
  MenuItemUpsertWithoutSalesTransactionsInputSchema: () => MenuItemUpsertWithoutSalesTransactionsInputSchema,
  MenuItemWhereInputSchema: () => MenuItemWhereInputSchema,
  MenuItemWhereUniqueInputSchema: () => MenuItemWhereUniqueInputSchema,
  MenuListRelationFilterSchema: () => MenuListRelationFilterSchema,
  MenuMaxOrderByAggregateInputSchema: () => MenuMaxOrderByAggregateInputSchema,
  MenuMinOrderByAggregateInputSchema: () => MenuMinOrderByAggregateInputSchema,
  MenuOrderByRelationAggregateInputSchema: () => MenuOrderByRelationAggregateInputSchema,
  MenuOrderByWithAggregationInputSchema: () => MenuOrderByWithAggregationInputSchema,
  MenuOrderByWithRelationInputSchema: () => MenuOrderByWithRelationInputSchema,
  MenuRelationFilterSchema: () => MenuRelationFilterSchema,
  MenuScalarFieldEnumSchema: () => MenuScalarFieldEnumSchema,
  MenuScalarWhereInputSchema: () => MenuScalarWhereInputSchema,
  MenuScalarWhereWithAggregatesInputSchema: () => MenuScalarWhereWithAggregatesInputSchema,
  MenuSchema: () => MenuSchema,
  MenuSelectSchema: () => MenuSelectSchema,
  MenuSumOrderByAggregateInputSchema: () => MenuSumOrderByAggregateInputSchema,
  MenuUncheckedCreateInputSchema: () => MenuUncheckedCreateInputSchema,
  MenuUncheckedCreateNestedManyWithoutRestaurantInputSchema: () => MenuUncheckedCreateNestedManyWithoutRestaurantInputSchema,
  MenuUncheckedCreateWithoutMenuCategoryInputSchema: () => MenuUncheckedCreateWithoutMenuCategoryInputSchema,
  MenuUncheckedCreateWithoutMenuItemsInputSchema: () => MenuUncheckedCreateWithoutMenuItemsInputSchema,
  MenuUncheckedCreateWithoutRestaurantInputSchema: () => MenuUncheckedCreateWithoutRestaurantInputSchema,
  MenuUncheckedUpdateInputSchema: () => MenuUncheckedUpdateInputSchema,
  MenuUncheckedUpdateManyInputSchema: () => MenuUncheckedUpdateManyInputSchema,
  MenuUncheckedUpdateManyWithoutRestaurantInputSchema: () => MenuUncheckedUpdateManyWithoutRestaurantInputSchema,
  MenuUncheckedUpdateManyWithoutRestaurantNestedInputSchema: () => MenuUncheckedUpdateManyWithoutRestaurantNestedInputSchema,
  MenuUncheckedUpdateWithoutMenuCategoryInputSchema: () => MenuUncheckedUpdateWithoutMenuCategoryInputSchema,
  MenuUncheckedUpdateWithoutMenuItemsInputSchema: () => MenuUncheckedUpdateWithoutMenuItemsInputSchema,
  MenuUncheckedUpdateWithoutRestaurantInputSchema: () => MenuUncheckedUpdateWithoutRestaurantInputSchema,
  MenuUpdateArgsSchema: () => MenuUpdateArgsSchema,
  MenuUpdateInputSchema: () => MenuUpdateInputSchema,
  MenuUpdateManyArgsSchema: () => MenuUpdateManyArgsSchema,
  MenuUpdateManyMutationInputSchema: () => MenuUpdateManyMutationInputSchema,
  MenuUpdateManyWithWhereWithoutRestaurantInputSchema: () => MenuUpdateManyWithWhereWithoutRestaurantInputSchema,
  MenuUpdateManyWithoutRestaurantNestedInputSchema: () => MenuUpdateManyWithoutRestaurantNestedInputSchema,
  MenuUpdateOneRequiredWithoutMenuCategoryNestedInputSchema: () => MenuUpdateOneRequiredWithoutMenuCategoryNestedInputSchema,
  MenuUpdateOneRequiredWithoutMenuItemsNestedInputSchema: () => MenuUpdateOneRequiredWithoutMenuItemsNestedInputSchema,
  MenuUpdateToOneWithWhereWithoutMenuCategoryInputSchema: () => MenuUpdateToOneWithWhereWithoutMenuCategoryInputSchema,
  MenuUpdateToOneWithWhereWithoutMenuItemsInputSchema: () => MenuUpdateToOneWithWhereWithoutMenuItemsInputSchema,
  MenuUpdateWithWhereUniqueWithoutRestaurantInputSchema: () => MenuUpdateWithWhereUniqueWithoutRestaurantInputSchema,
  MenuUpdateWithoutMenuCategoryInputSchema: () => MenuUpdateWithoutMenuCategoryInputSchema,
  MenuUpdateWithoutMenuItemsInputSchema: () => MenuUpdateWithoutMenuItemsInputSchema,
  MenuUpdateWithoutRestaurantInputSchema: () => MenuUpdateWithoutRestaurantInputSchema,
  MenuUpsertArgsSchema: () => MenuUpsertArgsSchema,
  MenuUpsertWithWhereUniqueWithoutRestaurantInputSchema: () => MenuUpsertWithWhereUniqueWithoutRestaurantInputSchema,
  MenuUpsertWithoutMenuCategoryInputSchema: () => MenuUpsertWithoutMenuCategoryInputSchema,
  MenuUpsertWithoutMenuItemsInputSchema: () => MenuUpsertWithoutMenuItemsInputSchema,
  MenuWhereInputSchema: () => MenuWhereInputSchema,
  MenuWhereUniqueInputSchema: () => MenuWhereUniqueInputSchema,
  NestedBoolFilterSchema: () => NestedBoolFilterSchema,
  NestedBoolWithAggregatesFilterSchema: () => NestedBoolWithAggregatesFilterSchema,
  NestedDateTimeFilterSchema: () => NestedDateTimeFilterSchema,
  NestedDateTimeNullableFilterSchema: () => NestedDateTimeNullableFilterSchema,
  NestedDateTimeNullableWithAggregatesFilterSchema: () => NestedDateTimeNullableWithAggregatesFilterSchema,
  NestedDateTimeWithAggregatesFilterSchema: () => NestedDateTimeWithAggregatesFilterSchema,
  NestedEnumChecklistFrequencyFilterSchema: () => NestedEnumChecklistFrequencyFilterSchema,
  NestedEnumChecklistFrequencyWithAggregatesFilterSchema: () => NestedEnumChecklistFrequencyWithAggregatesFilterSchema,
  NestedEnumChecklistItemTypeFilterSchema: () => NestedEnumChecklistItemTypeFilterSchema,
  NestedEnumChecklistItemTypeWithAggregatesFilterSchema: () => NestedEnumChecklistItemTypeWithAggregatesFilterSchema,
  NestedEnumChecklistStatusFilterSchema: () => NestedEnumChecklistStatusFilterSchema,
  NestedEnumChecklistStatusWithAggregatesFilterSchema: () => NestedEnumChecklistStatusWithAggregatesFilterSchema,
  NestedEnumConstraintTypeFilterSchema: () => NestedEnumConstraintTypeFilterSchema,
  NestedEnumConstraintTypeWithAggregatesFilterSchema: () => NestedEnumConstraintTypeWithAggregatesFilterSchema,
  NestedEnumDayOfWeekFilterSchema: () => NestedEnumDayOfWeekFilterSchema,
  NestedEnumDayOfWeekWithAggregatesFilterSchema: () => NestedEnumDayOfWeekWithAggregatesFilterSchema,
  NestedEnumEquipmentStatusFilterSchema: () => NestedEnumEquipmentStatusFilterSchema,
  NestedEnumEquipmentStatusWithAggregatesFilterSchema: () => NestedEnumEquipmentStatusWithAggregatesFilterSchema,
  NestedEnumFeedbackSourceFilterSchema: () => NestedEnumFeedbackSourceFilterSchema,
  NestedEnumFeedbackSourceWithAggregatesFilterSchema: () => NestedEnumFeedbackSourceWithAggregatesFilterSchema,
  NestedEnumFeedbackStatusFilterSchema: () => NestedEnumFeedbackStatusFilterSchema,
  NestedEnumFeedbackStatusWithAggregatesFilterSchema: () => NestedEnumFeedbackStatusWithAggregatesFilterSchema,
  NestedEnumMaintenanceTypeFilterSchema: () => NestedEnumMaintenanceTypeFilterSchema,
  NestedEnumMaintenanceTypeWithAggregatesFilterSchema: () => NestedEnumMaintenanceTypeWithAggregatesFilterSchema,
  NestedEnumOrderStatusFilterSchema: () => NestedEnumOrderStatusFilterSchema,
  NestedEnumOrderStatusWithAggregatesFilterSchema: () => NestedEnumOrderStatusWithAggregatesFilterSchema,
  NestedEnumPrepStatusFilterSchema: () => NestedEnumPrepStatusFilterSchema,
  NestedEnumPrepStatusWithAggregatesFilterSchema: () => NestedEnumPrepStatusWithAggregatesFilterSchema,
  NestedEnumShiftStatusFilterSchema: () => NestedEnumShiftStatusFilterSchema,
  NestedEnumShiftStatusWithAggregatesFilterSchema: () => NestedEnumShiftStatusWithAggregatesFilterSchema,
  NestedEnumTaskTypeFilterSchema: () => NestedEnumTaskTypeFilterSchema,
  NestedEnumTaskTypeWithAggregatesFilterSchema: () => NestedEnumTaskTypeWithAggregatesFilterSchema,
  NestedEnumUserRoleFilterSchema: () => NestedEnumUserRoleFilterSchema,
  NestedEnumUserRoleWithAggregatesFilterSchema: () => NestedEnumUserRoleWithAggregatesFilterSchema,
  NestedFloatFilterSchema: () => NestedFloatFilterSchema,
  NestedFloatNullableFilterSchema: () => NestedFloatNullableFilterSchema,
  NestedFloatNullableWithAggregatesFilterSchema: () => NestedFloatNullableWithAggregatesFilterSchema,
  NestedFloatWithAggregatesFilterSchema: () => NestedFloatWithAggregatesFilterSchema,
  NestedIntFilterSchema: () => NestedIntFilterSchema,
  NestedIntNullableFilterSchema: () => NestedIntNullableFilterSchema,
  NestedIntNullableWithAggregatesFilterSchema: () => NestedIntNullableWithAggregatesFilterSchema,
  NestedIntWithAggregatesFilterSchema: () => NestedIntWithAggregatesFilterSchema,
  NestedStringFilterSchema: () => NestedStringFilterSchema,
  NestedStringNullableFilterSchema: () => NestedStringNullableFilterSchema,
  NestedStringNullableWithAggregatesFilterSchema: () => NestedStringNullableWithAggregatesFilterSchema,
  NestedStringWithAggregatesFilterSchema: () => NestedStringWithAggregatesFilterSchema,
  NullableDateTimeFieldUpdateOperationsInputSchema: () => NullableDateTimeFieldUpdateOperationsInputSchema,
  NullableFloatFieldUpdateOperationsInputSchema: () => NullableFloatFieldUpdateOperationsInputSchema,
  NullableIntFieldUpdateOperationsInputSchema: () => NullableIntFieldUpdateOperationsInputSchema,
  NullableStringFieldUpdateOperationsInputSchema: () => NullableStringFieldUpdateOperationsInputSchema,
  NullsOrderSchema: () => NullsOrderSchema,
  NutritionalInfoAggregateArgsSchema: () => NutritionalInfoAggregateArgsSchema,
  NutritionalInfoArgsSchema: () => NutritionalInfoArgsSchema,
  NutritionalInfoAvgOrderByAggregateInputSchema: () => NutritionalInfoAvgOrderByAggregateInputSchema,
  NutritionalInfoCountOrderByAggregateInputSchema: () => NutritionalInfoCountOrderByAggregateInputSchema,
  NutritionalInfoCreateArgsSchema: () => NutritionalInfoCreateArgsSchema,
  NutritionalInfoCreateInputSchema: () => NutritionalInfoCreateInputSchema,
  NutritionalInfoCreateManyAndReturnArgsSchema: () => NutritionalInfoCreateManyAndReturnArgsSchema,
  NutritionalInfoCreateManyArgsSchema: () => NutritionalInfoCreateManyArgsSchema,
  NutritionalInfoCreateManyInputSchema: () => NutritionalInfoCreateManyInputSchema,
  NutritionalInfoCreateNestedOneWithoutMenuItemInputSchema: () => NutritionalInfoCreateNestedOneWithoutMenuItemInputSchema,
  NutritionalInfoCreateOrConnectWithoutMenuItemInputSchema: () => NutritionalInfoCreateOrConnectWithoutMenuItemInputSchema,
  NutritionalInfoCreateWithoutMenuItemInputSchema: () => NutritionalInfoCreateWithoutMenuItemInputSchema,
  NutritionalInfoDeleteArgsSchema: () => NutritionalInfoDeleteArgsSchema,
  NutritionalInfoDeleteManyArgsSchema: () => NutritionalInfoDeleteManyArgsSchema,
  NutritionalInfoFindFirstArgsSchema: () => NutritionalInfoFindFirstArgsSchema,
  NutritionalInfoFindFirstOrThrowArgsSchema: () => NutritionalInfoFindFirstOrThrowArgsSchema,
  NutritionalInfoFindManyArgsSchema: () => NutritionalInfoFindManyArgsSchema,
  NutritionalInfoFindUniqueArgsSchema: () => NutritionalInfoFindUniqueArgsSchema,
  NutritionalInfoFindUniqueOrThrowArgsSchema: () => NutritionalInfoFindUniqueOrThrowArgsSchema,
  NutritionalInfoGroupByArgsSchema: () => NutritionalInfoGroupByArgsSchema,
  NutritionalInfoIncludeSchema: () => NutritionalInfoIncludeSchema,
  NutritionalInfoMaxOrderByAggregateInputSchema: () => NutritionalInfoMaxOrderByAggregateInputSchema,
  NutritionalInfoMinOrderByAggregateInputSchema: () => NutritionalInfoMinOrderByAggregateInputSchema,
  NutritionalInfoNullableRelationFilterSchema: () => NutritionalInfoNullableRelationFilterSchema,
  NutritionalInfoOrderByWithAggregationInputSchema: () => NutritionalInfoOrderByWithAggregationInputSchema,
  NutritionalInfoOrderByWithRelationInputSchema: () => NutritionalInfoOrderByWithRelationInputSchema,
  NutritionalInfoScalarFieldEnumSchema: () => NutritionalInfoScalarFieldEnumSchema,
  NutritionalInfoScalarWhereWithAggregatesInputSchema: () => NutritionalInfoScalarWhereWithAggregatesInputSchema,
  NutritionalInfoSchema: () => NutritionalInfoSchema,
  NutritionalInfoSelectSchema: () => NutritionalInfoSelectSchema,
  NutritionalInfoSumOrderByAggregateInputSchema: () => NutritionalInfoSumOrderByAggregateInputSchema,
  NutritionalInfoUncheckedCreateInputSchema: () => NutritionalInfoUncheckedCreateInputSchema,
  NutritionalInfoUncheckedCreateNestedOneWithoutMenuItemInputSchema: () => NutritionalInfoUncheckedCreateNestedOneWithoutMenuItemInputSchema,
  NutritionalInfoUncheckedCreateWithoutMenuItemInputSchema: () => NutritionalInfoUncheckedCreateWithoutMenuItemInputSchema,
  NutritionalInfoUncheckedUpdateInputSchema: () => NutritionalInfoUncheckedUpdateInputSchema,
  NutritionalInfoUncheckedUpdateManyInputSchema: () => NutritionalInfoUncheckedUpdateManyInputSchema,
  NutritionalInfoUncheckedUpdateOneWithoutMenuItemNestedInputSchema: () => NutritionalInfoUncheckedUpdateOneWithoutMenuItemNestedInputSchema,
  NutritionalInfoUncheckedUpdateWithoutMenuItemInputSchema: () => NutritionalInfoUncheckedUpdateWithoutMenuItemInputSchema,
  NutritionalInfoUpdateArgsSchema: () => NutritionalInfoUpdateArgsSchema,
  NutritionalInfoUpdateInputSchema: () => NutritionalInfoUpdateInputSchema,
  NutritionalInfoUpdateManyArgsSchema: () => NutritionalInfoUpdateManyArgsSchema,
  NutritionalInfoUpdateManyMutationInputSchema: () => NutritionalInfoUpdateManyMutationInputSchema,
  NutritionalInfoUpdateOneWithoutMenuItemNestedInputSchema: () => NutritionalInfoUpdateOneWithoutMenuItemNestedInputSchema,
  NutritionalInfoUpdateToOneWithWhereWithoutMenuItemInputSchema: () => NutritionalInfoUpdateToOneWithWhereWithoutMenuItemInputSchema,
  NutritionalInfoUpdateWithoutMenuItemInputSchema: () => NutritionalInfoUpdateWithoutMenuItemInputSchema,
  NutritionalInfoUpsertArgsSchema: () => NutritionalInfoUpsertArgsSchema,
  NutritionalInfoUpsertWithoutMenuItemInputSchema: () => NutritionalInfoUpsertWithoutMenuItemInputSchema,
  NutritionalInfoWhereInputSchema: () => NutritionalInfoWhereInputSchema,
  NutritionalInfoWhereUniqueInputSchema: () => NutritionalInfoWhereUniqueInputSchema,
  NutritionalRecommendationAggregateArgsSchema: () => NutritionalRecommendationAggregateArgsSchema,
  NutritionalRecommendationArgsSchema: () => NutritionalRecommendationArgsSchema,
  NutritionalRecommendationAvgOrderByAggregateInputSchema: () => NutritionalRecommendationAvgOrderByAggregateInputSchema,
  NutritionalRecommendationCountOrderByAggregateInputSchema: () => NutritionalRecommendationCountOrderByAggregateInputSchema,
  NutritionalRecommendationCreateArgsSchema: () => NutritionalRecommendationCreateArgsSchema,
  NutritionalRecommendationCreateInputSchema: () => NutritionalRecommendationCreateInputSchema,
  NutritionalRecommendationCreateManyAndReturnArgsSchema: () => NutritionalRecommendationCreateManyAndReturnArgsSchema,
  NutritionalRecommendationCreateManyArgsSchema: () => NutritionalRecommendationCreateManyArgsSchema,
  NutritionalRecommendationCreateManyInputSchema: () => NutritionalRecommendationCreateManyInputSchema,
  NutritionalRecommendationCreateManyMenuItemInputEnvelopeSchema: () => NutritionalRecommendationCreateManyMenuItemInputEnvelopeSchema,
  NutritionalRecommendationCreateManyMenuItemInputSchema: () => NutritionalRecommendationCreateManyMenuItemInputSchema,
  NutritionalRecommendationCreateNestedManyWithoutMenuItemInputSchema: () => NutritionalRecommendationCreateNestedManyWithoutMenuItemInputSchema,
  NutritionalRecommendationCreateOrConnectWithoutMenuItemInputSchema: () => NutritionalRecommendationCreateOrConnectWithoutMenuItemInputSchema,
  NutritionalRecommendationCreateWithoutMenuItemInputSchema: () => NutritionalRecommendationCreateWithoutMenuItemInputSchema,
  NutritionalRecommendationDeleteArgsSchema: () => NutritionalRecommendationDeleteArgsSchema,
  NutritionalRecommendationDeleteManyArgsSchema: () => NutritionalRecommendationDeleteManyArgsSchema,
  NutritionalRecommendationFindFirstArgsSchema: () => NutritionalRecommendationFindFirstArgsSchema,
  NutritionalRecommendationFindFirstOrThrowArgsSchema: () => NutritionalRecommendationFindFirstOrThrowArgsSchema,
  NutritionalRecommendationFindManyArgsSchema: () => NutritionalRecommendationFindManyArgsSchema,
  NutritionalRecommendationFindUniqueArgsSchema: () => NutritionalRecommendationFindUniqueArgsSchema,
  NutritionalRecommendationFindUniqueOrThrowArgsSchema: () => NutritionalRecommendationFindUniqueOrThrowArgsSchema,
  NutritionalRecommendationGroupByArgsSchema: () => NutritionalRecommendationGroupByArgsSchema,
  NutritionalRecommendationIncludeSchema: () => NutritionalRecommendationIncludeSchema,
  NutritionalRecommendationListRelationFilterSchema: () => NutritionalRecommendationListRelationFilterSchema,
  NutritionalRecommendationMaxOrderByAggregateInputSchema: () => NutritionalRecommendationMaxOrderByAggregateInputSchema,
  NutritionalRecommendationMinOrderByAggregateInputSchema: () => NutritionalRecommendationMinOrderByAggregateInputSchema,
  NutritionalRecommendationOrderByRelationAggregateInputSchema: () => NutritionalRecommendationOrderByRelationAggregateInputSchema,
  NutritionalRecommendationOrderByWithAggregationInputSchema: () => NutritionalRecommendationOrderByWithAggregationInputSchema,
  NutritionalRecommendationOrderByWithRelationInputSchema: () => NutritionalRecommendationOrderByWithRelationInputSchema,
  NutritionalRecommendationScalarFieldEnumSchema: () => NutritionalRecommendationScalarFieldEnumSchema,
  NutritionalRecommendationScalarWhereInputSchema: () => NutritionalRecommendationScalarWhereInputSchema,
  NutritionalRecommendationScalarWhereWithAggregatesInputSchema: () => NutritionalRecommendationScalarWhereWithAggregatesInputSchema,
  NutritionalRecommendationSchema: () => NutritionalRecommendationSchema,
  NutritionalRecommendationSelectSchema: () => NutritionalRecommendationSelectSchema,
  NutritionalRecommendationSumOrderByAggregateInputSchema: () => NutritionalRecommendationSumOrderByAggregateInputSchema,
  NutritionalRecommendationUncheckedCreateInputSchema: () => NutritionalRecommendationUncheckedCreateInputSchema,
  NutritionalRecommendationUncheckedCreateNestedManyWithoutMenuItemInputSchema: () => NutritionalRecommendationUncheckedCreateNestedManyWithoutMenuItemInputSchema,
  NutritionalRecommendationUncheckedCreateWithoutMenuItemInputSchema: () => NutritionalRecommendationUncheckedCreateWithoutMenuItemInputSchema,
  NutritionalRecommendationUncheckedUpdateInputSchema: () => NutritionalRecommendationUncheckedUpdateInputSchema,
  NutritionalRecommendationUncheckedUpdateManyInputSchema: () => NutritionalRecommendationUncheckedUpdateManyInputSchema,
  NutritionalRecommendationUncheckedUpdateManyWithoutMenuItemInputSchema: () => NutritionalRecommendationUncheckedUpdateManyWithoutMenuItemInputSchema,
  NutritionalRecommendationUncheckedUpdateManyWithoutMenuItemNestedInputSchema: () => NutritionalRecommendationUncheckedUpdateManyWithoutMenuItemNestedInputSchema,
  NutritionalRecommendationUncheckedUpdateWithoutMenuItemInputSchema: () => NutritionalRecommendationUncheckedUpdateWithoutMenuItemInputSchema,
  NutritionalRecommendationUpdateArgsSchema: () => NutritionalRecommendationUpdateArgsSchema,
  NutritionalRecommendationUpdateInputSchema: () => NutritionalRecommendationUpdateInputSchema,
  NutritionalRecommendationUpdateManyArgsSchema: () => NutritionalRecommendationUpdateManyArgsSchema,
  NutritionalRecommendationUpdateManyMutationInputSchema: () => NutritionalRecommendationUpdateManyMutationInputSchema,
  NutritionalRecommendationUpdateManyWithWhereWithoutMenuItemInputSchema: () => NutritionalRecommendationUpdateManyWithWhereWithoutMenuItemInputSchema,
  NutritionalRecommendationUpdateManyWithoutMenuItemNestedInputSchema: () => NutritionalRecommendationUpdateManyWithoutMenuItemNestedInputSchema,
  NutritionalRecommendationUpdateWithWhereUniqueWithoutMenuItemInputSchema: () => NutritionalRecommendationUpdateWithWhereUniqueWithoutMenuItemInputSchema,
  NutritionalRecommendationUpdateWithoutMenuItemInputSchema: () => NutritionalRecommendationUpdateWithoutMenuItemInputSchema,
  NutritionalRecommendationUpsertArgsSchema: () => NutritionalRecommendationUpsertArgsSchema,
  NutritionalRecommendationUpsertWithWhereUniqueWithoutMenuItemInputSchema: () => NutritionalRecommendationUpsertWithWhereUniqueWithoutMenuItemInputSchema,
  NutritionalRecommendationWhereInputSchema: () => NutritionalRecommendationWhereInputSchema,
  NutritionalRecommendationWhereUniqueInputSchema: () => NutritionalRecommendationWhereUniqueInputSchema,
  OrderAggregateArgsSchema: () => OrderAggregateArgsSchema,
  OrderArgsSchema: () => OrderArgsSchema,
  OrderAvgOrderByAggregateInputSchema: () => OrderAvgOrderByAggregateInputSchema,
  OrderCountOrderByAggregateInputSchema: () => OrderCountOrderByAggregateInputSchema,
  OrderCountOutputTypeArgsSchema: () => OrderCountOutputTypeArgsSchema,
  OrderCountOutputTypeSelectSchema: () => OrderCountOutputTypeSelectSchema,
  OrderCreateArgsSchema: () => OrderCreateArgsSchema,
  OrderCreateInputSchema: () => OrderCreateInputSchema,
  OrderCreateManyAndReturnArgsSchema: () => OrderCreateManyAndReturnArgsSchema,
  OrderCreateManyArgsSchema: () => OrderCreateManyArgsSchema,
  OrderCreateManyInputSchema: () => OrderCreateManyInputSchema,
  OrderCreateManyRestaurantInputEnvelopeSchema: () => OrderCreateManyRestaurantInputEnvelopeSchema,
  OrderCreateManyRestaurantInputSchema: () => OrderCreateManyRestaurantInputSchema,
  OrderCreateManyVendorInputEnvelopeSchema: () => OrderCreateManyVendorInputEnvelopeSchema,
  OrderCreateManyVendorInputSchema: () => OrderCreateManyVendorInputSchema,
  OrderCreateNestedManyWithoutRestaurantInputSchema: () => OrderCreateNestedManyWithoutRestaurantInputSchema,
  OrderCreateNestedManyWithoutVendorInputSchema: () => OrderCreateNestedManyWithoutVendorInputSchema,
  OrderCreateNestedOneWithoutItemsInputSchema: () => OrderCreateNestedOneWithoutItemsInputSchema,
  OrderCreateOrConnectWithoutItemsInputSchema: () => OrderCreateOrConnectWithoutItemsInputSchema,
  OrderCreateOrConnectWithoutRestaurantInputSchema: () => OrderCreateOrConnectWithoutRestaurantInputSchema,
  OrderCreateOrConnectWithoutVendorInputSchema: () => OrderCreateOrConnectWithoutVendorInputSchema,
  OrderCreateWithoutItemsInputSchema: () => OrderCreateWithoutItemsInputSchema,
  OrderCreateWithoutRestaurantInputSchema: () => OrderCreateWithoutRestaurantInputSchema,
  OrderCreateWithoutVendorInputSchema: () => OrderCreateWithoutVendorInputSchema,
  OrderDeleteArgsSchema: () => OrderDeleteArgsSchema,
  OrderDeleteManyArgsSchema: () => OrderDeleteManyArgsSchema,
  OrderFindFirstArgsSchema: () => OrderFindFirstArgsSchema,
  OrderFindFirstOrThrowArgsSchema: () => OrderFindFirstOrThrowArgsSchema,
  OrderFindManyArgsSchema: () => OrderFindManyArgsSchema,
  OrderFindUniqueArgsSchema: () => OrderFindUniqueArgsSchema,
  OrderFindUniqueOrThrowArgsSchema: () => OrderFindUniqueOrThrowArgsSchema,
  OrderGroupByArgsSchema: () => OrderGroupByArgsSchema,
  OrderIncludeSchema: () => OrderIncludeSchema,
  OrderItemAggregateArgsSchema: () => OrderItemAggregateArgsSchema,
  OrderItemArgsSchema: () => OrderItemArgsSchema,
  OrderItemAvgOrderByAggregateInputSchema: () => OrderItemAvgOrderByAggregateInputSchema,
  OrderItemCountOrderByAggregateInputSchema: () => OrderItemCountOrderByAggregateInputSchema,
  OrderItemCreateArgsSchema: () => OrderItemCreateArgsSchema,
  OrderItemCreateInputSchema: () => OrderItemCreateInputSchema,
  OrderItemCreateManyAndReturnArgsSchema: () => OrderItemCreateManyAndReturnArgsSchema,
  OrderItemCreateManyArgsSchema: () => OrderItemCreateManyArgsSchema,
  OrderItemCreateManyIngredientInputEnvelopeSchema: () => OrderItemCreateManyIngredientInputEnvelopeSchema,
  OrderItemCreateManyIngredientInputSchema: () => OrderItemCreateManyIngredientInputSchema,
  OrderItemCreateManyInputSchema: () => OrderItemCreateManyInputSchema,
  OrderItemCreateManyOrderInputEnvelopeSchema: () => OrderItemCreateManyOrderInputEnvelopeSchema,
  OrderItemCreateManyOrderInputSchema: () => OrderItemCreateManyOrderInputSchema,
  OrderItemCreateNestedManyWithoutIngredientInputSchema: () => OrderItemCreateNestedManyWithoutIngredientInputSchema,
  OrderItemCreateNestedManyWithoutOrderInputSchema: () => OrderItemCreateNestedManyWithoutOrderInputSchema,
  OrderItemCreateOrConnectWithoutIngredientInputSchema: () => OrderItemCreateOrConnectWithoutIngredientInputSchema,
  OrderItemCreateOrConnectWithoutOrderInputSchema: () => OrderItemCreateOrConnectWithoutOrderInputSchema,
  OrderItemCreateWithoutIngredientInputSchema: () => OrderItemCreateWithoutIngredientInputSchema,
  OrderItemCreateWithoutOrderInputSchema: () => OrderItemCreateWithoutOrderInputSchema,
  OrderItemDeleteArgsSchema: () => OrderItemDeleteArgsSchema,
  OrderItemDeleteManyArgsSchema: () => OrderItemDeleteManyArgsSchema,
  OrderItemFindFirstArgsSchema: () => OrderItemFindFirstArgsSchema,
  OrderItemFindFirstOrThrowArgsSchema: () => OrderItemFindFirstOrThrowArgsSchema,
  OrderItemFindManyArgsSchema: () => OrderItemFindManyArgsSchema,
  OrderItemFindUniqueArgsSchema: () => OrderItemFindUniqueArgsSchema,
  OrderItemFindUniqueOrThrowArgsSchema: () => OrderItemFindUniqueOrThrowArgsSchema,
  OrderItemGroupByArgsSchema: () => OrderItemGroupByArgsSchema,
  OrderItemIncludeSchema: () => OrderItemIncludeSchema,
  OrderItemListRelationFilterSchema: () => OrderItemListRelationFilterSchema,
  OrderItemMaxOrderByAggregateInputSchema: () => OrderItemMaxOrderByAggregateInputSchema,
  OrderItemMinOrderByAggregateInputSchema: () => OrderItemMinOrderByAggregateInputSchema,
  OrderItemOrderByRelationAggregateInputSchema: () => OrderItemOrderByRelationAggregateInputSchema,
  OrderItemOrderByWithAggregationInputSchema: () => OrderItemOrderByWithAggregationInputSchema,
  OrderItemOrderByWithRelationInputSchema: () => OrderItemOrderByWithRelationInputSchema,
  OrderItemScalarFieldEnumSchema: () => OrderItemScalarFieldEnumSchema,
  OrderItemScalarWhereInputSchema: () => OrderItemScalarWhereInputSchema,
  OrderItemScalarWhereWithAggregatesInputSchema: () => OrderItemScalarWhereWithAggregatesInputSchema,
  OrderItemSchema: () => OrderItemSchema,
  OrderItemSelectSchema: () => OrderItemSelectSchema,
  OrderItemSumOrderByAggregateInputSchema: () => OrderItemSumOrderByAggregateInputSchema,
  OrderItemUncheckedCreateInputSchema: () => OrderItemUncheckedCreateInputSchema,
  OrderItemUncheckedCreateNestedManyWithoutIngredientInputSchema: () => OrderItemUncheckedCreateNestedManyWithoutIngredientInputSchema,
  OrderItemUncheckedCreateNestedManyWithoutOrderInputSchema: () => OrderItemUncheckedCreateNestedManyWithoutOrderInputSchema,
  OrderItemUncheckedCreateWithoutIngredientInputSchema: () => OrderItemUncheckedCreateWithoutIngredientInputSchema,
  OrderItemUncheckedCreateWithoutOrderInputSchema: () => OrderItemUncheckedCreateWithoutOrderInputSchema,
  OrderItemUncheckedUpdateInputSchema: () => OrderItemUncheckedUpdateInputSchema,
  OrderItemUncheckedUpdateManyInputSchema: () => OrderItemUncheckedUpdateManyInputSchema,
  OrderItemUncheckedUpdateManyWithoutIngredientInputSchema: () => OrderItemUncheckedUpdateManyWithoutIngredientInputSchema,
  OrderItemUncheckedUpdateManyWithoutIngredientNestedInputSchema: () => OrderItemUncheckedUpdateManyWithoutIngredientNestedInputSchema,
  OrderItemUncheckedUpdateManyWithoutOrderInputSchema: () => OrderItemUncheckedUpdateManyWithoutOrderInputSchema,
  OrderItemUncheckedUpdateManyWithoutOrderNestedInputSchema: () => OrderItemUncheckedUpdateManyWithoutOrderNestedInputSchema,
  OrderItemUncheckedUpdateWithoutIngredientInputSchema: () => OrderItemUncheckedUpdateWithoutIngredientInputSchema,
  OrderItemUncheckedUpdateWithoutOrderInputSchema: () => OrderItemUncheckedUpdateWithoutOrderInputSchema,
  OrderItemUpdateArgsSchema: () => OrderItemUpdateArgsSchema,
  OrderItemUpdateInputSchema: () => OrderItemUpdateInputSchema,
  OrderItemUpdateManyArgsSchema: () => OrderItemUpdateManyArgsSchema,
  OrderItemUpdateManyMutationInputSchema: () => OrderItemUpdateManyMutationInputSchema,
  OrderItemUpdateManyWithWhereWithoutIngredientInputSchema: () => OrderItemUpdateManyWithWhereWithoutIngredientInputSchema,
  OrderItemUpdateManyWithWhereWithoutOrderInputSchema: () => OrderItemUpdateManyWithWhereWithoutOrderInputSchema,
  OrderItemUpdateManyWithoutIngredientNestedInputSchema: () => OrderItemUpdateManyWithoutIngredientNestedInputSchema,
  OrderItemUpdateManyWithoutOrderNestedInputSchema: () => OrderItemUpdateManyWithoutOrderNestedInputSchema,
  OrderItemUpdateWithWhereUniqueWithoutIngredientInputSchema: () => OrderItemUpdateWithWhereUniqueWithoutIngredientInputSchema,
  OrderItemUpdateWithWhereUniqueWithoutOrderInputSchema: () => OrderItemUpdateWithWhereUniqueWithoutOrderInputSchema,
  OrderItemUpdateWithoutIngredientInputSchema: () => OrderItemUpdateWithoutIngredientInputSchema,
  OrderItemUpdateWithoutOrderInputSchema: () => OrderItemUpdateWithoutOrderInputSchema,
  OrderItemUpsertArgsSchema: () => OrderItemUpsertArgsSchema,
  OrderItemUpsertWithWhereUniqueWithoutIngredientInputSchema: () => OrderItemUpsertWithWhereUniqueWithoutIngredientInputSchema,
  OrderItemUpsertWithWhereUniqueWithoutOrderInputSchema: () => OrderItemUpsertWithWhereUniqueWithoutOrderInputSchema,
  OrderItemWhereInputSchema: () => OrderItemWhereInputSchema,
  OrderItemWhereUniqueInputSchema: () => OrderItemWhereUniqueInputSchema,
  OrderListRelationFilterSchema: () => OrderListRelationFilterSchema,
  OrderMaxOrderByAggregateInputSchema: () => OrderMaxOrderByAggregateInputSchema,
  OrderMinOrderByAggregateInputSchema: () => OrderMinOrderByAggregateInputSchema,
  OrderOrderByRelationAggregateInputSchema: () => OrderOrderByRelationAggregateInputSchema,
  OrderOrderByWithAggregationInputSchema: () => OrderOrderByWithAggregationInputSchema,
  OrderOrderByWithRelationInputSchema: () => OrderOrderByWithRelationInputSchema,
  OrderRelationFilterSchema: () => OrderRelationFilterSchema,
  OrderScalarFieldEnumSchema: () => OrderScalarFieldEnumSchema,
  OrderScalarWhereInputSchema: () => OrderScalarWhereInputSchema,
  OrderScalarWhereWithAggregatesInputSchema: () => OrderScalarWhereWithAggregatesInputSchema,
  OrderSchema: () => OrderSchema,
  OrderSelectSchema: () => OrderSelectSchema,
  OrderStatusSchema: () => OrderStatusSchema,
  OrderSumOrderByAggregateInputSchema: () => OrderSumOrderByAggregateInputSchema,
  OrderUncheckedCreateInputSchema: () => OrderUncheckedCreateInputSchema,
  OrderUncheckedCreateNestedManyWithoutRestaurantInputSchema: () => OrderUncheckedCreateNestedManyWithoutRestaurantInputSchema,
  OrderUncheckedCreateNestedManyWithoutVendorInputSchema: () => OrderUncheckedCreateNestedManyWithoutVendorInputSchema,
  OrderUncheckedCreateWithoutItemsInputSchema: () => OrderUncheckedCreateWithoutItemsInputSchema,
  OrderUncheckedCreateWithoutRestaurantInputSchema: () => OrderUncheckedCreateWithoutRestaurantInputSchema,
  OrderUncheckedCreateWithoutVendorInputSchema: () => OrderUncheckedCreateWithoutVendorInputSchema,
  OrderUncheckedUpdateInputSchema: () => OrderUncheckedUpdateInputSchema,
  OrderUncheckedUpdateManyInputSchema: () => OrderUncheckedUpdateManyInputSchema,
  OrderUncheckedUpdateManyWithoutRestaurantInputSchema: () => OrderUncheckedUpdateManyWithoutRestaurantInputSchema,
  OrderUncheckedUpdateManyWithoutRestaurantNestedInputSchema: () => OrderUncheckedUpdateManyWithoutRestaurantNestedInputSchema,
  OrderUncheckedUpdateManyWithoutVendorInputSchema: () => OrderUncheckedUpdateManyWithoutVendorInputSchema,
  OrderUncheckedUpdateManyWithoutVendorNestedInputSchema: () => OrderUncheckedUpdateManyWithoutVendorNestedInputSchema,
  OrderUncheckedUpdateWithoutItemsInputSchema: () => OrderUncheckedUpdateWithoutItemsInputSchema,
  OrderUncheckedUpdateWithoutRestaurantInputSchema: () => OrderUncheckedUpdateWithoutRestaurantInputSchema,
  OrderUncheckedUpdateWithoutVendorInputSchema: () => OrderUncheckedUpdateWithoutVendorInputSchema,
  OrderUpdateArgsSchema: () => OrderUpdateArgsSchema,
  OrderUpdateInputSchema: () => OrderUpdateInputSchema,
  OrderUpdateManyArgsSchema: () => OrderUpdateManyArgsSchema,
  OrderUpdateManyMutationInputSchema: () => OrderUpdateManyMutationInputSchema,
  OrderUpdateManyWithWhereWithoutRestaurantInputSchema: () => OrderUpdateManyWithWhereWithoutRestaurantInputSchema,
  OrderUpdateManyWithWhereWithoutVendorInputSchema: () => OrderUpdateManyWithWhereWithoutVendorInputSchema,
  OrderUpdateManyWithoutRestaurantNestedInputSchema: () => OrderUpdateManyWithoutRestaurantNestedInputSchema,
  OrderUpdateManyWithoutVendorNestedInputSchema: () => OrderUpdateManyWithoutVendorNestedInputSchema,
  OrderUpdateOneRequiredWithoutItemsNestedInputSchema: () => OrderUpdateOneRequiredWithoutItemsNestedInputSchema,
  OrderUpdateToOneWithWhereWithoutItemsInputSchema: () => OrderUpdateToOneWithWhereWithoutItemsInputSchema,
  OrderUpdateWithWhereUniqueWithoutRestaurantInputSchema: () => OrderUpdateWithWhereUniqueWithoutRestaurantInputSchema,
  OrderUpdateWithWhereUniqueWithoutVendorInputSchema: () => OrderUpdateWithWhereUniqueWithoutVendorInputSchema,
  OrderUpdateWithoutItemsInputSchema: () => OrderUpdateWithoutItemsInputSchema,
  OrderUpdateWithoutRestaurantInputSchema: () => OrderUpdateWithoutRestaurantInputSchema,
  OrderUpdateWithoutVendorInputSchema: () => OrderUpdateWithoutVendorInputSchema,
  OrderUpsertArgsSchema: () => OrderUpsertArgsSchema,
  OrderUpsertWithWhereUniqueWithoutRestaurantInputSchema: () => OrderUpsertWithWhereUniqueWithoutRestaurantInputSchema,
  OrderUpsertWithWhereUniqueWithoutVendorInputSchema: () => OrderUpsertWithWhereUniqueWithoutVendorInputSchema,
  OrderUpsertWithoutItemsInputSchema: () => OrderUpsertWithoutItemsInputSchema,
  OrderWhereInputSchema: () => OrderWhereInputSchema,
  OrderWhereUniqueInputSchema: () => OrderWhereUniqueInputSchema,
  OrganizationAggregateArgsSchema: () => OrganizationAggregateArgsSchema,
  OrganizationArgsSchema: () => OrganizationArgsSchema,
  OrganizationAvgOrderByAggregateInputSchema: () => OrganizationAvgOrderByAggregateInputSchema,
  OrganizationCountOrderByAggregateInputSchema: () => OrganizationCountOrderByAggregateInputSchema,
  OrganizationCountOutputTypeArgsSchema: () => OrganizationCountOutputTypeArgsSchema,
  OrganizationCountOutputTypeSelectSchema: () => OrganizationCountOutputTypeSelectSchema,
  OrganizationCreateArgsSchema: () => OrganizationCreateArgsSchema,
  OrganizationCreateInputSchema: () => OrganizationCreateInputSchema,
  OrganizationCreateManyAndReturnArgsSchema: () => OrganizationCreateManyAndReturnArgsSchema,
  OrganizationCreateManyArgsSchema: () => OrganizationCreateManyArgsSchema,
  OrganizationCreateManyInputSchema: () => OrganizationCreateManyInputSchema,
  OrganizationCreateNestedOneWithoutRestaurantsInputSchema: () => OrganizationCreateNestedOneWithoutRestaurantsInputSchema,
  OrganizationCreateNestedOneWithoutUsersInputSchema: () => OrganizationCreateNestedOneWithoutUsersInputSchema,
  OrganizationCreateOrConnectWithoutRestaurantsInputSchema: () => OrganizationCreateOrConnectWithoutRestaurantsInputSchema,
  OrganizationCreateOrConnectWithoutUsersInputSchema: () => OrganizationCreateOrConnectWithoutUsersInputSchema,
  OrganizationCreateWithoutRestaurantsInputSchema: () => OrganizationCreateWithoutRestaurantsInputSchema,
  OrganizationCreateWithoutUsersInputSchema: () => OrganizationCreateWithoutUsersInputSchema,
  OrganizationDeleteArgsSchema: () => OrganizationDeleteArgsSchema,
  OrganizationDeleteManyArgsSchema: () => OrganizationDeleteManyArgsSchema,
  OrganizationFindFirstArgsSchema: () => OrganizationFindFirstArgsSchema,
  OrganizationFindFirstOrThrowArgsSchema: () => OrganizationFindFirstOrThrowArgsSchema,
  OrganizationFindManyArgsSchema: () => OrganizationFindManyArgsSchema,
  OrganizationFindUniqueArgsSchema: () => OrganizationFindUniqueArgsSchema,
  OrganizationFindUniqueOrThrowArgsSchema: () => OrganizationFindUniqueOrThrowArgsSchema,
  OrganizationGroupByArgsSchema: () => OrganizationGroupByArgsSchema,
  OrganizationIncludeSchema: () => OrganizationIncludeSchema,
  OrganizationMaxOrderByAggregateInputSchema: () => OrganizationMaxOrderByAggregateInputSchema,
  OrganizationMinOrderByAggregateInputSchema: () => OrganizationMinOrderByAggregateInputSchema,
  OrganizationNullableRelationFilterSchema: () => OrganizationNullableRelationFilterSchema,
  OrganizationOrderByWithAggregationInputSchema: () => OrganizationOrderByWithAggregationInputSchema,
  OrganizationOrderByWithRelationInputSchema: () => OrganizationOrderByWithRelationInputSchema,
  OrganizationScalarFieldEnumSchema: () => OrganizationScalarFieldEnumSchema,
  OrganizationScalarWhereWithAggregatesInputSchema: () => OrganizationScalarWhereWithAggregatesInputSchema,
  OrganizationSchema: () => OrganizationSchema,
  OrganizationSelectSchema: () => OrganizationSelectSchema,
  OrganizationSumOrderByAggregateInputSchema: () => OrganizationSumOrderByAggregateInputSchema,
  OrganizationUncheckedCreateInputSchema: () => OrganizationUncheckedCreateInputSchema,
  OrganizationUncheckedCreateWithoutRestaurantsInputSchema: () => OrganizationUncheckedCreateWithoutRestaurantsInputSchema,
  OrganizationUncheckedCreateWithoutUsersInputSchema: () => OrganizationUncheckedCreateWithoutUsersInputSchema,
  OrganizationUncheckedUpdateInputSchema: () => OrganizationUncheckedUpdateInputSchema,
  OrganizationUncheckedUpdateManyInputSchema: () => OrganizationUncheckedUpdateManyInputSchema,
  OrganizationUncheckedUpdateWithoutRestaurantsInputSchema: () => OrganizationUncheckedUpdateWithoutRestaurantsInputSchema,
  OrganizationUncheckedUpdateWithoutUsersInputSchema: () => OrganizationUncheckedUpdateWithoutUsersInputSchema,
  OrganizationUpdateArgsSchema: () => OrganizationUpdateArgsSchema,
  OrganizationUpdateInputSchema: () => OrganizationUpdateInputSchema,
  OrganizationUpdateManyArgsSchema: () => OrganizationUpdateManyArgsSchema,
  OrganizationUpdateManyMutationInputSchema: () => OrganizationUpdateManyMutationInputSchema,
  OrganizationUpdateOneWithoutRestaurantsNestedInputSchema: () => OrganizationUpdateOneWithoutRestaurantsNestedInputSchema,
  OrganizationUpdateOneWithoutUsersNestedInputSchema: () => OrganizationUpdateOneWithoutUsersNestedInputSchema,
  OrganizationUpdateToOneWithWhereWithoutRestaurantsInputSchema: () => OrganizationUpdateToOneWithWhereWithoutRestaurantsInputSchema,
  OrganizationUpdateToOneWithWhereWithoutUsersInputSchema: () => OrganizationUpdateToOneWithWhereWithoutUsersInputSchema,
  OrganizationUpdateWithoutRestaurantsInputSchema: () => OrganizationUpdateWithoutRestaurantsInputSchema,
  OrganizationUpdateWithoutUsersInputSchema: () => OrganizationUpdateWithoutUsersInputSchema,
  OrganizationUpsertArgsSchema: () => OrganizationUpsertArgsSchema,
  OrganizationUpsertWithoutRestaurantsInputSchema: () => OrganizationUpsertWithoutRestaurantsInputSchema,
  OrganizationUpsertWithoutUsersInputSchema: () => OrganizationUpsertWithoutUsersInputSchema,
  OrganizationWhereInputSchema: () => OrganizationWhereInputSchema,
  OrganizationWhereUniqueInputSchema: () => OrganizationWhereUniqueInputSchema,
  PasswordResetAggregateArgsSchema: () => PasswordResetAggregateArgsSchema,
  PasswordResetArgsSchema: () => PasswordResetArgsSchema,
  PasswordResetAvgOrderByAggregateInputSchema: () => PasswordResetAvgOrderByAggregateInputSchema,
  PasswordResetCountOrderByAggregateInputSchema: () => PasswordResetCountOrderByAggregateInputSchema,
  PasswordResetCreateArgsSchema: () => PasswordResetCreateArgsSchema,
  PasswordResetCreateInputSchema: () => PasswordResetCreateInputSchema,
  PasswordResetCreateManyAndReturnArgsSchema: () => PasswordResetCreateManyAndReturnArgsSchema,
  PasswordResetCreateManyArgsSchema: () => PasswordResetCreateManyArgsSchema,
  PasswordResetCreateManyInputSchema: () => PasswordResetCreateManyInputSchema,
  PasswordResetCreateManyUserInputEnvelopeSchema: () => PasswordResetCreateManyUserInputEnvelopeSchema,
  PasswordResetCreateManyUserInputSchema: () => PasswordResetCreateManyUserInputSchema,
  PasswordResetCreateNestedManyWithoutUserInputSchema: () => PasswordResetCreateNestedManyWithoutUserInputSchema,
  PasswordResetCreateOrConnectWithoutUserInputSchema: () => PasswordResetCreateOrConnectWithoutUserInputSchema,
  PasswordResetCreateWithoutUserInputSchema: () => PasswordResetCreateWithoutUserInputSchema,
  PasswordResetDeleteArgsSchema: () => PasswordResetDeleteArgsSchema,
  PasswordResetDeleteManyArgsSchema: () => PasswordResetDeleteManyArgsSchema,
  PasswordResetFindFirstArgsSchema: () => PasswordResetFindFirstArgsSchema,
  PasswordResetFindFirstOrThrowArgsSchema: () => PasswordResetFindFirstOrThrowArgsSchema,
  PasswordResetFindManyArgsSchema: () => PasswordResetFindManyArgsSchema,
  PasswordResetFindUniqueArgsSchema: () => PasswordResetFindUniqueArgsSchema,
  PasswordResetFindUniqueOrThrowArgsSchema: () => PasswordResetFindUniqueOrThrowArgsSchema,
  PasswordResetGroupByArgsSchema: () => PasswordResetGroupByArgsSchema,
  PasswordResetIncludeSchema: () => PasswordResetIncludeSchema,
  PasswordResetListRelationFilterSchema: () => PasswordResetListRelationFilterSchema,
  PasswordResetMaxOrderByAggregateInputSchema: () => PasswordResetMaxOrderByAggregateInputSchema,
  PasswordResetMinOrderByAggregateInputSchema: () => PasswordResetMinOrderByAggregateInputSchema,
  PasswordResetOrderByRelationAggregateInputSchema: () => PasswordResetOrderByRelationAggregateInputSchema,
  PasswordResetOrderByWithAggregationInputSchema: () => PasswordResetOrderByWithAggregationInputSchema,
  PasswordResetOrderByWithRelationInputSchema: () => PasswordResetOrderByWithRelationInputSchema,
  PasswordResetScalarFieldEnumSchema: () => PasswordResetScalarFieldEnumSchema,
  PasswordResetScalarWhereInputSchema: () => PasswordResetScalarWhereInputSchema,
  PasswordResetScalarWhereWithAggregatesInputSchema: () => PasswordResetScalarWhereWithAggregatesInputSchema,
  PasswordResetSchema: () => PasswordResetSchema,
  PasswordResetSelectSchema: () => PasswordResetSelectSchema,
  PasswordResetSumOrderByAggregateInputSchema: () => PasswordResetSumOrderByAggregateInputSchema,
  PasswordResetUncheckedCreateInputSchema: () => PasswordResetUncheckedCreateInputSchema,
  PasswordResetUncheckedCreateNestedManyWithoutUserInputSchema: () => PasswordResetUncheckedCreateNestedManyWithoutUserInputSchema,
  PasswordResetUncheckedCreateWithoutUserInputSchema: () => PasswordResetUncheckedCreateWithoutUserInputSchema,
  PasswordResetUncheckedUpdateInputSchema: () => PasswordResetUncheckedUpdateInputSchema,
  PasswordResetUncheckedUpdateManyInputSchema: () => PasswordResetUncheckedUpdateManyInputSchema,
  PasswordResetUncheckedUpdateManyWithoutUserInputSchema: () => PasswordResetUncheckedUpdateManyWithoutUserInputSchema,
  PasswordResetUncheckedUpdateManyWithoutUserNestedInputSchema: () => PasswordResetUncheckedUpdateManyWithoutUserNestedInputSchema,
  PasswordResetUncheckedUpdateWithoutUserInputSchema: () => PasswordResetUncheckedUpdateWithoutUserInputSchema,
  PasswordResetUpdateArgsSchema: () => PasswordResetUpdateArgsSchema,
  PasswordResetUpdateInputSchema: () => PasswordResetUpdateInputSchema,
  PasswordResetUpdateManyArgsSchema: () => PasswordResetUpdateManyArgsSchema,
  PasswordResetUpdateManyMutationInputSchema: () => PasswordResetUpdateManyMutationInputSchema,
  PasswordResetUpdateManyWithWhereWithoutUserInputSchema: () => PasswordResetUpdateManyWithWhereWithoutUserInputSchema,
  PasswordResetUpdateManyWithoutUserNestedInputSchema: () => PasswordResetUpdateManyWithoutUserNestedInputSchema,
  PasswordResetUpdateWithWhereUniqueWithoutUserInputSchema: () => PasswordResetUpdateWithWhereUniqueWithoutUserInputSchema,
  PasswordResetUpdateWithoutUserInputSchema: () => PasswordResetUpdateWithoutUserInputSchema,
  PasswordResetUpsertArgsSchema: () => PasswordResetUpsertArgsSchema,
  PasswordResetUpsertWithWhereUniqueWithoutUserInputSchema: () => PasswordResetUpsertWithWhereUniqueWithoutUserInputSchema,
  PasswordResetWhereInputSchema: () => PasswordResetWhereInputSchema,
  PasswordResetWhereUniqueInputSchema: () => PasswordResetWhereUniqueInputSchema,
  PrepBoardAggregateArgsSchema: () => PrepBoardAggregateArgsSchema,
  PrepBoardArgsSchema: () => PrepBoardArgsSchema,
  PrepBoardAvgOrderByAggregateInputSchema: () => PrepBoardAvgOrderByAggregateInputSchema,
  PrepBoardCountOrderByAggregateInputSchema: () => PrepBoardCountOrderByAggregateInputSchema,
  PrepBoardCountOutputTypeArgsSchema: () => PrepBoardCountOutputTypeArgsSchema,
  PrepBoardCountOutputTypeSelectSchema: () => PrepBoardCountOutputTypeSelectSchema,
  PrepBoardCreateArgsSchema: () => PrepBoardCreateArgsSchema,
  PrepBoardCreateInputSchema: () => PrepBoardCreateInputSchema,
  PrepBoardCreateManyAndReturnArgsSchema: () => PrepBoardCreateManyAndReturnArgsSchema,
  PrepBoardCreateManyArgsSchema: () => PrepBoardCreateManyArgsSchema,
  PrepBoardCreateManyInputSchema: () => PrepBoardCreateManyInputSchema,
  PrepBoardCreateNestedManyWithoutRecipesInputSchema: () => PrepBoardCreateNestedManyWithoutRecipesInputSchema,
  PrepBoardCreateNestedOneWithoutPrepItemsInputSchema: () => PrepBoardCreateNestedOneWithoutPrepItemsInputSchema,
  PrepBoardCreateOrConnectWithoutPrepItemsInputSchema: () => PrepBoardCreateOrConnectWithoutPrepItemsInputSchema,
  PrepBoardCreateOrConnectWithoutRecipesInputSchema: () => PrepBoardCreateOrConnectWithoutRecipesInputSchema,
  PrepBoardCreateWithoutPrepItemsInputSchema: () => PrepBoardCreateWithoutPrepItemsInputSchema,
  PrepBoardCreateWithoutRecipesInputSchema: () => PrepBoardCreateWithoutRecipesInputSchema,
  PrepBoardDeleteArgsSchema: () => PrepBoardDeleteArgsSchema,
  PrepBoardDeleteManyArgsSchema: () => PrepBoardDeleteManyArgsSchema,
  PrepBoardFindFirstArgsSchema: () => PrepBoardFindFirstArgsSchema,
  PrepBoardFindFirstOrThrowArgsSchema: () => PrepBoardFindFirstOrThrowArgsSchema,
  PrepBoardFindManyArgsSchema: () => PrepBoardFindManyArgsSchema,
  PrepBoardFindUniqueArgsSchema: () => PrepBoardFindUniqueArgsSchema,
  PrepBoardFindUniqueOrThrowArgsSchema: () => PrepBoardFindUniqueOrThrowArgsSchema,
  PrepBoardGroupByArgsSchema: () => PrepBoardGroupByArgsSchema,
  PrepBoardIncludeSchema: () => PrepBoardIncludeSchema,
  PrepBoardListRelationFilterSchema: () => PrepBoardListRelationFilterSchema,
  PrepBoardMaxOrderByAggregateInputSchema: () => PrepBoardMaxOrderByAggregateInputSchema,
  PrepBoardMinOrderByAggregateInputSchema: () => PrepBoardMinOrderByAggregateInputSchema,
  PrepBoardOrderByRelationAggregateInputSchema: () => PrepBoardOrderByRelationAggregateInputSchema,
  PrepBoardOrderByWithAggregationInputSchema: () => PrepBoardOrderByWithAggregationInputSchema,
  PrepBoardOrderByWithRelationInputSchema: () => PrepBoardOrderByWithRelationInputSchema,
  PrepBoardRelationFilterSchema: () => PrepBoardRelationFilterSchema,
  PrepBoardScalarFieldEnumSchema: () => PrepBoardScalarFieldEnumSchema,
  PrepBoardScalarWhereInputSchema: () => PrepBoardScalarWhereInputSchema,
  PrepBoardScalarWhereWithAggregatesInputSchema: () => PrepBoardScalarWhereWithAggregatesInputSchema,
  PrepBoardSchema: () => PrepBoardSchema,
  PrepBoardSelectSchema: () => PrepBoardSelectSchema,
  PrepBoardSumOrderByAggregateInputSchema: () => PrepBoardSumOrderByAggregateInputSchema,
  PrepBoardUncheckedCreateInputSchema: () => PrepBoardUncheckedCreateInputSchema,
  PrepBoardUncheckedCreateNestedManyWithoutRecipesInputSchema: () => PrepBoardUncheckedCreateNestedManyWithoutRecipesInputSchema,
  PrepBoardUncheckedCreateWithoutPrepItemsInputSchema: () => PrepBoardUncheckedCreateWithoutPrepItemsInputSchema,
  PrepBoardUncheckedCreateWithoutRecipesInputSchema: () => PrepBoardUncheckedCreateWithoutRecipesInputSchema,
  PrepBoardUncheckedUpdateInputSchema: () => PrepBoardUncheckedUpdateInputSchema,
  PrepBoardUncheckedUpdateManyInputSchema: () => PrepBoardUncheckedUpdateManyInputSchema,
  PrepBoardUncheckedUpdateManyWithoutRecipesInputSchema: () => PrepBoardUncheckedUpdateManyWithoutRecipesInputSchema,
  PrepBoardUncheckedUpdateManyWithoutRecipesNestedInputSchema: () => PrepBoardUncheckedUpdateManyWithoutRecipesNestedInputSchema,
  PrepBoardUncheckedUpdateWithoutPrepItemsInputSchema: () => PrepBoardUncheckedUpdateWithoutPrepItemsInputSchema,
  PrepBoardUncheckedUpdateWithoutRecipesInputSchema: () => PrepBoardUncheckedUpdateWithoutRecipesInputSchema,
  PrepBoardUpdateArgsSchema: () => PrepBoardUpdateArgsSchema,
  PrepBoardUpdateInputSchema: () => PrepBoardUpdateInputSchema,
  PrepBoardUpdateManyArgsSchema: () => PrepBoardUpdateManyArgsSchema,
  PrepBoardUpdateManyMutationInputSchema: () => PrepBoardUpdateManyMutationInputSchema,
  PrepBoardUpdateManyWithWhereWithoutRecipesInputSchema: () => PrepBoardUpdateManyWithWhereWithoutRecipesInputSchema,
  PrepBoardUpdateManyWithoutRecipesNestedInputSchema: () => PrepBoardUpdateManyWithoutRecipesNestedInputSchema,
  PrepBoardUpdateOneRequiredWithoutPrepItemsNestedInputSchema: () => PrepBoardUpdateOneRequiredWithoutPrepItemsNestedInputSchema,
  PrepBoardUpdateToOneWithWhereWithoutPrepItemsInputSchema: () => PrepBoardUpdateToOneWithWhereWithoutPrepItemsInputSchema,
  PrepBoardUpdateWithWhereUniqueWithoutRecipesInputSchema: () => PrepBoardUpdateWithWhereUniqueWithoutRecipesInputSchema,
  PrepBoardUpdateWithoutPrepItemsInputSchema: () => PrepBoardUpdateWithoutPrepItemsInputSchema,
  PrepBoardUpdateWithoutRecipesInputSchema: () => PrepBoardUpdateWithoutRecipesInputSchema,
  PrepBoardUpsertArgsSchema: () => PrepBoardUpsertArgsSchema,
  PrepBoardUpsertWithWhereUniqueWithoutRecipesInputSchema: () => PrepBoardUpsertWithWhereUniqueWithoutRecipesInputSchema,
  PrepBoardUpsertWithoutPrepItemsInputSchema: () => PrepBoardUpsertWithoutPrepItemsInputSchema,
  PrepBoardWhereInputSchema: () => PrepBoardWhereInputSchema,
  PrepBoardWhereUniqueInputSchema: () => PrepBoardWhereUniqueInputSchema,
  PrepHistoryAggregateArgsSchema: () => PrepHistoryAggregateArgsSchema,
  PrepHistoryArgsSchema: () => PrepHistoryArgsSchema,
  PrepHistoryAvgOrderByAggregateInputSchema: () => PrepHistoryAvgOrderByAggregateInputSchema,
  PrepHistoryCountOrderByAggregateInputSchema: () => PrepHistoryCountOrderByAggregateInputSchema,
  PrepHistoryCreateArgsSchema: () => PrepHistoryCreateArgsSchema,
  PrepHistoryCreateInputSchema: () => PrepHistoryCreateInputSchema,
  PrepHistoryCreateManyAndReturnArgsSchema: () => PrepHistoryCreateManyAndReturnArgsSchema,
  PrepHistoryCreateManyArgsSchema: () => PrepHistoryCreateManyArgsSchema,
  PrepHistoryCreateManyInputSchema: () => PrepHistoryCreateManyInputSchema,
  PrepHistoryCreateManyRecipeInputEnvelopeSchema: () => PrepHistoryCreateManyRecipeInputEnvelopeSchema,
  PrepHistoryCreateManyRecipeInputSchema: () => PrepHistoryCreateManyRecipeInputSchema,
  PrepHistoryCreateNestedManyWithoutRecipeInputSchema: () => PrepHistoryCreateNestedManyWithoutRecipeInputSchema,
  PrepHistoryCreateOrConnectWithoutRecipeInputSchema: () => PrepHistoryCreateOrConnectWithoutRecipeInputSchema,
  PrepHistoryCreateWithoutRecipeInputSchema: () => PrepHistoryCreateWithoutRecipeInputSchema,
  PrepHistoryDeleteArgsSchema: () => PrepHistoryDeleteArgsSchema,
  PrepHistoryDeleteManyArgsSchema: () => PrepHistoryDeleteManyArgsSchema,
  PrepHistoryFindFirstArgsSchema: () => PrepHistoryFindFirstArgsSchema,
  PrepHistoryFindFirstOrThrowArgsSchema: () => PrepHistoryFindFirstOrThrowArgsSchema,
  PrepHistoryFindManyArgsSchema: () => PrepHistoryFindManyArgsSchema,
  PrepHistoryFindUniqueArgsSchema: () => PrepHistoryFindUniqueArgsSchema,
  PrepHistoryFindUniqueOrThrowArgsSchema: () => PrepHistoryFindUniqueOrThrowArgsSchema,
  PrepHistoryGroupByArgsSchema: () => PrepHistoryGroupByArgsSchema,
  PrepHistoryIncludeSchema: () => PrepHistoryIncludeSchema,
  PrepHistoryListRelationFilterSchema: () => PrepHistoryListRelationFilterSchema,
  PrepHistoryMaxOrderByAggregateInputSchema: () => PrepHistoryMaxOrderByAggregateInputSchema,
  PrepHistoryMinOrderByAggregateInputSchema: () => PrepHistoryMinOrderByAggregateInputSchema,
  PrepHistoryOrderByRelationAggregateInputSchema: () => PrepHistoryOrderByRelationAggregateInputSchema,
  PrepHistoryOrderByWithAggregationInputSchema: () => PrepHistoryOrderByWithAggregationInputSchema,
  PrepHistoryOrderByWithRelationInputSchema: () => PrepHistoryOrderByWithRelationInputSchema,
  PrepHistoryScalarFieldEnumSchema: () => PrepHistoryScalarFieldEnumSchema,
  PrepHistoryScalarWhereInputSchema: () => PrepHistoryScalarWhereInputSchema,
  PrepHistoryScalarWhereWithAggregatesInputSchema: () => PrepHistoryScalarWhereWithAggregatesInputSchema,
  PrepHistorySchema: () => PrepHistorySchema,
  PrepHistorySelectSchema: () => PrepHistorySelectSchema,
  PrepHistorySumOrderByAggregateInputSchema: () => PrepHistorySumOrderByAggregateInputSchema,
  PrepHistoryUncheckedCreateInputSchema: () => PrepHistoryUncheckedCreateInputSchema,
  PrepHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema: () => PrepHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema,
  PrepHistoryUncheckedCreateWithoutRecipeInputSchema: () => PrepHistoryUncheckedCreateWithoutRecipeInputSchema,
  PrepHistoryUncheckedUpdateInputSchema: () => PrepHistoryUncheckedUpdateInputSchema,
  PrepHistoryUncheckedUpdateManyInputSchema: () => PrepHistoryUncheckedUpdateManyInputSchema,
  PrepHistoryUncheckedUpdateManyWithoutRecipeInputSchema: () => PrepHistoryUncheckedUpdateManyWithoutRecipeInputSchema,
  PrepHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema: () => PrepHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema,
  PrepHistoryUncheckedUpdateWithoutRecipeInputSchema: () => PrepHistoryUncheckedUpdateWithoutRecipeInputSchema,
  PrepHistoryUpdateArgsSchema: () => PrepHistoryUpdateArgsSchema,
  PrepHistoryUpdateInputSchema: () => PrepHistoryUpdateInputSchema,
  PrepHistoryUpdateManyArgsSchema: () => PrepHistoryUpdateManyArgsSchema,
  PrepHistoryUpdateManyMutationInputSchema: () => PrepHistoryUpdateManyMutationInputSchema,
  PrepHistoryUpdateManyWithWhereWithoutRecipeInputSchema: () => PrepHistoryUpdateManyWithWhereWithoutRecipeInputSchema,
  PrepHistoryUpdateManyWithoutRecipeNestedInputSchema: () => PrepHistoryUpdateManyWithoutRecipeNestedInputSchema,
  PrepHistoryUpdateWithWhereUniqueWithoutRecipeInputSchema: () => PrepHistoryUpdateWithWhereUniqueWithoutRecipeInputSchema,
  PrepHistoryUpdateWithoutRecipeInputSchema: () => PrepHistoryUpdateWithoutRecipeInputSchema,
  PrepHistoryUpsertArgsSchema: () => PrepHistoryUpsertArgsSchema,
  PrepHistoryUpsertWithWhereUniqueWithoutRecipeInputSchema: () => PrepHistoryUpsertWithWhereUniqueWithoutRecipeInputSchema,
  PrepHistoryWhereInputSchema: () => PrepHistoryWhereInputSchema,
  PrepHistoryWhereUniqueInputSchema: () => PrepHistoryWhereUniqueInputSchema,
  PrepItemAggregateArgsSchema: () => PrepItemAggregateArgsSchema,
  PrepItemArgsSchema: () => PrepItemArgsSchema,
  PrepItemAvgOrderByAggregateInputSchema: () => PrepItemAvgOrderByAggregateInputSchema,
  PrepItemCountOrderByAggregateInputSchema: () => PrepItemCountOrderByAggregateInputSchema,
  PrepItemCreateArgsSchema: () => PrepItemCreateArgsSchema,
  PrepItemCreateInputSchema: () => PrepItemCreateInputSchema,
  PrepItemCreateManyAndReturnArgsSchema: () => PrepItemCreateManyAndReturnArgsSchema,
  PrepItemCreateManyArgsSchema: () => PrepItemCreateManyArgsSchema,
  PrepItemCreateManyAssignedToInputEnvelopeSchema: () => PrepItemCreateManyAssignedToInputEnvelopeSchema,
  PrepItemCreateManyAssignedToInputSchema: () => PrepItemCreateManyAssignedToInputSchema,
  PrepItemCreateManyInputSchema: () => PrepItemCreateManyInputSchema,
  PrepItemCreateManyPrepBoardInputEnvelopeSchema: () => PrepItemCreateManyPrepBoardInputEnvelopeSchema,
  PrepItemCreateManyPrepBoardInputSchema: () => PrepItemCreateManyPrepBoardInputSchema,
  PrepItemCreateManyRecipeInputEnvelopeSchema: () => PrepItemCreateManyRecipeInputEnvelopeSchema,
  PrepItemCreateManyRecipeInputSchema: () => PrepItemCreateManyRecipeInputSchema,
  PrepItemCreateNestedManyWithoutAssignedToInputSchema: () => PrepItemCreateNestedManyWithoutAssignedToInputSchema,
  PrepItemCreateNestedManyWithoutPrepBoardInputSchema: () => PrepItemCreateNestedManyWithoutPrepBoardInputSchema,
  PrepItemCreateNestedManyWithoutRecipeInputSchema: () => PrepItemCreateNestedManyWithoutRecipeInputSchema,
  PrepItemCreateOrConnectWithoutAssignedToInputSchema: () => PrepItemCreateOrConnectWithoutAssignedToInputSchema,
  PrepItemCreateOrConnectWithoutPrepBoardInputSchema: () => PrepItemCreateOrConnectWithoutPrepBoardInputSchema,
  PrepItemCreateOrConnectWithoutRecipeInputSchema: () => PrepItemCreateOrConnectWithoutRecipeInputSchema,
  PrepItemCreateWithoutAssignedToInputSchema: () => PrepItemCreateWithoutAssignedToInputSchema,
  PrepItemCreateWithoutPrepBoardInputSchema: () => PrepItemCreateWithoutPrepBoardInputSchema,
  PrepItemCreateWithoutRecipeInputSchema: () => PrepItemCreateWithoutRecipeInputSchema,
  PrepItemDeleteArgsSchema: () => PrepItemDeleteArgsSchema,
  PrepItemDeleteManyArgsSchema: () => PrepItemDeleteManyArgsSchema,
  PrepItemFindFirstArgsSchema: () => PrepItemFindFirstArgsSchema,
  PrepItemFindFirstOrThrowArgsSchema: () => PrepItemFindFirstOrThrowArgsSchema,
  PrepItemFindManyArgsSchema: () => PrepItemFindManyArgsSchema,
  PrepItemFindUniqueArgsSchema: () => PrepItemFindUniqueArgsSchema,
  PrepItemFindUniqueOrThrowArgsSchema: () => PrepItemFindUniqueOrThrowArgsSchema,
  PrepItemGroupByArgsSchema: () => PrepItemGroupByArgsSchema,
  PrepItemIncludeSchema: () => PrepItemIncludeSchema,
  PrepItemListRelationFilterSchema: () => PrepItemListRelationFilterSchema,
  PrepItemMaxOrderByAggregateInputSchema: () => PrepItemMaxOrderByAggregateInputSchema,
  PrepItemMinOrderByAggregateInputSchema: () => PrepItemMinOrderByAggregateInputSchema,
  PrepItemOrderByRelationAggregateInputSchema: () => PrepItemOrderByRelationAggregateInputSchema,
  PrepItemOrderByWithAggregationInputSchema: () => PrepItemOrderByWithAggregationInputSchema,
  PrepItemOrderByWithRelationInputSchema: () => PrepItemOrderByWithRelationInputSchema,
  PrepItemScalarFieldEnumSchema: () => PrepItemScalarFieldEnumSchema,
  PrepItemScalarWhereInputSchema: () => PrepItemScalarWhereInputSchema,
  PrepItemScalarWhereWithAggregatesInputSchema: () => PrepItemScalarWhereWithAggregatesInputSchema,
  PrepItemSchema: () => PrepItemSchema,
  PrepItemSelectSchema: () => PrepItemSelectSchema,
  PrepItemSumOrderByAggregateInputSchema: () => PrepItemSumOrderByAggregateInputSchema,
  PrepItemUncheckedCreateInputSchema: () => PrepItemUncheckedCreateInputSchema,
  PrepItemUncheckedCreateNestedManyWithoutAssignedToInputSchema: () => PrepItemUncheckedCreateNestedManyWithoutAssignedToInputSchema,
  PrepItemUncheckedCreateNestedManyWithoutPrepBoardInputSchema: () => PrepItemUncheckedCreateNestedManyWithoutPrepBoardInputSchema,
  PrepItemUncheckedCreateNestedManyWithoutRecipeInputSchema: () => PrepItemUncheckedCreateNestedManyWithoutRecipeInputSchema,
  PrepItemUncheckedCreateWithoutAssignedToInputSchema: () => PrepItemUncheckedCreateWithoutAssignedToInputSchema,
  PrepItemUncheckedCreateWithoutPrepBoardInputSchema: () => PrepItemUncheckedCreateWithoutPrepBoardInputSchema,
  PrepItemUncheckedCreateWithoutRecipeInputSchema: () => PrepItemUncheckedCreateWithoutRecipeInputSchema,
  PrepItemUncheckedUpdateInputSchema: () => PrepItemUncheckedUpdateInputSchema,
  PrepItemUncheckedUpdateManyInputSchema: () => PrepItemUncheckedUpdateManyInputSchema,
  PrepItemUncheckedUpdateManyWithoutAssignedToInputSchema: () => PrepItemUncheckedUpdateManyWithoutAssignedToInputSchema,
  PrepItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema: () => PrepItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema,
  PrepItemUncheckedUpdateManyWithoutPrepBoardInputSchema: () => PrepItemUncheckedUpdateManyWithoutPrepBoardInputSchema,
  PrepItemUncheckedUpdateManyWithoutPrepBoardNestedInputSchema: () => PrepItemUncheckedUpdateManyWithoutPrepBoardNestedInputSchema,
  PrepItemUncheckedUpdateManyWithoutRecipeInputSchema: () => PrepItemUncheckedUpdateManyWithoutRecipeInputSchema,
  PrepItemUncheckedUpdateManyWithoutRecipeNestedInputSchema: () => PrepItemUncheckedUpdateManyWithoutRecipeNestedInputSchema,
  PrepItemUncheckedUpdateWithoutAssignedToInputSchema: () => PrepItemUncheckedUpdateWithoutAssignedToInputSchema,
  PrepItemUncheckedUpdateWithoutPrepBoardInputSchema: () => PrepItemUncheckedUpdateWithoutPrepBoardInputSchema,
  PrepItemUncheckedUpdateWithoutRecipeInputSchema: () => PrepItemUncheckedUpdateWithoutRecipeInputSchema,
  PrepItemUpdateArgsSchema: () => PrepItemUpdateArgsSchema,
  PrepItemUpdateInputSchema: () => PrepItemUpdateInputSchema,
  PrepItemUpdateManyArgsSchema: () => PrepItemUpdateManyArgsSchema,
  PrepItemUpdateManyMutationInputSchema: () => PrepItemUpdateManyMutationInputSchema,
  PrepItemUpdateManyWithWhereWithoutAssignedToInputSchema: () => PrepItemUpdateManyWithWhereWithoutAssignedToInputSchema,
  PrepItemUpdateManyWithWhereWithoutPrepBoardInputSchema: () => PrepItemUpdateManyWithWhereWithoutPrepBoardInputSchema,
  PrepItemUpdateManyWithWhereWithoutRecipeInputSchema: () => PrepItemUpdateManyWithWhereWithoutRecipeInputSchema,
  PrepItemUpdateManyWithoutAssignedToNestedInputSchema: () => PrepItemUpdateManyWithoutAssignedToNestedInputSchema,
  PrepItemUpdateManyWithoutPrepBoardNestedInputSchema: () => PrepItemUpdateManyWithoutPrepBoardNestedInputSchema,
  PrepItemUpdateManyWithoutRecipeNestedInputSchema: () => PrepItemUpdateManyWithoutRecipeNestedInputSchema,
  PrepItemUpdateWithWhereUniqueWithoutAssignedToInputSchema: () => PrepItemUpdateWithWhereUniqueWithoutAssignedToInputSchema,
  PrepItemUpdateWithWhereUniqueWithoutPrepBoardInputSchema: () => PrepItemUpdateWithWhereUniqueWithoutPrepBoardInputSchema,
  PrepItemUpdateWithWhereUniqueWithoutRecipeInputSchema: () => PrepItemUpdateWithWhereUniqueWithoutRecipeInputSchema,
  PrepItemUpdateWithoutAssignedToInputSchema: () => PrepItemUpdateWithoutAssignedToInputSchema,
  PrepItemUpdateWithoutPrepBoardInputSchema: () => PrepItemUpdateWithoutPrepBoardInputSchema,
  PrepItemUpdateWithoutRecipeInputSchema: () => PrepItemUpdateWithoutRecipeInputSchema,
  PrepItemUpsertArgsSchema: () => PrepItemUpsertArgsSchema,
  PrepItemUpsertWithWhereUniqueWithoutAssignedToInputSchema: () => PrepItemUpsertWithWhereUniqueWithoutAssignedToInputSchema,
  PrepItemUpsertWithWhereUniqueWithoutPrepBoardInputSchema: () => PrepItemUpsertWithWhereUniqueWithoutPrepBoardInputSchema,
  PrepItemUpsertWithWhereUniqueWithoutRecipeInputSchema: () => PrepItemUpsertWithWhereUniqueWithoutRecipeInputSchema,
  PrepItemWhereInputSchema: () => PrepItemWhereInputSchema,
  PrepItemWhereUniqueInputSchema: () => PrepItemWhereUniqueInputSchema,
  PrepStatusSchema: () => PrepStatusSchema,
  ProductionPlanAggregateArgsSchema: () => ProductionPlanAggregateArgsSchema,
  ProductionPlanArgsSchema: () => ProductionPlanArgsSchema,
  ProductionPlanAvgOrderByAggregateInputSchema: () => ProductionPlanAvgOrderByAggregateInputSchema,
  ProductionPlanCountOrderByAggregateInputSchema: () => ProductionPlanCountOrderByAggregateInputSchema,
  ProductionPlanCountOutputTypeArgsSchema: () => ProductionPlanCountOutputTypeArgsSchema,
  ProductionPlanCountOutputTypeSelectSchema: () => ProductionPlanCountOutputTypeSelectSchema,
  ProductionPlanCreateArgsSchema: () => ProductionPlanCreateArgsSchema,
  ProductionPlanCreateInputSchema: () => ProductionPlanCreateInputSchema,
  ProductionPlanCreateManyAndReturnArgsSchema: () => ProductionPlanCreateManyAndReturnArgsSchema,
  ProductionPlanCreateManyArgsSchema: () => ProductionPlanCreateManyArgsSchema,
  ProductionPlanCreateManyCreatedByInputEnvelopeSchema: () => ProductionPlanCreateManyCreatedByInputEnvelopeSchema,
  ProductionPlanCreateManyCreatedByInputSchema: () => ProductionPlanCreateManyCreatedByInputSchema,
  ProductionPlanCreateManyInputSchema: () => ProductionPlanCreateManyInputSchema,
  ProductionPlanCreateManyRestaurantInputEnvelopeSchema: () => ProductionPlanCreateManyRestaurantInputEnvelopeSchema,
  ProductionPlanCreateManyRestaurantInputSchema: () => ProductionPlanCreateManyRestaurantInputSchema,
  ProductionPlanCreateNestedManyWithoutCreatedByInputSchema: () => ProductionPlanCreateNestedManyWithoutCreatedByInputSchema,
  ProductionPlanCreateNestedManyWithoutRestaurantInputSchema: () => ProductionPlanCreateNestedManyWithoutRestaurantInputSchema,
  ProductionPlanCreateNestedOneWithoutItemsInputSchema: () => ProductionPlanCreateNestedOneWithoutItemsInputSchema,
  ProductionPlanCreateOrConnectWithoutCreatedByInputSchema: () => ProductionPlanCreateOrConnectWithoutCreatedByInputSchema,
  ProductionPlanCreateOrConnectWithoutItemsInputSchema: () => ProductionPlanCreateOrConnectWithoutItemsInputSchema,
  ProductionPlanCreateOrConnectWithoutRestaurantInputSchema: () => ProductionPlanCreateOrConnectWithoutRestaurantInputSchema,
  ProductionPlanCreateWithoutCreatedByInputSchema: () => ProductionPlanCreateWithoutCreatedByInputSchema,
  ProductionPlanCreateWithoutItemsInputSchema: () => ProductionPlanCreateWithoutItemsInputSchema,
  ProductionPlanCreateWithoutRestaurantInputSchema: () => ProductionPlanCreateWithoutRestaurantInputSchema,
  ProductionPlanDeleteArgsSchema: () => ProductionPlanDeleteArgsSchema,
  ProductionPlanDeleteManyArgsSchema: () => ProductionPlanDeleteManyArgsSchema,
  ProductionPlanFindFirstArgsSchema: () => ProductionPlanFindFirstArgsSchema,
  ProductionPlanFindFirstOrThrowArgsSchema: () => ProductionPlanFindFirstOrThrowArgsSchema,
  ProductionPlanFindManyArgsSchema: () => ProductionPlanFindManyArgsSchema,
  ProductionPlanFindUniqueArgsSchema: () => ProductionPlanFindUniqueArgsSchema,
  ProductionPlanFindUniqueOrThrowArgsSchema: () => ProductionPlanFindUniqueOrThrowArgsSchema,
  ProductionPlanGroupByArgsSchema: () => ProductionPlanGroupByArgsSchema,
  ProductionPlanIncludeSchema: () => ProductionPlanIncludeSchema,
  ProductionPlanItemAggregateArgsSchema: () => ProductionPlanItemAggregateArgsSchema,
  ProductionPlanItemArgsSchema: () => ProductionPlanItemArgsSchema,
  ProductionPlanItemAvgOrderByAggregateInputSchema: () => ProductionPlanItemAvgOrderByAggregateInputSchema,
  ProductionPlanItemCountOrderByAggregateInputSchema: () => ProductionPlanItemCountOrderByAggregateInputSchema,
  ProductionPlanItemCreateArgsSchema: () => ProductionPlanItemCreateArgsSchema,
  ProductionPlanItemCreateInputSchema: () => ProductionPlanItemCreateInputSchema,
  ProductionPlanItemCreateManyAndReturnArgsSchema: () => ProductionPlanItemCreateManyAndReturnArgsSchema,
  ProductionPlanItemCreateManyArgsSchema: () => ProductionPlanItemCreateManyArgsSchema,
  ProductionPlanItemCreateManyAssignedToInputEnvelopeSchema: () => ProductionPlanItemCreateManyAssignedToInputEnvelopeSchema,
  ProductionPlanItemCreateManyAssignedToInputSchema: () => ProductionPlanItemCreateManyAssignedToInputSchema,
  ProductionPlanItemCreateManyInputSchema: () => ProductionPlanItemCreateManyInputSchema,
  ProductionPlanItemCreateManyProductionPlanInputEnvelopeSchema: () => ProductionPlanItemCreateManyProductionPlanInputEnvelopeSchema,
  ProductionPlanItemCreateManyProductionPlanInputSchema: () => ProductionPlanItemCreateManyProductionPlanInputSchema,
  ProductionPlanItemCreateManyRecipeInputEnvelopeSchema: () => ProductionPlanItemCreateManyRecipeInputEnvelopeSchema,
  ProductionPlanItemCreateManyRecipeInputSchema: () => ProductionPlanItemCreateManyRecipeInputSchema,
  ProductionPlanItemCreateNestedManyWithoutAssignedToInputSchema: () => ProductionPlanItemCreateNestedManyWithoutAssignedToInputSchema,
  ProductionPlanItemCreateNestedManyWithoutProductionPlanInputSchema: () => ProductionPlanItemCreateNestedManyWithoutProductionPlanInputSchema,
  ProductionPlanItemCreateNestedManyWithoutRecipeInputSchema: () => ProductionPlanItemCreateNestedManyWithoutRecipeInputSchema,
  ProductionPlanItemCreateOrConnectWithoutAssignedToInputSchema: () => ProductionPlanItemCreateOrConnectWithoutAssignedToInputSchema,
  ProductionPlanItemCreateOrConnectWithoutProductionPlanInputSchema: () => ProductionPlanItemCreateOrConnectWithoutProductionPlanInputSchema,
  ProductionPlanItemCreateOrConnectWithoutRecipeInputSchema: () => ProductionPlanItemCreateOrConnectWithoutRecipeInputSchema,
  ProductionPlanItemCreateWithoutAssignedToInputSchema: () => ProductionPlanItemCreateWithoutAssignedToInputSchema,
  ProductionPlanItemCreateWithoutProductionPlanInputSchema: () => ProductionPlanItemCreateWithoutProductionPlanInputSchema,
  ProductionPlanItemCreateWithoutRecipeInputSchema: () => ProductionPlanItemCreateWithoutRecipeInputSchema,
  ProductionPlanItemDeleteArgsSchema: () => ProductionPlanItemDeleteArgsSchema,
  ProductionPlanItemDeleteManyArgsSchema: () => ProductionPlanItemDeleteManyArgsSchema,
  ProductionPlanItemFindFirstArgsSchema: () => ProductionPlanItemFindFirstArgsSchema,
  ProductionPlanItemFindFirstOrThrowArgsSchema: () => ProductionPlanItemFindFirstOrThrowArgsSchema,
  ProductionPlanItemFindManyArgsSchema: () => ProductionPlanItemFindManyArgsSchema,
  ProductionPlanItemFindUniqueArgsSchema: () => ProductionPlanItemFindUniqueArgsSchema,
  ProductionPlanItemFindUniqueOrThrowArgsSchema: () => ProductionPlanItemFindUniqueOrThrowArgsSchema,
  ProductionPlanItemGroupByArgsSchema: () => ProductionPlanItemGroupByArgsSchema,
  ProductionPlanItemIncludeSchema: () => ProductionPlanItemIncludeSchema,
  ProductionPlanItemListRelationFilterSchema: () => ProductionPlanItemListRelationFilterSchema,
  ProductionPlanItemMaxOrderByAggregateInputSchema: () => ProductionPlanItemMaxOrderByAggregateInputSchema,
  ProductionPlanItemMinOrderByAggregateInputSchema: () => ProductionPlanItemMinOrderByAggregateInputSchema,
  ProductionPlanItemOrderByRelationAggregateInputSchema: () => ProductionPlanItemOrderByRelationAggregateInputSchema,
  ProductionPlanItemOrderByWithAggregationInputSchema: () => ProductionPlanItemOrderByWithAggregationInputSchema,
  ProductionPlanItemOrderByWithRelationInputSchema: () => ProductionPlanItemOrderByWithRelationInputSchema,
  ProductionPlanItemScalarFieldEnumSchema: () => ProductionPlanItemScalarFieldEnumSchema,
  ProductionPlanItemScalarWhereInputSchema: () => ProductionPlanItemScalarWhereInputSchema,
  ProductionPlanItemScalarWhereWithAggregatesInputSchema: () => ProductionPlanItemScalarWhereWithAggregatesInputSchema,
  ProductionPlanItemSchema: () => ProductionPlanItemSchema,
  ProductionPlanItemSelectSchema: () => ProductionPlanItemSelectSchema,
  ProductionPlanItemSumOrderByAggregateInputSchema: () => ProductionPlanItemSumOrderByAggregateInputSchema,
  ProductionPlanItemUncheckedCreateInputSchema: () => ProductionPlanItemUncheckedCreateInputSchema,
  ProductionPlanItemUncheckedCreateNestedManyWithoutAssignedToInputSchema: () => ProductionPlanItemUncheckedCreateNestedManyWithoutAssignedToInputSchema,
  ProductionPlanItemUncheckedCreateNestedManyWithoutProductionPlanInputSchema: () => ProductionPlanItemUncheckedCreateNestedManyWithoutProductionPlanInputSchema,
  ProductionPlanItemUncheckedCreateNestedManyWithoutRecipeInputSchema: () => ProductionPlanItemUncheckedCreateNestedManyWithoutRecipeInputSchema,
  ProductionPlanItemUncheckedCreateWithoutAssignedToInputSchema: () => ProductionPlanItemUncheckedCreateWithoutAssignedToInputSchema,
  ProductionPlanItemUncheckedCreateWithoutProductionPlanInputSchema: () => ProductionPlanItemUncheckedCreateWithoutProductionPlanInputSchema,
  ProductionPlanItemUncheckedCreateWithoutRecipeInputSchema: () => ProductionPlanItemUncheckedCreateWithoutRecipeInputSchema,
  ProductionPlanItemUncheckedUpdateInputSchema: () => ProductionPlanItemUncheckedUpdateInputSchema,
  ProductionPlanItemUncheckedUpdateManyInputSchema: () => ProductionPlanItemUncheckedUpdateManyInputSchema,
  ProductionPlanItemUncheckedUpdateManyWithoutAssignedToInputSchema: () => ProductionPlanItemUncheckedUpdateManyWithoutAssignedToInputSchema,
  ProductionPlanItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema: () => ProductionPlanItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema,
  ProductionPlanItemUncheckedUpdateManyWithoutProductionPlanInputSchema: () => ProductionPlanItemUncheckedUpdateManyWithoutProductionPlanInputSchema,
  ProductionPlanItemUncheckedUpdateManyWithoutProductionPlanNestedInputSchema: () => ProductionPlanItemUncheckedUpdateManyWithoutProductionPlanNestedInputSchema,
  ProductionPlanItemUncheckedUpdateManyWithoutRecipeInputSchema: () => ProductionPlanItemUncheckedUpdateManyWithoutRecipeInputSchema,
  ProductionPlanItemUncheckedUpdateManyWithoutRecipeNestedInputSchema: () => ProductionPlanItemUncheckedUpdateManyWithoutRecipeNestedInputSchema,
  ProductionPlanItemUncheckedUpdateWithoutAssignedToInputSchema: () => ProductionPlanItemUncheckedUpdateWithoutAssignedToInputSchema,
  ProductionPlanItemUncheckedUpdateWithoutProductionPlanInputSchema: () => ProductionPlanItemUncheckedUpdateWithoutProductionPlanInputSchema,
  ProductionPlanItemUncheckedUpdateWithoutRecipeInputSchema: () => ProductionPlanItemUncheckedUpdateWithoutRecipeInputSchema,
  ProductionPlanItemUpdateArgsSchema: () => ProductionPlanItemUpdateArgsSchema,
  ProductionPlanItemUpdateInputSchema: () => ProductionPlanItemUpdateInputSchema,
  ProductionPlanItemUpdateManyArgsSchema: () => ProductionPlanItemUpdateManyArgsSchema,
  ProductionPlanItemUpdateManyMutationInputSchema: () => ProductionPlanItemUpdateManyMutationInputSchema,
  ProductionPlanItemUpdateManyWithWhereWithoutAssignedToInputSchema: () => ProductionPlanItemUpdateManyWithWhereWithoutAssignedToInputSchema,
  ProductionPlanItemUpdateManyWithWhereWithoutProductionPlanInputSchema: () => ProductionPlanItemUpdateManyWithWhereWithoutProductionPlanInputSchema,
  ProductionPlanItemUpdateManyWithWhereWithoutRecipeInputSchema: () => ProductionPlanItemUpdateManyWithWhereWithoutRecipeInputSchema,
  ProductionPlanItemUpdateManyWithoutAssignedToNestedInputSchema: () => ProductionPlanItemUpdateManyWithoutAssignedToNestedInputSchema,
  ProductionPlanItemUpdateManyWithoutProductionPlanNestedInputSchema: () => ProductionPlanItemUpdateManyWithoutProductionPlanNestedInputSchema,
  ProductionPlanItemUpdateManyWithoutRecipeNestedInputSchema: () => ProductionPlanItemUpdateManyWithoutRecipeNestedInputSchema,
  ProductionPlanItemUpdateWithWhereUniqueWithoutAssignedToInputSchema: () => ProductionPlanItemUpdateWithWhereUniqueWithoutAssignedToInputSchema,
  ProductionPlanItemUpdateWithWhereUniqueWithoutProductionPlanInputSchema: () => ProductionPlanItemUpdateWithWhereUniqueWithoutProductionPlanInputSchema,
  ProductionPlanItemUpdateWithWhereUniqueWithoutRecipeInputSchema: () => ProductionPlanItemUpdateWithWhereUniqueWithoutRecipeInputSchema,
  ProductionPlanItemUpdateWithoutAssignedToInputSchema: () => ProductionPlanItemUpdateWithoutAssignedToInputSchema,
  ProductionPlanItemUpdateWithoutProductionPlanInputSchema: () => ProductionPlanItemUpdateWithoutProductionPlanInputSchema,
  ProductionPlanItemUpdateWithoutRecipeInputSchema: () => ProductionPlanItemUpdateWithoutRecipeInputSchema,
  ProductionPlanItemUpsertArgsSchema: () => ProductionPlanItemUpsertArgsSchema,
  ProductionPlanItemUpsertWithWhereUniqueWithoutAssignedToInputSchema: () => ProductionPlanItemUpsertWithWhereUniqueWithoutAssignedToInputSchema,
  ProductionPlanItemUpsertWithWhereUniqueWithoutProductionPlanInputSchema: () => ProductionPlanItemUpsertWithWhereUniqueWithoutProductionPlanInputSchema,
  ProductionPlanItemUpsertWithWhereUniqueWithoutRecipeInputSchema: () => ProductionPlanItemUpsertWithWhereUniqueWithoutRecipeInputSchema,
  ProductionPlanItemWhereInputSchema: () => ProductionPlanItemWhereInputSchema,
  ProductionPlanItemWhereUniqueInputSchema: () => ProductionPlanItemWhereUniqueInputSchema,
  ProductionPlanListRelationFilterSchema: () => ProductionPlanListRelationFilterSchema,
  ProductionPlanMaxOrderByAggregateInputSchema: () => ProductionPlanMaxOrderByAggregateInputSchema,
  ProductionPlanMinOrderByAggregateInputSchema: () => ProductionPlanMinOrderByAggregateInputSchema,
  ProductionPlanOrderByRelationAggregateInputSchema: () => ProductionPlanOrderByRelationAggregateInputSchema,
  ProductionPlanOrderByWithAggregationInputSchema: () => ProductionPlanOrderByWithAggregationInputSchema,
  ProductionPlanOrderByWithRelationInputSchema: () => ProductionPlanOrderByWithRelationInputSchema,
  ProductionPlanRelationFilterSchema: () => ProductionPlanRelationFilterSchema,
  ProductionPlanScalarFieldEnumSchema: () => ProductionPlanScalarFieldEnumSchema,
  ProductionPlanScalarWhereInputSchema: () => ProductionPlanScalarWhereInputSchema,
  ProductionPlanScalarWhereWithAggregatesInputSchema: () => ProductionPlanScalarWhereWithAggregatesInputSchema,
  ProductionPlanSchema: () => ProductionPlanSchema,
  ProductionPlanSelectSchema: () => ProductionPlanSelectSchema,
  ProductionPlanSumOrderByAggregateInputSchema: () => ProductionPlanSumOrderByAggregateInputSchema,
  ProductionPlanUncheckedCreateInputSchema: () => ProductionPlanUncheckedCreateInputSchema,
  ProductionPlanUncheckedCreateNestedManyWithoutCreatedByInputSchema: () => ProductionPlanUncheckedCreateNestedManyWithoutCreatedByInputSchema,
  ProductionPlanUncheckedCreateNestedManyWithoutRestaurantInputSchema: () => ProductionPlanUncheckedCreateNestedManyWithoutRestaurantInputSchema,
  ProductionPlanUncheckedCreateWithoutCreatedByInputSchema: () => ProductionPlanUncheckedCreateWithoutCreatedByInputSchema,
  ProductionPlanUncheckedCreateWithoutItemsInputSchema: () => ProductionPlanUncheckedCreateWithoutItemsInputSchema,
  ProductionPlanUncheckedCreateWithoutRestaurantInputSchema: () => ProductionPlanUncheckedCreateWithoutRestaurantInputSchema,
  ProductionPlanUncheckedUpdateInputSchema: () => ProductionPlanUncheckedUpdateInputSchema,
  ProductionPlanUncheckedUpdateManyInputSchema: () => ProductionPlanUncheckedUpdateManyInputSchema,
  ProductionPlanUncheckedUpdateManyWithoutCreatedByInputSchema: () => ProductionPlanUncheckedUpdateManyWithoutCreatedByInputSchema,
  ProductionPlanUncheckedUpdateManyWithoutCreatedByNestedInputSchema: () => ProductionPlanUncheckedUpdateManyWithoutCreatedByNestedInputSchema,
  ProductionPlanUncheckedUpdateManyWithoutRestaurantInputSchema: () => ProductionPlanUncheckedUpdateManyWithoutRestaurantInputSchema,
  ProductionPlanUncheckedUpdateManyWithoutRestaurantNestedInputSchema: () => ProductionPlanUncheckedUpdateManyWithoutRestaurantNestedInputSchema,
  ProductionPlanUncheckedUpdateWithoutCreatedByInputSchema: () => ProductionPlanUncheckedUpdateWithoutCreatedByInputSchema,
  ProductionPlanUncheckedUpdateWithoutItemsInputSchema: () => ProductionPlanUncheckedUpdateWithoutItemsInputSchema,
  ProductionPlanUncheckedUpdateWithoutRestaurantInputSchema: () => ProductionPlanUncheckedUpdateWithoutRestaurantInputSchema,
  ProductionPlanUpdateArgsSchema: () => ProductionPlanUpdateArgsSchema,
  ProductionPlanUpdateInputSchema: () => ProductionPlanUpdateInputSchema,
  ProductionPlanUpdateManyArgsSchema: () => ProductionPlanUpdateManyArgsSchema,
  ProductionPlanUpdateManyMutationInputSchema: () => ProductionPlanUpdateManyMutationInputSchema,
  ProductionPlanUpdateManyWithWhereWithoutCreatedByInputSchema: () => ProductionPlanUpdateManyWithWhereWithoutCreatedByInputSchema,
  ProductionPlanUpdateManyWithWhereWithoutRestaurantInputSchema: () => ProductionPlanUpdateManyWithWhereWithoutRestaurantInputSchema,
  ProductionPlanUpdateManyWithoutCreatedByNestedInputSchema: () => ProductionPlanUpdateManyWithoutCreatedByNestedInputSchema,
  ProductionPlanUpdateManyWithoutRestaurantNestedInputSchema: () => ProductionPlanUpdateManyWithoutRestaurantNestedInputSchema,
  ProductionPlanUpdateOneRequiredWithoutItemsNestedInputSchema: () => ProductionPlanUpdateOneRequiredWithoutItemsNestedInputSchema,
  ProductionPlanUpdateToOneWithWhereWithoutItemsInputSchema: () => ProductionPlanUpdateToOneWithWhereWithoutItemsInputSchema,
  ProductionPlanUpdateWithWhereUniqueWithoutCreatedByInputSchema: () => ProductionPlanUpdateWithWhereUniqueWithoutCreatedByInputSchema,
  ProductionPlanUpdateWithWhereUniqueWithoutRestaurantInputSchema: () => ProductionPlanUpdateWithWhereUniqueWithoutRestaurantInputSchema,
  ProductionPlanUpdateWithoutCreatedByInputSchema: () => ProductionPlanUpdateWithoutCreatedByInputSchema,
  ProductionPlanUpdateWithoutItemsInputSchema: () => ProductionPlanUpdateWithoutItemsInputSchema,
  ProductionPlanUpdateWithoutRestaurantInputSchema: () => ProductionPlanUpdateWithoutRestaurantInputSchema,
  ProductionPlanUpsertArgsSchema: () => ProductionPlanUpsertArgsSchema,
  ProductionPlanUpsertWithWhereUniqueWithoutCreatedByInputSchema: () => ProductionPlanUpsertWithWhereUniqueWithoutCreatedByInputSchema,
  ProductionPlanUpsertWithWhereUniqueWithoutRestaurantInputSchema: () => ProductionPlanUpsertWithWhereUniqueWithoutRestaurantInputSchema,
  ProductionPlanUpsertWithoutItemsInputSchema: () => ProductionPlanUpsertWithoutItemsInputSchema,
  ProductionPlanWhereInputSchema: () => ProductionPlanWhereInputSchema,
  ProductionPlanWhereUniqueInputSchema: () => ProductionPlanWhereUniqueInputSchema,
  ProductionStatusSchema: () => ProductionStatusSchema,
  QualityChecklistAggregateArgsSchema: () => QualityChecklistAggregateArgsSchema,
  QualityChecklistArgsSchema: () => QualityChecklistArgsSchema,
  QualityChecklistAvgOrderByAggregateInputSchema: () => QualityChecklistAvgOrderByAggregateInputSchema,
  QualityChecklistCountOrderByAggregateInputSchema: () => QualityChecklistCountOrderByAggregateInputSchema,
  QualityChecklistCountOutputTypeArgsSchema: () => QualityChecklistCountOutputTypeArgsSchema,
  QualityChecklistCountOutputTypeSelectSchema: () => QualityChecklistCountOutputTypeSelectSchema,
  QualityChecklistCreateArgsSchema: () => QualityChecklistCreateArgsSchema,
  QualityChecklistCreateInputSchema: () => QualityChecklistCreateInputSchema,
  QualityChecklistCreateManyAndReturnArgsSchema: () => QualityChecklistCreateManyAndReturnArgsSchema,
  QualityChecklistCreateManyArgsSchema: () => QualityChecklistCreateManyArgsSchema,
  QualityChecklistCreateManyInputSchema: () => QualityChecklistCreateManyInputSchema,
  QualityChecklistCreateManyRestaurantInputEnvelopeSchema: () => QualityChecklistCreateManyRestaurantInputEnvelopeSchema,
  QualityChecklistCreateManyRestaurantInputSchema: () => QualityChecklistCreateManyRestaurantInputSchema,
  QualityChecklistCreateNestedManyWithoutRestaurantInputSchema: () => QualityChecklistCreateNestedManyWithoutRestaurantInputSchema,
  QualityChecklistCreateNestedOneWithoutCompletionsInputSchema: () => QualityChecklistCreateNestedOneWithoutCompletionsInputSchema,
  QualityChecklistCreateNestedOneWithoutItemsInputSchema: () => QualityChecklistCreateNestedOneWithoutItemsInputSchema,
  QualityChecklistCreateOrConnectWithoutCompletionsInputSchema: () => QualityChecklistCreateOrConnectWithoutCompletionsInputSchema,
  QualityChecklistCreateOrConnectWithoutItemsInputSchema: () => QualityChecklistCreateOrConnectWithoutItemsInputSchema,
  QualityChecklistCreateOrConnectWithoutRestaurantInputSchema: () => QualityChecklistCreateOrConnectWithoutRestaurantInputSchema,
  QualityChecklistCreateWithoutCompletionsInputSchema: () => QualityChecklistCreateWithoutCompletionsInputSchema,
  QualityChecklistCreateWithoutItemsInputSchema: () => QualityChecklistCreateWithoutItemsInputSchema,
  QualityChecklistCreateWithoutRestaurantInputSchema: () => QualityChecklistCreateWithoutRestaurantInputSchema,
  QualityChecklistDeleteArgsSchema: () => QualityChecklistDeleteArgsSchema,
  QualityChecklistDeleteManyArgsSchema: () => QualityChecklistDeleteManyArgsSchema,
  QualityChecklistFindFirstArgsSchema: () => QualityChecklistFindFirstArgsSchema,
  QualityChecklistFindFirstOrThrowArgsSchema: () => QualityChecklistFindFirstOrThrowArgsSchema,
  QualityChecklistFindManyArgsSchema: () => QualityChecklistFindManyArgsSchema,
  QualityChecklistFindUniqueArgsSchema: () => QualityChecklistFindUniqueArgsSchema,
  QualityChecklistFindUniqueOrThrowArgsSchema: () => QualityChecklistFindUniqueOrThrowArgsSchema,
  QualityChecklistGroupByArgsSchema: () => QualityChecklistGroupByArgsSchema,
  QualityChecklistIncludeSchema: () => QualityChecklistIncludeSchema,
  QualityChecklistListRelationFilterSchema: () => QualityChecklistListRelationFilterSchema,
  QualityChecklistMaxOrderByAggregateInputSchema: () => QualityChecklistMaxOrderByAggregateInputSchema,
  QualityChecklistMinOrderByAggregateInputSchema: () => QualityChecklistMinOrderByAggregateInputSchema,
  QualityChecklistOrderByRelationAggregateInputSchema: () => QualityChecklistOrderByRelationAggregateInputSchema,
  QualityChecklistOrderByWithAggregationInputSchema: () => QualityChecklistOrderByWithAggregationInputSchema,
  QualityChecklistOrderByWithRelationInputSchema: () => QualityChecklistOrderByWithRelationInputSchema,
  QualityChecklistRelationFilterSchema: () => QualityChecklistRelationFilterSchema,
  QualityChecklistScalarFieldEnumSchema: () => QualityChecklistScalarFieldEnumSchema,
  QualityChecklistScalarWhereInputSchema: () => QualityChecklistScalarWhereInputSchema,
  QualityChecklistScalarWhereWithAggregatesInputSchema: () => QualityChecklistScalarWhereWithAggregatesInputSchema,
  QualityChecklistSchema: () => QualityChecklistSchema,
  QualityChecklistSelectSchema: () => QualityChecklistSelectSchema,
  QualityChecklistSumOrderByAggregateInputSchema: () => QualityChecklistSumOrderByAggregateInputSchema,
  QualityChecklistUncheckedCreateInputSchema: () => QualityChecklistUncheckedCreateInputSchema,
  QualityChecklistUncheckedCreateNestedManyWithoutRestaurantInputSchema: () => QualityChecklistUncheckedCreateNestedManyWithoutRestaurantInputSchema,
  QualityChecklistUncheckedCreateWithoutCompletionsInputSchema: () => QualityChecklistUncheckedCreateWithoutCompletionsInputSchema,
  QualityChecklistUncheckedCreateWithoutItemsInputSchema: () => QualityChecklistUncheckedCreateWithoutItemsInputSchema,
  QualityChecklistUncheckedCreateWithoutRestaurantInputSchema: () => QualityChecklistUncheckedCreateWithoutRestaurantInputSchema,
  QualityChecklistUncheckedUpdateInputSchema: () => QualityChecklistUncheckedUpdateInputSchema,
  QualityChecklistUncheckedUpdateManyInputSchema: () => QualityChecklistUncheckedUpdateManyInputSchema,
  QualityChecklistUncheckedUpdateManyWithoutRestaurantInputSchema: () => QualityChecklistUncheckedUpdateManyWithoutRestaurantInputSchema,
  QualityChecklistUncheckedUpdateManyWithoutRestaurantNestedInputSchema: () => QualityChecklistUncheckedUpdateManyWithoutRestaurantNestedInputSchema,
  QualityChecklistUncheckedUpdateWithoutCompletionsInputSchema: () => QualityChecklistUncheckedUpdateWithoutCompletionsInputSchema,
  QualityChecklistUncheckedUpdateWithoutItemsInputSchema: () => QualityChecklistUncheckedUpdateWithoutItemsInputSchema,
  QualityChecklistUncheckedUpdateWithoutRestaurantInputSchema: () => QualityChecklistUncheckedUpdateWithoutRestaurantInputSchema,
  QualityChecklistUpdateArgsSchema: () => QualityChecklistUpdateArgsSchema,
  QualityChecklistUpdateInputSchema: () => QualityChecklistUpdateInputSchema,
  QualityChecklistUpdateManyArgsSchema: () => QualityChecklistUpdateManyArgsSchema,
  QualityChecklistUpdateManyMutationInputSchema: () => QualityChecklistUpdateManyMutationInputSchema,
  QualityChecklistUpdateManyWithWhereWithoutRestaurantInputSchema: () => QualityChecklistUpdateManyWithWhereWithoutRestaurantInputSchema,
  QualityChecklistUpdateManyWithoutRestaurantNestedInputSchema: () => QualityChecklistUpdateManyWithoutRestaurantNestedInputSchema,
  QualityChecklistUpdateOneRequiredWithoutCompletionsNestedInputSchema: () => QualityChecklistUpdateOneRequiredWithoutCompletionsNestedInputSchema,
  QualityChecklistUpdateOneRequiredWithoutItemsNestedInputSchema: () => QualityChecklistUpdateOneRequiredWithoutItemsNestedInputSchema,
  QualityChecklistUpdateToOneWithWhereWithoutCompletionsInputSchema: () => QualityChecklistUpdateToOneWithWhereWithoutCompletionsInputSchema,
  QualityChecklistUpdateToOneWithWhereWithoutItemsInputSchema: () => QualityChecklistUpdateToOneWithWhereWithoutItemsInputSchema,
  QualityChecklistUpdateWithWhereUniqueWithoutRestaurantInputSchema: () => QualityChecklistUpdateWithWhereUniqueWithoutRestaurantInputSchema,
  QualityChecklistUpdateWithoutCompletionsInputSchema: () => QualityChecklistUpdateWithoutCompletionsInputSchema,
  QualityChecklistUpdateWithoutItemsInputSchema: () => QualityChecklistUpdateWithoutItemsInputSchema,
  QualityChecklistUpdateWithoutRestaurantInputSchema: () => QualityChecklistUpdateWithoutRestaurantInputSchema,
  QualityChecklistUpsertArgsSchema: () => QualityChecklistUpsertArgsSchema,
  QualityChecklistUpsertWithWhereUniqueWithoutRestaurantInputSchema: () => QualityChecklistUpsertWithWhereUniqueWithoutRestaurantInputSchema,
  QualityChecklistUpsertWithoutCompletionsInputSchema: () => QualityChecklistUpsertWithoutCompletionsInputSchema,
  QualityChecklistUpsertWithoutItemsInputSchema: () => QualityChecklistUpsertWithoutItemsInputSchema,
  QualityChecklistWhereInputSchema: () => QualityChecklistWhereInputSchema,
  QualityChecklistWhereUniqueInputSchema: () => QualityChecklistWhereUniqueInputSchema,
  QueryModeSchema: () => QueryModeSchema,
  RecipeAggregateArgsSchema: () => RecipeAggregateArgsSchema,
  RecipeArgsSchema: () => RecipeArgsSchema,
  RecipeAvgOrderByAggregateInputSchema: () => RecipeAvgOrderByAggregateInputSchema,
  RecipeCountOrderByAggregateInputSchema: () => RecipeCountOrderByAggregateInputSchema,
  RecipeCountOutputTypeArgsSchema: () => RecipeCountOutputTypeArgsSchema,
  RecipeCountOutputTypeSelectSchema: () => RecipeCountOutputTypeSelectSchema,
  RecipeCreateArgsSchema: () => RecipeCreateArgsSchema,
  RecipeCreateInputSchema: () => RecipeCreateInputSchema,
  RecipeCreateManyAndReturnArgsSchema: () => RecipeCreateManyAndReturnArgsSchema,
  RecipeCreateManyArgsSchema: () => RecipeCreateManyArgsSchema,
  RecipeCreateManyCookBookInputEnvelopeSchema: () => RecipeCreateManyCookBookInputEnvelopeSchema,
  RecipeCreateManyCookBookInputSchema: () => RecipeCreateManyCookBookInputSchema,
  RecipeCreateManyInputSchema: () => RecipeCreateManyInputSchema,
  RecipeCreateManyRestaurantInputEnvelopeSchema: () => RecipeCreateManyRestaurantInputEnvelopeSchema,
  RecipeCreateManyRestaurantInputSchema: () => RecipeCreateManyRestaurantInputSchema,
  RecipeCreateNestedManyWithoutCookBookInputSchema: () => RecipeCreateNestedManyWithoutCookBookInputSchema,
  RecipeCreateNestedManyWithoutDietaryRestrictionsInputSchema: () => RecipeCreateNestedManyWithoutDietaryRestrictionsInputSchema,
  RecipeCreateNestedManyWithoutMenuItemsInputSchema: () => RecipeCreateNestedManyWithoutMenuItemsInputSchema,
  RecipeCreateNestedManyWithoutPrepBoardsInputSchema: () => RecipeCreateNestedManyWithoutPrepBoardsInputSchema,
  RecipeCreateNestedManyWithoutRestaurantInputSchema: () => RecipeCreateNestedManyWithoutRestaurantInputSchema,
  RecipeCreateNestedManyWithoutTagsInputSchema: () => RecipeCreateNestedManyWithoutTagsInputSchema,
  RecipeCreateNestedOneWithoutEquipmentInputSchema: () => RecipeCreateNestedOneWithoutEquipmentInputSchema,
  RecipeCreateNestedOneWithoutFoodCostHistoryInputSchema: () => RecipeCreateNestedOneWithoutFoodCostHistoryInputSchema,
  RecipeCreateNestedOneWithoutIngredientsInputSchema: () => RecipeCreateNestedOneWithoutIngredientsInputSchema,
  RecipeCreateNestedOneWithoutInstructionsInputSchema: () => RecipeCreateNestedOneWithoutInstructionsInputSchema,
  RecipeCreateNestedOneWithoutInventoryWithdrawalInputSchema: () => RecipeCreateNestedOneWithoutInventoryWithdrawalInputSchema,
  RecipeCreateNestedOneWithoutMenuItemRecipeInputSchema: () => RecipeCreateNestedOneWithoutMenuItemRecipeInputSchema,
  RecipeCreateNestedOneWithoutPrepHistoryInputSchema: () => RecipeCreateNestedOneWithoutPrepHistoryInputSchema,
  RecipeCreateNestedOneWithoutPrepItemsInputSchema: () => RecipeCreateNestedOneWithoutPrepItemsInputSchema,
  RecipeCreateNestedOneWithoutProductionPlanItemInputSchema: () => RecipeCreateNestedOneWithoutProductionPlanItemInputSchema,
  RecipeCreateNestedOneWithoutVersionsInputSchema: () => RecipeCreateNestedOneWithoutVersionsInputSchema,
  RecipeCreateOrConnectWithoutCookBookInputSchema: () => RecipeCreateOrConnectWithoutCookBookInputSchema,
  RecipeCreateOrConnectWithoutDietaryRestrictionsInputSchema: () => RecipeCreateOrConnectWithoutDietaryRestrictionsInputSchema,
  RecipeCreateOrConnectWithoutEquipmentInputSchema: () => RecipeCreateOrConnectWithoutEquipmentInputSchema,
  RecipeCreateOrConnectWithoutFoodCostHistoryInputSchema: () => RecipeCreateOrConnectWithoutFoodCostHistoryInputSchema,
  RecipeCreateOrConnectWithoutIngredientsInputSchema: () => RecipeCreateOrConnectWithoutIngredientsInputSchema,
  RecipeCreateOrConnectWithoutInstructionsInputSchema: () => RecipeCreateOrConnectWithoutInstructionsInputSchema,
  RecipeCreateOrConnectWithoutInventoryWithdrawalInputSchema: () => RecipeCreateOrConnectWithoutInventoryWithdrawalInputSchema,
  RecipeCreateOrConnectWithoutMenuItemRecipeInputSchema: () => RecipeCreateOrConnectWithoutMenuItemRecipeInputSchema,
  RecipeCreateOrConnectWithoutMenuItemsInputSchema: () => RecipeCreateOrConnectWithoutMenuItemsInputSchema,
  RecipeCreateOrConnectWithoutPrepBoardsInputSchema: () => RecipeCreateOrConnectWithoutPrepBoardsInputSchema,
  RecipeCreateOrConnectWithoutPrepHistoryInputSchema: () => RecipeCreateOrConnectWithoutPrepHistoryInputSchema,
  RecipeCreateOrConnectWithoutPrepItemsInputSchema: () => RecipeCreateOrConnectWithoutPrepItemsInputSchema,
  RecipeCreateOrConnectWithoutProductionPlanItemInputSchema: () => RecipeCreateOrConnectWithoutProductionPlanItemInputSchema,
  RecipeCreateOrConnectWithoutRestaurantInputSchema: () => RecipeCreateOrConnectWithoutRestaurantInputSchema,
  RecipeCreateOrConnectWithoutTagsInputSchema: () => RecipeCreateOrConnectWithoutTagsInputSchema,
  RecipeCreateOrConnectWithoutVersionsInputSchema: () => RecipeCreateOrConnectWithoutVersionsInputSchema,
  RecipeCreateWithoutCookBookInputSchema: () => RecipeCreateWithoutCookBookInputSchema,
  RecipeCreateWithoutDietaryRestrictionsInputSchema: () => RecipeCreateWithoutDietaryRestrictionsInputSchema,
  RecipeCreateWithoutEquipmentInputSchema: () => RecipeCreateWithoutEquipmentInputSchema,
  RecipeCreateWithoutFoodCostHistoryInputSchema: () => RecipeCreateWithoutFoodCostHistoryInputSchema,
  RecipeCreateWithoutIngredientsInputSchema: () => RecipeCreateWithoutIngredientsInputSchema,
  RecipeCreateWithoutInstructionsInputSchema: () => RecipeCreateWithoutInstructionsInputSchema,
  RecipeCreateWithoutInventoryWithdrawalInputSchema: () => RecipeCreateWithoutInventoryWithdrawalInputSchema,
  RecipeCreateWithoutMenuItemRecipeInputSchema: () => RecipeCreateWithoutMenuItemRecipeInputSchema,
  RecipeCreateWithoutMenuItemsInputSchema: () => RecipeCreateWithoutMenuItemsInputSchema,
  RecipeCreateWithoutPrepBoardsInputSchema: () => RecipeCreateWithoutPrepBoardsInputSchema,
  RecipeCreateWithoutPrepHistoryInputSchema: () => RecipeCreateWithoutPrepHistoryInputSchema,
  RecipeCreateWithoutPrepItemsInputSchema: () => RecipeCreateWithoutPrepItemsInputSchema,
  RecipeCreateWithoutProductionPlanItemInputSchema: () => RecipeCreateWithoutProductionPlanItemInputSchema,
  RecipeCreateWithoutRestaurantInputSchema: () => RecipeCreateWithoutRestaurantInputSchema,
  RecipeCreateWithoutTagsInputSchema: () => RecipeCreateWithoutTagsInputSchema,
  RecipeCreateWithoutVersionsInputSchema: () => RecipeCreateWithoutVersionsInputSchema,
  RecipeCreateimageUrlInputSchema: () => RecipeCreateimageUrlInputSchema,
  RecipeDeleteArgsSchema: () => RecipeDeleteArgsSchema,
  RecipeDeleteManyArgsSchema: () => RecipeDeleteManyArgsSchema,
  RecipeEquipmentAggregateArgsSchema: () => RecipeEquipmentAggregateArgsSchema,
  RecipeEquipmentArgsSchema: () => RecipeEquipmentArgsSchema,
  RecipeEquipmentAvgOrderByAggregateInputSchema: () => RecipeEquipmentAvgOrderByAggregateInputSchema,
  RecipeEquipmentCountOrderByAggregateInputSchema: () => RecipeEquipmentCountOrderByAggregateInputSchema,
  RecipeEquipmentCreateArgsSchema: () => RecipeEquipmentCreateArgsSchema,
  RecipeEquipmentCreateInputSchema: () => RecipeEquipmentCreateInputSchema,
  RecipeEquipmentCreateManyAndReturnArgsSchema: () => RecipeEquipmentCreateManyAndReturnArgsSchema,
  RecipeEquipmentCreateManyArgsSchema: () => RecipeEquipmentCreateManyArgsSchema,
  RecipeEquipmentCreateManyEquipmentInputEnvelopeSchema: () => RecipeEquipmentCreateManyEquipmentInputEnvelopeSchema,
  RecipeEquipmentCreateManyEquipmentInputSchema: () => RecipeEquipmentCreateManyEquipmentInputSchema,
  RecipeEquipmentCreateManyInputSchema: () => RecipeEquipmentCreateManyInputSchema,
  RecipeEquipmentCreateManyRecipeInputEnvelopeSchema: () => RecipeEquipmentCreateManyRecipeInputEnvelopeSchema,
  RecipeEquipmentCreateManyRecipeInputSchema: () => RecipeEquipmentCreateManyRecipeInputSchema,
  RecipeEquipmentCreateNestedManyWithoutEquipmentInputSchema: () => RecipeEquipmentCreateNestedManyWithoutEquipmentInputSchema,
  RecipeEquipmentCreateNestedManyWithoutRecipeInputSchema: () => RecipeEquipmentCreateNestedManyWithoutRecipeInputSchema,
  RecipeEquipmentCreateOrConnectWithoutEquipmentInputSchema: () => RecipeEquipmentCreateOrConnectWithoutEquipmentInputSchema,
  RecipeEquipmentCreateOrConnectWithoutRecipeInputSchema: () => RecipeEquipmentCreateOrConnectWithoutRecipeInputSchema,
  RecipeEquipmentCreateWithoutEquipmentInputSchema: () => RecipeEquipmentCreateWithoutEquipmentInputSchema,
  RecipeEquipmentCreateWithoutRecipeInputSchema: () => RecipeEquipmentCreateWithoutRecipeInputSchema,
  RecipeEquipmentDeleteArgsSchema: () => RecipeEquipmentDeleteArgsSchema,
  RecipeEquipmentDeleteManyArgsSchema: () => RecipeEquipmentDeleteManyArgsSchema,
  RecipeEquipmentFindFirstArgsSchema: () => RecipeEquipmentFindFirstArgsSchema,
  RecipeEquipmentFindFirstOrThrowArgsSchema: () => RecipeEquipmentFindFirstOrThrowArgsSchema,
  RecipeEquipmentFindManyArgsSchema: () => RecipeEquipmentFindManyArgsSchema,
  RecipeEquipmentFindUniqueArgsSchema: () => RecipeEquipmentFindUniqueArgsSchema,
  RecipeEquipmentFindUniqueOrThrowArgsSchema: () => RecipeEquipmentFindUniqueOrThrowArgsSchema,
  RecipeEquipmentGroupByArgsSchema: () => RecipeEquipmentGroupByArgsSchema,
  RecipeEquipmentIncludeSchema: () => RecipeEquipmentIncludeSchema,
  RecipeEquipmentListRelationFilterSchema: () => RecipeEquipmentListRelationFilterSchema,
  RecipeEquipmentMaxOrderByAggregateInputSchema: () => RecipeEquipmentMaxOrderByAggregateInputSchema,
  RecipeEquipmentMinOrderByAggregateInputSchema: () => RecipeEquipmentMinOrderByAggregateInputSchema,
  RecipeEquipmentOrderByRelationAggregateInputSchema: () => RecipeEquipmentOrderByRelationAggregateInputSchema,
  RecipeEquipmentOrderByWithAggregationInputSchema: () => RecipeEquipmentOrderByWithAggregationInputSchema,
  RecipeEquipmentOrderByWithRelationInputSchema: () => RecipeEquipmentOrderByWithRelationInputSchema,
  RecipeEquipmentRecipeIdEquipmentIdCompoundUniqueInputSchema: () => RecipeEquipmentRecipeIdEquipmentIdCompoundUniqueInputSchema,
  RecipeEquipmentScalarFieldEnumSchema: () => RecipeEquipmentScalarFieldEnumSchema,
  RecipeEquipmentScalarWhereInputSchema: () => RecipeEquipmentScalarWhereInputSchema,
  RecipeEquipmentScalarWhereWithAggregatesInputSchema: () => RecipeEquipmentScalarWhereWithAggregatesInputSchema,
  RecipeEquipmentSchema: () => RecipeEquipmentSchema,
  RecipeEquipmentSelectSchema: () => RecipeEquipmentSelectSchema,
  RecipeEquipmentSumOrderByAggregateInputSchema: () => RecipeEquipmentSumOrderByAggregateInputSchema,
  RecipeEquipmentUncheckedCreateInputSchema: () => RecipeEquipmentUncheckedCreateInputSchema,
  RecipeEquipmentUncheckedCreateNestedManyWithoutEquipmentInputSchema: () => RecipeEquipmentUncheckedCreateNestedManyWithoutEquipmentInputSchema,
  RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInputSchema: () => RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInputSchema,
  RecipeEquipmentUncheckedCreateWithoutEquipmentInputSchema: () => RecipeEquipmentUncheckedCreateWithoutEquipmentInputSchema,
  RecipeEquipmentUncheckedCreateWithoutRecipeInputSchema: () => RecipeEquipmentUncheckedCreateWithoutRecipeInputSchema,
  RecipeEquipmentUncheckedUpdateInputSchema: () => RecipeEquipmentUncheckedUpdateInputSchema,
  RecipeEquipmentUncheckedUpdateManyInputSchema: () => RecipeEquipmentUncheckedUpdateManyInputSchema,
  RecipeEquipmentUncheckedUpdateManyWithoutEquipmentInputSchema: () => RecipeEquipmentUncheckedUpdateManyWithoutEquipmentInputSchema,
  RecipeEquipmentUncheckedUpdateManyWithoutEquipmentNestedInputSchema: () => RecipeEquipmentUncheckedUpdateManyWithoutEquipmentNestedInputSchema,
  RecipeEquipmentUncheckedUpdateManyWithoutRecipeInputSchema: () => RecipeEquipmentUncheckedUpdateManyWithoutRecipeInputSchema,
  RecipeEquipmentUncheckedUpdateManyWithoutRecipeNestedInputSchema: () => RecipeEquipmentUncheckedUpdateManyWithoutRecipeNestedInputSchema,
  RecipeEquipmentUncheckedUpdateWithoutEquipmentInputSchema: () => RecipeEquipmentUncheckedUpdateWithoutEquipmentInputSchema,
  RecipeEquipmentUncheckedUpdateWithoutRecipeInputSchema: () => RecipeEquipmentUncheckedUpdateWithoutRecipeInputSchema,
  RecipeEquipmentUpdateArgsSchema: () => RecipeEquipmentUpdateArgsSchema,
  RecipeEquipmentUpdateInputSchema: () => RecipeEquipmentUpdateInputSchema,
  RecipeEquipmentUpdateManyArgsSchema: () => RecipeEquipmentUpdateManyArgsSchema,
  RecipeEquipmentUpdateManyMutationInputSchema: () => RecipeEquipmentUpdateManyMutationInputSchema,
  RecipeEquipmentUpdateManyWithWhereWithoutEquipmentInputSchema: () => RecipeEquipmentUpdateManyWithWhereWithoutEquipmentInputSchema,
  RecipeEquipmentUpdateManyWithWhereWithoutRecipeInputSchema: () => RecipeEquipmentUpdateManyWithWhereWithoutRecipeInputSchema,
  RecipeEquipmentUpdateManyWithoutEquipmentNestedInputSchema: () => RecipeEquipmentUpdateManyWithoutEquipmentNestedInputSchema,
  RecipeEquipmentUpdateManyWithoutRecipeNestedInputSchema: () => RecipeEquipmentUpdateManyWithoutRecipeNestedInputSchema,
  RecipeEquipmentUpdateWithWhereUniqueWithoutEquipmentInputSchema: () => RecipeEquipmentUpdateWithWhereUniqueWithoutEquipmentInputSchema,
  RecipeEquipmentUpdateWithWhereUniqueWithoutRecipeInputSchema: () => RecipeEquipmentUpdateWithWhereUniqueWithoutRecipeInputSchema,
  RecipeEquipmentUpdateWithoutEquipmentInputSchema: () => RecipeEquipmentUpdateWithoutEquipmentInputSchema,
  RecipeEquipmentUpdateWithoutRecipeInputSchema: () => RecipeEquipmentUpdateWithoutRecipeInputSchema,
  RecipeEquipmentUpsertArgsSchema: () => RecipeEquipmentUpsertArgsSchema,
  RecipeEquipmentUpsertWithWhereUniqueWithoutEquipmentInputSchema: () => RecipeEquipmentUpsertWithWhereUniqueWithoutEquipmentInputSchema,
  RecipeEquipmentUpsertWithWhereUniqueWithoutRecipeInputSchema: () => RecipeEquipmentUpsertWithWhereUniqueWithoutRecipeInputSchema,
  RecipeEquipmentWhereInputSchema: () => RecipeEquipmentWhereInputSchema,
  RecipeEquipmentWhereUniqueInputSchema: () => RecipeEquipmentWhereUniqueInputSchema,
  RecipeFindFirstArgsSchema: () => RecipeFindFirstArgsSchema,
  RecipeFindFirstOrThrowArgsSchema: () => RecipeFindFirstOrThrowArgsSchema,
  RecipeFindManyArgsSchema: () => RecipeFindManyArgsSchema,
  RecipeFindUniqueArgsSchema: () => RecipeFindUniqueArgsSchema,
  RecipeFindUniqueOrThrowArgsSchema: () => RecipeFindUniqueOrThrowArgsSchema,
  RecipeGroupByArgsSchema: () => RecipeGroupByArgsSchema,
  RecipeIncludeSchema: () => RecipeIncludeSchema,
  RecipeIngredientAggregateArgsSchema: () => RecipeIngredientAggregateArgsSchema,
  RecipeIngredientArgsSchema: () => RecipeIngredientArgsSchema,
  RecipeIngredientAvgOrderByAggregateInputSchema: () => RecipeIngredientAvgOrderByAggregateInputSchema,
  RecipeIngredientCountOrderByAggregateInputSchema: () => RecipeIngredientCountOrderByAggregateInputSchema,
  RecipeIngredientCreateArgsSchema: () => RecipeIngredientCreateArgsSchema,
  RecipeIngredientCreateInputSchema: () => RecipeIngredientCreateInputSchema,
  RecipeIngredientCreateManyAndReturnArgsSchema: () => RecipeIngredientCreateManyAndReturnArgsSchema,
  RecipeIngredientCreateManyArgsSchema: () => RecipeIngredientCreateManyArgsSchema,
  RecipeIngredientCreateManyIngredientInputEnvelopeSchema: () => RecipeIngredientCreateManyIngredientInputEnvelopeSchema,
  RecipeIngredientCreateManyIngredientInputSchema: () => RecipeIngredientCreateManyIngredientInputSchema,
  RecipeIngredientCreateManyInputSchema: () => RecipeIngredientCreateManyInputSchema,
  RecipeIngredientCreateManyRecipeInputEnvelopeSchema: () => RecipeIngredientCreateManyRecipeInputEnvelopeSchema,
  RecipeIngredientCreateManyRecipeInputSchema: () => RecipeIngredientCreateManyRecipeInputSchema,
  RecipeIngredientCreateManyRecipeVersionInputEnvelopeSchema: () => RecipeIngredientCreateManyRecipeVersionInputEnvelopeSchema,
  RecipeIngredientCreateManyRecipeVersionInputSchema: () => RecipeIngredientCreateManyRecipeVersionInputSchema,
  RecipeIngredientCreateNestedManyWithoutIngredientInputSchema: () => RecipeIngredientCreateNestedManyWithoutIngredientInputSchema,
  RecipeIngredientCreateNestedManyWithoutRecipeInputSchema: () => RecipeIngredientCreateNestedManyWithoutRecipeInputSchema,
  RecipeIngredientCreateNestedManyWithoutRecipeVersionInputSchema: () => RecipeIngredientCreateNestedManyWithoutRecipeVersionInputSchema,
  RecipeIngredientCreateOrConnectWithoutIngredientInputSchema: () => RecipeIngredientCreateOrConnectWithoutIngredientInputSchema,
  RecipeIngredientCreateOrConnectWithoutRecipeInputSchema: () => RecipeIngredientCreateOrConnectWithoutRecipeInputSchema,
  RecipeIngredientCreateOrConnectWithoutRecipeVersionInputSchema: () => RecipeIngredientCreateOrConnectWithoutRecipeVersionInputSchema,
  RecipeIngredientCreateWithoutIngredientInputSchema: () => RecipeIngredientCreateWithoutIngredientInputSchema,
  RecipeIngredientCreateWithoutRecipeInputSchema: () => RecipeIngredientCreateWithoutRecipeInputSchema,
  RecipeIngredientCreateWithoutRecipeVersionInputSchema: () => RecipeIngredientCreateWithoutRecipeVersionInputSchema,
  RecipeIngredientDeleteArgsSchema: () => RecipeIngredientDeleteArgsSchema,
  RecipeIngredientDeleteManyArgsSchema: () => RecipeIngredientDeleteManyArgsSchema,
  RecipeIngredientFindFirstArgsSchema: () => RecipeIngredientFindFirstArgsSchema,
  RecipeIngredientFindFirstOrThrowArgsSchema: () => RecipeIngredientFindFirstOrThrowArgsSchema,
  RecipeIngredientFindManyArgsSchema: () => RecipeIngredientFindManyArgsSchema,
  RecipeIngredientFindUniqueArgsSchema: () => RecipeIngredientFindUniqueArgsSchema,
  RecipeIngredientFindUniqueOrThrowArgsSchema: () => RecipeIngredientFindUniqueOrThrowArgsSchema,
  RecipeIngredientGroupByArgsSchema: () => RecipeIngredientGroupByArgsSchema,
  RecipeIngredientIncludeSchema: () => RecipeIngredientIncludeSchema,
  RecipeIngredientListRelationFilterSchema: () => RecipeIngredientListRelationFilterSchema,
  RecipeIngredientMaxOrderByAggregateInputSchema: () => RecipeIngredientMaxOrderByAggregateInputSchema,
  RecipeIngredientMinOrderByAggregateInputSchema: () => RecipeIngredientMinOrderByAggregateInputSchema,
  RecipeIngredientOrderByRelationAggregateInputSchema: () => RecipeIngredientOrderByRelationAggregateInputSchema,
  RecipeIngredientOrderByWithAggregationInputSchema: () => RecipeIngredientOrderByWithAggregationInputSchema,
  RecipeIngredientOrderByWithRelationInputSchema: () => RecipeIngredientOrderByWithRelationInputSchema,
  RecipeIngredientRecipeIdIngredientIdCompoundUniqueInputSchema: () => RecipeIngredientRecipeIdIngredientIdCompoundUniqueInputSchema,
  RecipeIngredientScalarFieldEnumSchema: () => RecipeIngredientScalarFieldEnumSchema,
  RecipeIngredientScalarWhereInputSchema: () => RecipeIngredientScalarWhereInputSchema,
  RecipeIngredientScalarWhereWithAggregatesInputSchema: () => RecipeIngredientScalarWhereWithAggregatesInputSchema,
  RecipeIngredientSchema: () => RecipeIngredientSchema,
  RecipeIngredientSelectSchema: () => RecipeIngredientSelectSchema,
  RecipeIngredientSumOrderByAggregateInputSchema: () => RecipeIngredientSumOrderByAggregateInputSchema,
  RecipeIngredientUncheckedCreateInputSchema: () => RecipeIngredientUncheckedCreateInputSchema,
  RecipeIngredientUncheckedCreateNestedManyWithoutIngredientInputSchema: () => RecipeIngredientUncheckedCreateNestedManyWithoutIngredientInputSchema,
  RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInputSchema: () => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInputSchema,
  RecipeIngredientUncheckedCreateNestedManyWithoutRecipeVersionInputSchema: () => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeVersionInputSchema,
  RecipeIngredientUncheckedCreateWithoutIngredientInputSchema: () => RecipeIngredientUncheckedCreateWithoutIngredientInputSchema,
  RecipeIngredientUncheckedCreateWithoutRecipeInputSchema: () => RecipeIngredientUncheckedCreateWithoutRecipeInputSchema,
  RecipeIngredientUncheckedCreateWithoutRecipeVersionInputSchema: () => RecipeIngredientUncheckedCreateWithoutRecipeVersionInputSchema,
  RecipeIngredientUncheckedUpdateInputSchema: () => RecipeIngredientUncheckedUpdateInputSchema,
  RecipeIngredientUncheckedUpdateManyInputSchema: () => RecipeIngredientUncheckedUpdateManyInputSchema,
  RecipeIngredientUncheckedUpdateManyWithoutIngredientInputSchema: () => RecipeIngredientUncheckedUpdateManyWithoutIngredientInputSchema,
  RecipeIngredientUncheckedUpdateManyWithoutIngredientNestedInputSchema: () => RecipeIngredientUncheckedUpdateManyWithoutIngredientNestedInputSchema,
  RecipeIngredientUncheckedUpdateManyWithoutRecipeInputSchema: () => RecipeIngredientUncheckedUpdateManyWithoutRecipeInputSchema,
  RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInputSchema: () => RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInputSchema,
  RecipeIngredientUncheckedUpdateManyWithoutRecipeVersionInputSchema: () => RecipeIngredientUncheckedUpdateManyWithoutRecipeVersionInputSchema,
  RecipeIngredientUncheckedUpdateManyWithoutRecipeVersionNestedInputSchema: () => RecipeIngredientUncheckedUpdateManyWithoutRecipeVersionNestedInputSchema,
  RecipeIngredientUncheckedUpdateWithoutIngredientInputSchema: () => RecipeIngredientUncheckedUpdateWithoutIngredientInputSchema,
  RecipeIngredientUncheckedUpdateWithoutRecipeInputSchema: () => RecipeIngredientUncheckedUpdateWithoutRecipeInputSchema,
  RecipeIngredientUncheckedUpdateWithoutRecipeVersionInputSchema: () => RecipeIngredientUncheckedUpdateWithoutRecipeVersionInputSchema,
  RecipeIngredientUpdateArgsSchema: () => RecipeIngredientUpdateArgsSchema,
  RecipeIngredientUpdateInputSchema: () => RecipeIngredientUpdateInputSchema,
  RecipeIngredientUpdateManyArgsSchema: () => RecipeIngredientUpdateManyArgsSchema,
  RecipeIngredientUpdateManyMutationInputSchema: () => RecipeIngredientUpdateManyMutationInputSchema,
  RecipeIngredientUpdateManyWithWhereWithoutIngredientInputSchema: () => RecipeIngredientUpdateManyWithWhereWithoutIngredientInputSchema,
  RecipeIngredientUpdateManyWithWhereWithoutRecipeInputSchema: () => RecipeIngredientUpdateManyWithWhereWithoutRecipeInputSchema,
  RecipeIngredientUpdateManyWithWhereWithoutRecipeVersionInputSchema: () => RecipeIngredientUpdateManyWithWhereWithoutRecipeVersionInputSchema,
  RecipeIngredientUpdateManyWithoutIngredientNestedInputSchema: () => RecipeIngredientUpdateManyWithoutIngredientNestedInputSchema,
  RecipeIngredientUpdateManyWithoutRecipeNestedInputSchema: () => RecipeIngredientUpdateManyWithoutRecipeNestedInputSchema,
  RecipeIngredientUpdateManyWithoutRecipeVersionNestedInputSchema: () => RecipeIngredientUpdateManyWithoutRecipeVersionNestedInputSchema,
  RecipeIngredientUpdateWithWhereUniqueWithoutIngredientInputSchema: () => RecipeIngredientUpdateWithWhereUniqueWithoutIngredientInputSchema,
  RecipeIngredientUpdateWithWhereUniqueWithoutRecipeInputSchema: () => RecipeIngredientUpdateWithWhereUniqueWithoutRecipeInputSchema,
  RecipeIngredientUpdateWithWhereUniqueWithoutRecipeVersionInputSchema: () => RecipeIngredientUpdateWithWhereUniqueWithoutRecipeVersionInputSchema,
  RecipeIngredientUpdateWithoutIngredientInputSchema: () => RecipeIngredientUpdateWithoutIngredientInputSchema,
  RecipeIngredientUpdateWithoutRecipeInputSchema: () => RecipeIngredientUpdateWithoutRecipeInputSchema,
  RecipeIngredientUpdateWithoutRecipeVersionInputSchema: () => RecipeIngredientUpdateWithoutRecipeVersionInputSchema,
  RecipeIngredientUpsertArgsSchema: () => RecipeIngredientUpsertArgsSchema,
  RecipeIngredientUpsertWithWhereUniqueWithoutIngredientInputSchema: () => RecipeIngredientUpsertWithWhereUniqueWithoutIngredientInputSchema,
  RecipeIngredientUpsertWithWhereUniqueWithoutRecipeInputSchema: () => RecipeIngredientUpsertWithWhereUniqueWithoutRecipeInputSchema,
  RecipeIngredientUpsertWithWhereUniqueWithoutRecipeVersionInputSchema: () => RecipeIngredientUpsertWithWhereUniqueWithoutRecipeVersionInputSchema,
  RecipeIngredientWhereInputSchema: () => RecipeIngredientWhereInputSchema,
  RecipeIngredientWhereUniqueInputSchema: () => RecipeIngredientWhereUniqueInputSchema,
  RecipeInstructionAggregateArgsSchema: () => RecipeInstructionAggregateArgsSchema,
  RecipeInstructionArgsSchema: () => RecipeInstructionArgsSchema,
  RecipeInstructionAvgOrderByAggregateInputSchema: () => RecipeInstructionAvgOrderByAggregateInputSchema,
  RecipeInstructionCountOrderByAggregateInputSchema: () => RecipeInstructionCountOrderByAggregateInputSchema,
  RecipeInstructionCreateArgsSchema: () => RecipeInstructionCreateArgsSchema,
  RecipeInstructionCreateInputSchema: () => RecipeInstructionCreateInputSchema,
  RecipeInstructionCreateManyAndReturnArgsSchema: () => RecipeInstructionCreateManyAndReturnArgsSchema,
  RecipeInstructionCreateManyArgsSchema: () => RecipeInstructionCreateManyArgsSchema,
  RecipeInstructionCreateManyInputSchema: () => RecipeInstructionCreateManyInputSchema,
  RecipeInstructionCreateManyRecipeInputEnvelopeSchema: () => RecipeInstructionCreateManyRecipeInputEnvelopeSchema,
  RecipeInstructionCreateManyRecipeInputSchema: () => RecipeInstructionCreateManyRecipeInputSchema,
  RecipeInstructionCreateManyRecipeVersionInputEnvelopeSchema: () => RecipeInstructionCreateManyRecipeVersionInputEnvelopeSchema,
  RecipeInstructionCreateManyRecipeVersionInputSchema: () => RecipeInstructionCreateManyRecipeVersionInputSchema,
  RecipeInstructionCreateNestedManyWithoutRecipeInputSchema: () => RecipeInstructionCreateNestedManyWithoutRecipeInputSchema,
  RecipeInstructionCreateNestedManyWithoutRecipeVersionInputSchema: () => RecipeInstructionCreateNestedManyWithoutRecipeVersionInputSchema,
  RecipeInstructionCreateOrConnectWithoutRecipeInputSchema: () => RecipeInstructionCreateOrConnectWithoutRecipeInputSchema,
  RecipeInstructionCreateOrConnectWithoutRecipeVersionInputSchema: () => RecipeInstructionCreateOrConnectWithoutRecipeVersionInputSchema,
  RecipeInstructionCreateWithoutRecipeInputSchema: () => RecipeInstructionCreateWithoutRecipeInputSchema,
  RecipeInstructionCreateWithoutRecipeVersionInputSchema: () => RecipeInstructionCreateWithoutRecipeVersionInputSchema,
  RecipeInstructionDeleteArgsSchema: () => RecipeInstructionDeleteArgsSchema,
  RecipeInstructionDeleteManyArgsSchema: () => RecipeInstructionDeleteManyArgsSchema,
  RecipeInstructionFindFirstArgsSchema: () => RecipeInstructionFindFirstArgsSchema,
  RecipeInstructionFindFirstOrThrowArgsSchema: () => RecipeInstructionFindFirstOrThrowArgsSchema,
  RecipeInstructionFindManyArgsSchema: () => RecipeInstructionFindManyArgsSchema,
  RecipeInstructionFindUniqueArgsSchema: () => RecipeInstructionFindUniqueArgsSchema,
  RecipeInstructionFindUniqueOrThrowArgsSchema: () => RecipeInstructionFindUniqueOrThrowArgsSchema,
  RecipeInstructionGroupByArgsSchema: () => RecipeInstructionGroupByArgsSchema,
  RecipeInstructionIncludeSchema: () => RecipeInstructionIncludeSchema,
  RecipeInstructionListRelationFilterSchema: () => RecipeInstructionListRelationFilterSchema,
  RecipeInstructionMaxOrderByAggregateInputSchema: () => RecipeInstructionMaxOrderByAggregateInputSchema,
  RecipeInstructionMinOrderByAggregateInputSchema: () => RecipeInstructionMinOrderByAggregateInputSchema,
  RecipeInstructionOrderByRelationAggregateInputSchema: () => RecipeInstructionOrderByRelationAggregateInputSchema,
  RecipeInstructionOrderByWithAggregationInputSchema: () => RecipeInstructionOrderByWithAggregationInputSchema,
  RecipeInstructionOrderByWithRelationInputSchema: () => RecipeInstructionOrderByWithRelationInputSchema,
  RecipeInstructionRecipeIdStepNumberCompoundUniqueInputSchema: () => RecipeInstructionRecipeIdStepNumberCompoundUniqueInputSchema,
  RecipeInstructionScalarFieldEnumSchema: () => RecipeInstructionScalarFieldEnumSchema,
  RecipeInstructionScalarWhereInputSchema: () => RecipeInstructionScalarWhereInputSchema,
  RecipeInstructionScalarWhereWithAggregatesInputSchema: () => RecipeInstructionScalarWhereWithAggregatesInputSchema,
  RecipeInstructionSchema: () => RecipeInstructionSchema,
  RecipeInstructionSelectSchema: () => RecipeInstructionSelectSchema,
  RecipeInstructionSumOrderByAggregateInputSchema: () => RecipeInstructionSumOrderByAggregateInputSchema,
  RecipeInstructionUncheckedCreateInputSchema: () => RecipeInstructionUncheckedCreateInputSchema,
  RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInputSchema: () => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInputSchema,
  RecipeInstructionUncheckedCreateNestedManyWithoutRecipeVersionInputSchema: () => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeVersionInputSchema,
  RecipeInstructionUncheckedCreateWithoutRecipeInputSchema: () => RecipeInstructionUncheckedCreateWithoutRecipeInputSchema,
  RecipeInstructionUncheckedCreateWithoutRecipeVersionInputSchema: () => RecipeInstructionUncheckedCreateWithoutRecipeVersionInputSchema,
  RecipeInstructionUncheckedUpdateInputSchema: () => RecipeInstructionUncheckedUpdateInputSchema,
  RecipeInstructionUncheckedUpdateManyInputSchema: () => RecipeInstructionUncheckedUpdateManyInputSchema,
  RecipeInstructionUncheckedUpdateManyWithoutRecipeInputSchema: () => RecipeInstructionUncheckedUpdateManyWithoutRecipeInputSchema,
  RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInputSchema: () => RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInputSchema,
  RecipeInstructionUncheckedUpdateManyWithoutRecipeVersionInputSchema: () => RecipeInstructionUncheckedUpdateManyWithoutRecipeVersionInputSchema,
  RecipeInstructionUncheckedUpdateManyWithoutRecipeVersionNestedInputSchema: () => RecipeInstructionUncheckedUpdateManyWithoutRecipeVersionNestedInputSchema,
  RecipeInstructionUncheckedUpdateWithoutRecipeInputSchema: () => RecipeInstructionUncheckedUpdateWithoutRecipeInputSchema,
  RecipeInstructionUncheckedUpdateWithoutRecipeVersionInputSchema: () => RecipeInstructionUncheckedUpdateWithoutRecipeVersionInputSchema,
  RecipeInstructionUpdateArgsSchema: () => RecipeInstructionUpdateArgsSchema,
  RecipeInstructionUpdateInputSchema: () => RecipeInstructionUpdateInputSchema,
  RecipeInstructionUpdateManyArgsSchema: () => RecipeInstructionUpdateManyArgsSchema,
  RecipeInstructionUpdateManyMutationInputSchema: () => RecipeInstructionUpdateManyMutationInputSchema,
  RecipeInstructionUpdateManyWithWhereWithoutRecipeInputSchema: () => RecipeInstructionUpdateManyWithWhereWithoutRecipeInputSchema,
  RecipeInstructionUpdateManyWithWhereWithoutRecipeVersionInputSchema: () => RecipeInstructionUpdateManyWithWhereWithoutRecipeVersionInputSchema,
  RecipeInstructionUpdateManyWithoutRecipeNestedInputSchema: () => RecipeInstructionUpdateManyWithoutRecipeNestedInputSchema,
  RecipeInstructionUpdateManyWithoutRecipeVersionNestedInputSchema: () => RecipeInstructionUpdateManyWithoutRecipeVersionNestedInputSchema,
  RecipeInstructionUpdateWithWhereUniqueWithoutRecipeInputSchema: () => RecipeInstructionUpdateWithWhereUniqueWithoutRecipeInputSchema,
  RecipeInstructionUpdateWithWhereUniqueWithoutRecipeVersionInputSchema: () => RecipeInstructionUpdateWithWhereUniqueWithoutRecipeVersionInputSchema,
  RecipeInstructionUpdateWithoutRecipeInputSchema: () => RecipeInstructionUpdateWithoutRecipeInputSchema,
  RecipeInstructionUpdateWithoutRecipeVersionInputSchema: () => RecipeInstructionUpdateWithoutRecipeVersionInputSchema,
  RecipeInstructionUpsertArgsSchema: () => RecipeInstructionUpsertArgsSchema,
  RecipeInstructionUpsertWithWhereUniqueWithoutRecipeInputSchema: () => RecipeInstructionUpsertWithWhereUniqueWithoutRecipeInputSchema,
  RecipeInstructionUpsertWithWhereUniqueWithoutRecipeVersionInputSchema: () => RecipeInstructionUpsertWithWhereUniqueWithoutRecipeVersionInputSchema,
  RecipeInstructionWhereInputSchema: () => RecipeInstructionWhereInputSchema,
  RecipeInstructionWhereUniqueInputSchema: () => RecipeInstructionWhereUniqueInputSchema,
  RecipeListRelationFilterSchema: () => RecipeListRelationFilterSchema,
  RecipeMaxOrderByAggregateInputSchema: () => RecipeMaxOrderByAggregateInputSchema,
  RecipeMinOrderByAggregateInputSchema: () => RecipeMinOrderByAggregateInputSchema,
  RecipeNullableRelationFilterSchema: () => RecipeNullableRelationFilterSchema,
  RecipeOrderByRelationAggregateInputSchema: () => RecipeOrderByRelationAggregateInputSchema,
  RecipeOrderByWithAggregationInputSchema: () => RecipeOrderByWithAggregationInputSchema,
  RecipeOrderByWithRelationInputSchema: () => RecipeOrderByWithRelationInputSchema,
  RecipeRelationFilterSchema: () => RecipeRelationFilterSchema,
  RecipeScalarFieldEnumSchema: () => RecipeScalarFieldEnumSchema,
  RecipeScalarWhereInputSchema: () => RecipeScalarWhereInputSchema,
  RecipeScalarWhereWithAggregatesInputSchema: () => RecipeScalarWhereWithAggregatesInputSchema,
  RecipeSchema: () => RecipeSchema,
  RecipeSelectSchema: () => RecipeSelectSchema,
  RecipeSumOrderByAggregateInputSchema: () => RecipeSumOrderByAggregateInputSchema,
  RecipeTagAggregateArgsSchema: () => RecipeTagAggregateArgsSchema,
  RecipeTagArgsSchema: () => RecipeTagArgsSchema,
  RecipeTagAvgOrderByAggregateInputSchema: () => RecipeTagAvgOrderByAggregateInputSchema,
  RecipeTagCountOrderByAggregateInputSchema: () => RecipeTagCountOrderByAggregateInputSchema,
  RecipeTagCountOutputTypeArgsSchema: () => RecipeTagCountOutputTypeArgsSchema,
  RecipeTagCountOutputTypeSelectSchema: () => RecipeTagCountOutputTypeSelectSchema,
  RecipeTagCreateArgsSchema: () => RecipeTagCreateArgsSchema,
  RecipeTagCreateInputSchema: () => RecipeTagCreateInputSchema,
  RecipeTagCreateManyAndReturnArgsSchema: () => RecipeTagCreateManyAndReturnArgsSchema,
  RecipeTagCreateManyArgsSchema: () => RecipeTagCreateManyArgsSchema,
  RecipeTagCreateManyInputSchema: () => RecipeTagCreateManyInputSchema,
  RecipeTagCreateNestedManyWithoutRecipesInputSchema: () => RecipeTagCreateNestedManyWithoutRecipesInputSchema,
  RecipeTagCreateOrConnectWithoutRecipesInputSchema: () => RecipeTagCreateOrConnectWithoutRecipesInputSchema,
  RecipeTagCreateWithoutRecipesInputSchema: () => RecipeTagCreateWithoutRecipesInputSchema,
  RecipeTagDeleteArgsSchema: () => RecipeTagDeleteArgsSchema,
  RecipeTagDeleteManyArgsSchema: () => RecipeTagDeleteManyArgsSchema,
  RecipeTagFindFirstArgsSchema: () => RecipeTagFindFirstArgsSchema,
  RecipeTagFindFirstOrThrowArgsSchema: () => RecipeTagFindFirstOrThrowArgsSchema,
  RecipeTagFindManyArgsSchema: () => RecipeTagFindManyArgsSchema,
  RecipeTagFindUniqueArgsSchema: () => RecipeTagFindUniqueArgsSchema,
  RecipeTagFindUniqueOrThrowArgsSchema: () => RecipeTagFindUniqueOrThrowArgsSchema,
  RecipeTagGroupByArgsSchema: () => RecipeTagGroupByArgsSchema,
  RecipeTagIncludeSchema: () => RecipeTagIncludeSchema,
  RecipeTagListRelationFilterSchema: () => RecipeTagListRelationFilterSchema,
  RecipeTagMaxOrderByAggregateInputSchema: () => RecipeTagMaxOrderByAggregateInputSchema,
  RecipeTagMinOrderByAggregateInputSchema: () => RecipeTagMinOrderByAggregateInputSchema,
  RecipeTagOrderByRelationAggregateInputSchema: () => RecipeTagOrderByRelationAggregateInputSchema,
  RecipeTagOrderByWithAggregationInputSchema: () => RecipeTagOrderByWithAggregationInputSchema,
  RecipeTagOrderByWithRelationInputSchema: () => RecipeTagOrderByWithRelationInputSchema,
  RecipeTagScalarFieldEnumSchema: () => RecipeTagScalarFieldEnumSchema,
  RecipeTagScalarWhereInputSchema: () => RecipeTagScalarWhereInputSchema,
  RecipeTagScalarWhereWithAggregatesInputSchema: () => RecipeTagScalarWhereWithAggregatesInputSchema,
  RecipeTagSchema: () => RecipeTagSchema,
  RecipeTagSelectSchema: () => RecipeTagSelectSchema,
  RecipeTagSumOrderByAggregateInputSchema: () => RecipeTagSumOrderByAggregateInputSchema,
  RecipeTagUncheckedCreateInputSchema: () => RecipeTagUncheckedCreateInputSchema,
  RecipeTagUncheckedCreateNestedManyWithoutRecipesInputSchema: () => RecipeTagUncheckedCreateNestedManyWithoutRecipesInputSchema,
  RecipeTagUncheckedCreateWithoutRecipesInputSchema: () => RecipeTagUncheckedCreateWithoutRecipesInputSchema,
  RecipeTagUncheckedUpdateInputSchema: () => RecipeTagUncheckedUpdateInputSchema,
  RecipeTagUncheckedUpdateManyInputSchema: () => RecipeTagUncheckedUpdateManyInputSchema,
  RecipeTagUncheckedUpdateManyWithoutRecipesInputSchema: () => RecipeTagUncheckedUpdateManyWithoutRecipesInputSchema,
  RecipeTagUncheckedUpdateManyWithoutRecipesNestedInputSchema: () => RecipeTagUncheckedUpdateManyWithoutRecipesNestedInputSchema,
  RecipeTagUncheckedUpdateWithoutRecipesInputSchema: () => RecipeTagUncheckedUpdateWithoutRecipesInputSchema,
  RecipeTagUpdateArgsSchema: () => RecipeTagUpdateArgsSchema,
  RecipeTagUpdateInputSchema: () => RecipeTagUpdateInputSchema,
  RecipeTagUpdateManyArgsSchema: () => RecipeTagUpdateManyArgsSchema,
  RecipeTagUpdateManyMutationInputSchema: () => RecipeTagUpdateManyMutationInputSchema,
  RecipeTagUpdateManyWithWhereWithoutRecipesInputSchema: () => RecipeTagUpdateManyWithWhereWithoutRecipesInputSchema,
  RecipeTagUpdateManyWithoutRecipesNestedInputSchema: () => RecipeTagUpdateManyWithoutRecipesNestedInputSchema,
  RecipeTagUpdateWithWhereUniqueWithoutRecipesInputSchema: () => RecipeTagUpdateWithWhereUniqueWithoutRecipesInputSchema,
  RecipeTagUpdateWithoutRecipesInputSchema: () => RecipeTagUpdateWithoutRecipesInputSchema,
  RecipeTagUpsertArgsSchema: () => RecipeTagUpsertArgsSchema,
  RecipeTagUpsertWithWhereUniqueWithoutRecipesInputSchema: () => RecipeTagUpsertWithWhereUniqueWithoutRecipesInputSchema,
  RecipeTagWhereInputSchema: () => RecipeTagWhereInputSchema,
  RecipeTagWhereUniqueInputSchema: () => RecipeTagWhereUniqueInputSchema,
  RecipeUncheckedCreateInputSchema: () => RecipeUncheckedCreateInputSchema,
  RecipeUncheckedCreateNestedManyWithoutCookBookInputSchema: () => RecipeUncheckedCreateNestedManyWithoutCookBookInputSchema,
  RecipeUncheckedCreateNestedManyWithoutDietaryRestrictionsInputSchema: () => RecipeUncheckedCreateNestedManyWithoutDietaryRestrictionsInputSchema,
  RecipeUncheckedCreateNestedManyWithoutMenuItemsInputSchema: () => RecipeUncheckedCreateNestedManyWithoutMenuItemsInputSchema,
  RecipeUncheckedCreateNestedManyWithoutPrepBoardsInputSchema: () => RecipeUncheckedCreateNestedManyWithoutPrepBoardsInputSchema,
  RecipeUncheckedCreateNestedManyWithoutRestaurantInputSchema: () => RecipeUncheckedCreateNestedManyWithoutRestaurantInputSchema,
  RecipeUncheckedCreateNestedManyWithoutTagsInputSchema: () => RecipeUncheckedCreateNestedManyWithoutTagsInputSchema,
  RecipeUncheckedCreateWithoutCookBookInputSchema: () => RecipeUncheckedCreateWithoutCookBookInputSchema,
  RecipeUncheckedCreateWithoutDietaryRestrictionsInputSchema: () => RecipeUncheckedCreateWithoutDietaryRestrictionsInputSchema,
  RecipeUncheckedCreateWithoutEquipmentInputSchema: () => RecipeUncheckedCreateWithoutEquipmentInputSchema,
  RecipeUncheckedCreateWithoutFoodCostHistoryInputSchema: () => RecipeUncheckedCreateWithoutFoodCostHistoryInputSchema,
  RecipeUncheckedCreateWithoutIngredientsInputSchema: () => RecipeUncheckedCreateWithoutIngredientsInputSchema,
  RecipeUncheckedCreateWithoutInstructionsInputSchema: () => RecipeUncheckedCreateWithoutInstructionsInputSchema,
  RecipeUncheckedCreateWithoutInventoryWithdrawalInputSchema: () => RecipeUncheckedCreateWithoutInventoryWithdrawalInputSchema,
  RecipeUncheckedCreateWithoutMenuItemRecipeInputSchema: () => RecipeUncheckedCreateWithoutMenuItemRecipeInputSchema,
  RecipeUncheckedCreateWithoutMenuItemsInputSchema: () => RecipeUncheckedCreateWithoutMenuItemsInputSchema,
  RecipeUncheckedCreateWithoutPrepBoardsInputSchema: () => RecipeUncheckedCreateWithoutPrepBoardsInputSchema,
  RecipeUncheckedCreateWithoutPrepHistoryInputSchema: () => RecipeUncheckedCreateWithoutPrepHistoryInputSchema,
  RecipeUncheckedCreateWithoutPrepItemsInputSchema: () => RecipeUncheckedCreateWithoutPrepItemsInputSchema,
  RecipeUncheckedCreateWithoutProductionPlanItemInputSchema: () => RecipeUncheckedCreateWithoutProductionPlanItemInputSchema,
  RecipeUncheckedCreateWithoutRestaurantInputSchema: () => RecipeUncheckedCreateWithoutRestaurantInputSchema,
  RecipeUncheckedCreateWithoutTagsInputSchema: () => RecipeUncheckedCreateWithoutTagsInputSchema,
  RecipeUncheckedCreateWithoutVersionsInputSchema: () => RecipeUncheckedCreateWithoutVersionsInputSchema,
  RecipeUncheckedUpdateInputSchema: () => RecipeUncheckedUpdateInputSchema,
  RecipeUncheckedUpdateManyInputSchema: () => RecipeUncheckedUpdateManyInputSchema,
  RecipeUncheckedUpdateManyWithoutCookBookInputSchema: () => RecipeUncheckedUpdateManyWithoutCookBookInputSchema,
  RecipeUncheckedUpdateManyWithoutCookBookNestedInputSchema: () => RecipeUncheckedUpdateManyWithoutCookBookNestedInputSchema,
  RecipeUncheckedUpdateManyWithoutDietaryRestrictionsInputSchema: () => RecipeUncheckedUpdateManyWithoutDietaryRestrictionsInputSchema,
  RecipeUncheckedUpdateManyWithoutDietaryRestrictionsNestedInputSchema: () => RecipeUncheckedUpdateManyWithoutDietaryRestrictionsNestedInputSchema,
  RecipeUncheckedUpdateManyWithoutMenuItemsInputSchema: () => RecipeUncheckedUpdateManyWithoutMenuItemsInputSchema,
  RecipeUncheckedUpdateManyWithoutMenuItemsNestedInputSchema: () => RecipeUncheckedUpdateManyWithoutMenuItemsNestedInputSchema,
  RecipeUncheckedUpdateManyWithoutPrepBoardsInputSchema: () => RecipeUncheckedUpdateManyWithoutPrepBoardsInputSchema,
  RecipeUncheckedUpdateManyWithoutPrepBoardsNestedInputSchema: () => RecipeUncheckedUpdateManyWithoutPrepBoardsNestedInputSchema,
  RecipeUncheckedUpdateManyWithoutRestaurantInputSchema: () => RecipeUncheckedUpdateManyWithoutRestaurantInputSchema,
  RecipeUncheckedUpdateManyWithoutRestaurantNestedInputSchema: () => RecipeUncheckedUpdateManyWithoutRestaurantNestedInputSchema,
  RecipeUncheckedUpdateManyWithoutTagsInputSchema: () => RecipeUncheckedUpdateManyWithoutTagsInputSchema,
  RecipeUncheckedUpdateManyWithoutTagsNestedInputSchema: () => RecipeUncheckedUpdateManyWithoutTagsNestedInputSchema,
  RecipeUncheckedUpdateWithoutCookBookInputSchema: () => RecipeUncheckedUpdateWithoutCookBookInputSchema,
  RecipeUncheckedUpdateWithoutDietaryRestrictionsInputSchema: () => RecipeUncheckedUpdateWithoutDietaryRestrictionsInputSchema,
  RecipeUncheckedUpdateWithoutEquipmentInputSchema: () => RecipeUncheckedUpdateWithoutEquipmentInputSchema,
  RecipeUncheckedUpdateWithoutFoodCostHistoryInputSchema: () => RecipeUncheckedUpdateWithoutFoodCostHistoryInputSchema,
  RecipeUncheckedUpdateWithoutIngredientsInputSchema: () => RecipeUncheckedUpdateWithoutIngredientsInputSchema,
  RecipeUncheckedUpdateWithoutInstructionsInputSchema: () => RecipeUncheckedUpdateWithoutInstructionsInputSchema,
  RecipeUncheckedUpdateWithoutInventoryWithdrawalInputSchema: () => RecipeUncheckedUpdateWithoutInventoryWithdrawalInputSchema,
  RecipeUncheckedUpdateWithoutMenuItemRecipeInputSchema: () => RecipeUncheckedUpdateWithoutMenuItemRecipeInputSchema,
  RecipeUncheckedUpdateWithoutMenuItemsInputSchema: () => RecipeUncheckedUpdateWithoutMenuItemsInputSchema,
  RecipeUncheckedUpdateWithoutPrepBoardsInputSchema: () => RecipeUncheckedUpdateWithoutPrepBoardsInputSchema,
  RecipeUncheckedUpdateWithoutPrepHistoryInputSchema: () => RecipeUncheckedUpdateWithoutPrepHistoryInputSchema,
  RecipeUncheckedUpdateWithoutPrepItemsInputSchema: () => RecipeUncheckedUpdateWithoutPrepItemsInputSchema,
  RecipeUncheckedUpdateWithoutProductionPlanItemInputSchema: () => RecipeUncheckedUpdateWithoutProductionPlanItemInputSchema,
  RecipeUncheckedUpdateWithoutRestaurantInputSchema: () => RecipeUncheckedUpdateWithoutRestaurantInputSchema,
  RecipeUncheckedUpdateWithoutTagsInputSchema: () => RecipeUncheckedUpdateWithoutTagsInputSchema,
  RecipeUncheckedUpdateWithoutVersionsInputSchema: () => RecipeUncheckedUpdateWithoutVersionsInputSchema,
  RecipeUpdateArgsSchema: () => RecipeUpdateArgsSchema,
  RecipeUpdateInputSchema: () => RecipeUpdateInputSchema,
  RecipeUpdateManyArgsSchema: () => RecipeUpdateManyArgsSchema,
  RecipeUpdateManyMutationInputSchema: () => RecipeUpdateManyMutationInputSchema,
  RecipeUpdateManyWithWhereWithoutCookBookInputSchema: () => RecipeUpdateManyWithWhereWithoutCookBookInputSchema,
  RecipeUpdateManyWithWhereWithoutDietaryRestrictionsInputSchema: () => RecipeUpdateManyWithWhereWithoutDietaryRestrictionsInputSchema,
  RecipeUpdateManyWithWhereWithoutMenuItemsInputSchema: () => RecipeUpdateManyWithWhereWithoutMenuItemsInputSchema,
  RecipeUpdateManyWithWhereWithoutPrepBoardsInputSchema: () => RecipeUpdateManyWithWhereWithoutPrepBoardsInputSchema,
  RecipeUpdateManyWithWhereWithoutRestaurantInputSchema: () => RecipeUpdateManyWithWhereWithoutRestaurantInputSchema,
  RecipeUpdateManyWithWhereWithoutTagsInputSchema: () => RecipeUpdateManyWithWhereWithoutTagsInputSchema,
  RecipeUpdateManyWithoutCookBookNestedInputSchema: () => RecipeUpdateManyWithoutCookBookNestedInputSchema,
  RecipeUpdateManyWithoutDietaryRestrictionsNestedInputSchema: () => RecipeUpdateManyWithoutDietaryRestrictionsNestedInputSchema,
  RecipeUpdateManyWithoutMenuItemsNestedInputSchema: () => RecipeUpdateManyWithoutMenuItemsNestedInputSchema,
  RecipeUpdateManyWithoutPrepBoardsNestedInputSchema: () => RecipeUpdateManyWithoutPrepBoardsNestedInputSchema,
  RecipeUpdateManyWithoutRestaurantNestedInputSchema: () => RecipeUpdateManyWithoutRestaurantNestedInputSchema,
  RecipeUpdateManyWithoutTagsNestedInputSchema: () => RecipeUpdateManyWithoutTagsNestedInputSchema,
  RecipeUpdateOneRequiredWithoutEquipmentNestedInputSchema: () => RecipeUpdateOneRequiredWithoutEquipmentNestedInputSchema,
  RecipeUpdateOneRequiredWithoutFoodCostHistoryNestedInputSchema: () => RecipeUpdateOneRequiredWithoutFoodCostHistoryNestedInputSchema,
  RecipeUpdateOneRequiredWithoutIngredientsNestedInputSchema: () => RecipeUpdateOneRequiredWithoutIngredientsNestedInputSchema,
  RecipeUpdateOneRequiredWithoutInstructionsNestedInputSchema: () => RecipeUpdateOneRequiredWithoutInstructionsNestedInputSchema,
  RecipeUpdateOneRequiredWithoutMenuItemRecipeNestedInputSchema: () => RecipeUpdateOneRequiredWithoutMenuItemRecipeNestedInputSchema,
  RecipeUpdateOneRequiredWithoutPrepHistoryNestedInputSchema: () => RecipeUpdateOneRequiredWithoutPrepHistoryNestedInputSchema,
  RecipeUpdateOneRequiredWithoutPrepItemsNestedInputSchema: () => RecipeUpdateOneRequiredWithoutPrepItemsNestedInputSchema,
  RecipeUpdateOneRequiredWithoutProductionPlanItemNestedInputSchema: () => RecipeUpdateOneRequiredWithoutProductionPlanItemNestedInputSchema,
  RecipeUpdateOneRequiredWithoutVersionsNestedInputSchema: () => RecipeUpdateOneRequiredWithoutVersionsNestedInputSchema,
  RecipeUpdateOneWithoutInventoryWithdrawalNestedInputSchema: () => RecipeUpdateOneWithoutInventoryWithdrawalNestedInputSchema,
  RecipeUpdateToOneWithWhereWithoutEquipmentInputSchema: () => RecipeUpdateToOneWithWhereWithoutEquipmentInputSchema,
  RecipeUpdateToOneWithWhereWithoutFoodCostHistoryInputSchema: () => RecipeUpdateToOneWithWhereWithoutFoodCostHistoryInputSchema,
  RecipeUpdateToOneWithWhereWithoutIngredientsInputSchema: () => RecipeUpdateToOneWithWhereWithoutIngredientsInputSchema,
  RecipeUpdateToOneWithWhereWithoutInstructionsInputSchema: () => RecipeUpdateToOneWithWhereWithoutInstructionsInputSchema,
  RecipeUpdateToOneWithWhereWithoutInventoryWithdrawalInputSchema: () => RecipeUpdateToOneWithWhereWithoutInventoryWithdrawalInputSchema,
  RecipeUpdateToOneWithWhereWithoutMenuItemRecipeInputSchema: () => RecipeUpdateToOneWithWhereWithoutMenuItemRecipeInputSchema,
  RecipeUpdateToOneWithWhereWithoutPrepHistoryInputSchema: () => RecipeUpdateToOneWithWhereWithoutPrepHistoryInputSchema,
  RecipeUpdateToOneWithWhereWithoutPrepItemsInputSchema: () => RecipeUpdateToOneWithWhereWithoutPrepItemsInputSchema,
  RecipeUpdateToOneWithWhereWithoutProductionPlanItemInputSchema: () => RecipeUpdateToOneWithWhereWithoutProductionPlanItemInputSchema,
  RecipeUpdateToOneWithWhereWithoutVersionsInputSchema: () => RecipeUpdateToOneWithWhereWithoutVersionsInputSchema,
  RecipeUpdateWithWhereUniqueWithoutCookBookInputSchema: () => RecipeUpdateWithWhereUniqueWithoutCookBookInputSchema,
  RecipeUpdateWithWhereUniqueWithoutDietaryRestrictionsInputSchema: () => RecipeUpdateWithWhereUniqueWithoutDietaryRestrictionsInputSchema,
  RecipeUpdateWithWhereUniqueWithoutMenuItemsInputSchema: () => RecipeUpdateWithWhereUniqueWithoutMenuItemsInputSchema,
  RecipeUpdateWithWhereUniqueWithoutPrepBoardsInputSchema: () => RecipeUpdateWithWhereUniqueWithoutPrepBoardsInputSchema,
  RecipeUpdateWithWhereUniqueWithoutRestaurantInputSchema: () => RecipeUpdateWithWhereUniqueWithoutRestaurantInputSchema,
  RecipeUpdateWithWhereUniqueWithoutTagsInputSchema: () => RecipeUpdateWithWhereUniqueWithoutTagsInputSchema,
  RecipeUpdateWithoutCookBookInputSchema: () => RecipeUpdateWithoutCookBookInputSchema,
  RecipeUpdateWithoutDietaryRestrictionsInputSchema: () => RecipeUpdateWithoutDietaryRestrictionsInputSchema,
  RecipeUpdateWithoutEquipmentInputSchema: () => RecipeUpdateWithoutEquipmentInputSchema,
  RecipeUpdateWithoutFoodCostHistoryInputSchema: () => RecipeUpdateWithoutFoodCostHistoryInputSchema,
  RecipeUpdateWithoutIngredientsInputSchema: () => RecipeUpdateWithoutIngredientsInputSchema,
  RecipeUpdateWithoutInstructionsInputSchema: () => RecipeUpdateWithoutInstructionsInputSchema,
  RecipeUpdateWithoutInventoryWithdrawalInputSchema: () => RecipeUpdateWithoutInventoryWithdrawalInputSchema,
  RecipeUpdateWithoutMenuItemRecipeInputSchema: () => RecipeUpdateWithoutMenuItemRecipeInputSchema,
  RecipeUpdateWithoutMenuItemsInputSchema: () => RecipeUpdateWithoutMenuItemsInputSchema,
  RecipeUpdateWithoutPrepBoardsInputSchema: () => RecipeUpdateWithoutPrepBoardsInputSchema,
  RecipeUpdateWithoutPrepHistoryInputSchema: () => RecipeUpdateWithoutPrepHistoryInputSchema,
  RecipeUpdateWithoutPrepItemsInputSchema: () => RecipeUpdateWithoutPrepItemsInputSchema,
  RecipeUpdateWithoutProductionPlanItemInputSchema: () => RecipeUpdateWithoutProductionPlanItemInputSchema,
  RecipeUpdateWithoutRestaurantInputSchema: () => RecipeUpdateWithoutRestaurantInputSchema,
  RecipeUpdateWithoutTagsInputSchema: () => RecipeUpdateWithoutTagsInputSchema,
  RecipeUpdateWithoutVersionsInputSchema: () => RecipeUpdateWithoutVersionsInputSchema,
  RecipeUpdateimageUrlInputSchema: () => RecipeUpdateimageUrlInputSchema,
  RecipeUpsertArgsSchema: () => RecipeUpsertArgsSchema,
  RecipeUpsertWithWhereUniqueWithoutCookBookInputSchema: () => RecipeUpsertWithWhereUniqueWithoutCookBookInputSchema,
  RecipeUpsertWithWhereUniqueWithoutDietaryRestrictionsInputSchema: () => RecipeUpsertWithWhereUniqueWithoutDietaryRestrictionsInputSchema,
  RecipeUpsertWithWhereUniqueWithoutMenuItemsInputSchema: () => RecipeUpsertWithWhereUniqueWithoutMenuItemsInputSchema,
  RecipeUpsertWithWhereUniqueWithoutPrepBoardsInputSchema: () => RecipeUpsertWithWhereUniqueWithoutPrepBoardsInputSchema,
  RecipeUpsertWithWhereUniqueWithoutRestaurantInputSchema: () => RecipeUpsertWithWhereUniqueWithoutRestaurantInputSchema,
  RecipeUpsertWithWhereUniqueWithoutTagsInputSchema: () => RecipeUpsertWithWhereUniqueWithoutTagsInputSchema,
  RecipeUpsertWithoutEquipmentInputSchema: () => RecipeUpsertWithoutEquipmentInputSchema,
  RecipeUpsertWithoutFoodCostHistoryInputSchema: () => RecipeUpsertWithoutFoodCostHistoryInputSchema,
  RecipeUpsertWithoutIngredientsInputSchema: () => RecipeUpsertWithoutIngredientsInputSchema,
  RecipeUpsertWithoutInstructionsInputSchema: () => RecipeUpsertWithoutInstructionsInputSchema,
  RecipeUpsertWithoutInventoryWithdrawalInputSchema: () => RecipeUpsertWithoutInventoryWithdrawalInputSchema,
  RecipeUpsertWithoutMenuItemRecipeInputSchema: () => RecipeUpsertWithoutMenuItemRecipeInputSchema,
  RecipeUpsertWithoutPrepHistoryInputSchema: () => RecipeUpsertWithoutPrepHistoryInputSchema,
  RecipeUpsertWithoutPrepItemsInputSchema: () => RecipeUpsertWithoutPrepItemsInputSchema,
  RecipeUpsertWithoutProductionPlanItemInputSchema: () => RecipeUpsertWithoutProductionPlanItemInputSchema,
  RecipeUpsertWithoutVersionsInputSchema: () => RecipeUpsertWithoutVersionsInputSchema,
  RecipeVersionAggregateArgsSchema: () => RecipeVersionAggregateArgsSchema,
  RecipeVersionArgsSchema: () => RecipeVersionArgsSchema,
  RecipeVersionAvgOrderByAggregateInputSchema: () => RecipeVersionAvgOrderByAggregateInputSchema,
  RecipeVersionCountOrderByAggregateInputSchema: () => RecipeVersionCountOrderByAggregateInputSchema,
  RecipeVersionCountOutputTypeArgsSchema: () => RecipeVersionCountOutputTypeArgsSchema,
  RecipeVersionCountOutputTypeSelectSchema: () => RecipeVersionCountOutputTypeSelectSchema,
  RecipeVersionCreateArgsSchema: () => RecipeVersionCreateArgsSchema,
  RecipeVersionCreateInputSchema: () => RecipeVersionCreateInputSchema,
  RecipeVersionCreateManyAndReturnArgsSchema: () => RecipeVersionCreateManyAndReturnArgsSchema,
  RecipeVersionCreateManyApprovedByInputEnvelopeSchema: () => RecipeVersionCreateManyApprovedByInputEnvelopeSchema,
  RecipeVersionCreateManyApprovedByInputSchema: () => RecipeVersionCreateManyApprovedByInputSchema,
  RecipeVersionCreateManyArgsSchema: () => RecipeVersionCreateManyArgsSchema,
  RecipeVersionCreateManyCreatedByInputEnvelopeSchema: () => RecipeVersionCreateManyCreatedByInputEnvelopeSchema,
  RecipeVersionCreateManyCreatedByInputSchema: () => RecipeVersionCreateManyCreatedByInputSchema,
  RecipeVersionCreateManyInputSchema: () => RecipeVersionCreateManyInputSchema,
  RecipeVersionCreateManyRecipeInputEnvelopeSchema: () => RecipeVersionCreateManyRecipeInputEnvelopeSchema,
  RecipeVersionCreateManyRecipeInputSchema: () => RecipeVersionCreateManyRecipeInputSchema,
  RecipeVersionCreateNestedManyWithoutApprovedByInputSchema: () => RecipeVersionCreateNestedManyWithoutApprovedByInputSchema,
  RecipeVersionCreateNestedManyWithoutCreatedByInputSchema: () => RecipeVersionCreateNestedManyWithoutCreatedByInputSchema,
  RecipeVersionCreateNestedManyWithoutRecipeInputSchema: () => RecipeVersionCreateNestedManyWithoutRecipeInputSchema,
  RecipeVersionCreateNestedOneWithoutIngredientsInputSchema: () => RecipeVersionCreateNestedOneWithoutIngredientsInputSchema,
  RecipeVersionCreateNestedOneWithoutInstructionsInputSchema: () => RecipeVersionCreateNestedOneWithoutInstructionsInputSchema,
  RecipeVersionCreateOrConnectWithoutApprovedByInputSchema: () => RecipeVersionCreateOrConnectWithoutApprovedByInputSchema,
  RecipeVersionCreateOrConnectWithoutCreatedByInputSchema: () => RecipeVersionCreateOrConnectWithoutCreatedByInputSchema,
  RecipeVersionCreateOrConnectWithoutIngredientsInputSchema: () => RecipeVersionCreateOrConnectWithoutIngredientsInputSchema,
  RecipeVersionCreateOrConnectWithoutInstructionsInputSchema: () => RecipeVersionCreateOrConnectWithoutInstructionsInputSchema,
  RecipeVersionCreateOrConnectWithoutRecipeInputSchema: () => RecipeVersionCreateOrConnectWithoutRecipeInputSchema,
  RecipeVersionCreateWithoutApprovedByInputSchema: () => RecipeVersionCreateWithoutApprovedByInputSchema,
  RecipeVersionCreateWithoutCreatedByInputSchema: () => RecipeVersionCreateWithoutCreatedByInputSchema,
  RecipeVersionCreateWithoutIngredientsInputSchema: () => RecipeVersionCreateWithoutIngredientsInputSchema,
  RecipeVersionCreateWithoutInstructionsInputSchema: () => RecipeVersionCreateWithoutInstructionsInputSchema,
  RecipeVersionCreateWithoutRecipeInputSchema: () => RecipeVersionCreateWithoutRecipeInputSchema,
  RecipeVersionDeleteArgsSchema: () => RecipeVersionDeleteArgsSchema,
  RecipeVersionDeleteManyArgsSchema: () => RecipeVersionDeleteManyArgsSchema,
  RecipeVersionFindFirstArgsSchema: () => RecipeVersionFindFirstArgsSchema,
  RecipeVersionFindFirstOrThrowArgsSchema: () => RecipeVersionFindFirstOrThrowArgsSchema,
  RecipeVersionFindManyArgsSchema: () => RecipeVersionFindManyArgsSchema,
  RecipeVersionFindUniqueArgsSchema: () => RecipeVersionFindUniqueArgsSchema,
  RecipeVersionFindUniqueOrThrowArgsSchema: () => RecipeVersionFindUniqueOrThrowArgsSchema,
  RecipeVersionGroupByArgsSchema: () => RecipeVersionGroupByArgsSchema,
  RecipeVersionIncludeSchema: () => RecipeVersionIncludeSchema,
  RecipeVersionListRelationFilterSchema: () => RecipeVersionListRelationFilterSchema,
  RecipeVersionMaxOrderByAggregateInputSchema: () => RecipeVersionMaxOrderByAggregateInputSchema,
  RecipeVersionMinOrderByAggregateInputSchema: () => RecipeVersionMinOrderByAggregateInputSchema,
  RecipeVersionNullableRelationFilterSchema: () => RecipeVersionNullableRelationFilterSchema,
  RecipeVersionOrderByRelationAggregateInputSchema: () => RecipeVersionOrderByRelationAggregateInputSchema,
  RecipeVersionOrderByWithAggregationInputSchema: () => RecipeVersionOrderByWithAggregationInputSchema,
  RecipeVersionOrderByWithRelationInputSchema: () => RecipeVersionOrderByWithRelationInputSchema,
  RecipeVersionRecipeIdVersionNumberCompoundUniqueInputSchema: () => RecipeVersionRecipeIdVersionNumberCompoundUniqueInputSchema,
  RecipeVersionScalarFieldEnumSchema: () => RecipeVersionScalarFieldEnumSchema,
  RecipeVersionScalarWhereInputSchema: () => RecipeVersionScalarWhereInputSchema,
  RecipeVersionScalarWhereWithAggregatesInputSchema: () => RecipeVersionScalarWhereWithAggregatesInputSchema,
  RecipeVersionSchema: () => RecipeVersionSchema,
  RecipeVersionSelectSchema: () => RecipeVersionSelectSchema,
  RecipeVersionSumOrderByAggregateInputSchema: () => RecipeVersionSumOrderByAggregateInputSchema,
  RecipeVersionUncheckedCreateInputSchema: () => RecipeVersionUncheckedCreateInputSchema,
  RecipeVersionUncheckedCreateNestedManyWithoutApprovedByInputSchema: () => RecipeVersionUncheckedCreateNestedManyWithoutApprovedByInputSchema,
  RecipeVersionUncheckedCreateNestedManyWithoutCreatedByInputSchema: () => RecipeVersionUncheckedCreateNestedManyWithoutCreatedByInputSchema,
  RecipeVersionUncheckedCreateNestedManyWithoutRecipeInputSchema: () => RecipeVersionUncheckedCreateNestedManyWithoutRecipeInputSchema,
  RecipeVersionUncheckedCreateWithoutApprovedByInputSchema: () => RecipeVersionUncheckedCreateWithoutApprovedByInputSchema,
  RecipeVersionUncheckedCreateWithoutCreatedByInputSchema: () => RecipeVersionUncheckedCreateWithoutCreatedByInputSchema,
  RecipeVersionUncheckedCreateWithoutIngredientsInputSchema: () => RecipeVersionUncheckedCreateWithoutIngredientsInputSchema,
  RecipeVersionUncheckedCreateWithoutInstructionsInputSchema: () => RecipeVersionUncheckedCreateWithoutInstructionsInputSchema,
  RecipeVersionUncheckedCreateWithoutRecipeInputSchema: () => RecipeVersionUncheckedCreateWithoutRecipeInputSchema,
  RecipeVersionUncheckedUpdateInputSchema: () => RecipeVersionUncheckedUpdateInputSchema,
  RecipeVersionUncheckedUpdateManyInputSchema: () => RecipeVersionUncheckedUpdateManyInputSchema,
  RecipeVersionUncheckedUpdateManyWithoutApprovedByInputSchema: () => RecipeVersionUncheckedUpdateManyWithoutApprovedByInputSchema,
  RecipeVersionUncheckedUpdateManyWithoutApprovedByNestedInputSchema: () => RecipeVersionUncheckedUpdateManyWithoutApprovedByNestedInputSchema,
  RecipeVersionUncheckedUpdateManyWithoutCreatedByInputSchema: () => RecipeVersionUncheckedUpdateManyWithoutCreatedByInputSchema,
  RecipeVersionUncheckedUpdateManyWithoutCreatedByNestedInputSchema: () => RecipeVersionUncheckedUpdateManyWithoutCreatedByNestedInputSchema,
  RecipeVersionUncheckedUpdateManyWithoutRecipeInputSchema: () => RecipeVersionUncheckedUpdateManyWithoutRecipeInputSchema,
  RecipeVersionUncheckedUpdateManyWithoutRecipeNestedInputSchema: () => RecipeVersionUncheckedUpdateManyWithoutRecipeNestedInputSchema,
  RecipeVersionUncheckedUpdateWithoutApprovedByInputSchema: () => RecipeVersionUncheckedUpdateWithoutApprovedByInputSchema,
  RecipeVersionUncheckedUpdateWithoutCreatedByInputSchema: () => RecipeVersionUncheckedUpdateWithoutCreatedByInputSchema,
  RecipeVersionUncheckedUpdateWithoutIngredientsInputSchema: () => RecipeVersionUncheckedUpdateWithoutIngredientsInputSchema,
  RecipeVersionUncheckedUpdateWithoutInstructionsInputSchema: () => RecipeVersionUncheckedUpdateWithoutInstructionsInputSchema,
  RecipeVersionUncheckedUpdateWithoutRecipeInputSchema: () => RecipeVersionUncheckedUpdateWithoutRecipeInputSchema,
  RecipeVersionUpdateArgsSchema: () => RecipeVersionUpdateArgsSchema,
  RecipeVersionUpdateInputSchema: () => RecipeVersionUpdateInputSchema,
  RecipeVersionUpdateManyArgsSchema: () => RecipeVersionUpdateManyArgsSchema,
  RecipeVersionUpdateManyMutationInputSchema: () => RecipeVersionUpdateManyMutationInputSchema,
  RecipeVersionUpdateManyWithWhereWithoutApprovedByInputSchema: () => RecipeVersionUpdateManyWithWhereWithoutApprovedByInputSchema,
  RecipeVersionUpdateManyWithWhereWithoutCreatedByInputSchema: () => RecipeVersionUpdateManyWithWhereWithoutCreatedByInputSchema,
  RecipeVersionUpdateManyWithWhereWithoutRecipeInputSchema: () => RecipeVersionUpdateManyWithWhereWithoutRecipeInputSchema,
  RecipeVersionUpdateManyWithoutApprovedByNestedInputSchema: () => RecipeVersionUpdateManyWithoutApprovedByNestedInputSchema,
  RecipeVersionUpdateManyWithoutCreatedByNestedInputSchema: () => RecipeVersionUpdateManyWithoutCreatedByNestedInputSchema,
  RecipeVersionUpdateManyWithoutRecipeNestedInputSchema: () => RecipeVersionUpdateManyWithoutRecipeNestedInputSchema,
  RecipeVersionUpdateOneWithoutIngredientsNestedInputSchema: () => RecipeVersionUpdateOneWithoutIngredientsNestedInputSchema,
  RecipeVersionUpdateOneWithoutInstructionsNestedInputSchema: () => RecipeVersionUpdateOneWithoutInstructionsNestedInputSchema,
  RecipeVersionUpdateToOneWithWhereWithoutIngredientsInputSchema: () => RecipeVersionUpdateToOneWithWhereWithoutIngredientsInputSchema,
  RecipeVersionUpdateToOneWithWhereWithoutInstructionsInputSchema: () => RecipeVersionUpdateToOneWithWhereWithoutInstructionsInputSchema,
  RecipeVersionUpdateWithWhereUniqueWithoutApprovedByInputSchema: () => RecipeVersionUpdateWithWhereUniqueWithoutApprovedByInputSchema,
  RecipeVersionUpdateWithWhereUniqueWithoutCreatedByInputSchema: () => RecipeVersionUpdateWithWhereUniqueWithoutCreatedByInputSchema,
  RecipeVersionUpdateWithWhereUniqueWithoutRecipeInputSchema: () => RecipeVersionUpdateWithWhereUniqueWithoutRecipeInputSchema,
  RecipeVersionUpdateWithoutApprovedByInputSchema: () => RecipeVersionUpdateWithoutApprovedByInputSchema,
  RecipeVersionUpdateWithoutCreatedByInputSchema: () => RecipeVersionUpdateWithoutCreatedByInputSchema,
  RecipeVersionUpdateWithoutIngredientsInputSchema: () => RecipeVersionUpdateWithoutIngredientsInputSchema,
  RecipeVersionUpdateWithoutInstructionsInputSchema: () => RecipeVersionUpdateWithoutInstructionsInputSchema,
  RecipeVersionUpdateWithoutRecipeInputSchema: () => RecipeVersionUpdateWithoutRecipeInputSchema,
  RecipeVersionUpsertArgsSchema: () => RecipeVersionUpsertArgsSchema,
  RecipeVersionUpsertWithWhereUniqueWithoutApprovedByInputSchema: () => RecipeVersionUpsertWithWhereUniqueWithoutApprovedByInputSchema,
  RecipeVersionUpsertWithWhereUniqueWithoutCreatedByInputSchema: () => RecipeVersionUpsertWithWhereUniqueWithoutCreatedByInputSchema,
  RecipeVersionUpsertWithWhereUniqueWithoutRecipeInputSchema: () => RecipeVersionUpsertWithWhereUniqueWithoutRecipeInputSchema,
  RecipeVersionUpsertWithoutIngredientsInputSchema: () => RecipeVersionUpsertWithoutIngredientsInputSchema,
  RecipeVersionUpsertWithoutInstructionsInputSchema: () => RecipeVersionUpsertWithoutInstructionsInputSchema,
  RecipeVersionWhereInputSchema: () => RecipeVersionWhereInputSchema,
  RecipeVersionWhereUniqueInputSchema: () => RecipeVersionWhereUniqueInputSchema,
  RecipeWhereInputSchema: () => RecipeWhereInputSchema,
  RecipeWhereUniqueInputSchema: () => RecipeWhereUniqueInputSchema,
  RestaurantAggregateArgsSchema: () => RestaurantAggregateArgsSchema,
  RestaurantArgsSchema: () => RestaurantArgsSchema,
  RestaurantAvgOrderByAggregateInputSchema: () => RestaurantAvgOrderByAggregateInputSchema,
  RestaurantCountOrderByAggregateInputSchema: () => RestaurantCountOrderByAggregateInputSchema,
  RestaurantCountOutputTypeArgsSchema: () => RestaurantCountOutputTypeArgsSchema,
  RestaurantCountOutputTypeSelectSchema: () => RestaurantCountOutputTypeSelectSchema,
  RestaurantCreateArgsSchema: () => RestaurantCreateArgsSchema,
  RestaurantCreateInputSchema: () => RestaurantCreateInputSchema,
  RestaurantCreateManyAndReturnArgsSchema: () => RestaurantCreateManyAndReturnArgsSchema,
  RestaurantCreateManyArgsSchema: () => RestaurantCreateManyArgsSchema,
  RestaurantCreateManyInputSchema: () => RestaurantCreateManyInputSchema,
  RestaurantCreateManyOrganizationInputEnvelopeSchema: () => RestaurantCreateManyOrganizationInputEnvelopeSchema,
  RestaurantCreateManyOrganizationInputSchema: () => RestaurantCreateManyOrganizationInputSchema,
  RestaurantCreateNestedManyWithoutOrganizationInputSchema: () => RestaurantCreateNestedManyWithoutOrganizationInputSchema,
  RestaurantCreateNestedOneWithoutCookbooksInputSchema: () => RestaurantCreateNestedOneWithoutCookbooksInputSchema,
  RestaurantCreateNestedOneWithoutEquipmentInputSchema: () => RestaurantCreateNestedOneWithoutEquipmentInputSchema,
  RestaurantCreateNestedOneWithoutInventoryInputSchema: () => RestaurantCreateNestedOneWithoutInventoryInputSchema,
  RestaurantCreateNestedOneWithoutLeftoverItemInputSchema: () => RestaurantCreateNestedOneWithoutLeftoverItemInputSchema,
  RestaurantCreateNestedOneWithoutMenusInputSchema: () => RestaurantCreateNestedOneWithoutMenusInputSchema,
  RestaurantCreateNestedOneWithoutOrdersInputSchema: () => RestaurantCreateNestedOneWithoutOrdersInputSchema,
  RestaurantCreateNestedOneWithoutProductionPlanInputSchema: () => RestaurantCreateNestedOneWithoutProductionPlanInputSchema,
  RestaurantCreateNestedOneWithoutQualityChecklistInputSchema: () => RestaurantCreateNestedOneWithoutQualityChecklistInputSchema,
  RestaurantCreateNestedOneWithoutQustomerFeedbackInputSchema: () => RestaurantCreateNestedOneWithoutQustomerFeedbackInputSchema,
  RestaurantCreateNestedOneWithoutRecipesInputSchema: () => RestaurantCreateNestedOneWithoutRecipesInputSchema,
  RestaurantCreateNestedOneWithoutSalesTransactionsInputSchema: () => RestaurantCreateNestedOneWithoutSalesTransactionsInputSchema,
  RestaurantCreateNestedOneWithoutUsersInputSchema: () => RestaurantCreateNestedOneWithoutUsersInputSchema,
  RestaurantCreateNestedOneWithoutWasteRecordInputSchema: () => RestaurantCreateNestedOneWithoutWasteRecordInputSchema,
  RestaurantCreateOrConnectWithoutCookbooksInputSchema: () => RestaurantCreateOrConnectWithoutCookbooksInputSchema,
  RestaurantCreateOrConnectWithoutEquipmentInputSchema: () => RestaurantCreateOrConnectWithoutEquipmentInputSchema,
  RestaurantCreateOrConnectWithoutInventoryInputSchema: () => RestaurantCreateOrConnectWithoutInventoryInputSchema,
  RestaurantCreateOrConnectWithoutLeftoverItemInputSchema: () => RestaurantCreateOrConnectWithoutLeftoverItemInputSchema,
  RestaurantCreateOrConnectWithoutMenusInputSchema: () => RestaurantCreateOrConnectWithoutMenusInputSchema,
  RestaurantCreateOrConnectWithoutOrdersInputSchema: () => RestaurantCreateOrConnectWithoutOrdersInputSchema,
  RestaurantCreateOrConnectWithoutOrganizationInputSchema: () => RestaurantCreateOrConnectWithoutOrganizationInputSchema,
  RestaurantCreateOrConnectWithoutProductionPlanInputSchema: () => RestaurantCreateOrConnectWithoutProductionPlanInputSchema,
  RestaurantCreateOrConnectWithoutQualityChecklistInputSchema: () => RestaurantCreateOrConnectWithoutQualityChecklistInputSchema,
  RestaurantCreateOrConnectWithoutQustomerFeedbackInputSchema: () => RestaurantCreateOrConnectWithoutQustomerFeedbackInputSchema,
  RestaurantCreateOrConnectWithoutRecipesInputSchema: () => RestaurantCreateOrConnectWithoutRecipesInputSchema,
  RestaurantCreateOrConnectWithoutSalesTransactionsInputSchema: () => RestaurantCreateOrConnectWithoutSalesTransactionsInputSchema,
  RestaurantCreateOrConnectWithoutUsersInputSchema: () => RestaurantCreateOrConnectWithoutUsersInputSchema,
  RestaurantCreateOrConnectWithoutWasteRecordInputSchema: () => RestaurantCreateOrConnectWithoutWasteRecordInputSchema,
  RestaurantCreateWithoutCookbooksInputSchema: () => RestaurantCreateWithoutCookbooksInputSchema,
  RestaurantCreateWithoutEquipmentInputSchema: () => RestaurantCreateWithoutEquipmentInputSchema,
  RestaurantCreateWithoutInventoryInputSchema: () => RestaurantCreateWithoutInventoryInputSchema,
  RestaurantCreateWithoutLeftoverItemInputSchema: () => RestaurantCreateWithoutLeftoverItemInputSchema,
  RestaurantCreateWithoutMenusInputSchema: () => RestaurantCreateWithoutMenusInputSchema,
  RestaurantCreateWithoutOrdersInputSchema: () => RestaurantCreateWithoutOrdersInputSchema,
  RestaurantCreateWithoutOrganizationInputSchema: () => RestaurantCreateWithoutOrganizationInputSchema,
  RestaurantCreateWithoutProductionPlanInputSchema: () => RestaurantCreateWithoutProductionPlanInputSchema,
  RestaurantCreateWithoutQualityChecklistInputSchema: () => RestaurantCreateWithoutQualityChecklistInputSchema,
  RestaurantCreateWithoutQustomerFeedbackInputSchema: () => RestaurantCreateWithoutQustomerFeedbackInputSchema,
  RestaurantCreateWithoutRecipesInputSchema: () => RestaurantCreateWithoutRecipesInputSchema,
  RestaurantCreateWithoutSalesTransactionsInputSchema: () => RestaurantCreateWithoutSalesTransactionsInputSchema,
  RestaurantCreateWithoutUsersInputSchema: () => RestaurantCreateWithoutUsersInputSchema,
  RestaurantCreateWithoutWasteRecordInputSchema: () => RestaurantCreateWithoutWasteRecordInputSchema,
  RestaurantDeleteArgsSchema: () => RestaurantDeleteArgsSchema,
  RestaurantDeleteManyArgsSchema: () => RestaurantDeleteManyArgsSchema,
  RestaurantFindFirstArgsSchema: () => RestaurantFindFirstArgsSchema,
  RestaurantFindFirstOrThrowArgsSchema: () => RestaurantFindFirstOrThrowArgsSchema,
  RestaurantFindManyArgsSchema: () => RestaurantFindManyArgsSchema,
  RestaurantFindUniqueArgsSchema: () => RestaurantFindUniqueArgsSchema,
  RestaurantFindUniqueOrThrowArgsSchema: () => RestaurantFindUniqueOrThrowArgsSchema,
  RestaurantGroupByArgsSchema: () => RestaurantGroupByArgsSchema,
  RestaurantIncludeSchema: () => RestaurantIncludeSchema,
  RestaurantListRelationFilterSchema: () => RestaurantListRelationFilterSchema,
  RestaurantMaxOrderByAggregateInputSchema: () => RestaurantMaxOrderByAggregateInputSchema,
  RestaurantMinOrderByAggregateInputSchema: () => RestaurantMinOrderByAggregateInputSchema,
  RestaurantNullableRelationFilterSchema: () => RestaurantNullableRelationFilterSchema,
  RestaurantOrderByRelationAggregateInputSchema: () => RestaurantOrderByRelationAggregateInputSchema,
  RestaurantOrderByWithAggregationInputSchema: () => RestaurantOrderByWithAggregationInputSchema,
  RestaurantOrderByWithRelationInputSchema: () => RestaurantOrderByWithRelationInputSchema,
  RestaurantRelationFilterSchema: () => RestaurantRelationFilterSchema,
  RestaurantScalarFieldEnumSchema: () => RestaurantScalarFieldEnumSchema,
  RestaurantScalarWhereInputSchema: () => RestaurantScalarWhereInputSchema,
  RestaurantScalarWhereWithAggregatesInputSchema: () => RestaurantScalarWhereWithAggregatesInputSchema,
  RestaurantSchema: () => RestaurantSchema,
  RestaurantSelectSchema: () => RestaurantSelectSchema,
  RestaurantSumOrderByAggregateInputSchema: () => RestaurantSumOrderByAggregateInputSchema,
  RestaurantUncheckedCreateInputSchema: () => RestaurantUncheckedCreateInputSchema,
  RestaurantUncheckedCreateNestedManyWithoutOrganizationInputSchema: () => RestaurantUncheckedCreateNestedManyWithoutOrganizationInputSchema,
  RestaurantUncheckedCreateWithoutCookbooksInputSchema: () => RestaurantUncheckedCreateWithoutCookbooksInputSchema,
  RestaurantUncheckedCreateWithoutEquipmentInputSchema: () => RestaurantUncheckedCreateWithoutEquipmentInputSchema,
  RestaurantUncheckedCreateWithoutInventoryInputSchema: () => RestaurantUncheckedCreateWithoutInventoryInputSchema,
  RestaurantUncheckedCreateWithoutLeftoverItemInputSchema: () => RestaurantUncheckedCreateWithoutLeftoverItemInputSchema,
  RestaurantUncheckedCreateWithoutMenusInputSchema: () => RestaurantUncheckedCreateWithoutMenusInputSchema,
  RestaurantUncheckedCreateWithoutOrdersInputSchema: () => RestaurantUncheckedCreateWithoutOrdersInputSchema,
  RestaurantUncheckedCreateWithoutOrganizationInputSchema: () => RestaurantUncheckedCreateWithoutOrganizationInputSchema,
  RestaurantUncheckedCreateWithoutProductionPlanInputSchema: () => RestaurantUncheckedCreateWithoutProductionPlanInputSchema,
  RestaurantUncheckedCreateWithoutQualityChecklistInputSchema: () => RestaurantUncheckedCreateWithoutQualityChecklistInputSchema,
  RestaurantUncheckedCreateWithoutQustomerFeedbackInputSchema: () => RestaurantUncheckedCreateWithoutQustomerFeedbackInputSchema,
  RestaurantUncheckedCreateWithoutRecipesInputSchema: () => RestaurantUncheckedCreateWithoutRecipesInputSchema,
  RestaurantUncheckedCreateWithoutSalesTransactionsInputSchema: () => RestaurantUncheckedCreateWithoutSalesTransactionsInputSchema,
  RestaurantUncheckedCreateWithoutUsersInputSchema: () => RestaurantUncheckedCreateWithoutUsersInputSchema,
  RestaurantUncheckedCreateWithoutWasteRecordInputSchema: () => RestaurantUncheckedCreateWithoutWasteRecordInputSchema,
  RestaurantUncheckedUpdateInputSchema: () => RestaurantUncheckedUpdateInputSchema,
  RestaurantUncheckedUpdateManyInputSchema: () => RestaurantUncheckedUpdateManyInputSchema,
  RestaurantUncheckedUpdateManyWithoutOrganizationInputSchema: () => RestaurantUncheckedUpdateManyWithoutOrganizationInputSchema,
  RestaurantUncheckedUpdateManyWithoutOrganizationNestedInputSchema: () => RestaurantUncheckedUpdateManyWithoutOrganizationNestedInputSchema,
  RestaurantUncheckedUpdateWithoutCookbooksInputSchema: () => RestaurantUncheckedUpdateWithoutCookbooksInputSchema,
  RestaurantUncheckedUpdateWithoutEquipmentInputSchema: () => RestaurantUncheckedUpdateWithoutEquipmentInputSchema,
  RestaurantUncheckedUpdateWithoutInventoryInputSchema: () => RestaurantUncheckedUpdateWithoutInventoryInputSchema,
  RestaurantUncheckedUpdateWithoutLeftoverItemInputSchema: () => RestaurantUncheckedUpdateWithoutLeftoverItemInputSchema,
  RestaurantUncheckedUpdateWithoutMenusInputSchema: () => RestaurantUncheckedUpdateWithoutMenusInputSchema,
  RestaurantUncheckedUpdateWithoutOrdersInputSchema: () => RestaurantUncheckedUpdateWithoutOrdersInputSchema,
  RestaurantUncheckedUpdateWithoutOrganizationInputSchema: () => RestaurantUncheckedUpdateWithoutOrganizationInputSchema,
  RestaurantUncheckedUpdateWithoutProductionPlanInputSchema: () => RestaurantUncheckedUpdateWithoutProductionPlanInputSchema,
  RestaurantUncheckedUpdateWithoutQualityChecklistInputSchema: () => RestaurantUncheckedUpdateWithoutQualityChecklistInputSchema,
  RestaurantUncheckedUpdateWithoutQustomerFeedbackInputSchema: () => RestaurantUncheckedUpdateWithoutQustomerFeedbackInputSchema,
  RestaurantUncheckedUpdateWithoutRecipesInputSchema: () => RestaurantUncheckedUpdateWithoutRecipesInputSchema,
  RestaurantUncheckedUpdateWithoutSalesTransactionsInputSchema: () => RestaurantUncheckedUpdateWithoutSalesTransactionsInputSchema,
  RestaurantUncheckedUpdateWithoutUsersInputSchema: () => RestaurantUncheckedUpdateWithoutUsersInputSchema,
  RestaurantUncheckedUpdateWithoutWasteRecordInputSchema: () => RestaurantUncheckedUpdateWithoutWasteRecordInputSchema,
  RestaurantUpdateArgsSchema: () => RestaurantUpdateArgsSchema,
  RestaurantUpdateInputSchema: () => RestaurantUpdateInputSchema,
  RestaurantUpdateManyArgsSchema: () => RestaurantUpdateManyArgsSchema,
  RestaurantUpdateManyMutationInputSchema: () => RestaurantUpdateManyMutationInputSchema,
  RestaurantUpdateManyWithWhereWithoutOrganizationInputSchema: () => RestaurantUpdateManyWithWhereWithoutOrganizationInputSchema,
  RestaurantUpdateManyWithoutOrganizationNestedInputSchema: () => RestaurantUpdateManyWithoutOrganizationNestedInputSchema,
  RestaurantUpdateOneRequiredWithoutEquipmentNestedInputSchema: () => RestaurantUpdateOneRequiredWithoutEquipmentNestedInputSchema,
  RestaurantUpdateOneRequiredWithoutInventoryNestedInputSchema: () => RestaurantUpdateOneRequiredWithoutInventoryNestedInputSchema,
  RestaurantUpdateOneRequiredWithoutLeftoverItemNestedInputSchema: () => RestaurantUpdateOneRequiredWithoutLeftoverItemNestedInputSchema,
  RestaurantUpdateOneRequiredWithoutMenusNestedInputSchema: () => RestaurantUpdateOneRequiredWithoutMenusNestedInputSchema,
  RestaurantUpdateOneRequiredWithoutOrdersNestedInputSchema: () => RestaurantUpdateOneRequiredWithoutOrdersNestedInputSchema,
  RestaurantUpdateOneRequiredWithoutProductionPlanNestedInputSchema: () => RestaurantUpdateOneRequiredWithoutProductionPlanNestedInputSchema,
  RestaurantUpdateOneRequiredWithoutQualityChecklistNestedInputSchema: () => RestaurantUpdateOneRequiredWithoutQualityChecklistNestedInputSchema,
  RestaurantUpdateOneRequiredWithoutQustomerFeedbackNestedInputSchema: () => RestaurantUpdateOneRequiredWithoutQustomerFeedbackNestedInputSchema,
  RestaurantUpdateOneRequiredWithoutRecipesNestedInputSchema: () => RestaurantUpdateOneRequiredWithoutRecipesNestedInputSchema,
  RestaurantUpdateOneRequiredWithoutSalesTransactionsNestedInputSchema: () => RestaurantUpdateOneRequiredWithoutSalesTransactionsNestedInputSchema,
  RestaurantUpdateOneRequiredWithoutWasteRecordNestedInputSchema: () => RestaurantUpdateOneRequiredWithoutWasteRecordNestedInputSchema,
  RestaurantUpdateOneWithoutCookbooksNestedInputSchema: () => RestaurantUpdateOneWithoutCookbooksNestedInputSchema,
  RestaurantUpdateOneWithoutUsersNestedInputSchema: () => RestaurantUpdateOneWithoutUsersNestedInputSchema,
  RestaurantUpdateToOneWithWhereWithoutCookbooksInputSchema: () => RestaurantUpdateToOneWithWhereWithoutCookbooksInputSchema,
  RestaurantUpdateToOneWithWhereWithoutEquipmentInputSchema: () => RestaurantUpdateToOneWithWhereWithoutEquipmentInputSchema,
  RestaurantUpdateToOneWithWhereWithoutInventoryInputSchema: () => RestaurantUpdateToOneWithWhereWithoutInventoryInputSchema,
  RestaurantUpdateToOneWithWhereWithoutLeftoverItemInputSchema: () => RestaurantUpdateToOneWithWhereWithoutLeftoverItemInputSchema,
  RestaurantUpdateToOneWithWhereWithoutMenusInputSchema: () => RestaurantUpdateToOneWithWhereWithoutMenusInputSchema,
  RestaurantUpdateToOneWithWhereWithoutOrdersInputSchema: () => RestaurantUpdateToOneWithWhereWithoutOrdersInputSchema,
  RestaurantUpdateToOneWithWhereWithoutProductionPlanInputSchema: () => RestaurantUpdateToOneWithWhereWithoutProductionPlanInputSchema,
  RestaurantUpdateToOneWithWhereWithoutQualityChecklistInputSchema: () => RestaurantUpdateToOneWithWhereWithoutQualityChecklistInputSchema,
  RestaurantUpdateToOneWithWhereWithoutQustomerFeedbackInputSchema: () => RestaurantUpdateToOneWithWhereWithoutQustomerFeedbackInputSchema,
  RestaurantUpdateToOneWithWhereWithoutRecipesInputSchema: () => RestaurantUpdateToOneWithWhereWithoutRecipesInputSchema,
  RestaurantUpdateToOneWithWhereWithoutSalesTransactionsInputSchema: () => RestaurantUpdateToOneWithWhereWithoutSalesTransactionsInputSchema,
  RestaurantUpdateToOneWithWhereWithoutUsersInputSchema: () => RestaurantUpdateToOneWithWhereWithoutUsersInputSchema,
  RestaurantUpdateToOneWithWhereWithoutWasteRecordInputSchema: () => RestaurantUpdateToOneWithWhereWithoutWasteRecordInputSchema,
  RestaurantUpdateWithWhereUniqueWithoutOrganizationInputSchema: () => RestaurantUpdateWithWhereUniqueWithoutOrganizationInputSchema,
  RestaurantUpdateWithoutCookbooksInputSchema: () => RestaurantUpdateWithoutCookbooksInputSchema,
  RestaurantUpdateWithoutEquipmentInputSchema: () => RestaurantUpdateWithoutEquipmentInputSchema,
  RestaurantUpdateWithoutInventoryInputSchema: () => RestaurantUpdateWithoutInventoryInputSchema,
  RestaurantUpdateWithoutLeftoverItemInputSchema: () => RestaurantUpdateWithoutLeftoverItemInputSchema,
  RestaurantUpdateWithoutMenusInputSchema: () => RestaurantUpdateWithoutMenusInputSchema,
  RestaurantUpdateWithoutOrdersInputSchema: () => RestaurantUpdateWithoutOrdersInputSchema,
  RestaurantUpdateWithoutOrganizationInputSchema: () => RestaurantUpdateWithoutOrganizationInputSchema,
  RestaurantUpdateWithoutProductionPlanInputSchema: () => RestaurantUpdateWithoutProductionPlanInputSchema,
  RestaurantUpdateWithoutQualityChecklistInputSchema: () => RestaurantUpdateWithoutQualityChecklistInputSchema,
  RestaurantUpdateWithoutQustomerFeedbackInputSchema: () => RestaurantUpdateWithoutQustomerFeedbackInputSchema,
  RestaurantUpdateWithoutRecipesInputSchema: () => RestaurantUpdateWithoutRecipesInputSchema,
  RestaurantUpdateWithoutSalesTransactionsInputSchema: () => RestaurantUpdateWithoutSalesTransactionsInputSchema,
  RestaurantUpdateWithoutUsersInputSchema: () => RestaurantUpdateWithoutUsersInputSchema,
  RestaurantUpdateWithoutWasteRecordInputSchema: () => RestaurantUpdateWithoutWasteRecordInputSchema,
  RestaurantUpsertArgsSchema: () => RestaurantUpsertArgsSchema,
  RestaurantUpsertWithWhereUniqueWithoutOrganizationInputSchema: () => RestaurantUpsertWithWhereUniqueWithoutOrganizationInputSchema,
  RestaurantUpsertWithoutCookbooksInputSchema: () => RestaurantUpsertWithoutCookbooksInputSchema,
  RestaurantUpsertWithoutEquipmentInputSchema: () => RestaurantUpsertWithoutEquipmentInputSchema,
  RestaurantUpsertWithoutInventoryInputSchema: () => RestaurantUpsertWithoutInventoryInputSchema,
  RestaurantUpsertWithoutLeftoverItemInputSchema: () => RestaurantUpsertWithoutLeftoverItemInputSchema,
  RestaurantUpsertWithoutMenusInputSchema: () => RestaurantUpsertWithoutMenusInputSchema,
  RestaurantUpsertWithoutOrdersInputSchema: () => RestaurantUpsertWithoutOrdersInputSchema,
  RestaurantUpsertWithoutProductionPlanInputSchema: () => RestaurantUpsertWithoutProductionPlanInputSchema,
  RestaurantUpsertWithoutQualityChecklistInputSchema: () => RestaurantUpsertWithoutQualityChecklistInputSchema,
  RestaurantUpsertWithoutQustomerFeedbackInputSchema: () => RestaurantUpsertWithoutQustomerFeedbackInputSchema,
  RestaurantUpsertWithoutRecipesInputSchema: () => RestaurantUpsertWithoutRecipesInputSchema,
  RestaurantUpsertWithoutSalesTransactionsInputSchema: () => RestaurantUpsertWithoutSalesTransactionsInputSchema,
  RestaurantUpsertWithoutUsersInputSchema: () => RestaurantUpsertWithoutUsersInputSchema,
  RestaurantUpsertWithoutWasteRecordInputSchema: () => RestaurantUpsertWithoutWasteRecordInputSchema,
  RestaurantWhereInputSchema: () => RestaurantWhereInputSchema,
  RestaurantWhereUniqueInputSchema: () => RestaurantWhereUniqueInputSchema,
  SalesTransactionsAggregateArgsSchema: () => SalesTransactionsAggregateArgsSchema,
  SalesTransactionsArgsSchema: () => SalesTransactionsArgsSchema,
  SalesTransactionsAvgOrderByAggregateInputSchema: () => SalesTransactionsAvgOrderByAggregateInputSchema,
  SalesTransactionsCountOrderByAggregateInputSchema: () => SalesTransactionsCountOrderByAggregateInputSchema,
  SalesTransactionsCreateArgsSchema: () => SalesTransactionsCreateArgsSchema,
  SalesTransactionsCreateInputSchema: () => SalesTransactionsCreateInputSchema,
  SalesTransactionsCreateManyAndReturnArgsSchema: () => SalesTransactionsCreateManyAndReturnArgsSchema,
  SalesTransactionsCreateManyArgsSchema: () => SalesTransactionsCreateManyArgsSchema,
  SalesTransactionsCreateManyInputSchema: () => SalesTransactionsCreateManyInputSchema,
  SalesTransactionsCreateManyMenuItemInputEnvelopeSchema: () => SalesTransactionsCreateManyMenuItemInputEnvelopeSchema,
  SalesTransactionsCreateManyMenuItemInputSchema: () => SalesTransactionsCreateManyMenuItemInputSchema,
  SalesTransactionsCreateManyRestaurantInputEnvelopeSchema: () => SalesTransactionsCreateManyRestaurantInputEnvelopeSchema,
  SalesTransactionsCreateManyRestaurantInputSchema: () => SalesTransactionsCreateManyRestaurantInputSchema,
  SalesTransactionsCreateNestedManyWithoutMenuItemInputSchema: () => SalesTransactionsCreateNestedManyWithoutMenuItemInputSchema,
  SalesTransactionsCreateNestedManyWithoutRestaurantInputSchema: () => SalesTransactionsCreateNestedManyWithoutRestaurantInputSchema,
  SalesTransactionsCreateOrConnectWithoutMenuItemInputSchema: () => SalesTransactionsCreateOrConnectWithoutMenuItemInputSchema,
  SalesTransactionsCreateOrConnectWithoutRestaurantInputSchema: () => SalesTransactionsCreateOrConnectWithoutRestaurantInputSchema,
  SalesTransactionsCreateWithoutMenuItemInputSchema: () => SalesTransactionsCreateWithoutMenuItemInputSchema,
  SalesTransactionsCreateWithoutRestaurantInputSchema: () => SalesTransactionsCreateWithoutRestaurantInputSchema,
  SalesTransactionsDeleteArgsSchema: () => SalesTransactionsDeleteArgsSchema,
  SalesTransactionsDeleteManyArgsSchema: () => SalesTransactionsDeleteManyArgsSchema,
  SalesTransactionsFindFirstArgsSchema: () => SalesTransactionsFindFirstArgsSchema,
  SalesTransactionsFindFirstOrThrowArgsSchema: () => SalesTransactionsFindFirstOrThrowArgsSchema,
  SalesTransactionsFindManyArgsSchema: () => SalesTransactionsFindManyArgsSchema,
  SalesTransactionsFindUniqueArgsSchema: () => SalesTransactionsFindUniqueArgsSchema,
  SalesTransactionsFindUniqueOrThrowArgsSchema: () => SalesTransactionsFindUniqueOrThrowArgsSchema,
  SalesTransactionsGroupByArgsSchema: () => SalesTransactionsGroupByArgsSchema,
  SalesTransactionsIncludeSchema: () => SalesTransactionsIncludeSchema,
  SalesTransactionsListRelationFilterSchema: () => SalesTransactionsListRelationFilterSchema,
  SalesTransactionsMaxOrderByAggregateInputSchema: () => SalesTransactionsMaxOrderByAggregateInputSchema,
  SalesTransactionsMinOrderByAggregateInputSchema: () => SalesTransactionsMinOrderByAggregateInputSchema,
  SalesTransactionsOrderByRelationAggregateInputSchema: () => SalesTransactionsOrderByRelationAggregateInputSchema,
  SalesTransactionsOrderByWithAggregationInputSchema: () => SalesTransactionsOrderByWithAggregationInputSchema,
  SalesTransactionsOrderByWithRelationInputSchema: () => SalesTransactionsOrderByWithRelationInputSchema,
  SalesTransactionsScalarFieldEnumSchema: () => SalesTransactionsScalarFieldEnumSchema,
  SalesTransactionsScalarWhereInputSchema: () => SalesTransactionsScalarWhereInputSchema,
  SalesTransactionsScalarWhereWithAggregatesInputSchema: () => SalesTransactionsScalarWhereWithAggregatesInputSchema,
  SalesTransactionsSchema: () => SalesTransactionsSchema,
  SalesTransactionsSelectSchema: () => SalesTransactionsSelectSchema,
  SalesTransactionsSumOrderByAggregateInputSchema: () => SalesTransactionsSumOrderByAggregateInputSchema,
  SalesTransactionsUncheckedCreateInputSchema: () => SalesTransactionsUncheckedCreateInputSchema,
  SalesTransactionsUncheckedCreateNestedManyWithoutMenuItemInputSchema: () => SalesTransactionsUncheckedCreateNestedManyWithoutMenuItemInputSchema,
  SalesTransactionsUncheckedCreateNestedManyWithoutRestaurantInputSchema: () => SalesTransactionsUncheckedCreateNestedManyWithoutRestaurantInputSchema,
  SalesTransactionsUncheckedCreateWithoutMenuItemInputSchema: () => SalesTransactionsUncheckedCreateWithoutMenuItemInputSchema,
  SalesTransactionsUncheckedCreateWithoutRestaurantInputSchema: () => SalesTransactionsUncheckedCreateWithoutRestaurantInputSchema,
  SalesTransactionsUncheckedUpdateInputSchema: () => SalesTransactionsUncheckedUpdateInputSchema,
  SalesTransactionsUncheckedUpdateManyInputSchema: () => SalesTransactionsUncheckedUpdateManyInputSchema,
  SalesTransactionsUncheckedUpdateManyWithoutMenuItemInputSchema: () => SalesTransactionsUncheckedUpdateManyWithoutMenuItemInputSchema,
  SalesTransactionsUncheckedUpdateManyWithoutMenuItemNestedInputSchema: () => SalesTransactionsUncheckedUpdateManyWithoutMenuItemNestedInputSchema,
  SalesTransactionsUncheckedUpdateManyWithoutRestaurantInputSchema: () => SalesTransactionsUncheckedUpdateManyWithoutRestaurantInputSchema,
  SalesTransactionsUncheckedUpdateManyWithoutRestaurantNestedInputSchema: () => SalesTransactionsUncheckedUpdateManyWithoutRestaurantNestedInputSchema,
  SalesTransactionsUncheckedUpdateWithoutMenuItemInputSchema: () => SalesTransactionsUncheckedUpdateWithoutMenuItemInputSchema,
  SalesTransactionsUncheckedUpdateWithoutRestaurantInputSchema: () => SalesTransactionsUncheckedUpdateWithoutRestaurantInputSchema,
  SalesTransactionsUpdateArgsSchema: () => SalesTransactionsUpdateArgsSchema,
  SalesTransactionsUpdateInputSchema: () => SalesTransactionsUpdateInputSchema,
  SalesTransactionsUpdateManyArgsSchema: () => SalesTransactionsUpdateManyArgsSchema,
  SalesTransactionsUpdateManyMutationInputSchema: () => SalesTransactionsUpdateManyMutationInputSchema,
  SalesTransactionsUpdateManyWithWhereWithoutMenuItemInputSchema: () => SalesTransactionsUpdateManyWithWhereWithoutMenuItemInputSchema,
  SalesTransactionsUpdateManyWithWhereWithoutRestaurantInputSchema: () => SalesTransactionsUpdateManyWithWhereWithoutRestaurantInputSchema,
  SalesTransactionsUpdateManyWithoutMenuItemNestedInputSchema: () => SalesTransactionsUpdateManyWithoutMenuItemNestedInputSchema,
  SalesTransactionsUpdateManyWithoutRestaurantNestedInputSchema: () => SalesTransactionsUpdateManyWithoutRestaurantNestedInputSchema,
  SalesTransactionsUpdateWithWhereUniqueWithoutMenuItemInputSchema: () => SalesTransactionsUpdateWithWhereUniqueWithoutMenuItemInputSchema,
  SalesTransactionsUpdateWithWhereUniqueWithoutRestaurantInputSchema: () => SalesTransactionsUpdateWithWhereUniqueWithoutRestaurantInputSchema,
  SalesTransactionsUpdateWithoutMenuItemInputSchema: () => SalesTransactionsUpdateWithoutMenuItemInputSchema,
  SalesTransactionsUpdateWithoutRestaurantInputSchema: () => SalesTransactionsUpdateWithoutRestaurantInputSchema,
  SalesTransactionsUpsertArgsSchema: () => SalesTransactionsUpsertArgsSchema,
  SalesTransactionsUpsertWithWhereUniqueWithoutMenuItemInputSchema: () => SalesTransactionsUpsertWithWhereUniqueWithoutMenuItemInputSchema,
  SalesTransactionsUpsertWithWhereUniqueWithoutRestaurantInputSchema: () => SalesTransactionsUpsertWithWhereUniqueWithoutRestaurantInputSchema,
  SalesTransactionsWhereInputSchema: () => SalesTransactionsWhereInputSchema,
  SalesTransactionsWhereUniqueInputSchema: () => SalesTransactionsWhereUniqueInputSchema,
  SchedulingConstraintAggregateArgsSchema: () => SchedulingConstraintAggregateArgsSchema,
  SchedulingConstraintArgsSchema: () => SchedulingConstraintArgsSchema,
  SchedulingConstraintAvgOrderByAggregateInputSchema: () => SchedulingConstraintAvgOrderByAggregateInputSchema,
  SchedulingConstraintCountOrderByAggregateInputSchema: () => SchedulingConstraintCountOrderByAggregateInputSchema,
  SchedulingConstraintCreateArgsSchema: () => SchedulingConstraintCreateArgsSchema,
  SchedulingConstraintCreateInputSchema: () => SchedulingConstraintCreateInputSchema,
  SchedulingConstraintCreateManyAndReturnArgsSchema: () => SchedulingConstraintCreateManyAndReturnArgsSchema,
  SchedulingConstraintCreateManyArgsSchema: () => SchedulingConstraintCreateManyArgsSchema,
  SchedulingConstraintCreateManyInputSchema: () => SchedulingConstraintCreateManyInputSchema,
  SchedulingConstraintCreateManyUserInputEnvelopeSchema: () => SchedulingConstraintCreateManyUserInputEnvelopeSchema,
  SchedulingConstraintCreateManyUserInputSchema: () => SchedulingConstraintCreateManyUserInputSchema,
  SchedulingConstraintCreateNestedManyWithoutUserInputSchema: () => SchedulingConstraintCreateNestedManyWithoutUserInputSchema,
  SchedulingConstraintCreateOrConnectWithoutUserInputSchema: () => SchedulingConstraintCreateOrConnectWithoutUserInputSchema,
  SchedulingConstraintCreateWithoutUserInputSchema: () => SchedulingConstraintCreateWithoutUserInputSchema,
  SchedulingConstraintDeleteArgsSchema: () => SchedulingConstraintDeleteArgsSchema,
  SchedulingConstraintDeleteManyArgsSchema: () => SchedulingConstraintDeleteManyArgsSchema,
  SchedulingConstraintFindFirstArgsSchema: () => SchedulingConstraintFindFirstArgsSchema,
  SchedulingConstraintFindFirstOrThrowArgsSchema: () => SchedulingConstraintFindFirstOrThrowArgsSchema,
  SchedulingConstraintFindManyArgsSchema: () => SchedulingConstraintFindManyArgsSchema,
  SchedulingConstraintFindUniqueArgsSchema: () => SchedulingConstraintFindUniqueArgsSchema,
  SchedulingConstraintFindUniqueOrThrowArgsSchema: () => SchedulingConstraintFindUniqueOrThrowArgsSchema,
  SchedulingConstraintGroupByArgsSchema: () => SchedulingConstraintGroupByArgsSchema,
  SchedulingConstraintIncludeSchema: () => SchedulingConstraintIncludeSchema,
  SchedulingConstraintListRelationFilterSchema: () => SchedulingConstraintListRelationFilterSchema,
  SchedulingConstraintMaxOrderByAggregateInputSchema: () => SchedulingConstraintMaxOrderByAggregateInputSchema,
  SchedulingConstraintMinOrderByAggregateInputSchema: () => SchedulingConstraintMinOrderByAggregateInputSchema,
  SchedulingConstraintOrderByRelationAggregateInputSchema: () => SchedulingConstraintOrderByRelationAggregateInputSchema,
  SchedulingConstraintOrderByWithAggregationInputSchema: () => SchedulingConstraintOrderByWithAggregationInputSchema,
  SchedulingConstraintOrderByWithRelationInputSchema: () => SchedulingConstraintOrderByWithRelationInputSchema,
  SchedulingConstraintScalarFieldEnumSchema: () => SchedulingConstraintScalarFieldEnumSchema,
  SchedulingConstraintScalarWhereInputSchema: () => SchedulingConstraintScalarWhereInputSchema,
  SchedulingConstraintScalarWhereWithAggregatesInputSchema: () => SchedulingConstraintScalarWhereWithAggregatesInputSchema,
  SchedulingConstraintSchema: () => SchedulingConstraintSchema,
  SchedulingConstraintSelectSchema: () => SchedulingConstraintSelectSchema,
  SchedulingConstraintSumOrderByAggregateInputSchema: () => SchedulingConstraintSumOrderByAggregateInputSchema,
  SchedulingConstraintUncheckedCreateInputSchema: () => SchedulingConstraintUncheckedCreateInputSchema,
  SchedulingConstraintUncheckedCreateNestedManyWithoutUserInputSchema: () => SchedulingConstraintUncheckedCreateNestedManyWithoutUserInputSchema,
  SchedulingConstraintUncheckedCreateWithoutUserInputSchema: () => SchedulingConstraintUncheckedCreateWithoutUserInputSchema,
  SchedulingConstraintUncheckedUpdateInputSchema: () => SchedulingConstraintUncheckedUpdateInputSchema,
  SchedulingConstraintUncheckedUpdateManyInputSchema: () => SchedulingConstraintUncheckedUpdateManyInputSchema,
  SchedulingConstraintUncheckedUpdateManyWithoutUserInputSchema: () => SchedulingConstraintUncheckedUpdateManyWithoutUserInputSchema,
  SchedulingConstraintUncheckedUpdateManyWithoutUserNestedInputSchema: () => SchedulingConstraintUncheckedUpdateManyWithoutUserNestedInputSchema,
  SchedulingConstraintUncheckedUpdateWithoutUserInputSchema: () => SchedulingConstraintUncheckedUpdateWithoutUserInputSchema,
  SchedulingConstraintUpdateArgsSchema: () => SchedulingConstraintUpdateArgsSchema,
  SchedulingConstraintUpdateInputSchema: () => SchedulingConstraintUpdateInputSchema,
  SchedulingConstraintUpdateManyArgsSchema: () => SchedulingConstraintUpdateManyArgsSchema,
  SchedulingConstraintUpdateManyMutationInputSchema: () => SchedulingConstraintUpdateManyMutationInputSchema,
  SchedulingConstraintUpdateManyWithWhereWithoutUserInputSchema: () => SchedulingConstraintUpdateManyWithWhereWithoutUserInputSchema,
  SchedulingConstraintUpdateManyWithoutUserNestedInputSchema: () => SchedulingConstraintUpdateManyWithoutUserNestedInputSchema,
  SchedulingConstraintUpdateWithWhereUniqueWithoutUserInputSchema: () => SchedulingConstraintUpdateWithWhereUniqueWithoutUserInputSchema,
  SchedulingConstraintUpdateWithoutUserInputSchema: () => SchedulingConstraintUpdateWithoutUserInputSchema,
  SchedulingConstraintUpsertArgsSchema: () => SchedulingConstraintUpsertArgsSchema,
  SchedulingConstraintUpsertWithWhereUniqueWithoutUserInputSchema: () => SchedulingConstraintUpsertWithWhereUniqueWithoutUserInputSchema,
  SchedulingConstraintWhereInputSchema: () => SchedulingConstraintWhereInputSchema,
  SchedulingConstraintWhereUniqueInputSchema: () => SchedulingConstraintWhereUniqueInputSchema,
  SessionAggregateArgsSchema: () => SessionAggregateArgsSchema,
  SessionArgsSchema: () => SessionArgsSchema,
  SessionAvgOrderByAggregateInputSchema: () => SessionAvgOrderByAggregateInputSchema,
  SessionCountOrderByAggregateInputSchema: () => SessionCountOrderByAggregateInputSchema,
  SessionCreateArgsSchema: () => SessionCreateArgsSchema,
  SessionCreateInputSchema: () => SessionCreateInputSchema,
  SessionCreateManyAndReturnArgsSchema: () => SessionCreateManyAndReturnArgsSchema,
  SessionCreateManyArgsSchema: () => SessionCreateManyArgsSchema,
  SessionCreateManyInputSchema: () => SessionCreateManyInputSchema,
  SessionCreateManyUserInputEnvelopeSchema: () => SessionCreateManyUserInputEnvelopeSchema,
  SessionCreateManyUserInputSchema: () => SessionCreateManyUserInputSchema,
  SessionCreateNestedManyWithoutUserInputSchema: () => SessionCreateNestedManyWithoutUserInputSchema,
  SessionCreateOrConnectWithoutUserInputSchema: () => SessionCreateOrConnectWithoutUserInputSchema,
  SessionCreateWithoutUserInputSchema: () => SessionCreateWithoutUserInputSchema,
  SessionDeleteArgsSchema: () => SessionDeleteArgsSchema,
  SessionDeleteManyArgsSchema: () => SessionDeleteManyArgsSchema,
  SessionFindFirstArgsSchema: () => SessionFindFirstArgsSchema,
  SessionFindFirstOrThrowArgsSchema: () => SessionFindFirstOrThrowArgsSchema,
  SessionFindManyArgsSchema: () => SessionFindManyArgsSchema,
  SessionFindUniqueArgsSchema: () => SessionFindUniqueArgsSchema,
  SessionFindUniqueOrThrowArgsSchema: () => SessionFindUniqueOrThrowArgsSchema,
  SessionGroupByArgsSchema: () => SessionGroupByArgsSchema,
  SessionIncludeSchema: () => SessionIncludeSchema,
  SessionListRelationFilterSchema: () => SessionListRelationFilterSchema,
  SessionMaxOrderByAggregateInputSchema: () => SessionMaxOrderByAggregateInputSchema,
  SessionMinOrderByAggregateInputSchema: () => SessionMinOrderByAggregateInputSchema,
  SessionOrderByRelationAggregateInputSchema: () => SessionOrderByRelationAggregateInputSchema,
  SessionOrderByWithAggregationInputSchema: () => SessionOrderByWithAggregationInputSchema,
  SessionOrderByWithRelationInputSchema: () => SessionOrderByWithRelationInputSchema,
  SessionScalarFieldEnumSchema: () => SessionScalarFieldEnumSchema,
  SessionScalarWhereInputSchema: () => SessionScalarWhereInputSchema,
  SessionScalarWhereWithAggregatesInputSchema: () => SessionScalarWhereWithAggregatesInputSchema,
  SessionSchema: () => SessionSchema,
  SessionSelectSchema: () => SessionSelectSchema,
  SessionSumOrderByAggregateInputSchema: () => SessionSumOrderByAggregateInputSchema,
  SessionUncheckedCreateInputSchema: () => SessionUncheckedCreateInputSchema,
  SessionUncheckedCreateNestedManyWithoutUserInputSchema: () => SessionUncheckedCreateNestedManyWithoutUserInputSchema,
  SessionUncheckedCreateWithoutUserInputSchema: () => SessionUncheckedCreateWithoutUserInputSchema,
  SessionUncheckedUpdateInputSchema: () => SessionUncheckedUpdateInputSchema,
  SessionUncheckedUpdateManyInputSchema: () => SessionUncheckedUpdateManyInputSchema,
  SessionUncheckedUpdateManyWithoutUserInputSchema: () => SessionUncheckedUpdateManyWithoutUserInputSchema,
  SessionUncheckedUpdateManyWithoutUserNestedInputSchema: () => SessionUncheckedUpdateManyWithoutUserNestedInputSchema,
  SessionUncheckedUpdateWithoutUserInputSchema: () => SessionUncheckedUpdateWithoutUserInputSchema,
  SessionUpdateArgsSchema: () => SessionUpdateArgsSchema,
  SessionUpdateInputSchema: () => SessionUpdateInputSchema,
  SessionUpdateManyArgsSchema: () => SessionUpdateManyArgsSchema,
  SessionUpdateManyMutationInputSchema: () => SessionUpdateManyMutationInputSchema,
  SessionUpdateManyWithWhereWithoutUserInputSchema: () => SessionUpdateManyWithWhereWithoutUserInputSchema,
  SessionUpdateManyWithoutUserNestedInputSchema: () => SessionUpdateManyWithoutUserNestedInputSchema,
  SessionUpdateWithWhereUniqueWithoutUserInputSchema: () => SessionUpdateWithWhereUniqueWithoutUserInputSchema,
  SessionUpdateWithoutUserInputSchema: () => SessionUpdateWithoutUserInputSchema,
  SessionUpsertArgsSchema: () => SessionUpsertArgsSchema,
  SessionUpsertWithWhereUniqueWithoutUserInputSchema: () => SessionUpsertWithWhereUniqueWithoutUserInputSchema,
  SessionWhereInputSchema: () => SessionWhereInputSchema,
  SessionWhereUniqueInputSchema: () => SessionWhereUniqueInputSchema,
  ShiftAggregateArgsSchema: () => ShiftAggregateArgsSchema,
  ShiftArgsSchema: () => ShiftArgsSchema,
  ShiftAvgOrderByAggregateInputSchema: () => ShiftAvgOrderByAggregateInputSchema,
  ShiftCountOrderByAggregateInputSchema: () => ShiftCountOrderByAggregateInputSchema,
  ShiftCountOutputTypeArgsSchema: () => ShiftCountOutputTypeArgsSchema,
  ShiftCountOutputTypeSelectSchema: () => ShiftCountOutputTypeSelectSchema,
  ShiftCreateArgsSchema: () => ShiftCreateArgsSchema,
  ShiftCreateInputSchema: () => ShiftCreateInputSchema,
  ShiftCreateManyAndReturnArgsSchema: () => ShiftCreateManyAndReturnArgsSchema,
  ShiftCreateManyArgsSchema: () => ShiftCreateManyArgsSchema,
  ShiftCreateManyInputSchema: () => ShiftCreateManyInputSchema,
  ShiftCreateManyUserInputEnvelopeSchema: () => ShiftCreateManyUserInputEnvelopeSchema,
  ShiftCreateManyUserInputSchema: () => ShiftCreateManyUserInputSchema,
  ShiftCreateNestedManyWithoutUserInputSchema: () => ShiftCreateNestedManyWithoutUserInputSchema,
  ShiftCreateNestedOneWithoutShiftTaskInputSchema: () => ShiftCreateNestedOneWithoutShiftTaskInputSchema,
  ShiftCreateOrConnectWithoutShiftTaskInputSchema: () => ShiftCreateOrConnectWithoutShiftTaskInputSchema,
  ShiftCreateOrConnectWithoutUserInputSchema: () => ShiftCreateOrConnectWithoutUserInputSchema,
  ShiftCreateWithoutShiftTaskInputSchema: () => ShiftCreateWithoutShiftTaskInputSchema,
  ShiftCreateWithoutUserInputSchema: () => ShiftCreateWithoutUserInputSchema,
  ShiftDeleteArgsSchema: () => ShiftDeleteArgsSchema,
  ShiftDeleteManyArgsSchema: () => ShiftDeleteManyArgsSchema,
  ShiftFindFirstArgsSchema: () => ShiftFindFirstArgsSchema,
  ShiftFindFirstOrThrowArgsSchema: () => ShiftFindFirstOrThrowArgsSchema,
  ShiftFindManyArgsSchema: () => ShiftFindManyArgsSchema,
  ShiftFindUniqueArgsSchema: () => ShiftFindUniqueArgsSchema,
  ShiftFindUniqueOrThrowArgsSchema: () => ShiftFindUniqueOrThrowArgsSchema,
  ShiftGroupByArgsSchema: () => ShiftGroupByArgsSchema,
  ShiftIncludeSchema: () => ShiftIncludeSchema,
  ShiftListRelationFilterSchema: () => ShiftListRelationFilterSchema,
  ShiftMaxOrderByAggregateInputSchema: () => ShiftMaxOrderByAggregateInputSchema,
  ShiftMinOrderByAggregateInputSchema: () => ShiftMinOrderByAggregateInputSchema,
  ShiftOrderByRelationAggregateInputSchema: () => ShiftOrderByRelationAggregateInputSchema,
  ShiftOrderByWithAggregationInputSchema: () => ShiftOrderByWithAggregationInputSchema,
  ShiftOrderByWithRelationInputSchema: () => ShiftOrderByWithRelationInputSchema,
  ShiftRelationFilterSchema: () => ShiftRelationFilterSchema,
  ShiftScalarFieldEnumSchema: () => ShiftScalarFieldEnumSchema,
  ShiftScalarWhereInputSchema: () => ShiftScalarWhereInputSchema,
  ShiftScalarWhereWithAggregatesInputSchema: () => ShiftScalarWhereWithAggregatesInputSchema,
  ShiftSchema: () => ShiftSchema,
  ShiftSelectSchema: () => ShiftSelectSchema,
  ShiftStatusSchema: () => ShiftStatusSchema,
  ShiftSumOrderByAggregateInputSchema: () => ShiftSumOrderByAggregateInputSchema,
  ShiftTaskAggregateArgsSchema: () => ShiftTaskAggregateArgsSchema,
  ShiftTaskArgsSchema: () => ShiftTaskArgsSchema,
  ShiftTaskAvgOrderByAggregateInputSchema: () => ShiftTaskAvgOrderByAggregateInputSchema,
  ShiftTaskCountOrderByAggregateInputSchema: () => ShiftTaskCountOrderByAggregateInputSchema,
  ShiftTaskCreateArgsSchema: () => ShiftTaskCreateArgsSchema,
  ShiftTaskCreateInputSchema: () => ShiftTaskCreateInputSchema,
  ShiftTaskCreateManyAndReturnArgsSchema: () => ShiftTaskCreateManyAndReturnArgsSchema,
  ShiftTaskCreateManyArgsSchema: () => ShiftTaskCreateManyArgsSchema,
  ShiftTaskCreateManyInputSchema: () => ShiftTaskCreateManyInputSchema,
  ShiftTaskCreateManyShiftInputEnvelopeSchema: () => ShiftTaskCreateManyShiftInputEnvelopeSchema,
  ShiftTaskCreateManyShiftInputSchema: () => ShiftTaskCreateManyShiftInputSchema,
  ShiftTaskCreateNestedManyWithoutShiftInputSchema: () => ShiftTaskCreateNestedManyWithoutShiftInputSchema,
  ShiftTaskCreateOrConnectWithoutShiftInputSchema: () => ShiftTaskCreateOrConnectWithoutShiftInputSchema,
  ShiftTaskCreateWithoutShiftInputSchema: () => ShiftTaskCreateWithoutShiftInputSchema,
  ShiftTaskDeleteArgsSchema: () => ShiftTaskDeleteArgsSchema,
  ShiftTaskDeleteManyArgsSchema: () => ShiftTaskDeleteManyArgsSchema,
  ShiftTaskFindFirstArgsSchema: () => ShiftTaskFindFirstArgsSchema,
  ShiftTaskFindFirstOrThrowArgsSchema: () => ShiftTaskFindFirstOrThrowArgsSchema,
  ShiftTaskFindManyArgsSchema: () => ShiftTaskFindManyArgsSchema,
  ShiftTaskFindUniqueArgsSchema: () => ShiftTaskFindUniqueArgsSchema,
  ShiftTaskFindUniqueOrThrowArgsSchema: () => ShiftTaskFindUniqueOrThrowArgsSchema,
  ShiftTaskGroupByArgsSchema: () => ShiftTaskGroupByArgsSchema,
  ShiftTaskIncludeSchema: () => ShiftTaskIncludeSchema,
  ShiftTaskListRelationFilterSchema: () => ShiftTaskListRelationFilterSchema,
  ShiftTaskMaxOrderByAggregateInputSchema: () => ShiftTaskMaxOrderByAggregateInputSchema,
  ShiftTaskMinOrderByAggregateInputSchema: () => ShiftTaskMinOrderByAggregateInputSchema,
  ShiftTaskOrderByRelationAggregateInputSchema: () => ShiftTaskOrderByRelationAggregateInputSchema,
  ShiftTaskOrderByWithAggregationInputSchema: () => ShiftTaskOrderByWithAggregationInputSchema,
  ShiftTaskOrderByWithRelationInputSchema: () => ShiftTaskOrderByWithRelationInputSchema,
  ShiftTaskScalarFieldEnumSchema: () => ShiftTaskScalarFieldEnumSchema,
  ShiftTaskScalarWhereInputSchema: () => ShiftTaskScalarWhereInputSchema,
  ShiftTaskScalarWhereWithAggregatesInputSchema: () => ShiftTaskScalarWhereWithAggregatesInputSchema,
  ShiftTaskSchema: () => ShiftTaskSchema,
  ShiftTaskSelectSchema: () => ShiftTaskSelectSchema,
  ShiftTaskSumOrderByAggregateInputSchema: () => ShiftTaskSumOrderByAggregateInputSchema,
  ShiftTaskUncheckedCreateInputSchema: () => ShiftTaskUncheckedCreateInputSchema,
  ShiftTaskUncheckedCreateNestedManyWithoutShiftInputSchema: () => ShiftTaskUncheckedCreateNestedManyWithoutShiftInputSchema,
  ShiftTaskUncheckedCreateWithoutShiftInputSchema: () => ShiftTaskUncheckedCreateWithoutShiftInputSchema,
  ShiftTaskUncheckedUpdateInputSchema: () => ShiftTaskUncheckedUpdateInputSchema,
  ShiftTaskUncheckedUpdateManyInputSchema: () => ShiftTaskUncheckedUpdateManyInputSchema,
  ShiftTaskUncheckedUpdateManyWithoutShiftInputSchema: () => ShiftTaskUncheckedUpdateManyWithoutShiftInputSchema,
  ShiftTaskUncheckedUpdateManyWithoutShiftNestedInputSchema: () => ShiftTaskUncheckedUpdateManyWithoutShiftNestedInputSchema,
  ShiftTaskUncheckedUpdateWithoutShiftInputSchema: () => ShiftTaskUncheckedUpdateWithoutShiftInputSchema,
  ShiftTaskUpdateArgsSchema: () => ShiftTaskUpdateArgsSchema,
  ShiftTaskUpdateInputSchema: () => ShiftTaskUpdateInputSchema,
  ShiftTaskUpdateManyArgsSchema: () => ShiftTaskUpdateManyArgsSchema,
  ShiftTaskUpdateManyMutationInputSchema: () => ShiftTaskUpdateManyMutationInputSchema,
  ShiftTaskUpdateManyWithWhereWithoutShiftInputSchema: () => ShiftTaskUpdateManyWithWhereWithoutShiftInputSchema,
  ShiftTaskUpdateManyWithoutShiftNestedInputSchema: () => ShiftTaskUpdateManyWithoutShiftNestedInputSchema,
  ShiftTaskUpdateWithWhereUniqueWithoutShiftInputSchema: () => ShiftTaskUpdateWithWhereUniqueWithoutShiftInputSchema,
  ShiftTaskUpdateWithoutShiftInputSchema: () => ShiftTaskUpdateWithoutShiftInputSchema,
  ShiftTaskUpsertArgsSchema: () => ShiftTaskUpsertArgsSchema,
  ShiftTaskUpsertWithWhereUniqueWithoutShiftInputSchema: () => ShiftTaskUpsertWithWhereUniqueWithoutShiftInputSchema,
  ShiftTaskWhereInputSchema: () => ShiftTaskWhereInputSchema,
  ShiftTaskWhereUniqueInputSchema: () => ShiftTaskWhereUniqueInputSchema,
  ShiftUncheckedCreateInputSchema: () => ShiftUncheckedCreateInputSchema,
  ShiftUncheckedCreateNestedManyWithoutUserInputSchema: () => ShiftUncheckedCreateNestedManyWithoutUserInputSchema,
  ShiftUncheckedCreateWithoutShiftTaskInputSchema: () => ShiftUncheckedCreateWithoutShiftTaskInputSchema,
  ShiftUncheckedCreateWithoutUserInputSchema: () => ShiftUncheckedCreateWithoutUserInputSchema,
  ShiftUncheckedUpdateInputSchema: () => ShiftUncheckedUpdateInputSchema,
  ShiftUncheckedUpdateManyInputSchema: () => ShiftUncheckedUpdateManyInputSchema,
  ShiftUncheckedUpdateManyWithoutUserInputSchema: () => ShiftUncheckedUpdateManyWithoutUserInputSchema,
  ShiftUncheckedUpdateManyWithoutUserNestedInputSchema: () => ShiftUncheckedUpdateManyWithoutUserNestedInputSchema,
  ShiftUncheckedUpdateWithoutShiftTaskInputSchema: () => ShiftUncheckedUpdateWithoutShiftTaskInputSchema,
  ShiftUncheckedUpdateWithoutUserInputSchema: () => ShiftUncheckedUpdateWithoutUserInputSchema,
  ShiftUpdateArgsSchema: () => ShiftUpdateArgsSchema,
  ShiftUpdateInputSchema: () => ShiftUpdateInputSchema,
  ShiftUpdateManyArgsSchema: () => ShiftUpdateManyArgsSchema,
  ShiftUpdateManyMutationInputSchema: () => ShiftUpdateManyMutationInputSchema,
  ShiftUpdateManyWithWhereWithoutUserInputSchema: () => ShiftUpdateManyWithWhereWithoutUserInputSchema,
  ShiftUpdateManyWithoutUserNestedInputSchema: () => ShiftUpdateManyWithoutUserNestedInputSchema,
  ShiftUpdateOneRequiredWithoutShiftTaskNestedInputSchema: () => ShiftUpdateOneRequiredWithoutShiftTaskNestedInputSchema,
  ShiftUpdateToOneWithWhereWithoutShiftTaskInputSchema: () => ShiftUpdateToOneWithWhereWithoutShiftTaskInputSchema,
  ShiftUpdateWithWhereUniqueWithoutUserInputSchema: () => ShiftUpdateWithWhereUniqueWithoutUserInputSchema,
  ShiftUpdateWithoutShiftTaskInputSchema: () => ShiftUpdateWithoutShiftTaskInputSchema,
  ShiftUpdateWithoutUserInputSchema: () => ShiftUpdateWithoutUserInputSchema,
  ShiftUpsertArgsSchema: () => ShiftUpsertArgsSchema,
  ShiftUpsertWithWhereUniqueWithoutUserInputSchema: () => ShiftUpsertWithWhereUniqueWithoutUserInputSchema,
  ShiftUpsertWithoutShiftTaskInputSchema: () => ShiftUpsertWithoutShiftTaskInputSchema,
  ShiftWhereInputSchema: () => ShiftWhereInputSchema,
  ShiftWhereUniqueInputSchema: () => ShiftWhereUniqueInputSchema,
  SortOrderInputSchema: () => SortOrderInputSchema,
  SortOrderSchema: () => SortOrderSchema,
  StringFieldUpdateOperationsInputSchema: () => StringFieldUpdateOperationsInputSchema,
  StringFilterSchema: () => StringFilterSchema,
  StringNullableFilterSchema: () => StringNullableFilterSchema,
  StringNullableListFilterSchema: () => StringNullableListFilterSchema,
  StringNullableWithAggregatesFilterSchema: () => StringNullableWithAggregatesFilterSchema,
  StringWithAggregatesFilterSchema: () => StringWithAggregatesFilterSchema,
  SupplierPriceHistoryAggregateArgsSchema: () => SupplierPriceHistoryAggregateArgsSchema,
  SupplierPriceHistoryArgsSchema: () => SupplierPriceHistoryArgsSchema,
  SupplierPriceHistoryAvgOrderByAggregateInputSchema: () => SupplierPriceHistoryAvgOrderByAggregateInputSchema,
  SupplierPriceHistoryCountOrderByAggregateInputSchema: () => SupplierPriceHistoryCountOrderByAggregateInputSchema,
  SupplierPriceHistoryCreateArgsSchema: () => SupplierPriceHistoryCreateArgsSchema,
  SupplierPriceHistoryCreateInputSchema: () => SupplierPriceHistoryCreateInputSchema,
  SupplierPriceHistoryCreateManyAndReturnArgsSchema: () => SupplierPriceHistoryCreateManyAndReturnArgsSchema,
  SupplierPriceHistoryCreateManyArgsSchema: () => SupplierPriceHistoryCreateManyArgsSchema,
  SupplierPriceHistoryCreateManyIngredientInputEnvelopeSchema: () => SupplierPriceHistoryCreateManyIngredientInputEnvelopeSchema,
  SupplierPriceHistoryCreateManyIngredientInputSchema: () => SupplierPriceHistoryCreateManyIngredientInputSchema,
  SupplierPriceHistoryCreateManyInputSchema: () => SupplierPriceHistoryCreateManyInputSchema,
  SupplierPriceHistoryCreateManyVendorInputEnvelopeSchema: () => SupplierPriceHistoryCreateManyVendorInputEnvelopeSchema,
  SupplierPriceHistoryCreateManyVendorInputSchema: () => SupplierPriceHistoryCreateManyVendorInputSchema,
  SupplierPriceHistoryCreateNestedManyWithoutIngredientInputSchema: () => SupplierPriceHistoryCreateNestedManyWithoutIngredientInputSchema,
  SupplierPriceHistoryCreateNestedManyWithoutVendorInputSchema: () => SupplierPriceHistoryCreateNestedManyWithoutVendorInputSchema,
  SupplierPriceHistoryCreateOrConnectWithoutIngredientInputSchema: () => SupplierPriceHistoryCreateOrConnectWithoutIngredientInputSchema,
  SupplierPriceHistoryCreateOrConnectWithoutVendorInputSchema: () => SupplierPriceHistoryCreateOrConnectWithoutVendorInputSchema,
  SupplierPriceHistoryCreateWithoutIngredientInputSchema: () => SupplierPriceHistoryCreateWithoutIngredientInputSchema,
  SupplierPriceHistoryCreateWithoutVendorInputSchema: () => SupplierPriceHistoryCreateWithoutVendorInputSchema,
  SupplierPriceHistoryDeleteArgsSchema: () => SupplierPriceHistoryDeleteArgsSchema,
  SupplierPriceHistoryDeleteManyArgsSchema: () => SupplierPriceHistoryDeleteManyArgsSchema,
  SupplierPriceHistoryFindFirstArgsSchema: () => SupplierPriceHistoryFindFirstArgsSchema,
  SupplierPriceHistoryFindFirstOrThrowArgsSchema: () => SupplierPriceHistoryFindFirstOrThrowArgsSchema,
  SupplierPriceHistoryFindManyArgsSchema: () => SupplierPriceHistoryFindManyArgsSchema,
  SupplierPriceHistoryFindUniqueArgsSchema: () => SupplierPriceHistoryFindUniqueArgsSchema,
  SupplierPriceHistoryFindUniqueOrThrowArgsSchema: () => SupplierPriceHistoryFindUniqueOrThrowArgsSchema,
  SupplierPriceHistoryGroupByArgsSchema: () => SupplierPriceHistoryGroupByArgsSchema,
  SupplierPriceHistoryIncludeSchema: () => SupplierPriceHistoryIncludeSchema,
  SupplierPriceHistoryListRelationFilterSchema: () => SupplierPriceHistoryListRelationFilterSchema,
  SupplierPriceHistoryMaxOrderByAggregateInputSchema: () => SupplierPriceHistoryMaxOrderByAggregateInputSchema,
  SupplierPriceHistoryMinOrderByAggregateInputSchema: () => SupplierPriceHistoryMinOrderByAggregateInputSchema,
  SupplierPriceHistoryOrderByRelationAggregateInputSchema: () => SupplierPriceHistoryOrderByRelationAggregateInputSchema,
  SupplierPriceHistoryOrderByWithAggregationInputSchema: () => SupplierPriceHistoryOrderByWithAggregationInputSchema,
  SupplierPriceHistoryOrderByWithRelationInputSchema: () => SupplierPriceHistoryOrderByWithRelationInputSchema,
  SupplierPriceHistoryScalarFieldEnumSchema: () => SupplierPriceHistoryScalarFieldEnumSchema,
  SupplierPriceHistoryScalarWhereInputSchema: () => SupplierPriceHistoryScalarWhereInputSchema,
  SupplierPriceHistoryScalarWhereWithAggregatesInputSchema: () => SupplierPriceHistoryScalarWhereWithAggregatesInputSchema,
  SupplierPriceHistorySchema: () => SupplierPriceHistorySchema,
  SupplierPriceHistorySelectSchema: () => SupplierPriceHistorySelectSchema,
  SupplierPriceHistorySumOrderByAggregateInputSchema: () => SupplierPriceHistorySumOrderByAggregateInputSchema,
  SupplierPriceHistoryUncheckedCreateInputSchema: () => SupplierPriceHistoryUncheckedCreateInputSchema,
  SupplierPriceHistoryUncheckedCreateNestedManyWithoutIngredientInputSchema: () => SupplierPriceHistoryUncheckedCreateNestedManyWithoutIngredientInputSchema,
  SupplierPriceHistoryUncheckedCreateNestedManyWithoutVendorInputSchema: () => SupplierPriceHistoryUncheckedCreateNestedManyWithoutVendorInputSchema,
  SupplierPriceHistoryUncheckedCreateWithoutIngredientInputSchema: () => SupplierPriceHistoryUncheckedCreateWithoutIngredientInputSchema,
  SupplierPriceHistoryUncheckedCreateWithoutVendorInputSchema: () => SupplierPriceHistoryUncheckedCreateWithoutVendorInputSchema,
  SupplierPriceHistoryUncheckedUpdateInputSchema: () => SupplierPriceHistoryUncheckedUpdateInputSchema,
  SupplierPriceHistoryUncheckedUpdateManyInputSchema: () => SupplierPriceHistoryUncheckedUpdateManyInputSchema,
  SupplierPriceHistoryUncheckedUpdateManyWithoutIngredientInputSchema: () => SupplierPriceHistoryUncheckedUpdateManyWithoutIngredientInputSchema,
  SupplierPriceHistoryUncheckedUpdateManyWithoutIngredientNestedInputSchema: () => SupplierPriceHistoryUncheckedUpdateManyWithoutIngredientNestedInputSchema,
  SupplierPriceHistoryUncheckedUpdateManyWithoutVendorInputSchema: () => SupplierPriceHistoryUncheckedUpdateManyWithoutVendorInputSchema,
  SupplierPriceHistoryUncheckedUpdateManyWithoutVendorNestedInputSchema: () => SupplierPriceHistoryUncheckedUpdateManyWithoutVendorNestedInputSchema,
  SupplierPriceHistoryUncheckedUpdateWithoutIngredientInputSchema: () => SupplierPriceHistoryUncheckedUpdateWithoutIngredientInputSchema,
  SupplierPriceHistoryUncheckedUpdateWithoutVendorInputSchema: () => SupplierPriceHistoryUncheckedUpdateWithoutVendorInputSchema,
  SupplierPriceHistoryUpdateArgsSchema: () => SupplierPriceHistoryUpdateArgsSchema,
  SupplierPriceHistoryUpdateInputSchema: () => SupplierPriceHistoryUpdateInputSchema,
  SupplierPriceHistoryUpdateManyArgsSchema: () => SupplierPriceHistoryUpdateManyArgsSchema,
  SupplierPriceHistoryUpdateManyMutationInputSchema: () => SupplierPriceHistoryUpdateManyMutationInputSchema,
  SupplierPriceHistoryUpdateManyWithWhereWithoutIngredientInputSchema: () => SupplierPriceHistoryUpdateManyWithWhereWithoutIngredientInputSchema,
  SupplierPriceHistoryUpdateManyWithWhereWithoutVendorInputSchema: () => SupplierPriceHistoryUpdateManyWithWhereWithoutVendorInputSchema,
  SupplierPriceHistoryUpdateManyWithoutIngredientNestedInputSchema: () => SupplierPriceHistoryUpdateManyWithoutIngredientNestedInputSchema,
  SupplierPriceHistoryUpdateManyWithoutVendorNestedInputSchema: () => SupplierPriceHistoryUpdateManyWithoutVendorNestedInputSchema,
  SupplierPriceHistoryUpdateWithWhereUniqueWithoutIngredientInputSchema: () => SupplierPriceHistoryUpdateWithWhereUniqueWithoutIngredientInputSchema,
  SupplierPriceHistoryUpdateWithWhereUniqueWithoutVendorInputSchema: () => SupplierPriceHistoryUpdateWithWhereUniqueWithoutVendorInputSchema,
  SupplierPriceHistoryUpdateWithoutIngredientInputSchema: () => SupplierPriceHistoryUpdateWithoutIngredientInputSchema,
  SupplierPriceHistoryUpdateWithoutVendorInputSchema: () => SupplierPriceHistoryUpdateWithoutVendorInputSchema,
  SupplierPriceHistoryUpsertArgsSchema: () => SupplierPriceHistoryUpsertArgsSchema,
  SupplierPriceHistoryUpsertWithWhereUniqueWithoutIngredientInputSchema: () => SupplierPriceHistoryUpsertWithWhereUniqueWithoutIngredientInputSchema,
  SupplierPriceHistoryUpsertWithWhereUniqueWithoutVendorInputSchema: () => SupplierPriceHistoryUpsertWithWhereUniqueWithoutVendorInputSchema,
  SupplierPriceHistoryWhereInputSchema: () => SupplierPriceHistoryWhereInputSchema,
  SupplierPriceHistoryWhereUniqueInputSchema: () => SupplierPriceHistoryWhereUniqueInputSchema,
  TaskTypeSchema: () => TaskTypeSchema,
  TransactionIsolationLevelSchema: () => TransactionIsolationLevelSchema,
  UserAggregateArgsSchema: () => UserAggregateArgsSchema,
  UserArgsSchema: () => UserArgsSchema,
  UserAvgOrderByAggregateInputSchema: () => UserAvgOrderByAggregateInputSchema,
  UserCountOrderByAggregateInputSchema: () => UserCountOrderByAggregateInputSchema,
  UserCountOutputTypeArgsSchema: () => UserCountOutputTypeArgsSchema,
  UserCountOutputTypeSelectSchema: () => UserCountOutputTypeSelectSchema,
  UserCreateArgsSchema: () => UserCreateArgsSchema,
  UserCreateInputSchema: () => UserCreateInputSchema,
  UserCreateManyAndReturnArgsSchema: () => UserCreateManyAndReturnArgsSchema,
  UserCreateManyArgsSchema: () => UserCreateManyArgsSchema,
  UserCreateManyInputSchema: () => UserCreateManyInputSchema,
  UserCreateManyOrganizationInputEnvelopeSchema: () => UserCreateManyOrganizationInputEnvelopeSchema,
  UserCreateManyOrganizationInputSchema: () => UserCreateManyOrganizationInputSchema,
  UserCreateManyRestaurantInputEnvelopeSchema: () => UserCreateManyRestaurantInputEnvelopeSchema,
  UserCreateManyRestaurantInputSchema: () => UserCreateManyRestaurantInputSchema,
  UserCreateNestedManyWithoutOrganizationInputSchema: () => UserCreateNestedManyWithoutOrganizationInputSchema,
  UserCreateNestedManyWithoutRestaurantInputSchema: () => UserCreateNestedManyWithoutRestaurantInputSchema,
  UserCreateNestedOneWithoutAvailabilityInputSchema: () => UserCreateNestedOneWithoutAvailabilityInputSchema,
  UserCreateNestedOneWithoutChecklistCompleteInputSchema: () => UserCreateNestedOneWithoutChecklistCompleteInputSchema,
  UserCreateNestedOneWithoutCustomerFeedbackInputSchema: () => UserCreateNestedOneWithoutCustomerFeedbackInputSchema,
  UserCreateNestedOneWithoutInventoryUpdatesInputSchema: () => UserCreateNestedOneWithoutInventoryUpdatesInputSchema,
  UserCreateNestedOneWithoutInventoryWithdrawalInputSchema: () => UserCreateNestedOneWithoutInventoryWithdrawalInputSchema,
  UserCreateNestedOneWithoutLeftoverItemInputSchema: () => UserCreateNestedOneWithoutLeftoverItemInputSchema,
  UserCreateNestedOneWithoutPasswordResetsInputSchema: () => UserCreateNestedOneWithoutPasswordResetsInputSchema,
  UserCreateNestedOneWithoutPrepItemsInputSchema: () => UserCreateNestedOneWithoutPrepItemsInputSchema,
  UserCreateNestedOneWithoutProductionPlanInputSchema: () => UserCreateNestedOneWithoutProductionPlanInputSchema,
  UserCreateNestedOneWithoutProductionPlanItemInputSchema: () => UserCreateNestedOneWithoutProductionPlanItemInputSchema,
  UserCreateNestedOneWithoutRecipeVersionsApprovedInputSchema: () => UserCreateNestedOneWithoutRecipeVersionsApprovedInputSchema,
  UserCreateNestedOneWithoutRecipeVersionsCreatedInputSchema: () => UserCreateNestedOneWithoutRecipeVersionsCreatedInputSchema,
  UserCreateNestedOneWithoutSchedulingConstraintInputSchema: () => UserCreateNestedOneWithoutSchedulingConstraintInputSchema,
  UserCreateNestedOneWithoutSessionsInputSchema: () => UserCreateNestedOneWithoutSessionsInputSchema,
  UserCreateNestedOneWithoutShiftsInputSchema: () => UserCreateNestedOneWithoutShiftsInputSchema,
  UserCreateNestedOneWithoutWasteRecordInputSchema: () => UserCreateNestedOneWithoutWasteRecordInputSchema,
  UserCreateOrConnectWithoutAvailabilityInputSchema: () => UserCreateOrConnectWithoutAvailabilityInputSchema,
  UserCreateOrConnectWithoutChecklistCompleteInputSchema: () => UserCreateOrConnectWithoutChecklistCompleteInputSchema,
  UserCreateOrConnectWithoutCustomerFeedbackInputSchema: () => UserCreateOrConnectWithoutCustomerFeedbackInputSchema,
  UserCreateOrConnectWithoutInventoryUpdatesInputSchema: () => UserCreateOrConnectWithoutInventoryUpdatesInputSchema,
  UserCreateOrConnectWithoutInventoryWithdrawalInputSchema: () => UserCreateOrConnectWithoutInventoryWithdrawalInputSchema,
  UserCreateOrConnectWithoutLeftoverItemInputSchema: () => UserCreateOrConnectWithoutLeftoverItemInputSchema,
  UserCreateOrConnectWithoutOrganizationInputSchema: () => UserCreateOrConnectWithoutOrganizationInputSchema,
  UserCreateOrConnectWithoutPasswordResetsInputSchema: () => UserCreateOrConnectWithoutPasswordResetsInputSchema,
  UserCreateOrConnectWithoutPrepItemsInputSchema: () => UserCreateOrConnectWithoutPrepItemsInputSchema,
  UserCreateOrConnectWithoutProductionPlanInputSchema: () => UserCreateOrConnectWithoutProductionPlanInputSchema,
  UserCreateOrConnectWithoutProductionPlanItemInputSchema: () => UserCreateOrConnectWithoutProductionPlanItemInputSchema,
  UserCreateOrConnectWithoutRecipeVersionsApprovedInputSchema: () => UserCreateOrConnectWithoutRecipeVersionsApprovedInputSchema,
  UserCreateOrConnectWithoutRecipeVersionsCreatedInputSchema: () => UserCreateOrConnectWithoutRecipeVersionsCreatedInputSchema,
  UserCreateOrConnectWithoutRestaurantInputSchema: () => UserCreateOrConnectWithoutRestaurantInputSchema,
  UserCreateOrConnectWithoutSchedulingConstraintInputSchema: () => UserCreateOrConnectWithoutSchedulingConstraintInputSchema,
  UserCreateOrConnectWithoutSessionsInputSchema: () => UserCreateOrConnectWithoutSessionsInputSchema,
  UserCreateOrConnectWithoutShiftsInputSchema: () => UserCreateOrConnectWithoutShiftsInputSchema,
  UserCreateOrConnectWithoutWasteRecordInputSchema: () => UserCreateOrConnectWithoutWasteRecordInputSchema,
  UserCreateWithoutAvailabilityInputSchema: () => UserCreateWithoutAvailabilityInputSchema,
  UserCreateWithoutChecklistCompleteInputSchema: () => UserCreateWithoutChecklistCompleteInputSchema,
  UserCreateWithoutCustomerFeedbackInputSchema: () => UserCreateWithoutCustomerFeedbackInputSchema,
  UserCreateWithoutInventoryUpdatesInputSchema: () => UserCreateWithoutInventoryUpdatesInputSchema,
  UserCreateWithoutInventoryWithdrawalInputSchema: () => UserCreateWithoutInventoryWithdrawalInputSchema,
  UserCreateWithoutLeftoverItemInputSchema: () => UserCreateWithoutLeftoverItemInputSchema,
  UserCreateWithoutOrganizationInputSchema: () => UserCreateWithoutOrganizationInputSchema,
  UserCreateWithoutPasswordResetsInputSchema: () => UserCreateWithoutPasswordResetsInputSchema,
  UserCreateWithoutPrepItemsInputSchema: () => UserCreateWithoutPrepItemsInputSchema,
  UserCreateWithoutProductionPlanInputSchema: () => UserCreateWithoutProductionPlanInputSchema,
  UserCreateWithoutProductionPlanItemInputSchema: () => UserCreateWithoutProductionPlanItemInputSchema,
  UserCreateWithoutRecipeVersionsApprovedInputSchema: () => UserCreateWithoutRecipeVersionsApprovedInputSchema,
  UserCreateWithoutRecipeVersionsCreatedInputSchema: () => UserCreateWithoutRecipeVersionsCreatedInputSchema,
  UserCreateWithoutRestaurantInputSchema: () => UserCreateWithoutRestaurantInputSchema,
  UserCreateWithoutSchedulingConstraintInputSchema: () => UserCreateWithoutSchedulingConstraintInputSchema,
  UserCreateWithoutSessionsInputSchema: () => UserCreateWithoutSessionsInputSchema,
  UserCreateWithoutShiftsInputSchema: () => UserCreateWithoutShiftsInputSchema,
  UserCreateWithoutWasteRecordInputSchema: () => UserCreateWithoutWasteRecordInputSchema,
  UserDeleteArgsSchema: () => UserDeleteArgsSchema,
  UserDeleteManyArgsSchema: () => UserDeleteManyArgsSchema,
  UserFindFirstArgsSchema: () => UserFindFirstArgsSchema,
  UserFindFirstOrThrowArgsSchema: () => UserFindFirstOrThrowArgsSchema,
  UserFindManyArgsSchema: () => UserFindManyArgsSchema,
  UserFindUniqueArgsSchema: () => UserFindUniqueArgsSchema,
  UserFindUniqueOrThrowArgsSchema: () => UserFindUniqueOrThrowArgsSchema,
  UserGroupByArgsSchema: () => UserGroupByArgsSchema,
  UserIncludeSchema: () => UserIncludeSchema,
  UserListRelationFilterSchema: () => UserListRelationFilterSchema,
  UserMaxOrderByAggregateInputSchema: () => UserMaxOrderByAggregateInputSchema,
  UserMinOrderByAggregateInputSchema: () => UserMinOrderByAggregateInputSchema,
  UserNullableRelationFilterSchema: () => UserNullableRelationFilterSchema,
  UserOrderByRelationAggregateInputSchema: () => UserOrderByRelationAggregateInputSchema,
  UserOrderByWithAggregationInputSchema: () => UserOrderByWithAggregationInputSchema,
  UserOrderByWithRelationInputSchema: () => UserOrderByWithRelationInputSchema,
  UserRelationFilterSchema: () => UserRelationFilterSchema,
  UserRoleSchema: () => UserRoleSchema,
  UserScalarFieldEnumSchema: () => UserScalarFieldEnumSchema,
  UserScalarWhereInputSchema: () => UserScalarWhereInputSchema,
  UserScalarWhereWithAggregatesInputSchema: () => UserScalarWhereWithAggregatesInputSchema,
  UserSchema: () => UserSchema,
  UserSelectSchema: () => UserSelectSchema,
  UserSumOrderByAggregateInputSchema: () => UserSumOrderByAggregateInputSchema,
  UserUncheckedCreateInputSchema: () => UserUncheckedCreateInputSchema,
  UserUncheckedCreateNestedManyWithoutOrganizationInputSchema: () => UserUncheckedCreateNestedManyWithoutOrganizationInputSchema,
  UserUncheckedCreateNestedManyWithoutRestaurantInputSchema: () => UserUncheckedCreateNestedManyWithoutRestaurantInputSchema,
  UserUncheckedCreateWithoutAvailabilityInputSchema: () => UserUncheckedCreateWithoutAvailabilityInputSchema,
  UserUncheckedCreateWithoutChecklistCompleteInputSchema: () => UserUncheckedCreateWithoutChecklistCompleteInputSchema,
  UserUncheckedCreateWithoutCustomerFeedbackInputSchema: () => UserUncheckedCreateWithoutCustomerFeedbackInputSchema,
  UserUncheckedCreateWithoutInventoryUpdatesInputSchema: () => UserUncheckedCreateWithoutInventoryUpdatesInputSchema,
  UserUncheckedCreateWithoutInventoryWithdrawalInputSchema: () => UserUncheckedCreateWithoutInventoryWithdrawalInputSchema,
  UserUncheckedCreateWithoutLeftoverItemInputSchema: () => UserUncheckedCreateWithoutLeftoverItemInputSchema,
  UserUncheckedCreateWithoutOrganizationInputSchema: () => UserUncheckedCreateWithoutOrganizationInputSchema,
  UserUncheckedCreateWithoutPasswordResetsInputSchema: () => UserUncheckedCreateWithoutPasswordResetsInputSchema,
  UserUncheckedCreateWithoutPrepItemsInputSchema: () => UserUncheckedCreateWithoutPrepItemsInputSchema,
  UserUncheckedCreateWithoutProductionPlanInputSchema: () => UserUncheckedCreateWithoutProductionPlanInputSchema,
  UserUncheckedCreateWithoutProductionPlanItemInputSchema: () => UserUncheckedCreateWithoutProductionPlanItemInputSchema,
  UserUncheckedCreateWithoutRecipeVersionsApprovedInputSchema: () => UserUncheckedCreateWithoutRecipeVersionsApprovedInputSchema,
  UserUncheckedCreateWithoutRecipeVersionsCreatedInputSchema: () => UserUncheckedCreateWithoutRecipeVersionsCreatedInputSchema,
  UserUncheckedCreateWithoutRestaurantInputSchema: () => UserUncheckedCreateWithoutRestaurantInputSchema,
  UserUncheckedCreateWithoutSchedulingConstraintInputSchema: () => UserUncheckedCreateWithoutSchedulingConstraintInputSchema,
  UserUncheckedCreateWithoutSessionsInputSchema: () => UserUncheckedCreateWithoutSessionsInputSchema,
  UserUncheckedCreateWithoutShiftsInputSchema: () => UserUncheckedCreateWithoutShiftsInputSchema,
  UserUncheckedCreateWithoutWasteRecordInputSchema: () => UserUncheckedCreateWithoutWasteRecordInputSchema,
  UserUncheckedUpdateInputSchema: () => UserUncheckedUpdateInputSchema,
  UserUncheckedUpdateManyInputSchema: () => UserUncheckedUpdateManyInputSchema,
  UserUncheckedUpdateManyWithoutOrganizationInputSchema: () => UserUncheckedUpdateManyWithoutOrganizationInputSchema,
  UserUncheckedUpdateManyWithoutOrganizationNestedInputSchema: () => UserUncheckedUpdateManyWithoutOrganizationNestedInputSchema,
  UserUncheckedUpdateManyWithoutRestaurantInputSchema: () => UserUncheckedUpdateManyWithoutRestaurantInputSchema,
  UserUncheckedUpdateManyWithoutRestaurantNestedInputSchema: () => UserUncheckedUpdateManyWithoutRestaurantNestedInputSchema,
  UserUncheckedUpdateWithoutAvailabilityInputSchema: () => UserUncheckedUpdateWithoutAvailabilityInputSchema,
  UserUncheckedUpdateWithoutChecklistCompleteInputSchema: () => UserUncheckedUpdateWithoutChecklistCompleteInputSchema,
  UserUncheckedUpdateWithoutCustomerFeedbackInputSchema: () => UserUncheckedUpdateWithoutCustomerFeedbackInputSchema,
  UserUncheckedUpdateWithoutInventoryUpdatesInputSchema: () => UserUncheckedUpdateWithoutInventoryUpdatesInputSchema,
  UserUncheckedUpdateWithoutInventoryWithdrawalInputSchema: () => UserUncheckedUpdateWithoutInventoryWithdrawalInputSchema,
  UserUncheckedUpdateWithoutLeftoverItemInputSchema: () => UserUncheckedUpdateWithoutLeftoverItemInputSchema,
  UserUncheckedUpdateWithoutOrganizationInputSchema: () => UserUncheckedUpdateWithoutOrganizationInputSchema,
  UserUncheckedUpdateWithoutPasswordResetsInputSchema: () => UserUncheckedUpdateWithoutPasswordResetsInputSchema,
  UserUncheckedUpdateWithoutPrepItemsInputSchema: () => UserUncheckedUpdateWithoutPrepItemsInputSchema,
  UserUncheckedUpdateWithoutProductionPlanInputSchema: () => UserUncheckedUpdateWithoutProductionPlanInputSchema,
  UserUncheckedUpdateWithoutProductionPlanItemInputSchema: () => UserUncheckedUpdateWithoutProductionPlanItemInputSchema,
  UserUncheckedUpdateWithoutRecipeVersionsApprovedInputSchema: () => UserUncheckedUpdateWithoutRecipeVersionsApprovedInputSchema,
  UserUncheckedUpdateWithoutRecipeVersionsCreatedInputSchema: () => UserUncheckedUpdateWithoutRecipeVersionsCreatedInputSchema,
  UserUncheckedUpdateWithoutRestaurantInputSchema: () => UserUncheckedUpdateWithoutRestaurantInputSchema,
  UserUncheckedUpdateWithoutSchedulingConstraintInputSchema: () => UserUncheckedUpdateWithoutSchedulingConstraintInputSchema,
  UserUncheckedUpdateWithoutSessionsInputSchema: () => UserUncheckedUpdateWithoutSessionsInputSchema,
  UserUncheckedUpdateWithoutShiftsInputSchema: () => UserUncheckedUpdateWithoutShiftsInputSchema,
  UserUncheckedUpdateWithoutWasteRecordInputSchema: () => UserUncheckedUpdateWithoutWasteRecordInputSchema,
  UserUpdateArgsSchema: () => UserUpdateArgsSchema,
  UserUpdateInputSchema: () => UserUpdateInputSchema,
  UserUpdateManyArgsSchema: () => UserUpdateManyArgsSchema,
  UserUpdateManyMutationInputSchema: () => UserUpdateManyMutationInputSchema,
  UserUpdateManyWithWhereWithoutOrganizationInputSchema: () => UserUpdateManyWithWhereWithoutOrganizationInputSchema,
  UserUpdateManyWithWhereWithoutRestaurantInputSchema: () => UserUpdateManyWithWhereWithoutRestaurantInputSchema,
  UserUpdateManyWithoutOrganizationNestedInputSchema: () => UserUpdateManyWithoutOrganizationNestedInputSchema,
  UserUpdateManyWithoutRestaurantNestedInputSchema: () => UserUpdateManyWithoutRestaurantNestedInputSchema,
  UserUpdateOneRequiredWithoutAvailabilityNestedInputSchema: () => UserUpdateOneRequiredWithoutAvailabilityNestedInputSchema,
  UserUpdateOneRequiredWithoutChecklistCompleteNestedInputSchema: () => UserUpdateOneRequiredWithoutChecklistCompleteNestedInputSchema,
  UserUpdateOneRequiredWithoutInventoryWithdrawalNestedInputSchema: () => UserUpdateOneRequiredWithoutInventoryWithdrawalNestedInputSchema,
  UserUpdateOneRequiredWithoutLeftoverItemNestedInputSchema: () => UserUpdateOneRequiredWithoutLeftoverItemNestedInputSchema,
  UserUpdateOneRequiredWithoutPasswordResetsNestedInputSchema: () => UserUpdateOneRequiredWithoutPasswordResetsNestedInputSchema,
  UserUpdateOneRequiredWithoutPrepItemsNestedInputSchema: () => UserUpdateOneRequiredWithoutPrepItemsNestedInputSchema,
  UserUpdateOneRequiredWithoutProductionPlanNestedInputSchema: () => UserUpdateOneRequiredWithoutProductionPlanNestedInputSchema,
  UserUpdateOneRequiredWithoutRecipeVersionsCreatedNestedInputSchema: () => UserUpdateOneRequiredWithoutRecipeVersionsCreatedNestedInputSchema,
  UserUpdateOneRequiredWithoutSchedulingConstraintNestedInputSchema: () => UserUpdateOneRequiredWithoutSchedulingConstraintNestedInputSchema,
  UserUpdateOneRequiredWithoutSessionsNestedInputSchema: () => UserUpdateOneRequiredWithoutSessionsNestedInputSchema,
  UserUpdateOneRequiredWithoutShiftsNestedInputSchema: () => UserUpdateOneRequiredWithoutShiftsNestedInputSchema,
  UserUpdateOneRequiredWithoutWasteRecordNestedInputSchema: () => UserUpdateOneRequiredWithoutWasteRecordNestedInputSchema,
  UserUpdateOneWithoutCustomerFeedbackNestedInputSchema: () => UserUpdateOneWithoutCustomerFeedbackNestedInputSchema,
  UserUpdateOneWithoutInventoryUpdatesNestedInputSchema: () => UserUpdateOneWithoutInventoryUpdatesNestedInputSchema,
  UserUpdateOneWithoutProductionPlanItemNestedInputSchema: () => UserUpdateOneWithoutProductionPlanItemNestedInputSchema,
  UserUpdateOneWithoutRecipeVersionsApprovedNestedInputSchema: () => UserUpdateOneWithoutRecipeVersionsApprovedNestedInputSchema,
  UserUpdateToOneWithWhereWithoutAvailabilityInputSchema: () => UserUpdateToOneWithWhereWithoutAvailabilityInputSchema,
  UserUpdateToOneWithWhereWithoutChecklistCompleteInputSchema: () => UserUpdateToOneWithWhereWithoutChecklistCompleteInputSchema,
  UserUpdateToOneWithWhereWithoutCustomerFeedbackInputSchema: () => UserUpdateToOneWithWhereWithoutCustomerFeedbackInputSchema,
  UserUpdateToOneWithWhereWithoutInventoryUpdatesInputSchema: () => UserUpdateToOneWithWhereWithoutInventoryUpdatesInputSchema,
  UserUpdateToOneWithWhereWithoutInventoryWithdrawalInputSchema: () => UserUpdateToOneWithWhereWithoutInventoryWithdrawalInputSchema,
  UserUpdateToOneWithWhereWithoutLeftoverItemInputSchema: () => UserUpdateToOneWithWhereWithoutLeftoverItemInputSchema,
  UserUpdateToOneWithWhereWithoutPasswordResetsInputSchema: () => UserUpdateToOneWithWhereWithoutPasswordResetsInputSchema,
  UserUpdateToOneWithWhereWithoutPrepItemsInputSchema: () => UserUpdateToOneWithWhereWithoutPrepItemsInputSchema,
  UserUpdateToOneWithWhereWithoutProductionPlanInputSchema: () => UserUpdateToOneWithWhereWithoutProductionPlanInputSchema,
  UserUpdateToOneWithWhereWithoutProductionPlanItemInputSchema: () => UserUpdateToOneWithWhereWithoutProductionPlanItemInputSchema,
  UserUpdateToOneWithWhereWithoutRecipeVersionsApprovedInputSchema: () => UserUpdateToOneWithWhereWithoutRecipeVersionsApprovedInputSchema,
  UserUpdateToOneWithWhereWithoutRecipeVersionsCreatedInputSchema: () => UserUpdateToOneWithWhereWithoutRecipeVersionsCreatedInputSchema,
  UserUpdateToOneWithWhereWithoutSchedulingConstraintInputSchema: () => UserUpdateToOneWithWhereWithoutSchedulingConstraintInputSchema,
  UserUpdateToOneWithWhereWithoutSessionsInputSchema: () => UserUpdateToOneWithWhereWithoutSessionsInputSchema,
  UserUpdateToOneWithWhereWithoutShiftsInputSchema: () => UserUpdateToOneWithWhereWithoutShiftsInputSchema,
  UserUpdateToOneWithWhereWithoutWasteRecordInputSchema: () => UserUpdateToOneWithWhereWithoutWasteRecordInputSchema,
  UserUpdateWithWhereUniqueWithoutOrganizationInputSchema: () => UserUpdateWithWhereUniqueWithoutOrganizationInputSchema,
  UserUpdateWithWhereUniqueWithoutRestaurantInputSchema: () => UserUpdateWithWhereUniqueWithoutRestaurantInputSchema,
  UserUpdateWithoutAvailabilityInputSchema: () => UserUpdateWithoutAvailabilityInputSchema,
  UserUpdateWithoutChecklistCompleteInputSchema: () => UserUpdateWithoutChecklistCompleteInputSchema,
  UserUpdateWithoutCustomerFeedbackInputSchema: () => UserUpdateWithoutCustomerFeedbackInputSchema,
  UserUpdateWithoutInventoryUpdatesInputSchema: () => UserUpdateWithoutInventoryUpdatesInputSchema,
  UserUpdateWithoutInventoryWithdrawalInputSchema: () => UserUpdateWithoutInventoryWithdrawalInputSchema,
  UserUpdateWithoutLeftoverItemInputSchema: () => UserUpdateWithoutLeftoverItemInputSchema,
  UserUpdateWithoutOrganizationInputSchema: () => UserUpdateWithoutOrganizationInputSchema,
  UserUpdateWithoutPasswordResetsInputSchema: () => UserUpdateWithoutPasswordResetsInputSchema,
  UserUpdateWithoutPrepItemsInputSchema: () => UserUpdateWithoutPrepItemsInputSchema,
  UserUpdateWithoutProductionPlanInputSchema: () => UserUpdateWithoutProductionPlanInputSchema,
  UserUpdateWithoutProductionPlanItemInputSchema: () => UserUpdateWithoutProductionPlanItemInputSchema,
  UserUpdateWithoutRecipeVersionsApprovedInputSchema: () => UserUpdateWithoutRecipeVersionsApprovedInputSchema,
  UserUpdateWithoutRecipeVersionsCreatedInputSchema: () => UserUpdateWithoutRecipeVersionsCreatedInputSchema,
  UserUpdateWithoutRestaurantInputSchema: () => UserUpdateWithoutRestaurantInputSchema,
  UserUpdateWithoutSchedulingConstraintInputSchema: () => UserUpdateWithoutSchedulingConstraintInputSchema,
  UserUpdateWithoutSessionsInputSchema: () => UserUpdateWithoutSessionsInputSchema,
  UserUpdateWithoutShiftsInputSchema: () => UserUpdateWithoutShiftsInputSchema,
  UserUpdateWithoutWasteRecordInputSchema: () => UserUpdateWithoutWasteRecordInputSchema,
  UserUpsertArgsSchema: () => UserUpsertArgsSchema,
  UserUpsertWithWhereUniqueWithoutOrganizationInputSchema: () => UserUpsertWithWhereUniqueWithoutOrganizationInputSchema,
  UserUpsertWithWhereUniqueWithoutRestaurantInputSchema: () => UserUpsertWithWhereUniqueWithoutRestaurantInputSchema,
  UserUpsertWithoutAvailabilityInputSchema: () => UserUpsertWithoutAvailabilityInputSchema,
  UserUpsertWithoutChecklistCompleteInputSchema: () => UserUpsertWithoutChecklistCompleteInputSchema,
  UserUpsertWithoutCustomerFeedbackInputSchema: () => UserUpsertWithoutCustomerFeedbackInputSchema,
  UserUpsertWithoutInventoryUpdatesInputSchema: () => UserUpsertWithoutInventoryUpdatesInputSchema,
  UserUpsertWithoutInventoryWithdrawalInputSchema: () => UserUpsertWithoutInventoryWithdrawalInputSchema,
  UserUpsertWithoutLeftoverItemInputSchema: () => UserUpsertWithoutLeftoverItemInputSchema,
  UserUpsertWithoutPasswordResetsInputSchema: () => UserUpsertWithoutPasswordResetsInputSchema,
  UserUpsertWithoutPrepItemsInputSchema: () => UserUpsertWithoutPrepItemsInputSchema,
  UserUpsertWithoutProductionPlanInputSchema: () => UserUpsertWithoutProductionPlanInputSchema,
  UserUpsertWithoutProductionPlanItemInputSchema: () => UserUpsertWithoutProductionPlanItemInputSchema,
  UserUpsertWithoutRecipeVersionsApprovedInputSchema: () => UserUpsertWithoutRecipeVersionsApprovedInputSchema,
  UserUpsertWithoutRecipeVersionsCreatedInputSchema: () => UserUpsertWithoutRecipeVersionsCreatedInputSchema,
  UserUpsertWithoutSchedulingConstraintInputSchema: () => UserUpsertWithoutSchedulingConstraintInputSchema,
  UserUpsertWithoutSessionsInputSchema: () => UserUpsertWithoutSessionsInputSchema,
  UserUpsertWithoutShiftsInputSchema: () => UserUpsertWithoutShiftsInputSchema,
  UserUpsertWithoutWasteRecordInputSchema: () => UserUpsertWithoutWasteRecordInputSchema,
  UserWhereInputSchema: () => UserWhereInputSchema,
  UserWhereUniqueInputSchema: () => UserWhereUniqueInputSchema,
  VendorAggregateArgsSchema: () => VendorAggregateArgsSchema,
  VendorArgsSchema: () => VendorArgsSchema,
  VendorAvgOrderByAggregateInputSchema: () => VendorAvgOrderByAggregateInputSchema,
  VendorCountOrderByAggregateInputSchema: () => VendorCountOrderByAggregateInputSchema,
  VendorCountOutputTypeArgsSchema: () => VendorCountOutputTypeArgsSchema,
  VendorCountOutputTypeSelectSchema: () => VendorCountOutputTypeSelectSchema,
  VendorCreateArgsSchema: () => VendorCreateArgsSchema,
  VendorCreateInputSchema: () => VendorCreateInputSchema,
  VendorCreateManyAndReturnArgsSchema: () => VendorCreateManyAndReturnArgsSchema,
  VendorCreateManyArgsSchema: () => VendorCreateManyArgsSchema,
  VendorCreateManyInputSchema: () => VendorCreateManyInputSchema,
  VendorCreateNestedManyWithoutIngredientsInputSchema: () => VendorCreateNestedManyWithoutIngredientsInputSchema,
  VendorCreateNestedOneWithoutOrdersInputSchema: () => VendorCreateNestedOneWithoutOrdersInputSchema,
  VendorCreateNestedOneWithoutSupplierPriceHistoryInputSchema: () => VendorCreateNestedOneWithoutSupplierPriceHistoryInputSchema,
  VendorCreateOrConnectWithoutIngredientsInputSchema: () => VendorCreateOrConnectWithoutIngredientsInputSchema,
  VendorCreateOrConnectWithoutOrdersInputSchema: () => VendorCreateOrConnectWithoutOrdersInputSchema,
  VendorCreateOrConnectWithoutSupplierPriceHistoryInputSchema: () => VendorCreateOrConnectWithoutSupplierPriceHistoryInputSchema,
  VendorCreateWithoutIngredientsInputSchema: () => VendorCreateWithoutIngredientsInputSchema,
  VendorCreateWithoutOrdersInputSchema: () => VendorCreateWithoutOrdersInputSchema,
  VendorCreateWithoutSupplierPriceHistoryInputSchema: () => VendorCreateWithoutSupplierPriceHistoryInputSchema,
  VendorDeleteArgsSchema: () => VendorDeleteArgsSchema,
  VendorDeleteManyArgsSchema: () => VendorDeleteManyArgsSchema,
  VendorFindFirstArgsSchema: () => VendorFindFirstArgsSchema,
  VendorFindFirstOrThrowArgsSchema: () => VendorFindFirstOrThrowArgsSchema,
  VendorFindManyArgsSchema: () => VendorFindManyArgsSchema,
  VendorFindUniqueArgsSchema: () => VendorFindUniqueArgsSchema,
  VendorFindUniqueOrThrowArgsSchema: () => VendorFindUniqueOrThrowArgsSchema,
  VendorGroupByArgsSchema: () => VendorGroupByArgsSchema,
  VendorIncludeSchema: () => VendorIncludeSchema,
  VendorListRelationFilterSchema: () => VendorListRelationFilterSchema,
  VendorMaxOrderByAggregateInputSchema: () => VendorMaxOrderByAggregateInputSchema,
  VendorMinOrderByAggregateInputSchema: () => VendorMinOrderByAggregateInputSchema,
  VendorOrderByRelationAggregateInputSchema: () => VendorOrderByRelationAggregateInputSchema,
  VendorOrderByWithAggregationInputSchema: () => VendorOrderByWithAggregationInputSchema,
  VendorOrderByWithRelationInputSchema: () => VendorOrderByWithRelationInputSchema,
  VendorRelationFilterSchema: () => VendorRelationFilterSchema,
  VendorScalarFieldEnumSchema: () => VendorScalarFieldEnumSchema,
  VendorScalarWhereInputSchema: () => VendorScalarWhereInputSchema,
  VendorScalarWhereWithAggregatesInputSchema: () => VendorScalarWhereWithAggregatesInputSchema,
  VendorSchema: () => VendorSchema,
  VendorSelectSchema: () => VendorSelectSchema,
  VendorSumOrderByAggregateInputSchema: () => VendorSumOrderByAggregateInputSchema,
  VendorUncheckedCreateInputSchema: () => VendorUncheckedCreateInputSchema,
  VendorUncheckedCreateNestedManyWithoutIngredientsInputSchema: () => VendorUncheckedCreateNestedManyWithoutIngredientsInputSchema,
  VendorUncheckedCreateWithoutIngredientsInputSchema: () => VendorUncheckedCreateWithoutIngredientsInputSchema,
  VendorUncheckedCreateWithoutOrdersInputSchema: () => VendorUncheckedCreateWithoutOrdersInputSchema,
  VendorUncheckedCreateWithoutSupplierPriceHistoryInputSchema: () => VendorUncheckedCreateWithoutSupplierPriceHistoryInputSchema,
  VendorUncheckedUpdateInputSchema: () => VendorUncheckedUpdateInputSchema,
  VendorUncheckedUpdateManyInputSchema: () => VendorUncheckedUpdateManyInputSchema,
  VendorUncheckedUpdateManyWithoutIngredientsInputSchema: () => VendorUncheckedUpdateManyWithoutIngredientsInputSchema,
  VendorUncheckedUpdateManyWithoutIngredientsNestedInputSchema: () => VendorUncheckedUpdateManyWithoutIngredientsNestedInputSchema,
  VendorUncheckedUpdateWithoutIngredientsInputSchema: () => VendorUncheckedUpdateWithoutIngredientsInputSchema,
  VendorUncheckedUpdateWithoutOrdersInputSchema: () => VendorUncheckedUpdateWithoutOrdersInputSchema,
  VendorUncheckedUpdateWithoutSupplierPriceHistoryInputSchema: () => VendorUncheckedUpdateWithoutSupplierPriceHistoryInputSchema,
  VendorUpdateArgsSchema: () => VendorUpdateArgsSchema,
  VendorUpdateInputSchema: () => VendorUpdateInputSchema,
  VendorUpdateManyArgsSchema: () => VendorUpdateManyArgsSchema,
  VendorUpdateManyMutationInputSchema: () => VendorUpdateManyMutationInputSchema,
  VendorUpdateManyWithWhereWithoutIngredientsInputSchema: () => VendorUpdateManyWithWhereWithoutIngredientsInputSchema,
  VendorUpdateManyWithoutIngredientsNestedInputSchema: () => VendorUpdateManyWithoutIngredientsNestedInputSchema,
  VendorUpdateOneRequiredWithoutOrdersNestedInputSchema: () => VendorUpdateOneRequiredWithoutOrdersNestedInputSchema,
  VendorUpdateOneRequiredWithoutSupplierPriceHistoryNestedInputSchema: () => VendorUpdateOneRequiredWithoutSupplierPriceHistoryNestedInputSchema,
  VendorUpdateToOneWithWhereWithoutOrdersInputSchema: () => VendorUpdateToOneWithWhereWithoutOrdersInputSchema,
  VendorUpdateToOneWithWhereWithoutSupplierPriceHistoryInputSchema: () => VendorUpdateToOneWithWhereWithoutSupplierPriceHistoryInputSchema,
  VendorUpdateWithWhereUniqueWithoutIngredientsInputSchema: () => VendorUpdateWithWhereUniqueWithoutIngredientsInputSchema,
  VendorUpdateWithoutIngredientsInputSchema: () => VendorUpdateWithoutIngredientsInputSchema,
  VendorUpdateWithoutOrdersInputSchema: () => VendorUpdateWithoutOrdersInputSchema,
  VendorUpdateWithoutSupplierPriceHistoryInputSchema: () => VendorUpdateWithoutSupplierPriceHistoryInputSchema,
  VendorUpsertArgsSchema: () => VendorUpsertArgsSchema,
  VendorUpsertWithWhereUniqueWithoutIngredientsInputSchema: () => VendorUpsertWithWhereUniqueWithoutIngredientsInputSchema,
  VendorUpsertWithoutOrdersInputSchema: () => VendorUpsertWithoutOrdersInputSchema,
  VendorUpsertWithoutSupplierPriceHistoryInputSchema: () => VendorUpsertWithoutSupplierPriceHistoryInputSchema,
  VendorWhereInputSchema: () => VendorWhereInputSchema,
  VendorWhereUniqueInputSchema: () => VendorWhereUniqueInputSchema,
  WasteRecordAggregateArgsSchema: () => WasteRecordAggregateArgsSchema,
  WasteRecordArgsSchema: () => WasteRecordArgsSchema,
  WasteRecordAvgOrderByAggregateInputSchema: () => WasteRecordAvgOrderByAggregateInputSchema,
  WasteRecordCountOrderByAggregateInputSchema: () => WasteRecordCountOrderByAggregateInputSchema,
  WasteRecordCreateArgsSchema: () => WasteRecordCreateArgsSchema,
  WasteRecordCreateInputSchema: () => WasteRecordCreateInputSchema,
  WasteRecordCreateManyAndReturnArgsSchema: () => WasteRecordCreateManyAndReturnArgsSchema,
  WasteRecordCreateManyArgsSchema: () => WasteRecordCreateManyArgsSchema,
  WasteRecordCreateManyIngredienteInputEnvelopeSchema: () => WasteRecordCreateManyIngredienteInputEnvelopeSchema,
  WasteRecordCreateManyIngredienteInputSchema: () => WasteRecordCreateManyIngredienteInputSchema,
  WasteRecordCreateManyInputSchema: () => WasteRecordCreateManyInputSchema,
  WasteRecordCreateManyRecordedByInputEnvelopeSchema: () => WasteRecordCreateManyRecordedByInputEnvelopeSchema,
  WasteRecordCreateManyRecordedByInputSchema: () => WasteRecordCreateManyRecordedByInputSchema,
  WasteRecordCreateManyRestaurantInputEnvelopeSchema: () => WasteRecordCreateManyRestaurantInputEnvelopeSchema,
  WasteRecordCreateManyRestaurantInputSchema: () => WasteRecordCreateManyRestaurantInputSchema,
  WasteRecordCreateNestedManyWithoutIngredienteInputSchema: () => WasteRecordCreateNestedManyWithoutIngredienteInputSchema,
  WasteRecordCreateNestedManyWithoutRecordedByInputSchema: () => WasteRecordCreateNestedManyWithoutRecordedByInputSchema,
  WasteRecordCreateNestedManyWithoutRestaurantInputSchema: () => WasteRecordCreateNestedManyWithoutRestaurantInputSchema,
  WasteRecordCreateOrConnectWithoutIngredienteInputSchema: () => WasteRecordCreateOrConnectWithoutIngredienteInputSchema,
  WasteRecordCreateOrConnectWithoutRecordedByInputSchema: () => WasteRecordCreateOrConnectWithoutRecordedByInputSchema,
  WasteRecordCreateOrConnectWithoutRestaurantInputSchema: () => WasteRecordCreateOrConnectWithoutRestaurantInputSchema,
  WasteRecordCreateWithoutIngredienteInputSchema: () => WasteRecordCreateWithoutIngredienteInputSchema,
  WasteRecordCreateWithoutRecordedByInputSchema: () => WasteRecordCreateWithoutRecordedByInputSchema,
  WasteRecordCreateWithoutRestaurantInputSchema: () => WasteRecordCreateWithoutRestaurantInputSchema,
  WasteRecordDeleteArgsSchema: () => WasteRecordDeleteArgsSchema,
  WasteRecordDeleteManyArgsSchema: () => WasteRecordDeleteManyArgsSchema,
  WasteRecordFindFirstArgsSchema: () => WasteRecordFindFirstArgsSchema,
  WasteRecordFindFirstOrThrowArgsSchema: () => WasteRecordFindFirstOrThrowArgsSchema,
  WasteRecordFindManyArgsSchema: () => WasteRecordFindManyArgsSchema,
  WasteRecordFindUniqueArgsSchema: () => WasteRecordFindUniqueArgsSchema,
  WasteRecordFindUniqueOrThrowArgsSchema: () => WasteRecordFindUniqueOrThrowArgsSchema,
  WasteRecordGroupByArgsSchema: () => WasteRecordGroupByArgsSchema,
  WasteRecordIncludeSchema: () => WasteRecordIncludeSchema,
  WasteRecordListRelationFilterSchema: () => WasteRecordListRelationFilterSchema,
  WasteRecordMaxOrderByAggregateInputSchema: () => WasteRecordMaxOrderByAggregateInputSchema,
  WasteRecordMinOrderByAggregateInputSchema: () => WasteRecordMinOrderByAggregateInputSchema,
  WasteRecordOrderByRelationAggregateInputSchema: () => WasteRecordOrderByRelationAggregateInputSchema,
  WasteRecordOrderByWithAggregationInputSchema: () => WasteRecordOrderByWithAggregationInputSchema,
  WasteRecordOrderByWithRelationInputSchema: () => WasteRecordOrderByWithRelationInputSchema,
  WasteRecordScalarFieldEnumSchema: () => WasteRecordScalarFieldEnumSchema,
  WasteRecordScalarWhereInputSchema: () => WasteRecordScalarWhereInputSchema,
  WasteRecordScalarWhereWithAggregatesInputSchema: () => WasteRecordScalarWhereWithAggregatesInputSchema,
  WasteRecordSchema: () => WasteRecordSchema,
  WasteRecordSelectSchema: () => WasteRecordSelectSchema,
  WasteRecordSumOrderByAggregateInputSchema: () => WasteRecordSumOrderByAggregateInputSchema,
  WasteRecordUncheckedCreateInputSchema: () => WasteRecordUncheckedCreateInputSchema,
  WasteRecordUncheckedCreateNestedManyWithoutIngredienteInputSchema: () => WasteRecordUncheckedCreateNestedManyWithoutIngredienteInputSchema,
  WasteRecordUncheckedCreateNestedManyWithoutRecordedByInputSchema: () => WasteRecordUncheckedCreateNestedManyWithoutRecordedByInputSchema,
  WasteRecordUncheckedCreateNestedManyWithoutRestaurantInputSchema: () => WasteRecordUncheckedCreateNestedManyWithoutRestaurantInputSchema,
  WasteRecordUncheckedCreateWithoutIngredienteInputSchema: () => WasteRecordUncheckedCreateWithoutIngredienteInputSchema,
  WasteRecordUncheckedCreateWithoutRecordedByInputSchema: () => WasteRecordUncheckedCreateWithoutRecordedByInputSchema,
  WasteRecordUncheckedCreateWithoutRestaurantInputSchema: () => WasteRecordUncheckedCreateWithoutRestaurantInputSchema,
  WasteRecordUncheckedUpdateInputSchema: () => WasteRecordUncheckedUpdateInputSchema,
  WasteRecordUncheckedUpdateManyInputSchema: () => WasteRecordUncheckedUpdateManyInputSchema,
  WasteRecordUncheckedUpdateManyWithoutIngredienteInputSchema: () => WasteRecordUncheckedUpdateManyWithoutIngredienteInputSchema,
  WasteRecordUncheckedUpdateManyWithoutIngredienteNestedInputSchema: () => WasteRecordUncheckedUpdateManyWithoutIngredienteNestedInputSchema,
  WasteRecordUncheckedUpdateManyWithoutRecordedByInputSchema: () => WasteRecordUncheckedUpdateManyWithoutRecordedByInputSchema,
  WasteRecordUncheckedUpdateManyWithoutRecordedByNestedInputSchema: () => WasteRecordUncheckedUpdateManyWithoutRecordedByNestedInputSchema,
  WasteRecordUncheckedUpdateManyWithoutRestaurantInputSchema: () => WasteRecordUncheckedUpdateManyWithoutRestaurantInputSchema,
  WasteRecordUncheckedUpdateManyWithoutRestaurantNestedInputSchema: () => WasteRecordUncheckedUpdateManyWithoutRestaurantNestedInputSchema,
  WasteRecordUncheckedUpdateWithoutIngredienteInputSchema: () => WasteRecordUncheckedUpdateWithoutIngredienteInputSchema,
  WasteRecordUncheckedUpdateWithoutRecordedByInputSchema: () => WasteRecordUncheckedUpdateWithoutRecordedByInputSchema,
  WasteRecordUncheckedUpdateWithoutRestaurantInputSchema: () => WasteRecordUncheckedUpdateWithoutRestaurantInputSchema,
  WasteRecordUpdateArgsSchema: () => WasteRecordUpdateArgsSchema,
  WasteRecordUpdateInputSchema: () => WasteRecordUpdateInputSchema,
  WasteRecordUpdateManyArgsSchema: () => WasteRecordUpdateManyArgsSchema,
  WasteRecordUpdateManyMutationInputSchema: () => WasteRecordUpdateManyMutationInputSchema,
  WasteRecordUpdateManyWithWhereWithoutIngredienteInputSchema: () => WasteRecordUpdateManyWithWhereWithoutIngredienteInputSchema,
  WasteRecordUpdateManyWithWhereWithoutRecordedByInputSchema: () => WasteRecordUpdateManyWithWhereWithoutRecordedByInputSchema,
  WasteRecordUpdateManyWithWhereWithoutRestaurantInputSchema: () => WasteRecordUpdateManyWithWhereWithoutRestaurantInputSchema,
  WasteRecordUpdateManyWithoutIngredienteNestedInputSchema: () => WasteRecordUpdateManyWithoutIngredienteNestedInputSchema,
  WasteRecordUpdateManyWithoutRecordedByNestedInputSchema: () => WasteRecordUpdateManyWithoutRecordedByNestedInputSchema,
  WasteRecordUpdateManyWithoutRestaurantNestedInputSchema: () => WasteRecordUpdateManyWithoutRestaurantNestedInputSchema,
  WasteRecordUpdateWithWhereUniqueWithoutIngredienteInputSchema: () => WasteRecordUpdateWithWhereUniqueWithoutIngredienteInputSchema,
  WasteRecordUpdateWithWhereUniqueWithoutRecordedByInputSchema: () => WasteRecordUpdateWithWhereUniqueWithoutRecordedByInputSchema,
  WasteRecordUpdateWithWhereUniqueWithoutRestaurantInputSchema: () => WasteRecordUpdateWithWhereUniqueWithoutRestaurantInputSchema,
  WasteRecordUpdateWithoutIngredienteInputSchema: () => WasteRecordUpdateWithoutIngredienteInputSchema,
  WasteRecordUpdateWithoutRecordedByInputSchema: () => WasteRecordUpdateWithoutRecordedByInputSchema,
  WasteRecordUpdateWithoutRestaurantInputSchema: () => WasteRecordUpdateWithoutRestaurantInputSchema,
  WasteRecordUpsertArgsSchema: () => WasteRecordUpsertArgsSchema,
  WasteRecordUpsertWithWhereUniqueWithoutIngredienteInputSchema: () => WasteRecordUpsertWithWhereUniqueWithoutIngredienteInputSchema,
  WasteRecordUpsertWithWhereUniqueWithoutRecordedByInputSchema: () => WasteRecordUpsertWithWhereUniqueWithoutRecordedByInputSchema,
  WasteRecordUpsertWithWhereUniqueWithoutRestaurantInputSchema: () => WasteRecordUpsertWithWhereUniqueWithoutRestaurantInputSchema,
  WasteRecordWhereInputSchema: () => WasteRecordWhereInputSchema,
  WasteRecordWhereUniqueInputSchema: () => WasteRecordWhereUniqueInputSchema
});
var import_zod = require("zod");
var TransactionIsolationLevelSchema = import_zod.z.enum(["ReadUncommitted", "ReadCommitted", "RepeatableRead", "Serializable"]);
var SalesTransactionsScalarFieldEnumSchema = import_zod.z.enum(["id", "posTransactionID", "restaurantId", "menuItemId", "price", "total", "transactionDate", "createdAt", "updatedAt"]);
var MenuCategoryScalarFieldEnumSchema = import_zod.z.enum(["id", "name", "description", "displayOrder", "menuId", "isActive", "createdAt", "updatedAt"]);
var RecipeVersionScalarFieldEnumSchema = import_zod.z.enum(["id", "recipeId", "versionNumber", "description", "changes", "isActive", "createdById", "approvedById", "approvedAt", "createdAt", "updatedAt"]);
var EquipmentScalarFieldEnumSchema = import_zod.z.enum(["id", "name", "description", "model", "serialNumber", "purchaseDate", "lastMaintenance", "nextMaintenance", "status", "location", "restaurantId", "createdAt", "updatedAt"]);
var RecipeEquipmentScalarFieldEnumSchema = import_zod.z.enum(["id", "recipeId", "equipmentId", "notes"]);
var MaintenanceLogScalarFieldEnumSchema = import_zod.z.enum(["id", "equipmentId", "date", "type", "description", "cost", "performedBy", "notes", "createdAt", "updatedAt"]);
var QualityChecklistScalarFieldEnumSchema = import_zod.z.enum(["id", "name", "description", "restaurantId", "frequency", "isActive", "createdAt", "updatedAt"]);
var ChecklistItemScalarFieldEnumSchema = import_zod.z.enum(["id", "checklistId", "description", "order", "type", "requiredPhotos", "createdAt", "updatedAt"]);
var ChecklistCompleteScalarFieldEnumSchema = import_zod.z.enum(["id", "checklistId", "completedById", "date", "notes", "createdAt", "updatedAt"]);
var ChecklistItemCompleteScalarFieldEnumSchema = import_zod.z.enum(["id", "checklistCompleteId", "checklistItemId", "status", "notes", "photoUrls", "createdAt", "updatedAt"]);
var SupplierPriceHistoryScalarFieldEnumSchema = import_zod.z.enum(["id", "vendorId", "ingredientId", "price", "unit", "startDate", "endDate", "notes", "createdAt", "updatedAt"]);
var CustomerFeedbackScalarFieldEnumSchema = import_zod.z.enum(["id", "restaurantId", "menuItemId", "rating", "comment", "source", "tags", "status", "responseText", "respondedAt", "respondedById", "createdAt", "updatedAt"]);
var DietaryRestrictionScalarFieldEnumSchema = import_zod.z.enum(["id", "name", "description", "icon", "createdAt", "updatedAt"]);
var RecipeTagScalarFieldEnumSchema = import_zod.z.enum(["id", "name", "description", "createdAt", "updatedAt"]);
var LeftoverItemScalarFieldEnumSchema = import_zod.z.enum(["id", "restaurantId", "date", "menuItemId", "quantity", "reason", "recordedById", "createdAt", "updatedAt"]);
var WasteRecordScalarFieldEnumSchema = import_zod.z.enum(["id", "restaurantId", "date", "ingredientId", "quantity", "unit", "reason", "recordedById", "createdAt", "updatedAt"]);
var ProductionPlanScalarFieldEnumSchema = import_zod.z.enum(["id", "restaurantId", "date", "createdById", "createdAt", "updatedAt"]);
var ProductionPlanItemScalarFieldEnumSchema = import_zod.z.enum(["id", "productionPlanId", "recipeId", "quantity", "unit", "assignedToId", "createdAt", "updatedAt"]);
var ShiftTaskScalarFieldEnumSchema = import_zod.z.enum(["id", "shiftId", "taskType", "startTime", "endTime", "duration", "notes", "createdAt", "updatedAt"]);
var AvailabilityScalarFieldEnumSchema = import_zod.z.enum(["id", "userId", "dayOfWeek", "startTime", "endTime", "createdAt", "updatedAt"]);
var SchedulingConstraintScalarFieldEnumSchema = import_zod.z.enum(["id", "userId", "date", "constraintsType", "startTime", "endTime", "notes", "createdAt", "updatedAt"]);
var InventoryWithdrawalScalarFieldEnumSchema = import_zod.z.enum(["id", "inventoryItemId", "dateTime", "quantity", "unit", "recipeId", "createdById", "createdAt", "updatedAt"]);
var AllergenScalarFieldEnumSchema = import_zod.z.enum(["id", "name", "description"]);
var IngredientAllergenScalarFieldEnumSchema = import_zod.z.enum(["id", "ingredientId", "allergenId"]);
var NutritionalRecommendationScalarFieldEnumSchema = import_zod.z.enum(["id", "menuItemId", "recommendation", "createdAt", "updatedAt"]);
var EarlyAccessScalarFieldEnumSchema = import_zod.z.enum(["id", "email", "isEmailSent", "createdAt", "updatedAt"]);
var OrganizationScalarFieldEnumSchema = import_zod.z.enum(["id", "name", "imageUrl", "createdAt", "updatedAt"]);
var RestaurantScalarFieldEnumSchema = import_zod.z.enum(["id", "name", "imageUrl", "address", "city", "zipCode", "state", "owner", "organizationId", "foodCost", "createdAt", "updatedAt", "isDeleted", "deleted"]);
var UserScalarFieldEnumSchema = import_zod.z.enum(["id", "email", "sub", "passwordHash", "firstName", "lastName", "profileImage", "verified", "role", "organizationId", "restaurantId", "createdAt", "updatedAt"]);
var SessionScalarFieldEnumSchema = import_zod.z.enum(["id", "userId", "code", "token", "expiresAt", "createdAt"]);
var CookBookScalarFieldEnumSchema = import_zod.z.enum(["id", "name", "imageUrl", "category", "restaurantId"]);
var RecipeScalarFieldEnumSchema = import_zod.z.enum(["id", "name", "imageUrl", "description", "servings", "cookTime", "prepTime", "frequency", "restaurantId", "cookBookId", "foodCost", "isDeleted", "createdAt", "updatedAt"]);
var IngredientScalarFieldEnumSchema = import_zod.z.enum(["id", "name", "category", "price", "dietaryRestrictionId"]);
var RecipeIngredientScalarFieldEnumSchema = import_zod.z.enum(["id", "recipeId", "ingredientId", "quantity", "unit", "joinAt", "recipeVersionId"]);
var RecipeInstructionScalarFieldEnumSchema = import_zod.z.enum(["id", "recipeId", "stepNumber", "instruction", "imageUrl", "recipeVersionId"]);
var InventoryScalarFieldEnumSchema = import_zod.z.enum(["id", "restaurantId"]);
var InventoryItemScalarFieldEnumSchema = import_zod.z.enum(["id", "inventoryId", "ingredientId", "quantity", "unit", "minQuantity", "restockThreshold", "lastUpdatedById", "lastUpdated"]);
var OrderScalarFieldEnumSchema = import_zod.z.enum(["id", "restaurantId", "vendorId", "status", "createdAt", "updatedAt"]);
var OrderItemScalarFieldEnumSchema = import_zod.z.enum(["id", "orderId", "ingredientId", "quantity", "unit", "price"]);
var VendorScalarFieldEnumSchema = import_zod.z.enum(["id", "name", "contact", "email", "phone", "createdAt", "updatedAt"]);
var ShiftScalarFieldEnumSchema = import_zod.z.enum(["id", "userId", "startTime", "endTime", "status"]);
var PrepBoardScalarFieldEnumSchema = import_zod.z.enum(["id", "name", "status", "createdAt", "updatedAt"]);
var PrepItemScalarFieldEnumSchema = import_zod.z.enum(["id", "prepBoardId", "recipeId", "quantity", "status", "assignedToId"]);
var PasswordResetScalarFieldEnumSchema = import_zod.z.enum(["id", "token", "userId", "expiresAt", "createdAt", "updatedAt"]);
var MenuScalarFieldEnumSchema = import_zod.z.enum(["id", "name", "restaurantId", "createdAt", "updatedAt"]);
var MenuItemRecipeScalarFieldEnumSchema = import_zod.z.enum(["id", "menuItemId", "recipeId", "joinAt"]);
var MenuItemScalarFieldEnumSchema = import_zod.z.enum(["id", "name", "description", "price", "foodCost", "recipeIds", "recipeServingsAmount", "recipeServingsCost", "allergens", "nutritionalInfoId", "menuId", "createdAt", "updatedAt", "categoryId"]);
var NutritionalInfoScalarFieldEnumSchema = import_zod.z.enum(["id", "menuItemId", "calories", "fat", "saturatedFat", "transFat", "cholesterol", "sodium", "carbohydrates", "fiber", "sugar", "protein", "createdAt", "updatedAt"]);
var FoodCostHistoryScalarFieldEnumSchema = import_zod.z.enum(["id", "recipeId", "cost", "date", "createdAt", "updatedAt"]);
var PrepHistoryScalarFieldEnumSchema = import_zod.z.enum(["id", "recipeId", "quantity", "date", "createdAt", "updatedAt"]);
var SortOrderSchema = import_zod.z.enum(["asc", "desc"]);
var QueryModeSchema = import_zod.z.enum(["default", "insensitive"]);
var NullsOrderSchema = import_zod.z.enum(["first", "last"]);
var ChecklistItemTypeSchema = import_zod.z.enum(["BOOLEAN", "NUMERIC", "TEXT", "TEMPERATURE", "PHOTO"]);
var EquipmentStatusSchema = import_zod.z.enum(["ACTIVE", "MAINTENANCE", "REPAIR", "RETIRED"]);
var MaintenanceTypeSchema = import_zod.z.enum(["ROUTINE", "REPAIR", "INSPECTION", "CLEANING", "CALIBRATION"]);
var ChecklistFrequencySchema = import_zod.z.enum(["DAILY", "WEEKLY", "MONTHLY", "QUARTERLY", "CUSTOM"]);
var ChecklistStatusSchema = import_zod.z.enum(["COMPLETED", "FAILED", "SKIPPED", "NEEDS_ATTENTION"]);
var FeedbackSourceSchema = import_zod.z.enum(["IN_PERSON", "ONLINE", "MOBILE_APP", "THIRD_PARTY"]);
var FeedbackStatusSchema = import_zod.z.enum(["NEW", "IN_PROGRESS", "RESPONDED", "CLOSED", "FLAGGED"]);
var ProductionStatusSchema = import_zod.z.enum(["PLANNED", "IN_PROGRESS", "COMPLETED", "CANCELLED"]);
var TaskTypeSchema = import_zod.z.enum(["PREP", "COOKING", "CLEANING", "INVENTORY", "OTHER"]);
var DayOfWeekSchema = import_zod.z.enum(["MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY"]);
var ConstraintTypeSchema = import_zod.z.enum(["UNAVAILABLE", "PREFERRED"]);
var UserRoleSchema = import_zod.z.enum(["ADMIN", "MANAGER", "CHEF", "STAFF", "VENDOR"]);
var OrderStatusSchema = import_zod.z.enum(["PENDING", "APPROVED", "ORDERED", "RECEIVED", "CANCELLED"]);
var ShiftStatusSchema = import_zod.z.enum(["SCHEDULED", "COMPLETED", "CANCELLED"]);
var PrepStatusSchema = import_zod.z.enum(["COMPLETED", "CANCELLED", "MISSING_ITEM", "PENDING", "ON_PROGRESS", "POSTPONE"]);
var SalesTransactionsSchema = import_zod.z.object({
  id: import_zod.z.number().int(),
  posTransactionID: import_zod.z.string().nullable(),
  restaurantId: import_zod.z.number().int(),
  menuItemId: import_zod.z.number().int(),
  price: import_zod.z.number(),
  total: import_zod.z.number(),
  transactionDate: import_zod.z.coerce.date(),
  createdAt: import_zod.z.coerce.date(),
  updatedAt: import_zod.z.coerce.date()
});
var MenuCategorySchema = import_zod.z.object({
  id: import_zod.z.number().int(),
  name: import_zod.z.string(),
  description: import_zod.z.string().nullable(),
  displayOrder: import_zod.z.number().int(),
  menuId: import_zod.z.number().int(),
  isActive: import_zod.z.boolean(),
  createdAt: import_zod.z.coerce.date(),
  updatedAt: import_zod.z.coerce.date()
});
var RecipeVersionSchema = import_zod.z.object({
  id: import_zod.z.number().int(),
  recipeId: import_zod.z.number().int(),
  versionNumber: import_zod.z.number().int(),
  description: import_zod.z.string().nullable(),
  changes: import_zod.z.string().nullable(),
  isActive: import_zod.z.boolean(),
  createdById: import_zod.z.number().int(),
  approvedById: import_zod.z.number().int().nullable(),
  approvedAt: import_zod.z.coerce.date().nullable(),
  createdAt: import_zod.z.coerce.date(),
  updatedAt: import_zod.z.coerce.date()
});
var EquipmentSchema = import_zod.z.object({
  status: EquipmentStatusSchema,
  id: import_zod.z.number().int(),
  name: import_zod.z.string(),
  description: import_zod.z.string().nullable(),
  model: import_zod.z.string().nullable(),
  serialNumber: import_zod.z.string().nullable(),
  purchaseDate: import_zod.z.coerce.date().nullable(),
  lastMaintenance: import_zod.z.coerce.date().nullable(),
  nextMaintenance: import_zod.z.coerce.date().nullable(),
  location: import_zod.z.string().nullable(),
  restaurantId: import_zod.z.number().int(),
  createdAt: import_zod.z.coerce.date(),
  updatedAt: import_zod.z.coerce.date()
});
var RecipeEquipmentSchema = import_zod.z.object({
  id: import_zod.z.number().int(),
  recipeId: import_zod.z.number().int(),
  equipmentId: import_zod.z.number().int(),
  notes: import_zod.z.string().nullable()
});
var MaintenanceLogSchema = import_zod.z.object({
  type: MaintenanceTypeSchema,
  id: import_zod.z.number().int(),
  equipmentId: import_zod.z.number().int(),
  date: import_zod.z.coerce.date(),
  description: import_zod.z.string(),
  cost: import_zod.z.number().nullable(),
  performedBy: import_zod.z.string(),
  notes: import_zod.z.string().nullable(),
  createdAt: import_zod.z.coerce.date(),
  updatedAt: import_zod.z.coerce.date()
});
var QualityChecklistSchema = import_zod.z.object({
  frequency: ChecklistFrequencySchema,
  id: import_zod.z.number().int(),
  name: import_zod.z.string(),
  description: import_zod.z.string().nullable(),
  restaurantId: import_zod.z.number().int(),
  isActive: import_zod.z.boolean(),
  createdAt: import_zod.z.coerce.date(),
  updatedAt: import_zod.z.coerce.date()
});
var ChecklistItemSchema = import_zod.z.object({
  type: ChecklistItemTypeSchema,
  id: import_zod.z.number().int(),
  checklistId: import_zod.z.number().int(),
  description: import_zod.z.string(),
  order: import_zod.z.number().int(),
  requiredPhotos: import_zod.z.boolean(),
  createdAt: import_zod.z.coerce.date(),
  updatedAt: import_zod.z.coerce.date()
});
var ChecklistCompleteSchema = import_zod.z.object({
  id: import_zod.z.number().int(),
  checklistId: import_zod.z.number().int(),
  completedById: import_zod.z.number().int(),
  date: import_zod.z.coerce.date(),
  notes: import_zod.z.string().nullable(),
  createdAt: import_zod.z.coerce.date(),
  updatedAt: import_zod.z.coerce.date()
});
var ChecklistItemCompleteSchema = import_zod.z.object({
  status: ChecklistStatusSchema,
  id: import_zod.z.number().int(),
  checklistCompleteId: import_zod.z.number().int(),
  checklistItemId: import_zod.z.number().int(),
  notes: import_zod.z.string().nullable(),
  photoUrls: import_zod.z.string().array(),
  createdAt: import_zod.z.coerce.date(),
  updatedAt: import_zod.z.coerce.date()
});
var SupplierPriceHistorySchema = import_zod.z.object({
  id: import_zod.z.number().int(),
  vendorId: import_zod.z.number().int(),
  ingredientId: import_zod.z.number().int(),
  price: import_zod.z.number(),
  unit: import_zod.z.string(),
  startDate: import_zod.z.coerce.date(),
  endDate: import_zod.z.coerce.date().nullable(),
  notes: import_zod.z.string().nullable(),
  createdAt: import_zod.z.coerce.date(),
  updatedAt: import_zod.z.coerce.date()
});
var CustomerFeedbackSchema = import_zod.z.object({
  source: FeedbackSourceSchema,
  status: FeedbackStatusSchema,
  id: import_zod.z.number().int(),
  restaurantId: import_zod.z.number().int(),
  menuItemId: import_zod.z.number().int().nullable(),
  rating: import_zod.z.number().int(),
  comment: import_zod.z.string().nullable(),
  tags: import_zod.z.string().array(),
  responseText: import_zod.z.string().nullable(),
  respondedAt: import_zod.z.coerce.date().nullable(),
  respondedById: import_zod.z.number().int().nullable(),
  createdAt: import_zod.z.coerce.date(),
  updatedAt: import_zod.z.coerce.date()
});
var DietaryRestrictionSchema = import_zod.z.object({
  id: import_zod.z.number().int(),
  name: import_zod.z.string(),
  description: import_zod.z.string().nullable(),
  icon: import_zod.z.string().nullable(),
  createdAt: import_zod.z.coerce.date(),
  updatedAt: import_zod.z.coerce.date()
});
var RecipeTagSchema = import_zod.z.object({
  id: import_zod.z.number().int(),
  name: import_zod.z.string(),
  description: import_zod.z.string().nullable(),
  createdAt: import_zod.z.coerce.date(),
  updatedAt: import_zod.z.coerce.date()
});
var LeftoverItemSchema = import_zod.z.object({
  id: import_zod.z.number().int(),
  restaurantId: import_zod.z.number().int(),
  date: import_zod.z.coerce.date(),
  menuItemId: import_zod.z.number().int(),
  quantity: import_zod.z.number().int(),
  reason: import_zod.z.string(),
  recordedById: import_zod.z.number().int(),
  createdAt: import_zod.z.coerce.date(),
  updatedAt: import_zod.z.coerce.date()
});
var WasteRecordSchema = import_zod.z.object({
  id: import_zod.z.number().int(),
  restaurantId: import_zod.z.number().int(),
  date: import_zod.z.coerce.date(),
  ingredientId: import_zod.z.number().int(),
  quantity: import_zod.z.number(),
  unit: import_zod.z.string(),
  reason: import_zod.z.string(),
  recordedById: import_zod.z.number().int(),
  createdAt: import_zod.z.coerce.date(),
  updatedAt: import_zod.z.coerce.date()
});
var ProductionPlanSchema = import_zod.z.object({
  id: import_zod.z.number().int(),
  restaurantId: import_zod.z.number().int(),
  date: import_zod.z.coerce.date(),
  createdById: import_zod.z.number().int(),
  createdAt: import_zod.z.coerce.date(),
  updatedAt: import_zod.z.coerce.date()
});
var ProductionPlanItemSchema = import_zod.z.object({
  id: import_zod.z.number().int(),
  productionPlanId: import_zod.z.number().int(),
  recipeId: import_zod.z.number().int(),
  quantity: import_zod.z.number().int(),
  unit: import_zod.z.string(),
  assignedToId: import_zod.z.number().int().nullable(),
  createdAt: import_zod.z.coerce.date(),
  updatedAt: import_zod.z.coerce.date()
});
var ShiftTaskSchema = import_zod.z.object({
  taskType: TaskTypeSchema,
  id: import_zod.z.number().int(),
  shiftId: import_zod.z.number().int(),
  startTime: import_zod.z.coerce.date(),
  endTime: import_zod.z.coerce.date(),
  duration: import_zod.z.number().int(),
  notes: import_zod.z.string().nullable(),
  createdAt: import_zod.z.coerce.date(),
  updatedAt: import_zod.z.coerce.date()
});
var AvailabilitySchema = import_zod.z.object({
  dayOfWeek: DayOfWeekSchema,
  id: import_zod.z.number().int(),
  userId: import_zod.z.number().int(),
  startTime: import_zod.z.coerce.date(),
  endTime: import_zod.z.coerce.date(),
  createdAt: import_zod.z.coerce.date(),
  updatedAt: import_zod.z.coerce.date()
});
var SchedulingConstraintSchema = import_zod.z.object({
  constraintsType: ConstraintTypeSchema,
  id: import_zod.z.number().int(),
  userId: import_zod.z.number().int(),
  date: import_zod.z.coerce.date(),
  startTime: import_zod.z.coerce.date(),
  endTime: import_zod.z.coerce.date(),
  notes: import_zod.z.string().nullable(),
  createdAt: import_zod.z.coerce.date(),
  updatedAt: import_zod.z.coerce.date()
});
var InventoryWithdrawalSchema = import_zod.z.object({
  id: import_zod.z.number().int(),
  inventoryItemId: import_zod.z.number().int(),
  dateTime: import_zod.z.coerce.date(),
  quantity: import_zod.z.number(),
  unit: import_zod.z.string(),
  recipeId: import_zod.z.number().int().nullable(),
  createdById: import_zod.z.number().int(),
  createdAt: import_zod.z.coerce.date(),
  updatedAt: import_zod.z.coerce.date()
});
var AllergenSchema = import_zod.z.object({
  id: import_zod.z.number().int(),
  name: import_zod.z.string(),
  description: import_zod.z.string().nullable()
});
var IngredientAllergenSchema = import_zod.z.object({
  id: import_zod.z.number().int(),
  ingredientId: import_zod.z.number().int(),
  allergenId: import_zod.z.number().int()
});
var NutritionalRecommendationSchema = import_zod.z.object({
  id: import_zod.z.number().int(),
  menuItemId: import_zod.z.number().int(),
  recommendation: import_zod.z.string(),
  createdAt: import_zod.z.coerce.date(),
  updatedAt: import_zod.z.coerce.date()
});
var EarlyAccessSchema = import_zod.z.object({
  id: import_zod.z.number().int(),
  email: import_zod.z.string(),
  isEmailSent: import_zod.z.boolean(),
  createdAt: import_zod.z.coerce.date(),
  updatedAt: import_zod.z.coerce.date()
});
var OrganizationSchema = import_zod.z.object({
  id: import_zod.z.number().int(),
  name: import_zod.z.string(),
  imageUrl: import_zod.z.string().nullable(),
  createdAt: import_zod.z.coerce.date(),
  updatedAt: import_zod.z.coerce.date()
});
var RestaurantSchema = import_zod.z.object({
  id: import_zod.z.number().int(),
  name: import_zod.z.string(),
  imageUrl: import_zod.z.string().nullable(),
  address: import_zod.z.string(),
  city: import_zod.z.string(),
  zipCode: import_zod.z.string(),
  state: import_zod.z.string(),
  owner: import_zod.z.string(),
  organizationId: import_zod.z.number().int().nullable(),
  foodCost: import_zod.z.number().nullable(),
  createdAt: import_zod.z.coerce.date(),
  updatedAt: import_zod.z.coerce.date(),
  isDeleted: import_zod.z.boolean(),
  deleted: import_zod.z.coerce.date().nullable()
});
var UserSchema = import_zod.z.object({
  role: UserRoleSchema,
  id: import_zod.z.number().int(),
  email: import_zod.z.string(),
  sub: import_zod.z.number().int().nullable(),
  passwordHash: import_zod.z.string(),
  firstName: import_zod.z.string(),
  lastName: import_zod.z.string(),
  profileImage: import_zod.z.string().nullable(),
  verified: import_zod.z.boolean(),
  organizationId: import_zod.z.number().int().nullable(),
  restaurantId: import_zod.z.number().int().nullable(),
  createdAt: import_zod.z.coerce.date(),
  updatedAt: import_zod.z.coerce.date()
});
var SessionSchema = import_zod.z.object({
  id: import_zod.z.string(),
  userId: import_zod.z.number().int(),
  code: import_zod.z.string(),
  token: import_zod.z.string(),
  expiresAt: import_zod.z.coerce.date(),
  createdAt: import_zod.z.coerce.date()
});
var CookBookSchema = import_zod.z.object({
  id: import_zod.z.number().int(),
  name: import_zod.z.string(),
  imageUrl: import_zod.z.string().nullable(),
  category: import_zod.z.string(),
  restaurantId: import_zod.z.number().int().nullable()
});
var RecipeSchema = import_zod.z.object({
  id: import_zod.z.number().int(),
  name: import_zod.z.string(),
  imageUrl: import_zod.z.string().array(),
  description: import_zod.z.string().nullable(),
  servings: import_zod.z.number().int(),
  cookTime: import_zod.z.number().int(),
  prepTime: import_zod.z.number().int(),
  frequency: import_zod.z.number().int().nullable(),
  restaurantId: import_zod.z.number().int(),
  cookBookId: import_zod.z.number().int(),
  foodCost: import_zod.z.number().nullable(),
  isDeleted: import_zod.z.boolean(),
  createdAt: import_zod.z.coerce.date(),
  updatedAt: import_zod.z.coerce.date()
});
var IngredientSchema = import_zod.z.object({
  id: import_zod.z.number().int(),
  name: import_zod.z.string(),
  category: import_zod.z.string(),
  price: import_zod.z.number(),
  dietaryRestrictionId: import_zod.z.number().int().nullable()
});
var RecipeIngredientSchema = import_zod.z.object({
  id: import_zod.z.number().int(),
  recipeId: import_zod.z.number().int(),
  ingredientId: import_zod.z.number().int(),
  quantity: import_zod.z.number(),
  unit: import_zod.z.string(),
  joinAt: import_zod.z.coerce.date(),
  recipeVersionId: import_zod.z.number().int().nullable()
});
var RecipeInstructionSchema = import_zod.z.object({
  id: import_zod.z.number().int(),
  recipeId: import_zod.z.number().int(),
  stepNumber: import_zod.z.number().int(),
  instruction: import_zod.z.string(),
  imageUrl: import_zod.z.string().nullable(),
  recipeVersionId: import_zod.z.number().int().nullable()
});
var InventorySchema = import_zod.z.object({
  id: import_zod.z.number().int(),
  restaurantId: import_zod.z.number().int()
});
var InventoryItemSchema = import_zod.z.object({
  id: import_zod.z.number().int(),
  inventoryId: import_zod.z.number().int(),
  ingredientId: import_zod.z.number().int(),
  quantity: import_zod.z.number(),
  unit: import_zod.z.string(),
  minQuantity: import_zod.z.number(),
  restockThreshold: import_zod.z.number(),
  lastUpdatedById: import_zod.z.number().int().nullable(),
  lastUpdated: import_zod.z.coerce.date()
});
var OrderSchema = import_zod.z.object({
  status: OrderStatusSchema,
  id: import_zod.z.number().int(),
  restaurantId: import_zod.z.number().int(),
  vendorId: import_zod.z.number().int(),
  createdAt: import_zod.z.coerce.date(),
  updatedAt: import_zod.z.coerce.date()
});
var OrderItemSchema = import_zod.z.object({
  id: import_zod.z.number().int(),
  orderId: import_zod.z.number().int(),
  ingredientId: import_zod.z.number().int(),
  quantity: import_zod.z.number(),
  unit: import_zod.z.string(),
  price: import_zod.z.number()
});
var VendorSchema = import_zod.z.object({
  id: import_zod.z.number().int(),
  name: import_zod.z.string(),
  contact: import_zod.z.string(),
  email: import_zod.z.string(),
  phone: import_zod.z.string(),
  createdAt: import_zod.z.coerce.date(),
  updatedAt: import_zod.z.coerce.date()
});
var ShiftSchema = import_zod.z.object({
  status: ShiftStatusSchema,
  id: import_zod.z.number().int(),
  userId: import_zod.z.number().int(),
  startTime: import_zod.z.coerce.date(),
  endTime: import_zod.z.coerce.date()
});
var PrepBoardSchema = import_zod.z.object({
  status: PrepStatusSchema,
  id: import_zod.z.number().int(),
  name: import_zod.z.string(),
  createdAt: import_zod.z.coerce.date(),
  updatedAt: import_zod.z.coerce.date()
});
var PrepItemSchema = import_zod.z.object({
  status: PrepStatusSchema,
  id: import_zod.z.number().int(),
  prepBoardId: import_zod.z.number().int(),
  recipeId: import_zod.z.number().int(),
  quantity: import_zod.z.number().int(),
  assignedToId: import_zod.z.number().int()
});
var PasswordResetSchema = import_zod.z.object({
  id: import_zod.z.number().int(),
  token: import_zod.z.string(),
  userId: import_zod.z.number().int(),
  expiresAt: import_zod.z.coerce.date(),
  createdAt: import_zod.z.coerce.date(),
  updatedAt: import_zod.z.coerce.date()
});
var MenuSchema = import_zod.z.object({
  id: import_zod.z.number().int(),
  name: import_zod.z.string(),
  restaurantId: import_zod.z.number().int(),
  createdAt: import_zod.z.coerce.date(),
  updatedAt: import_zod.z.coerce.date()
});
var MenuItemRecipeSchema = import_zod.z.object({
  id: import_zod.z.number().int(),
  menuItemId: import_zod.z.number().int(),
  recipeId: import_zod.z.number().int(),
  joinAt: import_zod.z.coerce.date()
});
var MenuItemSchema = import_zod.z.object({
  id: import_zod.z.number().int(),
  name: import_zod.z.string(),
  description: import_zod.z.string().nullable(),
  price: import_zod.z.number(),
  foodCost: import_zod.z.number(),
  recipeIds: import_zod.z.number().int().array(),
  recipeServingsAmount: import_zod.z.number().array(),
  recipeServingsCost: import_zod.z.number().array(),
  allergens: import_zod.z.string().array(),
  nutritionalInfoId: import_zod.z.number().int().nullable(),
  menuId: import_zod.z.number().int(),
  createdAt: import_zod.z.coerce.date(),
  updatedAt: import_zod.z.coerce.date(),
  categoryId: import_zod.z.number().int().nullable()
});
var NutritionalInfoSchema = import_zod.z.object({
  id: import_zod.z.number().int(),
  menuItemId: import_zod.z.number().int().nullable(),
  calories: import_zod.z.number(),
  fat: import_zod.z.number(),
  saturatedFat: import_zod.z.number(),
  transFat: import_zod.z.number(),
  cholesterol: import_zod.z.number(),
  sodium: import_zod.z.number(),
  carbohydrates: import_zod.z.number(),
  fiber: import_zod.z.number(),
  sugar: import_zod.z.number(),
  protein: import_zod.z.number(),
  createdAt: import_zod.z.coerce.date(),
  updatedAt: import_zod.z.coerce.date()
});
var FoodCostHistorySchema = import_zod.z.object({
  id: import_zod.z.number().int(),
  recipeId: import_zod.z.number().int(),
  cost: import_zod.z.number(),
  date: import_zod.z.coerce.date(),
  createdAt: import_zod.z.coerce.date(),
  updatedAt: import_zod.z.coerce.date()
});
var PrepHistorySchema = import_zod.z.object({
  id: import_zod.z.number().int(),
  recipeId: import_zod.z.number().int(),
  quantity: import_zod.z.number().int(),
  date: import_zod.z.coerce.date(),
  createdAt: import_zod.z.coerce.date(),
  updatedAt: import_zod.z.coerce.date()
});
var SalesTransactionsIncludeSchema = import_zod.z.object({
  restaurant: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RestaurantArgsSchema)]).optional(),
  menuItem: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => MenuItemArgsSchema)]).optional()
}).strict();
var SalesTransactionsArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => SalesTransactionsSelectSchema).optional(),
  include: import_zod.z.lazy(() => SalesTransactionsIncludeSchema).optional()
}).strict();
var SalesTransactionsSelectSchema = import_zod.z.object({
  id: import_zod.z.boolean().optional(),
  posTransactionID: import_zod.z.boolean().optional(),
  restaurantId: import_zod.z.boolean().optional(),
  menuItemId: import_zod.z.boolean().optional(),
  price: import_zod.z.boolean().optional(),
  total: import_zod.z.boolean().optional(),
  transactionDate: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.boolean().optional(),
  updatedAt: import_zod.z.boolean().optional(),
  restaurant: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RestaurantArgsSchema)]).optional(),
  menuItem: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => MenuItemArgsSchema)]).optional()
}).strict();
var MenuCategoryIncludeSchema = import_zod.z.object({
  menu: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => MenuArgsSchema)]).optional(),
  menuItems: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => MenuItemFindManyArgsSchema)]).optional(),
  _count: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => MenuCategoryCountOutputTypeArgsSchema)]).optional()
}).strict();
var MenuCategoryArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => MenuCategorySelectSchema).optional(),
  include: import_zod.z.lazy(() => MenuCategoryIncludeSchema).optional()
}).strict();
var MenuCategoryCountOutputTypeArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => MenuCategoryCountOutputTypeSelectSchema).nullish()
}).strict();
var MenuCategoryCountOutputTypeSelectSchema = import_zod.z.object({
  menuItems: import_zod.z.boolean().optional()
}).strict();
var MenuCategorySelectSchema = import_zod.z.object({
  id: import_zod.z.boolean().optional(),
  name: import_zod.z.boolean().optional(),
  description: import_zod.z.boolean().optional(),
  displayOrder: import_zod.z.boolean().optional(),
  menuId: import_zod.z.boolean().optional(),
  isActive: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.boolean().optional(),
  updatedAt: import_zod.z.boolean().optional(),
  menu: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => MenuArgsSchema)]).optional(),
  menuItems: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => MenuItemFindManyArgsSchema)]).optional(),
  _count: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => MenuCategoryCountOutputTypeArgsSchema)]).optional()
}).strict();
var RecipeVersionIncludeSchema = import_zod.z.object({
  recipe: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeArgsSchema)]).optional(),
  ingredients: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeIngredientFindManyArgsSchema)]).optional(),
  instructions: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeInstructionFindManyArgsSchema)]).optional(),
  createdBy: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => UserArgsSchema)]).optional(),
  approvedBy: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => UserArgsSchema)]).optional(),
  _count: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeVersionCountOutputTypeArgsSchema)]).optional()
}).strict();
var RecipeVersionArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => RecipeVersionSelectSchema).optional(),
  include: import_zod.z.lazy(() => RecipeVersionIncludeSchema).optional()
}).strict();
var RecipeVersionCountOutputTypeArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => RecipeVersionCountOutputTypeSelectSchema).nullish()
}).strict();
var RecipeVersionCountOutputTypeSelectSchema = import_zod.z.object({
  ingredients: import_zod.z.boolean().optional(),
  instructions: import_zod.z.boolean().optional()
}).strict();
var RecipeVersionSelectSchema = import_zod.z.object({
  id: import_zod.z.boolean().optional(),
  recipeId: import_zod.z.boolean().optional(),
  versionNumber: import_zod.z.boolean().optional(),
  description: import_zod.z.boolean().optional(),
  changes: import_zod.z.boolean().optional(),
  isActive: import_zod.z.boolean().optional(),
  createdById: import_zod.z.boolean().optional(),
  approvedById: import_zod.z.boolean().optional(),
  approvedAt: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.boolean().optional(),
  updatedAt: import_zod.z.boolean().optional(),
  recipe: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeArgsSchema)]).optional(),
  ingredients: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeIngredientFindManyArgsSchema)]).optional(),
  instructions: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeInstructionFindManyArgsSchema)]).optional(),
  createdBy: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => UserArgsSchema)]).optional(),
  approvedBy: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => UserArgsSchema)]).optional(),
  _count: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeVersionCountOutputTypeArgsSchema)]).optional()
}).strict();
var EquipmentIncludeSchema = import_zod.z.object({
  restaurant: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RestaurantArgsSchema)]).optional(),
  recipes: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeEquipmentFindManyArgsSchema)]).optional(),
  maintenanceLogs: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => MaintenanceLogFindManyArgsSchema)]).optional(),
  _count: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => EquipmentCountOutputTypeArgsSchema)]).optional()
}).strict();
var EquipmentArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => EquipmentSelectSchema).optional(),
  include: import_zod.z.lazy(() => EquipmentIncludeSchema).optional()
}).strict();
var EquipmentCountOutputTypeArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => EquipmentCountOutputTypeSelectSchema).nullish()
}).strict();
var EquipmentCountOutputTypeSelectSchema = import_zod.z.object({
  recipes: import_zod.z.boolean().optional(),
  maintenanceLogs: import_zod.z.boolean().optional()
}).strict();
var EquipmentSelectSchema = import_zod.z.object({
  id: import_zod.z.boolean().optional(),
  name: import_zod.z.boolean().optional(),
  description: import_zod.z.boolean().optional(),
  model: import_zod.z.boolean().optional(),
  serialNumber: import_zod.z.boolean().optional(),
  purchaseDate: import_zod.z.boolean().optional(),
  lastMaintenance: import_zod.z.boolean().optional(),
  nextMaintenance: import_zod.z.boolean().optional(),
  status: import_zod.z.boolean().optional(),
  location: import_zod.z.boolean().optional(),
  restaurantId: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.boolean().optional(),
  updatedAt: import_zod.z.boolean().optional(),
  restaurant: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RestaurantArgsSchema)]).optional(),
  recipes: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeEquipmentFindManyArgsSchema)]).optional(),
  maintenanceLogs: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => MaintenanceLogFindManyArgsSchema)]).optional(),
  _count: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => EquipmentCountOutputTypeArgsSchema)]).optional()
}).strict();
var RecipeEquipmentIncludeSchema = import_zod.z.object({
  recipe: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeArgsSchema)]).optional(),
  equipment: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => EquipmentArgsSchema)]).optional()
}).strict();
var RecipeEquipmentArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => RecipeEquipmentSelectSchema).optional(),
  include: import_zod.z.lazy(() => RecipeEquipmentIncludeSchema).optional()
}).strict();
var RecipeEquipmentSelectSchema = import_zod.z.object({
  id: import_zod.z.boolean().optional(),
  recipeId: import_zod.z.boolean().optional(),
  equipmentId: import_zod.z.boolean().optional(),
  notes: import_zod.z.boolean().optional(),
  recipe: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeArgsSchema)]).optional(),
  equipment: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => EquipmentArgsSchema)]).optional()
}).strict();
var MaintenanceLogIncludeSchema = import_zod.z.object({
  equipment: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => EquipmentArgsSchema)]).optional()
}).strict();
var MaintenanceLogArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => MaintenanceLogSelectSchema).optional(),
  include: import_zod.z.lazy(() => MaintenanceLogIncludeSchema).optional()
}).strict();
var MaintenanceLogSelectSchema = import_zod.z.object({
  id: import_zod.z.boolean().optional(),
  equipmentId: import_zod.z.boolean().optional(),
  date: import_zod.z.boolean().optional(),
  type: import_zod.z.boolean().optional(),
  description: import_zod.z.boolean().optional(),
  cost: import_zod.z.boolean().optional(),
  performedBy: import_zod.z.boolean().optional(),
  notes: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.boolean().optional(),
  updatedAt: import_zod.z.boolean().optional(),
  equipment: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => EquipmentArgsSchema)]).optional()
}).strict();
var QualityChecklistIncludeSchema = import_zod.z.object({
  restaurant: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RestaurantArgsSchema)]).optional(),
  items: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => ChecklistItemFindManyArgsSchema)]).optional(),
  completions: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => ChecklistCompleteFindManyArgsSchema)]).optional(),
  _count: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => QualityChecklistCountOutputTypeArgsSchema)]).optional()
}).strict();
var QualityChecklistArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => QualityChecklistSelectSchema).optional(),
  include: import_zod.z.lazy(() => QualityChecklistIncludeSchema).optional()
}).strict();
var QualityChecklistCountOutputTypeArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => QualityChecklistCountOutputTypeSelectSchema).nullish()
}).strict();
var QualityChecklistCountOutputTypeSelectSchema = import_zod.z.object({
  items: import_zod.z.boolean().optional(),
  completions: import_zod.z.boolean().optional()
}).strict();
var QualityChecklistSelectSchema = import_zod.z.object({
  id: import_zod.z.boolean().optional(),
  name: import_zod.z.boolean().optional(),
  description: import_zod.z.boolean().optional(),
  restaurantId: import_zod.z.boolean().optional(),
  frequency: import_zod.z.boolean().optional(),
  isActive: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.boolean().optional(),
  updatedAt: import_zod.z.boolean().optional(),
  restaurant: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RestaurantArgsSchema)]).optional(),
  items: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => ChecklistItemFindManyArgsSchema)]).optional(),
  completions: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => ChecklistCompleteFindManyArgsSchema)]).optional(),
  _count: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => QualityChecklistCountOutputTypeArgsSchema)]).optional()
}).strict();
var ChecklistItemIncludeSchema = import_zod.z.object({
  checklist: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => QualityChecklistArgsSchema)]).optional(),
  completions: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => ChecklistItemCompleteFindManyArgsSchema)]).optional(),
  _count: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => ChecklistItemCountOutputTypeArgsSchema)]).optional()
}).strict();
var ChecklistItemArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => ChecklistItemSelectSchema).optional(),
  include: import_zod.z.lazy(() => ChecklistItemIncludeSchema).optional()
}).strict();
var ChecklistItemCountOutputTypeArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => ChecklistItemCountOutputTypeSelectSchema).nullish()
}).strict();
var ChecklistItemCountOutputTypeSelectSchema = import_zod.z.object({
  completions: import_zod.z.boolean().optional()
}).strict();
var ChecklistItemSelectSchema = import_zod.z.object({
  id: import_zod.z.boolean().optional(),
  checklistId: import_zod.z.boolean().optional(),
  description: import_zod.z.boolean().optional(),
  order: import_zod.z.boolean().optional(),
  type: import_zod.z.boolean().optional(),
  requiredPhotos: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.boolean().optional(),
  updatedAt: import_zod.z.boolean().optional(),
  checklist: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => QualityChecklistArgsSchema)]).optional(),
  completions: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => ChecklistItemCompleteFindManyArgsSchema)]).optional(),
  _count: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => ChecklistItemCountOutputTypeArgsSchema)]).optional()
}).strict();
var ChecklistCompleteIncludeSchema = import_zod.z.object({
  checklist: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => QualityChecklistArgsSchema)]).optional(),
  completedBy: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => UserArgsSchema)]).optional(),
  items: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => ChecklistItemCompleteFindManyArgsSchema)]).optional(),
  _count: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => ChecklistCompleteCountOutputTypeArgsSchema)]).optional()
}).strict();
var ChecklistCompleteArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => ChecklistCompleteSelectSchema).optional(),
  include: import_zod.z.lazy(() => ChecklistCompleteIncludeSchema).optional()
}).strict();
var ChecklistCompleteCountOutputTypeArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => ChecklistCompleteCountOutputTypeSelectSchema).nullish()
}).strict();
var ChecklistCompleteCountOutputTypeSelectSchema = import_zod.z.object({
  items: import_zod.z.boolean().optional()
}).strict();
var ChecklistCompleteSelectSchema = import_zod.z.object({
  id: import_zod.z.boolean().optional(),
  checklistId: import_zod.z.boolean().optional(),
  completedById: import_zod.z.boolean().optional(),
  date: import_zod.z.boolean().optional(),
  notes: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.boolean().optional(),
  updatedAt: import_zod.z.boolean().optional(),
  checklist: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => QualityChecklistArgsSchema)]).optional(),
  completedBy: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => UserArgsSchema)]).optional(),
  items: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => ChecklistItemCompleteFindManyArgsSchema)]).optional(),
  _count: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => ChecklistCompleteCountOutputTypeArgsSchema)]).optional()
}).strict();
var ChecklistItemCompleteIncludeSchema = import_zod.z.object({
  checklistComplete: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => ChecklistCompleteArgsSchema)]).optional(),
  checklistItem: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => ChecklistItemArgsSchema)]).optional()
}).strict();
var ChecklistItemCompleteArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => ChecklistItemCompleteSelectSchema).optional(),
  include: import_zod.z.lazy(() => ChecklistItemCompleteIncludeSchema).optional()
}).strict();
var ChecklistItemCompleteSelectSchema = import_zod.z.object({
  id: import_zod.z.boolean().optional(),
  checklistCompleteId: import_zod.z.boolean().optional(),
  checklistItemId: import_zod.z.boolean().optional(),
  status: import_zod.z.boolean().optional(),
  notes: import_zod.z.boolean().optional(),
  photoUrls: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.boolean().optional(),
  updatedAt: import_zod.z.boolean().optional(),
  checklistComplete: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => ChecklistCompleteArgsSchema)]).optional(),
  checklistItem: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => ChecklistItemArgsSchema)]).optional()
}).strict();
var SupplierPriceHistoryIncludeSchema = import_zod.z.object({
  vendor: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => VendorArgsSchema)]).optional(),
  ingredient: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => IngredientArgsSchema)]).optional()
}).strict();
var SupplierPriceHistoryArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => SupplierPriceHistorySelectSchema).optional(),
  include: import_zod.z.lazy(() => SupplierPriceHistoryIncludeSchema).optional()
}).strict();
var SupplierPriceHistorySelectSchema = import_zod.z.object({
  id: import_zod.z.boolean().optional(),
  vendorId: import_zod.z.boolean().optional(),
  ingredientId: import_zod.z.boolean().optional(),
  price: import_zod.z.boolean().optional(),
  unit: import_zod.z.boolean().optional(),
  startDate: import_zod.z.boolean().optional(),
  endDate: import_zod.z.boolean().optional(),
  notes: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.boolean().optional(),
  updatedAt: import_zod.z.boolean().optional(),
  vendor: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => VendorArgsSchema)]).optional(),
  ingredient: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => IngredientArgsSchema)]).optional()
}).strict();
var CustomerFeedbackIncludeSchema = import_zod.z.object({
  restaurant: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RestaurantArgsSchema)]).optional(),
  menuItem: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => MenuItemArgsSchema)]).optional(),
  respondedBy: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => UserArgsSchema)]).optional()
}).strict();
var CustomerFeedbackArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => CustomerFeedbackSelectSchema).optional(),
  include: import_zod.z.lazy(() => CustomerFeedbackIncludeSchema).optional()
}).strict();
var CustomerFeedbackSelectSchema = import_zod.z.object({
  id: import_zod.z.boolean().optional(),
  restaurantId: import_zod.z.boolean().optional(),
  menuItemId: import_zod.z.boolean().optional(),
  rating: import_zod.z.boolean().optional(),
  comment: import_zod.z.boolean().optional(),
  source: import_zod.z.boolean().optional(),
  tags: import_zod.z.boolean().optional(),
  status: import_zod.z.boolean().optional(),
  responseText: import_zod.z.boolean().optional(),
  respondedAt: import_zod.z.boolean().optional(),
  respondedById: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.boolean().optional(),
  updatedAt: import_zod.z.boolean().optional(),
  restaurant: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RestaurantArgsSchema)]).optional(),
  menuItem: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => MenuItemArgsSchema)]).optional(),
  respondedBy: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => UserArgsSchema)]).optional()
}).strict();
var DietaryRestrictionIncludeSchema = import_zod.z.object({
  menuItems: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => MenuItemFindManyArgsSchema)]).optional(),
  recipes: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeFindManyArgsSchema)]).optional(),
  ingredients: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => IngredientFindManyArgsSchema)]).optional(),
  _count: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => DietaryRestrictionCountOutputTypeArgsSchema)]).optional()
}).strict();
var DietaryRestrictionArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => DietaryRestrictionSelectSchema).optional(),
  include: import_zod.z.lazy(() => DietaryRestrictionIncludeSchema).optional()
}).strict();
var DietaryRestrictionCountOutputTypeArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => DietaryRestrictionCountOutputTypeSelectSchema).nullish()
}).strict();
var DietaryRestrictionCountOutputTypeSelectSchema = import_zod.z.object({
  menuItems: import_zod.z.boolean().optional(),
  recipes: import_zod.z.boolean().optional(),
  ingredients: import_zod.z.boolean().optional()
}).strict();
var DietaryRestrictionSelectSchema = import_zod.z.object({
  id: import_zod.z.boolean().optional(),
  name: import_zod.z.boolean().optional(),
  description: import_zod.z.boolean().optional(),
  icon: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.boolean().optional(),
  updatedAt: import_zod.z.boolean().optional(),
  menuItems: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => MenuItemFindManyArgsSchema)]).optional(),
  recipes: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeFindManyArgsSchema)]).optional(),
  ingredients: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => IngredientFindManyArgsSchema)]).optional(),
  _count: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => DietaryRestrictionCountOutputTypeArgsSchema)]).optional()
}).strict();
var RecipeTagIncludeSchema = import_zod.z.object({
  recipes: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeFindManyArgsSchema)]).optional(),
  _count: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeTagCountOutputTypeArgsSchema)]).optional()
}).strict();
var RecipeTagArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => RecipeTagSelectSchema).optional(),
  include: import_zod.z.lazy(() => RecipeTagIncludeSchema).optional()
}).strict();
var RecipeTagCountOutputTypeArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => RecipeTagCountOutputTypeSelectSchema).nullish()
}).strict();
var RecipeTagCountOutputTypeSelectSchema = import_zod.z.object({
  recipes: import_zod.z.boolean().optional()
}).strict();
var RecipeTagSelectSchema = import_zod.z.object({
  id: import_zod.z.boolean().optional(),
  name: import_zod.z.boolean().optional(),
  description: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.boolean().optional(),
  updatedAt: import_zod.z.boolean().optional(),
  recipes: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeFindManyArgsSchema)]).optional(),
  _count: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeTagCountOutputTypeArgsSchema)]).optional()
}).strict();
var LeftoverItemIncludeSchema = import_zod.z.object({
  restaurant: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RestaurantArgsSchema)]).optional(),
  menuItem: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => MenuItemArgsSchema)]).optional(),
  recordedBy: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => UserArgsSchema)]).optional()
}).strict();
var LeftoverItemArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => LeftoverItemSelectSchema).optional(),
  include: import_zod.z.lazy(() => LeftoverItemIncludeSchema).optional()
}).strict();
var LeftoverItemSelectSchema = import_zod.z.object({
  id: import_zod.z.boolean().optional(),
  restaurantId: import_zod.z.boolean().optional(),
  date: import_zod.z.boolean().optional(),
  menuItemId: import_zod.z.boolean().optional(),
  quantity: import_zod.z.boolean().optional(),
  reason: import_zod.z.boolean().optional(),
  recordedById: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.boolean().optional(),
  updatedAt: import_zod.z.boolean().optional(),
  restaurant: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RestaurantArgsSchema)]).optional(),
  menuItem: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => MenuItemArgsSchema)]).optional(),
  recordedBy: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => UserArgsSchema)]).optional()
}).strict();
var WasteRecordIncludeSchema = import_zod.z.object({
  restaurant: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RestaurantArgsSchema)]).optional(),
  ingrediente: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => IngredientArgsSchema)]).optional(),
  recordedBy: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => UserArgsSchema)]).optional()
}).strict();
var WasteRecordArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => WasteRecordSelectSchema).optional(),
  include: import_zod.z.lazy(() => WasteRecordIncludeSchema).optional()
}).strict();
var WasteRecordSelectSchema = import_zod.z.object({
  id: import_zod.z.boolean().optional(),
  restaurantId: import_zod.z.boolean().optional(),
  date: import_zod.z.boolean().optional(),
  ingredientId: import_zod.z.boolean().optional(),
  quantity: import_zod.z.boolean().optional(),
  unit: import_zod.z.boolean().optional(),
  reason: import_zod.z.boolean().optional(),
  recordedById: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.boolean().optional(),
  updatedAt: import_zod.z.boolean().optional(),
  restaurant: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RestaurantArgsSchema)]).optional(),
  ingrediente: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => IngredientArgsSchema)]).optional(),
  recordedBy: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => UserArgsSchema)]).optional()
}).strict();
var ProductionPlanIncludeSchema = import_zod.z.object({
  restaurant: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RestaurantArgsSchema)]).optional(),
  createdBy: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => UserArgsSchema)]).optional(),
  items: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => ProductionPlanItemFindManyArgsSchema)]).optional(),
  _count: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => ProductionPlanCountOutputTypeArgsSchema)]).optional()
}).strict();
var ProductionPlanArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => ProductionPlanSelectSchema).optional(),
  include: import_zod.z.lazy(() => ProductionPlanIncludeSchema).optional()
}).strict();
var ProductionPlanCountOutputTypeArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => ProductionPlanCountOutputTypeSelectSchema).nullish()
}).strict();
var ProductionPlanCountOutputTypeSelectSchema = import_zod.z.object({
  items: import_zod.z.boolean().optional()
}).strict();
var ProductionPlanSelectSchema = import_zod.z.object({
  id: import_zod.z.boolean().optional(),
  restaurantId: import_zod.z.boolean().optional(),
  date: import_zod.z.boolean().optional(),
  createdById: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.boolean().optional(),
  updatedAt: import_zod.z.boolean().optional(),
  restaurant: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RestaurantArgsSchema)]).optional(),
  createdBy: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => UserArgsSchema)]).optional(),
  items: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => ProductionPlanItemFindManyArgsSchema)]).optional(),
  _count: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => ProductionPlanCountOutputTypeArgsSchema)]).optional()
}).strict();
var ProductionPlanItemIncludeSchema = import_zod.z.object({
  productionPlan: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => ProductionPlanArgsSchema)]).optional(),
  recipe: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeArgsSchema)]).optional(),
  assignedTo: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => UserArgsSchema)]).optional()
}).strict();
var ProductionPlanItemArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => ProductionPlanItemSelectSchema).optional(),
  include: import_zod.z.lazy(() => ProductionPlanItemIncludeSchema).optional()
}).strict();
var ProductionPlanItemSelectSchema = import_zod.z.object({
  id: import_zod.z.boolean().optional(),
  productionPlanId: import_zod.z.boolean().optional(),
  recipeId: import_zod.z.boolean().optional(),
  quantity: import_zod.z.boolean().optional(),
  unit: import_zod.z.boolean().optional(),
  assignedToId: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.boolean().optional(),
  updatedAt: import_zod.z.boolean().optional(),
  productionPlan: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => ProductionPlanArgsSchema)]).optional(),
  recipe: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeArgsSchema)]).optional(),
  assignedTo: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => UserArgsSchema)]).optional()
}).strict();
var ShiftTaskIncludeSchema = import_zod.z.object({
  shift: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => ShiftArgsSchema)]).optional()
}).strict();
var ShiftTaskArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => ShiftTaskSelectSchema).optional(),
  include: import_zod.z.lazy(() => ShiftTaskIncludeSchema).optional()
}).strict();
var ShiftTaskSelectSchema = import_zod.z.object({
  id: import_zod.z.boolean().optional(),
  shiftId: import_zod.z.boolean().optional(),
  taskType: import_zod.z.boolean().optional(),
  startTime: import_zod.z.boolean().optional(),
  endTime: import_zod.z.boolean().optional(),
  duration: import_zod.z.boolean().optional(),
  notes: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.boolean().optional(),
  updatedAt: import_zod.z.boolean().optional(),
  shift: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => ShiftArgsSchema)]).optional()
}).strict();
var AvailabilityIncludeSchema = import_zod.z.object({
  user: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => UserArgsSchema)]).optional()
}).strict();
var AvailabilityArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => AvailabilitySelectSchema).optional(),
  include: import_zod.z.lazy(() => AvailabilityIncludeSchema).optional()
}).strict();
var AvailabilitySelectSchema = import_zod.z.object({
  id: import_zod.z.boolean().optional(),
  userId: import_zod.z.boolean().optional(),
  dayOfWeek: import_zod.z.boolean().optional(),
  startTime: import_zod.z.boolean().optional(),
  endTime: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.boolean().optional(),
  updatedAt: import_zod.z.boolean().optional(),
  user: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => UserArgsSchema)]).optional()
}).strict();
var SchedulingConstraintIncludeSchema = import_zod.z.object({
  user: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => UserArgsSchema)]).optional()
}).strict();
var SchedulingConstraintArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => SchedulingConstraintSelectSchema).optional(),
  include: import_zod.z.lazy(() => SchedulingConstraintIncludeSchema).optional()
}).strict();
var SchedulingConstraintSelectSchema = import_zod.z.object({
  id: import_zod.z.boolean().optional(),
  userId: import_zod.z.boolean().optional(),
  date: import_zod.z.boolean().optional(),
  constraintsType: import_zod.z.boolean().optional(),
  startTime: import_zod.z.boolean().optional(),
  endTime: import_zod.z.boolean().optional(),
  notes: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.boolean().optional(),
  updatedAt: import_zod.z.boolean().optional(),
  user: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => UserArgsSchema)]).optional()
}).strict();
var InventoryWithdrawalIncludeSchema = import_zod.z.object({
  inventoryItem: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => InventoryItemArgsSchema)]).optional(),
  recipe: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeArgsSchema)]).optional(),
  createdBy: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => UserArgsSchema)]).optional()
}).strict();
var InventoryWithdrawalArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => InventoryWithdrawalSelectSchema).optional(),
  include: import_zod.z.lazy(() => InventoryWithdrawalIncludeSchema).optional()
}).strict();
var InventoryWithdrawalSelectSchema = import_zod.z.object({
  id: import_zod.z.boolean().optional(),
  inventoryItemId: import_zod.z.boolean().optional(),
  dateTime: import_zod.z.boolean().optional(),
  quantity: import_zod.z.boolean().optional(),
  unit: import_zod.z.boolean().optional(),
  recipeId: import_zod.z.boolean().optional(),
  createdById: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.boolean().optional(),
  updatedAt: import_zod.z.boolean().optional(),
  inventoryItem: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => InventoryItemArgsSchema)]).optional(),
  recipe: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeArgsSchema)]).optional(),
  createdBy: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => UserArgsSchema)]).optional()
}).strict();
var AllergenIncludeSchema = import_zod.z.object({
  ingredients: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => IngredientAllergenFindManyArgsSchema)]).optional(),
  _count: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => AllergenCountOutputTypeArgsSchema)]).optional()
}).strict();
var AllergenArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => AllergenSelectSchema).optional(),
  include: import_zod.z.lazy(() => AllergenIncludeSchema).optional()
}).strict();
var AllergenCountOutputTypeArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => AllergenCountOutputTypeSelectSchema).nullish()
}).strict();
var AllergenCountOutputTypeSelectSchema = import_zod.z.object({
  ingredients: import_zod.z.boolean().optional()
}).strict();
var AllergenSelectSchema = import_zod.z.object({
  id: import_zod.z.boolean().optional(),
  name: import_zod.z.boolean().optional(),
  description: import_zod.z.boolean().optional(),
  ingredients: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => IngredientAllergenFindManyArgsSchema)]).optional(),
  _count: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => AllergenCountOutputTypeArgsSchema)]).optional()
}).strict();
var IngredientAllergenIncludeSchema = import_zod.z.object({
  ingredient: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => IngredientArgsSchema)]).optional(),
  allergen: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => AllergenArgsSchema)]).optional()
}).strict();
var IngredientAllergenArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => IngredientAllergenSelectSchema).optional(),
  include: import_zod.z.lazy(() => IngredientAllergenIncludeSchema).optional()
}).strict();
var IngredientAllergenSelectSchema = import_zod.z.object({
  id: import_zod.z.boolean().optional(),
  ingredientId: import_zod.z.boolean().optional(),
  allergenId: import_zod.z.boolean().optional(),
  ingredient: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => IngredientArgsSchema)]).optional(),
  allergen: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => AllergenArgsSchema)]).optional()
}).strict();
var NutritionalRecommendationIncludeSchema = import_zod.z.object({
  menuItem: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => MenuItemArgsSchema)]).optional()
}).strict();
var NutritionalRecommendationArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => NutritionalRecommendationSelectSchema).optional(),
  include: import_zod.z.lazy(() => NutritionalRecommendationIncludeSchema).optional()
}).strict();
var NutritionalRecommendationSelectSchema = import_zod.z.object({
  id: import_zod.z.boolean().optional(),
  menuItemId: import_zod.z.boolean().optional(),
  recommendation: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.boolean().optional(),
  updatedAt: import_zod.z.boolean().optional(),
  menuItem: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => MenuItemArgsSchema)]).optional()
}).strict();
var EarlyAccessSelectSchema = import_zod.z.object({
  id: import_zod.z.boolean().optional(),
  email: import_zod.z.boolean().optional(),
  isEmailSent: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.boolean().optional(),
  updatedAt: import_zod.z.boolean().optional()
}).strict();
var OrganizationIncludeSchema = import_zod.z.object({
  restaurants: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RestaurantFindManyArgsSchema)]).optional(),
  users: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => UserFindManyArgsSchema)]).optional(),
  _count: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => OrganizationCountOutputTypeArgsSchema)]).optional()
}).strict();
var OrganizationArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => OrganizationSelectSchema).optional(),
  include: import_zod.z.lazy(() => OrganizationIncludeSchema).optional()
}).strict();
var OrganizationCountOutputTypeArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => OrganizationCountOutputTypeSelectSchema).nullish()
}).strict();
var OrganizationCountOutputTypeSelectSchema = import_zod.z.object({
  restaurants: import_zod.z.boolean().optional(),
  users: import_zod.z.boolean().optional()
}).strict();
var OrganizationSelectSchema = import_zod.z.object({
  id: import_zod.z.boolean().optional(),
  name: import_zod.z.boolean().optional(),
  imageUrl: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.boolean().optional(),
  updatedAt: import_zod.z.boolean().optional(),
  restaurants: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RestaurantFindManyArgsSchema)]).optional(),
  users: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => UserFindManyArgsSchema)]).optional(),
  _count: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => OrganizationCountOutputTypeArgsSchema)]).optional()
}).strict();
var RestaurantIncludeSchema = import_zod.z.object({
  organization: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => OrganizationArgsSchema)]).optional(),
  users: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => UserFindManyArgsSchema)]).optional(),
  cookbooks: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => CookBookFindManyArgsSchema)]).optional(),
  inventory: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => InventoryArgsSchema)]).optional(),
  orders: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => OrderFindManyArgsSchema)]).optional(),
  recipes: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeFindManyArgsSchema)]).optional(),
  menus: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => MenuFindManyArgsSchema)]).optional(),
  salesTransactions: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => SalesTransactionsFindManyArgsSchema)]).optional(),
  leftoverItem: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => LeftoverItemFindManyArgsSchema)]).optional(),
  wasteRecord: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => WasteRecordFindManyArgsSchema)]).optional(),
  productionPlan: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => ProductionPlanFindManyArgsSchema)]).optional(),
  equipment: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => EquipmentFindManyArgsSchema)]).optional(),
  qualityChecklist: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => QualityChecklistFindManyArgsSchema)]).optional(),
  qustomerFeedback: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => CustomerFeedbackFindManyArgsSchema)]).optional(),
  _count: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RestaurantCountOutputTypeArgsSchema)]).optional()
}).strict();
var RestaurantArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => RestaurantSelectSchema).optional(),
  include: import_zod.z.lazy(() => RestaurantIncludeSchema).optional()
}).strict();
var RestaurantCountOutputTypeArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => RestaurantCountOutputTypeSelectSchema).nullish()
}).strict();
var RestaurantCountOutputTypeSelectSchema = import_zod.z.object({
  users: import_zod.z.boolean().optional(),
  cookbooks: import_zod.z.boolean().optional(),
  orders: import_zod.z.boolean().optional(),
  recipes: import_zod.z.boolean().optional(),
  menus: import_zod.z.boolean().optional(),
  salesTransactions: import_zod.z.boolean().optional(),
  leftoverItem: import_zod.z.boolean().optional(),
  wasteRecord: import_zod.z.boolean().optional(),
  productionPlan: import_zod.z.boolean().optional(),
  equipment: import_zod.z.boolean().optional(),
  qualityChecklist: import_zod.z.boolean().optional(),
  qustomerFeedback: import_zod.z.boolean().optional()
}).strict();
var RestaurantSelectSchema = import_zod.z.object({
  id: import_zod.z.boolean().optional(),
  name: import_zod.z.boolean().optional(),
  imageUrl: import_zod.z.boolean().optional(),
  address: import_zod.z.boolean().optional(),
  city: import_zod.z.boolean().optional(),
  zipCode: import_zod.z.boolean().optional(),
  state: import_zod.z.boolean().optional(),
  owner: import_zod.z.boolean().optional(),
  organizationId: import_zod.z.boolean().optional(),
  foodCost: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.boolean().optional(),
  updatedAt: import_zod.z.boolean().optional(),
  isDeleted: import_zod.z.boolean().optional(),
  deleted: import_zod.z.boolean().optional(),
  organization: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => OrganizationArgsSchema)]).optional(),
  users: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => UserFindManyArgsSchema)]).optional(),
  cookbooks: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => CookBookFindManyArgsSchema)]).optional(),
  inventory: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => InventoryArgsSchema)]).optional(),
  orders: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => OrderFindManyArgsSchema)]).optional(),
  recipes: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeFindManyArgsSchema)]).optional(),
  menus: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => MenuFindManyArgsSchema)]).optional(),
  salesTransactions: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => SalesTransactionsFindManyArgsSchema)]).optional(),
  leftoverItem: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => LeftoverItemFindManyArgsSchema)]).optional(),
  wasteRecord: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => WasteRecordFindManyArgsSchema)]).optional(),
  productionPlan: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => ProductionPlanFindManyArgsSchema)]).optional(),
  equipment: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => EquipmentFindManyArgsSchema)]).optional(),
  qualityChecklist: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => QualityChecklistFindManyArgsSchema)]).optional(),
  qustomerFeedback: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => CustomerFeedbackFindManyArgsSchema)]).optional(),
  _count: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RestaurantCountOutputTypeArgsSchema)]).optional()
}).strict();
var UserIncludeSchema = import_zod.z.object({
  organization: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => OrganizationArgsSchema)]).optional(),
  restaurant: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RestaurantArgsSchema)]).optional(),
  shifts: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => ShiftFindManyArgsSchema)]).optional(),
  prepItems: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => PrepItemFindManyArgsSchema)]).optional(),
  inventoryUpdates: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => InventoryItemFindManyArgsSchema)]).optional(),
  sessions: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => SessionFindManyArgsSchema)]).optional(),
  passwordResets: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => PasswordResetFindManyArgsSchema)]).optional(),
  leftoverItem: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => LeftoverItemFindManyArgsSchema)]).optional(),
  wasteRecord: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => WasteRecordFindManyArgsSchema)]).optional(),
  productionPlan: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => ProductionPlanFindManyArgsSchema)]).optional(),
  productionPlanItem: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => ProductionPlanItemFindManyArgsSchema)]).optional(),
  availability: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => AvailabilityFindManyArgsSchema)]).optional(),
  schedulingConstraint: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => SchedulingConstraintFindManyArgsSchema)]).optional(),
  inventoryWithdrawal: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => InventoryWithdrawalFindManyArgsSchema)]).optional(),
  checklistComplete: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => ChecklistCompleteFindManyArgsSchema)]).optional(),
  customerFeedback: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => CustomerFeedbackFindManyArgsSchema)]).optional(),
  recipeVersionsCreated: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeVersionFindManyArgsSchema)]).optional(),
  recipeVersionsApproved: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeVersionFindManyArgsSchema)]).optional(),
  _count: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => UserCountOutputTypeArgsSchema)]).optional()
}).strict();
var UserArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => UserSelectSchema).optional(),
  include: import_zod.z.lazy(() => UserIncludeSchema).optional()
}).strict();
var UserCountOutputTypeArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => UserCountOutputTypeSelectSchema).nullish()
}).strict();
var UserCountOutputTypeSelectSchema = import_zod.z.object({
  shifts: import_zod.z.boolean().optional(),
  prepItems: import_zod.z.boolean().optional(),
  inventoryUpdates: import_zod.z.boolean().optional(),
  sessions: import_zod.z.boolean().optional(),
  passwordResets: import_zod.z.boolean().optional(),
  leftoverItem: import_zod.z.boolean().optional(),
  wasteRecord: import_zod.z.boolean().optional(),
  productionPlan: import_zod.z.boolean().optional(),
  productionPlanItem: import_zod.z.boolean().optional(),
  availability: import_zod.z.boolean().optional(),
  schedulingConstraint: import_zod.z.boolean().optional(),
  inventoryWithdrawal: import_zod.z.boolean().optional(),
  checklistComplete: import_zod.z.boolean().optional(),
  customerFeedback: import_zod.z.boolean().optional(),
  recipeVersionsCreated: import_zod.z.boolean().optional(),
  recipeVersionsApproved: import_zod.z.boolean().optional()
}).strict();
var UserSelectSchema = import_zod.z.object({
  id: import_zod.z.boolean().optional(),
  email: import_zod.z.boolean().optional(),
  sub: import_zod.z.boolean().optional(),
  passwordHash: import_zod.z.boolean().optional(),
  firstName: import_zod.z.boolean().optional(),
  lastName: import_zod.z.boolean().optional(),
  profileImage: import_zod.z.boolean().optional(),
  verified: import_zod.z.boolean().optional(),
  role: import_zod.z.boolean().optional(),
  organizationId: import_zod.z.boolean().optional(),
  restaurantId: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.boolean().optional(),
  updatedAt: import_zod.z.boolean().optional(),
  organization: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => OrganizationArgsSchema)]).optional(),
  restaurant: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RestaurantArgsSchema)]).optional(),
  shifts: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => ShiftFindManyArgsSchema)]).optional(),
  prepItems: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => PrepItemFindManyArgsSchema)]).optional(),
  inventoryUpdates: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => InventoryItemFindManyArgsSchema)]).optional(),
  sessions: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => SessionFindManyArgsSchema)]).optional(),
  passwordResets: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => PasswordResetFindManyArgsSchema)]).optional(),
  leftoverItem: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => LeftoverItemFindManyArgsSchema)]).optional(),
  wasteRecord: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => WasteRecordFindManyArgsSchema)]).optional(),
  productionPlan: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => ProductionPlanFindManyArgsSchema)]).optional(),
  productionPlanItem: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => ProductionPlanItemFindManyArgsSchema)]).optional(),
  availability: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => AvailabilityFindManyArgsSchema)]).optional(),
  schedulingConstraint: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => SchedulingConstraintFindManyArgsSchema)]).optional(),
  inventoryWithdrawal: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => InventoryWithdrawalFindManyArgsSchema)]).optional(),
  checklistComplete: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => ChecklistCompleteFindManyArgsSchema)]).optional(),
  customerFeedback: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => CustomerFeedbackFindManyArgsSchema)]).optional(),
  recipeVersionsCreated: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeVersionFindManyArgsSchema)]).optional(),
  recipeVersionsApproved: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeVersionFindManyArgsSchema)]).optional(),
  _count: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => UserCountOutputTypeArgsSchema)]).optional()
}).strict();
var SessionIncludeSchema = import_zod.z.object({
  user: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => UserArgsSchema)]).optional()
}).strict();
var SessionArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => SessionSelectSchema).optional(),
  include: import_zod.z.lazy(() => SessionIncludeSchema).optional()
}).strict();
var SessionSelectSchema = import_zod.z.object({
  id: import_zod.z.boolean().optional(),
  userId: import_zod.z.boolean().optional(),
  code: import_zod.z.boolean().optional(),
  token: import_zod.z.boolean().optional(),
  expiresAt: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.boolean().optional(),
  user: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => UserArgsSchema)]).optional()
}).strict();
var CookBookIncludeSchema = import_zod.z.object({
  recipes: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeFindManyArgsSchema)]).optional(),
  restaurant: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RestaurantArgsSchema)]).optional(),
  _count: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => CookBookCountOutputTypeArgsSchema)]).optional()
}).strict();
var CookBookArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => CookBookSelectSchema).optional(),
  include: import_zod.z.lazy(() => CookBookIncludeSchema).optional()
}).strict();
var CookBookCountOutputTypeArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => CookBookCountOutputTypeSelectSchema).nullish()
}).strict();
var CookBookCountOutputTypeSelectSchema = import_zod.z.object({
  recipes: import_zod.z.boolean().optional()
}).strict();
var CookBookSelectSchema = import_zod.z.object({
  id: import_zod.z.boolean().optional(),
  name: import_zod.z.boolean().optional(),
  imageUrl: import_zod.z.boolean().optional(),
  category: import_zod.z.boolean().optional(),
  restaurantId: import_zod.z.boolean().optional(),
  recipes: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeFindManyArgsSchema)]).optional(),
  restaurant: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RestaurantArgsSchema)]).optional(),
  _count: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => CookBookCountOutputTypeArgsSchema)]).optional()
}).strict();
var RecipeIncludeSchema = import_zod.z.object({
  restaurant: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RestaurantArgsSchema)]).optional(),
  cookBook: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => CookBookArgsSchema)]).optional(),
  ingredients: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeIngredientFindManyArgsSchema)]).optional(),
  instructions: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeInstructionFindManyArgsSchema)]).optional(),
  menuItems: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => MenuItemFindManyArgsSchema)]).optional(),
  foodCostHistory: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => FoodCostHistoryFindManyArgsSchema)]).optional(),
  prepHistory: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => PrepHistoryFindManyArgsSchema)]).optional(),
  prepBoards: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => PrepBoardFindManyArgsSchema)]).optional(),
  prepItems: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => PrepItemFindManyArgsSchema)]).optional(),
  MenuItemRecipe: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => MenuItemRecipeFindManyArgsSchema)]).optional(),
  ProductionPlanItem: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => ProductionPlanItemFindManyArgsSchema)]).optional(),
  InventoryWithdrawal: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => InventoryWithdrawalFindManyArgsSchema)]).optional(),
  tags: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeTagFindManyArgsSchema)]).optional(),
  versions: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeVersionFindManyArgsSchema)]).optional(),
  equipment: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeEquipmentFindManyArgsSchema)]).optional(),
  dietaryRestrictions: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => DietaryRestrictionFindManyArgsSchema)]).optional(),
  _count: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeCountOutputTypeArgsSchema)]).optional()
}).strict();
var RecipeArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => RecipeSelectSchema).optional(),
  include: import_zod.z.lazy(() => RecipeIncludeSchema).optional()
}).strict();
var RecipeCountOutputTypeArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => RecipeCountOutputTypeSelectSchema).nullish()
}).strict();
var RecipeCountOutputTypeSelectSchema = import_zod.z.object({
  ingredients: import_zod.z.boolean().optional(),
  instructions: import_zod.z.boolean().optional(),
  menuItems: import_zod.z.boolean().optional(),
  foodCostHistory: import_zod.z.boolean().optional(),
  prepHistory: import_zod.z.boolean().optional(),
  prepBoards: import_zod.z.boolean().optional(),
  prepItems: import_zod.z.boolean().optional(),
  MenuItemRecipe: import_zod.z.boolean().optional(),
  ProductionPlanItem: import_zod.z.boolean().optional(),
  InventoryWithdrawal: import_zod.z.boolean().optional(),
  tags: import_zod.z.boolean().optional(),
  versions: import_zod.z.boolean().optional(),
  equipment: import_zod.z.boolean().optional(),
  dietaryRestrictions: import_zod.z.boolean().optional()
}).strict();
var RecipeSelectSchema = import_zod.z.object({
  id: import_zod.z.boolean().optional(),
  name: import_zod.z.boolean().optional(),
  imageUrl: import_zod.z.boolean().optional(),
  description: import_zod.z.boolean().optional(),
  servings: import_zod.z.boolean().optional(),
  cookTime: import_zod.z.boolean().optional(),
  prepTime: import_zod.z.boolean().optional(),
  frequency: import_zod.z.boolean().optional(),
  restaurantId: import_zod.z.boolean().optional(),
  cookBookId: import_zod.z.boolean().optional(),
  foodCost: import_zod.z.boolean().optional(),
  isDeleted: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.boolean().optional(),
  updatedAt: import_zod.z.boolean().optional(),
  restaurant: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RestaurantArgsSchema)]).optional(),
  cookBook: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => CookBookArgsSchema)]).optional(),
  ingredients: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeIngredientFindManyArgsSchema)]).optional(),
  instructions: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeInstructionFindManyArgsSchema)]).optional(),
  menuItems: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => MenuItemFindManyArgsSchema)]).optional(),
  foodCostHistory: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => FoodCostHistoryFindManyArgsSchema)]).optional(),
  prepHistory: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => PrepHistoryFindManyArgsSchema)]).optional(),
  prepBoards: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => PrepBoardFindManyArgsSchema)]).optional(),
  prepItems: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => PrepItemFindManyArgsSchema)]).optional(),
  MenuItemRecipe: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => MenuItemRecipeFindManyArgsSchema)]).optional(),
  ProductionPlanItem: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => ProductionPlanItemFindManyArgsSchema)]).optional(),
  InventoryWithdrawal: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => InventoryWithdrawalFindManyArgsSchema)]).optional(),
  tags: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeTagFindManyArgsSchema)]).optional(),
  versions: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeVersionFindManyArgsSchema)]).optional(),
  equipment: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeEquipmentFindManyArgsSchema)]).optional(),
  dietaryRestrictions: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => DietaryRestrictionFindManyArgsSchema)]).optional(),
  _count: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeCountOutputTypeArgsSchema)]).optional()
}).strict();
var IngredientIncludeSchema = import_zod.z.object({
  recipeIngredients: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeIngredientFindManyArgsSchema)]).optional(),
  inventoryItems: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => InventoryItemFindManyArgsSchema)]).optional(),
  orderItems: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => OrderItemFindManyArgsSchema)]).optional(),
  vendors: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => VendorFindManyArgsSchema)]).optional(),
  WasteRecord: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => WasteRecordFindManyArgsSchema)]).optional(),
  IngredientAllergen: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => IngredientAllergenFindManyArgsSchema)]).optional(),
  SupplierPriceHistory: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => SupplierPriceHistoryFindManyArgsSchema)]).optional(),
  DietaryRestriction: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => DietaryRestrictionArgsSchema)]).optional(),
  _count: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => IngredientCountOutputTypeArgsSchema)]).optional()
}).strict();
var IngredientArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => IngredientSelectSchema).optional(),
  include: import_zod.z.lazy(() => IngredientIncludeSchema).optional()
}).strict();
var IngredientCountOutputTypeArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => IngredientCountOutputTypeSelectSchema).nullish()
}).strict();
var IngredientCountOutputTypeSelectSchema = import_zod.z.object({
  recipeIngredients: import_zod.z.boolean().optional(),
  inventoryItems: import_zod.z.boolean().optional(),
  orderItems: import_zod.z.boolean().optional(),
  vendors: import_zod.z.boolean().optional(),
  WasteRecord: import_zod.z.boolean().optional(),
  IngredientAllergen: import_zod.z.boolean().optional(),
  SupplierPriceHistory: import_zod.z.boolean().optional()
}).strict();
var IngredientSelectSchema = import_zod.z.object({
  id: import_zod.z.boolean().optional(),
  name: import_zod.z.boolean().optional(),
  category: import_zod.z.boolean().optional(),
  price: import_zod.z.boolean().optional(),
  dietaryRestrictionId: import_zod.z.boolean().optional(),
  recipeIngredients: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeIngredientFindManyArgsSchema)]).optional(),
  inventoryItems: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => InventoryItemFindManyArgsSchema)]).optional(),
  orderItems: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => OrderItemFindManyArgsSchema)]).optional(),
  vendors: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => VendorFindManyArgsSchema)]).optional(),
  WasteRecord: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => WasteRecordFindManyArgsSchema)]).optional(),
  IngredientAllergen: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => IngredientAllergenFindManyArgsSchema)]).optional(),
  SupplierPriceHistory: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => SupplierPriceHistoryFindManyArgsSchema)]).optional(),
  DietaryRestriction: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => DietaryRestrictionArgsSchema)]).optional(),
  _count: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => IngredientCountOutputTypeArgsSchema)]).optional()
}).strict();
var RecipeIngredientIncludeSchema = import_zod.z.object({
  recipe: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeArgsSchema)]).optional(),
  ingredient: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => IngredientArgsSchema)]).optional(),
  RecipeVersion: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeVersionArgsSchema)]).optional()
}).strict();
var RecipeIngredientArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => RecipeIngredientSelectSchema).optional(),
  include: import_zod.z.lazy(() => RecipeIngredientIncludeSchema).optional()
}).strict();
var RecipeIngredientSelectSchema = import_zod.z.object({
  id: import_zod.z.boolean().optional(),
  recipeId: import_zod.z.boolean().optional(),
  ingredientId: import_zod.z.boolean().optional(),
  quantity: import_zod.z.boolean().optional(),
  unit: import_zod.z.boolean().optional(),
  joinAt: import_zod.z.boolean().optional(),
  recipeVersionId: import_zod.z.boolean().optional(),
  recipe: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeArgsSchema)]).optional(),
  ingredient: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => IngredientArgsSchema)]).optional(),
  RecipeVersion: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeVersionArgsSchema)]).optional()
}).strict();
var RecipeInstructionIncludeSchema = import_zod.z.object({
  recipe: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeArgsSchema)]).optional(),
  RecipeVersion: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeVersionArgsSchema)]).optional()
}).strict();
var RecipeInstructionArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => RecipeInstructionSelectSchema).optional(),
  include: import_zod.z.lazy(() => RecipeInstructionIncludeSchema).optional()
}).strict();
var RecipeInstructionSelectSchema = import_zod.z.object({
  id: import_zod.z.boolean().optional(),
  recipeId: import_zod.z.boolean().optional(),
  stepNumber: import_zod.z.boolean().optional(),
  instruction: import_zod.z.boolean().optional(),
  imageUrl: import_zod.z.boolean().optional(),
  recipeVersionId: import_zod.z.boolean().optional(),
  recipe: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeArgsSchema)]).optional(),
  RecipeVersion: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeVersionArgsSchema)]).optional()
}).strict();
var InventoryIncludeSchema = import_zod.z.object({
  restaurant: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RestaurantArgsSchema)]).optional(),
  items: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => InventoryItemFindManyArgsSchema)]).optional(),
  _count: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => InventoryCountOutputTypeArgsSchema)]).optional()
}).strict();
var InventoryArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => InventorySelectSchema).optional(),
  include: import_zod.z.lazy(() => InventoryIncludeSchema).optional()
}).strict();
var InventoryCountOutputTypeArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => InventoryCountOutputTypeSelectSchema).nullish()
}).strict();
var InventoryCountOutputTypeSelectSchema = import_zod.z.object({
  items: import_zod.z.boolean().optional()
}).strict();
var InventorySelectSchema = import_zod.z.object({
  id: import_zod.z.boolean().optional(),
  restaurantId: import_zod.z.boolean().optional(),
  restaurant: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RestaurantArgsSchema)]).optional(),
  items: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => InventoryItemFindManyArgsSchema)]).optional(),
  _count: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => InventoryCountOutputTypeArgsSchema)]).optional()
}).strict();
var InventoryItemIncludeSchema = import_zod.z.object({
  inventory: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => InventoryArgsSchema)]).optional(),
  ingredient: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => IngredientArgsSchema)]).optional(),
  lastUpdatedBy: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => UserArgsSchema)]).optional(),
  InventoryWithdrawal: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => InventoryWithdrawalFindManyArgsSchema)]).optional(),
  _count: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => InventoryItemCountOutputTypeArgsSchema)]).optional()
}).strict();
var InventoryItemArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => InventoryItemSelectSchema).optional(),
  include: import_zod.z.lazy(() => InventoryItemIncludeSchema).optional()
}).strict();
var InventoryItemCountOutputTypeArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => InventoryItemCountOutputTypeSelectSchema).nullish()
}).strict();
var InventoryItemCountOutputTypeSelectSchema = import_zod.z.object({
  InventoryWithdrawal: import_zod.z.boolean().optional()
}).strict();
var InventoryItemSelectSchema = import_zod.z.object({
  id: import_zod.z.boolean().optional(),
  inventoryId: import_zod.z.boolean().optional(),
  ingredientId: import_zod.z.boolean().optional(),
  quantity: import_zod.z.boolean().optional(),
  unit: import_zod.z.boolean().optional(),
  minQuantity: import_zod.z.boolean().optional(),
  restockThreshold: import_zod.z.boolean().optional(),
  lastUpdatedById: import_zod.z.boolean().optional(),
  lastUpdated: import_zod.z.boolean().optional(),
  inventory: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => InventoryArgsSchema)]).optional(),
  ingredient: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => IngredientArgsSchema)]).optional(),
  lastUpdatedBy: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => UserArgsSchema)]).optional(),
  InventoryWithdrawal: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => InventoryWithdrawalFindManyArgsSchema)]).optional(),
  _count: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => InventoryItemCountOutputTypeArgsSchema)]).optional()
}).strict();
var OrderIncludeSchema = import_zod.z.object({
  restaurant: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RestaurantArgsSchema)]).optional(),
  vendor: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => VendorArgsSchema)]).optional(),
  items: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => OrderItemFindManyArgsSchema)]).optional(),
  _count: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => OrderCountOutputTypeArgsSchema)]).optional()
}).strict();
var OrderArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => OrderSelectSchema).optional(),
  include: import_zod.z.lazy(() => OrderIncludeSchema).optional()
}).strict();
var OrderCountOutputTypeArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => OrderCountOutputTypeSelectSchema).nullish()
}).strict();
var OrderCountOutputTypeSelectSchema = import_zod.z.object({
  items: import_zod.z.boolean().optional()
}).strict();
var OrderSelectSchema = import_zod.z.object({
  id: import_zod.z.boolean().optional(),
  restaurantId: import_zod.z.boolean().optional(),
  vendorId: import_zod.z.boolean().optional(),
  status: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.boolean().optional(),
  updatedAt: import_zod.z.boolean().optional(),
  restaurant: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RestaurantArgsSchema)]).optional(),
  vendor: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => VendorArgsSchema)]).optional(),
  items: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => OrderItemFindManyArgsSchema)]).optional(),
  _count: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => OrderCountOutputTypeArgsSchema)]).optional()
}).strict();
var OrderItemIncludeSchema = import_zod.z.object({
  order: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => OrderArgsSchema)]).optional(),
  ingredient: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => IngredientArgsSchema)]).optional()
}).strict();
var OrderItemArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => OrderItemSelectSchema).optional(),
  include: import_zod.z.lazy(() => OrderItemIncludeSchema).optional()
}).strict();
var OrderItemSelectSchema = import_zod.z.object({
  id: import_zod.z.boolean().optional(),
  orderId: import_zod.z.boolean().optional(),
  ingredientId: import_zod.z.boolean().optional(),
  quantity: import_zod.z.boolean().optional(),
  unit: import_zod.z.boolean().optional(),
  price: import_zod.z.boolean().optional(),
  order: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => OrderArgsSchema)]).optional(),
  ingredient: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => IngredientArgsSchema)]).optional()
}).strict();
var VendorIncludeSchema = import_zod.z.object({
  orders: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => OrderFindManyArgsSchema)]).optional(),
  ingredients: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => IngredientFindManyArgsSchema)]).optional(),
  supplierPriceHistory: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => SupplierPriceHistoryFindManyArgsSchema)]).optional(),
  _count: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => VendorCountOutputTypeArgsSchema)]).optional()
}).strict();
var VendorArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => VendorSelectSchema).optional(),
  include: import_zod.z.lazy(() => VendorIncludeSchema).optional()
}).strict();
var VendorCountOutputTypeArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => VendorCountOutputTypeSelectSchema).nullish()
}).strict();
var VendorCountOutputTypeSelectSchema = import_zod.z.object({
  orders: import_zod.z.boolean().optional(),
  ingredients: import_zod.z.boolean().optional(),
  supplierPriceHistory: import_zod.z.boolean().optional()
}).strict();
var VendorSelectSchema = import_zod.z.object({
  id: import_zod.z.boolean().optional(),
  name: import_zod.z.boolean().optional(),
  contact: import_zod.z.boolean().optional(),
  email: import_zod.z.boolean().optional(),
  phone: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.boolean().optional(),
  updatedAt: import_zod.z.boolean().optional(),
  orders: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => OrderFindManyArgsSchema)]).optional(),
  ingredients: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => IngredientFindManyArgsSchema)]).optional(),
  supplierPriceHistory: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => SupplierPriceHistoryFindManyArgsSchema)]).optional(),
  _count: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => VendorCountOutputTypeArgsSchema)]).optional()
}).strict();
var ShiftIncludeSchema = import_zod.z.object({
  user: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => UserArgsSchema)]).optional(),
  ShiftTask: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => ShiftTaskFindManyArgsSchema)]).optional(),
  _count: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => ShiftCountOutputTypeArgsSchema)]).optional()
}).strict();
var ShiftArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => ShiftSelectSchema).optional(),
  include: import_zod.z.lazy(() => ShiftIncludeSchema).optional()
}).strict();
var ShiftCountOutputTypeArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => ShiftCountOutputTypeSelectSchema).nullish()
}).strict();
var ShiftCountOutputTypeSelectSchema = import_zod.z.object({
  ShiftTask: import_zod.z.boolean().optional()
}).strict();
var ShiftSelectSchema = import_zod.z.object({
  id: import_zod.z.boolean().optional(),
  userId: import_zod.z.boolean().optional(),
  startTime: import_zod.z.boolean().optional(),
  endTime: import_zod.z.boolean().optional(),
  status: import_zod.z.boolean().optional(),
  user: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => UserArgsSchema)]).optional(),
  ShiftTask: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => ShiftTaskFindManyArgsSchema)]).optional(),
  _count: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => ShiftCountOutputTypeArgsSchema)]).optional()
}).strict();
var PrepBoardIncludeSchema = import_zod.z.object({
  recipes: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeFindManyArgsSchema)]).optional(),
  prepItems: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => PrepItemFindManyArgsSchema)]).optional(),
  _count: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => PrepBoardCountOutputTypeArgsSchema)]).optional()
}).strict();
var PrepBoardArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => PrepBoardSelectSchema).optional(),
  include: import_zod.z.lazy(() => PrepBoardIncludeSchema).optional()
}).strict();
var PrepBoardCountOutputTypeArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => PrepBoardCountOutputTypeSelectSchema).nullish()
}).strict();
var PrepBoardCountOutputTypeSelectSchema = import_zod.z.object({
  recipes: import_zod.z.boolean().optional(),
  prepItems: import_zod.z.boolean().optional()
}).strict();
var PrepBoardSelectSchema = import_zod.z.object({
  id: import_zod.z.boolean().optional(),
  name: import_zod.z.boolean().optional(),
  status: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.boolean().optional(),
  updatedAt: import_zod.z.boolean().optional(),
  recipes: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeFindManyArgsSchema)]).optional(),
  prepItems: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => PrepItemFindManyArgsSchema)]).optional(),
  _count: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => PrepBoardCountOutputTypeArgsSchema)]).optional()
}).strict();
var PrepItemIncludeSchema = import_zod.z.object({
  prepBoard: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => PrepBoardArgsSchema)]).optional(),
  recipe: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeArgsSchema)]).optional(),
  assignedTo: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => UserArgsSchema)]).optional()
}).strict();
var PrepItemArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => PrepItemSelectSchema).optional(),
  include: import_zod.z.lazy(() => PrepItemIncludeSchema).optional()
}).strict();
var PrepItemSelectSchema = import_zod.z.object({
  id: import_zod.z.boolean().optional(),
  prepBoardId: import_zod.z.boolean().optional(),
  recipeId: import_zod.z.boolean().optional(),
  quantity: import_zod.z.boolean().optional(),
  status: import_zod.z.boolean().optional(),
  assignedToId: import_zod.z.boolean().optional(),
  prepBoard: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => PrepBoardArgsSchema)]).optional(),
  recipe: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeArgsSchema)]).optional(),
  assignedTo: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => UserArgsSchema)]).optional()
}).strict();
var PasswordResetIncludeSchema = import_zod.z.object({
  user: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => UserArgsSchema)]).optional()
}).strict();
var PasswordResetArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => PasswordResetSelectSchema).optional(),
  include: import_zod.z.lazy(() => PasswordResetIncludeSchema).optional()
}).strict();
var PasswordResetSelectSchema = import_zod.z.object({
  id: import_zod.z.boolean().optional(),
  token: import_zod.z.boolean().optional(),
  userId: import_zod.z.boolean().optional(),
  expiresAt: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.boolean().optional(),
  updatedAt: import_zod.z.boolean().optional(),
  user: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => UserArgsSchema)]).optional()
}).strict();
var MenuIncludeSchema = import_zod.z.object({
  restaurant: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RestaurantArgsSchema)]).optional(),
  menuItems: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => MenuItemFindManyArgsSchema)]).optional(),
  MenuCategory: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => MenuCategoryFindManyArgsSchema)]).optional(),
  _count: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => MenuCountOutputTypeArgsSchema)]).optional()
}).strict();
var MenuArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => MenuSelectSchema).optional(),
  include: import_zod.z.lazy(() => MenuIncludeSchema).optional()
}).strict();
var MenuCountOutputTypeArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => MenuCountOutputTypeSelectSchema).nullish()
}).strict();
var MenuCountOutputTypeSelectSchema = import_zod.z.object({
  menuItems: import_zod.z.boolean().optional(),
  MenuCategory: import_zod.z.boolean().optional()
}).strict();
var MenuSelectSchema = import_zod.z.object({
  id: import_zod.z.boolean().optional(),
  name: import_zod.z.boolean().optional(),
  restaurantId: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.boolean().optional(),
  updatedAt: import_zod.z.boolean().optional(),
  restaurant: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RestaurantArgsSchema)]).optional(),
  menuItems: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => MenuItemFindManyArgsSchema)]).optional(),
  MenuCategory: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => MenuCategoryFindManyArgsSchema)]).optional(),
  _count: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => MenuCountOutputTypeArgsSchema)]).optional()
}).strict();
var MenuItemRecipeIncludeSchema = import_zod.z.object({
  menuItem: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => MenuItemArgsSchema)]).optional(),
  recipe: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeArgsSchema)]).optional()
}).strict();
var MenuItemRecipeArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => MenuItemRecipeSelectSchema).optional(),
  include: import_zod.z.lazy(() => MenuItemRecipeIncludeSchema).optional()
}).strict();
var MenuItemRecipeSelectSchema = import_zod.z.object({
  id: import_zod.z.boolean().optional(),
  menuItemId: import_zod.z.boolean().optional(),
  recipeId: import_zod.z.boolean().optional(),
  joinAt: import_zod.z.boolean().optional(),
  menuItem: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => MenuItemArgsSchema)]).optional(),
  recipe: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeArgsSchema)]).optional()
}).strict();
var MenuItemIncludeSchema = import_zod.z.object({
  nutritionalInfo: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => NutritionalInfoArgsSchema)]).optional(),
  menu: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => MenuArgsSchema)]).optional(),
  recipes: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeFindManyArgsSchema)]).optional(),
  menuItemRecipe: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => MenuItemRecipeFindManyArgsSchema)]).optional(),
  salesTransactions: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => SalesTransactionsFindManyArgsSchema)]).optional(),
  leftoverItem: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => LeftoverItemFindManyArgsSchema)]).optional(),
  nutritionalRecommendation: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => NutritionalRecommendationFindManyArgsSchema)]).optional(),
  category: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => MenuCategoryArgsSchema)]).optional(),
  feedback: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => CustomerFeedbackFindManyArgsSchema)]).optional(),
  dietaryRestrictions: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => DietaryRestrictionFindManyArgsSchema)]).optional(),
  _count: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => MenuItemCountOutputTypeArgsSchema)]).optional()
}).strict();
var MenuItemArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => MenuItemSelectSchema).optional(),
  include: import_zod.z.lazy(() => MenuItemIncludeSchema).optional()
}).strict();
var MenuItemCountOutputTypeArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => MenuItemCountOutputTypeSelectSchema).nullish()
}).strict();
var MenuItemCountOutputTypeSelectSchema = import_zod.z.object({
  recipes: import_zod.z.boolean().optional(),
  menuItemRecipe: import_zod.z.boolean().optional(),
  salesTransactions: import_zod.z.boolean().optional(),
  leftoverItem: import_zod.z.boolean().optional(),
  nutritionalRecommendation: import_zod.z.boolean().optional(),
  feedback: import_zod.z.boolean().optional(),
  dietaryRestrictions: import_zod.z.boolean().optional()
}).strict();
var MenuItemSelectSchema = import_zod.z.object({
  id: import_zod.z.boolean().optional(),
  name: import_zod.z.boolean().optional(),
  description: import_zod.z.boolean().optional(),
  price: import_zod.z.boolean().optional(),
  foodCost: import_zod.z.boolean().optional(),
  recipeIds: import_zod.z.boolean().optional(),
  recipeServingsAmount: import_zod.z.boolean().optional(),
  recipeServingsCost: import_zod.z.boolean().optional(),
  allergens: import_zod.z.boolean().optional(),
  nutritionalInfoId: import_zod.z.boolean().optional(),
  menuId: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.boolean().optional(),
  updatedAt: import_zod.z.boolean().optional(),
  categoryId: import_zod.z.boolean().optional(),
  nutritionalInfo: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => NutritionalInfoArgsSchema)]).optional(),
  menu: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => MenuArgsSchema)]).optional(),
  recipes: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeFindManyArgsSchema)]).optional(),
  menuItemRecipe: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => MenuItemRecipeFindManyArgsSchema)]).optional(),
  salesTransactions: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => SalesTransactionsFindManyArgsSchema)]).optional(),
  leftoverItem: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => LeftoverItemFindManyArgsSchema)]).optional(),
  nutritionalRecommendation: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => NutritionalRecommendationFindManyArgsSchema)]).optional(),
  category: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => MenuCategoryArgsSchema)]).optional(),
  feedback: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => CustomerFeedbackFindManyArgsSchema)]).optional(),
  dietaryRestrictions: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => DietaryRestrictionFindManyArgsSchema)]).optional(),
  _count: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => MenuItemCountOutputTypeArgsSchema)]).optional()
}).strict();
var NutritionalInfoIncludeSchema = import_zod.z.object({
  menuItem: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => MenuItemArgsSchema)]).optional()
}).strict();
var NutritionalInfoArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => NutritionalInfoSelectSchema).optional(),
  include: import_zod.z.lazy(() => NutritionalInfoIncludeSchema).optional()
}).strict();
var NutritionalInfoSelectSchema = import_zod.z.object({
  id: import_zod.z.boolean().optional(),
  menuItemId: import_zod.z.boolean().optional(),
  calories: import_zod.z.boolean().optional(),
  fat: import_zod.z.boolean().optional(),
  saturatedFat: import_zod.z.boolean().optional(),
  transFat: import_zod.z.boolean().optional(),
  cholesterol: import_zod.z.boolean().optional(),
  sodium: import_zod.z.boolean().optional(),
  carbohydrates: import_zod.z.boolean().optional(),
  fiber: import_zod.z.boolean().optional(),
  sugar: import_zod.z.boolean().optional(),
  protein: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.boolean().optional(),
  updatedAt: import_zod.z.boolean().optional(),
  menuItem: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => MenuItemArgsSchema)]).optional()
}).strict();
var FoodCostHistoryIncludeSchema = import_zod.z.object({
  recipe: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeArgsSchema)]).optional()
}).strict();
var FoodCostHistoryArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => FoodCostHistorySelectSchema).optional(),
  include: import_zod.z.lazy(() => FoodCostHistoryIncludeSchema).optional()
}).strict();
var FoodCostHistorySelectSchema = import_zod.z.object({
  id: import_zod.z.boolean().optional(),
  recipeId: import_zod.z.boolean().optional(),
  cost: import_zod.z.boolean().optional(),
  date: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.boolean().optional(),
  updatedAt: import_zod.z.boolean().optional(),
  recipe: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeArgsSchema)]).optional()
}).strict();
var PrepHistoryIncludeSchema = import_zod.z.object({
  recipe: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeArgsSchema)]).optional()
}).strict();
var PrepHistoryArgsSchema = import_zod.z.object({
  select: import_zod.z.lazy(() => PrepHistorySelectSchema).optional(),
  include: import_zod.z.lazy(() => PrepHistoryIncludeSchema).optional()
}).strict();
var PrepHistorySelectSchema = import_zod.z.object({
  id: import_zod.z.boolean().optional(),
  recipeId: import_zod.z.boolean().optional(),
  quantity: import_zod.z.boolean().optional(),
  date: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.boolean().optional(),
  updatedAt: import_zod.z.boolean().optional(),
  recipe: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeArgsSchema)]).optional()
}).strict();
var SalesTransactionsWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsWhereInputSchema), import_zod.z.lazy(() => SalesTransactionsWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => SalesTransactionsWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsWhereInputSchema), import_zod.z.lazy(() => SalesTransactionsWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  posTransactionID: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  menuItemId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  price: import_zod.z.union([import_zod.z.lazy(() => FloatFilterSchema), import_zod.z.number()]).optional(),
  total: import_zod.z.union([import_zod.z.lazy(() => FloatFilterSchema), import_zod.z.number()]).optional(),
  transactionDate: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  restaurant: import_zod.z.union([import_zod.z.lazy(() => RestaurantRelationFilterSchema), import_zod.z.lazy(() => RestaurantWhereInputSchema)]).optional(),
  menuItem: import_zod.z.union([import_zod.z.lazy(() => MenuItemRelationFilterSchema), import_zod.z.lazy(() => MenuItemWhereInputSchema)]).optional()
}).strict();
var SalesTransactionsOrderByWithRelationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  posTransactionID: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  menuItemId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  price: import_zod.z.lazy(() => SortOrderSchema).optional(),
  total: import_zod.z.lazy(() => SortOrderSchema).optional(),
  transactionDate: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantOrderByWithRelationInputSchema).optional(),
  menuItem: import_zod.z.lazy(() => MenuItemOrderByWithRelationInputSchema).optional()
}).strict();
var SalesTransactionsWhereUniqueInputSchema = import_zod.z.union([
  import_zod.z.object({
    id: import_zod.z.number().int(),
    posTransactionID: import_zod.z.string()
  }),
  import_zod.z.object({
    id: import_zod.z.number().int()
  }),
  import_zod.z.object({
    posTransactionID: import_zod.z.string()
  })
]).and(import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  posTransactionID: import_zod.z.string().optional(),
  AND: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsWhereInputSchema), import_zod.z.lazy(() => SalesTransactionsWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => SalesTransactionsWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsWhereInputSchema), import_zod.z.lazy(() => SalesTransactionsWhereInputSchema).array()]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  menuItemId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  price: import_zod.z.union([import_zod.z.lazy(() => FloatFilterSchema), import_zod.z.number()]).optional(),
  total: import_zod.z.union([import_zod.z.lazy(() => FloatFilterSchema), import_zod.z.number()]).optional(),
  transactionDate: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  restaurant: import_zod.z.union([import_zod.z.lazy(() => RestaurantRelationFilterSchema), import_zod.z.lazy(() => RestaurantWhereInputSchema)]).optional(),
  menuItem: import_zod.z.union([import_zod.z.lazy(() => MenuItemRelationFilterSchema), import_zod.z.lazy(() => MenuItemWhereInputSchema)]).optional()
}).strict());
var SalesTransactionsOrderByWithAggregationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  posTransactionID: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  menuItemId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  price: import_zod.z.lazy(() => SortOrderSchema).optional(),
  total: import_zod.z.lazy(() => SortOrderSchema).optional(),
  transactionDate: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  _count: import_zod.z.lazy(() => SalesTransactionsCountOrderByAggregateInputSchema).optional(),
  _avg: import_zod.z.lazy(() => SalesTransactionsAvgOrderByAggregateInputSchema).optional(),
  _max: import_zod.z.lazy(() => SalesTransactionsMaxOrderByAggregateInputSchema).optional(),
  _min: import_zod.z.lazy(() => SalesTransactionsMinOrderByAggregateInputSchema).optional(),
  _sum: import_zod.z.lazy(() => SalesTransactionsSumOrderByAggregateInputSchema).optional()
}).strict();
var SalesTransactionsScalarWhereWithAggregatesInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => SalesTransactionsScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => SalesTransactionsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => SalesTransactionsScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  posTransactionID: import_zod.z.union([import_zod.z.lazy(() => StringNullableWithAggregatesFilterSchema), import_zod.z.string()]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  menuItemId: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  price: import_zod.z.union([import_zod.z.lazy(() => FloatWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  total: import_zod.z.union([import_zod.z.lazy(() => FloatWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  transactionDate: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var MenuCategoryWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => MenuCategoryWhereInputSchema), import_zod.z.lazy(() => MenuCategoryWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => MenuCategoryWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => MenuCategoryWhereInputSchema), import_zod.z.lazy(() => MenuCategoryWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  name: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  description: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  displayOrder: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  menuId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  isActive: import_zod.z.union([import_zod.z.lazy(() => BoolFilterSchema), import_zod.z.boolean()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  menu: import_zod.z.union([import_zod.z.lazy(() => MenuRelationFilterSchema), import_zod.z.lazy(() => MenuWhereInputSchema)]).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemListRelationFilterSchema).optional()
}).strict();
var MenuCategoryOrderByWithRelationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  description: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  displayOrder: import_zod.z.lazy(() => SortOrderSchema).optional(),
  menuId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  isActive: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  menu: import_zod.z.lazy(() => MenuOrderByWithRelationInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemOrderByRelationAggregateInputSchema).optional()
}).strict();
var MenuCategoryWhereUniqueInputSchema = import_zod.z.union([
  import_zod.z.object({
    id: import_zod.z.number().int(),
    menuId_name: import_zod.z.lazy(() => MenuCategoryMenuIdNameCompoundUniqueInputSchema)
  }),
  import_zod.z.object({
    id: import_zod.z.number().int()
  }),
  import_zod.z.object({
    menuId_name: import_zod.z.lazy(() => MenuCategoryMenuIdNameCompoundUniqueInputSchema)
  })
]).and(import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  menuId_name: import_zod.z.lazy(() => MenuCategoryMenuIdNameCompoundUniqueInputSchema).optional(),
  AND: import_zod.z.union([import_zod.z.lazy(() => MenuCategoryWhereInputSchema), import_zod.z.lazy(() => MenuCategoryWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => MenuCategoryWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => MenuCategoryWhereInputSchema), import_zod.z.lazy(() => MenuCategoryWhereInputSchema).array()]).optional(),
  name: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  description: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  displayOrder: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  menuId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  isActive: import_zod.z.union([import_zod.z.lazy(() => BoolFilterSchema), import_zod.z.boolean()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  menu: import_zod.z.union([import_zod.z.lazy(() => MenuRelationFilterSchema), import_zod.z.lazy(() => MenuWhereInputSchema)]).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemListRelationFilterSchema).optional()
}).strict());
var MenuCategoryOrderByWithAggregationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  description: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  displayOrder: import_zod.z.lazy(() => SortOrderSchema).optional(),
  menuId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  isActive: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  _count: import_zod.z.lazy(() => MenuCategoryCountOrderByAggregateInputSchema).optional(),
  _avg: import_zod.z.lazy(() => MenuCategoryAvgOrderByAggregateInputSchema).optional(),
  _max: import_zod.z.lazy(() => MenuCategoryMaxOrderByAggregateInputSchema).optional(),
  _min: import_zod.z.lazy(() => MenuCategoryMinOrderByAggregateInputSchema).optional(),
  _sum: import_zod.z.lazy(() => MenuCategorySumOrderByAggregateInputSchema).optional()
}).strict();
var MenuCategoryScalarWhereWithAggregatesInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => MenuCategoryScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => MenuCategoryScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => MenuCategoryScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => MenuCategoryScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => MenuCategoryScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  name: import_zod.z.union([import_zod.z.lazy(() => StringWithAggregatesFilterSchema), import_zod.z.string()]).optional(),
  description: import_zod.z.union([import_zod.z.lazy(() => StringNullableWithAggregatesFilterSchema), import_zod.z.string()]).optional().nullable(),
  displayOrder: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  menuId: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  isActive: import_zod.z.union([import_zod.z.lazy(() => BoolWithAggregatesFilterSchema), import_zod.z.boolean()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var RecipeVersionWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionWhereInputSchema), import_zod.z.lazy(() => RecipeVersionWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => RecipeVersionWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionWhereInputSchema), import_zod.z.lazy(() => RecipeVersionWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  recipeId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  versionNumber: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  description: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  changes: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  isActive: import_zod.z.union([import_zod.z.lazy(() => BoolFilterSchema), import_zod.z.boolean()]).optional(),
  createdById: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  approvedById: import_zod.z.union([import_zod.z.lazy(() => IntNullableFilterSchema), import_zod.z.number()]).optional().nullable(),
  approvedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeNullableFilterSchema), import_zod.z.coerce.date()]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  recipe: import_zod.z.union([import_zod.z.lazy(() => RecipeRelationFilterSchema), import_zod.z.lazy(() => RecipeWhereInputSchema)]).optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientListRelationFilterSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionListRelationFilterSchema).optional(),
  createdBy: import_zod.z.union([import_zod.z.lazy(() => UserRelationFilterSchema), import_zod.z.lazy(() => UserWhereInputSchema)]).optional(),
  approvedBy: import_zod.z.union([import_zod.z.lazy(() => UserNullableRelationFilterSchema), import_zod.z.lazy(() => UserWhereInputSchema)]).optional().nullable()
}).strict();
var RecipeVersionOrderByWithRelationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  versionNumber: import_zod.z.lazy(() => SortOrderSchema).optional(),
  description: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  changes: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  isActive: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdById: import_zod.z.lazy(() => SortOrderSchema).optional(),
  approvedById: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  approvedAt: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipe: import_zod.z.lazy(() => RecipeOrderByWithRelationInputSchema).optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientOrderByRelationAggregateInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionOrderByRelationAggregateInputSchema).optional(),
  createdBy: import_zod.z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  approvedBy: import_zod.z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();
var RecipeVersionWhereUniqueInputSchema = import_zod.z.union([
  import_zod.z.object({
    id: import_zod.z.number().int(),
    recipeId_versionNumber: import_zod.z.lazy(() => RecipeVersionRecipeIdVersionNumberCompoundUniqueInputSchema)
  }),
  import_zod.z.object({
    id: import_zod.z.number().int()
  }),
  import_zod.z.object({
    recipeId_versionNumber: import_zod.z.lazy(() => RecipeVersionRecipeIdVersionNumberCompoundUniqueInputSchema)
  })
]).and(import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  recipeId_versionNumber: import_zod.z.lazy(() => RecipeVersionRecipeIdVersionNumberCompoundUniqueInputSchema).optional(),
  AND: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionWhereInputSchema), import_zod.z.lazy(() => RecipeVersionWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => RecipeVersionWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionWhereInputSchema), import_zod.z.lazy(() => RecipeVersionWhereInputSchema).array()]).optional(),
  recipeId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  versionNumber: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  description: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  changes: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  isActive: import_zod.z.union([import_zod.z.lazy(() => BoolFilterSchema), import_zod.z.boolean()]).optional(),
  createdById: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  approvedById: import_zod.z.union([import_zod.z.lazy(() => IntNullableFilterSchema), import_zod.z.number().int()]).optional().nullable(),
  approvedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeNullableFilterSchema), import_zod.z.coerce.date()]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  recipe: import_zod.z.union([import_zod.z.lazy(() => RecipeRelationFilterSchema), import_zod.z.lazy(() => RecipeWhereInputSchema)]).optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientListRelationFilterSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionListRelationFilterSchema).optional(),
  createdBy: import_zod.z.union([import_zod.z.lazy(() => UserRelationFilterSchema), import_zod.z.lazy(() => UserWhereInputSchema)]).optional(),
  approvedBy: import_zod.z.union([import_zod.z.lazy(() => UserNullableRelationFilterSchema), import_zod.z.lazy(() => UserWhereInputSchema)]).optional().nullable()
}).strict());
var RecipeVersionOrderByWithAggregationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  versionNumber: import_zod.z.lazy(() => SortOrderSchema).optional(),
  description: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  changes: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  isActive: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdById: import_zod.z.lazy(() => SortOrderSchema).optional(),
  approvedById: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  approvedAt: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  _count: import_zod.z.lazy(() => RecipeVersionCountOrderByAggregateInputSchema).optional(),
  _avg: import_zod.z.lazy(() => RecipeVersionAvgOrderByAggregateInputSchema).optional(),
  _max: import_zod.z.lazy(() => RecipeVersionMaxOrderByAggregateInputSchema).optional(),
  _min: import_zod.z.lazy(() => RecipeVersionMinOrderByAggregateInputSchema).optional(),
  _sum: import_zod.z.lazy(() => RecipeVersionSumOrderByAggregateInputSchema).optional()
}).strict();
var RecipeVersionScalarWhereWithAggregatesInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => RecipeVersionScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => RecipeVersionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => RecipeVersionScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  recipeId: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  versionNumber: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  description: import_zod.z.union([import_zod.z.lazy(() => StringNullableWithAggregatesFilterSchema), import_zod.z.string()]).optional().nullable(),
  changes: import_zod.z.union([import_zod.z.lazy(() => StringNullableWithAggregatesFilterSchema), import_zod.z.string()]).optional().nullable(),
  isActive: import_zod.z.union([import_zod.z.lazy(() => BoolWithAggregatesFilterSchema), import_zod.z.boolean()]).optional(),
  createdById: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  approvedById: import_zod.z.union([import_zod.z.lazy(() => IntNullableWithAggregatesFilterSchema), import_zod.z.number()]).optional().nullable(),
  approvedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var EquipmentWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => EquipmentWhereInputSchema), import_zod.z.lazy(() => EquipmentWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => EquipmentWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => EquipmentWhereInputSchema), import_zod.z.lazy(() => EquipmentWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  name: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  description: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  model: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  serialNumber: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  purchaseDate: import_zod.z.union([import_zod.z.lazy(() => DateTimeNullableFilterSchema), import_zod.z.coerce.date()]).optional().nullable(),
  lastMaintenance: import_zod.z.union([import_zod.z.lazy(() => DateTimeNullableFilterSchema), import_zod.z.coerce.date()]).optional().nullable(),
  nextMaintenance: import_zod.z.union([import_zod.z.lazy(() => DateTimeNullableFilterSchema), import_zod.z.coerce.date()]).optional().nullable(),
  status: import_zod.z.union([import_zod.z.lazy(() => EnumEquipmentStatusFilterSchema), import_zod.z.lazy(() => EquipmentStatusSchema)]).optional(),
  location: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  restaurant: import_zod.z.union([import_zod.z.lazy(() => RestaurantRelationFilterSchema), import_zod.z.lazy(() => RestaurantWhereInputSchema)]).optional(),
  recipes: import_zod.z.lazy(() => RecipeEquipmentListRelationFilterSchema).optional(),
  maintenanceLogs: import_zod.z.lazy(() => MaintenanceLogListRelationFilterSchema).optional()
}).strict();
var EquipmentOrderByWithRelationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  description: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  model: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  serialNumber: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  purchaseDate: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  lastMaintenance: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  nextMaintenance: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  status: import_zod.z.lazy(() => SortOrderSchema).optional(),
  location: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantOrderByWithRelationInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeEquipmentOrderByRelationAggregateInputSchema).optional(),
  maintenanceLogs: import_zod.z.lazy(() => MaintenanceLogOrderByRelationAggregateInputSchema).optional()
}).strict();
var EquipmentWhereUniqueInputSchema = import_zod.z.object({
  id: import_zod.z.number().int()
}).and(import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  AND: import_zod.z.union([import_zod.z.lazy(() => EquipmentWhereInputSchema), import_zod.z.lazy(() => EquipmentWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => EquipmentWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => EquipmentWhereInputSchema), import_zod.z.lazy(() => EquipmentWhereInputSchema).array()]).optional(),
  name: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  description: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  model: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  serialNumber: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  purchaseDate: import_zod.z.union([import_zod.z.lazy(() => DateTimeNullableFilterSchema), import_zod.z.coerce.date()]).optional().nullable(),
  lastMaintenance: import_zod.z.union([import_zod.z.lazy(() => DateTimeNullableFilterSchema), import_zod.z.coerce.date()]).optional().nullable(),
  nextMaintenance: import_zod.z.union([import_zod.z.lazy(() => DateTimeNullableFilterSchema), import_zod.z.coerce.date()]).optional().nullable(),
  status: import_zod.z.union([import_zod.z.lazy(() => EnumEquipmentStatusFilterSchema), import_zod.z.lazy(() => EquipmentStatusSchema)]).optional(),
  location: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  restaurant: import_zod.z.union([import_zod.z.lazy(() => RestaurantRelationFilterSchema), import_zod.z.lazy(() => RestaurantWhereInputSchema)]).optional(),
  recipes: import_zod.z.lazy(() => RecipeEquipmentListRelationFilterSchema).optional(),
  maintenanceLogs: import_zod.z.lazy(() => MaintenanceLogListRelationFilterSchema).optional()
}).strict());
var EquipmentOrderByWithAggregationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  description: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  model: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  serialNumber: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  purchaseDate: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  lastMaintenance: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  nextMaintenance: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  status: import_zod.z.lazy(() => SortOrderSchema).optional(),
  location: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  _count: import_zod.z.lazy(() => EquipmentCountOrderByAggregateInputSchema).optional(),
  _avg: import_zod.z.lazy(() => EquipmentAvgOrderByAggregateInputSchema).optional(),
  _max: import_zod.z.lazy(() => EquipmentMaxOrderByAggregateInputSchema).optional(),
  _min: import_zod.z.lazy(() => EquipmentMinOrderByAggregateInputSchema).optional(),
  _sum: import_zod.z.lazy(() => EquipmentSumOrderByAggregateInputSchema).optional()
}).strict();
var EquipmentScalarWhereWithAggregatesInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => EquipmentScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => EquipmentScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => EquipmentScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => EquipmentScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => EquipmentScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  name: import_zod.z.union([import_zod.z.lazy(() => StringWithAggregatesFilterSchema), import_zod.z.string()]).optional(),
  description: import_zod.z.union([import_zod.z.lazy(() => StringNullableWithAggregatesFilterSchema), import_zod.z.string()]).optional().nullable(),
  model: import_zod.z.union([import_zod.z.lazy(() => StringNullableWithAggregatesFilterSchema), import_zod.z.string()]).optional().nullable(),
  serialNumber: import_zod.z.union([import_zod.z.lazy(() => StringNullableWithAggregatesFilterSchema), import_zod.z.string()]).optional().nullable(),
  purchaseDate: import_zod.z.union([import_zod.z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional().nullable(),
  lastMaintenance: import_zod.z.union([import_zod.z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional().nullable(),
  nextMaintenance: import_zod.z.union([import_zod.z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional().nullable(),
  status: import_zod.z.union([import_zod.z.lazy(() => EnumEquipmentStatusWithAggregatesFilterSchema), import_zod.z.lazy(() => EquipmentStatusSchema)]).optional(),
  location: import_zod.z.union([import_zod.z.lazy(() => StringNullableWithAggregatesFilterSchema), import_zod.z.string()]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var RecipeEquipmentWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentWhereInputSchema), import_zod.z.lazy(() => RecipeEquipmentWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => RecipeEquipmentWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentWhereInputSchema), import_zod.z.lazy(() => RecipeEquipmentWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  recipeId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  equipmentId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  notes: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  recipe: import_zod.z.union([import_zod.z.lazy(() => RecipeRelationFilterSchema), import_zod.z.lazy(() => RecipeWhereInputSchema)]).optional(),
  equipment: import_zod.z.union([import_zod.z.lazy(() => EquipmentRelationFilterSchema), import_zod.z.lazy(() => EquipmentWhereInputSchema)]).optional()
}).strict();
var RecipeEquipmentOrderByWithRelationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  equipmentId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  notes: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  recipe: import_zod.z.lazy(() => RecipeOrderByWithRelationInputSchema).optional(),
  equipment: import_zod.z.lazy(() => EquipmentOrderByWithRelationInputSchema).optional()
}).strict();
var RecipeEquipmentWhereUniqueInputSchema = import_zod.z.union([
  import_zod.z.object({
    id: import_zod.z.number().int(),
    recipeId_equipmentId: import_zod.z.lazy(() => RecipeEquipmentRecipeIdEquipmentIdCompoundUniqueInputSchema)
  }),
  import_zod.z.object({
    id: import_zod.z.number().int()
  }),
  import_zod.z.object({
    recipeId_equipmentId: import_zod.z.lazy(() => RecipeEquipmentRecipeIdEquipmentIdCompoundUniqueInputSchema)
  })
]).and(import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  recipeId_equipmentId: import_zod.z.lazy(() => RecipeEquipmentRecipeIdEquipmentIdCompoundUniqueInputSchema).optional(),
  AND: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentWhereInputSchema), import_zod.z.lazy(() => RecipeEquipmentWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => RecipeEquipmentWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentWhereInputSchema), import_zod.z.lazy(() => RecipeEquipmentWhereInputSchema).array()]).optional(),
  recipeId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  equipmentId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  notes: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  recipe: import_zod.z.union([import_zod.z.lazy(() => RecipeRelationFilterSchema), import_zod.z.lazy(() => RecipeWhereInputSchema)]).optional(),
  equipment: import_zod.z.union([import_zod.z.lazy(() => EquipmentRelationFilterSchema), import_zod.z.lazy(() => EquipmentWhereInputSchema)]).optional()
}).strict());
var RecipeEquipmentOrderByWithAggregationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  equipmentId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  notes: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  _count: import_zod.z.lazy(() => RecipeEquipmentCountOrderByAggregateInputSchema).optional(),
  _avg: import_zod.z.lazy(() => RecipeEquipmentAvgOrderByAggregateInputSchema).optional(),
  _max: import_zod.z.lazy(() => RecipeEquipmentMaxOrderByAggregateInputSchema).optional(),
  _min: import_zod.z.lazy(() => RecipeEquipmentMinOrderByAggregateInputSchema).optional(),
  _sum: import_zod.z.lazy(() => RecipeEquipmentSumOrderByAggregateInputSchema).optional()
}).strict();
var RecipeEquipmentScalarWhereWithAggregatesInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => RecipeEquipmentScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => RecipeEquipmentScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => RecipeEquipmentScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  recipeId: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  equipmentId: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  notes: import_zod.z.union([import_zod.z.lazy(() => StringNullableWithAggregatesFilterSchema), import_zod.z.string()]).optional().nullable()
}).strict();
var MaintenanceLogWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => MaintenanceLogWhereInputSchema), import_zod.z.lazy(() => MaintenanceLogWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => MaintenanceLogWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => MaintenanceLogWhereInputSchema), import_zod.z.lazy(() => MaintenanceLogWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  equipmentId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  date: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  type: import_zod.z.union([import_zod.z.lazy(() => EnumMaintenanceTypeFilterSchema), import_zod.z.lazy(() => MaintenanceTypeSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  cost: import_zod.z.union([import_zod.z.lazy(() => FloatNullableFilterSchema), import_zod.z.number()]).optional().nullable(),
  performedBy: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  notes: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  equipment: import_zod.z.union([import_zod.z.lazy(() => EquipmentRelationFilterSchema), import_zod.z.lazy(() => EquipmentWhereInputSchema)]).optional()
}).strict();
var MaintenanceLogOrderByWithRelationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  equipmentId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  date: import_zod.z.lazy(() => SortOrderSchema).optional(),
  type: import_zod.z.lazy(() => SortOrderSchema).optional(),
  description: import_zod.z.lazy(() => SortOrderSchema).optional(),
  cost: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  performedBy: import_zod.z.lazy(() => SortOrderSchema).optional(),
  notes: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  equipment: import_zod.z.lazy(() => EquipmentOrderByWithRelationInputSchema).optional()
}).strict();
var MaintenanceLogWhereUniqueInputSchema = import_zod.z.object({
  id: import_zod.z.number().int()
}).and(import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  AND: import_zod.z.union([import_zod.z.lazy(() => MaintenanceLogWhereInputSchema), import_zod.z.lazy(() => MaintenanceLogWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => MaintenanceLogWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => MaintenanceLogWhereInputSchema), import_zod.z.lazy(() => MaintenanceLogWhereInputSchema).array()]).optional(),
  equipmentId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  date: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  type: import_zod.z.union([import_zod.z.lazy(() => EnumMaintenanceTypeFilterSchema), import_zod.z.lazy(() => MaintenanceTypeSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  cost: import_zod.z.union([import_zod.z.lazy(() => FloatNullableFilterSchema), import_zod.z.number()]).optional().nullable(),
  performedBy: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  notes: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  equipment: import_zod.z.union([import_zod.z.lazy(() => EquipmentRelationFilterSchema), import_zod.z.lazy(() => EquipmentWhereInputSchema)]).optional()
}).strict());
var MaintenanceLogOrderByWithAggregationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  equipmentId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  date: import_zod.z.lazy(() => SortOrderSchema).optional(),
  type: import_zod.z.lazy(() => SortOrderSchema).optional(),
  description: import_zod.z.lazy(() => SortOrderSchema).optional(),
  cost: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  performedBy: import_zod.z.lazy(() => SortOrderSchema).optional(),
  notes: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  _count: import_zod.z.lazy(() => MaintenanceLogCountOrderByAggregateInputSchema).optional(),
  _avg: import_zod.z.lazy(() => MaintenanceLogAvgOrderByAggregateInputSchema).optional(),
  _max: import_zod.z.lazy(() => MaintenanceLogMaxOrderByAggregateInputSchema).optional(),
  _min: import_zod.z.lazy(() => MaintenanceLogMinOrderByAggregateInputSchema).optional(),
  _sum: import_zod.z.lazy(() => MaintenanceLogSumOrderByAggregateInputSchema).optional()
}).strict();
var MaintenanceLogScalarWhereWithAggregatesInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => MaintenanceLogScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => MaintenanceLogScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => MaintenanceLogScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => MaintenanceLogScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => MaintenanceLogScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  equipmentId: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  date: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional(),
  type: import_zod.z.union([import_zod.z.lazy(() => EnumMaintenanceTypeWithAggregatesFilterSchema), import_zod.z.lazy(() => MaintenanceTypeSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.lazy(() => StringWithAggregatesFilterSchema), import_zod.z.string()]).optional(),
  cost: import_zod.z.union([import_zod.z.lazy(() => FloatNullableWithAggregatesFilterSchema), import_zod.z.number()]).optional().nullable(),
  performedBy: import_zod.z.union([import_zod.z.lazy(() => StringWithAggregatesFilterSchema), import_zod.z.string()]).optional(),
  notes: import_zod.z.union([import_zod.z.lazy(() => StringNullableWithAggregatesFilterSchema), import_zod.z.string()]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var QualityChecklistWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => QualityChecklistWhereInputSchema), import_zod.z.lazy(() => QualityChecklistWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => QualityChecklistWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => QualityChecklistWhereInputSchema), import_zod.z.lazy(() => QualityChecklistWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  name: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  description: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  frequency: import_zod.z.union([import_zod.z.lazy(() => EnumChecklistFrequencyFilterSchema), import_zod.z.lazy(() => ChecklistFrequencySchema)]).optional(),
  isActive: import_zod.z.union([import_zod.z.lazy(() => BoolFilterSchema), import_zod.z.boolean()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  restaurant: import_zod.z.union([import_zod.z.lazy(() => RestaurantRelationFilterSchema), import_zod.z.lazy(() => RestaurantWhereInputSchema)]).optional(),
  items: import_zod.z.lazy(() => ChecklistItemListRelationFilterSchema).optional(),
  completions: import_zod.z.lazy(() => ChecklistCompleteListRelationFilterSchema).optional()
}).strict();
var QualityChecklistOrderByWithRelationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  description: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  frequency: import_zod.z.lazy(() => SortOrderSchema).optional(),
  isActive: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantOrderByWithRelationInputSchema).optional(),
  items: import_zod.z.lazy(() => ChecklistItemOrderByRelationAggregateInputSchema).optional(),
  completions: import_zod.z.lazy(() => ChecklistCompleteOrderByRelationAggregateInputSchema).optional()
}).strict();
var QualityChecklistWhereUniqueInputSchema = import_zod.z.object({
  id: import_zod.z.number().int()
}).and(import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  AND: import_zod.z.union([import_zod.z.lazy(() => QualityChecklistWhereInputSchema), import_zod.z.lazy(() => QualityChecklistWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => QualityChecklistWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => QualityChecklistWhereInputSchema), import_zod.z.lazy(() => QualityChecklistWhereInputSchema).array()]).optional(),
  name: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  description: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  frequency: import_zod.z.union([import_zod.z.lazy(() => EnumChecklistFrequencyFilterSchema), import_zod.z.lazy(() => ChecklistFrequencySchema)]).optional(),
  isActive: import_zod.z.union([import_zod.z.lazy(() => BoolFilterSchema), import_zod.z.boolean()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  restaurant: import_zod.z.union([import_zod.z.lazy(() => RestaurantRelationFilterSchema), import_zod.z.lazy(() => RestaurantWhereInputSchema)]).optional(),
  items: import_zod.z.lazy(() => ChecklistItemListRelationFilterSchema).optional(),
  completions: import_zod.z.lazy(() => ChecklistCompleteListRelationFilterSchema).optional()
}).strict());
var QualityChecklistOrderByWithAggregationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  description: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  frequency: import_zod.z.lazy(() => SortOrderSchema).optional(),
  isActive: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  _count: import_zod.z.lazy(() => QualityChecklistCountOrderByAggregateInputSchema).optional(),
  _avg: import_zod.z.lazy(() => QualityChecklistAvgOrderByAggregateInputSchema).optional(),
  _max: import_zod.z.lazy(() => QualityChecklistMaxOrderByAggregateInputSchema).optional(),
  _min: import_zod.z.lazy(() => QualityChecklistMinOrderByAggregateInputSchema).optional(),
  _sum: import_zod.z.lazy(() => QualityChecklistSumOrderByAggregateInputSchema).optional()
}).strict();
var QualityChecklistScalarWhereWithAggregatesInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => QualityChecklistScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => QualityChecklistScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => QualityChecklistScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => QualityChecklistScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => QualityChecklistScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  name: import_zod.z.union([import_zod.z.lazy(() => StringWithAggregatesFilterSchema), import_zod.z.string()]).optional(),
  description: import_zod.z.union([import_zod.z.lazy(() => StringNullableWithAggregatesFilterSchema), import_zod.z.string()]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  frequency: import_zod.z.union([import_zod.z.lazy(() => EnumChecklistFrequencyWithAggregatesFilterSchema), import_zod.z.lazy(() => ChecklistFrequencySchema)]).optional(),
  isActive: import_zod.z.union([import_zod.z.lazy(() => BoolWithAggregatesFilterSchema), import_zod.z.boolean()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var ChecklistItemWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemWhereInputSchema), import_zod.z.lazy(() => ChecklistItemWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => ChecklistItemWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemWhereInputSchema), import_zod.z.lazy(() => ChecklistItemWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  checklistId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  description: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  order: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  type: import_zod.z.union([import_zod.z.lazy(() => EnumChecklistItemTypeFilterSchema), import_zod.z.lazy(() => ChecklistItemTypeSchema)]).optional(),
  requiredPhotos: import_zod.z.union([import_zod.z.lazy(() => BoolFilterSchema), import_zod.z.boolean()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  checklist: import_zod.z.union([import_zod.z.lazy(() => QualityChecklistRelationFilterSchema), import_zod.z.lazy(() => QualityChecklistWhereInputSchema)]).optional(),
  completions: import_zod.z.lazy(() => ChecklistItemCompleteListRelationFilterSchema).optional()
}).strict();
var ChecklistItemOrderByWithRelationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  checklistId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  description: import_zod.z.lazy(() => SortOrderSchema).optional(),
  order: import_zod.z.lazy(() => SortOrderSchema).optional(),
  type: import_zod.z.lazy(() => SortOrderSchema).optional(),
  requiredPhotos: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  checklist: import_zod.z.lazy(() => QualityChecklistOrderByWithRelationInputSchema).optional(),
  completions: import_zod.z.lazy(() => ChecklistItemCompleteOrderByRelationAggregateInputSchema).optional()
}).strict();
var ChecklistItemWhereUniqueInputSchema = import_zod.z.object({
  id: import_zod.z.number().int()
}).and(import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  AND: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemWhereInputSchema), import_zod.z.lazy(() => ChecklistItemWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => ChecklistItemWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemWhereInputSchema), import_zod.z.lazy(() => ChecklistItemWhereInputSchema).array()]).optional(),
  checklistId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  description: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  order: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  type: import_zod.z.union([import_zod.z.lazy(() => EnumChecklistItemTypeFilterSchema), import_zod.z.lazy(() => ChecklistItemTypeSchema)]).optional(),
  requiredPhotos: import_zod.z.union([import_zod.z.lazy(() => BoolFilterSchema), import_zod.z.boolean()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  checklist: import_zod.z.union([import_zod.z.lazy(() => QualityChecklistRelationFilterSchema), import_zod.z.lazy(() => QualityChecklistWhereInputSchema)]).optional(),
  completions: import_zod.z.lazy(() => ChecklistItemCompleteListRelationFilterSchema).optional()
}).strict());
var ChecklistItemOrderByWithAggregationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  checklistId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  description: import_zod.z.lazy(() => SortOrderSchema).optional(),
  order: import_zod.z.lazy(() => SortOrderSchema).optional(),
  type: import_zod.z.lazy(() => SortOrderSchema).optional(),
  requiredPhotos: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  _count: import_zod.z.lazy(() => ChecklistItemCountOrderByAggregateInputSchema).optional(),
  _avg: import_zod.z.lazy(() => ChecklistItemAvgOrderByAggregateInputSchema).optional(),
  _max: import_zod.z.lazy(() => ChecklistItemMaxOrderByAggregateInputSchema).optional(),
  _min: import_zod.z.lazy(() => ChecklistItemMinOrderByAggregateInputSchema).optional(),
  _sum: import_zod.z.lazy(() => ChecklistItemSumOrderByAggregateInputSchema).optional()
}).strict();
var ChecklistItemScalarWhereWithAggregatesInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => ChecklistItemScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => ChecklistItemScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => ChecklistItemScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  checklistId: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  description: import_zod.z.union([import_zod.z.lazy(() => StringWithAggregatesFilterSchema), import_zod.z.string()]).optional(),
  order: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  type: import_zod.z.union([import_zod.z.lazy(() => EnumChecklistItemTypeWithAggregatesFilterSchema), import_zod.z.lazy(() => ChecklistItemTypeSchema)]).optional(),
  requiredPhotos: import_zod.z.union([import_zod.z.lazy(() => BoolWithAggregatesFilterSchema), import_zod.z.boolean()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var ChecklistCompleteWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteWhereInputSchema), import_zod.z.lazy(() => ChecklistCompleteWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => ChecklistCompleteWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteWhereInputSchema), import_zod.z.lazy(() => ChecklistCompleteWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  checklistId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  completedById: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  date: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  notes: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  checklist: import_zod.z.union([import_zod.z.lazy(() => QualityChecklistRelationFilterSchema), import_zod.z.lazy(() => QualityChecklistWhereInputSchema)]).optional(),
  completedBy: import_zod.z.union([import_zod.z.lazy(() => UserRelationFilterSchema), import_zod.z.lazy(() => UserWhereInputSchema)]).optional(),
  items: import_zod.z.lazy(() => ChecklistItemCompleteListRelationFilterSchema).optional()
}).strict();
var ChecklistCompleteOrderByWithRelationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  checklistId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  completedById: import_zod.z.lazy(() => SortOrderSchema).optional(),
  date: import_zod.z.lazy(() => SortOrderSchema).optional(),
  notes: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  checklist: import_zod.z.lazy(() => QualityChecklistOrderByWithRelationInputSchema).optional(),
  completedBy: import_zod.z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  items: import_zod.z.lazy(() => ChecklistItemCompleteOrderByRelationAggregateInputSchema).optional()
}).strict();
var ChecklistCompleteWhereUniqueInputSchema = import_zod.z.object({
  id: import_zod.z.number().int()
}).and(import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  AND: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteWhereInputSchema), import_zod.z.lazy(() => ChecklistCompleteWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => ChecklistCompleteWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteWhereInputSchema), import_zod.z.lazy(() => ChecklistCompleteWhereInputSchema).array()]).optional(),
  checklistId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  completedById: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  date: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  notes: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  checklist: import_zod.z.union([import_zod.z.lazy(() => QualityChecklistRelationFilterSchema), import_zod.z.lazy(() => QualityChecklistWhereInputSchema)]).optional(),
  completedBy: import_zod.z.union([import_zod.z.lazy(() => UserRelationFilterSchema), import_zod.z.lazy(() => UserWhereInputSchema)]).optional(),
  items: import_zod.z.lazy(() => ChecklistItemCompleteListRelationFilterSchema).optional()
}).strict());
var ChecklistCompleteOrderByWithAggregationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  checklistId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  completedById: import_zod.z.lazy(() => SortOrderSchema).optional(),
  date: import_zod.z.lazy(() => SortOrderSchema).optional(),
  notes: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  _count: import_zod.z.lazy(() => ChecklistCompleteCountOrderByAggregateInputSchema).optional(),
  _avg: import_zod.z.lazy(() => ChecklistCompleteAvgOrderByAggregateInputSchema).optional(),
  _max: import_zod.z.lazy(() => ChecklistCompleteMaxOrderByAggregateInputSchema).optional(),
  _min: import_zod.z.lazy(() => ChecklistCompleteMinOrderByAggregateInputSchema).optional(),
  _sum: import_zod.z.lazy(() => ChecklistCompleteSumOrderByAggregateInputSchema).optional()
}).strict();
var ChecklistCompleteScalarWhereWithAggregatesInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => ChecklistCompleteScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => ChecklistCompleteScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => ChecklistCompleteScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  checklistId: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  completedById: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  date: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional(),
  notes: import_zod.z.union([import_zod.z.lazy(() => StringNullableWithAggregatesFilterSchema), import_zod.z.string()]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var ChecklistItemCompleteWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteWhereInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => ChecklistItemCompleteWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteWhereInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  checklistCompleteId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  checklistItemId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => EnumChecklistStatusFilterSchema), import_zod.z.lazy(() => ChecklistStatusSchema)]).optional(),
  notes: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  photoUrls: import_zod.z.lazy(() => StringNullableListFilterSchema).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  checklistComplete: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteRelationFilterSchema), import_zod.z.lazy(() => ChecklistCompleteWhereInputSchema)]).optional(),
  checklistItem: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemRelationFilterSchema), import_zod.z.lazy(() => ChecklistItemWhereInputSchema)]).optional()
}).strict();
var ChecklistItemCompleteOrderByWithRelationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  checklistCompleteId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  checklistItemId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  status: import_zod.z.lazy(() => SortOrderSchema).optional(),
  notes: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  photoUrls: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteOrderByWithRelationInputSchema).optional(),
  checklistItem: import_zod.z.lazy(() => ChecklistItemOrderByWithRelationInputSchema).optional()
}).strict();
var ChecklistItemCompleteWhereUniqueInputSchema = import_zod.z.object({
  id: import_zod.z.number().int()
}).and(import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  AND: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteWhereInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => ChecklistItemCompleteWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteWhereInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteWhereInputSchema).array()]).optional(),
  checklistCompleteId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  checklistItemId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => EnumChecklistStatusFilterSchema), import_zod.z.lazy(() => ChecklistStatusSchema)]).optional(),
  notes: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  photoUrls: import_zod.z.lazy(() => StringNullableListFilterSchema).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  checklistComplete: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteRelationFilterSchema), import_zod.z.lazy(() => ChecklistCompleteWhereInputSchema)]).optional(),
  checklistItem: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemRelationFilterSchema), import_zod.z.lazy(() => ChecklistItemWhereInputSchema)]).optional()
}).strict());
var ChecklistItemCompleteOrderByWithAggregationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  checklistCompleteId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  checklistItemId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  status: import_zod.z.lazy(() => SortOrderSchema).optional(),
  notes: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  photoUrls: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  _count: import_zod.z.lazy(() => ChecklistItemCompleteCountOrderByAggregateInputSchema).optional(),
  _avg: import_zod.z.lazy(() => ChecklistItemCompleteAvgOrderByAggregateInputSchema).optional(),
  _max: import_zod.z.lazy(() => ChecklistItemCompleteMaxOrderByAggregateInputSchema).optional(),
  _min: import_zod.z.lazy(() => ChecklistItemCompleteMinOrderByAggregateInputSchema).optional(),
  _sum: import_zod.z.lazy(() => ChecklistItemCompleteSumOrderByAggregateInputSchema).optional()
}).strict();
var ChecklistItemCompleteScalarWhereWithAggregatesInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => ChecklistItemCompleteScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  checklistCompleteId: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  checklistItemId: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => EnumChecklistStatusWithAggregatesFilterSchema), import_zod.z.lazy(() => ChecklistStatusSchema)]).optional(),
  notes: import_zod.z.union([import_zod.z.lazy(() => StringNullableWithAggregatesFilterSchema), import_zod.z.string()]).optional().nullable(),
  photoUrls: import_zod.z.lazy(() => StringNullableListFilterSchema).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var SupplierPriceHistoryWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryWhereInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => SupplierPriceHistoryWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryWhereInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  vendorId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  ingredientId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  price: import_zod.z.union([import_zod.z.lazy(() => FloatFilterSchema), import_zod.z.number()]).optional(),
  unit: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  startDate: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  endDate: import_zod.z.union([import_zod.z.lazy(() => DateTimeNullableFilterSchema), import_zod.z.coerce.date()]).optional().nullable(),
  notes: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  vendor: import_zod.z.union([import_zod.z.lazy(() => VendorRelationFilterSchema), import_zod.z.lazy(() => VendorWhereInputSchema)]).optional(),
  ingredient: import_zod.z.union([import_zod.z.lazy(() => IngredientRelationFilterSchema), import_zod.z.lazy(() => IngredientWhereInputSchema)]).optional()
}).strict();
var SupplierPriceHistoryOrderByWithRelationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  vendorId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  ingredientId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  price: import_zod.z.lazy(() => SortOrderSchema).optional(),
  unit: import_zod.z.lazy(() => SortOrderSchema).optional(),
  startDate: import_zod.z.lazy(() => SortOrderSchema).optional(),
  endDate: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  notes: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  vendor: import_zod.z.lazy(() => VendorOrderByWithRelationInputSchema).optional(),
  ingredient: import_zod.z.lazy(() => IngredientOrderByWithRelationInputSchema).optional()
}).strict();
var SupplierPriceHistoryWhereUniqueInputSchema = import_zod.z.object({
  id: import_zod.z.number().int()
}).and(import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  AND: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryWhereInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => SupplierPriceHistoryWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryWhereInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryWhereInputSchema).array()]).optional(),
  vendorId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  ingredientId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  price: import_zod.z.union([import_zod.z.lazy(() => FloatFilterSchema), import_zod.z.number()]).optional(),
  unit: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  startDate: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  endDate: import_zod.z.union([import_zod.z.lazy(() => DateTimeNullableFilterSchema), import_zod.z.coerce.date()]).optional().nullable(),
  notes: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  vendor: import_zod.z.union([import_zod.z.lazy(() => VendorRelationFilterSchema), import_zod.z.lazy(() => VendorWhereInputSchema)]).optional(),
  ingredient: import_zod.z.union([import_zod.z.lazy(() => IngredientRelationFilterSchema), import_zod.z.lazy(() => IngredientWhereInputSchema)]).optional()
}).strict());
var SupplierPriceHistoryOrderByWithAggregationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  vendorId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  ingredientId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  price: import_zod.z.lazy(() => SortOrderSchema).optional(),
  unit: import_zod.z.lazy(() => SortOrderSchema).optional(),
  startDate: import_zod.z.lazy(() => SortOrderSchema).optional(),
  endDate: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  notes: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  _count: import_zod.z.lazy(() => SupplierPriceHistoryCountOrderByAggregateInputSchema).optional(),
  _avg: import_zod.z.lazy(() => SupplierPriceHistoryAvgOrderByAggregateInputSchema).optional(),
  _max: import_zod.z.lazy(() => SupplierPriceHistoryMaxOrderByAggregateInputSchema).optional(),
  _min: import_zod.z.lazy(() => SupplierPriceHistoryMinOrderByAggregateInputSchema).optional(),
  _sum: import_zod.z.lazy(() => SupplierPriceHistorySumOrderByAggregateInputSchema).optional()
}).strict();
var SupplierPriceHistoryScalarWhereWithAggregatesInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => SupplierPriceHistoryScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  vendorId: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  ingredientId: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  price: import_zod.z.union([import_zod.z.lazy(() => FloatWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  unit: import_zod.z.union([import_zod.z.lazy(() => StringWithAggregatesFilterSchema), import_zod.z.string()]).optional(),
  startDate: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional(),
  endDate: import_zod.z.union([import_zod.z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional().nullable(),
  notes: import_zod.z.union([import_zod.z.lazy(() => StringNullableWithAggregatesFilterSchema), import_zod.z.string()]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var CustomerFeedbackWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackWhereInputSchema), import_zod.z.lazy(() => CustomerFeedbackWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => CustomerFeedbackWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackWhereInputSchema), import_zod.z.lazy(() => CustomerFeedbackWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  menuItemId: import_zod.z.union([import_zod.z.lazy(() => IntNullableFilterSchema), import_zod.z.number()]).optional().nullable(),
  rating: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  comment: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  source: import_zod.z.union([import_zod.z.lazy(() => EnumFeedbackSourceFilterSchema), import_zod.z.lazy(() => FeedbackSourceSchema)]).optional(),
  tags: import_zod.z.lazy(() => StringNullableListFilterSchema).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => EnumFeedbackStatusFilterSchema), import_zod.z.lazy(() => FeedbackStatusSchema)]).optional(),
  responseText: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  respondedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeNullableFilterSchema), import_zod.z.coerce.date()]).optional().nullable(),
  respondedById: import_zod.z.union([import_zod.z.lazy(() => IntNullableFilterSchema), import_zod.z.number()]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  restaurant: import_zod.z.union([import_zod.z.lazy(() => RestaurantRelationFilterSchema), import_zod.z.lazy(() => RestaurantWhereInputSchema)]).optional(),
  menuItem: import_zod.z.union([import_zod.z.lazy(() => MenuItemNullableRelationFilterSchema), import_zod.z.lazy(() => MenuItemWhereInputSchema)]).optional().nullable(),
  respondedBy: import_zod.z.union([import_zod.z.lazy(() => UserNullableRelationFilterSchema), import_zod.z.lazy(() => UserWhereInputSchema)]).optional().nullable()
}).strict();
var CustomerFeedbackOrderByWithRelationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  menuItemId: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  rating: import_zod.z.lazy(() => SortOrderSchema).optional(),
  comment: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  source: import_zod.z.lazy(() => SortOrderSchema).optional(),
  tags: import_zod.z.lazy(() => SortOrderSchema).optional(),
  status: import_zod.z.lazy(() => SortOrderSchema).optional(),
  responseText: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  respondedAt: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  respondedById: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantOrderByWithRelationInputSchema).optional(),
  menuItem: import_zod.z.lazy(() => MenuItemOrderByWithRelationInputSchema).optional(),
  respondedBy: import_zod.z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();
var CustomerFeedbackWhereUniqueInputSchema = import_zod.z.object({
  id: import_zod.z.number().int()
}).and(import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  AND: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackWhereInputSchema), import_zod.z.lazy(() => CustomerFeedbackWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => CustomerFeedbackWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackWhereInputSchema), import_zod.z.lazy(() => CustomerFeedbackWhereInputSchema).array()]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  menuItemId: import_zod.z.union([import_zod.z.lazy(() => IntNullableFilterSchema), import_zod.z.number().int()]).optional().nullable(),
  rating: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  comment: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  source: import_zod.z.union([import_zod.z.lazy(() => EnumFeedbackSourceFilterSchema), import_zod.z.lazy(() => FeedbackSourceSchema)]).optional(),
  tags: import_zod.z.lazy(() => StringNullableListFilterSchema).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => EnumFeedbackStatusFilterSchema), import_zod.z.lazy(() => FeedbackStatusSchema)]).optional(),
  responseText: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  respondedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeNullableFilterSchema), import_zod.z.coerce.date()]).optional().nullable(),
  respondedById: import_zod.z.union([import_zod.z.lazy(() => IntNullableFilterSchema), import_zod.z.number().int()]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  restaurant: import_zod.z.union([import_zod.z.lazy(() => RestaurantRelationFilterSchema), import_zod.z.lazy(() => RestaurantWhereInputSchema)]).optional(),
  menuItem: import_zod.z.union([import_zod.z.lazy(() => MenuItemNullableRelationFilterSchema), import_zod.z.lazy(() => MenuItemWhereInputSchema)]).optional().nullable(),
  respondedBy: import_zod.z.union([import_zod.z.lazy(() => UserNullableRelationFilterSchema), import_zod.z.lazy(() => UserWhereInputSchema)]).optional().nullable()
}).strict());
var CustomerFeedbackOrderByWithAggregationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  menuItemId: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  rating: import_zod.z.lazy(() => SortOrderSchema).optional(),
  comment: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  source: import_zod.z.lazy(() => SortOrderSchema).optional(),
  tags: import_zod.z.lazy(() => SortOrderSchema).optional(),
  status: import_zod.z.lazy(() => SortOrderSchema).optional(),
  responseText: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  respondedAt: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  respondedById: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  _count: import_zod.z.lazy(() => CustomerFeedbackCountOrderByAggregateInputSchema).optional(),
  _avg: import_zod.z.lazy(() => CustomerFeedbackAvgOrderByAggregateInputSchema).optional(),
  _max: import_zod.z.lazy(() => CustomerFeedbackMaxOrderByAggregateInputSchema).optional(),
  _min: import_zod.z.lazy(() => CustomerFeedbackMinOrderByAggregateInputSchema).optional(),
  _sum: import_zod.z.lazy(() => CustomerFeedbackSumOrderByAggregateInputSchema).optional()
}).strict();
var CustomerFeedbackScalarWhereWithAggregatesInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => CustomerFeedbackScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => CustomerFeedbackScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => CustomerFeedbackScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  menuItemId: import_zod.z.union([import_zod.z.lazy(() => IntNullableWithAggregatesFilterSchema), import_zod.z.number()]).optional().nullable(),
  rating: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  comment: import_zod.z.union([import_zod.z.lazy(() => StringNullableWithAggregatesFilterSchema), import_zod.z.string()]).optional().nullable(),
  source: import_zod.z.union([import_zod.z.lazy(() => EnumFeedbackSourceWithAggregatesFilterSchema), import_zod.z.lazy(() => FeedbackSourceSchema)]).optional(),
  tags: import_zod.z.lazy(() => StringNullableListFilterSchema).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => EnumFeedbackStatusWithAggregatesFilterSchema), import_zod.z.lazy(() => FeedbackStatusSchema)]).optional(),
  responseText: import_zod.z.union([import_zod.z.lazy(() => StringNullableWithAggregatesFilterSchema), import_zod.z.string()]).optional().nullable(),
  respondedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional().nullable(),
  respondedById: import_zod.z.union([import_zod.z.lazy(() => IntNullableWithAggregatesFilterSchema), import_zod.z.number()]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var DietaryRestrictionWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionWhereInputSchema), import_zod.z.lazy(() => DietaryRestrictionWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => DietaryRestrictionWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionWhereInputSchema), import_zod.z.lazy(() => DietaryRestrictionWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  name: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  description: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  icon: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemListRelationFilterSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeListRelationFilterSchema).optional(),
  ingredients: import_zod.z.lazy(() => IngredientListRelationFilterSchema).optional()
}).strict();
var DietaryRestrictionOrderByWithRelationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  description: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  icon: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemOrderByRelationAggregateInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeOrderByRelationAggregateInputSchema).optional(),
  ingredients: import_zod.z.lazy(() => IngredientOrderByRelationAggregateInputSchema).optional()
}).strict();
var DietaryRestrictionWhereUniqueInputSchema = import_zod.z.union([
  import_zod.z.object({
    id: import_zod.z.number().int(),
    name: import_zod.z.string()
  }),
  import_zod.z.object({
    id: import_zod.z.number().int()
  }),
  import_zod.z.object({
    name: import_zod.z.string()
  })
]).and(import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string().optional(),
  AND: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionWhereInputSchema), import_zod.z.lazy(() => DietaryRestrictionWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => DietaryRestrictionWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionWhereInputSchema), import_zod.z.lazy(() => DietaryRestrictionWhereInputSchema).array()]).optional(),
  description: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  icon: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemListRelationFilterSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeListRelationFilterSchema).optional(),
  ingredients: import_zod.z.lazy(() => IngredientListRelationFilterSchema).optional()
}).strict());
var DietaryRestrictionOrderByWithAggregationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  description: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  icon: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  _count: import_zod.z.lazy(() => DietaryRestrictionCountOrderByAggregateInputSchema).optional(),
  _avg: import_zod.z.lazy(() => DietaryRestrictionAvgOrderByAggregateInputSchema).optional(),
  _max: import_zod.z.lazy(() => DietaryRestrictionMaxOrderByAggregateInputSchema).optional(),
  _min: import_zod.z.lazy(() => DietaryRestrictionMinOrderByAggregateInputSchema).optional(),
  _sum: import_zod.z.lazy(() => DietaryRestrictionSumOrderByAggregateInputSchema).optional()
}).strict();
var DietaryRestrictionScalarWhereWithAggregatesInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => DietaryRestrictionScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => DietaryRestrictionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => DietaryRestrictionScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  name: import_zod.z.union([import_zod.z.lazy(() => StringWithAggregatesFilterSchema), import_zod.z.string()]).optional(),
  description: import_zod.z.union([import_zod.z.lazy(() => StringNullableWithAggregatesFilterSchema), import_zod.z.string()]).optional().nullable(),
  icon: import_zod.z.union([import_zod.z.lazy(() => StringNullableWithAggregatesFilterSchema), import_zod.z.string()]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var RecipeTagWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => RecipeTagWhereInputSchema), import_zod.z.lazy(() => RecipeTagWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => RecipeTagWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => RecipeTagWhereInputSchema), import_zod.z.lazy(() => RecipeTagWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  name: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  description: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  recipes: import_zod.z.lazy(() => RecipeListRelationFilterSchema).optional()
}).strict();
var RecipeTagOrderByWithRelationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  description: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeOrderByRelationAggregateInputSchema).optional()
}).strict();
var RecipeTagWhereUniqueInputSchema = import_zod.z.union([
  import_zod.z.object({
    id: import_zod.z.number().int(),
    name: import_zod.z.string()
  }),
  import_zod.z.object({
    id: import_zod.z.number().int()
  }),
  import_zod.z.object({
    name: import_zod.z.string()
  })
]).and(import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string().optional(),
  AND: import_zod.z.union([import_zod.z.lazy(() => RecipeTagWhereInputSchema), import_zod.z.lazy(() => RecipeTagWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => RecipeTagWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => RecipeTagWhereInputSchema), import_zod.z.lazy(() => RecipeTagWhereInputSchema).array()]).optional(),
  description: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  recipes: import_zod.z.lazy(() => RecipeListRelationFilterSchema).optional()
}).strict());
var RecipeTagOrderByWithAggregationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  description: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  _count: import_zod.z.lazy(() => RecipeTagCountOrderByAggregateInputSchema).optional(),
  _avg: import_zod.z.lazy(() => RecipeTagAvgOrderByAggregateInputSchema).optional(),
  _max: import_zod.z.lazy(() => RecipeTagMaxOrderByAggregateInputSchema).optional(),
  _min: import_zod.z.lazy(() => RecipeTagMinOrderByAggregateInputSchema).optional(),
  _sum: import_zod.z.lazy(() => RecipeTagSumOrderByAggregateInputSchema).optional()
}).strict();
var RecipeTagScalarWhereWithAggregatesInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => RecipeTagScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => RecipeTagScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => RecipeTagScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => RecipeTagScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => RecipeTagScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  name: import_zod.z.union([import_zod.z.lazy(() => StringWithAggregatesFilterSchema), import_zod.z.string()]).optional(),
  description: import_zod.z.union([import_zod.z.lazy(() => StringNullableWithAggregatesFilterSchema), import_zod.z.string()]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var LeftoverItemWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemWhereInputSchema), import_zod.z.lazy(() => LeftoverItemWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => LeftoverItemWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemWhereInputSchema), import_zod.z.lazy(() => LeftoverItemWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  date: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  menuItemId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  quantity: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  reason: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  recordedById: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  restaurant: import_zod.z.union([import_zod.z.lazy(() => RestaurantRelationFilterSchema), import_zod.z.lazy(() => RestaurantWhereInputSchema)]).optional(),
  menuItem: import_zod.z.union([import_zod.z.lazy(() => MenuItemRelationFilterSchema), import_zod.z.lazy(() => MenuItemWhereInputSchema)]).optional(),
  recordedBy: import_zod.z.union([import_zod.z.lazy(() => UserRelationFilterSchema), import_zod.z.lazy(() => UserWhereInputSchema)]).optional()
}).strict();
var LeftoverItemOrderByWithRelationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  date: import_zod.z.lazy(() => SortOrderSchema).optional(),
  menuItemId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  quantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  reason: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recordedById: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantOrderByWithRelationInputSchema).optional(),
  menuItem: import_zod.z.lazy(() => MenuItemOrderByWithRelationInputSchema).optional(),
  recordedBy: import_zod.z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();
var LeftoverItemWhereUniqueInputSchema = import_zod.z.object({
  id: import_zod.z.number().int()
}).and(import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  AND: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemWhereInputSchema), import_zod.z.lazy(() => LeftoverItemWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => LeftoverItemWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemWhereInputSchema), import_zod.z.lazy(() => LeftoverItemWhereInputSchema).array()]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  date: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  menuItemId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  quantity: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  reason: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  recordedById: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  restaurant: import_zod.z.union([import_zod.z.lazy(() => RestaurantRelationFilterSchema), import_zod.z.lazy(() => RestaurantWhereInputSchema)]).optional(),
  menuItem: import_zod.z.union([import_zod.z.lazy(() => MenuItemRelationFilterSchema), import_zod.z.lazy(() => MenuItemWhereInputSchema)]).optional(),
  recordedBy: import_zod.z.union([import_zod.z.lazy(() => UserRelationFilterSchema), import_zod.z.lazy(() => UserWhereInputSchema)]).optional()
}).strict());
var LeftoverItemOrderByWithAggregationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  date: import_zod.z.lazy(() => SortOrderSchema).optional(),
  menuItemId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  quantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  reason: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recordedById: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  _count: import_zod.z.lazy(() => LeftoverItemCountOrderByAggregateInputSchema).optional(),
  _avg: import_zod.z.lazy(() => LeftoverItemAvgOrderByAggregateInputSchema).optional(),
  _max: import_zod.z.lazy(() => LeftoverItemMaxOrderByAggregateInputSchema).optional(),
  _min: import_zod.z.lazy(() => LeftoverItemMinOrderByAggregateInputSchema).optional(),
  _sum: import_zod.z.lazy(() => LeftoverItemSumOrderByAggregateInputSchema).optional()
}).strict();
var LeftoverItemScalarWhereWithAggregatesInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => LeftoverItemScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => LeftoverItemScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => LeftoverItemScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  date: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional(),
  menuItemId: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  quantity: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  reason: import_zod.z.union([import_zod.z.lazy(() => StringWithAggregatesFilterSchema), import_zod.z.string()]).optional(),
  recordedById: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var WasteRecordWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => WasteRecordWhereInputSchema), import_zod.z.lazy(() => WasteRecordWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => WasteRecordWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => WasteRecordWhereInputSchema), import_zod.z.lazy(() => WasteRecordWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  date: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  ingredientId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  quantity: import_zod.z.union([import_zod.z.lazy(() => FloatFilterSchema), import_zod.z.number()]).optional(),
  unit: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  reason: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  recordedById: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  restaurant: import_zod.z.union([import_zod.z.lazy(() => RestaurantRelationFilterSchema), import_zod.z.lazy(() => RestaurantWhereInputSchema)]).optional(),
  ingrediente: import_zod.z.union([import_zod.z.lazy(() => IngredientRelationFilterSchema), import_zod.z.lazy(() => IngredientWhereInputSchema)]).optional(),
  recordedBy: import_zod.z.union([import_zod.z.lazy(() => UserRelationFilterSchema), import_zod.z.lazy(() => UserWhereInputSchema)]).optional()
}).strict();
var WasteRecordOrderByWithRelationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  date: import_zod.z.lazy(() => SortOrderSchema).optional(),
  ingredientId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  quantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  unit: import_zod.z.lazy(() => SortOrderSchema).optional(),
  reason: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recordedById: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantOrderByWithRelationInputSchema).optional(),
  ingrediente: import_zod.z.lazy(() => IngredientOrderByWithRelationInputSchema).optional(),
  recordedBy: import_zod.z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();
var WasteRecordWhereUniqueInputSchema = import_zod.z.object({
  id: import_zod.z.number().int()
}).and(import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  AND: import_zod.z.union([import_zod.z.lazy(() => WasteRecordWhereInputSchema), import_zod.z.lazy(() => WasteRecordWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => WasteRecordWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => WasteRecordWhereInputSchema), import_zod.z.lazy(() => WasteRecordWhereInputSchema).array()]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  date: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  ingredientId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  quantity: import_zod.z.union([import_zod.z.lazy(() => FloatFilterSchema), import_zod.z.number()]).optional(),
  unit: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  reason: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  recordedById: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  restaurant: import_zod.z.union([import_zod.z.lazy(() => RestaurantRelationFilterSchema), import_zod.z.lazy(() => RestaurantWhereInputSchema)]).optional(),
  ingrediente: import_zod.z.union([import_zod.z.lazy(() => IngredientRelationFilterSchema), import_zod.z.lazy(() => IngredientWhereInputSchema)]).optional(),
  recordedBy: import_zod.z.union([import_zod.z.lazy(() => UserRelationFilterSchema), import_zod.z.lazy(() => UserWhereInputSchema)]).optional()
}).strict());
var WasteRecordOrderByWithAggregationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  date: import_zod.z.lazy(() => SortOrderSchema).optional(),
  ingredientId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  quantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  unit: import_zod.z.lazy(() => SortOrderSchema).optional(),
  reason: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recordedById: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  _count: import_zod.z.lazy(() => WasteRecordCountOrderByAggregateInputSchema).optional(),
  _avg: import_zod.z.lazy(() => WasteRecordAvgOrderByAggregateInputSchema).optional(),
  _max: import_zod.z.lazy(() => WasteRecordMaxOrderByAggregateInputSchema).optional(),
  _min: import_zod.z.lazy(() => WasteRecordMinOrderByAggregateInputSchema).optional(),
  _sum: import_zod.z.lazy(() => WasteRecordSumOrderByAggregateInputSchema).optional()
}).strict();
var WasteRecordScalarWhereWithAggregatesInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => WasteRecordScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => WasteRecordScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => WasteRecordScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => WasteRecordScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => WasteRecordScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  date: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional(),
  ingredientId: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  quantity: import_zod.z.union([import_zod.z.lazy(() => FloatWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  unit: import_zod.z.union([import_zod.z.lazy(() => StringWithAggregatesFilterSchema), import_zod.z.string()]).optional(),
  reason: import_zod.z.union([import_zod.z.lazy(() => StringWithAggregatesFilterSchema), import_zod.z.string()]).optional(),
  recordedById: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var ProductionPlanWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanWhereInputSchema), import_zod.z.lazy(() => ProductionPlanWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => ProductionPlanWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanWhereInputSchema), import_zod.z.lazy(() => ProductionPlanWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  date: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  createdById: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  restaurant: import_zod.z.union([import_zod.z.lazy(() => RestaurantRelationFilterSchema), import_zod.z.lazy(() => RestaurantWhereInputSchema)]).optional(),
  createdBy: import_zod.z.union([import_zod.z.lazy(() => UserRelationFilterSchema), import_zod.z.lazy(() => UserWhereInputSchema)]).optional(),
  items: import_zod.z.lazy(() => ProductionPlanItemListRelationFilterSchema).optional()
}).strict();
var ProductionPlanOrderByWithRelationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  date: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdById: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantOrderByWithRelationInputSchema).optional(),
  createdBy: import_zod.z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  items: import_zod.z.lazy(() => ProductionPlanItemOrderByRelationAggregateInputSchema).optional()
}).strict();
var ProductionPlanWhereUniqueInputSchema = import_zod.z.object({
  id: import_zod.z.number().int()
}).and(import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  AND: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanWhereInputSchema), import_zod.z.lazy(() => ProductionPlanWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => ProductionPlanWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanWhereInputSchema), import_zod.z.lazy(() => ProductionPlanWhereInputSchema).array()]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  date: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  createdById: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  restaurant: import_zod.z.union([import_zod.z.lazy(() => RestaurantRelationFilterSchema), import_zod.z.lazy(() => RestaurantWhereInputSchema)]).optional(),
  createdBy: import_zod.z.union([import_zod.z.lazy(() => UserRelationFilterSchema), import_zod.z.lazy(() => UserWhereInputSchema)]).optional(),
  items: import_zod.z.lazy(() => ProductionPlanItemListRelationFilterSchema).optional()
}).strict());
var ProductionPlanOrderByWithAggregationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  date: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdById: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  _count: import_zod.z.lazy(() => ProductionPlanCountOrderByAggregateInputSchema).optional(),
  _avg: import_zod.z.lazy(() => ProductionPlanAvgOrderByAggregateInputSchema).optional(),
  _max: import_zod.z.lazy(() => ProductionPlanMaxOrderByAggregateInputSchema).optional(),
  _min: import_zod.z.lazy(() => ProductionPlanMinOrderByAggregateInputSchema).optional(),
  _sum: import_zod.z.lazy(() => ProductionPlanSumOrderByAggregateInputSchema).optional()
}).strict();
var ProductionPlanScalarWhereWithAggregatesInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => ProductionPlanScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => ProductionPlanScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => ProductionPlanScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  date: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional(),
  createdById: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var ProductionPlanItemWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemWhereInputSchema), import_zod.z.lazy(() => ProductionPlanItemWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => ProductionPlanItemWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemWhereInputSchema), import_zod.z.lazy(() => ProductionPlanItemWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  productionPlanId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  recipeId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  quantity: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  unit: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  assignedToId: import_zod.z.union([import_zod.z.lazy(() => IntNullableFilterSchema), import_zod.z.number()]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  productionPlan: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanRelationFilterSchema), import_zod.z.lazy(() => ProductionPlanWhereInputSchema)]).optional(),
  recipe: import_zod.z.union([import_zod.z.lazy(() => RecipeRelationFilterSchema), import_zod.z.lazy(() => RecipeWhereInputSchema)]).optional(),
  assignedTo: import_zod.z.union([import_zod.z.lazy(() => UserNullableRelationFilterSchema), import_zod.z.lazy(() => UserWhereInputSchema)]).optional().nullable()
}).strict();
var ProductionPlanItemOrderByWithRelationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  productionPlanId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  quantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  unit: import_zod.z.lazy(() => SortOrderSchema).optional(),
  assignedToId: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanOrderByWithRelationInputSchema).optional(),
  recipe: import_zod.z.lazy(() => RecipeOrderByWithRelationInputSchema).optional(),
  assignedTo: import_zod.z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();
var ProductionPlanItemWhereUniqueInputSchema = import_zod.z.object({
  id: import_zod.z.number().int()
}).and(import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  AND: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemWhereInputSchema), import_zod.z.lazy(() => ProductionPlanItemWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => ProductionPlanItemWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemWhereInputSchema), import_zod.z.lazy(() => ProductionPlanItemWhereInputSchema).array()]).optional(),
  productionPlanId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  recipeId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  quantity: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  unit: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  assignedToId: import_zod.z.union([import_zod.z.lazy(() => IntNullableFilterSchema), import_zod.z.number().int()]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  productionPlan: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanRelationFilterSchema), import_zod.z.lazy(() => ProductionPlanWhereInputSchema)]).optional(),
  recipe: import_zod.z.union([import_zod.z.lazy(() => RecipeRelationFilterSchema), import_zod.z.lazy(() => RecipeWhereInputSchema)]).optional(),
  assignedTo: import_zod.z.union([import_zod.z.lazy(() => UserNullableRelationFilterSchema), import_zod.z.lazy(() => UserWhereInputSchema)]).optional().nullable()
}).strict());
var ProductionPlanItemOrderByWithAggregationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  productionPlanId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  quantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  unit: import_zod.z.lazy(() => SortOrderSchema).optional(),
  assignedToId: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  _count: import_zod.z.lazy(() => ProductionPlanItemCountOrderByAggregateInputSchema).optional(),
  _avg: import_zod.z.lazy(() => ProductionPlanItemAvgOrderByAggregateInputSchema).optional(),
  _max: import_zod.z.lazy(() => ProductionPlanItemMaxOrderByAggregateInputSchema).optional(),
  _min: import_zod.z.lazy(() => ProductionPlanItemMinOrderByAggregateInputSchema).optional(),
  _sum: import_zod.z.lazy(() => ProductionPlanItemSumOrderByAggregateInputSchema).optional()
}).strict();
var ProductionPlanItemScalarWhereWithAggregatesInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => ProductionPlanItemScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => ProductionPlanItemScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => ProductionPlanItemScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  productionPlanId: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  recipeId: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  quantity: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  unit: import_zod.z.union([import_zod.z.lazy(() => StringWithAggregatesFilterSchema), import_zod.z.string()]).optional(),
  assignedToId: import_zod.z.union([import_zod.z.lazy(() => IntNullableWithAggregatesFilterSchema), import_zod.z.number()]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var ShiftTaskWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => ShiftTaskWhereInputSchema), import_zod.z.lazy(() => ShiftTaskWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => ShiftTaskWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => ShiftTaskWhereInputSchema), import_zod.z.lazy(() => ShiftTaskWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  shiftId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  taskType: import_zod.z.union([import_zod.z.lazy(() => EnumTaskTypeFilterSchema), import_zod.z.lazy(() => TaskTypeSchema)]).optional(),
  startTime: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  endTime: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  duration: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  notes: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  shift: import_zod.z.union([import_zod.z.lazy(() => ShiftRelationFilterSchema), import_zod.z.lazy(() => ShiftWhereInputSchema)]).optional()
}).strict();
var ShiftTaskOrderByWithRelationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  shiftId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  taskType: import_zod.z.lazy(() => SortOrderSchema).optional(),
  startTime: import_zod.z.lazy(() => SortOrderSchema).optional(),
  endTime: import_zod.z.lazy(() => SortOrderSchema).optional(),
  duration: import_zod.z.lazy(() => SortOrderSchema).optional(),
  notes: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  shift: import_zod.z.lazy(() => ShiftOrderByWithRelationInputSchema).optional()
}).strict();
var ShiftTaskWhereUniqueInputSchema = import_zod.z.object({
  id: import_zod.z.number().int()
}).and(import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  AND: import_zod.z.union([import_zod.z.lazy(() => ShiftTaskWhereInputSchema), import_zod.z.lazy(() => ShiftTaskWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => ShiftTaskWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => ShiftTaskWhereInputSchema), import_zod.z.lazy(() => ShiftTaskWhereInputSchema).array()]).optional(),
  shiftId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  taskType: import_zod.z.union([import_zod.z.lazy(() => EnumTaskTypeFilterSchema), import_zod.z.lazy(() => TaskTypeSchema)]).optional(),
  startTime: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  endTime: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  duration: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  notes: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  shift: import_zod.z.union([import_zod.z.lazy(() => ShiftRelationFilterSchema), import_zod.z.lazy(() => ShiftWhereInputSchema)]).optional()
}).strict());
var ShiftTaskOrderByWithAggregationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  shiftId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  taskType: import_zod.z.lazy(() => SortOrderSchema).optional(),
  startTime: import_zod.z.lazy(() => SortOrderSchema).optional(),
  endTime: import_zod.z.lazy(() => SortOrderSchema).optional(),
  duration: import_zod.z.lazy(() => SortOrderSchema).optional(),
  notes: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  _count: import_zod.z.lazy(() => ShiftTaskCountOrderByAggregateInputSchema).optional(),
  _avg: import_zod.z.lazy(() => ShiftTaskAvgOrderByAggregateInputSchema).optional(),
  _max: import_zod.z.lazy(() => ShiftTaskMaxOrderByAggregateInputSchema).optional(),
  _min: import_zod.z.lazy(() => ShiftTaskMinOrderByAggregateInputSchema).optional(),
  _sum: import_zod.z.lazy(() => ShiftTaskSumOrderByAggregateInputSchema).optional()
}).strict();
var ShiftTaskScalarWhereWithAggregatesInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => ShiftTaskScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => ShiftTaskScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => ShiftTaskScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => ShiftTaskScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => ShiftTaskScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  shiftId: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  taskType: import_zod.z.union([import_zod.z.lazy(() => EnumTaskTypeWithAggregatesFilterSchema), import_zod.z.lazy(() => TaskTypeSchema)]).optional(),
  startTime: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional(),
  endTime: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional(),
  duration: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  notes: import_zod.z.union([import_zod.z.lazy(() => StringNullableWithAggregatesFilterSchema), import_zod.z.string()]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var AvailabilityWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => AvailabilityWhereInputSchema), import_zod.z.lazy(() => AvailabilityWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => AvailabilityWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => AvailabilityWhereInputSchema), import_zod.z.lazy(() => AvailabilityWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  userId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  dayOfWeek: import_zod.z.union([import_zod.z.lazy(() => EnumDayOfWeekFilterSchema), import_zod.z.lazy(() => DayOfWeekSchema)]).optional(),
  startTime: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  endTime: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  user: import_zod.z.union([import_zod.z.lazy(() => UserRelationFilterSchema), import_zod.z.lazy(() => UserWhereInputSchema)]).optional()
}).strict();
var AvailabilityOrderByWithRelationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  userId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  dayOfWeek: import_zod.z.lazy(() => SortOrderSchema).optional(),
  startTime: import_zod.z.lazy(() => SortOrderSchema).optional(),
  endTime: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  user: import_zod.z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();
var AvailabilityWhereUniqueInputSchema = import_zod.z.object({
  id: import_zod.z.number().int()
}).and(import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  AND: import_zod.z.union([import_zod.z.lazy(() => AvailabilityWhereInputSchema), import_zod.z.lazy(() => AvailabilityWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => AvailabilityWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => AvailabilityWhereInputSchema), import_zod.z.lazy(() => AvailabilityWhereInputSchema).array()]).optional(),
  userId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  dayOfWeek: import_zod.z.union([import_zod.z.lazy(() => EnumDayOfWeekFilterSchema), import_zod.z.lazy(() => DayOfWeekSchema)]).optional(),
  startTime: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  endTime: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  user: import_zod.z.union([import_zod.z.lazy(() => UserRelationFilterSchema), import_zod.z.lazy(() => UserWhereInputSchema)]).optional()
}).strict());
var AvailabilityOrderByWithAggregationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  userId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  dayOfWeek: import_zod.z.lazy(() => SortOrderSchema).optional(),
  startTime: import_zod.z.lazy(() => SortOrderSchema).optional(),
  endTime: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  _count: import_zod.z.lazy(() => AvailabilityCountOrderByAggregateInputSchema).optional(),
  _avg: import_zod.z.lazy(() => AvailabilityAvgOrderByAggregateInputSchema).optional(),
  _max: import_zod.z.lazy(() => AvailabilityMaxOrderByAggregateInputSchema).optional(),
  _min: import_zod.z.lazy(() => AvailabilityMinOrderByAggregateInputSchema).optional(),
  _sum: import_zod.z.lazy(() => AvailabilitySumOrderByAggregateInputSchema).optional()
}).strict();
var AvailabilityScalarWhereWithAggregatesInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => AvailabilityScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => AvailabilityScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => AvailabilityScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => AvailabilityScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => AvailabilityScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  userId: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  dayOfWeek: import_zod.z.union([import_zod.z.lazy(() => EnumDayOfWeekWithAggregatesFilterSchema), import_zod.z.lazy(() => DayOfWeekSchema)]).optional(),
  startTime: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional(),
  endTime: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var SchedulingConstraintWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => SchedulingConstraintWhereInputSchema), import_zod.z.lazy(() => SchedulingConstraintWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => SchedulingConstraintWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => SchedulingConstraintWhereInputSchema), import_zod.z.lazy(() => SchedulingConstraintWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  userId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  date: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  constraintsType: import_zod.z.union([import_zod.z.lazy(() => EnumConstraintTypeFilterSchema), import_zod.z.lazy(() => ConstraintTypeSchema)]).optional(),
  startTime: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  endTime: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  notes: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  user: import_zod.z.union([import_zod.z.lazy(() => UserRelationFilterSchema), import_zod.z.lazy(() => UserWhereInputSchema)]).optional()
}).strict();
var SchedulingConstraintOrderByWithRelationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  userId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  date: import_zod.z.lazy(() => SortOrderSchema).optional(),
  constraintsType: import_zod.z.lazy(() => SortOrderSchema).optional(),
  startTime: import_zod.z.lazy(() => SortOrderSchema).optional(),
  endTime: import_zod.z.lazy(() => SortOrderSchema).optional(),
  notes: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  user: import_zod.z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();
var SchedulingConstraintWhereUniqueInputSchema = import_zod.z.object({
  id: import_zod.z.number().int()
}).and(import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  AND: import_zod.z.union([import_zod.z.lazy(() => SchedulingConstraintWhereInputSchema), import_zod.z.lazy(() => SchedulingConstraintWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => SchedulingConstraintWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => SchedulingConstraintWhereInputSchema), import_zod.z.lazy(() => SchedulingConstraintWhereInputSchema).array()]).optional(),
  userId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  date: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  constraintsType: import_zod.z.union([import_zod.z.lazy(() => EnumConstraintTypeFilterSchema), import_zod.z.lazy(() => ConstraintTypeSchema)]).optional(),
  startTime: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  endTime: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  notes: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  user: import_zod.z.union([import_zod.z.lazy(() => UserRelationFilterSchema), import_zod.z.lazy(() => UserWhereInputSchema)]).optional()
}).strict());
var SchedulingConstraintOrderByWithAggregationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  userId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  date: import_zod.z.lazy(() => SortOrderSchema).optional(),
  constraintsType: import_zod.z.lazy(() => SortOrderSchema).optional(),
  startTime: import_zod.z.lazy(() => SortOrderSchema).optional(),
  endTime: import_zod.z.lazy(() => SortOrderSchema).optional(),
  notes: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  _count: import_zod.z.lazy(() => SchedulingConstraintCountOrderByAggregateInputSchema).optional(),
  _avg: import_zod.z.lazy(() => SchedulingConstraintAvgOrderByAggregateInputSchema).optional(),
  _max: import_zod.z.lazy(() => SchedulingConstraintMaxOrderByAggregateInputSchema).optional(),
  _min: import_zod.z.lazy(() => SchedulingConstraintMinOrderByAggregateInputSchema).optional(),
  _sum: import_zod.z.lazy(() => SchedulingConstraintSumOrderByAggregateInputSchema).optional()
}).strict();
var SchedulingConstraintScalarWhereWithAggregatesInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => SchedulingConstraintScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => SchedulingConstraintScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => SchedulingConstraintScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => SchedulingConstraintScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => SchedulingConstraintScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  userId: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  date: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional(),
  constraintsType: import_zod.z.union([import_zod.z.lazy(() => EnumConstraintTypeWithAggregatesFilterSchema), import_zod.z.lazy(() => ConstraintTypeSchema)]).optional(),
  startTime: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional(),
  endTime: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional(),
  notes: import_zod.z.union([import_zod.z.lazy(() => StringNullableWithAggregatesFilterSchema), import_zod.z.string()]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var InventoryWithdrawalWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalWhereInputSchema), import_zod.z.lazy(() => InventoryWithdrawalWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => InventoryWithdrawalWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalWhereInputSchema), import_zod.z.lazy(() => InventoryWithdrawalWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  inventoryItemId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  dateTime: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  quantity: import_zod.z.union([import_zod.z.lazy(() => FloatFilterSchema), import_zod.z.number()]).optional(),
  unit: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  recipeId: import_zod.z.union([import_zod.z.lazy(() => IntNullableFilterSchema), import_zod.z.number()]).optional().nullable(),
  createdById: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  inventoryItem: import_zod.z.union([import_zod.z.lazy(() => InventoryItemRelationFilterSchema), import_zod.z.lazy(() => InventoryItemWhereInputSchema)]).optional(),
  recipe: import_zod.z.union([import_zod.z.lazy(() => RecipeNullableRelationFilterSchema), import_zod.z.lazy(() => RecipeWhereInputSchema)]).optional().nullable(),
  createdBy: import_zod.z.union([import_zod.z.lazy(() => UserRelationFilterSchema), import_zod.z.lazy(() => UserWhereInputSchema)]).optional()
}).strict();
var InventoryWithdrawalOrderByWithRelationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  inventoryItemId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  dateTime: import_zod.z.lazy(() => SortOrderSchema).optional(),
  quantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  unit: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  createdById: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  inventoryItem: import_zod.z.lazy(() => InventoryItemOrderByWithRelationInputSchema).optional(),
  recipe: import_zod.z.lazy(() => RecipeOrderByWithRelationInputSchema).optional(),
  createdBy: import_zod.z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();
var InventoryWithdrawalWhereUniqueInputSchema = import_zod.z.object({
  id: import_zod.z.number().int()
}).and(import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  AND: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalWhereInputSchema), import_zod.z.lazy(() => InventoryWithdrawalWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => InventoryWithdrawalWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalWhereInputSchema), import_zod.z.lazy(() => InventoryWithdrawalWhereInputSchema).array()]).optional(),
  inventoryItemId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  dateTime: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  quantity: import_zod.z.union([import_zod.z.lazy(() => FloatFilterSchema), import_zod.z.number()]).optional(),
  unit: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  recipeId: import_zod.z.union([import_zod.z.lazy(() => IntNullableFilterSchema), import_zod.z.number().int()]).optional().nullable(),
  createdById: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  inventoryItem: import_zod.z.union([import_zod.z.lazy(() => InventoryItemRelationFilterSchema), import_zod.z.lazy(() => InventoryItemWhereInputSchema)]).optional(),
  recipe: import_zod.z.union([import_zod.z.lazy(() => RecipeNullableRelationFilterSchema), import_zod.z.lazy(() => RecipeWhereInputSchema)]).optional().nullable(),
  createdBy: import_zod.z.union([import_zod.z.lazy(() => UserRelationFilterSchema), import_zod.z.lazy(() => UserWhereInputSchema)]).optional()
}).strict());
var InventoryWithdrawalOrderByWithAggregationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  inventoryItemId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  dateTime: import_zod.z.lazy(() => SortOrderSchema).optional(),
  quantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  unit: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  createdById: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  _count: import_zod.z.lazy(() => InventoryWithdrawalCountOrderByAggregateInputSchema).optional(),
  _avg: import_zod.z.lazy(() => InventoryWithdrawalAvgOrderByAggregateInputSchema).optional(),
  _max: import_zod.z.lazy(() => InventoryWithdrawalMaxOrderByAggregateInputSchema).optional(),
  _min: import_zod.z.lazy(() => InventoryWithdrawalMinOrderByAggregateInputSchema).optional(),
  _sum: import_zod.z.lazy(() => InventoryWithdrawalSumOrderByAggregateInputSchema).optional()
}).strict();
var InventoryWithdrawalScalarWhereWithAggregatesInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => InventoryWithdrawalScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => InventoryWithdrawalScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => InventoryWithdrawalScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  inventoryItemId: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  dateTime: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional(),
  quantity: import_zod.z.union([import_zod.z.lazy(() => FloatWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  unit: import_zod.z.union([import_zod.z.lazy(() => StringWithAggregatesFilterSchema), import_zod.z.string()]).optional(),
  recipeId: import_zod.z.union([import_zod.z.lazy(() => IntNullableWithAggregatesFilterSchema), import_zod.z.number()]).optional().nullable(),
  createdById: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var AllergenWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => AllergenWhereInputSchema), import_zod.z.lazy(() => AllergenWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => AllergenWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => AllergenWhereInputSchema), import_zod.z.lazy(() => AllergenWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  name: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  description: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  ingredients: import_zod.z.lazy(() => IngredientAllergenListRelationFilterSchema).optional()
}).strict();
var AllergenOrderByWithRelationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  description: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  ingredients: import_zod.z.lazy(() => IngredientAllergenOrderByRelationAggregateInputSchema).optional()
}).strict();
var AllergenWhereUniqueInputSchema = import_zod.z.union([
  import_zod.z.object({
    id: import_zod.z.number().int(),
    name: import_zod.z.string()
  }),
  import_zod.z.object({
    id: import_zod.z.number().int()
  }),
  import_zod.z.object({
    name: import_zod.z.string()
  })
]).and(import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string().optional(),
  AND: import_zod.z.union([import_zod.z.lazy(() => AllergenWhereInputSchema), import_zod.z.lazy(() => AllergenWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => AllergenWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => AllergenWhereInputSchema), import_zod.z.lazy(() => AllergenWhereInputSchema).array()]).optional(),
  description: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  ingredients: import_zod.z.lazy(() => IngredientAllergenListRelationFilterSchema).optional()
}).strict());
var AllergenOrderByWithAggregationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  description: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  _count: import_zod.z.lazy(() => AllergenCountOrderByAggregateInputSchema).optional(),
  _avg: import_zod.z.lazy(() => AllergenAvgOrderByAggregateInputSchema).optional(),
  _max: import_zod.z.lazy(() => AllergenMaxOrderByAggregateInputSchema).optional(),
  _min: import_zod.z.lazy(() => AllergenMinOrderByAggregateInputSchema).optional(),
  _sum: import_zod.z.lazy(() => AllergenSumOrderByAggregateInputSchema).optional()
}).strict();
var AllergenScalarWhereWithAggregatesInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => AllergenScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => AllergenScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => AllergenScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => AllergenScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => AllergenScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  name: import_zod.z.union([import_zod.z.lazy(() => StringWithAggregatesFilterSchema), import_zod.z.string()]).optional(),
  description: import_zod.z.union([import_zod.z.lazy(() => StringNullableWithAggregatesFilterSchema), import_zod.z.string()]).optional().nullable()
}).strict();
var IngredientAllergenWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenWhereInputSchema), import_zod.z.lazy(() => IngredientAllergenWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => IngredientAllergenWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenWhereInputSchema), import_zod.z.lazy(() => IngredientAllergenWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  ingredientId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  allergenId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  ingredient: import_zod.z.union([import_zod.z.lazy(() => IngredientRelationFilterSchema), import_zod.z.lazy(() => IngredientWhereInputSchema)]).optional(),
  allergen: import_zod.z.union([import_zod.z.lazy(() => AllergenRelationFilterSchema), import_zod.z.lazy(() => AllergenWhereInputSchema)]).optional()
}).strict();
var IngredientAllergenOrderByWithRelationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  ingredientId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  allergenId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  ingredient: import_zod.z.lazy(() => IngredientOrderByWithRelationInputSchema).optional(),
  allergen: import_zod.z.lazy(() => AllergenOrderByWithRelationInputSchema).optional()
}).strict();
var IngredientAllergenWhereUniqueInputSchema = import_zod.z.object({
  id: import_zod.z.number().int()
}).and(import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  AND: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenWhereInputSchema), import_zod.z.lazy(() => IngredientAllergenWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => IngredientAllergenWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenWhereInputSchema), import_zod.z.lazy(() => IngredientAllergenWhereInputSchema).array()]).optional(),
  ingredientId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  allergenId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  ingredient: import_zod.z.union([import_zod.z.lazy(() => IngredientRelationFilterSchema), import_zod.z.lazy(() => IngredientWhereInputSchema)]).optional(),
  allergen: import_zod.z.union([import_zod.z.lazy(() => AllergenRelationFilterSchema), import_zod.z.lazy(() => AllergenWhereInputSchema)]).optional()
}).strict());
var IngredientAllergenOrderByWithAggregationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  ingredientId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  allergenId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  _count: import_zod.z.lazy(() => IngredientAllergenCountOrderByAggregateInputSchema).optional(),
  _avg: import_zod.z.lazy(() => IngredientAllergenAvgOrderByAggregateInputSchema).optional(),
  _max: import_zod.z.lazy(() => IngredientAllergenMaxOrderByAggregateInputSchema).optional(),
  _min: import_zod.z.lazy(() => IngredientAllergenMinOrderByAggregateInputSchema).optional(),
  _sum: import_zod.z.lazy(() => IngredientAllergenSumOrderByAggregateInputSchema).optional()
}).strict();
var IngredientAllergenScalarWhereWithAggregatesInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => IngredientAllergenScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => IngredientAllergenScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => IngredientAllergenScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  ingredientId: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  allergenId: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional()
}).strict();
var NutritionalRecommendationWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => NutritionalRecommendationWhereInputSchema), import_zod.z.lazy(() => NutritionalRecommendationWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => NutritionalRecommendationWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => NutritionalRecommendationWhereInputSchema), import_zod.z.lazy(() => NutritionalRecommendationWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  menuItemId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  recommendation: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  menuItem: import_zod.z.union([import_zod.z.lazy(() => MenuItemRelationFilterSchema), import_zod.z.lazy(() => MenuItemWhereInputSchema)]).optional()
}).strict();
var NutritionalRecommendationOrderByWithRelationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  menuItemId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recommendation: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  menuItem: import_zod.z.lazy(() => MenuItemOrderByWithRelationInputSchema).optional()
}).strict();
var NutritionalRecommendationWhereUniqueInputSchema = import_zod.z.object({
  id: import_zod.z.number().int()
}).and(import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  AND: import_zod.z.union([import_zod.z.lazy(() => NutritionalRecommendationWhereInputSchema), import_zod.z.lazy(() => NutritionalRecommendationWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => NutritionalRecommendationWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => NutritionalRecommendationWhereInputSchema), import_zod.z.lazy(() => NutritionalRecommendationWhereInputSchema).array()]).optional(),
  menuItemId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  recommendation: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  menuItem: import_zod.z.union([import_zod.z.lazy(() => MenuItemRelationFilterSchema), import_zod.z.lazy(() => MenuItemWhereInputSchema)]).optional()
}).strict());
var NutritionalRecommendationOrderByWithAggregationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  menuItemId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recommendation: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  _count: import_zod.z.lazy(() => NutritionalRecommendationCountOrderByAggregateInputSchema).optional(),
  _avg: import_zod.z.lazy(() => NutritionalRecommendationAvgOrderByAggregateInputSchema).optional(),
  _max: import_zod.z.lazy(() => NutritionalRecommendationMaxOrderByAggregateInputSchema).optional(),
  _min: import_zod.z.lazy(() => NutritionalRecommendationMinOrderByAggregateInputSchema).optional(),
  _sum: import_zod.z.lazy(() => NutritionalRecommendationSumOrderByAggregateInputSchema).optional()
}).strict();
var NutritionalRecommendationScalarWhereWithAggregatesInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => NutritionalRecommendationScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => NutritionalRecommendationScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => NutritionalRecommendationScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => NutritionalRecommendationScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => NutritionalRecommendationScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  menuItemId: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  recommendation: import_zod.z.union([import_zod.z.lazy(() => StringWithAggregatesFilterSchema), import_zod.z.string()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var EarlyAccessWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => EarlyAccessWhereInputSchema), import_zod.z.lazy(() => EarlyAccessWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => EarlyAccessWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => EarlyAccessWhereInputSchema), import_zod.z.lazy(() => EarlyAccessWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  email: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  isEmailSent: import_zod.z.union([import_zod.z.lazy(() => BoolFilterSchema), import_zod.z.boolean()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var EarlyAccessOrderByWithRelationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  email: import_zod.z.lazy(() => SortOrderSchema).optional(),
  isEmailSent: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var EarlyAccessWhereUniqueInputSchema = import_zod.z.union([
  import_zod.z.object({
    id: import_zod.z.number().int(),
    email: import_zod.z.string()
  }),
  import_zod.z.object({
    id: import_zod.z.number().int()
  }),
  import_zod.z.object({
    email: import_zod.z.string()
  })
]).and(import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  email: import_zod.z.string().optional(),
  AND: import_zod.z.union([import_zod.z.lazy(() => EarlyAccessWhereInputSchema), import_zod.z.lazy(() => EarlyAccessWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => EarlyAccessWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => EarlyAccessWhereInputSchema), import_zod.z.lazy(() => EarlyAccessWhereInputSchema).array()]).optional(),
  isEmailSent: import_zod.z.union([import_zod.z.lazy(() => BoolFilterSchema), import_zod.z.boolean()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict());
var EarlyAccessOrderByWithAggregationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  email: import_zod.z.lazy(() => SortOrderSchema).optional(),
  isEmailSent: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  _count: import_zod.z.lazy(() => EarlyAccessCountOrderByAggregateInputSchema).optional(),
  _avg: import_zod.z.lazy(() => EarlyAccessAvgOrderByAggregateInputSchema).optional(),
  _max: import_zod.z.lazy(() => EarlyAccessMaxOrderByAggregateInputSchema).optional(),
  _min: import_zod.z.lazy(() => EarlyAccessMinOrderByAggregateInputSchema).optional(),
  _sum: import_zod.z.lazy(() => EarlyAccessSumOrderByAggregateInputSchema).optional()
}).strict();
var EarlyAccessScalarWhereWithAggregatesInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => EarlyAccessScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => EarlyAccessScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => EarlyAccessScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => EarlyAccessScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => EarlyAccessScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  email: import_zod.z.union([import_zod.z.lazy(() => StringWithAggregatesFilterSchema), import_zod.z.string()]).optional(),
  isEmailSent: import_zod.z.union([import_zod.z.lazy(() => BoolWithAggregatesFilterSchema), import_zod.z.boolean()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var OrganizationWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => OrganizationWhereInputSchema), import_zod.z.lazy(() => OrganizationWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => OrganizationWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => OrganizationWhereInputSchema), import_zod.z.lazy(() => OrganizationWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  name: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  restaurants: import_zod.z.lazy(() => RestaurantListRelationFilterSchema).optional(),
  users: import_zod.z.lazy(() => UserListRelationFilterSchema).optional()
}).strict();
var OrganizationOrderByWithRelationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurants: import_zod.z.lazy(() => RestaurantOrderByRelationAggregateInputSchema).optional(),
  users: import_zod.z.lazy(() => UserOrderByRelationAggregateInputSchema).optional()
}).strict();
var OrganizationWhereUniqueInputSchema = import_zod.z.union([
  import_zod.z.object({
    id: import_zod.z.number().int(),
    name: import_zod.z.string()
  }),
  import_zod.z.object({
    id: import_zod.z.number().int()
  }),
  import_zod.z.object({
    name: import_zod.z.string()
  })
]).and(import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string().optional(),
  AND: import_zod.z.union([import_zod.z.lazy(() => OrganizationWhereInputSchema), import_zod.z.lazy(() => OrganizationWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => OrganizationWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => OrganizationWhereInputSchema), import_zod.z.lazy(() => OrganizationWhereInputSchema).array()]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  restaurants: import_zod.z.lazy(() => RestaurantListRelationFilterSchema).optional(),
  users: import_zod.z.lazy(() => UserListRelationFilterSchema).optional()
}).strict());
var OrganizationOrderByWithAggregationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  _count: import_zod.z.lazy(() => OrganizationCountOrderByAggregateInputSchema).optional(),
  _avg: import_zod.z.lazy(() => OrganizationAvgOrderByAggregateInputSchema).optional(),
  _max: import_zod.z.lazy(() => OrganizationMaxOrderByAggregateInputSchema).optional(),
  _min: import_zod.z.lazy(() => OrganizationMinOrderByAggregateInputSchema).optional(),
  _sum: import_zod.z.lazy(() => OrganizationSumOrderByAggregateInputSchema).optional()
}).strict();
var OrganizationScalarWhereWithAggregatesInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  name: import_zod.z.union([import_zod.z.lazy(() => StringWithAggregatesFilterSchema), import_zod.z.string()]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => StringNullableWithAggregatesFilterSchema), import_zod.z.string()]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var RestaurantWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => RestaurantWhereInputSchema), import_zod.z.lazy(() => RestaurantWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => RestaurantWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => RestaurantWhereInputSchema), import_zod.z.lazy(() => RestaurantWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  name: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  address: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  city: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  zipCode: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  state: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  owner: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  organizationId: import_zod.z.union([import_zod.z.lazy(() => IntNullableFilterSchema), import_zod.z.number()]).optional().nullable(),
  foodCost: import_zod.z.union([import_zod.z.lazy(() => FloatNullableFilterSchema), import_zod.z.number()]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  isDeleted: import_zod.z.union([import_zod.z.lazy(() => BoolFilterSchema), import_zod.z.boolean()]).optional(),
  deleted: import_zod.z.union([import_zod.z.lazy(() => DateTimeNullableFilterSchema), import_zod.z.coerce.date()]).optional().nullable(),
  organization: import_zod.z.union([import_zod.z.lazy(() => OrganizationNullableRelationFilterSchema), import_zod.z.lazy(() => OrganizationWhereInputSchema)]).optional().nullable(),
  users: import_zod.z.lazy(() => UserListRelationFilterSchema).optional(),
  cookbooks: import_zod.z.lazy(() => CookBookListRelationFilterSchema).optional(),
  inventory: import_zod.z.union([import_zod.z.lazy(() => InventoryNullableRelationFilterSchema), import_zod.z.lazy(() => InventoryWhereInputSchema)]).optional().nullable(),
  orders: import_zod.z.lazy(() => OrderListRelationFilterSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeListRelationFilterSchema).optional(),
  menus: import_zod.z.lazy(() => MenuListRelationFilterSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsListRelationFilterSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemListRelationFilterSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordListRelationFilterSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanListRelationFilterSchema).optional(),
  equipment: import_zod.z.lazy(() => EquipmentListRelationFilterSchema).optional(),
  qualityChecklist: import_zod.z.lazy(() => QualityChecklistListRelationFilterSchema).optional(),
  qustomerFeedback: import_zod.z.lazy(() => CustomerFeedbackListRelationFilterSchema).optional()
}).strict();
var RestaurantOrderByWithRelationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  address: import_zod.z.lazy(() => SortOrderSchema).optional(),
  city: import_zod.z.lazy(() => SortOrderSchema).optional(),
  zipCode: import_zod.z.lazy(() => SortOrderSchema).optional(),
  state: import_zod.z.lazy(() => SortOrderSchema).optional(),
  owner: import_zod.z.lazy(() => SortOrderSchema).optional(),
  organizationId: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  isDeleted: import_zod.z.lazy(() => SortOrderSchema).optional(),
  deleted: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  organization: import_zod.z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  users: import_zod.z.lazy(() => UserOrderByRelationAggregateInputSchema).optional(),
  cookbooks: import_zod.z.lazy(() => CookBookOrderByRelationAggregateInputSchema).optional(),
  inventory: import_zod.z.lazy(() => InventoryOrderByWithRelationInputSchema).optional(),
  orders: import_zod.z.lazy(() => OrderOrderByRelationAggregateInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeOrderByRelationAggregateInputSchema).optional(),
  menus: import_zod.z.lazy(() => MenuOrderByRelationAggregateInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsOrderByRelationAggregateInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemOrderByRelationAggregateInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordOrderByRelationAggregateInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanOrderByRelationAggregateInputSchema).optional(),
  equipment: import_zod.z.lazy(() => EquipmentOrderByRelationAggregateInputSchema).optional(),
  qualityChecklist: import_zod.z.lazy(() => QualityChecklistOrderByRelationAggregateInputSchema).optional(),
  qustomerFeedback: import_zod.z.lazy(() => CustomerFeedbackOrderByRelationAggregateInputSchema).optional()
}).strict();
var RestaurantWhereUniqueInputSchema = import_zod.z.object({
  id: import_zod.z.number().int()
}).and(import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  AND: import_zod.z.union([import_zod.z.lazy(() => RestaurantWhereInputSchema), import_zod.z.lazy(() => RestaurantWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => RestaurantWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => RestaurantWhereInputSchema), import_zod.z.lazy(() => RestaurantWhereInputSchema).array()]).optional(),
  name: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  address: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  city: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  zipCode: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  state: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  owner: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  organizationId: import_zod.z.union([import_zod.z.lazy(() => IntNullableFilterSchema), import_zod.z.number().int()]).optional().nullable(),
  foodCost: import_zod.z.union([import_zod.z.lazy(() => FloatNullableFilterSchema), import_zod.z.number()]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  isDeleted: import_zod.z.union([import_zod.z.lazy(() => BoolFilterSchema), import_zod.z.boolean()]).optional(),
  deleted: import_zod.z.union([import_zod.z.lazy(() => DateTimeNullableFilterSchema), import_zod.z.coerce.date()]).optional().nullable(),
  organization: import_zod.z.union([import_zod.z.lazy(() => OrganizationNullableRelationFilterSchema), import_zod.z.lazy(() => OrganizationWhereInputSchema)]).optional().nullable(),
  users: import_zod.z.lazy(() => UserListRelationFilterSchema).optional(),
  cookbooks: import_zod.z.lazy(() => CookBookListRelationFilterSchema).optional(),
  inventory: import_zod.z.union([import_zod.z.lazy(() => InventoryNullableRelationFilterSchema), import_zod.z.lazy(() => InventoryWhereInputSchema)]).optional().nullable(),
  orders: import_zod.z.lazy(() => OrderListRelationFilterSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeListRelationFilterSchema).optional(),
  menus: import_zod.z.lazy(() => MenuListRelationFilterSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsListRelationFilterSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemListRelationFilterSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordListRelationFilterSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanListRelationFilterSchema).optional(),
  equipment: import_zod.z.lazy(() => EquipmentListRelationFilterSchema).optional(),
  qualityChecklist: import_zod.z.lazy(() => QualityChecklistListRelationFilterSchema).optional(),
  qustomerFeedback: import_zod.z.lazy(() => CustomerFeedbackListRelationFilterSchema).optional()
}).strict());
var RestaurantOrderByWithAggregationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  address: import_zod.z.lazy(() => SortOrderSchema).optional(),
  city: import_zod.z.lazy(() => SortOrderSchema).optional(),
  zipCode: import_zod.z.lazy(() => SortOrderSchema).optional(),
  state: import_zod.z.lazy(() => SortOrderSchema).optional(),
  owner: import_zod.z.lazy(() => SortOrderSchema).optional(),
  organizationId: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  isDeleted: import_zod.z.lazy(() => SortOrderSchema).optional(),
  deleted: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  _count: import_zod.z.lazy(() => RestaurantCountOrderByAggregateInputSchema).optional(),
  _avg: import_zod.z.lazy(() => RestaurantAvgOrderByAggregateInputSchema).optional(),
  _max: import_zod.z.lazy(() => RestaurantMaxOrderByAggregateInputSchema).optional(),
  _min: import_zod.z.lazy(() => RestaurantMinOrderByAggregateInputSchema).optional(),
  _sum: import_zod.z.lazy(() => RestaurantSumOrderByAggregateInputSchema).optional()
}).strict();
var RestaurantScalarWhereWithAggregatesInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => RestaurantScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => RestaurantScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => RestaurantScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => RestaurantScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => RestaurantScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  name: import_zod.z.union([import_zod.z.lazy(() => StringWithAggregatesFilterSchema), import_zod.z.string()]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => StringNullableWithAggregatesFilterSchema), import_zod.z.string()]).optional().nullable(),
  address: import_zod.z.union([import_zod.z.lazy(() => StringWithAggregatesFilterSchema), import_zod.z.string()]).optional(),
  city: import_zod.z.union([import_zod.z.lazy(() => StringWithAggregatesFilterSchema), import_zod.z.string()]).optional(),
  zipCode: import_zod.z.union([import_zod.z.lazy(() => StringWithAggregatesFilterSchema), import_zod.z.string()]).optional(),
  state: import_zod.z.union([import_zod.z.lazy(() => StringWithAggregatesFilterSchema), import_zod.z.string()]).optional(),
  owner: import_zod.z.union([import_zod.z.lazy(() => StringWithAggregatesFilterSchema), import_zod.z.string()]).optional(),
  organizationId: import_zod.z.union([import_zod.z.lazy(() => IntNullableWithAggregatesFilterSchema), import_zod.z.number()]).optional().nullable(),
  foodCost: import_zod.z.union([import_zod.z.lazy(() => FloatNullableWithAggregatesFilterSchema), import_zod.z.number()]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional(),
  isDeleted: import_zod.z.union([import_zod.z.lazy(() => BoolWithAggregatesFilterSchema), import_zod.z.boolean()]).optional(),
  deleted: import_zod.z.union([import_zod.z.lazy(() => DateTimeNullableWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional().nullable()
}).strict();
var UserWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => UserWhereInputSchema), import_zod.z.lazy(() => UserWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => UserWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => UserWhereInputSchema), import_zod.z.lazy(() => UserWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  email: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  sub: import_zod.z.union([import_zod.z.lazy(() => IntNullableFilterSchema), import_zod.z.number()]).optional().nullable(),
  passwordHash: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  firstName: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  lastName: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  profileImage: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  verified: import_zod.z.union([import_zod.z.lazy(() => BoolFilterSchema), import_zod.z.boolean()]).optional(),
  role: import_zod.z.union([import_zod.z.lazy(() => EnumUserRoleFilterSchema), import_zod.z.lazy(() => UserRoleSchema)]).optional(),
  organizationId: import_zod.z.union([import_zod.z.lazy(() => IntNullableFilterSchema), import_zod.z.number()]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.lazy(() => IntNullableFilterSchema), import_zod.z.number()]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  organization: import_zod.z.union([import_zod.z.lazy(() => OrganizationNullableRelationFilterSchema), import_zod.z.lazy(() => OrganizationWhereInputSchema)]).optional().nullable(),
  restaurant: import_zod.z.union([import_zod.z.lazy(() => RestaurantNullableRelationFilterSchema), import_zod.z.lazy(() => RestaurantWhereInputSchema)]).optional().nullable(),
  shifts: import_zod.z.lazy(() => ShiftListRelationFilterSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemListRelationFilterSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemListRelationFilterSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionListRelationFilterSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetListRelationFilterSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemListRelationFilterSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordListRelationFilterSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanListRelationFilterSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemListRelationFilterSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityListRelationFilterSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintListRelationFilterSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalListRelationFilterSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteListRelationFilterSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackListRelationFilterSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionListRelationFilterSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionListRelationFilterSchema).optional()
}).strict();
var UserOrderByWithRelationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  email: import_zod.z.lazy(() => SortOrderSchema).optional(),
  sub: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  passwordHash: import_zod.z.lazy(() => SortOrderSchema).optional(),
  firstName: import_zod.z.lazy(() => SortOrderSchema).optional(),
  lastName: import_zod.z.lazy(() => SortOrderSchema).optional(),
  profileImage: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  verified: import_zod.z.lazy(() => SortOrderSchema).optional(),
  role: import_zod.z.lazy(() => SortOrderSchema).optional(),
  organizationId: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  organization: import_zod.z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantOrderByWithRelationInputSchema).optional(),
  shifts: import_zod.z.lazy(() => ShiftOrderByRelationAggregateInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemOrderByRelationAggregateInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemOrderByRelationAggregateInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionOrderByRelationAggregateInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetOrderByRelationAggregateInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemOrderByRelationAggregateInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordOrderByRelationAggregateInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanOrderByRelationAggregateInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemOrderByRelationAggregateInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityOrderByRelationAggregateInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintOrderByRelationAggregateInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalOrderByRelationAggregateInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteOrderByRelationAggregateInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackOrderByRelationAggregateInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionOrderByRelationAggregateInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionOrderByRelationAggregateInputSchema).optional()
}).strict();
var UserWhereUniqueInputSchema = import_zod.z.union([
  import_zod.z.object({
    id: import_zod.z.number().int(),
    email: import_zod.z.string(),
    sub: import_zod.z.number().int()
  }),
  import_zod.z.object({
    id: import_zod.z.number().int(),
    email: import_zod.z.string()
  }),
  import_zod.z.object({
    id: import_zod.z.number().int(),
    sub: import_zod.z.number().int()
  }),
  import_zod.z.object({
    id: import_zod.z.number().int()
  }),
  import_zod.z.object({
    email: import_zod.z.string(),
    sub: import_zod.z.number().int()
  }),
  import_zod.z.object({
    email: import_zod.z.string()
  }),
  import_zod.z.object({
    sub: import_zod.z.number().int()
  })
]).and(import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  email: import_zod.z.string().optional(),
  sub: import_zod.z.number().int().optional(),
  AND: import_zod.z.union([import_zod.z.lazy(() => UserWhereInputSchema), import_zod.z.lazy(() => UserWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => UserWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => UserWhereInputSchema), import_zod.z.lazy(() => UserWhereInputSchema).array()]).optional(),
  passwordHash: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  firstName: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  lastName: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  profileImage: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  verified: import_zod.z.union([import_zod.z.lazy(() => BoolFilterSchema), import_zod.z.boolean()]).optional(),
  role: import_zod.z.union([import_zod.z.lazy(() => EnumUserRoleFilterSchema), import_zod.z.lazy(() => UserRoleSchema)]).optional(),
  organizationId: import_zod.z.union([import_zod.z.lazy(() => IntNullableFilterSchema), import_zod.z.number().int()]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.lazy(() => IntNullableFilterSchema), import_zod.z.number().int()]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  organization: import_zod.z.union([import_zod.z.lazy(() => OrganizationNullableRelationFilterSchema), import_zod.z.lazy(() => OrganizationWhereInputSchema)]).optional().nullable(),
  restaurant: import_zod.z.union([import_zod.z.lazy(() => RestaurantNullableRelationFilterSchema), import_zod.z.lazy(() => RestaurantWhereInputSchema)]).optional().nullable(),
  shifts: import_zod.z.lazy(() => ShiftListRelationFilterSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemListRelationFilterSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemListRelationFilterSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionListRelationFilterSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetListRelationFilterSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemListRelationFilterSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordListRelationFilterSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanListRelationFilterSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemListRelationFilterSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityListRelationFilterSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintListRelationFilterSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalListRelationFilterSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteListRelationFilterSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackListRelationFilterSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionListRelationFilterSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionListRelationFilterSchema).optional()
}).strict());
var UserOrderByWithAggregationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  email: import_zod.z.lazy(() => SortOrderSchema).optional(),
  sub: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  passwordHash: import_zod.z.lazy(() => SortOrderSchema).optional(),
  firstName: import_zod.z.lazy(() => SortOrderSchema).optional(),
  lastName: import_zod.z.lazy(() => SortOrderSchema).optional(),
  profileImage: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  verified: import_zod.z.lazy(() => SortOrderSchema).optional(),
  role: import_zod.z.lazy(() => SortOrderSchema).optional(),
  organizationId: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  _count: import_zod.z.lazy(() => UserCountOrderByAggregateInputSchema).optional(),
  _avg: import_zod.z.lazy(() => UserAvgOrderByAggregateInputSchema).optional(),
  _max: import_zod.z.lazy(() => UserMaxOrderByAggregateInputSchema).optional(),
  _min: import_zod.z.lazy(() => UserMinOrderByAggregateInputSchema).optional(),
  _sum: import_zod.z.lazy(() => UserSumOrderByAggregateInputSchema).optional()
}).strict();
var UserScalarWhereWithAggregatesInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => UserScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => UserScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  email: import_zod.z.union([import_zod.z.lazy(() => StringWithAggregatesFilterSchema), import_zod.z.string()]).optional(),
  sub: import_zod.z.union([import_zod.z.lazy(() => IntNullableWithAggregatesFilterSchema), import_zod.z.number()]).optional().nullable(),
  passwordHash: import_zod.z.union([import_zod.z.lazy(() => StringWithAggregatesFilterSchema), import_zod.z.string()]).optional(),
  firstName: import_zod.z.union([import_zod.z.lazy(() => StringWithAggregatesFilterSchema), import_zod.z.string()]).optional(),
  lastName: import_zod.z.union([import_zod.z.lazy(() => StringWithAggregatesFilterSchema), import_zod.z.string()]).optional(),
  profileImage: import_zod.z.union([import_zod.z.lazy(() => StringNullableWithAggregatesFilterSchema), import_zod.z.string()]).optional().nullable(),
  verified: import_zod.z.union([import_zod.z.lazy(() => BoolWithAggregatesFilterSchema), import_zod.z.boolean()]).optional(),
  role: import_zod.z.union([import_zod.z.lazy(() => EnumUserRoleWithAggregatesFilterSchema), import_zod.z.lazy(() => UserRoleSchema)]).optional(),
  organizationId: import_zod.z.union([import_zod.z.lazy(() => IntNullableWithAggregatesFilterSchema), import_zod.z.number()]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.lazy(() => IntNullableWithAggregatesFilterSchema), import_zod.z.number()]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var SessionWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => SessionWhereInputSchema), import_zod.z.lazy(() => SessionWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => SessionWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => SessionWhereInputSchema), import_zod.z.lazy(() => SessionWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  userId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  code: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  token: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  expiresAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  user: import_zod.z.union([import_zod.z.lazy(() => UserRelationFilterSchema), import_zod.z.lazy(() => UserWhereInputSchema)]).optional()
}).strict();
var SessionOrderByWithRelationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  userId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  code: import_zod.z.lazy(() => SortOrderSchema).optional(),
  token: import_zod.z.lazy(() => SortOrderSchema).optional(),
  expiresAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  user: import_zod.z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();
var SessionWhereUniqueInputSchema = import_zod.z.union([
  import_zod.z.object({
    id: import_zod.z.string(),
    code: import_zod.z.string(),
    token: import_zod.z.string()
  }),
  import_zod.z.object({
    id: import_zod.z.string(),
    code: import_zod.z.string()
  }),
  import_zod.z.object({
    id: import_zod.z.string(),
    token: import_zod.z.string()
  }),
  import_zod.z.object({
    id: import_zod.z.string()
  }),
  import_zod.z.object({
    code: import_zod.z.string(),
    token: import_zod.z.string()
  }),
  import_zod.z.object({
    code: import_zod.z.string()
  }),
  import_zod.z.object({
    token: import_zod.z.string()
  })
]).and(import_zod.z.object({
  id: import_zod.z.string().optional(),
  code: import_zod.z.string().optional(),
  token: import_zod.z.string().optional(),
  AND: import_zod.z.union([import_zod.z.lazy(() => SessionWhereInputSchema), import_zod.z.lazy(() => SessionWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => SessionWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => SessionWhereInputSchema), import_zod.z.lazy(() => SessionWhereInputSchema).array()]).optional(),
  userId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  expiresAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  user: import_zod.z.union([import_zod.z.lazy(() => UserRelationFilterSchema), import_zod.z.lazy(() => UserWhereInputSchema)]).optional()
}).strict());
var SessionOrderByWithAggregationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  userId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  code: import_zod.z.lazy(() => SortOrderSchema).optional(),
  token: import_zod.z.lazy(() => SortOrderSchema).optional(),
  expiresAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  _count: import_zod.z.lazy(() => SessionCountOrderByAggregateInputSchema).optional(),
  _avg: import_zod.z.lazy(() => SessionAvgOrderByAggregateInputSchema).optional(),
  _max: import_zod.z.lazy(() => SessionMaxOrderByAggregateInputSchema).optional(),
  _min: import_zod.z.lazy(() => SessionMinOrderByAggregateInputSchema).optional(),
  _sum: import_zod.z.lazy(() => SessionSumOrderByAggregateInputSchema).optional()
}).strict();
var SessionScalarWhereWithAggregatesInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => SessionScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => SessionScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => SessionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => SessionScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => SessionScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => StringWithAggregatesFilterSchema), import_zod.z.string()]).optional(),
  userId: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  code: import_zod.z.union([import_zod.z.lazy(() => StringWithAggregatesFilterSchema), import_zod.z.string()]).optional(),
  token: import_zod.z.union([import_zod.z.lazy(() => StringWithAggregatesFilterSchema), import_zod.z.string()]).optional(),
  expiresAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var CookBookWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => CookBookWhereInputSchema), import_zod.z.lazy(() => CookBookWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => CookBookWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => CookBookWhereInputSchema), import_zod.z.lazy(() => CookBookWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  name: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  category: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.lazy(() => IntNullableFilterSchema), import_zod.z.number()]).optional().nullable(),
  recipes: import_zod.z.lazy(() => RecipeListRelationFilterSchema).optional(),
  restaurant: import_zod.z.union([import_zod.z.lazy(() => RestaurantNullableRelationFilterSchema), import_zod.z.lazy(() => RestaurantWhereInputSchema)]).optional().nullable()
}).strict();
var CookBookOrderByWithRelationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  category: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  recipes: import_zod.z.lazy(() => RecipeOrderByRelationAggregateInputSchema).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantOrderByWithRelationInputSchema).optional()
}).strict();
var CookBookWhereUniqueInputSchema = import_zod.z.object({
  id: import_zod.z.number().int()
}).and(import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  AND: import_zod.z.union([import_zod.z.lazy(() => CookBookWhereInputSchema), import_zod.z.lazy(() => CookBookWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => CookBookWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => CookBookWhereInputSchema), import_zod.z.lazy(() => CookBookWhereInputSchema).array()]).optional(),
  name: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  category: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.lazy(() => IntNullableFilterSchema), import_zod.z.number().int()]).optional().nullable(),
  recipes: import_zod.z.lazy(() => RecipeListRelationFilterSchema).optional(),
  restaurant: import_zod.z.union([import_zod.z.lazy(() => RestaurantNullableRelationFilterSchema), import_zod.z.lazy(() => RestaurantWhereInputSchema)]).optional().nullable()
}).strict());
var CookBookOrderByWithAggregationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  category: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  _count: import_zod.z.lazy(() => CookBookCountOrderByAggregateInputSchema).optional(),
  _avg: import_zod.z.lazy(() => CookBookAvgOrderByAggregateInputSchema).optional(),
  _max: import_zod.z.lazy(() => CookBookMaxOrderByAggregateInputSchema).optional(),
  _min: import_zod.z.lazy(() => CookBookMinOrderByAggregateInputSchema).optional(),
  _sum: import_zod.z.lazy(() => CookBookSumOrderByAggregateInputSchema).optional()
}).strict();
var CookBookScalarWhereWithAggregatesInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => CookBookScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => CookBookScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => CookBookScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => CookBookScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => CookBookScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  name: import_zod.z.union([import_zod.z.lazy(() => StringWithAggregatesFilterSchema), import_zod.z.string()]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => StringNullableWithAggregatesFilterSchema), import_zod.z.string()]).optional().nullable(),
  category: import_zod.z.union([import_zod.z.lazy(() => StringWithAggregatesFilterSchema), import_zod.z.string()]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.lazy(() => IntNullableWithAggregatesFilterSchema), import_zod.z.number()]).optional().nullable()
}).strict();
var RecipeWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => RecipeWhereInputSchema), import_zod.z.lazy(() => RecipeWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => RecipeWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => RecipeWhereInputSchema), import_zod.z.lazy(() => RecipeWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  name: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  imageUrl: import_zod.z.lazy(() => StringNullableListFilterSchema).optional(),
  description: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  servings: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  cookTime: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  prepTime: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  frequency: import_zod.z.union([import_zod.z.lazy(() => IntNullableFilterSchema), import_zod.z.number()]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  cookBookId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  foodCost: import_zod.z.union([import_zod.z.lazy(() => FloatNullableFilterSchema), import_zod.z.number()]).optional().nullable(),
  isDeleted: import_zod.z.union([import_zod.z.lazy(() => BoolFilterSchema), import_zod.z.boolean()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  restaurant: import_zod.z.union([import_zod.z.lazy(() => RestaurantRelationFilterSchema), import_zod.z.lazy(() => RestaurantWhereInputSchema)]).optional(),
  cookBook: import_zod.z.union([import_zod.z.lazy(() => CookBookRelationFilterSchema), import_zod.z.lazy(() => CookBookWhereInputSchema)]).optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientListRelationFilterSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionListRelationFilterSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemListRelationFilterSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryListRelationFilterSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryListRelationFilterSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardListRelationFilterSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemListRelationFilterSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeListRelationFilterSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemListRelationFilterSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalListRelationFilterSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagListRelationFilterSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionListRelationFilterSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentListRelationFilterSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionListRelationFilterSchema).optional()
}).strict();
var RecipeOrderByWithRelationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  imageUrl: import_zod.z.lazy(() => SortOrderSchema).optional(),
  description: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  servings: import_zod.z.lazy(() => SortOrderSchema).optional(),
  cookTime: import_zod.z.lazy(() => SortOrderSchema).optional(),
  prepTime: import_zod.z.lazy(() => SortOrderSchema).optional(),
  frequency: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  cookBookId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  foodCost: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  isDeleted: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantOrderByWithRelationInputSchema).optional(),
  cookBook: import_zod.z.lazy(() => CookBookOrderByWithRelationInputSchema).optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientOrderByRelationAggregateInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionOrderByRelationAggregateInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemOrderByRelationAggregateInputSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryOrderByRelationAggregateInputSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryOrderByRelationAggregateInputSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardOrderByRelationAggregateInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemOrderByRelationAggregateInputSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeOrderByRelationAggregateInputSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemOrderByRelationAggregateInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalOrderByRelationAggregateInputSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagOrderByRelationAggregateInputSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionOrderByRelationAggregateInputSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentOrderByRelationAggregateInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionOrderByRelationAggregateInputSchema).optional()
}).strict();
var RecipeWhereUniqueInputSchema = import_zod.z.object({
  id: import_zod.z.number().int()
}).and(import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  AND: import_zod.z.union([import_zod.z.lazy(() => RecipeWhereInputSchema), import_zod.z.lazy(() => RecipeWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => RecipeWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => RecipeWhereInputSchema), import_zod.z.lazy(() => RecipeWhereInputSchema).array()]).optional(),
  name: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  imageUrl: import_zod.z.lazy(() => StringNullableListFilterSchema).optional(),
  description: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  servings: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  cookTime: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  prepTime: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  frequency: import_zod.z.union([import_zod.z.lazy(() => IntNullableFilterSchema), import_zod.z.number().int()]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  cookBookId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  foodCost: import_zod.z.union([import_zod.z.lazy(() => FloatNullableFilterSchema), import_zod.z.number()]).optional().nullable(),
  isDeleted: import_zod.z.union([import_zod.z.lazy(() => BoolFilterSchema), import_zod.z.boolean()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  restaurant: import_zod.z.union([import_zod.z.lazy(() => RestaurantRelationFilterSchema), import_zod.z.lazy(() => RestaurantWhereInputSchema)]).optional(),
  cookBook: import_zod.z.union([import_zod.z.lazy(() => CookBookRelationFilterSchema), import_zod.z.lazy(() => CookBookWhereInputSchema)]).optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientListRelationFilterSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionListRelationFilterSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemListRelationFilterSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryListRelationFilterSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryListRelationFilterSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardListRelationFilterSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemListRelationFilterSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeListRelationFilterSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemListRelationFilterSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalListRelationFilterSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagListRelationFilterSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionListRelationFilterSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentListRelationFilterSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionListRelationFilterSchema).optional()
}).strict());
var RecipeOrderByWithAggregationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  imageUrl: import_zod.z.lazy(() => SortOrderSchema).optional(),
  description: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  servings: import_zod.z.lazy(() => SortOrderSchema).optional(),
  cookTime: import_zod.z.lazy(() => SortOrderSchema).optional(),
  prepTime: import_zod.z.lazy(() => SortOrderSchema).optional(),
  frequency: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  cookBookId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  foodCost: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  isDeleted: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  _count: import_zod.z.lazy(() => RecipeCountOrderByAggregateInputSchema).optional(),
  _avg: import_zod.z.lazy(() => RecipeAvgOrderByAggregateInputSchema).optional(),
  _max: import_zod.z.lazy(() => RecipeMaxOrderByAggregateInputSchema).optional(),
  _min: import_zod.z.lazy(() => RecipeMinOrderByAggregateInputSchema).optional(),
  _sum: import_zod.z.lazy(() => RecipeSumOrderByAggregateInputSchema).optional()
}).strict();
var RecipeScalarWhereWithAggregatesInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => RecipeScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => RecipeScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => RecipeScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => RecipeScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => RecipeScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  name: import_zod.z.union([import_zod.z.lazy(() => StringWithAggregatesFilterSchema), import_zod.z.string()]).optional(),
  imageUrl: import_zod.z.lazy(() => StringNullableListFilterSchema).optional(),
  description: import_zod.z.union([import_zod.z.lazy(() => StringNullableWithAggregatesFilterSchema), import_zod.z.string()]).optional().nullable(),
  servings: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  cookTime: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  prepTime: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  frequency: import_zod.z.union([import_zod.z.lazy(() => IntNullableWithAggregatesFilterSchema), import_zod.z.number()]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  cookBookId: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  foodCost: import_zod.z.union([import_zod.z.lazy(() => FloatNullableWithAggregatesFilterSchema), import_zod.z.number()]).optional().nullable(),
  isDeleted: import_zod.z.union([import_zod.z.lazy(() => BoolWithAggregatesFilterSchema), import_zod.z.boolean()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var IngredientWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => IngredientWhereInputSchema), import_zod.z.lazy(() => IngredientWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => IngredientWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => IngredientWhereInputSchema), import_zod.z.lazy(() => IngredientWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  name: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  category: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  price: import_zod.z.union([import_zod.z.lazy(() => FloatFilterSchema), import_zod.z.number()]).optional(),
  dietaryRestrictionId: import_zod.z.union([import_zod.z.lazy(() => IntNullableFilterSchema), import_zod.z.number()]).optional().nullable(),
  recipeIngredients: import_zod.z.lazy(() => RecipeIngredientListRelationFilterSchema).optional(),
  inventoryItems: import_zod.z.lazy(() => InventoryItemListRelationFilterSchema).optional(),
  orderItems: import_zod.z.lazy(() => OrderItemListRelationFilterSchema).optional(),
  vendors: import_zod.z.lazy(() => VendorListRelationFilterSchema).optional(),
  WasteRecord: import_zod.z.lazy(() => WasteRecordListRelationFilterSchema).optional(),
  IngredientAllergen: import_zod.z.lazy(() => IngredientAllergenListRelationFilterSchema).optional(),
  SupplierPriceHistory: import_zod.z.lazy(() => SupplierPriceHistoryListRelationFilterSchema).optional(),
  DietaryRestriction: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionNullableRelationFilterSchema), import_zod.z.lazy(() => DietaryRestrictionWhereInputSchema)]).optional().nullable()
}).strict();
var IngredientOrderByWithRelationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  category: import_zod.z.lazy(() => SortOrderSchema).optional(),
  price: import_zod.z.lazy(() => SortOrderSchema).optional(),
  dietaryRestrictionId: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  recipeIngredients: import_zod.z.lazy(() => RecipeIngredientOrderByRelationAggregateInputSchema).optional(),
  inventoryItems: import_zod.z.lazy(() => InventoryItemOrderByRelationAggregateInputSchema).optional(),
  orderItems: import_zod.z.lazy(() => OrderItemOrderByRelationAggregateInputSchema).optional(),
  vendors: import_zod.z.lazy(() => VendorOrderByRelationAggregateInputSchema).optional(),
  WasteRecord: import_zod.z.lazy(() => WasteRecordOrderByRelationAggregateInputSchema).optional(),
  IngredientAllergen: import_zod.z.lazy(() => IngredientAllergenOrderByRelationAggregateInputSchema).optional(),
  SupplierPriceHistory: import_zod.z.lazy(() => SupplierPriceHistoryOrderByRelationAggregateInputSchema).optional(),
  DietaryRestriction: import_zod.z.lazy(() => DietaryRestrictionOrderByWithRelationInputSchema).optional()
}).strict();
var IngredientWhereUniqueInputSchema = import_zod.z.union([
  import_zod.z.object({
    id: import_zod.z.number().int(),
    name: import_zod.z.string()
  }),
  import_zod.z.object({
    id: import_zod.z.number().int()
  }),
  import_zod.z.object({
    name: import_zod.z.string()
  })
]).and(import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string().optional(),
  AND: import_zod.z.union([import_zod.z.lazy(() => IngredientWhereInputSchema), import_zod.z.lazy(() => IngredientWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => IngredientWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => IngredientWhereInputSchema), import_zod.z.lazy(() => IngredientWhereInputSchema).array()]).optional(),
  category: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  price: import_zod.z.union([import_zod.z.lazy(() => FloatFilterSchema), import_zod.z.number()]).optional(),
  dietaryRestrictionId: import_zod.z.union([import_zod.z.lazy(() => IntNullableFilterSchema), import_zod.z.number().int()]).optional().nullable(),
  recipeIngredients: import_zod.z.lazy(() => RecipeIngredientListRelationFilterSchema).optional(),
  inventoryItems: import_zod.z.lazy(() => InventoryItemListRelationFilterSchema).optional(),
  orderItems: import_zod.z.lazy(() => OrderItemListRelationFilterSchema).optional(),
  vendors: import_zod.z.lazy(() => VendorListRelationFilterSchema).optional(),
  WasteRecord: import_zod.z.lazy(() => WasteRecordListRelationFilterSchema).optional(),
  IngredientAllergen: import_zod.z.lazy(() => IngredientAllergenListRelationFilterSchema).optional(),
  SupplierPriceHistory: import_zod.z.lazy(() => SupplierPriceHistoryListRelationFilterSchema).optional(),
  DietaryRestriction: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionNullableRelationFilterSchema), import_zod.z.lazy(() => DietaryRestrictionWhereInputSchema)]).optional().nullable()
}).strict());
var IngredientOrderByWithAggregationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  category: import_zod.z.lazy(() => SortOrderSchema).optional(),
  price: import_zod.z.lazy(() => SortOrderSchema).optional(),
  dietaryRestrictionId: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  _count: import_zod.z.lazy(() => IngredientCountOrderByAggregateInputSchema).optional(),
  _avg: import_zod.z.lazy(() => IngredientAvgOrderByAggregateInputSchema).optional(),
  _max: import_zod.z.lazy(() => IngredientMaxOrderByAggregateInputSchema).optional(),
  _min: import_zod.z.lazy(() => IngredientMinOrderByAggregateInputSchema).optional(),
  _sum: import_zod.z.lazy(() => IngredientSumOrderByAggregateInputSchema).optional()
}).strict();
var IngredientScalarWhereWithAggregatesInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => IngredientScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => IngredientScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => IngredientScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => IngredientScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => IngredientScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  name: import_zod.z.union([import_zod.z.lazy(() => StringWithAggregatesFilterSchema), import_zod.z.string()]).optional(),
  category: import_zod.z.union([import_zod.z.lazy(() => StringWithAggregatesFilterSchema), import_zod.z.string()]).optional(),
  price: import_zod.z.union([import_zod.z.lazy(() => FloatWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  dietaryRestrictionId: import_zod.z.union([import_zod.z.lazy(() => IntNullableWithAggregatesFilterSchema), import_zod.z.number()]).optional().nullable()
}).strict();
var RecipeIngredientWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientWhereInputSchema), import_zod.z.lazy(() => RecipeIngredientWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => RecipeIngredientWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientWhereInputSchema), import_zod.z.lazy(() => RecipeIngredientWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  recipeId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  ingredientId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  quantity: import_zod.z.union([import_zod.z.lazy(() => FloatFilterSchema), import_zod.z.number()]).optional(),
  unit: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  joinAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  recipeVersionId: import_zod.z.union([import_zod.z.lazy(() => IntNullableFilterSchema), import_zod.z.number()]).optional().nullable(),
  recipe: import_zod.z.union([import_zod.z.lazy(() => RecipeRelationFilterSchema), import_zod.z.lazy(() => RecipeWhereInputSchema)]).optional(),
  ingredient: import_zod.z.union([import_zod.z.lazy(() => IngredientRelationFilterSchema), import_zod.z.lazy(() => IngredientWhereInputSchema)]).optional(),
  RecipeVersion: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionNullableRelationFilterSchema), import_zod.z.lazy(() => RecipeVersionWhereInputSchema)]).optional().nullable()
}).strict();
var RecipeIngredientOrderByWithRelationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  ingredientId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  quantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  unit: import_zod.z.lazy(() => SortOrderSchema).optional(),
  joinAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeVersionId: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  recipe: import_zod.z.lazy(() => RecipeOrderByWithRelationInputSchema).optional(),
  ingredient: import_zod.z.lazy(() => IngredientOrderByWithRelationInputSchema).optional(),
  RecipeVersion: import_zod.z.lazy(() => RecipeVersionOrderByWithRelationInputSchema).optional()
}).strict();
var RecipeIngredientWhereUniqueInputSchema = import_zod.z.union([
  import_zod.z.object({
    id: import_zod.z.number().int(),
    recipeId_ingredientId: import_zod.z.lazy(() => RecipeIngredientRecipeIdIngredientIdCompoundUniqueInputSchema)
  }),
  import_zod.z.object({
    id: import_zod.z.number().int()
  }),
  import_zod.z.object({
    recipeId_ingredientId: import_zod.z.lazy(() => RecipeIngredientRecipeIdIngredientIdCompoundUniqueInputSchema)
  })
]).and(import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  recipeId_ingredientId: import_zod.z.lazy(() => RecipeIngredientRecipeIdIngredientIdCompoundUniqueInputSchema).optional(),
  AND: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientWhereInputSchema), import_zod.z.lazy(() => RecipeIngredientWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => RecipeIngredientWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientWhereInputSchema), import_zod.z.lazy(() => RecipeIngredientWhereInputSchema).array()]).optional(),
  recipeId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  ingredientId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  quantity: import_zod.z.union([import_zod.z.lazy(() => FloatFilterSchema), import_zod.z.number()]).optional(),
  unit: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  joinAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  recipeVersionId: import_zod.z.union([import_zod.z.lazy(() => IntNullableFilterSchema), import_zod.z.number().int()]).optional().nullable(),
  recipe: import_zod.z.union([import_zod.z.lazy(() => RecipeRelationFilterSchema), import_zod.z.lazy(() => RecipeWhereInputSchema)]).optional(),
  ingredient: import_zod.z.union([import_zod.z.lazy(() => IngredientRelationFilterSchema), import_zod.z.lazy(() => IngredientWhereInputSchema)]).optional(),
  RecipeVersion: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionNullableRelationFilterSchema), import_zod.z.lazy(() => RecipeVersionWhereInputSchema)]).optional().nullable()
}).strict());
var RecipeIngredientOrderByWithAggregationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  ingredientId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  quantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  unit: import_zod.z.lazy(() => SortOrderSchema).optional(),
  joinAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeVersionId: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  _count: import_zod.z.lazy(() => RecipeIngredientCountOrderByAggregateInputSchema).optional(),
  _avg: import_zod.z.lazy(() => RecipeIngredientAvgOrderByAggregateInputSchema).optional(),
  _max: import_zod.z.lazy(() => RecipeIngredientMaxOrderByAggregateInputSchema).optional(),
  _min: import_zod.z.lazy(() => RecipeIngredientMinOrderByAggregateInputSchema).optional(),
  _sum: import_zod.z.lazy(() => RecipeIngredientSumOrderByAggregateInputSchema).optional()
}).strict();
var RecipeIngredientScalarWhereWithAggregatesInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => RecipeIngredientScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => RecipeIngredientScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => RecipeIngredientScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  recipeId: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  ingredientId: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  quantity: import_zod.z.union([import_zod.z.lazy(() => FloatWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  unit: import_zod.z.union([import_zod.z.lazy(() => StringWithAggregatesFilterSchema), import_zod.z.string()]).optional(),
  joinAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional(),
  recipeVersionId: import_zod.z.union([import_zod.z.lazy(() => IntNullableWithAggregatesFilterSchema), import_zod.z.number()]).optional().nullable()
}).strict();
var RecipeInstructionWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionWhereInputSchema), import_zod.z.lazy(() => RecipeInstructionWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => RecipeInstructionWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionWhereInputSchema), import_zod.z.lazy(() => RecipeInstructionWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  recipeId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  stepNumber: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  instruction: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  recipeVersionId: import_zod.z.union([import_zod.z.lazy(() => IntNullableFilterSchema), import_zod.z.number()]).optional().nullable(),
  recipe: import_zod.z.union([import_zod.z.lazy(() => RecipeRelationFilterSchema), import_zod.z.lazy(() => RecipeWhereInputSchema)]).optional(),
  RecipeVersion: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionNullableRelationFilterSchema), import_zod.z.lazy(() => RecipeVersionWhereInputSchema)]).optional().nullable()
}).strict();
var RecipeInstructionOrderByWithRelationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  stepNumber: import_zod.z.lazy(() => SortOrderSchema).optional(),
  instruction: import_zod.z.lazy(() => SortOrderSchema).optional(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  recipeVersionId: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  recipe: import_zod.z.lazy(() => RecipeOrderByWithRelationInputSchema).optional(),
  RecipeVersion: import_zod.z.lazy(() => RecipeVersionOrderByWithRelationInputSchema).optional()
}).strict();
var RecipeInstructionWhereUniqueInputSchema = import_zod.z.union([
  import_zod.z.object({
    id: import_zod.z.number().int(),
    recipeId_stepNumber: import_zod.z.lazy(() => RecipeInstructionRecipeIdStepNumberCompoundUniqueInputSchema)
  }),
  import_zod.z.object({
    id: import_zod.z.number().int()
  }),
  import_zod.z.object({
    recipeId_stepNumber: import_zod.z.lazy(() => RecipeInstructionRecipeIdStepNumberCompoundUniqueInputSchema)
  })
]).and(import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  recipeId_stepNumber: import_zod.z.lazy(() => RecipeInstructionRecipeIdStepNumberCompoundUniqueInputSchema).optional(),
  AND: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionWhereInputSchema), import_zod.z.lazy(() => RecipeInstructionWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => RecipeInstructionWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionWhereInputSchema), import_zod.z.lazy(() => RecipeInstructionWhereInputSchema).array()]).optional(),
  recipeId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  stepNumber: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  instruction: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  recipeVersionId: import_zod.z.union([import_zod.z.lazy(() => IntNullableFilterSchema), import_zod.z.number().int()]).optional().nullable(),
  recipe: import_zod.z.union([import_zod.z.lazy(() => RecipeRelationFilterSchema), import_zod.z.lazy(() => RecipeWhereInputSchema)]).optional(),
  RecipeVersion: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionNullableRelationFilterSchema), import_zod.z.lazy(() => RecipeVersionWhereInputSchema)]).optional().nullable()
}).strict());
var RecipeInstructionOrderByWithAggregationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  stepNumber: import_zod.z.lazy(() => SortOrderSchema).optional(),
  instruction: import_zod.z.lazy(() => SortOrderSchema).optional(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  recipeVersionId: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  _count: import_zod.z.lazy(() => RecipeInstructionCountOrderByAggregateInputSchema).optional(),
  _avg: import_zod.z.lazy(() => RecipeInstructionAvgOrderByAggregateInputSchema).optional(),
  _max: import_zod.z.lazy(() => RecipeInstructionMaxOrderByAggregateInputSchema).optional(),
  _min: import_zod.z.lazy(() => RecipeInstructionMinOrderByAggregateInputSchema).optional(),
  _sum: import_zod.z.lazy(() => RecipeInstructionSumOrderByAggregateInputSchema).optional()
}).strict();
var RecipeInstructionScalarWhereWithAggregatesInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => RecipeInstructionScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => RecipeInstructionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => RecipeInstructionScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  recipeId: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  stepNumber: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  instruction: import_zod.z.union([import_zod.z.lazy(() => StringWithAggregatesFilterSchema), import_zod.z.string()]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => StringNullableWithAggregatesFilterSchema), import_zod.z.string()]).optional().nullable(),
  recipeVersionId: import_zod.z.union([import_zod.z.lazy(() => IntNullableWithAggregatesFilterSchema), import_zod.z.number()]).optional().nullable()
}).strict();
var InventoryWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => InventoryWhereInputSchema), import_zod.z.lazy(() => InventoryWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => InventoryWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => InventoryWhereInputSchema), import_zod.z.lazy(() => InventoryWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  restaurant: import_zod.z.union([import_zod.z.lazy(() => RestaurantRelationFilterSchema), import_zod.z.lazy(() => RestaurantWhereInputSchema)]).optional(),
  items: import_zod.z.lazy(() => InventoryItemListRelationFilterSchema).optional()
}).strict();
var InventoryOrderByWithRelationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantOrderByWithRelationInputSchema).optional(),
  items: import_zod.z.lazy(() => InventoryItemOrderByRelationAggregateInputSchema).optional()
}).strict();
var InventoryWhereUniqueInputSchema = import_zod.z.union([
  import_zod.z.object({
    id: import_zod.z.number().int(),
    restaurantId: import_zod.z.number().int()
  }),
  import_zod.z.object({
    id: import_zod.z.number().int()
  }),
  import_zod.z.object({
    restaurantId: import_zod.z.number().int()
  })
]).and(import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  restaurantId: import_zod.z.number().int().optional(),
  AND: import_zod.z.union([import_zod.z.lazy(() => InventoryWhereInputSchema), import_zod.z.lazy(() => InventoryWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => InventoryWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => InventoryWhereInputSchema), import_zod.z.lazy(() => InventoryWhereInputSchema).array()]).optional(),
  restaurant: import_zod.z.union([import_zod.z.lazy(() => RestaurantRelationFilterSchema), import_zod.z.lazy(() => RestaurantWhereInputSchema)]).optional(),
  items: import_zod.z.lazy(() => InventoryItemListRelationFilterSchema).optional()
}).strict());
var InventoryOrderByWithAggregationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  _count: import_zod.z.lazy(() => InventoryCountOrderByAggregateInputSchema).optional(),
  _avg: import_zod.z.lazy(() => InventoryAvgOrderByAggregateInputSchema).optional(),
  _max: import_zod.z.lazy(() => InventoryMaxOrderByAggregateInputSchema).optional(),
  _min: import_zod.z.lazy(() => InventoryMinOrderByAggregateInputSchema).optional(),
  _sum: import_zod.z.lazy(() => InventorySumOrderByAggregateInputSchema).optional()
}).strict();
var InventoryScalarWhereWithAggregatesInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => InventoryScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => InventoryScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => InventoryScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => InventoryScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => InventoryScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional()
}).strict();
var InventoryItemWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => InventoryItemWhereInputSchema), import_zod.z.lazy(() => InventoryItemWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => InventoryItemWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => InventoryItemWhereInputSchema), import_zod.z.lazy(() => InventoryItemWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  inventoryId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  ingredientId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  quantity: import_zod.z.union([import_zod.z.lazy(() => FloatFilterSchema), import_zod.z.number()]).optional(),
  unit: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  minQuantity: import_zod.z.union([import_zod.z.lazy(() => FloatFilterSchema), import_zod.z.number()]).optional(),
  restockThreshold: import_zod.z.union([import_zod.z.lazy(() => FloatFilterSchema), import_zod.z.number()]).optional(),
  lastUpdatedById: import_zod.z.union([import_zod.z.lazy(() => IntNullableFilterSchema), import_zod.z.number()]).optional().nullable(),
  lastUpdated: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  inventory: import_zod.z.union([import_zod.z.lazy(() => InventoryRelationFilterSchema), import_zod.z.lazy(() => InventoryWhereInputSchema)]).optional(),
  ingredient: import_zod.z.union([import_zod.z.lazy(() => IngredientRelationFilterSchema), import_zod.z.lazy(() => IngredientWhereInputSchema)]).optional(),
  lastUpdatedBy: import_zod.z.union([import_zod.z.lazy(() => UserNullableRelationFilterSchema), import_zod.z.lazy(() => UserWhereInputSchema)]).optional().nullable(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalListRelationFilterSchema).optional()
}).strict();
var InventoryItemOrderByWithRelationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  inventoryId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  ingredientId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  quantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  unit: import_zod.z.lazy(() => SortOrderSchema).optional(),
  minQuantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restockThreshold: import_zod.z.lazy(() => SortOrderSchema).optional(),
  lastUpdatedById: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  lastUpdated: import_zod.z.lazy(() => SortOrderSchema).optional(),
  inventory: import_zod.z.lazy(() => InventoryOrderByWithRelationInputSchema).optional(),
  ingredient: import_zod.z.lazy(() => IngredientOrderByWithRelationInputSchema).optional(),
  lastUpdatedBy: import_zod.z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalOrderByRelationAggregateInputSchema).optional()
}).strict();
var InventoryItemWhereUniqueInputSchema = import_zod.z.object({
  id: import_zod.z.number().int()
}).and(import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  AND: import_zod.z.union([import_zod.z.lazy(() => InventoryItemWhereInputSchema), import_zod.z.lazy(() => InventoryItemWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => InventoryItemWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => InventoryItemWhereInputSchema), import_zod.z.lazy(() => InventoryItemWhereInputSchema).array()]).optional(),
  inventoryId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  ingredientId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  quantity: import_zod.z.union([import_zod.z.lazy(() => FloatFilterSchema), import_zod.z.number()]).optional(),
  unit: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  minQuantity: import_zod.z.union([import_zod.z.lazy(() => FloatFilterSchema), import_zod.z.number()]).optional(),
  restockThreshold: import_zod.z.union([import_zod.z.lazy(() => FloatFilterSchema), import_zod.z.number()]).optional(),
  lastUpdatedById: import_zod.z.union([import_zod.z.lazy(() => IntNullableFilterSchema), import_zod.z.number().int()]).optional().nullable(),
  lastUpdated: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  inventory: import_zod.z.union([import_zod.z.lazy(() => InventoryRelationFilterSchema), import_zod.z.lazy(() => InventoryWhereInputSchema)]).optional(),
  ingredient: import_zod.z.union([import_zod.z.lazy(() => IngredientRelationFilterSchema), import_zod.z.lazy(() => IngredientWhereInputSchema)]).optional(),
  lastUpdatedBy: import_zod.z.union([import_zod.z.lazy(() => UserNullableRelationFilterSchema), import_zod.z.lazy(() => UserWhereInputSchema)]).optional().nullable(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalListRelationFilterSchema).optional()
}).strict());
var InventoryItemOrderByWithAggregationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  inventoryId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  ingredientId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  quantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  unit: import_zod.z.lazy(() => SortOrderSchema).optional(),
  minQuantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restockThreshold: import_zod.z.lazy(() => SortOrderSchema).optional(),
  lastUpdatedById: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  lastUpdated: import_zod.z.lazy(() => SortOrderSchema).optional(),
  _count: import_zod.z.lazy(() => InventoryItemCountOrderByAggregateInputSchema).optional(),
  _avg: import_zod.z.lazy(() => InventoryItemAvgOrderByAggregateInputSchema).optional(),
  _max: import_zod.z.lazy(() => InventoryItemMaxOrderByAggregateInputSchema).optional(),
  _min: import_zod.z.lazy(() => InventoryItemMinOrderByAggregateInputSchema).optional(),
  _sum: import_zod.z.lazy(() => InventoryItemSumOrderByAggregateInputSchema).optional()
}).strict();
var InventoryItemScalarWhereWithAggregatesInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => InventoryItemScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => InventoryItemScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => InventoryItemScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => InventoryItemScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => InventoryItemScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  inventoryId: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  ingredientId: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  quantity: import_zod.z.union([import_zod.z.lazy(() => FloatWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  unit: import_zod.z.union([import_zod.z.lazy(() => StringWithAggregatesFilterSchema), import_zod.z.string()]).optional(),
  minQuantity: import_zod.z.union([import_zod.z.lazy(() => FloatWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  restockThreshold: import_zod.z.union([import_zod.z.lazy(() => FloatWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  lastUpdatedById: import_zod.z.union([import_zod.z.lazy(() => IntNullableWithAggregatesFilterSchema), import_zod.z.number()]).optional().nullable(),
  lastUpdated: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var OrderWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => OrderWhereInputSchema), import_zod.z.lazy(() => OrderWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => OrderWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => OrderWhereInputSchema), import_zod.z.lazy(() => OrderWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  vendorId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => EnumOrderStatusFilterSchema), import_zod.z.lazy(() => OrderStatusSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  restaurant: import_zod.z.union([import_zod.z.lazy(() => RestaurantRelationFilterSchema), import_zod.z.lazy(() => RestaurantWhereInputSchema)]).optional(),
  vendor: import_zod.z.union([import_zod.z.lazy(() => VendorRelationFilterSchema), import_zod.z.lazy(() => VendorWhereInputSchema)]).optional(),
  items: import_zod.z.lazy(() => OrderItemListRelationFilterSchema).optional()
}).strict();
var OrderOrderByWithRelationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  vendorId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  status: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantOrderByWithRelationInputSchema).optional(),
  vendor: import_zod.z.lazy(() => VendorOrderByWithRelationInputSchema).optional(),
  items: import_zod.z.lazy(() => OrderItemOrderByRelationAggregateInputSchema).optional()
}).strict();
var OrderWhereUniqueInputSchema = import_zod.z.object({
  id: import_zod.z.number().int()
}).and(import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  AND: import_zod.z.union([import_zod.z.lazy(() => OrderWhereInputSchema), import_zod.z.lazy(() => OrderWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => OrderWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => OrderWhereInputSchema), import_zod.z.lazy(() => OrderWhereInputSchema).array()]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  vendorId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => EnumOrderStatusFilterSchema), import_zod.z.lazy(() => OrderStatusSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  restaurant: import_zod.z.union([import_zod.z.lazy(() => RestaurantRelationFilterSchema), import_zod.z.lazy(() => RestaurantWhereInputSchema)]).optional(),
  vendor: import_zod.z.union([import_zod.z.lazy(() => VendorRelationFilterSchema), import_zod.z.lazy(() => VendorWhereInputSchema)]).optional(),
  items: import_zod.z.lazy(() => OrderItemListRelationFilterSchema).optional()
}).strict());
var OrderOrderByWithAggregationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  vendorId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  status: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  _count: import_zod.z.lazy(() => OrderCountOrderByAggregateInputSchema).optional(),
  _avg: import_zod.z.lazy(() => OrderAvgOrderByAggregateInputSchema).optional(),
  _max: import_zod.z.lazy(() => OrderMaxOrderByAggregateInputSchema).optional(),
  _min: import_zod.z.lazy(() => OrderMinOrderByAggregateInputSchema).optional(),
  _sum: import_zod.z.lazy(() => OrderSumOrderByAggregateInputSchema).optional()
}).strict();
var OrderScalarWhereWithAggregatesInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => OrderScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => OrderScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => OrderScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => OrderScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => OrderScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  vendorId: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => EnumOrderStatusWithAggregatesFilterSchema), import_zod.z.lazy(() => OrderStatusSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var OrderItemWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => OrderItemWhereInputSchema), import_zod.z.lazy(() => OrderItemWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => OrderItemWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => OrderItemWhereInputSchema), import_zod.z.lazy(() => OrderItemWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  orderId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  ingredientId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  quantity: import_zod.z.union([import_zod.z.lazy(() => FloatFilterSchema), import_zod.z.number()]).optional(),
  unit: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  price: import_zod.z.union([import_zod.z.lazy(() => FloatFilterSchema), import_zod.z.number()]).optional(),
  order: import_zod.z.union([import_zod.z.lazy(() => OrderRelationFilterSchema), import_zod.z.lazy(() => OrderWhereInputSchema)]).optional(),
  ingredient: import_zod.z.union([import_zod.z.lazy(() => IngredientRelationFilterSchema), import_zod.z.lazy(() => IngredientWhereInputSchema)]).optional()
}).strict();
var OrderItemOrderByWithRelationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  orderId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  ingredientId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  quantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  unit: import_zod.z.lazy(() => SortOrderSchema).optional(),
  price: import_zod.z.lazy(() => SortOrderSchema).optional(),
  order: import_zod.z.lazy(() => OrderOrderByWithRelationInputSchema).optional(),
  ingredient: import_zod.z.lazy(() => IngredientOrderByWithRelationInputSchema).optional()
}).strict();
var OrderItemWhereUniqueInputSchema = import_zod.z.object({
  id: import_zod.z.number().int()
}).and(import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  AND: import_zod.z.union([import_zod.z.lazy(() => OrderItemWhereInputSchema), import_zod.z.lazy(() => OrderItemWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => OrderItemWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => OrderItemWhereInputSchema), import_zod.z.lazy(() => OrderItemWhereInputSchema).array()]).optional(),
  orderId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  ingredientId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  quantity: import_zod.z.union([import_zod.z.lazy(() => FloatFilterSchema), import_zod.z.number()]).optional(),
  unit: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  price: import_zod.z.union([import_zod.z.lazy(() => FloatFilterSchema), import_zod.z.number()]).optional(),
  order: import_zod.z.union([import_zod.z.lazy(() => OrderRelationFilterSchema), import_zod.z.lazy(() => OrderWhereInputSchema)]).optional(),
  ingredient: import_zod.z.union([import_zod.z.lazy(() => IngredientRelationFilterSchema), import_zod.z.lazy(() => IngredientWhereInputSchema)]).optional()
}).strict());
var OrderItemOrderByWithAggregationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  orderId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  ingredientId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  quantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  unit: import_zod.z.lazy(() => SortOrderSchema).optional(),
  price: import_zod.z.lazy(() => SortOrderSchema).optional(),
  _count: import_zod.z.lazy(() => OrderItemCountOrderByAggregateInputSchema).optional(),
  _avg: import_zod.z.lazy(() => OrderItemAvgOrderByAggregateInputSchema).optional(),
  _max: import_zod.z.lazy(() => OrderItemMaxOrderByAggregateInputSchema).optional(),
  _min: import_zod.z.lazy(() => OrderItemMinOrderByAggregateInputSchema).optional(),
  _sum: import_zod.z.lazy(() => OrderItemSumOrderByAggregateInputSchema).optional()
}).strict();
var OrderItemScalarWhereWithAggregatesInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => OrderItemScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => OrderItemScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => OrderItemScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => OrderItemScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => OrderItemScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  orderId: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  ingredientId: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  quantity: import_zod.z.union([import_zod.z.lazy(() => FloatWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  unit: import_zod.z.union([import_zod.z.lazy(() => StringWithAggregatesFilterSchema), import_zod.z.string()]).optional(),
  price: import_zod.z.union([import_zod.z.lazy(() => FloatWithAggregatesFilterSchema), import_zod.z.number()]).optional()
}).strict();
var VendorWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => VendorWhereInputSchema), import_zod.z.lazy(() => VendorWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => VendorWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => VendorWhereInputSchema), import_zod.z.lazy(() => VendorWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  name: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  contact: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  email: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  phone: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  orders: import_zod.z.lazy(() => OrderListRelationFilterSchema).optional(),
  ingredients: import_zod.z.lazy(() => IngredientListRelationFilterSchema).optional(),
  supplierPriceHistory: import_zod.z.lazy(() => SupplierPriceHistoryListRelationFilterSchema).optional()
}).strict();
var VendorOrderByWithRelationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  contact: import_zod.z.lazy(() => SortOrderSchema).optional(),
  email: import_zod.z.lazy(() => SortOrderSchema).optional(),
  phone: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  orders: import_zod.z.lazy(() => OrderOrderByRelationAggregateInputSchema).optional(),
  ingredients: import_zod.z.lazy(() => IngredientOrderByRelationAggregateInputSchema).optional(),
  supplierPriceHistory: import_zod.z.lazy(() => SupplierPriceHistoryOrderByRelationAggregateInputSchema).optional()
}).strict();
var VendorWhereUniqueInputSchema = import_zod.z.union([
  import_zod.z.object({
    id: import_zod.z.number().int(),
    name: import_zod.z.string(),
    email: import_zod.z.string()
  }),
  import_zod.z.object({
    id: import_zod.z.number().int(),
    name: import_zod.z.string()
  }),
  import_zod.z.object({
    id: import_zod.z.number().int(),
    email: import_zod.z.string()
  }),
  import_zod.z.object({
    id: import_zod.z.number().int()
  }),
  import_zod.z.object({
    name: import_zod.z.string(),
    email: import_zod.z.string()
  }),
  import_zod.z.object({
    name: import_zod.z.string()
  }),
  import_zod.z.object({
    email: import_zod.z.string()
  })
]).and(import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string().optional(),
  email: import_zod.z.string().optional(),
  AND: import_zod.z.union([import_zod.z.lazy(() => VendorWhereInputSchema), import_zod.z.lazy(() => VendorWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => VendorWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => VendorWhereInputSchema), import_zod.z.lazy(() => VendorWhereInputSchema).array()]).optional(),
  contact: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  phone: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  orders: import_zod.z.lazy(() => OrderListRelationFilterSchema).optional(),
  ingredients: import_zod.z.lazy(() => IngredientListRelationFilterSchema).optional(),
  supplierPriceHistory: import_zod.z.lazy(() => SupplierPriceHistoryListRelationFilterSchema).optional()
}).strict());
var VendorOrderByWithAggregationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  contact: import_zod.z.lazy(() => SortOrderSchema).optional(),
  email: import_zod.z.lazy(() => SortOrderSchema).optional(),
  phone: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  _count: import_zod.z.lazy(() => VendorCountOrderByAggregateInputSchema).optional(),
  _avg: import_zod.z.lazy(() => VendorAvgOrderByAggregateInputSchema).optional(),
  _max: import_zod.z.lazy(() => VendorMaxOrderByAggregateInputSchema).optional(),
  _min: import_zod.z.lazy(() => VendorMinOrderByAggregateInputSchema).optional(),
  _sum: import_zod.z.lazy(() => VendorSumOrderByAggregateInputSchema).optional()
}).strict();
var VendorScalarWhereWithAggregatesInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => VendorScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => VendorScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => VendorScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => VendorScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => VendorScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  name: import_zod.z.union([import_zod.z.lazy(() => StringWithAggregatesFilterSchema), import_zod.z.string()]).optional(),
  contact: import_zod.z.union([import_zod.z.lazy(() => StringWithAggregatesFilterSchema), import_zod.z.string()]).optional(),
  email: import_zod.z.union([import_zod.z.lazy(() => StringWithAggregatesFilterSchema), import_zod.z.string()]).optional(),
  phone: import_zod.z.union([import_zod.z.lazy(() => StringWithAggregatesFilterSchema), import_zod.z.string()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var ShiftWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => ShiftWhereInputSchema), import_zod.z.lazy(() => ShiftWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => ShiftWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => ShiftWhereInputSchema), import_zod.z.lazy(() => ShiftWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  userId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  startTime: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  endTime: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => EnumShiftStatusFilterSchema), import_zod.z.lazy(() => ShiftStatusSchema)]).optional(),
  user: import_zod.z.union([import_zod.z.lazy(() => UserRelationFilterSchema), import_zod.z.lazy(() => UserWhereInputSchema)]).optional(),
  ShiftTask: import_zod.z.lazy(() => ShiftTaskListRelationFilterSchema).optional()
}).strict();
var ShiftOrderByWithRelationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  userId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  startTime: import_zod.z.lazy(() => SortOrderSchema).optional(),
  endTime: import_zod.z.lazy(() => SortOrderSchema).optional(),
  status: import_zod.z.lazy(() => SortOrderSchema).optional(),
  user: import_zod.z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  ShiftTask: import_zod.z.lazy(() => ShiftTaskOrderByRelationAggregateInputSchema).optional()
}).strict();
var ShiftWhereUniqueInputSchema = import_zod.z.object({
  id: import_zod.z.number().int()
}).and(import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  AND: import_zod.z.union([import_zod.z.lazy(() => ShiftWhereInputSchema), import_zod.z.lazy(() => ShiftWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => ShiftWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => ShiftWhereInputSchema), import_zod.z.lazy(() => ShiftWhereInputSchema).array()]).optional(),
  userId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  startTime: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  endTime: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => EnumShiftStatusFilterSchema), import_zod.z.lazy(() => ShiftStatusSchema)]).optional(),
  user: import_zod.z.union([import_zod.z.lazy(() => UserRelationFilterSchema), import_zod.z.lazy(() => UserWhereInputSchema)]).optional(),
  ShiftTask: import_zod.z.lazy(() => ShiftTaskListRelationFilterSchema).optional()
}).strict());
var ShiftOrderByWithAggregationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  userId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  startTime: import_zod.z.lazy(() => SortOrderSchema).optional(),
  endTime: import_zod.z.lazy(() => SortOrderSchema).optional(),
  status: import_zod.z.lazy(() => SortOrderSchema).optional(),
  _count: import_zod.z.lazy(() => ShiftCountOrderByAggregateInputSchema).optional(),
  _avg: import_zod.z.lazy(() => ShiftAvgOrderByAggregateInputSchema).optional(),
  _max: import_zod.z.lazy(() => ShiftMaxOrderByAggregateInputSchema).optional(),
  _min: import_zod.z.lazy(() => ShiftMinOrderByAggregateInputSchema).optional(),
  _sum: import_zod.z.lazy(() => ShiftSumOrderByAggregateInputSchema).optional()
}).strict();
var ShiftScalarWhereWithAggregatesInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => ShiftScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => ShiftScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => ShiftScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => ShiftScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => ShiftScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  userId: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  startTime: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional(),
  endTime: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => EnumShiftStatusWithAggregatesFilterSchema), import_zod.z.lazy(() => ShiftStatusSchema)]).optional()
}).strict();
var PrepBoardWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => PrepBoardWhereInputSchema), import_zod.z.lazy(() => PrepBoardWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => PrepBoardWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => PrepBoardWhereInputSchema), import_zod.z.lazy(() => PrepBoardWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  name: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => EnumPrepStatusFilterSchema), import_zod.z.lazy(() => PrepStatusSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  recipes: import_zod.z.lazy(() => RecipeListRelationFilterSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemListRelationFilterSchema).optional()
}).strict();
var PrepBoardOrderByWithRelationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  status: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeOrderByRelationAggregateInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemOrderByRelationAggregateInputSchema).optional()
}).strict();
var PrepBoardWhereUniqueInputSchema = import_zod.z.object({
  id: import_zod.z.number().int()
}).and(import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  AND: import_zod.z.union([import_zod.z.lazy(() => PrepBoardWhereInputSchema), import_zod.z.lazy(() => PrepBoardWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => PrepBoardWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => PrepBoardWhereInputSchema), import_zod.z.lazy(() => PrepBoardWhereInputSchema).array()]).optional(),
  name: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => EnumPrepStatusFilterSchema), import_zod.z.lazy(() => PrepStatusSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  recipes: import_zod.z.lazy(() => RecipeListRelationFilterSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemListRelationFilterSchema).optional()
}).strict());
var PrepBoardOrderByWithAggregationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  status: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  _count: import_zod.z.lazy(() => PrepBoardCountOrderByAggregateInputSchema).optional(),
  _avg: import_zod.z.lazy(() => PrepBoardAvgOrderByAggregateInputSchema).optional(),
  _max: import_zod.z.lazy(() => PrepBoardMaxOrderByAggregateInputSchema).optional(),
  _min: import_zod.z.lazy(() => PrepBoardMinOrderByAggregateInputSchema).optional(),
  _sum: import_zod.z.lazy(() => PrepBoardSumOrderByAggregateInputSchema).optional()
}).strict();
var PrepBoardScalarWhereWithAggregatesInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => PrepBoardScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => PrepBoardScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => PrepBoardScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => PrepBoardScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => PrepBoardScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  name: import_zod.z.union([import_zod.z.lazy(() => StringWithAggregatesFilterSchema), import_zod.z.string()]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => EnumPrepStatusWithAggregatesFilterSchema), import_zod.z.lazy(() => PrepStatusSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var PrepItemWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => PrepItemWhereInputSchema), import_zod.z.lazy(() => PrepItemWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => PrepItemWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => PrepItemWhereInputSchema), import_zod.z.lazy(() => PrepItemWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  prepBoardId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  recipeId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  quantity: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => EnumPrepStatusFilterSchema), import_zod.z.lazy(() => PrepStatusSchema)]).optional(),
  assignedToId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  prepBoard: import_zod.z.union([import_zod.z.lazy(() => PrepBoardRelationFilterSchema), import_zod.z.lazy(() => PrepBoardWhereInputSchema)]).optional(),
  recipe: import_zod.z.union([import_zod.z.lazy(() => RecipeRelationFilterSchema), import_zod.z.lazy(() => RecipeWhereInputSchema)]).optional(),
  assignedTo: import_zod.z.union([import_zod.z.lazy(() => UserRelationFilterSchema), import_zod.z.lazy(() => UserWhereInputSchema)]).optional()
}).strict();
var PrepItemOrderByWithRelationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  prepBoardId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  quantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  status: import_zod.z.lazy(() => SortOrderSchema).optional(),
  assignedToId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  prepBoard: import_zod.z.lazy(() => PrepBoardOrderByWithRelationInputSchema).optional(),
  recipe: import_zod.z.lazy(() => RecipeOrderByWithRelationInputSchema).optional(),
  assignedTo: import_zod.z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();
var PrepItemWhereUniqueInputSchema = import_zod.z.object({
  id: import_zod.z.number().int()
}).and(import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  AND: import_zod.z.union([import_zod.z.lazy(() => PrepItemWhereInputSchema), import_zod.z.lazy(() => PrepItemWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => PrepItemWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => PrepItemWhereInputSchema), import_zod.z.lazy(() => PrepItemWhereInputSchema).array()]).optional(),
  prepBoardId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  recipeId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  quantity: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => EnumPrepStatusFilterSchema), import_zod.z.lazy(() => PrepStatusSchema)]).optional(),
  assignedToId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  prepBoard: import_zod.z.union([import_zod.z.lazy(() => PrepBoardRelationFilterSchema), import_zod.z.lazy(() => PrepBoardWhereInputSchema)]).optional(),
  recipe: import_zod.z.union([import_zod.z.lazy(() => RecipeRelationFilterSchema), import_zod.z.lazy(() => RecipeWhereInputSchema)]).optional(),
  assignedTo: import_zod.z.union([import_zod.z.lazy(() => UserRelationFilterSchema), import_zod.z.lazy(() => UserWhereInputSchema)]).optional()
}).strict());
var PrepItemOrderByWithAggregationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  prepBoardId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  quantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  status: import_zod.z.lazy(() => SortOrderSchema).optional(),
  assignedToId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  _count: import_zod.z.lazy(() => PrepItemCountOrderByAggregateInputSchema).optional(),
  _avg: import_zod.z.lazy(() => PrepItemAvgOrderByAggregateInputSchema).optional(),
  _max: import_zod.z.lazy(() => PrepItemMaxOrderByAggregateInputSchema).optional(),
  _min: import_zod.z.lazy(() => PrepItemMinOrderByAggregateInputSchema).optional(),
  _sum: import_zod.z.lazy(() => PrepItemSumOrderByAggregateInputSchema).optional()
}).strict();
var PrepItemScalarWhereWithAggregatesInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => PrepItemScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => PrepItemScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => PrepItemScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => PrepItemScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => PrepItemScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  prepBoardId: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  recipeId: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  quantity: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => EnumPrepStatusWithAggregatesFilterSchema), import_zod.z.lazy(() => PrepStatusSchema)]).optional(),
  assignedToId: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional()
}).strict();
var PasswordResetWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => PasswordResetWhereInputSchema), import_zod.z.lazy(() => PasswordResetWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => PasswordResetWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => PasswordResetWhereInputSchema), import_zod.z.lazy(() => PasswordResetWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  token: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  userId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  expiresAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  user: import_zod.z.union([import_zod.z.lazy(() => UserRelationFilterSchema), import_zod.z.lazy(() => UserWhereInputSchema)]).optional()
}).strict();
var PasswordResetOrderByWithRelationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  token: import_zod.z.lazy(() => SortOrderSchema).optional(),
  userId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  expiresAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  user: import_zod.z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();
var PasswordResetWhereUniqueInputSchema = import_zod.z.union([
  import_zod.z.object({
    id: import_zod.z.number().int(),
    token: import_zod.z.string()
  }),
  import_zod.z.object({
    id: import_zod.z.number().int()
  }),
  import_zod.z.object({
    token: import_zod.z.string()
  })
]).and(import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  token: import_zod.z.string().optional(),
  AND: import_zod.z.union([import_zod.z.lazy(() => PasswordResetWhereInputSchema), import_zod.z.lazy(() => PasswordResetWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => PasswordResetWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => PasswordResetWhereInputSchema), import_zod.z.lazy(() => PasswordResetWhereInputSchema).array()]).optional(),
  userId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  expiresAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  user: import_zod.z.union([import_zod.z.lazy(() => UserRelationFilterSchema), import_zod.z.lazy(() => UserWhereInputSchema)]).optional()
}).strict());
var PasswordResetOrderByWithAggregationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  token: import_zod.z.lazy(() => SortOrderSchema).optional(),
  userId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  expiresAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  _count: import_zod.z.lazy(() => PasswordResetCountOrderByAggregateInputSchema).optional(),
  _avg: import_zod.z.lazy(() => PasswordResetAvgOrderByAggregateInputSchema).optional(),
  _max: import_zod.z.lazy(() => PasswordResetMaxOrderByAggregateInputSchema).optional(),
  _min: import_zod.z.lazy(() => PasswordResetMinOrderByAggregateInputSchema).optional(),
  _sum: import_zod.z.lazy(() => PasswordResetSumOrderByAggregateInputSchema).optional()
}).strict();
var PasswordResetScalarWhereWithAggregatesInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => PasswordResetScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => PasswordResetScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => PasswordResetScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => PasswordResetScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => PasswordResetScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  token: import_zod.z.union([import_zod.z.lazy(() => StringWithAggregatesFilterSchema), import_zod.z.string()]).optional(),
  userId: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  expiresAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var MenuWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => MenuWhereInputSchema), import_zod.z.lazy(() => MenuWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => MenuWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => MenuWhereInputSchema), import_zod.z.lazy(() => MenuWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  name: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  restaurant: import_zod.z.union([import_zod.z.lazy(() => RestaurantRelationFilterSchema), import_zod.z.lazy(() => RestaurantWhereInputSchema)]).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemListRelationFilterSchema).optional(),
  MenuCategory: import_zod.z.lazy(() => MenuCategoryListRelationFilterSchema).optional()
}).strict();
var MenuOrderByWithRelationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantOrderByWithRelationInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemOrderByRelationAggregateInputSchema).optional(),
  MenuCategory: import_zod.z.lazy(() => MenuCategoryOrderByRelationAggregateInputSchema).optional()
}).strict();
var MenuWhereUniqueInputSchema = import_zod.z.object({
  id: import_zod.z.number().int()
}).and(import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  AND: import_zod.z.union([import_zod.z.lazy(() => MenuWhereInputSchema), import_zod.z.lazy(() => MenuWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => MenuWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => MenuWhereInputSchema), import_zod.z.lazy(() => MenuWhereInputSchema).array()]).optional(),
  name: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  restaurant: import_zod.z.union([import_zod.z.lazy(() => RestaurantRelationFilterSchema), import_zod.z.lazy(() => RestaurantWhereInputSchema)]).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemListRelationFilterSchema).optional(),
  MenuCategory: import_zod.z.lazy(() => MenuCategoryListRelationFilterSchema).optional()
}).strict());
var MenuOrderByWithAggregationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  _count: import_zod.z.lazy(() => MenuCountOrderByAggregateInputSchema).optional(),
  _avg: import_zod.z.lazy(() => MenuAvgOrderByAggregateInputSchema).optional(),
  _max: import_zod.z.lazy(() => MenuMaxOrderByAggregateInputSchema).optional(),
  _min: import_zod.z.lazy(() => MenuMinOrderByAggregateInputSchema).optional(),
  _sum: import_zod.z.lazy(() => MenuSumOrderByAggregateInputSchema).optional()
}).strict();
var MenuScalarWhereWithAggregatesInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => MenuScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => MenuScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => MenuScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => MenuScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => MenuScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  name: import_zod.z.union([import_zod.z.lazy(() => StringWithAggregatesFilterSchema), import_zod.z.string()]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var MenuItemRecipeWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeWhereInputSchema), import_zod.z.lazy(() => MenuItemRecipeWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => MenuItemRecipeWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeWhereInputSchema), import_zod.z.lazy(() => MenuItemRecipeWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  menuItemId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  recipeId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  joinAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  menuItem: import_zod.z.union([import_zod.z.lazy(() => MenuItemRelationFilterSchema), import_zod.z.lazy(() => MenuItemWhereInputSchema)]).optional(),
  recipe: import_zod.z.union([import_zod.z.lazy(() => RecipeRelationFilterSchema), import_zod.z.lazy(() => RecipeWhereInputSchema)]).optional()
}).strict();
var MenuItemRecipeOrderByWithRelationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  menuItemId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  joinAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  menuItem: import_zod.z.lazy(() => MenuItemOrderByWithRelationInputSchema).optional(),
  recipe: import_zod.z.lazy(() => RecipeOrderByWithRelationInputSchema).optional()
}).strict();
var MenuItemRecipeWhereUniqueInputSchema = import_zod.z.union([
  import_zod.z.object({
    id: import_zod.z.number().int(),
    menuItemId_recipeId: import_zod.z.lazy(() => MenuItemRecipeMenuItemIdRecipeIdCompoundUniqueInputSchema)
  }),
  import_zod.z.object({
    id: import_zod.z.number().int()
  }),
  import_zod.z.object({
    menuItemId_recipeId: import_zod.z.lazy(() => MenuItemRecipeMenuItemIdRecipeIdCompoundUniqueInputSchema)
  })
]).and(import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  menuItemId_recipeId: import_zod.z.lazy(() => MenuItemRecipeMenuItemIdRecipeIdCompoundUniqueInputSchema).optional(),
  AND: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeWhereInputSchema), import_zod.z.lazy(() => MenuItemRecipeWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => MenuItemRecipeWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeWhereInputSchema), import_zod.z.lazy(() => MenuItemRecipeWhereInputSchema).array()]).optional(),
  menuItemId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  recipeId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  joinAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  menuItem: import_zod.z.union([import_zod.z.lazy(() => MenuItemRelationFilterSchema), import_zod.z.lazy(() => MenuItemWhereInputSchema)]).optional(),
  recipe: import_zod.z.union([import_zod.z.lazy(() => RecipeRelationFilterSchema), import_zod.z.lazy(() => RecipeWhereInputSchema)]).optional()
}).strict());
var MenuItemRecipeOrderByWithAggregationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  menuItemId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  joinAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  _count: import_zod.z.lazy(() => MenuItemRecipeCountOrderByAggregateInputSchema).optional(),
  _avg: import_zod.z.lazy(() => MenuItemRecipeAvgOrderByAggregateInputSchema).optional(),
  _max: import_zod.z.lazy(() => MenuItemRecipeMaxOrderByAggregateInputSchema).optional(),
  _min: import_zod.z.lazy(() => MenuItemRecipeMinOrderByAggregateInputSchema).optional(),
  _sum: import_zod.z.lazy(() => MenuItemRecipeSumOrderByAggregateInputSchema).optional()
}).strict();
var MenuItemRecipeScalarWhereWithAggregatesInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => MenuItemRecipeScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => MenuItemRecipeScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => MenuItemRecipeScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  menuItemId: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  recipeId: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  joinAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var MenuItemWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => MenuItemWhereInputSchema), import_zod.z.lazy(() => MenuItemWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => MenuItemWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => MenuItemWhereInputSchema), import_zod.z.lazy(() => MenuItemWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  name: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  description: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  price: import_zod.z.union([import_zod.z.lazy(() => FloatFilterSchema), import_zod.z.number()]).optional(),
  foodCost: import_zod.z.union([import_zod.z.lazy(() => FloatFilterSchema), import_zod.z.number()]).optional(),
  recipeIds: import_zod.z.lazy(() => IntNullableListFilterSchema).optional(),
  recipeServingsAmount: import_zod.z.lazy(() => FloatNullableListFilterSchema).optional(),
  recipeServingsCost: import_zod.z.lazy(() => FloatNullableListFilterSchema).optional(),
  allergens: import_zod.z.lazy(() => StringNullableListFilterSchema).optional(),
  nutritionalInfoId: import_zod.z.union([import_zod.z.lazy(() => IntNullableFilterSchema), import_zod.z.number()]).optional().nullable(),
  menuId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  categoryId: import_zod.z.union([import_zod.z.lazy(() => IntNullableFilterSchema), import_zod.z.number()]).optional().nullable(),
  nutritionalInfo: import_zod.z.union([import_zod.z.lazy(() => NutritionalInfoNullableRelationFilterSchema), import_zod.z.lazy(() => NutritionalInfoWhereInputSchema)]).optional().nullable(),
  menu: import_zod.z.union([import_zod.z.lazy(() => MenuRelationFilterSchema), import_zod.z.lazy(() => MenuWhereInputSchema)]).optional(),
  recipes: import_zod.z.lazy(() => RecipeListRelationFilterSchema).optional(),
  menuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeListRelationFilterSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsListRelationFilterSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemListRelationFilterSchema).optional(),
  nutritionalRecommendation: import_zod.z.lazy(() => NutritionalRecommendationListRelationFilterSchema).optional(),
  category: import_zod.z.union([import_zod.z.lazy(() => MenuCategoryNullableRelationFilterSchema), import_zod.z.lazy(() => MenuCategoryWhereInputSchema)]).optional().nullable(),
  feedback: import_zod.z.lazy(() => CustomerFeedbackListRelationFilterSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionListRelationFilterSchema).optional()
}).strict();
var MenuItemOrderByWithRelationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  description: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  price: import_zod.z.lazy(() => SortOrderSchema).optional(),
  foodCost: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeIds: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeServingsAmount: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeServingsCost: import_zod.z.lazy(() => SortOrderSchema).optional(),
  allergens: import_zod.z.lazy(() => SortOrderSchema).optional(),
  nutritionalInfoId: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  menuId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  categoryId: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  nutritionalInfo: import_zod.z.lazy(() => NutritionalInfoOrderByWithRelationInputSchema).optional(),
  menu: import_zod.z.lazy(() => MenuOrderByWithRelationInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeOrderByRelationAggregateInputSchema).optional(),
  menuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeOrderByRelationAggregateInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsOrderByRelationAggregateInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemOrderByRelationAggregateInputSchema).optional(),
  nutritionalRecommendation: import_zod.z.lazy(() => NutritionalRecommendationOrderByRelationAggregateInputSchema).optional(),
  category: import_zod.z.lazy(() => MenuCategoryOrderByWithRelationInputSchema).optional(),
  feedback: import_zod.z.lazy(() => CustomerFeedbackOrderByRelationAggregateInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionOrderByRelationAggregateInputSchema).optional()
}).strict();
var MenuItemWhereUniqueInputSchema = import_zod.z.union([
  import_zod.z.object({
    id: import_zod.z.number().int(),
    nutritionalInfoId: import_zod.z.number().int()
  }),
  import_zod.z.object({
    id: import_zod.z.number().int()
  }),
  import_zod.z.object({
    nutritionalInfoId: import_zod.z.number().int()
  })
]).and(import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  nutritionalInfoId: import_zod.z.number().int().optional(),
  AND: import_zod.z.union([import_zod.z.lazy(() => MenuItemWhereInputSchema), import_zod.z.lazy(() => MenuItemWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => MenuItemWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => MenuItemWhereInputSchema), import_zod.z.lazy(() => MenuItemWhereInputSchema).array()]).optional(),
  name: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  description: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  price: import_zod.z.union([import_zod.z.lazy(() => FloatFilterSchema), import_zod.z.number()]).optional(),
  foodCost: import_zod.z.union([import_zod.z.lazy(() => FloatFilterSchema), import_zod.z.number()]).optional(),
  recipeIds: import_zod.z.lazy(() => IntNullableListFilterSchema).optional(),
  recipeServingsAmount: import_zod.z.lazy(() => FloatNullableListFilterSchema).optional(),
  recipeServingsCost: import_zod.z.lazy(() => FloatNullableListFilterSchema).optional(),
  allergens: import_zod.z.lazy(() => StringNullableListFilterSchema).optional(),
  menuId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  categoryId: import_zod.z.union([import_zod.z.lazy(() => IntNullableFilterSchema), import_zod.z.number().int()]).optional().nullable(),
  nutritionalInfo: import_zod.z.union([import_zod.z.lazy(() => NutritionalInfoNullableRelationFilterSchema), import_zod.z.lazy(() => NutritionalInfoWhereInputSchema)]).optional().nullable(),
  menu: import_zod.z.union([import_zod.z.lazy(() => MenuRelationFilterSchema), import_zod.z.lazy(() => MenuWhereInputSchema)]).optional(),
  recipes: import_zod.z.lazy(() => RecipeListRelationFilterSchema).optional(),
  menuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeListRelationFilterSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsListRelationFilterSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemListRelationFilterSchema).optional(),
  nutritionalRecommendation: import_zod.z.lazy(() => NutritionalRecommendationListRelationFilterSchema).optional(),
  category: import_zod.z.union([import_zod.z.lazy(() => MenuCategoryNullableRelationFilterSchema), import_zod.z.lazy(() => MenuCategoryWhereInputSchema)]).optional().nullable(),
  feedback: import_zod.z.lazy(() => CustomerFeedbackListRelationFilterSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionListRelationFilterSchema).optional()
}).strict());
var MenuItemOrderByWithAggregationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  description: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  price: import_zod.z.lazy(() => SortOrderSchema).optional(),
  foodCost: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeIds: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeServingsAmount: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeServingsCost: import_zod.z.lazy(() => SortOrderSchema).optional(),
  allergens: import_zod.z.lazy(() => SortOrderSchema).optional(),
  nutritionalInfoId: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  menuId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  categoryId: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  _count: import_zod.z.lazy(() => MenuItemCountOrderByAggregateInputSchema).optional(),
  _avg: import_zod.z.lazy(() => MenuItemAvgOrderByAggregateInputSchema).optional(),
  _max: import_zod.z.lazy(() => MenuItemMaxOrderByAggregateInputSchema).optional(),
  _min: import_zod.z.lazy(() => MenuItemMinOrderByAggregateInputSchema).optional(),
  _sum: import_zod.z.lazy(() => MenuItemSumOrderByAggregateInputSchema).optional()
}).strict();
var MenuItemScalarWhereWithAggregatesInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => MenuItemScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => MenuItemScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => MenuItemScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => MenuItemScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => MenuItemScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  name: import_zod.z.union([import_zod.z.lazy(() => StringWithAggregatesFilterSchema), import_zod.z.string()]).optional(),
  description: import_zod.z.union([import_zod.z.lazy(() => StringNullableWithAggregatesFilterSchema), import_zod.z.string()]).optional().nullable(),
  price: import_zod.z.union([import_zod.z.lazy(() => FloatWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  foodCost: import_zod.z.union([import_zod.z.lazy(() => FloatWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  recipeIds: import_zod.z.lazy(() => IntNullableListFilterSchema).optional(),
  recipeServingsAmount: import_zod.z.lazy(() => FloatNullableListFilterSchema).optional(),
  recipeServingsCost: import_zod.z.lazy(() => FloatNullableListFilterSchema).optional(),
  allergens: import_zod.z.lazy(() => StringNullableListFilterSchema).optional(),
  nutritionalInfoId: import_zod.z.union([import_zod.z.lazy(() => IntNullableWithAggregatesFilterSchema), import_zod.z.number()]).optional().nullable(),
  menuId: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional(),
  categoryId: import_zod.z.union([import_zod.z.lazy(() => IntNullableWithAggregatesFilterSchema), import_zod.z.number()]).optional().nullable()
}).strict();
var NutritionalInfoWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => NutritionalInfoWhereInputSchema), import_zod.z.lazy(() => NutritionalInfoWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => NutritionalInfoWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => NutritionalInfoWhereInputSchema), import_zod.z.lazy(() => NutritionalInfoWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  menuItemId: import_zod.z.union([import_zod.z.lazy(() => IntNullableFilterSchema), import_zod.z.number()]).optional().nullable(),
  calories: import_zod.z.union([import_zod.z.lazy(() => FloatFilterSchema), import_zod.z.number()]).optional(),
  fat: import_zod.z.union([import_zod.z.lazy(() => FloatFilterSchema), import_zod.z.number()]).optional(),
  saturatedFat: import_zod.z.union([import_zod.z.lazy(() => FloatFilterSchema), import_zod.z.number()]).optional(),
  transFat: import_zod.z.union([import_zod.z.lazy(() => FloatFilterSchema), import_zod.z.number()]).optional(),
  cholesterol: import_zod.z.union([import_zod.z.lazy(() => FloatFilterSchema), import_zod.z.number()]).optional(),
  sodium: import_zod.z.union([import_zod.z.lazy(() => FloatFilterSchema), import_zod.z.number()]).optional(),
  carbohydrates: import_zod.z.union([import_zod.z.lazy(() => FloatFilterSchema), import_zod.z.number()]).optional(),
  fiber: import_zod.z.union([import_zod.z.lazy(() => FloatFilterSchema), import_zod.z.number()]).optional(),
  sugar: import_zod.z.union([import_zod.z.lazy(() => FloatFilterSchema), import_zod.z.number()]).optional(),
  protein: import_zod.z.union([import_zod.z.lazy(() => FloatFilterSchema), import_zod.z.number()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  menuItem: import_zod.z.union([import_zod.z.lazy(() => MenuItemNullableRelationFilterSchema), import_zod.z.lazy(() => MenuItemWhereInputSchema)]).optional().nullable()
}).strict();
var NutritionalInfoOrderByWithRelationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  menuItemId: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  calories: import_zod.z.lazy(() => SortOrderSchema).optional(),
  fat: import_zod.z.lazy(() => SortOrderSchema).optional(),
  saturatedFat: import_zod.z.lazy(() => SortOrderSchema).optional(),
  transFat: import_zod.z.lazy(() => SortOrderSchema).optional(),
  cholesterol: import_zod.z.lazy(() => SortOrderSchema).optional(),
  sodium: import_zod.z.lazy(() => SortOrderSchema).optional(),
  carbohydrates: import_zod.z.lazy(() => SortOrderSchema).optional(),
  fiber: import_zod.z.lazy(() => SortOrderSchema).optional(),
  sugar: import_zod.z.lazy(() => SortOrderSchema).optional(),
  protein: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  menuItem: import_zod.z.lazy(() => MenuItemOrderByWithRelationInputSchema).optional()
}).strict();
var NutritionalInfoWhereUniqueInputSchema = import_zod.z.union([
  import_zod.z.object({
    id: import_zod.z.number().int(),
    menuItemId: import_zod.z.number().int()
  }),
  import_zod.z.object({
    id: import_zod.z.number().int()
  }),
  import_zod.z.object({
    menuItemId: import_zod.z.number().int()
  })
]).and(import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  menuItemId: import_zod.z.number().int().optional(),
  AND: import_zod.z.union([import_zod.z.lazy(() => NutritionalInfoWhereInputSchema), import_zod.z.lazy(() => NutritionalInfoWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => NutritionalInfoWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => NutritionalInfoWhereInputSchema), import_zod.z.lazy(() => NutritionalInfoWhereInputSchema).array()]).optional(),
  calories: import_zod.z.union([import_zod.z.lazy(() => FloatFilterSchema), import_zod.z.number()]).optional(),
  fat: import_zod.z.union([import_zod.z.lazy(() => FloatFilterSchema), import_zod.z.number()]).optional(),
  saturatedFat: import_zod.z.union([import_zod.z.lazy(() => FloatFilterSchema), import_zod.z.number()]).optional(),
  transFat: import_zod.z.union([import_zod.z.lazy(() => FloatFilterSchema), import_zod.z.number()]).optional(),
  cholesterol: import_zod.z.union([import_zod.z.lazy(() => FloatFilterSchema), import_zod.z.number()]).optional(),
  sodium: import_zod.z.union([import_zod.z.lazy(() => FloatFilterSchema), import_zod.z.number()]).optional(),
  carbohydrates: import_zod.z.union([import_zod.z.lazy(() => FloatFilterSchema), import_zod.z.number()]).optional(),
  fiber: import_zod.z.union([import_zod.z.lazy(() => FloatFilterSchema), import_zod.z.number()]).optional(),
  sugar: import_zod.z.union([import_zod.z.lazy(() => FloatFilterSchema), import_zod.z.number()]).optional(),
  protein: import_zod.z.union([import_zod.z.lazy(() => FloatFilterSchema), import_zod.z.number()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  menuItem: import_zod.z.union([import_zod.z.lazy(() => MenuItemNullableRelationFilterSchema), import_zod.z.lazy(() => MenuItemWhereInputSchema)]).optional().nullable()
}).strict());
var NutritionalInfoOrderByWithAggregationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  menuItemId: import_zod.z.union([import_zod.z.lazy(() => SortOrderSchema), import_zod.z.lazy(() => SortOrderInputSchema)]).optional(),
  calories: import_zod.z.lazy(() => SortOrderSchema).optional(),
  fat: import_zod.z.lazy(() => SortOrderSchema).optional(),
  saturatedFat: import_zod.z.lazy(() => SortOrderSchema).optional(),
  transFat: import_zod.z.lazy(() => SortOrderSchema).optional(),
  cholesterol: import_zod.z.lazy(() => SortOrderSchema).optional(),
  sodium: import_zod.z.lazy(() => SortOrderSchema).optional(),
  carbohydrates: import_zod.z.lazy(() => SortOrderSchema).optional(),
  fiber: import_zod.z.lazy(() => SortOrderSchema).optional(),
  sugar: import_zod.z.lazy(() => SortOrderSchema).optional(),
  protein: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  _count: import_zod.z.lazy(() => NutritionalInfoCountOrderByAggregateInputSchema).optional(),
  _avg: import_zod.z.lazy(() => NutritionalInfoAvgOrderByAggregateInputSchema).optional(),
  _max: import_zod.z.lazy(() => NutritionalInfoMaxOrderByAggregateInputSchema).optional(),
  _min: import_zod.z.lazy(() => NutritionalInfoMinOrderByAggregateInputSchema).optional(),
  _sum: import_zod.z.lazy(() => NutritionalInfoSumOrderByAggregateInputSchema).optional()
}).strict();
var NutritionalInfoScalarWhereWithAggregatesInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => NutritionalInfoScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => NutritionalInfoScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => NutritionalInfoScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => NutritionalInfoScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => NutritionalInfoScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  menuItemId: import_zod.z.union([import_zod.z.lazy(() => IntNullableWithAggregatesFilterSchema), import_zod.z.number()]).optional().nullable(),
  calories: import_zod.z.union([import_zod.z.lazy(() => FloatWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  fat: import_zod.z.union([import_zod.z.lazy(() => FloatWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  saturatedFat: import_zod.z.union([import_zod.z.lazy(() => FloatWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  transFat: import_zod.z.union([import_zod.z.lazy(() => FloatWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  cholesterol: import_zod.z.union([import_zod.z.lazy(() => FloatWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  sodium: import_zod.z.union([import_zod.z.lazy(() => FloatWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  carbohydrates: import_zod.z.union([import_zod.z.lazy(() => FloatWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  fiber: import_zod.z.union([import_zod.z.lazy(() => FloatWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  sugar: import_zod.z.union([import_zod.z.lazy(() => FloatWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  protein: import_zod.z.union([import_zod.z.lazy(() => FloatWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var FoodCostHistoryWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => FoodCostHistoryWhereInputSchema), import_zod.z.lazy(() => FoodCostHistoryWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => FoodCostHistoryWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => FoodCostHistoryWhereInputSchema), import_zod.z.lazy(() => FoodCostHistoryWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  recipeId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  cost: import_zod.z.union([import_zod.z.lazy(() => FloatFilterSchema), import_zod.z.number()]).optional(),
  date: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  recipe: import_zod.z.union([import_zod.z.lazy(() => RecipeRelationFilterSchema), import_zod.z.lazy(() => RecipeWhereInputSchema)]).optional()
}).strict();
var FoodCostHistoryOrderByWithRelationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  cost: import_zod.z.lazy(() => SortOrderSchema).optional(),
  date: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipe: import_zod.z.lazy(() => RecipeOrderByWithRelationInputSchema).optional()
}).strict();
var FoodCostHistoryWhereUniqueInputSchema = import_zod.z.object({
  id: import_zod.z.number().int()
}).and(import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  AND: import_zod.z.union([import_zod.z.lazy(() => FoodCostHistoryWhereInputSchema), import_zod.z.lazy(() => FoodCostHistoryWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => FoodCostHistoryWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => FoodCostHistoryWhereInputSchema), import_zod.z.lazy(() => FoodCostHistoryWhereInputSchema).array()]).optional(),
  recipeId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  cost: import_zod.z.union([import_zod.z.lazy(() => FloatFilterSchema), import_zod.z.number()]).optional(),
  date: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  recipe: import_zod.z.union([import_zod.z.lazy(() => RecipeRelationFilterSchema), import_zod.z.lazy(() => RecipeWhereInputSchema)]).optional()
}).strict());
var FoodCostHistoryOrderByWithAggregationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  cost: import_zod.z.lazy(() => SortOrderSchema).optional(),
  date: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  _count: import_zod.z.lazy(() => FoodCostHistoryCountOrderByAggregateInputSchema).optional(),
  _avg: import_zod.z.lazy(() => FoodCostHistoryAvgOrderByAggregateInputSchema).optional(),
  _max: import_zod.z.lazy(() => FoodCostHistoryMaxOrderByAggregateInputSchema).optional(),
  _min: import_zod.z.lazy(() => FoodCostHistoryMinOrderByAggregateInputSchema).optional(),
  _sum: import_zod.z.lazy(() => FoodCostHistorySumOrderByAggregateInputSchema).optional()
}).strict();
var FoodCostHistoryScalarWhereWithAggregatesInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => FoodCostHistoryScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => FoodCostHistoryScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => FoodCostHistoryScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => FoodCostHistoryScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => FoodCostHistoryScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  recipeId: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  cost: import_zod.z.union([import_zod.z.lazy(() => FloatWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  date: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var PrepHistoryWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => PrepHistoryWhereInputSchema), import_zod.z.lazy(() => PrepHistoryWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => PrepHistoryWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => PrepHistoryWhereInputSchema), import_zod.z.lazy(() => PrepHistoryWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  recipeId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  quantity: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  date: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  recipe: import_zod.z.union([import_zod.z.lazy(() => RecipeRelationFilterSchema), import_zod.z.lazy(() => RecipeWhereInputSchema)]).optional()
}).strict();
var PrepHistoryOrderByWithRelationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  quantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  date: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipe: import_zod.z.lazy(() => RecipeOrderByWithRelationInputSchema).optional()
}).strict();
var PrepHistoryWhereUniqueInputSchema = import_zod.z.object({
  id: import_zod.z.number().int()
}).and(import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  AND: import_zod.z.union([import_zod.z.lazy(() => PrepHistoryWhereInputSchema), import_zod.z.lazy(() => PrepHistoryWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => PrepHistoryWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => PrepHistoryWhereInputSchema), import_zod.z.lazy(() => PrepHistoryWhereInputSchema).array()]).optional(),
  recipeId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  quantity: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number().int()]).optional(),
  date: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  recipe: import_zod.z.union([import_zod.z.lazy(() => RecipeRelationFilterSchema), import_zod.z.lazy(() => RecipeWhereInputSchema)]).optional()
}).strict());
var PrepHistoryOrderByWithAggregationInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  quantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  date: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  _count: import_zod.z.lazy(() => PrepHistoryCountOrderByAggregateInputSchema).optional(),
  _avg: import_zod.z.lazy(() => PrepHistoryAvgOrderByAggregateInputSchema).optional(),
  _max: import_zod.z.lazy(() => PrepHistoryMaxOrderByAggregateInputSchema).optional(),
  _min: import_zod.z.lazy(() => PrepHistoryMinOrderByAggregateInputSchema).optional(),
  _sum: import_zod.z.lazy(() => PrepHistorySumOrderByAggregateInputSchema).optional()
}).strict();
var PrepHistoryScalarWhereWithAggregatesInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => PrepHistoryScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => PrepHistoryScalarWhereWithAggregatesInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => PrepHistoryScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => PrepHistoryScalarWhereWithAggregatesInputSchema), import_zod.z.lazy(() => PrepHistoryScalarWhereWithAggregatesInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  recipeId: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  quantity: import_zod.z.union([import_zod.z.lazy(() => IntWithAggregatesFilterSchema), import_zod.z.number()]).optional(),
  date: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeWithAggregatesFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var SalesTransactionsCreateInputSchema = import_zod.z.object({
  posTransactionID: import_zod.z.string().optional().nullable(),
  price: import_zod.z.number(),
  total: import_zod.z.number(),
  transactionDate: import_zod.z.coerce.date(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  restaurant: import_zod.z.lazy(() => RestaurantCreateNestedOneWithoutSalesTransactionsInputSchema),
  menuItem: import_zod.z.lazy(() => MenuItemCreateNestedOneWithoutSalesTransactionsInputSchema)
}).strict();
var SalesTransactionsUncheckedCreateInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  posTransactionID: import_zod.z.string().optional().nullable(),
  restaurantId: import_zod.z.number().int(),
  menuItemId: import_zod.z.number().int(),
  price: import_zod.z.number(),
  total: import_zod.z.number(),
  transactionDate: import_zod.z.coerce.date(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var SalesTransactionsUpdateInputSchema = import_zod.z.object({
  posTransactionID: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  total: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  transactionDate: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantUpdateOneRequiredWithoutSalesTransactionsNestedInputSchema).optional(),
  menuItem: import_zod.z.lazy(() => MenuItemUpdateOneRequiredWithoutSalesTransactionsNestedInputSchema).optional()
}).strict();
var SalesTransactionsUncheckedUpdateInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  posTransactionID: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  menuItemId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  total: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  transactionDate: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var SalesTransactionsCreateManyInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  posTransactionID: import_zod.z.string().optional().nullable(),
  restaurantId: import_zod.z.number().int(),
  menuItemId: import_zod.z.number().int(),
  price: import_zod.z.number(),
  total: import_zod.z.number(),
  transactionDate: import_zod.z.coerce.date(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var SalesTransactionsUpdateManyMutationInputSchema = import_zod.z.object({
  posTransactionID: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  total: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  transactionDate: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var SalesTransactionsUncheckedUpdateManyInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  posTransactionID: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  menuItemId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  total: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  transactionDate: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var MenuCategoryCreateInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  displayOrder: import_zod.z.number().int(),
  isActive: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  menu: import_zod.z.lazy(() => MenuCreateNestedOneWithoutMenuCategoryInputSchema),
  menuItems: import_zod.z.lazy(() => MenuItemCreateNestedManyWithoutCategoryInputSchema).optional()
}).strict();
var MenuCategoryUncheckedCreateInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  displayOrder: import_zod.z.number().int(),
  menuId: import_zod.z.number().int(),
  isActive: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUncheckedCreateNestedManyWithoutCategoryInputSchema).optional()
}).strict();
var MenuCategoryUpdateInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  displayOrder: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  isActive: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  menu: import_zod.z.lazy(() => MenuUpdateOneRequiredWithoutMenuCategoryNestedInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUpdateManyWithoutCategoryNestedInputSchema).optional()
}).strict();
var MenuCategoryUncheckedUpdateInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  displayOrder: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  menuId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  isActive: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUncheckedUpdateManyWithoutCategoryNestedInputSchema).optional()
}).strict();
var MenuCategoryCreateManyInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  displayOrder: import_zod.z.number().int(),
  menuId: import_zod.z.number().int(),
  isActive: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var MenuCategoryUpdateManyMutationInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  displayOrder: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  isActive: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var MenuCategoryUncheckedUpdateManyInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  displayOrder: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  menuId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  isActive: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var RecipeVersionCreateInputSchema = import_zod.z.object({
  versionNumber: import_zod.z.number().int(),
  description: import_zod.z.string().optional().nullable(),
  changes: import_zod.z.string().optional().nullable(),
  isActive: import_zod.z.boolean().optional(),
  approvedAt: import_zod.z.coerce.date().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  recipe: import_zod.z.lazy(() => RecipeCreateNestedOneWithoutVersionsInputSchema),
  ingredients: import_zod.z.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeVersionInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeVersionInputSchema).optional(),
  createdBy: import_zod.z.lazy(() => UserCreateNestedOneWithoutRecipeVersionsCreatedInputSchema),
  approvedBy: import_zod.z.lazy(() => UserCreateNestedOneWithoutRecipeVersionsApprovedInputSchema).optional()
}).strict();
var RecipeVersionUncheckedCreateInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  recipeId: import_zod.z.number().int(),
  versionNumber: import_zod.z.number().int(),
  description: import_zod.z.string().optional().nullable(),
  changes: import_zod.z.string().optional().nullable(),
  isActive: import_zod.z.boolean().optional(),
  createdById: import_zod.z.number().int(),
  approvedById: import_zod.z.number().int().optional().nullable(),
  approvedAt: import_zod.z.coerce.date().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeVersionInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeVersionInputSchema).optional()
}).strict();
var RecipeVersionUpdateInputSchema = import_zod.z.object({
  versionNumber: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  changes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isActive: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  approvedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  recipe: import_zod.z.lazy(() => RecipeUpdateOneRequiredWithoutVersionsNestedInputSchema).optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientUpdateManyWithoutRecipeVersionNestedInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionUpdateManyWithoutRecipeVersionNestedInputSchema).optional(),
  createdBy: import_zod.z.lazy(() => UserUpdateOneRequiredWithoutRecipeVersionsCreatedNestedInputSchema).optional(),
  approvedBy: import_zod.z.lazy(() => UserUpdateOneWithoutRecipeVersionsApprovedNestedInputSchema).optional()
}).strict();
var RecipeVersionUncheckedUpdateInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  versionNumber: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  changes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isActive: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdById: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  approvedById: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  approvedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeVersionNestedInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeVersionNestedInputSchema).optional()
}).strict();
var RecipeVersionCreateManyInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  recipeId: import_zod.z.number().int(),
  versionNumber: import_zod.z.number().int(),
  description: import_zod.z.string().optional().nullable(),
  changes: import_zod.z.string().optional().nullable(),
  isActive: import_zod.z.boolean().optional(),
  createdById: import_zod.z.number().int(),
  approvedById: import_zod.z.number().int().optional().nullable(),
  approvedAt: import_zod.z.coerce.date().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var RecipeVersionUpdateManyMutationInputSchema = import_zod.z.object({
  versionNumber: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  changes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isActive: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  approvedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var RecipeVersionUncheckedUpdateManyInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  versionNumber: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  changes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isActive: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdById: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  approvedById: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  approvedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var EquipmentCreateInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  model: import_zod.z.string().optional().nullable(),
  serialNumber: import_zod.z.string().optional().nullable(),
  purchaseDate: import_zod.z.coerce.date().optional().nullable(),
  lastMaintenance: import_zod.z.coerce.date().optional().nullable(),
  nextMaintenance: import_zod.z.coerce.date().optional().nullable(),
  status: import_zod.z.lazy(() => EquipmentStatusSchema).optional(),
  location: import_zod.z.string().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  restaurant: import_zod.z.lazy(() => RestaurantCreateNestedOneWithoutEquipmentInputSchema),
  recipes: import_zod.z.lazy(() => RecipeEquipmentCreateNestedManyWithoutEquipmentInputSchema).optional(),
  maintenanceLogs: import_zod.z.lazy(() => MaintenanceLogCreateNestedManyWithoutEquipmentInputSchema).optional()
}).strict();
var EquipmentUncheckedCreateInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  model: import_zod.z.string().optional().nullable(),
  serialNumber: import_zod.z.string().optional().nullable(),
  purchaseDate: import_zod.z.coerce.date().optional().nullable(),
  lastMaintenance: import_zod.z.coerce.date().optional().nullable(),
  nextMaintenance: import_zod.z.coerce.date().optional().nullable(),
  status: import_zod.z.lazy(() => EquipmentStatusSchema).optional(),
  location: import_zod.z.string().optional().nullable(),
  restaurantId: import_zod.z.number().int(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  recipes: import_zod.z.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutEquipmentInputSchema).optional(),
  maintenanceLogs: import_zod.z.lazy(() => MaintenanceLogUncheckedCreateNestedManyWithoutEquipmentInputSchema).optional()
}).strict();
var EquipmentUpdateInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  model: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  serialNumber: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  purchaseDate: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastMaintenance: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  nextMaintenance: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  status: import_zod.z.union([import_zod.z.lazy(() => EquipmentStatusSchema), import_zod.z.lazy(() => EnumEquipmentStatusFieldUpdateOperationsInputSchema)]).optional(),
  location: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantUpdateOneRequiredWithoutEquipmentNestedInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeEquipmentUpdateManyWithoutEquipmentNestedInputSchema).optional(),
  maintenanceLogs: import_zod.z.lazy(() => MaintenanceLogUpdateManyWithoutEquipmentNestedInputSchema).optional()
}).strict();
var EquipmentUncheckedUpdateInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  model: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  serialNumber: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  purchaseDate: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastMaintenance: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  nextMaintenance: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  status: import_zod.z.union([import_zod.z.lazy(() => EquipmentStatusSchema), import_zod.z.lazy(() => EnumEquipmentStatusFieldUpdateOperationsInputSchema)]).optional(),
  location: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  recipes: import_zod.z.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutEquipmentNestedInputSchema).optional(),
  maintenanceLogs: import_zod.z.lazy(() => MaintenanceLogUncheckedUpdateManyWithoutEquipmentNestedInputSchema).optional()
}).strict();
var EquipmentCreateManyInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  model: import_zod.z.string().optional().nullable(),
  serialNumber: import_zod.z.string().optional().nullable(),
  purchaseDate: import_zod.z.coerce.date().optional().nullable(),
  lastMaintenance: import_zod.z.coerce.date().optional().nullable(),
  nextMaintenance: import_zod.z.coerce.date().optional().nullable(),
  status: import_zod.z.lazy(() => EquipmentStatusSchema).optional(),
  location: import_zod.z.string().optional().nullable(),
  restaurantId: import_zod.z.number().int(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var EquipmentUpdateManyMutationInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  model: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  serialNumber: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  purchaseDate: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastMaintenance: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  nextMaintenance: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  status: import_zod.z.union([import_zod.z.lazy(() => EquipmentStatusSchema), import_zod.z.lazy(() => EnumEquipmentStatusFieldUpdateOperationsInputSchema)]).optional(),
  location: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var EquipmentUncheckedUpdateManyInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  model: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  serialNumber: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  purchaseDate: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastMaintenance: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  nextMaintenance: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  status: import_zod.z.union([import_zod.z.lazy(() => EquipmentStatusSchema), import_zod.z.lazy(() => EnumEquipmentStatusFieldUpdateOperationsInputSchema)]).optional(),
  location: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var RecipeEquipmentCreateInputSchema = import_zod.z.object({
  notes: import_zod.z.string().optional().nullable(),
  recipe: import_zod.z.lazy(() => RecipeCreateNestedOneWithoutEquipmentInputSchema),
  equipment: import_zod.z.lazy(() => EquipmentCreateNestedOneWithoutRecipesInputSchema)
}).strict();
var RecipeEquipmentUncheckedCreateInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  recipeId: import_zod.z.number().int(),
  equipmentId: import_zod.z.number().int(),
  notes: import_zod.z.string().optional().nullable()
}).strict();
var RecipeEquipmentUpdateInputSchema = import_zod.z.object({
  notes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  recipe: import_zod.z.lazy(() => RecipeUpdateOneRequiredWithoutEquipmentNestedInputSchema).optional(),
  equipment: import_zod.z.lazy(() => EquipmentUpdateOneRequiredWithoutRecipesNestedInputSchema).optional()
}).strict();
var RecipeEquipmentUncheckedUpdateInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  equipmentId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  notes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var RecipeEquipmentCreateManyInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  recipeId: import_zod.z.number().int(),
  equipmentId: import_zod.z.number().int(),
  notes: import_zod.z.string().optional().nullable()
}).strict();
var RecipeEquipmentUpdateManyMutationInputSchema = import_zod.z.object({
  notes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var RecipeEquipmentUncheckedUpdateManyInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  equipmentId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  notes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var MaintenanceLogCreateInputSchema = import_zod.z.object({
  date: import_zod.z.coerce.date(),
  type: import_zod.z.lazy(() => MaintenanceTypeSchema),
  description: import_zod.z.string(),
  cost: import_zod.z.number().optional().nullable(),
  performedBy: import_zod.z.string(),
  notes: import_zod.z.string().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  equipment: import_zod.z.lazy(() => EquipmentCreateNestedOneWithoutMaintenanceLogsInputSchema)
}).strict();
var MaintenanceLogUncheckedCreateInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  equipmentId: import_zod.z.number().int(),
  date: import_zod.z.coerce.date(),
  type: import_zod.z.lazy(() => MaintenanceTypeSchema),
  description: import_zod.z.string(),
  cost: import_zod.z.number().optional().nullable(),
  performedBy: import_zod.z.string(),
  notes: import_zod.z.string().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var MaintenanceLogUpdateInputSchema = import_zod.z.object({
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  type: import_zod.z.union([import_zod.z.lazy(() => MaintenanceTypeSchema), import_zod.z.lazy(() => EnumMaintenanceTypeFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  cost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  performedBy: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  notes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  equipment: import_zod.z.lazy(() => EquipmentUpdateOneRequiredWithoutMaintenanceLogsNestedInputSchema).optional()
}).strict();
var MaintenanceLogUncheckedUpdateInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  equipmentId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  type: import_zod.z.union([import_zod.z.lazy(() => MaintenanceTypeSchema), import_zod.z.lazy(() => EnumMaintenanceTypeFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  cost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  performedBy: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  notes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var MaintenanceLogCreateManyInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  equipmentId: import_zod.z.number().int(),
  date: import_zod.z.coerce.date(),
  type: import_zod.z.lazy(() => MaintenanceTypeSchema),
  description: import_zod.z.string(),
  cost: import_zod.z.number().optional().nullable(),
  performedBy: import_zod.z.string(),
  notes: import_zod.z.string().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var MaintenanceLogUpdateManyMutationInputSchema = import_zod.z.object({
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  type: import_zod.z.union([import_zod.z.lazy(() => MaintenanceTypeSchema), import_zod.z.lazy(() => EnumMaintenanceTypeFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  cost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  performedBy: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  notes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var MaintenanceLogUncheckedUpdateManyInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  equipmentId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  type: import_zod.z.union([import_zod.z.lazy(() => MaintenanceTypeSchema), import_zod.z.lazy(() => EnumMaintenanceTypeFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  cost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  performedBy: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  notes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var QualityChecklistCreateInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  frequency: import_zod.z.lazy(() => ChecklistFrequencySchema).optional(),
  isActive: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  restaurant: import_zod.z.lazy(() => RestaurantCreateNestedOneWithoutQualityChecklistInputSchema),
  items: import_zod.z.lazy(() => ChecklistItemCreateNestedManyWithoutChecklistInputSchema).optional(),
  completions: import_zod.z.lazy(() => ChecklistCompleteCreateNestedManyWithoutChecklistInputSchema).optional()
}).strict();
var QualityChecklistUncheckedCreateInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  restaurantId: import_zod.z.number().int(),
  frequency: import_zod.z.lazy(() => ChecklistFrequencySchema).optional(),
  isActive: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  items: import_zod.z.lazy(() => ChecklistItemUncheckedCreateNestedManyWithoutChecklistInputSchema).optional(),
  completions: import_zod.z.lazy(() => ChecklistCompleteUncheckedCreateNestedManyWithoutChecklistInputSchema).optional()
}).strict();
var QualityChecklistUpdateInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  frequency: import_zod.z.union([import_zod.z.lazy(() => ChecklistFrequencySchema), import_zod.z.lazy(() => EnumChecklistFrequencyFieldUpdateOperationsInputSchema)]).optional(),
  isActive: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantUpdateOneRequiredWithoutQualityChecklistNestedInputSchema).optional(),
  items: import_zod.z.lazy(() => ChecklistItemUpdateManyWithoutChecklistNestedInputSchema).optional(),
  completions: import_zod.z.lazy(() => ChecklistCompleteUpdateManyWithoutChecklistNestedInputSchema).optional()
}).strict();
var QualityChecklistUncheckedUpdateInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: import_zod.z.union([import_zod.z.lazy(() => ChecklistFrequencySchema), import_zod.z.lazy(() => EnumChecklistFrequencyFieldUpdateOperationsInputSchema)]).optional(),
  isActive: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  items: import_zod.z.lazy(() => ChecklistItemUncheckedUpdateManyWithoutChecklistNestedInputSchema).optional(),
  completions: import_zod.z.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutChecklistNestedInputSchema).optional()
}).strict();
var QualityChecklistCreateManyInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  restaurantId: import_zod.z.number().int(),
  frequency: import_zod.z.lazy(() => ChecklistFrequencySchema).optional(),
  isActive: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var QualityChecklistUpdateManyMutationInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  frequency: import_zod.z.union([import_zod.z.lazy(() => ChecklistFrequencySchema), import_zod.z.lazy(() => EnumChecklistFrequencyFieldUpdateOperationsInputSchema)]).optional(),
  isActive: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var QualityChecklistUncheckedUpdateManyInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: import_zod.z.union([import_zod.z.lazy(() => ChecklistFrequencySchema), import_zod.z.lazy(() => EnumChecklistFrequencyFieldUpdateOperationsInputSchema)]).optional(),
  isActive: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ChecklistItemCreateInputSchema = import_zod.z.object({
  description: import_zod.z.string(),
  order: import_zod.z.number().int(),
  type: import_zod.z.lazy(() => ChecklistItemTypeSchema),
  requiredPhotos: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  checklist: import_zod.z.lazy(() => QualityChecklistCreateNestedOneWithoutItemsInputSchema),
  completions: import_zod.z.lazy(() => ChecklistItemCompleteCreateNestedManyWithoutChecklistItemInputSchema).optional()
}).strict();
var ChecklistItemUncheckedCreateInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  checklistId: import_zod.z.number().int(),
  description: import_zod.z.string(),
  order: import_zod.z.number().int(),
  type: import_zod.z.lazy(() => ChecklistItemTypeSchema),
  requiredPhotos: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  completions: import_zod.z.lazy(() => ChecklistItemCompleteUncheckedCreateNestedManyWithoutChecklistItemInputSchema).optional()
}).strict();
var ChecklistItemUpdateInputSchema = import_zod.z.object({
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  order: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  type: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemTypeSchema), import_zod.z.lazy(() => EnumChecklistItemTypeFieldUpdateOperationsInputSchema)]).optional(),
  requiredPhotos: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  checklist: import_zod.z.lazy(() => QualityChecklistUpdateOneRequiredWithoutItemsNestedInputSchema).optional(),
  completions: import_zod.z.lazy(() => ChecklistItemCompleteUpdateManyWithoutChecklistItemNestedInputSchema).optional()
}).strict();
var ChecklistItemUncheckedUpdateInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  checklistId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  order: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  type: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemTypeSchema), import_zod.z.lazy(() => EnumChecklistItemTypeFieldUpdateOperationsInputSchema)]).optional(),
  requiredPhotos: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  completions: import_zod.z.lazy(() => ChecklistItemCompleteUncheckedUpdateManyWithoutChecklistItemNestedInputSchema).optional()
}).strict();
var ChecklistItemCreateManyInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  checklistId: import_zod.z.number().int(),
  description: import_zod.z.string(),
  order: import_zod.z.number().int(),
  type: import_zod.z.lazy(() => ChecklistItemTypeSchema),
  requiredPhotos: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var ChecklistItemUpdateManyMutationInputSchema = import_zod.z.object({
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  order: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  type: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemTypeSchema), import_zod.z.lazy(() => EnumChecklistItemTypeFieldUpdateOperationsInputSchema)]).optional(),
  requiredPhotos: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ChecklistItemUncheckedUpdateManyInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  checklistId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  order: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  type: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemTypeSchema), import_zod.z.lazy(() => EnumChecklistItemTypeFieldUpdateOperationsInputSchema)]).optional(),
  requiredPhotos: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ChecklistCompleteCreateInputSchema = import_zod.z.object({
  date: import_zod.z.coerce.date(),
  notes: import_zod.z.string().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  checklist: import_zod.z.lazy(() => QualityChecklistCreateNestedOneWithoutCompletionsInputSchema),
  completedBy: import_zod.z.lazy(() => UserCreateNestedOneWithoutChecklistCompleteInputSchema),
  items: import_zod.z.lazy(() => ChecklistItemCompleteCreateNestedManyWithoutChecklistCompleteInputSchema).optional()
}).strict();
var ChecklistCompleteUncheckedCreateInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  checklistId: import_zod.z.number().int(),
  completedById: import_zod.z.number().int(),
  date: import_zod.z.coerce.date(),
  notes: import_zod.z.string().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  items: import_zod.z.lazy(() => ChecklistItemCompleteUncheckedCreateNestedManyWithoutChecklistCompleteInputSchema).optional()
}).strict();
var ChecklistCompleteUpdateInputSchema = import_zod.z.object({
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  notes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  checklist: import_zod.z.lazy(() => QualityChecklistUpdateOneRequiredWithoutCompletionsNestedInputSchema).optional(),
  completedBy: import_zod.z.lazy(() => UserUpdateOneRequiredWithoutChecklistCompleteNestedInputSchema).optional(),
  items: import_zod.z.lazy(() => ChecklistItemCompleteUpdateManyWithoutChecklistCompleteNestedInputSchema).optional()
}).strict();
var ChecklistCompleteUncheckedUpdateInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  checklistId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  completedById: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  notes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  items: import_zod.z.lazy(() => ChecklistItemCompleteUncheckedUpdateManyWithoutChecklistCompleteNestedInputSchema).optional()
}).strict();
var ChecklistCompleteCreateManyInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  checklistId: import_zod.z.number().int(),
  completedById: import_zod.z.number().int(),
  date: import_zod.z.coerce.date(),
  notes: import_zod.z.string().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var ChecklistCompleteUpdateManyMutationInputSchema = import_zod.z.object({
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  notes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ChecklistCompleteUncheckedUpdateManyInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  checklistId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  completedById: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  notes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ChecklistItemCompleteCreateInputSchema = import_zod.z.object({
  status: import_zod.z.lazy(() => ChecklistStatusSchema),
  notes: import_zod.z.string().optional().nullable(),
  photoUrls: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteCreatephotoUrlsInputSchema), import_zod.z.string().array()]).optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteCreateNestedOneWithoutItemsInputSchema),
  checklistItem: import_zod.z.lazy(() => ChecklistItemCreateNestedOneWithoutCompletionsInputSchema)
}).strict();
var ChecklistItemCompleteUncheckedCreateInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  checklistCompleteId: import_zod.z.number().int(),
  checklistItemId: import_zod.z.number().int(),
  status: import_zod.z.lazy(() => ChecklistStatusSchema),
  notes: import_zod.z.string().optional().nullable(),
  photoUrls: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteCreatephotoUrlsInputSchema), import_zod.z.string().array()]).optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var ChecklistItemCompleteUpdateInputSchema = import_zod.z.object({
  status: import_zod.z.union([import_zod.z.lazy(() => ChecklistStatusSchema), import_zod.z.lazy(() => EnumChecklistStatusFieldUpdateOperationsInputSchema)]).optional(),
  notes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  photoUrls: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteUpdatephotoUrlsInputSchema), import_zod.z.string().array()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteUpdateOneRequiredWithoutItemsNestedInputSchema).optional(),
  checklistItem: import_zod.z.lazy(() => ChecklistItemUpdateOneRequiredWithoutCompletionsNestedInputSchema).optional()
}).strict();
var ChecklistItemCompleteUncheckedUpdateInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  checklistCompleteId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  checklistItemId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => ChecklistStatusSchema), import_zod.z.lazy(() => EnumChecklistStatusFieldUpdateOperationsInputSchema)]).optional(),
  notes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  photoUrls: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteUpdatephotoUrlsInputSchema), import_zod.z.string().array()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ChecklistItemCompleteCreateManyInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  checklistCompleteId: import_zod.z.number().int(),
  checklistItemId: import_zod.z.number().int(),
  status: import_zod.z.lazy(() => ChecklistStatusSchema),
  notes: import_zod.z.string().optional().nullable(),
  photoUrls: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteCreatephotoUrlsInputSchema), import_zod.z.string().array()]).optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var ChecklistItemCompleteUpdateManyMutationInputSchema = import_zod.z.object({
  status: import_zod.z.union([import_zod.z.lazy(() => ChecklistStatusSchema), import_zod.z.lazy(() => EnumChecklistStatusFieldUpdateOperationsInputSchema)]).optional(),
  notes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  photoUrls: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteUpdatephotoUrlsInputSchema), import_zod.z.string().array()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ChecklistItemCompleteUncheckedUpdateManyInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  checklistCompleteId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  checklistItemId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => ChecklistStatusSchema), import_zod.z.lazy(() => EnumChecklistStatusFieldUpdateOperationsInputSchema)]).optional(),
  notes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  photoUrls: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteUpdatephotoUrlsInputSchema), import_zod.z.string().array()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var SupplierPriceHistoryCreateInputSchema = import_zod.z.object({
  price: import_zod.z.number(),
  unit: import_zod.z.string(),
  startDate: import_zod.z.coerce.date(),
  endDate: import_zod.z.coerce.date().optional().nullable(),
  notes: import_zod.z.string().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  vendor: import_zod.z.lazy(() => VendorCreateNestedOneWithoutSupplierPriceHistoryInputSchema),
  ingredient: import_zod.z.lazy(() => IngredientCreateNestedOneWithoutSupplierPriceHistoryInputSchema)
}).strict();
var SupplierPriceHistoryUncheckedCreateInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  vendorId: import_zod.z.number().int(),
  ingredientId: import_zod.z.number().int(),
  price: import_zod.z.number(),
  unit: import_zod.z.string(),
  startDate: import_zod.z.coerce.date(),
  endDate: import_zod.z.coerce.date().optional().nullable(),
  notes: import_zod.z.string().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var SupplierPriceHistoryUpdateInputSchema = import_zod.z.object({
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  startDate: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endDate: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  notes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  vendor: import_zod.z.lazy(() => VendorUpdateOneRequiredWithoutSupplierPriceHistoryNestedInputSchema).optional(),
  ingredient: import_zod.z.lazy(() => IngredientUpdateOneRequiredWithoutSupplierPriceHistoryNestedInputSchema).optional()
}).strict();
var SupplierPriceHistoryUncheckedUpdateInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  vendorId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  ingredientId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  startDate: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endDate: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  notes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var SupplierPriceHistoryCreateManyInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  vendorId: import_zod.z.number().int(),
  ingredientId: import_zod.z.number().int(),
  price: import_zod.z.number(),
  unit: import_zod.z.string(),
  startDate: import_zod.z.coerce.date(),
  endDate: import_zod.z.coerce.date().optional().nullable(),
  notes: import_zod.z.string().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var SupplierPriceHistoryUpdateManyMutationInputSchema = import_zod.z.object({
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  startDate: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endDate: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  notes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var SupplierPriceHistoryUncheckedUpdateManyInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  vendorId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  ingredientId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  startDate: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endDate: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  notes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var CustomerFeedbackCreateInputSchema = import_zod.z.object({
  rating: import_zod.z.number().int(),
  comment: import_zod.z.string().optional().nullable(),
  source: import_zod.z.lazy(() => FeedbackSourceSchema),
  tags: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackCreatetagsInputSchema), import_zod.z.string().array()]).optional(),
  status: import_zod.z.lazy(() => FeedbackStatusSchema).optional(),
  responseText: import_zod.z.string().optional().nullable(),
  respondedAt: import_zod.z.coerce.date().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  restaurant: import_zod.z.lazy(() => RestaurantCreateNestedOneWithoutQustomerFeedbackInputSchema),
  menuItem: import_zod.z.lazy(() => MenuItemCreateNestedOneWithoutFeedbackInputSchema).optional(),
  respondedBy: import_zod.z.lazy(() => UserCreateNestedOneWithoutCustomerFeedbackInputSchema).optional()
}).strict();
var CustomerFeedbackUncheckedCreateInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  restaurantId: import_zod.z.number().int(),
  menuItemId: import_zod.z.number().int().optional().nullable(),
  rating: import_zod.z.number().int(),
  comment: import_zod.z.string().optional().nullable(),
  source: import_zod.z.lazy(() => FeedbackSourceSchema),
  tags: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackCreatetagsInputSchema), import_zod.z.string().array()]).optional(),
  status: import_zod.z.lazy(() => FeedbackStatusSchema).optional(),
  responseText: import_zod.z.string().optional().nullable(),
  respondedAt: import_zod.z.coerce.date().optional().nullable(),
  respondedById: import_zod.z.number().int().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var CustomerFeedbackUpdateInputSchema = import_zod.z.object({
  rating: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  comment: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  source: import_zod.z.union([import_zod.z.lazy(() => FeedbackSourceSchema), import_zod.z.lazy(() => EnumFeedbackSourceFieldUpdateOperationsInputSchema)]).optional(),
  tags: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackUpdatetagsInputSchema), import_zod.z.string().array()]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => FeedbackStatusSchema), import_zod.z.lazy(() => EnumFeedbackStatusFieldUpdateOperationsInputSchema)]).optional(),
  responseText: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  respondedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantUpdateOneRequiredWithoutQustomerFeedbackNestedInputSchema).optional(),
  menuItem: import_zod.z.lazy(() => MenuItemUpdateOneWithoutFeedbackNestedInputSchema).optional(),
  respondedBy: import_zod.z.lazy(() => UserUpdateOneWithoutCustomerFeedbackNestedInputSchema).optional()
}).strict();
var CustomerFeedbackUncheckedUpdateInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  menuItemId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  rating: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  comment: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  source: import_zod.z.union([import_zod.z.lazy(() => FeedbackSourceSchema), import_zod.z.lazy(() => EnumFeedbackSourceFieldUpdateOperationsInputSchema)]).optional(),
  tags: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackUpdatetagsInputSchema), import_zod.z.string().array()]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => FeedbackStatusSchema), import_zod.z.lazy(() => EnumFeedbackStatusFieldUpdateOperationsInputSchema)]).optional(),
  responseText: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  respondedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  respondedById: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var CustomerFeedbackCreateManyInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  restaurantId: import_zod.z.number().int(),
  menuItemId: import_zod.z.number().int().optional().nullable(),
  rating: import_zod.z.number().int(),
  comment: import_zod.z.string().optional().nullable(),
  source: import_zod.z.lazy(() => FeedbackSourceSchema),
  tags: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackCreatetagsInputSchema), import_zod.z.string().array()]).optional(),
  status: import_zod.z.lazy(() => FeedbackStatusSchema).optional(),
  responseText: import_zod.z.string().optional().nullable(),
  respondedAt: import_zod.z.coerce.date().optional().nullable(),
  respondedById: import_zod.z.number().int().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var CustomerFeedbackUpdateManyMutationInputSchema = import_zod.z.object({
  rating: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  comment: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  source: import_zod.z.union([import_zod.z.lazy(() => FeedbackSourceSchema), import_zod.z.lazy(() => EnumFeedbackSourceFieldUpdateOperationsInputSchema)]).optional(),
  tags: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackUpdatetagsInputSchema), import_zod.z.string().array()]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => FeedbackStatusSchema), import_zod.z.lazy(() => EnumFeedbackStatusFieldUpdateOperationsInputSchema)]).optional(),
  responseText: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  respondedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var CustomerFeedbackUncheckedUpdateManyInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  menuItemId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  rating: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  comment: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  source: import_zod.z.union([import_zod.z.lazy(() => FeedbackSourceSchema), import_zod.z.lazy(() => EnumFeedbackSourceFieldUpdateOperationsInputSchema)]).optional(),
  tags: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackUpdatetagsInputSchema), import_zod.z.string().array()]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => FeedbackStatusSchema), import_zod.z.lazy(() => EnumFeedbackStatusFieldUpdateOperationsInputSchema)]).optional(),
  responseText: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  respondedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  respondedById: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var DietaryRestrictionCreateInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  icon: import_zod.z.string().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  menuItems: import_zod.z.lazy(() => MenuItemCreateNestedManyWithoutDietaryRestrictionsInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeCreateNestedManyWithoutDietaryRestrictionsInputSchema).optional(),
  ingredients: import_zod.z.lazy(() => IngredientCreateNestedManyWithoutDietaryRestrictionInputSchema).optional()
}).strict();
var DietaryRestrictionUncheckedCreateInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  icon: import_zod.z.string().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUncheckedCreateNestedManyWithoutDietaryRestrictionsInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUncheckedCreateNestedManyWithoutDietaryRestrictionsInputSchema).optional(),
  ingredients: import_zod.z.lazy(() => IngredientUncheckedCreateNestedManyWithoutDietaryRestrictionInputSchema).optional()
}).strict();
var DietaryRestrictionUpdateInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  icon: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUpdateManyWithoutDietaryRestrictionsNestedInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUpdateManyWithoutDietaryRestrictionsNestedInputSchema).optional(),
  ingredients: import_zod.z.lazy(() => IngredientUpdateManyWithoutDietaryRestrictionNestedInputSchema).optional()
}).strict();
var DietaryRestrictionUncheckedUpdateInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  icon: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUncheckedUpdateManyWithoutDietaryRestrictionsNestedInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUncheckedUpdateManyWithoutDietaryRestrictionsNestedInputSchema).optional(),
  ingredients: import_zod.z.lazy(() => IngredientUncheckedUpdateManyWithoutDietaryRestrictionNestedInputSchema).optional()
}).strict();
var DietaryRestrictionCreateManyInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  icon: import_zod.z.string().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var DietaryRestrictionUpdateManyMutationInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  icon: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var DietaryRestrictionUncheckedUpdateManyInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  icon: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var RecipeTagCreateInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  recipes: import_zod.z.lazy(() => RecipeCreateNestedManyWithoutTagsInputSchema).optional()
}).strict();
var RecipeTagUncheckedCreateInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  recipes: import_zod.z.lazy(() => RecipeUncheckedCreateNestedManyWithoutTagsInputSchema).optional()
}).strict();
var RecipeTagUpdateInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  recipes: import_zod.z.lazy(() => RecipeUpdateManyWithoutTagsNestedInputSchema).optional()
}).strict();
var RecipeTagUncheckedUpdateInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  recipes: import_zod.z.lazy(() => RecipeUncheckedUpdateManyWithoutTagsNestedInputSchema).optional()
}).strict();
var RecipeTagCreateManyInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var RecipeTagUpdateManyMutationInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var RecipeTagUncheckedUpdateManyInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var LeftoverItemCreateInputSchema = import_zod.z.object({
  date: import_zod.z.coerce.date(),
  quantity: import_zod.z.number().int(),
  reason: import_zod.z.string(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  restaurant: import_zod.z.lazy(() => RestaurantCreateNestedOneWithoutLeftoverItemInputSchema),
  menuItem: import_zod.z.lazy(() => MenuItemCreateNestedOneWithoutLeftoverItemInputSchema),
  recordedBy: import_zod.z.lazy(() => UserCreateNestedOneWithoutLeftoverItemInputSchema)
}).strict();
var LeftoverItemUncheckedCreateInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  restaurantId: import_zod.z.number().int(),
  date: import_zod.z.coerce.date(),
  menuItemId: import_zod.z.number().int(),
  quantity: import_zod.z.number().int(),
  reason: import_zod.z.string(),
  recordedById: import_zod.z.number().int(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var LeftoverItemUpdateInputSchema = import_zod.z.object({
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  reason: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantUpdateOneRequiredWithoutLeftoverItemNestedInputSchema).optional(),
  menuItem: import_zod.z.lazy(() => MenuItemUpdateOneRequiredWithoutLeftoverItemNestedInputSchema).optional(),
  recordedBy: import_zod.z.lazy(() => UserUpdateOneRequiredWithoutLeftoverItemNestedInputSchema).optional()
}).strict();
var LeftoverItemUncheckedUpdateInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  menuItemId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  reason: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recordedById: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var LeftoverItemCreateManyInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  restaurantId: import_zod.z.number().int(),
  date: import_zod.z.coerce.date(),
  menuItemId: import_zod.z.number().int(),
  quantity: import_zod.z.number().int(),
  reason: import_zod.z.string(),
  recordedById: import_zod.z.number().int(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var LeftoverItemUpdateManyMutationInputSchema = import_zod.z.object({
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  reason: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var LeftoverItemUncheckedUpdateManyInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  menuItemId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  reason: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recordedById: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var WasteRecordCreateInputSchema = import_zod.z.object({
  date: import_zod.z.coerce.date(),
  quantity: import_zod.z.number(),
  unit: import_zod.z.string(),
  reason: import_zod.z.string(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  restaurant: import_zod.z.lazy(() => RestaurantCreateNestedOneWithoutWasteRecordInputSchema),
  ingrediente: import_zod.z.lazy(() => IngredientCreateNestedOneWithoutWasteRecordInputSchema),
  recordedBy: import_zod.z.lazy(() => UserCreateNestedOneWithoutWasteRecordInputSchema)
}).strict();
var WasteRecordUncheckedCreateInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  restaurantId: import_zod.z.number().int(),
  date: import_zod.z.coerce.date(),
  ingredientId: import_zod.z.number().int(),
  quantity: import_zod.z.number(),
  unit: import_zod.z.string(),
  reason: import_zod.z.string(),
  recordedById: import_zod.z.number().int(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var WasteRecordUpdateInputSchema = import_zod.z.object({
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  reason: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantUpdateOneRequiredWithoutWasteRecordNestedInputSchema).optional(),
  ingrediente: import_zod.z.lazy(() => IngredientUpdateOneRequiredWithoutWasteRecordNestedInputSchema).optional(),
  recordedBy: import_zod.z.lazy(() => UserUpdateOneRequiredWithoutWasteRecordNestedInputSchema).optional()
}).strict();
var WasteRecordUncheckedUpdateInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingredientId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  reason: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recordedById: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var WasteRecordCreateManyInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  restaurantId: import_zod.z.number().int(),
  date: import_zod.z.coerce.date(),
  ingredientId: import_zod.z.number().int(),
  quantity: import_zod.z.number(),
  unit: import_zod.z.string(),
  reason: import_zod.z.string(),
  recordedById: import_zod.z.number().int(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var WasteRecordUpdateManyMutationInputSchema = import_zod.z.object({
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  reason: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var WasteRecordUncheckedUpdateManyInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingredientId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  reason: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recordedById: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ProductionPlanCreateInputSchema = import_zod.z.object({
  date: import_zod.z.coerce.date(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  restaurant: import_zod.z.lazy(() => RestaurantCreateNestedOneWithoutProductionPlanInputSchema),
  createdBy: import_zod.z.lazy(() => UserCreateNestedOneWithoutProductionPlanInputSchema),
  items: import_zod.z.lazy(() => ProductionPlanItemCreateNestedManyWithoutProductionPlanInputSchema).optional()
}).strict();
var ProductionPlanUncheckedCreateInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  restaurantId: import_zod.z.number().int(),
  date: import_zod.z.coerce.date(),
  createdById: import_zod.z.number().int(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  items: import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutProductionPlanInputSchema).optional()
}).strict();
var ProductionPlanUpdateInputSchema = import_zod.z.object({
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantUpdateOneRequiredWithoutProductionPlanNestedInputSchema).optional(),
  createdBy: import_zod.z.lazy(() => UserUpdateOneRequiredWithoutProductionPlanNestedInputSchema).optional(),
  items: import_zod.z.lazy(() => ProductionPlanItemUpdateManyWithoutProductionPlanNestedInputSchema).optional()
}).strict();
var ProductionPlanUncheckedUpdateInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdById: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  items: import_zod.z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutProductionPlanNestedInputSchema).optional()
}).strict();
var ProductionPlanCreateManyInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  restaurantId: import_zod.z.number().int(),
  date: import_zod.z.coerce.date(),
  createdById: import_zod.z.number().int(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var ProductionPlanUpdateManyMutationInputSchema = import_zod.z.object({
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ProductionPlanUncheckedUpdateManyInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdById: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ProductionPlanItemCreateInputSchema = import_zod.z.object({
  quantity: import_zod.z.number().int(),
  unit: import_zod.z.string(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanCreateNestedOneWithoutItemsInputSchema),
  recipe: import_zod.z.lazy(() => RecipeCreateNestedOneWithoutProductionPlanItemInputSchema),
  assignedTo: import_zod.z.lazy(() => UserCreateNestedOneWithoutProductionPlanItemInputSchema).optional()
}).strict();
var ProductionPlanItemUncheckedCreateInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  productionPlanId: import_zod.z.number().int(),
  recipeId: import_zod.z.number().int(),
  quantity: import_zod.z.number().int(),
  unit: import_zod.z.string(),
  assignedToId: import_zod.z.number().int().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var ProductionPlanItemUpdateInputSchema = import_zod.z.object({
  quantity: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUpdateOneRequiredWithoutItemsNestedInputSchema).optional(),
  recipe: import_zod.z.lazy(() => RecipeUpdateOneRequiredWithoutProductionPlanItemNestedInputSchema).optional(),
  assignedTo: import_zod.z.lazy(() => UserUpdateOneWithoutProductionPlanItemNestedInputSchema).optional()
}).strict();
var ProductionPlanItemUncheckedUpdateInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  productionPlanId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  assignedToId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ProductionPlanItemCreateManyInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  productionPlanId: import_zod.z.number().int(),
  recipeId: import_zod.z.number().int(),
  quantity: import_zod.z.number().int(),
  unit: import_zod.z.string(),
  assignedToId: import_zod.z.number().int().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var ProductionPlanItemUpdateManyMutationInputSchema = import_zod.z.object({
  quantity: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ProductionPlanItemUncheckedUpdateManyInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  productionPlanId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  assignedToId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ShiftTaskCreateInputSchema = import_zod.z.object({
  taskType: import_zod.z.lazy(() => TaskTypeSchema),
  startTime: import_zod.z.coerce.date(),
  endTime: import_zod.z.coerce.date(),
  duration: import_zod.z.number().int(),
  notes: import_zod.z.string().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  shift: import_zod.z.lazy(() => ShiftCreateNestedOneWithoutShiftTaskInputSchema)
}).strict();
var ShiftTaskUncheckedCreateInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  shiftId: import_zod.z.number().int(),
  taskType: import_zod.z.lazy(() => TaskTypeSchema),
  startTime: import_zod.z.coerce.date(),
  endTime: import_zod.z.coerce.date(),
  duration: import_zod.z.number().int(),
  notes: import_zod.z.string().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var ShiftTaskUpdateInputSchema = import_zod.z.object({
  taskType: import_zod.z.union([import_zod.z.lazy(() => TaskTypeSchema), import_zod.z.lazy(() => EnumTaskTypeFieldUpdateOperationsInputSchema)]).optional(),
  startTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  duration: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  notes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  shift: import_zod.z.lazy(() => ShiftUpdateOneRequiredWithoutShiftTaskNestedInputSchema).optional()
}).strict();
var ShiftTaskUncheckedUpdateInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  shiftId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  taskType: import_zod.z.union([import_zod.z.lazy(() => TaskTypeSchema), import_zod.z.lazy(() => EnumTaskTypeFieldUpdateOperationsInputSchema)]).optional(),
  startTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  duration: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  notes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ShiftTaskCreateManyInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  shiftId: import_zod.z.number().int(),
  taskType: import_zod.z.lazy(() => TaskTypeSchema),
  startTime: import_zod.z.coerce.date(),
  endTime: import_zod.z.coerce.date(),
  duration: import_zod.z.number().int(),
  notes: import_zod.z.string().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var ShiftTaskUpdateManyMutationInputSchema = import_zod.z.object({
  taskType: import_zod.z.union([import_zod.z.lazy(() => TaskTypeSchema), import_zod.z.lazy(() => EnumTaskTypeFieldUpdateOperationsInputSchema)]).optional(),
  startTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  duration: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  notes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ShiftTaskUncheckedUpdateManyInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  shiftId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  taskType: import_zod.z.union([import_zod.z.lazy(() => TaskTypeSchema), import_zod.z.lazy(() => EnumTaskTypeFieldUpdateOperationsInputSchema)]).optional(),
  startTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  duration: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  notes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var AvailabilityCreateInputSchema = import_zod.z.object({
  dayOfWeek: import_zod.z.lazy(() => DayOfWeekSchema),
  startTime: import_zod.z.coerce.date(),
  endTime: import_zod.z.coerce.date(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  user: import_zod.z.lazy(() => UserCreateNestedOneWithoutAvailabilityInputSchema)
}).strict();
var AvailabilityUncheckedCreateInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  userId: import_zod.z.number().int(),
  dayOfWeek: import_zod.z.lazy(() => DayOfWeekSchema),
  startTime: import_zod.z.coerce.date(),
  endTime: import_zod.z.coerce.date(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var AvailabilityUpdateInputSchema = import_zod.z.object({
  dayOfWeek: import_zod.z.union([import_zod.z.lazy(() => DayOfWeekSchema), import_zod.z.lazy(() => EnumDayOfWeekFieldUpdateOperationsInputSchema)]).optional(),
  startTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  user: import_zod.z.lazy(() => UserUpdateOneRequiredWithoutAvailabilityNestedInputSchema).optional()
}).strict();
var AvailabilityUncheckedUpdateInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  userId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  dayOfWeek: import_zod.z.union([import_zod.z.lazy(() => DayOfWeekSchema), import_zod.z.lazy(() => EnumDayOfWeekFieldUpdateOperationsInputSchema)]).optional(),
  startTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var AvailabilityCreateManyInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  userId: import_zod.z.number().int(),
  dayOfWeek: import_zod.z.lazy(() => DayOfWeekSchema),
  startTime: import_zod.z.coerce.date(),
  endTime: import_zod.z.coerce.date(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var AvailabilityUpdateManyMutationInputSchema = import_zod.z.object({
  dayOfWeek: import_zod.z.union([import_zod.z.lazy(() => DayOfWeekSchema), import_zod.z.lazy(() => EnumDayOfWeekFieldUpdateOperationsInputSchema)]).optional(),
  startTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var AvailabilityUncheckedUpdateManyInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  userId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  dayOfWeek: import_zod.z.union([import_zod.z.lazy(() => DayOfWeekSchema), import_zod.z.lazy(() => EnumDayOfWeekFieldUpdateOperationsInputSchema)]).optional(),
  startTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var SchedulingConstraintCreateInputSchema = import_zod.z.object({
  date: import_zod.z.coerce.date(),
  constraintsType: import_zod.z.lazy(() => ConstraintTypeSchema),
  startTime: import_zod.z.coerce.date(),
  endTime: import_zod.z.coerce.date(),
  notes: import_zod.z.string().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  user: import_zod.z.lazy(() => UserCreateNestedOneWithoutSchedulingConstraintInputSchema)
}).strict();
var SchedulingConstraintUncheckedCreateInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  userId: import_zod.z.number().int(),
  date: import_zod.z.coerce.date(),
  constraintsType: import_zod.z.lazy(() => ConstraintTypeSchema),
  startTime: import_zod.z.coerce.date(),
  endTime: import_zod.z.coerce.date(),
  notes: import_zod.z.string().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var SchedulingConstraintUpdateInputSchema = import_zod.z.object({
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  constraintsType: import_zod.z.union([import_zod.z.lazy(() => ConstraintTypeSchema), import_zod.z.lazy(() => EnumConstraintTypeFieldUpdateOperationsInputSchema)]).optional(),
  startTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  notes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  user: import_zod.z.lazy(() => UserUpdateOneRequiredWithoutSchedulingConstraintNestedInputSchema).optional()
}).strict();
var SchedulingConstraintUncheckedUpdateInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  userId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  constraintsType: import_zod.z.union([import_zod.z.lazy(() => ConstraintTypeSchema), import_zod.z.lazy(() => EnumConstraintTypeFieldUpdateOperationsInputSchema)]).optional(),
  startTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  notes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var SchedulingConstraintCreateManyInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  userId: import_zod.z.number().int(),
  date: import_zod.z.coerce.date(),
  constraintsType: import_zod.z.lazy(() => ConstraintTypeSchema),
  startTime: import_zod.z.coerce.date(),
  endTime: import_zod.z.coerce.date(),
  notes: import_zod.z.string().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var SchedulingConstraintUpdateManyMutationInputSchema = import_zod.z.object({
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  constraintsType: import_zod.z.union([import_zod.z.lazy(() => ConstraintTypeSchema), import_zod.z.lazy(() => EnumConstraintTypeFieldUpdateOperationsInputSchema)]).optional(),
  startTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  notes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var SchedulingConstraintUncheckedUpdateManyInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  userId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  constraintsType: import_zod.z.union([import_zod.z.lazy(() => ConstraintTypeSchema), import_zod.z.lazy(() => EnumConstraintTypeFieldUpdateOperationsInputSchema)]).optional(),
  startTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  notes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var InventoryWithdrawalCreateInputSchema = import_zod.z.object({
  dateTime: import_zod.z.coerce.date(),
  quantity: import_zod.z.number(),
  unit: import_zod.z.string(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  inventoryItem: import_zod.z.lazy(() => InventoryItemCreateNestedOneWithoutInventoryWithdrawalInputSchema),
  recipe: import_zod.z.lazy(() => RecipeCreateNestedOneWithoutInventoryWithdrawalInputSchema).optional(),
  createdBy: import_zod.z.lazy(() => UserCreateNestedOneWithoutInventoryWithdrawalInputSchema)
}).strict();
var InventoryWithdrawalUncheckedCreateInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  inventoryItemId: import_zod.z.number().int(),
  dateTime: import_zod.z.coerce.date(),
  quantity: import_zod.z.number(),
  unit: import_zod.z.string(),
  recipeId: import_zod.z.number().int().optional().nullable(),
  createdById: import_zod.z.number().int(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var InventoryWithdrawalUpdateInputSchema = import_zod.z.object({
  dateTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  inventoryItem: import_zod.z.lazy(() => InventoryItemUpdateOneRequiredWithoutInventoryWithdrawalNestedInputSchema).optional(),
  recipe: import_zod.z.lazy(() => RecipeUpdateOneWithoutInventoryWithdrawalNestedInputSchema).optional(),
  createdBy: import_zod.z.lazy(() => UserUpdateOneRequiredWithoutInventoryWithdrawalNestedInputSchema).optional()
}).strict();
var InventoryWithdrawalUncheckedUpdateInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  inventoryItemId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  dateTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdById: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var InventoryWithdrawalCreateManyInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  inventoryItemId: import_zod.z.number().int(),
  dateTime: import_zod.z.coerce.date(),
  quantity: import_zod.z.number(),
  unit: import_zod.z.string(),
  recipeId: import_zod.z.number().int().optional().nullable(),
  createdById: import_zod.z.number().int(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var InventoryWithdrawalUpdateManyMutationInputSchema = import_zod.z.object({
  dateTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var InventoryWithdrawalUncheckedUpdateManyInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  inventoryItemId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  dateTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdById: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var AllergenCreateInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  ingredients: import_zod.z.lazy(() => IngredientAllergenCreateNestedManyWithoutAllergenInputSchema).optional()
}).strict();
var AllergenUncheckedCreateInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  ingredients: import_zod.z.lazy(() => IngredientAllergenUncheckedCreateNestedManyWithoutAllergenInputSchema).optional()
}).strict();
var AllergenUpdateInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  ingredients: import_zod.z.lazy(() => IngredientAllergenUpdateManyWithoutAllergenNestedInputSchema).optional()
}).strict();
var AllergenUncheckedUpdateInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  ingredients: import_zod.z.lazy(() => IngredientAllergenUncheckedUpdateManyWithoutAllergenNestedInputSchema).optional()
}).strict();
var AllergenCreateManyInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable()
}).strict();
var AllergenUpdateManyMutationInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var AllergenUncheckedUpdateManyInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var IngredientAllergenCreateInputSchema = import_zod.z.object({
  ingredient: import_zod.z.lazy(() => IngredientCreateNestedOneWithoutIngredientAllergenInputSchema),
  allergen: import_zod.z.lazy(() => AllergenCreateNestedOneWithoutIngredientsInputSchema)
}).strict();
var IngredientAllergenUncheckedCreateInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  ingredientId: import_zod.z.number().int(),
  allergenId: import_zod.z.number().int()
}).strict();
var IngredientAllergenUpdateInputSchema = import_zod.z.object({
  ingredient: import_zod.z.lazy(() => IngredientUpdateOneRequiredWithoutIngredientAllergenNestedInputSchema).optional(),
  allergen: import_zod.z.lazy(() => AllergenUpdateOneRequiredWithoutIngredientsNestedInputSchema).optional()
}).strict();
var IngredientAllergenUncheckedUpdateInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  ingredientId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  allergenId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var IngredientAllergenCreateManyInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  ingredientId: import_zod.z.number().int(),
  allergenId: import_zod.z.number().int()
}).strict();
var IngredientAllergenUpdateManyMutationInputSchema = import_zod.z.object({}).strict();
var IngredientAllergenUncheckedUpdateManyInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  ingredientId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  allergenId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var NutritionalRecommendationCreateInputSchema = import_zod.z.object({
  recommendation: import_zod.z.string(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  menuItem: import_zod.z.lazy(() => MenuItemCreateNestedOneWithoutNutritionalRecommendationInputSchema)
}).strict();
var NutritionalRecommendationUncheckedCreateInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  menuItemId: import_zod.z.number().int(),
  recommendation: import_zod.z.string(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var NutritionalRecommendationUpdateInputSchema = import_zod.z.object({
  recommendation: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  menuItem: import_zod.z.lazy(() => MenuItemUpdateOneRequiredWithoutNutritionalRecommendationNestedInputSchema).optional()
}).strict();
var NutritionalRecommendationUncheckedUpdateInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  menuItemId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recommendation: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var NutritionalRecommendationCreateManyInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  menuItemId: import_zod.z.number().int(),
  recommendation: import_zod.z.string(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var NutritionalRecommendationUpdateManyMutationInputSchema = import_zod.z.object({
  recommendation: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var NutritionalRecommendationUncheckedUpdateManyInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  menuItemId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recommendation: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var EarlyAccessCreateInputSchema = import_zod.z.object({
  email: import_zod.z.string(),
  isEmailSent: import_zod.z.boolean(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var EarlyAccessUncheckedCreateInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  email: import_zod.z.string(),
  isEmailSent: import_zod.z.boolean(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var EarlyAccessUpdateInputSchema = import_zod.z.object({
  email: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  isEmailSent: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var EarlyAccessUncheckedUpdateInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  email: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  isEmailSent: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var EarlyAccessCreateManyInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  email: import_zod.z.string(),
  isEmailSent: import_zod.z.boolean(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var EarlyAccessUpdateManyMutationInputSchema = import_zod.z.object({
  email: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  isEmailSent: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var EarlyAccessUncheckedUpdateManyInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  email: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  isEmailSent: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var OrganizationCreateInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  imageUrl: import_zod.z.string().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  restaurants: import_zod.z.lazy(() => RestaurantCreateNestedManyWithoutOrganizationInputSchema).optional(),
  users: import_zod.z.lazy(() => UserCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();
var OrganizationUncheckedCreateInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  imageUrl: import_zod.z.string().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  restaurants: import_zod.z.lazy(() => RestaurantUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  users: import_zod.z.lazy(() => UserUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();
var OrganizationUpdateInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurants: import_zod.z.lazy(() => RestaurantUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  users: import_zod.z.lazy(() => UserUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();
var OrganizationUncheckedUpdateInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurants: import_zod.z.lazy(() => RestaurantUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  users: import_zod.z.lazy(() => UserUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();
var OrganizationCreateManyInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  imageUrl: import_zod.z.string().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var OrganizationUpdateManyMutationInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var OrganizationUncheckedUpdateManyInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var RestaurantCreateInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  imageUrl: import_zod.z.string().optional().nullable(),
  address: import_zod.z.string(),
  city: import_zod.z.string(),
  zipCode: import_zod.z.string(),
  state: import_zod.z.string(),
  owner: import_zod.z.string(),
  foodCost: import_zod.z.number().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  isDeleted: import_zod.z.boolean().optional(),
  deleted: import_zod.z.coerce.date().optional().nullable(),
  organization: import_zod.z.lazy(() => OrganizationCreateNestedOneWithoutRestaurantsInputSchema).optional(),
  users: import_zod.z.lazy(() => UserCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: import_zod.z.lazy(() => CookBookCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: import_zod.z.lazy(() => InventoryCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: import_zod.z.lazy(() => OrderCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: import_zod.z.lazy(() => MenuCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipment: import_zod.z.lazy(() => EquipmentCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklist: import_zod.z.lazy(() => QualityChecklistCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qustomerFeedback: import_zod.z.lazy(() => CustomerFeedbackCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();
var RestaurantUncheckedCreateInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  imageUrl: import_zod.z.string().optional().nullable(),
  address: import_zod.z.string(),
  city: import_zod.z.string(),
  zipCode: import_zod.z.string(),
  state: import_zod.z.string(),
  owner: import_zod.z.string(),
  organizationId: import_zod.z.number().int().optional().nullable(),
  foodCost: import_zod.z.number().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  isDeleted: import_zod.z.boolean().optional(),
  deleted: import_zod.z.coerce.date().optional().nullable(),
  users: import_zod.z.lazy(() => UserUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: import_zod.z.lazy(() => CookBookUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: import_zod.z.lazy(() => InventoryUncheckedCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: import_zod.z.lazy(() => OrderUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: import_zod.z.lazy(() => MenuUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipment: import_zod.z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklist: import_zod.z.lazy(() => QualityChecklistUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qustomerFeedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();
var RestaurantUpdateInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  address: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  city: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  zipCode: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  state: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  owner: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  deleted: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  organization: import_zod.z.lazy(() => OrganizationUpdateOneWithoutRestaurantsNestedInputSchema).optional(),
  users: import_zod.z.lazy(() => UserUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: import_zod.z.lazy(() => CookBookUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: import_zod.z.lazy(() => InventoryUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: import_zod.z.lazy(() => OrderUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: import_zod.z.lazy(() => MenuUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipment: import_zod.z.lazy(() => EquipmentUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklist: import_zod.z.lazy(() => QualityChecklistUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qustomerFeedback: import_zod.z.lazy(() => CustomerFeedbackUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();
var RestaurantUncheckedUpdateInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  address: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  city: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  zipCode: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  state: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  owner: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  deleted: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  users: import_zod.z.lazy(() => UserUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: import_zod.z.lazy(() => CookBookUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: import_zod.z.lazy(() => InventoryUncheckedUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: import_zod.z.lazy(() => OrderUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: import_zod.z.lazy(() => MenuUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipment: import_zod.z.lazy(() => EquipmentUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklist: import_zod.z.lazy(() => QualityChecklistUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qustomerFeedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();
var RestaurantCreateManyInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  imageUrl: import_zod.z.string().optional().nullable(),
  address: import_zod.z.string(),
  city: import_zod.z.string(),
  zipCode: import_zod.z.string(),
  state: import_zod.z.string(),
  owner: import_zod.z.string(),
  organizationId: import_zod.z.number().int().optional().nullable(),
  foodCost: import_zod.z.number().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  isDeleted: import_zod.z.boolean().optional(),
  deleted: import_zod.z.coerce.date().optional().nullable()
}).strict();
var RestaurantUpdateManyMutationInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  address: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  city: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  zipCode: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  state: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  owner: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  deleted: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var RestaurantUncheckedUpdateManyInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  address: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  city: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  zipCode: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  state: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  owner: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  deleted: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var UserCreateInputSchema = import_zod.z.object({
  email: import_zod.z.string(),
  sub: import_zod.z.number().int().optional().nullable(),
  passwordHash: import_zod.z.string(),
  firstName: import_zod.z.string(),
  lastName: import_zod.z.string(),
  profileImage: import_zod.z.string().optional().nullable(),
  verified: import_zod.z.boolean().optional(),
  role: import_zod.z.lazy(() => UserRoleSchema),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  organization: import_zod.z.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantCreateNestedOneWithoutUsersInputSchema).optional(),
  shifts: import_zod.z.lazy(() => ShiftCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserUncheckedCreateInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  email: import_zod.z.string(),
  sub: import_zod.z.number().int().optional().nullable(),
  passwordHash: import_zod.z.string(),
  firstName: import_zod.z.string(),
  lastName: import_zod.z.string(),
  profileImage: import_zod.z.string().optional().nullable(),
  verified: import_zod.z.boolean().optional(),
  role: import_zod.z.lazy(() => UserRoleSchema),
  organizationId: import_zod.z.number().int().optional().nullable(),
  restaurantId: import_zod.z.number().int().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  shifts: import_zod.z.lazy(() => ShiftUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteUncheckedCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserUpdateInputSchema = import_zod.z.object({
  email: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: import_zod.z.union([import_zod.z.lazy(() => UserRoleSchema), import_zod.z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  organization: import_zod.z.lazy(() => OrganizationUpdateOneWithoutUsersNestedInputSchema).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantUpdateOneWithoutUsersNestedInputSchema).optional(),
  shifts: import_zod.z.lazy(() => ShiftUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var UserUncheckedUpdateInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  email: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: import_zod.z.union([import_zod.z.lazy(() => UserRoleSchema), import_zod.z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  shifts: import_zod.z.lazy(() => ShiftUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemUncheckedUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var UserCreateManyInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  email: import_zod.z.string(),
  sub: import_zod.z.number().int().optional().nullable(),
  passwordHash: import_zod.z.string(),
  firstName: import_zod.z.string(),
  lastName: import_zod.z.string(),
  profileImage: import_zod.z.string().optional().nullable(),
  verified: import_zod.z.boolean().optional(),
  role: import_zod.z.lazy(() => UserRoleSchema),
  organizationId: import_zod.z.number().int().optional().nullable(),
  restaurantId: import_zod.z.number().int().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var UserUpdateManyMutationInputSchema = import_zod.z.object({
  email: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: import_zod.z.union([import_zod.z.lazy(() => UserRoleSchema), import_zod.z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var UserUncheckedUpdateManyInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  email: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: import_zod.z.union([import_zod.z.lazy(() => UserRoleSchema), import_zod.z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var SessionCreateInputSchema = import_zod.z.object({
  id: import_zod.z.string().optional(),
  code: import_zod.z.string(),
  token: import_zod.z.string(),
  expiresAt: import_zod.z.coerce.date(),
  createdAt: import_zod.z.coerce.date().optional(),
  user: import_zod.z.lazy(() => UserCreateNestedOneWithoutSessionsInputSchema)
}).strict();
var SessionUncheckedCreateInputSchema = import_zod.z.object({
  id: import_zod.z.string().optional(),
  userId: import_zod.z.number().int(),
  code: import_zod.z.string(),
  token: import_zod.z.string(),
  expiresAt: import_zod.z.coerce.date(),
  createdAt: import_zod.z.coerce.date().optional()
}).strict();
var SessionUpdateInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  code: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  token: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  expiresAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  user: import_zod.z.lazy(() => UserUpdateOneRequiredWithoutSessionsNestedInputSchema).optional()
}).strict();
var SessionUncheckedUpdateInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  userId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  code: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  token: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  expiresAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var SessionCreateManyInputSchema = import_zod.z.object({
  id: import_zod.z.string().optional(),
  userId: import_zod.z.number().int(),
  code: import_zod.z.string(),
  token: import_zod.z.string(),
  expiresAt: import_zod.z.coerce.date(),
  createdAt: import_zod.z.coerce.date().optional()
}).strict();
var SessionUpdateManyMutationInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  code: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  token: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  expiresAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var SessionUncheckedUpdateManyInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  userId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  code: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  token: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  expiresAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var CookBookCreateInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  imageUrl: import_zod.z.string().optional().nullable(),
  category: import_zod.z.string(),
  recipes: import_zod.z.lazy(() => RecipeCreateNestedManyWithoutCookBookInputSchema).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantCreateNestedOneWithoutCookbooksInputSchema).optional()
}).strict();
var CookBookUncheckedCreateInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  imageUrl: import_zod.z.string().optional().nullable(),
  category: import_zod.z.string(),
  restaurantId: import_zod.z.number().int().optional().nullable(),
  recipes: import_zod.z.lazy(() => RecipeUncheckedCreateNestedManyWithoutCookBookInputSchema).optional()
}).strict();
var CookBookUpdateInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  category: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recipes: import_zod.z.lazy(() => RecipeUpdateManyWithoutCookBookNestedInputSchema).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantUpdateOneWithoutCookbooksNestedInputSchema).optional()
}).strict();
var CookBookUncheckedUpdateInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  category: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  recipes: import_zod.z.lazy(() => RecipeUncheckedUpdateManyWithoutCookBookNestedInputSchema).optional()
}).strict();
var CookBookCreateManyInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  imageUrl: import_zod.z.string().optional().nullable(),
  category: import_zod.z.string(),
  restaurantId: import_zod.z.number().int().optional().nullable()
}).strict();
var CookBookUpdateManyMutationInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  category: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var CookBookUncheckedUpdateManyInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  category: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var RecipeCreateInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.string().optional().nullable(),
  servings: import_zod.z.number().int(),
  cookTime: import_zod.z.number().int(),
  prepTime: import_zod.z.number().int(),
  frequency: import_zod.z.number().int().optional().nullable(),
  foodCost: import_zod.z.number().optional().nullable(),
  isDeleted: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  restaurant: import_zod.z.lazy(() => RestaurantCreateNestedOneWithoutRecipesInputSchema),
  cookBook: import_zod.z.lazy(() => CookBookCreateNestedOneWithoutRecipesInputSchema),
  ingredients: import_zod.z.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeCreateNestedManyWithoutRecipeInputSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionCreateNestedManyWithoutRecipesInputSchema).optional()
}).strict();
var RecipeUncheckedCreateInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.string().optional().nullable(),
  servings: import_zod.z.number().int(),
  cookTime: import_zod.z.number().int(),
  prepTime: import_zod.z.number().int(),
  frequency: import_zod.z.number().int().optional().nullable(),
  restaurantId: import_zod.z.number().int(),
  cookBookId: import_zod.z.number().int(),
  foodCost: import_zod.z.number().optional().nullable(),
  isDeleted: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutRecipesInputSchema).optional()
}).strict();
var RecipeUpdateInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  cookBook: import_zod.z.lazy(() => CookBookUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUpdateManyWithoutRecipeNestedInputSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUpdateManyWithoutRecipesNestedInputSchema).optional()
}).strict();
var RecipeUncheckedUpdateInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookBookId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional()
}).strict();
var RecipeCreateManyInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.string().optional().nullable(),
  servings: import_zod.z.number().int(),
  cookTime: import_zod.z.number().int(),
  prepTime: import_zod.z.number().int(),
  frequency: import_zod.z.number().int().optional().nullable(),
  restaurantId: import_zod.z.number().int(),
  cookBookId: import_zod.z.number().int(),
  foodCost: import_zod.z.number().optional().nullable(),
  isDeleted: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var RecipeUpdateManyMutationInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var RecipeUncheckedUpdateManyInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookBookId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var IngredientCreateInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  category: import_zod.z.string(),
  price: import_zod.z.number(),
  recipeIngredients: import_zod.z.lazy(() => RecipeIngredientCreateNestedManyWithoutIngredientInputSchema).optional(),
  inventoryItems: import_zod.z.lazy(() => InventoryItemCreateNestedManyWithoutIngredientInputSchema).optional(),
  orderItems: import_zod.z.lazy(() => OrderItemCreateNestedManyWithoutIngredientInputSchema).optional(),
  vendors: import_zod.z.lazy(() => VendorCreateNestedManyWithoutIngredientsInputSchema).optional(),
  WasteRecord: import_zod.z.lazy(() => WasteRecordCreateNestedManyWithoutIngredienteInputSchema).optional(),
  IngredientAllergen: import_zod.z.lazy(() => IngredientAllergenCreateNestedManyWithoutIngredientInputSchema).optional(),
  SupplierPriceHistory: import_zod.z.lazy(() => SupplierPriceHistoryCreateNestedManyWithoutIngredientInputSchema).optional(),
  DietaryRestriction: import_zod.z.lazy(() => DietaryRestrictionCreateNestedOneWithoutIngredientsInputSchema).optional()
}).strict();
var IngredientUncheckedCreateInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  category: import_zod.z.string(),
  price: import_zod.z.number(),
  dietaryRestrictionId: import_zod.z.number().int().optional().nullable(),
  recipeIngredients: import_zod.z.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  inventoryItems: import_zod.z.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  orderItems: import_zod.z.lazy(() => OrderItemUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  vendors: import_zod.z.lazy(() => VendorUncheckedCreateNestedManyWithoutIngredientsInputSchema).optional(),
  WasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutIngredienteInputSchema).optional(),
  IngredientAllergen: import_zod.z.lazy(() => IngredientAllergenUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  SupplierPriceHistory: import_zod.z.lazy(() => SupplierPriceHistoryUncheckedCreateNestedManyWithoutIngredientInputSchema).optional()
}).strict();
var IngredientUpdateInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  category: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIngredients: import_zod.z.lazy(() => RecipeIngredientUpdateManyWithoutIngredientNestedInputSchema).optional(),
  inventoryItems: import_zod.z.lazy(() => InventoryItemUpdateManyWithoutIngredientNestedInputSchema).optional(),
  orderItems: import_zod.z.lazy(() => OrderItemUpdateManyWithoutIngredientNestedInputSchema).optional(),
  vendors: import_zod.z.lazy(() => VendorUpdateManyWithoutIngredientsNestedInputSchema).optional(),
  WasteRecord: import_zod.z.lazy(() => WasteRecordUpdateManyWithoutIngredienteNestedInputSchema).optional(),
  IngredientAllergen: import_zod.z.lazy(() => IngredientAllergenUpdateManyWithoutIngredientNestedInputSchema).optional(),
  SupplierPriceHistory: import_zod.z.lazy(() => SupplierPriceHistoryUpdateManyWithoutIngredientNestedInputSchema).optional(),
  DietaryRestriction: import_zod.z.lazy(() => DietaryRestrictionUpdateOneWithoutIngredientsNestedInputSchema).optional()
}).strict();
var IngredientUncheckedUpdateInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  category: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  dietaryRestrictionId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  recipeIngredients: import_zod.z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  inventoryItems: import_zod.z.lazy(() => InventoryItemUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  orderItems: import_zod.z.lazy(() => OrderItemUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  vendors: import_zod.z.lazy(() => VendorUncheckedUpdateManyWithoutIngredientsNestedInputSchema).optional(),
  WasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedUpdateManyWithoutIngredienteNestedInputSchema).optional(),
  IngredientAllergen: import_zod.z.lazy(() => IngredientAllergenUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  SupplierPriceHistory: import_zod.z.lazy(() => SupplierPriceHistoryUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional()
}).strict();
var IngredientCreateManyInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  category: import_zod.z.string(),
  price: import_zod.z.number(),
  dietaryRestrictionId: import_zod.z.number().int().optional().nullable()
}).strict();
var IngredientUpdateManyMutationInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  category: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var IngredientUncheckedUpdateManyInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  category: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  dietaryRestrictionId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var RecipeIngredientCreateInputSchema = import_zod.z.object({
  quantity: import_zod.z.number(),
  unit: import_zod.z.string(),
  joinAt: import_zod.z.coerce.date().optional(),
  recipe: import_zod.z.lazy(() => RecipeCreateNestedOneWithoutIngredientsInputSchema),
  ingredient: import_zod.z.lazy(() => IngredientCreateNestedOneWithoutRecipeIngredientsInputSchema),
  RecipeVersion: import_zod.z.lazy(() => RecipeVersionCreateNestedOneWithoutIngredientsInputSchema).optional()
}).strict();
var RecipeIngredientUncheckedCreateInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  recipeId: import_zod.z.number().int(),
  ingredientId: import_zod.z.number().int(),
  quantity: import_zod.z.number(),
  unit: import_zod.z.string(),
  joinAt: import_zod.z.coerce.date().optional(),
  recipeVersionId: import_zod.z.number().int().optional().nullable()
}).strict();
var RecipeIngredientUpdateInputSchema = import_zod.z.object({
  quantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  joinAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  recipe: import_zod.z.lazy(() => RecipeUpdateOneRequiredWithoutIngredientsNestedInputSchema).optional(),
  ingredient: import_zod.z.lazy(() => IngredientUpdateOneRequiredWithoutRecipeIngredientsNestedInputSchema).optional(),
  RecipeVersion: import_zod.z.lazy(() => RecipeVersionUpdateOneWithoutIngredientsNestedInputSchema).optional()
}).strict();
var RecipeIngredientUncheckedUpdateInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  ingredientId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  joinAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  recipeVersionId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var RecipeIngredientCreateManyInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  recipeId: import_zod.z.number().int(),
  ingredientId: import_zod.z.number().int(),
  quantity: import_zod.z.number(),
  unit: import_zod.z.string(),
  joinAt: import_zod.z.coerce.date().optional(),
  recipeVersionId: import_zod.z.number().int().optional().nullable()
}).strict();
var RecipeIngredientUpdateManyMutationInputSchema = import_zod.z.object({
  quantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  joinAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var RecipeIngredientUncheckedUpdateManyInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  ingredientId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  joinAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  recipeVersionId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var RecipeInstructionCreateInputSchema = import_zod.z.object({
  stepNumber: import_zod.z.number().int(),
  instruction: import_zod.z.string(),
  imageUrl: import_zod.z.string().optional().nullable(),
  recipe: import_zod.z.lazy(() => RecipeCreateNestedOneWithoutInstructionsInputSchema),
  RecipeVersion: import_zod.z.lazy(() => RecipeVersionCreateNestedOneWithoutInstructionsInputSchema).optional()
}).strict();
var RecipeInstructionUncheckedCreateInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  recipeId: import_zod.z.number().int(),
  stepNumber: import_zod.z.number().int(),
  instruction: import_zod.z.string(),
  imageUrl: import_zod.z.string().optional().nullable(),
  recipeVersionId: import_zod.z.number().int().optional().nullable()
}).strict();
var RecipeInstructionUpdateInputSchema = import_zod.z.object({
  stepNumber: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  instruction: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  recipe: import_zod.z.lazy(() => RecipeUpdateOneRequiredWithoutInstructionsNestedInputSchema).optional(),
  RecipeVersion: import_zod.z.lazy(() => RecipeVersionUpdateOneWithoutInstructionsNestedInputSchema).optional()
}).strict();
var RecipeInstructionUncheckedUpdateInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  stepNumber: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  instruction: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  recipeVersionId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var RecipeInstructionCreateManyInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  recipeId: import_zod.z.number().int(),
  stepNumber: import_zod.z.number().int(),
  instruction: import_zod.z.string(),
  imageUrl: import_zod.z.string().optional().nullable(),
  recipeVersionId: import_zod.z.number().int().optional().nullable()
}).strict();
var RecipeInstructionUpdateManyMutationInputSchema = import_zod.z.object({
  stepNumber: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  instruction: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var RecipeInstructionUncheckedUpdateManyInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  stepNumber: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  instruction: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  recipeVersionId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var InventoryCreateInputSchema = import_zod.z.object({
  restaurant: import_zod.z.lazy(() => RestaurantCreateNestedOneWithoutInventoryInputSchema),
  items: import_zod.z.lazy(() => InventoryItemCreateNestedManyWithoutInventoryInputSchema).optional()
}).strict();
var InventoryUncheckedCreateInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  restaurantId: import_zod.z.number().int(),
  items: import_zod.z.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutInventoryInputSchema).optional()
}).strict();
var InventoryUpdateInputSchema = import_zod.z.object({
  restaurant: import_zod.z.lazy(() => RestaurantUpdateOneRequiredWithoutInventoryNestedInputSchema).optional(),
  items: import_zod.z.lazy(() => InventoryItemUpdateManyWithoutInventoryNestedInputSchema).optional()
}).strict();
var InventoryUncheckedUpdateInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  items: import_zod.z.lazy(() => InventoryItemUncheckedUpdateManyWithoutInventoryNestedInputSchema).optional()
}).strict();
var InventoryCreateManyInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  restaurantId: import_zod.z.number().int()
}).strict();
var InventoryUpdateManyMutationInputSchema = import_zod.z.object({}).strict();
var InventoryUncheckedUpdateManyInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var InventoryItemCreateInputSchema = import_zod.z.object({
  quantity: import_zod.z.number(),
  unit: import_zod.z.string(),
  minQuantity: import_zod.z.number(),
  restockThreshold: import_zod.z.number(),
  lastUpdated: import_zod.z.coerce.date().optional(),
  inventory: import_zod.z.lazy(() => InventoryCreateNestedOneWithoutItemsInputSchema),
  ingredient: import_zod.z.lazy(() => IngredientCreateNestedOneWithoutInventoryItemsInputSchema),
  lastUpdatedBy: import_zod.z.lazy(() => UserCreateNestedOneWithoutInventoryUpdatesInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutInventoryItemInputSchema).optional()
}).strict();
var InventoryItemUncheckedCreateInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  inventoryId: import_zod.z.number().int(),
  ingredientId: import_zod.z.number().int(),
  quantity: import_zod.z.number(),
  unit: import_zod.z.string(),
  minQuantity: import_zod.z.number(),
  restockThreshold: import_zod.z.number(),
  lastUpdatedById: import_zod.z.number().int().optional().nullable(),
  lastUpdated: import_zod.z.coerce.date().optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutInventoryItemInputSchema).optional()
}).strict();
var InventoryItemUpdateInputSchema = import_zod.z.object({
  quantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  minQuantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  restockThreshold: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  lastUpdated: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  inventory: import_zod.z.lazy(() => InventoryUpdateOneRequiredWithoutItemsNestedInputSchema).optional(),
  ingredient: import_zod.z.lazy(() => IngredientUpdateOneRequiredWithoutInventoryItemsNestedInputSchema).optional(),
  lastUpdatedBy: import_zod.z.lazy(() => UserUpdateOneWithoutInventoryUpdatesNestedInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUpdateManyWithoutInventoryItemNestedInputSchema).optional()
}).strict();
var InventoryItemUncheckedUpdateInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  inventoryId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  ingredientId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  minQuantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  restockThreshold: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  lastUpdatedById: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastUpdated: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutInventoryItemNestedInputSchema).optional()
}).strict();
var InventoryItemCreateManyInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  inventoryId: import_zod.z.number().int(),
  ingredientId: import_zod.z.number().int(),
  quantity: import_zod.z.number(),
  unit: import_zod.z.string(),
  minQuantity: import_zod.z.number(),
  restockThreshold: import_zod.z.number(),
  lastUpdatedById: import_zod.z.number().int().optional().nullable(),
  lastUpdated: import_zod.z.coerce.date().optional()
}).strict();
var InventoryItemUpdateManyMutationInputSchema = import_zod.z.object({
  quantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  minQuantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  restockThreshold: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  lastUpdated: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var InventoryItemUncheckedUpdateManyInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  inventoryId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  ingredientId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  minQuantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  restockThreshold: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  lastUpdatedById: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastUpdated: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var OrderCreateInputSchema = import_zod.z.object({
  status: import_zod.z.lazy(() => OrderStatusSchema),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  restaurant: import_zod.z.lazy(() => RestaurantCreateNestedOneWithoutOrdersInputSchema),
  vendor: import_zod.z.lazy(() => VendorCreateNestedOneWithoutOrdersInputSchema),
  items: import_zod.z.lazy(() => OrderItemCreateNestedManyWithoutOrderInputSchema).optional()
}).strict();
var OrderUncheckedCreateInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  restaurantId: import_zod.z.number().int(),
  vendorId: import_zod.z.number().int(),
  status: import_zod.z.lazy(() => OrderStatusSchema),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  items: import_zod.z.lazy(() => OrderItemUncheckedCreateNestedManyWithoutOrderInputSchema).optional()
}).strict();
var OrderUpdateInputSchema = import_zod.z.object({
  status: import_zod.z.union([import_zod.z.lazy(() => OrderStatusSchema), import_zod.z.lazy(() => EnumOrderStatusFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantUpdateOneRequiredWithoutOrdersNestedInputSchema).optional(),
  vendor: import_zod.z.lazy(() => VendorUpdateOneRequiredWithoutOrdersNestedInputSchema).optional(),
  items: import_zod.z.lazy(() => OrderItemUpdateManyWithoutOrderNestedInputSchema).optional()
}).strict();
var OrderUncheckedUpdateInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  vendorId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => OrderStatusSchema), import_zod.z.lazy(() => EnumOrderStatusFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  items: import_zod.z.lazy(() => OrderItemUncheckedUpdateManyWithoutOrderNestedInputSchema).optional()
}).strict();
var OrderCreateManyInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  restaurantId: import_zod.z.number().int(),
  vendorId: import_zod.z.number().int(),
  status: import_zod.z.lazy(() => OrderStatusSchema),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var OrderUpdateManyMutationInputSchema = import_zod.z.object({
  status: import_zod.z.union([import_zod.z.lazy(() => OrderStatusSchema), import_zod.z.lazy(() => EnumOrderStatusFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var OrderUncheckedUpdateManyInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  vendorId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => OrderStatusSchema), import_zod.z.lazy(() => EnumOrderStatusFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var OrderItemCreateInputSchema = import_zod.z.object({
  quantity: import_zod.z.number(),
  unit: import_zod.z.string(),
  price: import_zod.z.number(),
  order: import_zod.z.lazy(() => OrderCreateNestedOneWithoutItemsInputSchema),
  ingredient: import_zod.z.lazy(() => IngredientCreateNestedOneWithoutOrderItemsInputSchema)
}).strict();
var OrderItemUncheckedCreateInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  orderId: import_zod.z.number().int(),
  ingredientId: import_zod.z.number().int(),
  quantity: import_zod.z.number(),
  unit: import_zod.z.string(),
  price: import_zod.z.number()
}).strict();
var OrderItemUpdateInputSchema = import_zod.z.object({
  quantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  order: import_zod.z.lazy(() => OrderUpdateOneRequiredWithoutItemsNestedInputSchema).optional(),
  ingredient: import_zod.z.lazy(() => IngredientUpdateOneRequiredWithoutOrderItemsNestedInputSchema).optional()
}).strict();
var OrderItemUncheckedUpdateInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  orderId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  ingredientId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var OrderItemCreateManyInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  orderId: import_zod.z.number().int(),
  ingredientId: import_zod.z.number().int(),
  quantity: import_zod.z.number(),
  unit: import_zod.z.string(),
  price: import_zod.z.number()
}).strict();
var OrderItemUpdateManyMutationInputSchema = import_zod.z.object({
  quantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var OrderItemUncheckedUpdateManyInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  orderId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  ingredientId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var VendorCreateInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  contact: import_zod.z.string(),
  email: import_zod.z.string(),
  phone: import_zod.z.string(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  orders: import_zod.z.lazy(() => OrderCreateNestedManyWithoutVendorInputSchema).optional(),
  ingredients: import_zod.z.lazy(() => IngredientCreateNestedManyWithoutVendorsInputSchema).optional(),
  supplierPriceHistory: import_zod.z.lazy(() => SupplierPriceHistoryCreateNestedManyWithoutVendorInputSchema).optional()
}).strict();
var VendorUncheckedCreateInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  contact: import_zod.z.string(),
  email: import_zod.z.string(),
  phone: import_zod.z.string(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  orders: import_zod.z.lazy(() => OrderUncheckedCreateNestedManyWithoutVendorInputSchema).optional(),
  ingredients: import_zod.z.lazy(() => IngredientUncheckedCreateNestedManyWithoutVendorsInputSchema).optional(),
  supplierPriceHistory: import_zod.z.lazy(() => SupplierPriceHistoryUncheckedCreateNestedManyWithoutVendorInputSchema).optional()
}).strict();
var VendorUpdateInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  contact: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  email: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  phone: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  orders: import_zod.z.lazy(() => OrderUpdateManyWithoutVendorNestedInputSchema).optional(),
  ingredients: import_zod.z.lazy(() => IngredientUpdateManyWithoutVendorsNestedInputSchema).optional(),
  supplierPriceHistory: import_zod.z.lazy(() => SupplierPriceHistoryUpdateManyWithoutVendorNestedInputSchema).optional()
}).strict();
var VendorUncheckedUpdateInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  contact: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  email: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  phone: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  orders: import_zod.z.lazy(() => OrderUncheckedUpdateManyWithoutVendorNestedInputSchema).optional(),
  ingredients: import_zod.z.lazy(() => IngredientUncheckedUpdateManyWithoutVendorsNestedInputSchema).optional(),
  supplierPriceHistory: import_zod.z.lazy(() => SupplierPriceHistoryUncheckedUpdateManyWithoutVendorNestedInputSchema).optional()
}).strict();
var VendorCreateManyInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  contact: import_zod.z.string(),
  email: import_zod.z.string(),
  phone: import_zod.z.string(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var VendorUpdateManyMutationInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  contact: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  email: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  phone: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var VendorUncheckedUpdateManyInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  contact: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  email: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  phone: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ShiftCreateInputSchema = import_zod.z.object({
  startTime: import_zod.z.coerce.date(),
  endTime: import_zod.z.coerce.date(),
  status: import_zod.z.lazy(() => ShiftStatusSchema),
  user: import_zod.z.lazy(() => UserCreateNestedOneWithoutShiftsInputSchema),
  ShiftTask: import_zod.z.lazy(() => ShiftTaskCreateNestedManyWithoutShiftInputSchema).optional()
}).strict();
var ShiftUncheckedCreateInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  userId: import_zod.z.number().int(),
  startTime: import_zod.z.coerce.date(),
  endTime: import_zod.z.coerce.date(),
  status: import_zod.z.lazy(() => ShiftStatusSchema),
  ShiftTask: import_zod.z.lazy(() => ShiftTaskUncheckedCreateNestedManyWithoutShiftInputSchema).optional()
}).strict();
var ShiftUpdateInputSchema = import_zod.z.object({
  startTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => ShiftStatusSchema), import_zod.z.lazy(() => EnumShiftStatusFieldUpdateOperationsInputSchema)]).optional(),
  user: import_zod.z.lazy(() => UserUpdateOneRequiredWithoutShiftsNestedInputSchema).optional(),
  ShiftTask: import_zod.z.lazy(() => ShiftTaskUpdateManyWithoutShiftNestedInputSchema).optional()
}).strict();
var ShiftUncheckedUpdateInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  userId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  startTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => ShiftStatusSchema), import_zod.z.lazy(() => EnumShiftStatusFieldUpdateOperationsInputSchema)]).optional(),
  ShiftTask: import_zod.z.lazy(() => ShiftTaskUncheckedUpdateManyWithoutShiftNestedInputSchema).optional()
}).strict();
var ShiftCreateManyInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  userId: import_zod.z.number().int(),
  startTime: import_zod.z.coerce.date(),
  endTime: import_zod.z.coerce.date(),
  status: import_zod.z.lazy(() => ShiftStatusSchema)
}).strict();
var ShiftUpdateManyMutationInputSchema = import_zod.z.object({
  startTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => ShiftStatusSchema), import_zod.z.lazy(() => EnumShiftStatusFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ShiftUncheckedUpdateManyInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  userId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  startTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => ShiftStatusSchema), import_zod.z.lazy(() => EnumShiftStatusFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var PrepBoardCreateInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  status: import_zod.z.lazy(() => PrepStatusSchema),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  recipes: import_zod.z.lazy(() => RecipeCreateNestedManyWithoutPrepBoardsInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemCreateNestedManyWithoutPrepBoardInputSchema).optional()
}).strict();
var PrepBoardUncheckedCreateInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  status: import_zod.z.lazy(() => PrepStatusSchema),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  recipes: import_zod.z.lazy(() => RecipeUncheckedCreateNestedManyWithoutPrepBoardsInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutPrepBoardInputSchema).optional()
}).strict();
var PrepBoardUpdateInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => PrepStatusSchema), import_zod.z.lazy(() => EnumPrepStatusFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  recipes: import_zod.z.lazy(() => RecipeUpdateManyWithoutPrepBoardsNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUpdateManyWithoutPrepBoardNestedInputSchema).optional()
}).strict();
var PrepBoardUncheckedUpdateInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => PrepStatusSchema), import_zod.z.lazy(() => EnumPrepStatusFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  recipes: import_zod.z.lazy(() => RecipeUncheckedUpdateManyWithoutPrepBoardsNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedUpdateManyWithoutPrepBoardNestedInputSchema).optional()
}).strict();
var PrepBoardCreateManyInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  status: import_zod.z.lazy(() => PrepStatusSchema),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var PrepBoardUpdateManyMutationInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => PrepStatusSchema), import_zod.z.lazy(() => EnumPrepStatusFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var PrepBoardUncheckedUpdateManyInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => PrepStatusSchema), import_zod.z.lazy(() => EnumPrepStatusFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var PrepItemCreateInputSchema = import_zod.z.object({
  quantity: import_zod.z.number().int(),
  status: import_zod.z.lazy(() => PrepStatusSchema),
  prepBoard: import_zod.z.lazy(() => PrepBoardCreateNestedOneWithoutPrepItemsInputSchema),
  recipe: import_zod.z.lazy(() => RecipeCreateNestedOneWithoutPrepItemsInputSchema),
  assignedTo: import_zod.z.lazy(() => UserCreateNestedOneWithoutPrepItemsInputSchema)
}).strict();
var PrepItemUncheckedCreateInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  prepBoardId: import_zod.z.number().int(),
  recipeId: import_zod.z.number().int(),
  quantity: import_zod.z.number().int(),
  status: import_zod.z.lazy(() => PrepStatusSchema),
  assignedToId: import_zod.z.number().int()
}).strict();
var PrepItemUpdateInputSchema = import_zod.z.object({
  quantity: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => PrepStatusSchema), import_zod.z.lazy(() => EnumPrepStatusFieldUpdateOperationsInputSchema)]).optional(),
  prepBoard: import_zod.z.lazy(() => PrepBoardUpdateOneRequiredWithoutPrepItemsNestedInputSchema).optional(),
  recipe: import_zod.z.lazy(() => RecipeUpdateOneRequiredWithoutPrepItemsNestedInputSchema).optional(),
  assignedTo: import_zod.z.lazy(() => UserUpdateOneRequiredWithoutPrepItemsNestedInputSchema).optional()
}).strict();
var PrepItemUncheckedUpdateInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepBoardId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => PrepStatusSchema), import_zod.z.lazy(() => EnumPrepStatusFieldUpdateOperationsInputSchema)]).optional(),
  assignedToId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var PrepItemCreateManyInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  prepBoardId: import_zod.z.number().int(),
  recipeId: import_zod.z.number().int(),
  quantity: import_zod.z.number().int(),
  status: import_zod.z.lazy(() => PrepStatusSchema),
  assignedToId: import_zod.z.number().int()
}).strict();
var PrepItemUpdateManyMutationInputSchema = import_zod.z.object({
  quantity: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => PrepStatusSchema), import_zod.z.lazy(() => EnumPrepStatusFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var PrepItemUncheckedUpdateManyInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepBoardId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => PrepStatusSchema), import_zod.z.lazy(() => EnumPrepStatusFieldUpdateOperationsInputSchema)]).optional(),
  assignedToId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var PasswordResetCreateInputSchema = import_zod.z.object({
  token: import_zod.z.string(),
  expiresAt: import_zod.z.coerce.date(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  user: import_zod.z.lazy(() => UserCreateNestedOneWithoutPasswordResetsInputSchema)
}).strict();
var PasswordResetUncheckedCreateInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  token: import_zod.z.string(),
  userId: import_zod.z.number().int(),
  expiresAt: import_zod.z.coerce.date(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var PasswordResetUpdateInputSchema = import_zod.z.object({
  token: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  expiresAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  user: import_zod.z.lazy(() => UserUpdateOneRequiredWithoutPasswordResetsNestedInputSchema).optional()
}).strict();
var PasswordResetUncheckedUpdateInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  token: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  userId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  expiresAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var PasswordResetCreateManyInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  token: import_zod.z.string(),
  userId: import_zod.z.number().int(),
  expiresAt: import_zod.z.coerce.date(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var PasswordResetUpdateManyMutationInputSchema = import_zod.z.object({
  token: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  expiresAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var PasswordResetUncheckedUpdateManyInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  token: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  userId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  expiresAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var MenuCreateInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  restaurant: import_zod.z.lazy(() => RestaurantCreateNestedOneWithoutMenusInputSchema),
  menuItems: import_zod.z.lazy(() => MenuItemCreateNestedManyWithoutMenuInputSchema).optional(),
  MenuCategory: import_zod.z.lazy(() => MenuCategoryCreateNestedManyWithoutMenuInputSchema).optional()
}).strict();
var MenuUncheckedCreateInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  restaurantId: import_zod.z.number().int(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUncheckedCreateNestedManyWithoutMenuInputSchema).optional(),
  MenuCategory: import_zod.z.lazy(() => MenuCategoryUncheckedCreateNestedManyWithoutMenuInputSchema).optional()
}).strict();
var MenuUpdateInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantUpdateOneRequiredWithoutMenusNestedInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUpdateManyWithoutMenuNestedInputSchema).optional(),
  MenuCategory: import_zod.z.lazy(() => MenuCategoryUpdateManyWithoutMenuNestedInputSchema).optional()
}).strict();
var MenuUncheckedUpdateInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUncheckedUpdateManyWithoutMenuNestedInputSchema).optional(),
  MenuCategory: import_zod.z.lazy(() => MenuCategoryUncheckedUpdateManyWithoutMenuNestedInputSchema).optional()
}).strict();
var MenuCreateManyInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  restaurantId: import_zod.z.number().int(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var MenuUpdateManyMutationInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var MenuUncheckedUpdateManyInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var MenuItemRecipeCreateInputSchema = import_zod.z.object({
  joinAt: import_zod.z.coerce.date().optional(),
  menuItem: import_zod.z.lazy(() => MenuItemCreateNestedOneWithoutMenuItemRecipeInputSchema),
  recipe: import_zod.z.lazy(() => RecipeCreateNestedOneWithoutMenuItemRecipeInputSchema)
}).strict();
var MenuItemRecipeUncheckedCreateInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  menuItemId: import_zod.z.number().int(),
  recipeId: import_zod.z.number().int(),
  joinAt: import_zod.z.coerce.date().optional()
}).strict();
var MenuItemRecipeUpdateInputSchema = import_zod.z.object({
  joinAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  menuItem: import_zod.z.lazy(() => MenuItemUpdateOneRequiredWithoutMenuItemRecipeNestedInputSchema).optional(),
  recipe: import_zod.z.lazy(() => RecipeUpdateOneRequiredWithoutMenuItemRecipeNestedInputSchema).optional()
}).strict();
var MenuItemRecipeUncheckedUpdateInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  menuItemId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  joinAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var MenuItemRecipeCreateManyInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  menuItemId: import_zod.z.number().int(),
  recipeId: import_zod.z.number().int(),
  joinAt: import_zod.z.coerce.date().optional()
}).strict();
var MenuItemRecipeUpdateManyMutationInputSchema = import_zod.z.object({
  joinAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var MenuItemRecipeUncheckedUpdateManyInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  menuItemId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  joinAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var MenuItemCreateInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  price: import_zod.z.number(),
  foodCost: import_zod.z.number(),
  recipeIds: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeIdsInputSchema), import_zod.z.number().int().array()]).optional(),
  recipeServingsAmount: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema), import_zod.z.number().array()]).optional(),
  recipeServingsCost: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeServingsCostInputSchema), import_zod.z.number().array()]).optional(),
  allergens: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateallergensInputSchema), import_zod.z.string().array()]).optional(),
  nutritionalInfoId: import_zod.z.number().int().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  nutritionalInfo: import_zod.z.lazy(() => NutritionalInfoCreateNestedOneWithoutMenuItemInputSchema).optional(),
  menu: import_zod.z.lazy(() => MenuCreateNestedOneWithoutMenuItemsInputSchema),
  recipes: import_zod.z.lazy(() => RecipeCreateNestedManyWithoutMenuItemsInputSchema).optional(),
  menuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeCreateNestedManyWithoutMenuItemInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsCreateNestedManyWithoutMenuItemInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemCreateNestedManyWithoutMenuItemInputSchema).optional(),
  nutritionalRecommendation: import_zod.z.lazy(() => NutritionalRecommendationCreateNestedManyWithoutMenuItemInputSchema).optional(),
  category: import_zod.z.lazy(() => MenuCategoryCreateNestedOneWithoutMenuItemsInputSchema).optional(),
  feedback: import_zod.z.lazy(() => CustomerFeedbackCreateNestedManyWithoutMenuItemInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionCreateNestedManyWithoutMenuItemsInputSchema).optional()
}).strict();
var MenuItemUncheckedCreateInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  price: import_zod.z.number(),
  foodCost: import_zod.z.number(),
  recipeIds: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeIdsInputSchema), import_zod.z.number().int().array()]).optional(),
  recipeServingsAmount: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema), import_zod.z.number().array()]).optional(),
  recipeServingsCost: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeServingsCostInputSchema), import_zod.z.number().array()]).optional(),
  allergens: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateallergensInputSchema), import_zod.z.string().array()]).optional(),
  nutritionalInfoId: import_zod.z.number().int().optional().nullable(),
  menuId: import_zod.z.number().int(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  categoryId: import_zod.z.number().int().optional().nullable(),
  nutritionalInfo: import_zod.z.lazy(() => NutritionalInfoUncheckedCreateNestedOneWithoutMenuItemInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUncheckedCreateNestedManyWithoutMenuItemsInputSchema).optional(),
  menuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  nutritionalRecommendation: import_zod.z.lazy(() => NutritionalRecommendationUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  feedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutMenuItemsInputSchema).optional()
}).strict();
var MenuItemUpdateInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIds: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeIdsInputSchema), import_zod.z.number().int().array()]).optional(),
  recipeServingsAmount: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema), import_zod.z.number().array()]).optional(),
  recipeServingsCost: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema), import_zod.z.number().array()]).optional(),
  allergens: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateallergensInputSchema), import_zod.z.string().array()]).optional(),
  nutritionalInfoId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  nutritionalInfo: import_zod.z.lazy(() => NutritionalInfoUpdateOneWithoutMenuItemNestedInputSchema).optional(),
  menu: import_zod.z.lazy(() => MenuUpdateOneRequiredWithoutMenuItemsNestedInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUpdateManyWithoutMenuItemsNestedInputSchema).optional(),
  menuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  nutritionalRecommendation: import_zod.z.lazy(() => NutritionalRecommendationUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  category: import_zod.z.lazy(() => MenuCategoryUpdateOneWithoutMenuItemsNestedInputSchema).optional(),
  feedback: import_zod.z.lazy(() => CustomerFeedbackUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUpdateManyWithoutMenuItemsNestedInputSchema).optional()
}).strict();
var MenuItemUncheckedUpdateInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIds: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeIdsInputSchema), import_zod.z.number().int().array()]).optional(),
  recipeServingsAmount: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema), import_zod.z.number().array()]).optional(),
  recipeServingsCost: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema), import_zod.z.number().array()]).optional(),
  allergens: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateallergensInputSchema), import_zod.z.string().array()]).optional(),
  nutritionalInfoId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  menuId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  categoryId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  nutritionalInfo: import_zod.z.lazy(() => NutritionalInfoUncheckedUpdateOneWithoutMenuItemNestedInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUncheckedUpdateManyWithoutMenuItemsNestedInputSchema).optional(),
  menuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  nutritionalRecommendation: import_zod.z.lazy(() => NutritionalRecommendationUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  feedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutMenuItemsNestedInputSchema).optional()
}).strict();
var MenuItemCreateManyInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  price: import_zod.z.number(),
  foodCost: import_zod.z.number(),
  recipeIds: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeIdsInputSchema), import_zod.z.number().int().array()]).optional(),
  recipeServingsAmount: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema), import_zod.z.number().array()]).optional(),
  recipeServingsCost: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeServingsCostInputSchema), import_zod.z.number().array()]).optional(),
  allergens: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateallergensInputSchema), import_zod.z.string().array()]).optional(),
  nutritionalInfoId: import_zod.z.number().int().optional().nullable(),
  menuId: import_zod.z.number().int(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  categoryId: import_zod.z.number().int().optional().nullable()
}).strict();
var MenuItemUpdateManyMutationInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIds: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeIdsInputSchema), import_zod.z.number().int().array()]).optional(),
  recipeServingsAmount: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema), import_zod.z.number().array()]).optional(),
  recipeServingsCost: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema), import_zod.z.number().array()]).optional(),
  allergens: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateallergensInputSchema), import_zod.z.string().array()]).optional(),
  nutritionalInfoId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var MenuItemUncheckedUpdateManyInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIds: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeIdsInputSchema), import_zod.z.number().int().array()]).optional(),
  recipeServingsAmount: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema), import_zod.z.number().array()]).optional(),
  recipeServingsCost: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema), import_zod.z.number().array()]).optional(),
  allergens: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateallergensInputSchema), import_zod.z.string().array()]).optional(),
  nutritionalInfoId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  menuId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  categoryId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var NutritionalInfoCreateInputSchema = import_zod.z.object({
  calories: import_zod.z.number(),
  fat: import_zod.z.number(),
  saturatedFat: import_zod.z.number(),
  transFat: import_zod.z.number(),
  cholesterol: import_zod.z.number(),
  sodium: import_zod.z.number(),
  carbohydrates: import_zod.z.number(),
  fiber: import_zod.z.number(),
  sugar: import_zod.z.number(),
  protein: import_zod.z.number(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  menuItem: import_zod.z.lazy(() => MenuItemCreateNestedOneWithoutNutritionalInfoInputSchema).optional()
}).strict();
var NutritionalInfoUncheckedCreateInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  menuItemId: import_zod.z.number().int().optional().nullable(),
  calories: import_zod.z.number(),
  fat: import_zod.z.number(),
  saturatedFat: import_zod.z.number(),
  transFat: import_zod.z.number(),
  cholesterol: import_zod.z.number(),
  sodium: import_zod.z.number(),
  carbohydrates: import_zod.z.number(),
  fiber: import_zod.z.number(),
  sugar: import_zod.z.number(),
  protein: import_zod.z.number(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var NutritionalInfoUpdateInputSchema = import_zod.z.object({
  calories: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  fat: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  saturatedFat: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  transFat: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  cholesterol: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  sodium: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  carbohydrates: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  fiber: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  sugar: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  protein: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  menuItem: import_zod.z.lazy(() => MenuItemUpdateOneWithoutNutritionalInfoNestedInputSchema).optional()
}).strict();
var NutritionalInfoUncheckedUpdateInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  menuItemId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  calories: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  fat: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  saturatedFat: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  transFat: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  cholesterol: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  sodium: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  carbohydrates: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  fiber: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  sugar: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  protein: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var NutritionalInfoCreateManyInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  menuItemId: import_zod.z.number().int().optional().nullable(),
  calories: import_zod.z.number(),
  fat: import_zod.z.number(),
  saturatedFat: import_zod.z.number(),
  transFat: import_zod.z.number(),
  cholesterol: import_zod.z.number(),
  sodium: import_zod.z.number(),
  carbohydrates: import_zod.z.number(),
  fiber: import_zod.z.number(),
  sugar: import_zod.z.number(),
  protein: import_zod.z.number(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var NutritionalInfoUpdateManyMutationInputSchema = import_zod.z.object({
  calories: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  fat: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  saturatedFat: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  transFat: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  cholesterol: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  sodium: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  carbohydrates: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  fiber: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  sugar: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  protein: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var NutritionalInfoUncheckedUpdateManyInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  menuItemId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  calories: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  fat: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  saturatedFat: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  transFat: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  cholesterol: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  sodium: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  carbohydrates: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  fiber: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  sugar: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  protein: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var FoodCostHistoryCreateInputSchema = import_zod.z.object({
  cost: import_zod.z.number(),
  date: import_zod.z.coerce.date(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  recipe: import_zod.z.lazy(() => RecipeCreateNestedOneWithoutFoodCostHistoryInputSchema)
}).strict();
var FoodCostHistoryUncheckedCreateInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  recipeId: import_zod.z.number().int(),
  cost: import_zod.z.number(),
  date: import_zod.z.coerce.date(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var FoodCostHistoryUpdateInputSchema = import_zod.z.object({
  cost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  recipe: import_zod.z.lazy(() => RecipeUpdateOneRequiredWithoutFoodCostHistoryNestedInputSchema).optional()
}).strict();
var FoodCostHistoryUncheckedUpdateInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var FoodCostHistoryCreateManyInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  recipeId: import_zod.z.number().int(),
  cost: import_zod.z.number(),
  date: import_zod.z.coerce.date(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var FoodCostHistoryUpdateManyMutationInputSchema = import_zod.z.object({
  cost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var FoodCostHistoryUncheckedUpdateManyInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var PrepHistoryCreateInputSchema = import_zod.z.object({
  quantity: import_zod.z.number().int(),
  date: import_zod.z.coerce.date(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  recipe: import_zod.z.lazy(() => RecipeCreateNestedOneWithoutPrepHistoryInputSchema)
}).strict();
var PrepHistoryUncheckedCreateInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  recipeId: import_zod.z.number().int(),
  quantity: import_zod.z.number().int(),
  date: import_zod.z.coerce.date(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var PrepHistoryUpdateInputSchema = import_zod.z.object({
  quantity: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  recipe: import_zod.z.lazy(() => RecipeUpdateOneRequiredWithoutPrepHistoryNestedInputSchema).optional()
}).strict();
var PrepHistoryUncheckedUpdateInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var PrepHistoryCreateManyInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  recipeId: import_zod.z.number().int(),
  quantity: import_zod.z.number().int(),
  date: import_zod.z.coerce.date(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var PrepHistoryUpdateManyMutationInputSchema = import_zod.z.object({
  quantity: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var PrepHistoryUncheckedUpdateManyInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var IntFilterSchema = import_zod.z.object({
  equals: import_zod.z.number().optional(),
  in: import_zod.z.number().array().optional(),
  notIn: import_zod.z.number().array().optional(),
  lt: import_zod.z.number().optional(),
  lte: import_zod.z.number().optional(),
  gt: import_zod.z.number().optional(),
  gte: import_zod.z.number().optional(),
  not: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NestedIntFilterSchema)]).optional()
}).strict();
var StringNullableFilterSchema = import_zod.z.object({
  equals: import_zod.z.string().optional().nullable(),
  in: import_zod.z.string().array().optional().nullable(),
  notIn: import_zod.z.string().array().optional().nullable(),
  lt: import_zod.z.string().optional(),
  lte: import_zod.z.string().optional(),
  gt: import_zod.z.string().optional(),
  gte: import_zod.z.string().optional(),
  contains: import_zod.z.string().optional(),
  startsWith: import_zod.z.string().optional(),
  endsWith: import_zod.z.string().optional(),
  mode: import_zod.z.lazy(() => QueryModeSchema).optional(),
  not: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NestedStringNullableFilterSchema)]).optional().nullable()
}).strict();
var FloatFilterSchema = import_zod.z.object({
  equals: import_zod.z.number().optional(),
  in: import_zod.z.number().array().optional(),
  notIn: import_zod.z.number().array().optional(),
  lt: import_zod.z.number().optional(),
  lte: import_zod.z.number().optional(),
  gt: import_zod.z.number().optional(),
  gte: import_zod.z.number().optional(),
  not: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NestedFloatFilterSchema)]).optional()
}).strict();
var DateTimeFilterSchema = import_zod.z.object({
  equals: import_zod.z.coerce.date().optional(),
  in: import_zod.z.coerce.date().array().optional(),
  notIn: import_zod.z.coerce.date().array().optional(),
  lt: import_zod.z.coerce.date().optional(),
  lte: import_zod.z.coerce.date().optional(),
  gt: import_zod.z.coerce.date().optional(),
  gte: import_zod.z.coerce.date().optional(),
  not: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NestedDateTimeFilterSchema)]).optional()
}).strict();
var RestaurantRelationFilterSchema = import_zod.z.object({
  is: import_zod.z.lazy(() => RestaurantWhereInputSchema).optional(),
  isNot: import_zod.z.lazy(() => RestaurantWhereInputSchema).optional()
}).strict();
var MenuItemRelationFilterSchema = import_zod.z.object({
  is: import_zod.z.lazy(() => MenuItemWhereInputSchema).optional(),
  isNot: import_zod.z.lazy(() => MenuItemWhereInputSchema).optional()
}).strict();
var SortOrderInputSchema = import_zod.z.object({
  sort: import_zod.z.lazy(() => SortOrderSchema),
  nulls: import_zod.z.lazy(() => NullsOrderSchema).optional()
}).strict();
var SalesTransactionsCountOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  posTransactionID: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  menuItemId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  price: import_zod.z.lazy(() => SortOrderSchema).optional(),
  total: import_zod.z.lazy(() => SortOrderSchema).optional(),
  transactionDate: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var SalesTransactionsAvgOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  menuItemId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  price: import_zod.z.lazy(() => SortOrderSchema).optional(),
  total: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var SalesTransactionsMaxOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  posTransactionID: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  menuItemId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  price: import_zod.z.lazy(() => SortOrderSchema).optional(),
  total: import_zod.z.lazy(() => SortOrderSchema).optional(),
  transactionDate: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var SalesTransactionsMinOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  posTransactionID: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  menuItemId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  price: import_zod.z.lazy(() => SortOrderSchema).optional(),
  total: import_zod.z.lazy(() => SortOrderSchema).optional(),
  transactionDate: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var SalesTransactionsSumOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  menuItemId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  price: import_zod.z.lazy(() => SortOrderSchema).optional(),
  total: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var IntWithAggregatesFilterSchema = import_zod.z.object({
  equals: import_zod.z.number().optional(),
  in: import_zod.z.number().array().optional(),
  notIn: import_zod.z.number().array().optional(),
  lt: import_zod.z.number().optional(),
  lte: import_zod.z.number().optional(),
  gt: import_zod.z.number().optional(),
  gte: import_zod.z.number().optional(),
  not: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NestedIntWithAggregatesFilterSchema)]).optional(),
  _count: import_zod.z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: import_zod.z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: import_zod.z.lazy(() => NestedIntFilterSchema).optional(),
  _min: import_zod.z.lazy(() => NestedIntFilterSchema).optional(),
  _max: import_zod.z.lazy(() => NestedIntFilterSchema).optional()
}).strict();
var StringNullableWithAggregatesFilterSchema = import_zod.z.object({
  equals: import_zod.z.string().optional().nullable(),
  in: import_zod.z.string().array().optional().nullable(),
  notIn: import_zod.z.string().array().optional().nullable(),
  lt: import_zod.z.string().optional(),
  lte: import_zod.z.string().optional(),
  gt: import_zod.z.string().optional(),
  gte: import_zod.z.string().optional(),
  contains: import_zod.z.string().optional(),
  startsWith: import_zod.z.string().optional(),
  endsWith: import_zod.z.string().optional(),
  mode: import_zod.z.lazy(() => QueryModeSchema).optional(),
  not: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NestedStringNullableWithAggregatesFilterSchema)]).optional().nullable(),
  _count: import_zod.z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: import_zod.z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: import_zod.z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();
var FloatWithAggregatesFilterSchema = import_zod.z.object({
  equals: import_zod.z.number().optional(),
  in: import_zod.z.number().array().optional(),
  notIn: import_zod.z.number().array().optional(),
  lt: import_zod.z.number().optional(),
  lte: import_zod.z.number().optional(),
  gt: import_zod.z.number().optional(),
  gte: import_zod.z.number().optional(),
  not: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NestedFloatWithAggregatesFilterSchema)]).optional(),
  _count: import_zod.z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: import_zod.z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: import_zod.z.lazy(() => NestedFloatFilterSchema).optional(),
  _min: import_zod.z.lazy(() => NestedFloatFilterSchema).optional(),
  _max: import_zod.z.lazy(() => NestedFloatFilterSchema).optional()
}).strict();
var DateTimeWithAggregatesFilterSchema = import_zod.z.object({
  equals: import_zod.z.coerce.date().optional(),
  in: import_zod.z.coerce.date().array().optional(),
  notIn: import_zod.z.coerce.date().array().optional(),
  lt: import_zod.z.coerce.date().optional(),
  lte: import_zod.z.coerce.date().optional(),
  gt: import_zod.z.coerce.date().optional(),
  gte: import_zod.z.coerce.date().optional(),
  not: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NestedDateTimeWithAggregatesFilterSchema)]).optional(),
  _count: import_zod.z.lazy(() => NestedIntFilterSchema).optional(),
  _min: import_zod.z.lazy(() => NestedDateTimeFilterSchema).optional(),
  _max: import_zod.z.lazy(() => NestedDateTimeFilterSchema).optional()
}).strict();
var StringFilterSchema = import_zod.z.object({
  equals: import_zod.z.string().optional(),
  in: import_zod.z.string().array().optional(),
  notIn: import_zod.z.string().array().optional(),
  lt: import_zod.z.string().optional(),
  lte: import_zod.z.string().optional(),
  gt: import_zod.z.string().optional(),
  gte: import_zod.z.string().optional(),
  contains: import_zod.z.string().optional(),
  startsWith: import_zod.z.string().optional(),
  endsWith: import_zod.z.string().optional(),
  mode: import_zod.z.lazy(() => QueryModeSchema).optional(),
  not: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NestedStringFilterSchema)]).optional()
}).strict();
var BoolFilterSchema = import_zod.z.object({
  equals: import_zod.z.boolean().optional(),
  not: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => NestedBoolFilterSchema)]).optional()
}).strict();
var MenuRelationFilterSchema = import_zod.z.object({
  is: import_zod.z.lazy(() => MenuWhereInputSchema).optional(),
  isNot: import_zod.z.lazy(() => MenuWhereInputSchema).optional()
}).strict();
var MenuItemListRelationFilterSchema = import_zod.z.object({
  every: import_zod.z.lazy(() => MenuItemWhereInputSchema).optional(),
  some: import_zod.z.lazy(() => MenuItemWhereInputSchema).optional(),
  none: import_zod.z.lazy(() => MenuItemWhereInputSchema).optional()
}).strict();
var MenuItemOrderByRelationAggregateInputSchema = import_zod.z.object({
  _count: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var MenuCategoryMenuIdNameCompoundUniqueInputSchema = import_zod.z.object({
  menuId: import_zod.z.number(),
  name: import_zod.z.string()
}).strict();
var MenuCategoryCountOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  description: import_zod.z.lazy(() => SortOrderSchema).optional(),
  displayOrder: import_zod.z.lazy(() => SortOrderSchema).optional(),
  menuId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  isActive: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var MenuCategoryAvgOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  displayOrder: import_zod.z.lazy(() => SortOrderSchema).optional(),
  menuId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var MenuCategoryMaxOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  description: import_zod.z.lazy(() => SortOrderSchema).optional(),
  displayOrder: import_zod.z.lazy(() => SortOrderSchema).optional(),
  menuId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  isActive: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var MenuCategoryMinOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  description: import_zod.z.lazy(() => SortOrderSchema).optional(),
  displayOrder: import_zod.z.lazy(() => SortOrderSchema).optional(),
  menuId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  isActive: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var MenuCategorySumOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  displayOrder: import_zod.z.lazy(() => SortOrderSchema).optional(),
  menuId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var StringWithAggregatesFilterSchema = import_zod.z.object({
  equals: import_zod.z.string().optional(),
  in: import_zod.z.string().array().optional(),
  notIn: import_zod.z.string().array().optional(),
  lt: import_zod.z.string().optional(),
  lte: import_zod.z.string().optional(),
  gt: import_zod.z.string().optional(),
  gte: import_zod.z.string().optional(),
  contains: import_zod.z.string().optional(),
  startsWith: import_zod.z.string().optional(),
  endsWith: import_zod.z.string().optional(),
  mode: import_zod.z.lazy(() => QueryModeSchema).optional(),
  not: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NestedStringWithAggregatesFilterSchema)]).optional(),
  _count: import_zod.z.lazy(() => NestedIntFilterSchema).optional(),
  _min: import_zod.z.lazy(() => NestedStringFilterSchema).optional(),
  _max: import_zod.z.lazy(() => NestedStringFilterSchema).optional()
}).strict();
var BoolWithAggregatesFilterSchema = import_zod.z.object({
  equals: import_zod.z.boolean().optional(),
  not: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => NestedBoolWithAggregatesFilterSchema)]).optional(),
  _count: import_zod.z.lazy(() => NestedIntFilterSchema).optional(),
  _min: import_zod.z.lazy(() => NestedBoolFilterSchema).optional(),
  _max: import_zod.z.lazy(() => NestedBoolFilterSchema).optional()
}).strict();
var IntNullableFilterSchema = import_zod.z.object({
  equals: import_zod.z.number().optional().nullable(),
  in: import_zod.z.number().array().optional().nullable(),
  notIn: import_zod.z.number().array().optional().nullable(),
  lt: import_zod.z.number().optional(),
  lte: import_zod.z.number().optional(),
  gt: import_zod.z.number().optional(),
  gte: import_zod.z.number().optional(),
  not: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NestedIntNullableFilterSchema)]).optional().nullable()
}).strict();
var DateTimeNullableFilterSchema = import_zod.z.object({
  equals: import_zod.z.coerce.date().optional().nullable(),
  in: import_zod.z.coerce.date().array().optional().nullable(),
  notIn: import_zod.z.coerce.date().array().optional().nullable(),
  lt: import_zod.z.coerce.date().optional(),
  lte: import_zod.z.coerce.date().optional(),
  gt: import_zod.z.coerce.date().optional(),
  gte: import_zod.z.coerce.date().optional(),
  not: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NestedDateTimeNullableFilterSchema)]).optional().nullable()
}).strict();
var RecipeRelationFilterSchema = import_zod.z.object({
  is: import_zod.z.lazy(() => RecipeWhereInputSchema).optional(),
  isNot: import_zod.z.lazy(() => RecipeWhereInputSchema).optional()
}).strict();
var RecipeIngredientListRelationFilterSchema = import_zod.z.object({
  every: import_zod.z.lazy(() => RecipeIngredientWhereInputSchema).optional(),
  some: import_zod.z.lazy(() => RecipeIngredientWhereInputSchema).optional(),
  none: import_zod.z.lazy(() => RecipeIngredientWhereInputSchema).optional()
}).strict();
var RecipeInstructionListRelationFilterSchema = import_zod.z.object({
  every: import_zod.z.lazy(() => RecipeInstructionWhereInputSchema).optional(),
  some: import_zod.z.lazy(() => RecipeInstructionWhereInputSchema).optional(),
  none: import_zod.z.lazy(() => RecipeInstructionWhereInputSchema).optional()
}).strict();
var UserRelationFilterSchema = import_zod.z.object({
  is: import_zod.z.lazy(() => UserWhereInputSchema).optional(),
  isNot: import_zod.z.lazy(() => UserWhereInputSchema).optional()
}).strict();
var UserNullableRelationFilterSchema = import_zod.z.object({
  is: import_zod.z.lazy(() => UserWhereInputSchema).optional().nullable(),
  isNot: import_zod.z.lazy(() => UserWhereInputSchema).optional().nullable()
}).strict();
var RecipeIngredientOrderByRelationAggregateInputSchema = import_zod.z.object({
  _count: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var RecipeInstructionOrderByRelationAggregateInputSchema = import_zod.z.object({
  _count: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var RecipeVersionRecipeIdVersionNumberCompoundUniqueInputSchema = import_zod.z.object({
  recipeId: import_zod.z.number(),
  versionNumber: import_zod.z.number()
}).strict();
var RecipeVersionCountOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  versionNumber: import_zod.z.lazy(() => SortOrderSchema).optional(),
  description: import_zod.z.lazy(() => SortOrderSchema).optional(),
  changes: import_zod.z.lazy(() => SortOrderSchema).optional(),
  isActive: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdById: import_zod.z.lazy(() => SortOrderSchema).optional(),
  approvedById: import_zod.z.lazy(() => SortOrderSchema).optional(),
  approvedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var RecipeVersionAvgOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  versionNumber: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdById: import_zod.z.lazy(() => SortOrderSchema).optional(),
  approvedById: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var RecipeVersionMaxOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  versionNumber: import_zod.z.lazy(() => SortOrderSchema).optional(),
  description: import_zod.z.lazy(() => SortOrderSchema).optional(),
  changes: import_zod.z.lazy(() => SortOrderSchema).optional(),
  isActive: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdById: import_zod.z.lazy(() => SortOrderSchema).optional(),
  approvedById: import_zod.z.lazy(() => SortOrderSchema).optional(),
  approvedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var RecipeVersionMinOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  versionNumber: import_zod.z.lazy(() => SortOrderSchema).optional(),
  description: import_zod.z.lazy(() => SortOrderSchema).optional(),
  changes: import_zod.z.lazy(() => SortOrderSchema).optional(),
  isActive: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdById: import_zod.z.lazy(() => SortOrderSchema).optional(),
  approvedById: import_zod.z.lazy(() => SortOrderSchema).optional(),
  approvedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var RecipeVersionSumOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  versionNumber: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdById: import_zod.z.lazy(() => SortOrderSchema).optional(),
  approvedById: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var IntNullableWithAggregatesFilterSchema = import_zod.z.object({
  equals: import_zod.z.number().optional().nullable(),
  in: import_zod.z.number().array().optional().nullable(),
  notIn: import_zod.z.number().array().optional().nullable(),
  lt: import_zod.z.number().optional(),
  lte: import_zod.z.number().optional(),
  gt: import_zod.z.number().optional(),
  gte: import_zod.z.number().optional(),
  not: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NestedIntNullableWithAggregatesFilterSchema)]).optional().nullable(),
  _count: import_zod.z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: import_zod.z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: import_zod.z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: import_zod.z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _max: import_zod.z.lazy(() => NestedIntNullableFilterSchema).optional()
}).strict();
var DateTimeNullableWithAggregatesFilterSchema = import_zod.z.object({
  equals: import_zod.z.coerce.date().optional().nullable(),
  in: import_zod.z.coerce.date().array().optional().nullable(),
  notIn: import_zod.z.coerce.date().array().optional().nullable(),
  lt: import_zod.z.coerce.date().optional(),
  lte: import_zod.z.coerce.date().optional(),
  gt: import_zod.z.coerce.date().optional(),
  gte: import_zod.z.coerce.date().optional(),
  not: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema)]).optional().nullable(),
  _count: import_zod.z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: import_zod.z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
  _max: import_zod.z.lazy(() => NestedDateTimeNullableFilterSchema).optional()
}).strict();
var EnumEquipmentStatusFilterSchema = import_zod.z.object({
  equals: import_zod.z.lazy(() => EquipmentStatusSchema).optional(),
  in: import_zod.z.lazy(() => EquipmentStatusSchema).array().optional(),
  notIn: import_zod.z.lazy(() => EquipmentStatusSchema).array().optional(),
  not: import_zod.z.union([import_zod.z.lazy(() => EquipmentStatusSchema), import_zod.z.lazy(() => NestedEnumEquipmentStatusFilterSchema)]).optional()
}).strict();
var RecipeEquipmentListRelationFilterSchema = import_zod.z.object({
  every: import_zod.z.lazy(() => RecipeEquipmentWhereInputSchema).optional(),
  some: import_zod.z.lazy(() => RecipeEquipmentWhereInputSchema).optional(),
  none: import_zod.z.lazy(() => RecipeEquipmentWhereInputSchema).optional()
}).strict();
var MaintenanceLogListRelationFilterSchema = import_zod.z.object({
  every: import_zod.z.lazy(() => MaintenanceLogWhereInputSchema).optional(),
  some: import_zod.z.lazy(() => MaintenanceLogWhereInputSchema).optional(),
  none: import_zod.z.lazy(() => MaintenanceLogWhereInputSchema).optional()
}).strict();
var RecipeEquipmentOrderByRelationAggregateInputSchema = import_zod.z.object({
  _count: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var MaintenanceLogOrderByRelationAggregateInputSchema = import_zod.z.object({
  _count: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var EquipmentCountOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  description: import_zod.z.lazy(() => SortOrderSchema).optional(),
  model: import_zod.z.lazy(() => SortOrderSchema).optional(),
  serialNumber: import_zod.z.lazy(() => SortOrderSchema).optional(),
  purchaseDate: import_zod.z.lazy(() => SortOrderSchema).optional(),
  lastMaintenance: import_zod.z.lazy(() => SortOrderSchema).optional(),
  nextMaintenance: import_zod.z.lazy(() => SortOrderSchema).optional(),
  status: import_zod.z.lazy(() => SortOrderSchema).optional(),
  location: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var EquipmentAvgOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var EquipmentMaxOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  description: import_zod.z.lazy(() => SortOrderSchema).optional(),
  model: import_zod.z.lazy(() => SortOrderSchema).optional(),
  serialNumber: import_zod.z.lazy(() => SortOrderSchema).optional(),
  purchaseDate: import_zod.z.lazy(() => SortOrderSchema).optional(),
  lastMaintenance: import_zod.z.lazy(() => SortOrderSchema).optional(),
  nextMaintenance: import_zod.z.lazy(() => SortOrderSchema).optional(),
  status: import_zod.z.lazy(() => SortOrderSchema).optional(),
  location: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var EquipmentMinOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  description: import_zod.z.lazy(() => SortOrderSchema).optional(),
  model: import_zod.z.lazy(() => SortOrderSchema).optional(),
  serialNumber: import_zod.z.lazy(() => SortOrderSchema).optional(),
  purchaseDate: import_zod.z.lazy(() => SortOrderSchema).optional(),
  lastMaintenance: import_zod.z.lazy(() => SortOrderSchema).optional(),
  nextMaintenance: import_zod.z.lazy(() => SortOrderSchema).optional(),
  status: import_zod.z.lazy(() => SortOrderSchema).optional(),
  location: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var EquipmentSumOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var EnumEquipmentStatusWithAggregatesFilterSchema = import_zod.z.object({
  equals: import_zod.z.lazy(() => EquipmentStatusSchema).optional(),
  in: import_zod.z.lazy(() => EquipmentStatusSchema).array().optional(),
  notIn: import_zod.z.lazy(() => EquipmentStatusSchema).array().optional(),
  not: import_zod.z.union([import_zod.z.lazy(() => EquipmentStatusSchema), import_zod.z.lazy(() => NestedEnumEquipmentStatusWithAggregatesFilterSchema)]).optional(),
  _count: import_zod.z.lazy(() => NestedIntFilterSchema).optional(),
  _min: import_zod.z.lazy(() => NestedEnumEquipmentStatusFilterSchema).optional(),
  _max: import_zod.z.lazy(() => NestedEnumEquipmentStatusFilterSchema).optional()
}).strict();
var EquipmentRelationFilterSchema = import_zod.z.object({
  is: import_zod.z.lazy(() => EquipmentWhereInputSchema).optional(),
  isNot: import_zod.z.lazy(() => EquipmentWhereInputSchema).optional()
}).strict();
var RecipeEquipmentRecipeIdEquipmentIdCompoundUniqueInputSchema = import_zod.z.object({
  recipeId: import_zod.z.number(),
  equipmentId: import_zod.z.number()
}).strict();
var RecipeEquipmentCountOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  equipmentId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  notes: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var RecipeEquipmentAvgOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  equipmentId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var RecipeEquipmentMaxOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  equipmentId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  notes: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var RecipeEquipmentMinOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  equipmentId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  notes: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var RecipeEquipmentSumOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  equipmentId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var EnumMaintenanceTypeFilterSchema = import_zod.z.object({
  equals: import_zod.z.lazy(() => MaintenanceTypeSchema).optional(),
  in: import_zod.z.lazy(() => MaintenanceTypeSchema).array().optional(),
  notIn: import_zod.z.lazy(() => MaintenanceTypeSchema).array().optional(),
  not: import_zod.z.union([import_zod.z.lazy(() => MaintenanceTypeSchema), import_zod.z.lazy(() => NestedEnumMaintenanceTypeFilterSchema)]).optional()
}).strict();
var FloatNullableFilterSchema = import_zod.z.object({
  equals: import_zod.z.number().optional().nullable(),
  in: import_zod.z.number().array().optional().nullable(),
  notIn: import_zod.z.number().array().optional().nullable(),
  lt: import_zod.z.number().optional(),
  lte: import_zod.z.number().optional(),
  gt: import_zod.z.number().optional(),
  gte: import_zod.z.number().optional(),
  not: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NestedFloatNullableFilterSchema)]).optional().nullable()
}).strict();
var MaintenanceLogCountOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  equipmentId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  date: import_zod.z.lazy(() => SortOrderSchema).optional(),
  type: import_zod.z.lazy(() => SortOrderSchema).optional(),
  description: import_zod.z.lazy(() => SortOrderSchema).optional(),
  cost: import_zod.z.lazy(() => SortOrderSchema).optional(),
  performedBy: import_zod.z.lazy(() => SortOrderSchema).optional(),
  notes: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var MaintenanceLogAvgOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  equipmentId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  cost: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var MaintenanceLogMaxOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  equipmentId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  date: import_zod.z.lazy(() => SortOrderSchema).optional(),
  type: import_zod.z.lazy(() => SortOrderSchema).optional(),
  description: import_zod.z.lazy(() => SortOrderSchema).optional(),
  cost: import_zod.z.lazy(() => SortOrderSchema).optional(),
  performedBy: import_zod.z.lazy(() => SortOrderSchema).optional(),
  notes: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var MaintenanceLogMinOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  equipmentId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  date: import_zod.z.lazy(() => SortOrderSchema).optional(),
  type: import_zod.z.lazy(() => SortOrderSchema).optional(),
  description: import_zod.z.lazy(() => SortOrderSchema).optional(),
  cost: import_zod.z.lazy(() => SortOrderSchema).optional(),
  performedBy: import_zod.z.lazy(() => SortOrderSchema).optional(),
  notes: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var MaintenanceLogSumOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  equipmentId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  cost: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var EnumMaintenanceTypeWithAggregatesFilterSchema = import_zod.z.object({
  equals: import_zod.z.lazy(() => MaintenanceTypeSchema).optional(),
  in: import_zod.z.lazy(() => MaintenanceTypeSchema).array().optional(),
  notIn: import_zod.z.lazy(() => MaintenanceTypeSchema).array().optional(),
  not: import_zod.z.union([import_zod.z.lazy(() => MaintenanceTypeSchema), import_zod.z.lazy(() => NestedEnumMaintenanceTypeWithAggregatesFilterSchema)]).optional(),
  _count: import_zod.z.lazy(() => NestedIntFilterSchema).optional(),
  _min: import_zod.z.lazy(() => NestedEnumMaintenanceTypeFilterSchema).optional(),
  _max: import_zod.z.lazy(() => NestedEnumMaintenanceTypeFilterSchema).optional()
}).strict();
var FloatNullableWithAggregatesFilterSchema = import_zod.z.object({
  equals: import_zod.z.number().optional().nullable(),
  in: import_zod.z.number().array().optional().nullable(),
  notIn: import_zod.z.number().array().optional().nullable(),
  lt: import_zod.z.number().optional(),
  lte: import_zod.z.number().optional(),
  gt: import_zod.z.number().optional(),
  gte: import_zod.z.number().optional(),
  not: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NestedFloatNullableWithAggregatesFilterSchema)]).optional().nullable(),
  _count: import_zod.z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: import_zod.z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: import_zod.z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _min: import_zod.z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _max: import_zod.z.lazy(() => NestedFloatNullableFilterSchema).optional()
}).strict();
var EnumChecklistFrequencyFilterSchema = import_zod.z.object({
  equals: import_zod.z.lazy(() => ChecklistFrequencySchema).optional(),
  in: import_zod.z.lazy(() => ChecklistFrequencySchema).array().optional(),
  notIn: import_zod.z.lazy(() => ChecklistFrequencySchema).array().optional(),
  not: import_zod.z.union([import_zod.z.lazy(() => ChecklistFrequencySchema), import_zod.z.lazy(() => NestedEnumChecklistFrequencyFilterSchema)]).optional()
}).strict();
var ChecklistItemListRelationFilterSchema = import_zod.z.object({
  every: import_zod.z.lazy(() => ChecklistItemWhereInputSchema).optional(),
  some: import_zod.z.lazy(() => ChecklistItemWhereInputSchema).optional(),
  none: import_zod.z.lazy(() => ChecklistItemWhereInputSchema).optional()
}).strict();
var ChecklistCompleteListRelationFilterSchema = import_zod.z.object({
  every: import_zod.z.lazy(() => ChecklistCompleteWhereInputSchema).optional(),
  some: import_zod.z.lazy(() => ChecklistCompleteWhereInputSchema).optional(),
  none: import_zod.z.lazy(() => ChecklistCompleteWhereInputSchema).optional()
}).strict();
var ChecklistItemOrderByRelationAggregateInputSchema = import_zod.z.object({
  _count: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var ChecklistCompleteOrderByRelationAggregateInputSchema = import_zod.z.object({
  _count: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var QualityChecklistCountOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  description: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  frequency: import_zod.z.lazy(() => SortOrderSchema).optional(),
  isActive: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var QualityChecklistAvgOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var QualityChecklistMaxOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  description: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  frequency: import_zod.z.lazy(() => SortOrderSchema).optional(),
  isActive: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var QualityChecklistMinOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  description: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  frequency: import_zod.z.lazy(() => SortOrderSchema).optional(),
  isActive: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var QualityChecklistSumOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var EnumChecklistFrequencyWithAggregatesFilterSchema = import_zod.z.object({
  equals: import_zod.z.lazy(() => ChecklistFrequencySchema).optional(),
  in: import_zod.z.lazy(() => ChecklistFrequencySchema).array().optional(),
  notIn: import_zod.z.lazy(() => ChecklistFrequencySchema).array().optional(),
  not: import_zod.z.union([import_zod.z.lazy(() => ChecklistFrequencySchema), import_zod.z.lazy(() => NestedEnumChecklistFrequencyWithAggregatesFilterSchema)]).optional(),
  _count: import_zod.z.lazy(() => NestedIntFilterSchema).optional(),
  _min: import_zod.z.lazy(() => NestedEnumChecklistFrequencyFilterSchema).optional(),
  _max: import_zod.z.lazy(() => NestedEnumChecklistFrequencyFilterSchema).optional()
}).strict();
var EnumChecklistItemTypeFilterSchema = import_zod.z.object({
  equals: import_zod.z.lazy(() => ChecklistItemTypeSchema).optional(),
  in: import_zod.z.lazy(() => ChecklistItemTypeSchema).array().optional(),
  notIn: import_zod.z.lazy(() => ChecklistItemTypeSchema).array().optional(),
  not: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemTypeSchema), import_zod.z.lazy(() => NestedEnumChecklistItemTypeFilterSchema)]).optional()
}).strict();
var QualityChecklistRelationFilterSchema = import_zod.z.object({
  is: import_zod.z.lazy(() => QualityChecklistWhereInputSchema).optional(),
  isNot: import_zod.z.lazy(() => QualityChecklistWhereInputSchema).optional()
}).strict();
var ChecklistItemCompleteListRelationFilterSchema = import_zod.z.object({
  every: import_zod.z.lazy(() => ChecklistItemCompleteWhereInputSchema).optional(),
  some: import_zod.z.lazy(() => ChecklistItemCompleteWhereInputSchema).optional(),
  none: import_zod.z.lazy(() => ChecklistItemCompleteWhereInputSchema).optional()
}).strict();
var ChecklistItemCompleteOrderByRelationAggregateInputSchema = import_zod.z.object({
  _count: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var ChecklistItemCountOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  checklistId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  description: import_zod.z.lazy(() => SortOrderSchema).optional(),
  order: import_zod.z.lazy(() => SortOrderSchema).optional(),
  type: import_zod.z.lazy(() => SortOrderSchema).optional(),
  requiredPhotos: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var ChecklistItemAvgOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  checklistId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  order: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var ChecklistItemMaxOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  checklistId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  description: import_zod.z.lazy(() => SortOrderSchema).optional(),
  order: import_zod.z.lazy(() => SortOrderSchema).optional(),
  type: import_zod.z.lazy(() => SortOrderSchema).optional(),
  requiredPhotos: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var ChecklistItemMinOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  checklistId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  description: import_zod.z.lazy(() => SortOrderSchema).optional(),
  order: import_zod.z.lazy(() => SortOrderSchema).optional(),
  type: import_zod.z.lazy(() => SortOrderSchema).optional(),
  requiredPhotos: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var ChecklistItemSumOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  checklistId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  order: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var EnumChecklistItemTypeWithAggregatesFilterSchema = import_zod.z.object({
  equals: import_zod.z.lazy(() => ChecklistItemTypeSchema).optional(),
  in: import_zod.z.lazy(() => ChecklistItemTypeSchema).array().optional(),
  notIn: import_zod.z.lazy(() => ChecklistItemTypeSchema).array().optional(),
  not: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemTypeSchema), import_zod.z.lazy(() => NestedEnumChecklistItemTypeWithAggregatesFilterSchema)]).optional(),
  _count: import_zod.z.lazy(() => NestedIntFilterSchema).optional(),
  _min: import_zod.z.lazy(() => NestedEnumChecklistItemTypeFilterSchema).optional(),
  _max: import_zod.z.lazy(() => NestedEnumChecklistItemTypeFilterSchema).optional()
}).strict();
var ChecklistCompleteCountOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  checklistId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  completedById: import_zod.z.lazy(() => SortOrderSchema).optional(),
  date: import_zod.z.lazy(() => SortOrderSchema).optional(),
  notes: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var ChecklistCompleteAvgOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  checklistId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  completedById: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var ChecklistCompleteMaxOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  checklistId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  completedById: import_zod.z.lazy(() => SortOrderSchema).optional(),
  date: import_zod.z.lazy(() => SortOrderSchema).optional(),
  notes: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var ChecklistCompleteMinOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  checklistId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  completedById: import_zod.z.lazy(() => SortOrderSchema).optional(),
  date: import_zod.z.lazy(() => SortOrderSchema).optional(),
  notes: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var ChecklistCompleteSumOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  checklistId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  completedById: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var EnumChecklistStatusFilterSchema = import_zod.z.object({
  equals: import_zod.z.lazy(() => ChecklistStatusSchema).optional(),
  in: import_zod.z.lazy(() => ChecklistStatusSchema).array().optional(),
  notIn: import_zod.z.lazy(() => ChecklistStatusSchema).array().optional(),
  not: import_zod.z.union([import_zod.z.lazy(() => ChecklistStatusSchema), import_zod.z.lazy(() => NestedEnumChecklistStatusFilterSchema)]).optional()
}).strict();
var StringNullableListFilterSchema = import_zod.z.object({
  equals: import_zod.z.string().array().optional().nullable(),
  has: import_zod.z.string().optional().nullable(),
  hasEvery: import_zod.z.string().array().optional(),
  hasSome: import_zod.z.string().array().optional(),
  isEmpty: import_zod.z.boolean().optional()
}).strict();
var ChecklistCompleteRelationFilterSchema = import_zod.z.object({
  is: import_zod.z.lazy(() => ChecklistCompleteWhereInputSchema).optional(),
  isNot: import_zod.z.lazy(() => ChecklistCompleteWhereInputSchema).optional()
}).strict();
var ChecklistItemRelationFilterSchema = import_zod.z.object({
  is: import_zod.z.lazy(() => ChecklistItemWhereInputSchema).optional(),
  isNot: import_zod.z.lazy(() => ChecklistItemWhereInputSchema).optional()
}).strict();
var ChecklistItemCompleteCountOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  checklistCompleteId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  checklistItemId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  status: import_zod.z.lazy(() => SortOrderSchema).optional(),
  notes: import_zod.z.lazy(() => SortOrderSchema).optional(),
  photoUrls: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var ChecklistItemCompleteAvgOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  checklistCompleteId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  checklistItemId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var ChecklistItemCompleteMaxOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  checklistCompleteId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  checklistItemId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  status: import_zod.z.lazy(() => SortOrderSchema).optional(),
  notes: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var ChecklistItemCompleteMinOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  checklistCompleteId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  checklistItemId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  status: import_zod.z.lazy(() => SortOrderSchema).optional(),
  notes: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var ChecklistItemCompleteSumOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  checklistCompleteId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  checklistItemId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var EnumChecklistStatusWithAggregatesFilterSchema = import_zod.z.object({
  equals: import_zod.z.lazy(() => ChecklistStatusSchema).optional(),
  in: import_zod.z.lazy(() => ChecklistStatusSchema).array().optional(),
  notIn: import_zod.z.lazy(() => ChecklistStatusSchema).array().optional(),
  not: import_zod.z.union([import_zod.z.lazy(() => ChecklistStatusSchema), import_zod.z.lazy(() => NestedEnumChecklistStatusWithAggregatesFilterSchema)]).optional(),
  _count: import_zod.z.lazy(() => NestedIntFilterSchema).optional(),
  _min: import_zod.z.lazy(() => NestedEnumChecklistStatusFilterSchema).optional(),
  _max: import_zod.z.lazy(() => NestedEnumChecklistStatusFilterSchema).optional()
}).strict();
var VendorRelationFilterSchema = import_zod.z.object({
  is: import_zod.z.lazy(() => VendorWhereInputSchema).optional(),
  isNot: import_zod.z.lazy(() => VendorWhereInputSchema).optional()
}).strict();
var IngredientRelationFilterSchema = import_zod.z.object({
  is: import_zod.z.lazy(() => IngredientWhereInputSchema).optional(),
  isNot: import_zod.z.lazy(() => IngredientWhereInputSchema).optional()
}).strict();
var SupplierPriceHistoryCountOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  vendorId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  ingredientId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  price: import_zod.z.lazy(() => SortOrderSchema).optional(),
  unit: import_zod.z.lazy(() => SortOrderSchema).optional(),
  startDate: import_zod.z.lazy(() => SortOrderSchema).optional(),
  endDate: import_zod.z.lazy(() => SortOrderSchema).optional(),
  notes: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var SupplierPriceHistoryAvgOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  vendorId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  ingredientId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  price: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var SupplierPriceHistoryMaxOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  vendorId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  ingredientId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  price: import_zod.z.lazy(() => SortOrderSchema).optional(),
  unit: import_zod.z.lazy(() => SortOrderSchema).optional(),
  startDate: import_zod.z.lazy(() => SortOrderSchema).optional(),
  endDate: import_zod.z.lazy(() => SortOrderSchema).optional(),
  notes: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var SupplierPriceHistoryMinOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  vendorId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  ingredientId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  price: import_zod.z.lazy(() => SortOrderSchema).optional(),
  unit: import_zod.z.lazy(() => SortOrderSchema).optional(),
  startDate: import_zod.z.lazy(() => SortOrderSchema).optional(),
  endDate: import_zod.z.lazy(() => SortOrderSchema).optional(),
  notes: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var SupplierPriceHistorySumOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  vendorId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  ingredientId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  price: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var EnumFeedbackSourceFilterSchema = import_zod.z.object({
  equals: import_zod.z.lazy(() => FeedbackSourceSchema).optional(),
  in: import_zod.z.lazy(() => FeedbackSourceSchema).array().optional(),
  notIn: import_zod.z.lazy(() => FeedbackSourceSchema).array().optional(),
  not: import_zod.z.union([import_zod.z.lazy(() => FeedbackSourceSchema), import_zod.z.lazy(() => NestedEnumFeedbackSourceFilterSchema)]).optional()
}).strict();
var EnumFeedbackStatusFilterSchema = import_zod.z.object({
  equals: import_zod.z.lazy(() => FeedbackStatusSchema).optional(),
  in: import_zod.z.lazy(() => FeedbackStatusSchema).array().optional(),
  notIn: import_zod.z.lazy(() => FeedbackStatusSchema).array().optional(),
  not: import_zod.z.union([import_zod.z.lazy(() => FeedbackStatusSchema), import_zod.z.lazy(() => NestedEnumFeedbackStatusFilterSchema)]).optional()
}).strict();
var MenuItemNullableRelationFilterSchema = import_zod.z.object({
  is: import_zod.z.lazy(() => MenuItemWhereInputSchema).optional().nullable(),
  isNot: import_zod.z.lazy(() => MenuItemWhereInputSchema).optional().nullable()
}).strict();
var CustomerFeedbackCountOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  menuItemId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  rating: import_zod.z.lazy(() => SortOrderSchema).optional(),
  comment: import_zod.z.lazy(() => SortOrderSchema).optional(),
  source: import_zod.z.lazy(() => SortOrderSchema).optional(),
  tags: import_zod.z.lazy(() => SortOrderSchema).optional(),
  status: import_zod.z.lazy(() => SortOrderSchema).optional(),
  responseText: import_zod.z.lazy(() => SortOrderSchema).optional(),
  respondedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  respondedById: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var CustomerFeedbackAvgOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  menuItemId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  rating: import_zod.z.lazy(() => SortOrderSchema).optional(),
  respondedById: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var CustomerFeedbackMaxOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  menuItemId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  rating: import_zod.z.lazy(() => SortOrderSchema).optional(),
  comment: import_zod.z.lazy(() => SortOrderSchema).optional(),
  source: import_zod.z.lazy(() => SortOrderSchema).optional(),
  status: import_zod.z.lazy(() => SortOrderSchema).optional(),
  responseText: import_zod.z.lazy(() => SortOrderSchema).optional(),
  respondedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  respondedById: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var CustomerFeedbackMinOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  menuItemId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  rating: import_zod.z.lazy(() => SortOrderSchema).optional(),
  comment: import_zod.z.lazy(() => SortOrderSchema).optional(),
  source: import_zod.z.lazy(() => SortOrderSchema).optional(),
  status: import_zod.z.lazy(() => SortOrderSchema).optional(),
  responseText: import_zod.z.lazy(() => SortOrderSchema).optional(),
  respondedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  respondedById: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var CustomerFeedbackSumOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  menuItemId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  rating: import_zod.z.lazy(() => SortOrderSchema).optional(),
  respondedById: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var EnumFeedbackSourceWithAggregatesFilterSchema = import_zod.z.object({
  equals: import_zod.z.lazy(() => FeedbackSourceSchema).optional(),
  in: import_zod.z.lazy(() => FeedbackSourceSchema).array().optional(),
  notIn: import_zod.z.lazy(() => FeedbackSourceSchema).array().optional(),
  not: import_zod.z.union([import_zod.z.lazy(() => FeedbackSourceSchema), import_zod.z.lazy(() => NestedEnumFeedbackSourceWithAggregatesFilterSchema)]).optional(),
  _count: import_zod.z.lazy(() => NestedIntFilterSchema).optional(),
  _min: import_zod.z.lazy(() => NestedEnumFeedbackSourceFilterSchema).optional(),
  _max: import_zod.z.lazy(() => NestedEnumFeedbackSourceFilterSchema).optional()
}).strict();
var EnumFeedbackStatusWithAggregatesFilterSchema = import_zod.z.object({
  equals: import_zod.z.lazy(() => FeedbackStatusSchema).optional(),
  in: import_zod.z.lazy(() => FeedbackStatusSchema).array().optional(),
  notIn: import_zod.z.lazy(() => FeedbackStatusSchema).array().optional(),
  not: import_zod.z.union([import_zod.z.lazy(() => FeedbackStatusSchema), import_zod.z.lazy(() => NestedEnumFeedbackStatusWithAggregatesFilterSchema)]).optional(),
  _count: import_zod.z.lazy(() => NestedIntFilterSchema).optional(),
  _min: import_zod.z.lazy(() => NestedEnumFeedbackStatusFilterSchema).optional(),
  _max: import_zod.z.lazy(() => NestedEnumFeedbackStatusFilterSchema).optional()
}).strict();
var RecipeListRelationFilterSchema = import_zod.z.object({
  every: import_zod.z.lazy(() => RecipeWhereInputSchema).optional(),
  some: import_zod.z.lazy(() => RecipeWhereInputSchema).optional(),
  none: import_zod.z.lazy(() => RecipeWhereInputSchema).optional()
}).strict();
var IngredientListRelationFilterSchema = import_zod.z.object({
  every: import_zod.z.lazy(() => IngredientWhereInputSchema).optional(),
  some: import_zod.z.lazy(() => IngredientWhereInputSchema).optional(),
  none: import_zod.z.lazy(() => IngredientWhereInputSchema).optional()
}).strict();
var RecipeOrderByRelationAggregateInputSchema = import_zod.z.object({
  _count: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var IngredientOrderByRelationAggregateInputSchema = import_zod.z.object({
  _count: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var DietaryRestrictionCountOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  description: import_zod.z.lazy(() => SortOrderSchema).optional(),
  icon: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var DietaryRestrictionAvgOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var DietaryRestrictionMaxOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  description: import_zod.z.lazy(() => SortOrderSchema).optional(),
  icon: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var DietaryRestrictionMinOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  description: import_zod.z.lazy(() => SortOrderSchema).optional(),
  icon: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var DietaryRestrictionSumOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var RecipeTagCountOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  description: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var RecipeTagAvgOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var RecipeTagMaxOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  description: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var RecipeTagMinOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  description: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var RecipeTagSumOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var LeftoverItemCountOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  date: import_zod.z.lazy(() => SortOrderSchema).optional(),
  menuItemId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  quantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  reason: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recordedById: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var LeftoverItemAvgOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  menuItemId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  quantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recordedById: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var LeftoverItemMaxOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  date: import_zod.z.lazy(() => SortOrderSchema).optional(),
  menuItemId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  quantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  reason: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recordedById: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var LeftoverItemMinOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  date: import_zod.z.lazy(() => SortOrderSchema).optional(),
  menuItemId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  quantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  reason: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recordedById: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var LeftoverItemSumOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  menuItemId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  quantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recordedById: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var WasteRecordCountOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  date: import_zod.z.lazy(() => SortOrderSchema).optional(),
  ingredientId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  quantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  unit: import_zod.z.lazy(() => SortOrderSchema).optional(),
  reason: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recordedById: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var WasteRecordAvgOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  ingredientId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  quantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recordedById: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var WasteRecordMaxOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  date: import_zod.z.lazy(() => SortOrderSchema).optional(),
  ingredientId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  quantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  unit: import_zod.z.lazy(() => SortOrderSchema).optional(),
  reason: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recordedById: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var WasteRecordMinOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  date: import_zod.z.lazy(() => SortOrderSchema).optional(),
  ingredientId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  quantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  unit: import_zod.z.lazy(() => SortOrderSchema).optional(),
  reason: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recordedById: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var WasteRecordSumOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  ingredientId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  quantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recordedById: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var ProductionPlanItemListRelationFilterSchema = import_zod.z.object({
  every: import_zod.z.lazy(() => ProductionPlanItemWhereInputSchema).optional(),
  some: import_zod.z.lazy(() => ProductionPlanItemWhereInputSchema).optional(),
  none: import_zod.z.lazy(() => ProductionPlanItemWhereInputSchema).optional()
}).strict();
var ProductionPlanItemOrderByRelationAggregateInputSchema = import_zod.z.object({
  _count: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var ProductionPlanCountOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  date: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdById: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var ProductionPlanAvgOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdById: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var ProductionPlanMaxOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  date: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdById: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var ProductionPlanMinOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  date: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdById: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var ProductionPlanSumOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdById: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var ProductionPlanRelationFilterSchema = import_zod.z.object({
  is: import_zod.z.lazy(() => ProductionPlanWhereInputSchema).optional(),
  isNot: import_zod.z.lazy(() => ProductionPlanWhereInputSchema).optional()
}).strict();
var ProductionPlanItemCountOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  productionPlanId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  quantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  unit: import_zod.z.lazy(() => SortOrderSchema).optional(),
  assignedToId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var ProductionPlanItemAvgOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  productionPlanId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  quantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  assignedToId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var ProductionPlanItemMaxOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  productionPlanId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  quantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  unit: import_zod.z.lazy(() => SortOrderSchema).optional(),
  assignedToId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var ProductionPlanItemMinOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  productionPlanId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  quantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  unit: import_zod.z.lazy(() => SortOrderSchema).optional(),
  assignedToId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var ProductionPlanItemSumOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  productionPlanId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  quantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  assignedToId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var EnumTaskTypeFilterSchema = import_zod.z.object({
  equals: import_zod.z.lazy(() => TaskTypeSchema).optional(),
  in: import_zod.z.lazy(() => TaskTypeSchema).array().optional(),
  notIn: import_zod.z.lazy(() => TaskTypeSchema).array().optional(),
  not: import_zod.z.union([import_zod.z.lazy(() => TaskTypeSchema), import_zod.z.lazy(() => NestedEnumTaskTypeFilterSchema)]).optional()
}).strict();
var ShiftRelationFilterSchema = import_zod.z.object({
  is: import_zod.z.lazy(() => ShiftWhereInputSchema).optional(),
  isNot: import_zod.z.lazy(() => ShiftWhereInputSchema).optional()
}).strict();
var ShiftTaskCountOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  shiftId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  taskType: import_zod.z.lazy(() => SortOrderSchema).optional(),
  startTime: import_zod.z.lazy(() => SortOrderSchema).optional(),
  endTime: import_zod.z.lazy(() => SortOrderSchema).optional(),
  duration: import_zod.z.lazy(() => SortOrderSchema).optional(),
  notes: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var ShiftTaskAvgOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  shiftId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  duration: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var ShiftTaskMaxOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  shiftId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  taskType: import_zod.z.lazy(() => SortOrderSchema).optional(),
  startTime: import_zod.z.lazy(() => SortOrderSchema).optional(),
  endTime: import_zod.z.lazy(() => SortOrderSchema).optional(),
  duration: import_zod.z.lazy(() => SortOrderSchema).optional(),
  notes: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var ShiftTaskMinOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  shiftId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  taskType: import_zod.z.lazy(() => SortOrderSchema).optional(),
  startTime: import_zod.z.lazy(() => SortOrderSchema).optional(),
  endTime: import_zod.z.lazy(() => SortOrderSchema).optional(),
  duration: import_zod.z.lazy(() => SortOrderSchema).optional(),
  notes: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var ShiftTaskSumOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  shiftId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  duration: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var EnumTaskTypeWithAggregatesFilterSchema = import_zod.z.object({
  equals: import_zod.z.lazy(() => TaskTypeSchema).optional(),
  in: import_zod.z.lazy(() => TaskTypeSchema).array().optional(),
  notIn: import_zod.z.lazy(() => TaskTypeSchema).array().optional(),
  not: import_zod.z.union([import_zod.z.lazy(() => TaskTypeSchema), import_zod.z.lazy(() => NestedEnumTaskTypeWithAggregatesFilterSchema)]).optional(),
  _count: import_zod.z.lazy(() => NestedIntFilterSchema).optional(),
  _min: import_zod.z.lazy(() => NestedEnumTaskTypeFilterSchema).optional(),
  _max: import_zod.z.lazy(() => NestedEnumTaskTypeFilterSchema).optional()
}).strict();
var EnumDayOfWeekFilterSchema = import_zod.z.object({
  equals: import_zod.z.lazy(() => DayOfWeekSchema).optional(),
  in: import_zod.z.lazy(() => DayOfWeekSchema).array().optional(),
  notIn: import_zod.z.lazy(() => DayOfWeekSchema).array().optional(),
  not: import_zod.z.union([import_zod.z.lazy(() => DayOfWeekSchema), import_zod.z.lazy(() => NestedEnumDayOfWeekFilterSchema)]).optional()
}).strict();
var AvailabilityCountOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  userId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  dayOfWeek: import_zod.z.lazy(() => SortOrderSchema).optional(),
  startTime: import_zod.z.lazy(() => SortOrderSchema).optional(),
  endTime: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var AvailabilityAvgOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  userId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var AvailabilityMaxOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  userId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  dayOfWeek: import_zod.z.lazy(() => SortOrderSchema).optional(),
  startTime: import_zod.z.lazy(() => SortOrderSchema).optional(),
  endTime: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var AvailabilityMinOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  userId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  dayOfWeek: import_zod.z.lazy(() => SortOrderSchema).optional(),
  startTime: import_zod.z.lazy(() => SortOrderSchema).optional(),
  endTime: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var AvailabilitySumOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  userId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var EnumDayOfWeekWithAggregatesFilterSchema = import_zod.z.object({
  equals: import_zod.z.lazy(() => DayOfWeekSchema).optional(),
  in: import_zod.z.lazy(() => DayOfWeekSchema).array().optional(),
  notIn: import_zod.z.lazy(() => DayOfWeekSchema).array().optional(),
  not: import_zod.z.union([import_zod.z.lazy(() => DayOfWeekSchema), import_zod.z.lazy(() => NestedEnumDayOfWeekWithAggregatesFilterSchema)]).optional(),
  _count: import_zod.z.lazy(() => NestedIntFilterSchema).optional(),
  _min: import_zod.z.lazy(() => NestedEnumDayOfWeekFilterSchema).optional(),
  _max: import_zod.z.lazy(() => NestedEnumDayOfWeekFilterSchema).optional()
}).strict();
var EnumConstraintTypeFilterSchema = import_zod.z.object({
  equals: import_zod.z.lazy(() => ConstraintTypeSchema).optional(),
  in: import_zod.z.lazy(() => ConstraintTypeSchema).array().optional(),
  notIn: import_zod.z.lazy(() => ConstraintTypeSchema).array().optional(),
  not: import_zod.z.union([import_zod.z.lazy(() => ConstraintTypeSchema), import_zod.z.lazy(() => NestedEnumConstraintTypeFilterSchema)]).optional()
}).strict();
var SchedulingConstraintCountOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  userId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  date: import_zod.z.lazy(() => SortOrderSchema).optional(),
  constraintsType: import_zod.z.lazy(() => SortOrderSchema).optional(),
  startTime: import_zod.z.lazy(() => SortOrderSchema).optional(),
  endTime: import_zod.z.lazy(() => SortOrderSchema).optional(),
  notes: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var SchedulingConstraintAvgOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  userId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var SchedulingConstraintMaxOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  userId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  date: import_zod.z.lazy(() => SortOrderSchema).optional(),
  constraintsType: import_zod.z.lazy(() => SortOrderSchema).optional(),
  startTime: import_zod.z.lazy(() => SortOrderSchema).optional(),
  endTime: import_zod.z.lazy(() => SortOrderSchema).optional(),
  notes: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var SchedulingConstraintMinOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  userId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  date: import_zod.z.lazy(() => SortOrderSchema).optional(),
  constraintsType: import_zod.z.lazy(() => SortOrderSchema).optional(),
  startTime: import_zod.z.lazy(() => SortOrderSchema).optional(),
  endTime: import_zod.z.lazy(() => SortOrderSchema).optional(),
  notes: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var SchedulingConstraintSumOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  userId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var EnumConstraintTypeWithAggregatesFilterSchema = import_zod.z.object({
  equals: import_zod.z.lazy(() => ConstraintTypeSchema).optional(),
  in: import_zod.z.lazy(() => ConstraintTypeSchema).array().optional(),
  notIn: import_zod.z.lazy(() => ConstraintTypeSchema).array().optional(),
  not: import_zod.z.union([import_zod.z.lazy(() => ConstraintTypeSchema), import_zod.z.lazy(() => NestedEnumConstraintTypeWithAggregatesFilterSchema)]).optional(),
  _count: import_zod.z.lazy(() => NestedIntFilterSchema).optional(),
  _min: import_zod.z.lazy(() => NestedEnumConstraintTypeFilterSchema).optional(),
  _max: import_zod.z.lazy(() => NestedEnumConstraintTypeFilterSchema).optional()
}).strict();
var InventoryItemRelationFilterSchema = import_zod.z.object({
  is: import_zod.z.lazy(() => InventoryItemWhereInputSchema).optional(),
  isNot: import_zod.z.lazy(() => InventoryItemWhereInputSchema).optional()
}).strict();
var RecipeNullableRelationFilterSchema = import_zod.z.object({
  is: import_zod.z.lazy(() => RecipeWhereInputSchema).optional().nullable(),
  isNot: import_zod.z.lazy(() => RecipeWhereInputSchema).optional().nullable()
}).strict();
var InventoryWithdrawalCountOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  inventoryItemId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  dateTime: import_zod.z.lazy(() => SortOrderSchema).optional(),
  quantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  unit: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdById: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var InventoryWithdrawalAvgOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  inventoryItemId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  quantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdById: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var InventoryWithdrawalMaxOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  inventoryItemId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  dateTime: import_zod.z.lazy(() => SortOrderSchema).optional(),
  quantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  unit: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdById: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var InventoryWithdrawalMinOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  inventoryItemId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  dateTime: import_zod.z.lazy(() => SortOrderSchema).optional(),
  quantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  unit: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdById: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var InventoryWithdrawalSumOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  inventoryItemId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  quantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdById: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var IngredientAllergenListRelationFilterSchema = import_zod.z.object({
  every: import_zod.z.lazy(() => IngredientAllergenWhereInputSchema).optional(),
  some: import_zod.z.lazy(() => IngredientAllergenWhereInputSchema).optional(),
  none: import_zod.z.lazy(() => IngredientAllergenWhereInputSchema).optional()
}).strict();
var IngredientAllergenOrderByRelationAggregateInputSchema = import_zod.z.object({
  _count: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var AllergenCountOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  description: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var AllergenAvgOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var AllergenMaxOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  description: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var AllergenMinOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  description: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var AllergenSumOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var AllergenRelationFilterSchema = import_zod.z.object({
  is: import_zod.z.lazy(() => AllergenWhereInputSchema).optional(),
  isNot: import_zod.z.lazy(() => AllergenWhereInputSchema).optional()
}).strict();
var IngredientAllergenCountOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  ingredientId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  allergenId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var IngredientAllergenAvgOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  ingredientId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  allergenId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var IngredientAllergenMaxOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  ingredientId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  allergenId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var IngredientAllergenMinOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  ingredientId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  allergenId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var IngredientAllergenSumOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  ingredientId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  allergenId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var NutritionalRecommendationCountOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  menuItemId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recommendation: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var NutritionalRecommendationAvgOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  menuItemId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var NutritionalRecommendationMaxOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  menuItemId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recommendation: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var NutritionalRecommendationMinOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  menuItemId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recommendation: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var NutritionalRecommendationSumOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  menuItemId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var EarlyAccessCountOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  email: import_zod.z.lazy(() => SortOrderSchema).optional(),
  isEmailSent: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var EarlyAccessAvgOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var EarlyAccessMaxOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  email: import_zod.z.lazy(() => SortOrderSchema).optional(),
  isEmailSent: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var EarlyAccessMinOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  email: import_zod.z.lazy(() => SortOrderSchema).optional(),
  isEmailSent: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var EarlyAccessSumOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var RestaurantListRelationFilterSchema = import_zod.z.object({
  every: import_zod.z.lazy(() => RestaurantWhereInputSchema).optional(),
  some: import_zod.z.lazy(() => RestaurantWhereInputSchema).optional(),
  none: import_zod.z.lazy(() => RestaurantWhereInputSchema).optional()
}).strict();
var UserListRelationFilterSchema = import_zod.z.object({
  every: import_zod.z.lazy(() => UserWhereInputSchema).optional(),
  some: import_zod.z.lazy(() => UserWhereInputSchema).optional(),
  none: import_zod.z.lazy(() => UserWhereInputSchema).optional()
}).strict();
var RestaurantOrderByRelationAggregateInputSchema = import_zod.z.object({
  _count: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var UserOrderByRelationAggregateInputSchema = import_zod.z.object({
  _count: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var OrganizationCountOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  imageUrl: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var OrganizationAvgOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var OrganizationMaxOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  imageUrl: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var OrganizationMinOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  imageUrl: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var OrganizationSumOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var OrganizationNullableRelationFilterSchema = import_zod.z.object({
  is: import_zod.z.lazy(() => OrganizationWhereInputSchema).optional().nullable(),
  isNot: import_zod.z.lazy(() => OrganizationWhereInputSchema).optional().nullable()
}).strict();
var CookBookListRelationFilterSchema = import_zod.z.object({
  every: import_zod.z.lazy(() => CookBookWhereInputSchema).optional(),
  some: import_zod.z.lazy(() => CookBookWhereInputSchema).optional(),
  none: import_zod.z.lazy(() => CookBookWhereInputSchema).optional()
}).strict();
var InventoryNullableRelationFilterSchema = import_zod.z.object({
  is: import_zod.z.lazy(() => InventoryWhereInputSchema).optional().nullable(),
  isNot: import_zod.z.lazy(() => InventoryWhereInputSchema).optional().nullable()
}).strict();
var OrderListRelationFilterSchema = import_zod.z.object({
  every: import_zod.z.lazy(() => OrderWhereInputSchema).optional(),
  some: import_zod.z.lazy(() => OrderWhereInputSchema).optional(),
  none: import_zod.z.lazy(() => OrderWhereInputSchema).optional()
}).strict();
var MenuListRelationFilterSchema = import_zod.z.object({
  every: import_zod.z.lazy(() => MenuWhereInputSchema).optional(),
  some: import_zod.z.lazy(() => MenuWhereInputSchema).optional(),
  none: import_zod.z.lazy(() => MenuWhereInputSchema).optional()
}).strict();
var SalesTransactionsListRelationFilterSchema = import_zod.z.object({
  every: import_zod.z.lazy(() => SalesTransactionsWhereInputSchema).optional(),
  some: import_zod.z.lazy(() => SalesTransactionsWhereInputSchema).optional(),
  none: import_zod.z.lazy(() => SalesTransactionsWhereInputSchema).optional()
}).strict();
var LeftoverItemListRelationFilterSchema = import_zod.z.object({
  every: import_zod.z.lazy(() => LeftoverItemWhereInputSchema).optional(),
  some: import_zod.z.lazy(() => LeftoverItemWhereInputSchema).optional(),
  none: import_zod.z.lazy(() => LeftoverItemWhereInputSchema).optional()
}).strict();
var WasteRecordListRelationFilterSchema = import_zod.z.object({
  every: import_zod.z.lazy(() => WasteRecordWhereInputSchema).optional(),
  some: import_zod.z.lazy(() => WasteRecordWhereInputSchema).optional(),
  none: import_zod.z.lazy(() => WasteRecordWhereInputSchema).optional()
}).strict();
var ProductionPlanListRelationFilterSchema = import_zod.z.object({
  every: import_zod.z.lazy(() => ProductionPlanWhereInputSchema).optional(),
  some: import_zod.z.lazy(() => ProductionPlanWhereInputSchema).optional(),
  none: import_zod.z.lazy(() => ProductionPlanWhereInputSchema).optional()
}).strict();
var EquipmentListRelationFilterSchema = import_zod.z.object({
  every: import_zod.z.lazy(() => EquipmentWhereInputSchema).optional(),
  some: import_zod.z.lazy(() => EquipmentWhereInputSchema).optional(),
  none: import_zod.z.lazy(() => EquipmentWhereInputSchema).optional()
}).strict();
var QualityChecklistListRelationFilterSchema = import_zod.z.object({
  every: import_zod.z.lazy(() => QualityChecklistWhereInputSchema).optional(),
  some: import_zod.z.lazy(() => QualityChecklistWhereInputSchema).optional(),
  none: import_zod.z.lazy(() => QualityChecklistWhereInputSchema).optional()
}).strict();
var CustomerFeedbackListRelationFilterSchema = import_zod.z.object({
  every: import_zod.z.lazy(() => CustomerFeedbackWhereInputSchema).optional(),
  some: import_zod.z.lazy(() => CustomerFeedbackWhereInputSchema).optional(),
  none: import_zod.z.lazy(() => CustomerFeedbackWhereInputSchema).optional()
}).strict();
var CookBookOrderByRelationAggregateInputSchema = import_zod.z.object({
  _count: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var OrderOrderByRelationAggregateInputSchema = import_zod.z.object({
  _count: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var MenuOrderByRelationAggregateInputSchema = import_zod.z.object({
  _count: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var SalesTransactionsOrderByRelationAggregateInputSchema = import_zod.z.object({
  _count: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var LeftoverItemOrderByRelationAggregateInputSchema = import_zod.z.object({
  _count: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var WasteRecordOrderByRelationAggregateInputSchema = import_zod.z.object({
  _count: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var ProductionPlanOrderByRelationAggregateInputSchema = import_zod.z.object({
  _count: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var EquipmentOrderByRelationAggregateInputSchema = import_zod.z.object({
  _count: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var QualityChecklistOrderByRelationAggregateInputSchema = import_zod.z.object({
  _count: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var CustomerFeedbackOrderByRelationAggregateInputSchema = import_zod.z.object({
  _count: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var RestaurantCountOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  imageUrl: import_zod.z.lazy(() => SortOrderSchema).optional(),
  address: import_zod.z.lazy(() => SortOrderSchema).optional(),
  city: import_zod.z.lazy(() => SortOrderSchema).optional(),
  zipCode: import_zod.z.lazy(() => SortOrderSchema).optional(),
  state: import_zod.z.lazy(() => SortOrderSchema).optional(),
  owner: import_zod.z.lazy(() => SortOrderSchema).optional(),
  organizationId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  foodCost: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  isDeleted: import_zod.z.lazy(() => SortOrderSchema).optional(),
  deleted: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var RestaurantAvgOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  organizationId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  foodCost: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var RestaurantMaxOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  imageUrl: import_zod.z.lazy(() => SortOrderSchema).optional(),
  address: import_zod.z.lazy(() => SortOrderSchema).optional(),
  city: import_zod.z.lazy(() => SortOrderSchema).optional(),
  zipCode: import_zod.z.lazy(() => SortOrderSchema).optional(),
  state: import_zod.z.lazy(() => SortOrderSchema).optional(),
  owner: import_zod.z.lazy(() => SortOrderSchema).optional(),
  organizationId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  foodCost: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  isDeleted: import_zod.z.lazy(() => SortOrderSchema).optional(),
  deleted: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var RestaurantMinOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  imageUrl: import_zod.z.lazy(() => SortOrderSchema).optional(),
  address: import_zod.z.lazy(() => SortOrderSchema).optional(),
  city: import_zod.z.lazy(() => SortOrderSchema).optional(),
  zipCode: import_zod.z.lazy(() => SortOrderSchema).optional(),
  state: import_zod.z.lazy(() => SortOrderSchema).optional(),
  owner: import_zod.z.lazy(() => SortOrderSchema).optional(),
  organizationId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  foodCost: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  isDeleted: import_zod.z.lazy(() => SortOrderSchema).optional(),
  deleted: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var RestaurantSumOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  organizationId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  foodCost: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var EnumUserRoleFilterSchema = import_zod.z.object({
  equals: import_zod.z.lazy(() => UserRoleSchema).optional(),
  in: import_zod.z.lazy(() => UserRoleSchema).array().optional(),
  notIn: import_zod.z.lazy(() => UserRoleSchema).array().optional(),
  not: import_zod.z.union([import_zod.z.lazy(() => UserRoleSchema), import_zod.z.lazy(() => NestedEnumUserRoleFilterSchema)]).optional()
}).strict();
var RestaurantNullableRelationFilterSchema = import_zod.z.object({
  is: import_zod.z.lazy(() => RestaurantWhereInputSchema).optional().nullable(),
  isNot: import_zod.z.lazy(() => RestaurantWhereInputSchema).optional().nullable()
}).strict();
var ShiftListRelationFilterSchema = import_zod.z.object({
  every: import_zod.z.lazy(() => ShiftWhereInputSchema).optional(),
  some: import_zod.z.lazy(() => ShiftWhereInputSchema).optional(),
  none: import_zod.z.lazy(() => ShiftWhereInputSchema).optional()
}).strict();
var PrepItemListRelationFilterSchema = import_zod.z.object({
  every: import_zod.z.lazy(() => PrepItemWhereInputSchema).optional(),
  some: import_zod.z.lazy(() => PrepItemWhereInputSchema).optional(),
  none: import_zod.z.lazy(() => PrepItemWhereInputSchema).optional()
}).strict();
var InventoryItemListRelationFilterSchema = import_zod.z.object({
  every: import_zod.z.lazy(() => InventoryItemWhereInputSchema).optional(),
  some: import_zod.z.lazy(() => InventoryItemWhereInputSchema).optional(),
  none: import_zod.z.lazy(() => InventoryItemWhereInputSchema).optional()
}).strict();
var SessionListRelationFilterSchema = import_zod.z.object({
  every: import_zod.z.lazy(() => SessionWhereInputSchema).optional(),
  some: import_zod.z.lazy(() => SessionWhereInputSchema).optional(),
  none: import_zod.z.lazy(() => SessionWhereInputSchema).optional()
}).strict();
var PasswordResetListRelationFilterSchema = import_zod.z.object({
  every: import_zod.z.lazy(() => PasswordResetWhereInputSchema).optional(),
  some: import_zod.z.lazy(() => PasswordResetWhereInputSchema).optional(),
  none: import_zod.z.lazy(() => PasswordResetWhereInputSchema).optional()
}).strict();
var AvailabilityListRelationFilterSchema = import_zod.z.object({
  every: import_zod.z.lazy(() => AvailabilityWhereInputSchema).optional(),
  some: import_zod.z.lazy(() => AvailabilityWhereInputSchema).optional(),
  none: import_zod.z.lazy(() => AvailabilityWhereInputSchema).optional()
}).strict();
var SchedulingConstraintListRelationFilterSchema = import_zod.z.object({
  every: import_zod.z.lazy(() => SchedulingConstraintWhereInputSchema).optional(),
  some: import_zod.z.lazy(() => SchedulingConstraintWhereInputSchema).optional(),
  none: import_zod.z.lazy(() => SchedulingConstraintWhereInputSchema).optional()
}).strict();
var InventoryWithdrawalListRelationFilterSchema = import_zod.z.object({
  every: import_zod.z.lazy(() => InventoryWithdrawalWhereInputSchema).optional(),
  some: import_zod.z.lazy(() => InventoryWithdrawalWhereInputSchema).optional(),
  none: import_zod.z.lazy(() => InventoryWithdrawalWhereInputSchema).optional()
}).strict();
var RecipeVersionListRelationFilterSchema = import_zod.z.object({
  every: import_zod.z.lazy(() => RecipeVersionWhereInputSchema).optional(),
  some: import_zod.z.lazy(() => RecipeVersionWhereInputSchema).optional(),
  none: import_zod.z.lazy(() => RecipeVersionWhereInputSchema).optional()
}).strict();
var ShiftOrderByRelationAggregateInputSchema = import_zod.z.object({
  _count: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var PrepItemOrderByRelationAggregateInputSchema = import_zod.z.object({
  _count: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var InventoryItemOrderByRelationAggregateInputSchema = import_zod.z.object({
  _count: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var SessionOrderByRelationAggregateInputSchema = import_zod.z.object({
  _count: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var PasswordResetOrderByRelationAggregateInputSchema = import_zod.z.object({
  _count: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var AvailabilityOrderByRelationAggregateInputSchema = import_zod.z.object({
  _count: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var SchedulingConstraintOrderByRelationAggregateInputSchema = import_zod.z.object({
  _count: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var InventoryWithdrawalOrderByRelationAggregateInputSchema = import_zod.z.object({
  _count: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var RecipeVersionOrderByRelationAggregateInputSchema = import_zod.z.object({
  _count: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var UserCountOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  email: import_zod.z.lazy(() => SortOrderSchema).optional(),
  sub: import_zod.z.lazy(() => SortOrderSchema).optional(),
  passwordHash: import_zod.z.lazy(() => SortOrderSchema).optional(),
  firstName: import_zod.z.lazy(() => SortOrderSchema).optional(),
  lastName: import_zod.z.lazy(() => SortOrderSchema).optional(),
  profileImage: import_zod.z.lazy(() => SortOrderSchema).optional(),
  verified: import_zod.z.lazy(() => SortOrderSchema).optional(),
  role: import_zod.z.lazy(() => SortOrderSchema).optional(),
  organizationId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var UserAvgOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  sub: import_zod.z.lazy(() => SortOrderSchema).optional(),
  organizationId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var UserMaxOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  email: import_zod.z.lazy(() => SortOrderSchema).optional(),
  sub: import_zod.z.lazy(() => SortOrderSchema).optional(),
  passwordHash: import_zod.z.lazy(() => SortOrderSchema).optional(),
  firstName: import_zod.z.lazy(() => SortOrderSchema).optional(),
  lastName: import_zod.z.lazy(() => SortOrderSchema).optional(),
  profileImage: import_zod.z.lazy(() => SortOrderSchema).optional(),
  verified: import_zod.z.lazy(() => SortOrderSchema).optional(),
  role: import_zod.z.lazy(() => SortOrderSchema).optional(),
  organizationId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var UserMinOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  email: import_zod.z.lazy(() => SortOrderSchema).optional(),
  sub: import_zod.z.lazy(() => SortOrderSchema).optional(),
  passwordHash: import_zod.z.lazy(() => SortOrderSchema).optional(),
  firstName: import_zod.z.lazy(() => SortOrderSchema).optional(),
  lastName: import_zod.z.lazy(() => SortOrderSchema).optional(),
  profileImage: import_zod.z.lazy(() => SortOrderSchema).optional(),
  verified: import_zod.z.lazy(() => SortOrderSchema).optional(),
  role: import_zod.z.lazy(() => SortOrderSchema).optional(),
  organizationId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var UserSumOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  sub: import_zod.z.lazy(() => SortOrderSchema).optional(),
  organizationId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var EnumUserRoleWithAggregatesFilterSchema = import_zod.z.object({
  equals: import_zod.z.lazy(() => UserRoleSchema).optional(),
  in: import_zod.z.lazy(() => UserRoleSchema).array().optional(),
  notIn: import_zod.z.lazy(() => UserRoleSchema).array().optional(),
  not: import_zod.z.union([import_zod.z.lazy(() => UserRoleSchema), import_zod.z.lazy(() => NestedEnumUserRoleWithAggregatesFilterSchema)]).optional(),
  _count: import_zod.z.lazy(() => NestedIntFilterSchema).optional(),
  _min: import_zod.z.lazy(() => NestedEnumUserRoleFilterSchema).optional(),
  _max: import_zod.z.lazy(() => NestedEnumUserRoleFilterSchema).optional()
}).strict();
var SessionCountOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  userId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  code: import_zod.z.lazy(() => SortOrderSchema).optional(),
  token: import_zod.z.lazy(() => SortOrderSchema).optional(),
  expiresAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var SessionAvgOrderByAggregateInputSchema = import_zod.z.object({
  userId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var SessionMaxOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  userId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  code: import_zod.z.lazy(() => SortOrderSchema).optional(),
  token: import_zod.z.lazy(() => SortOrderSchema).optional(),
  expiresAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var SessionMinOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  userId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  code: import_zod.z.lazy(() => SortOrderSchema).optional(),
  token: import_zod.z.lazy(() => SortOrderSchema).optional(),
  expiresAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var SessionSumOrderByAggregateInputSchema = import_zod.z.object({
  userId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var CookBookCountOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  imageUrl: import_zod.z.lazy(() => SortOrderSchema).optional(),
  category: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var CookBookAvgOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var CookBookMaxOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  imageUrl: import_zod.z.lazy(() => SortOrderSchema).optional(),
  category: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var CookBookMinOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  imageUrl: import_zod.z.lazy(() => SortOrderSchema).optional(),
  category: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var CookBookSumOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var CookBookRelationFilterSchema = import_zod.z.object({
  is: import_zod.z.lazy(() => CookBookWhereInputSchema).optional(),
  isNot: import_zod.z.lazy(() => CookBookWhereInputSchema).optional()
}).strict();
var FoodCostHistoryListRelationFilterSchema = import_zod.z.object({
  every: import_zod.z.lazy(() => FoodCostHistoryWhereInputSchema).optional(),
  some: import_zod.z.lazy(() => FoodCostHistoryWhereInputSchema).optional(),
  none: import_zod.z.lazy(() => FoodCostHistoryWhereInputSchema).optional()
}).strict();
var PrepHistoryListRelationFilterSchema = import_zod.z.object({
  every: import_zod.z.lazy(() => PrepHistoryWhereInputSchema).optional(),
  some: import_zod.z.lazy(() => PrepHistoryWhereInputSchema).optional(),
  none: import_zod.z.lazy(() => PrepHistoryWhereInputSchema).optional()
}).strict();
var PrepBoardListRelationFilterSchema = import_zod.z.object({
  every: import_zod.z.lazy(() => PrepBoardWhereInputSchema).optional(),
  some: import_zod.z.lazy(() => PrepBoardWhereInputSchema).optional(),
  none: import_zod.z.lazy(() => PrepBoardWhereInputSchema).optional()
}).strict();
var MenuItemRecipeListRelationFilterSchema = import_zod.z.object({
  every: import_zod.z.lazy(() => MenuItemRecipeWhereInputSchema).optional(),
  some: import_zod.z.lazy(() => MenuItemRecipeWhereInputSchema).optional(),
  none: import_zod.z.lazy(() => MenuItemRecipeWhereInputSchema).optional()
}).strict();
var RecipeTagListRelationFilterSchema = import_zod.z.object({
  every: import_zod.z.lazy(() => RecipeTagWhereInputSchema).optional(),
  some: import_zod.z.lazy(() => RecipeTagWhereInputSchema).optional(),
  none: import_zod.z.lazy(() => RecipeTagWhereInputSchema).optional()
}).strict();
var DietaryRestrictionListRelationFilterSchema = import_zod.z.object({
  every: import_zod.z.lazy(() => DietaryRestrictionWhereInputSchema).optional(),
  some: import_zod.z.lazy(() => DietaryRestrictionWhereInputSchema).optional(),
  none: import_zod.z.lazy(() => DietaryRestrictionWhereInputSchema).optional()
}).strict();
var FoodCostHistoryOrderByRelationAggregateInputSchema = import_zod.z.object({
  _count: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var PrepHistoryOrderByRelationAggregateInputSchema = import_zod.z.object({
  _count: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var PrepBoardOrderByRelationAggregateInputSchema = import_zod.z.object({
  _count: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var MenuItemRecipeOrderByRelationAggregateInputSchema = import_zod.z.object({
  _count: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var RecipeTagOrderByRelationAggregateInputSchema = import_zod.z.object({
  _count: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var DietaryRestrictionOrderByRelationAggregateInputSchema = import_zod.z.object({
  _count: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var RecipeCountOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  imageUrl: import_zod.z.lazy(() => SortOrderSchema).optional(),
  description: import_zod.z.lazy(() => SortOrderSchema).optional(),
  servings: import_zod.z.lazy(() => SortOrderSchema).optional(),
  cookTime: import_zod.z.lazy(() => SortOrderSchema).optional(),
  prepTime: import_zod.z.lazy(() => SortOrderSchema).optional(),
  frequency: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  cookBookId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  foodCost: import_zod.z.lazy(() => SortOrderSchema).optional(),
  isDeleted: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var RecipeAvgOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  servings: import_zod.z.lazy(() => SortOrderSchema).optional(),
  cookTime: import_zod.z.lazy(() => SortOrderSchema).optional(),
  prepTime: import_zod.z.lazy(() => SortOrderSchema).optional(),
  frequency: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  cookBookId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  foodCost: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var RecipeMaxOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  description: import_zod.z.lazy(() => SortOrderSchema).optional(),
  servings: import_zod.z.lazy(() => SortOrderSchema).optional(),
  cookTime: import_zod.z.lazy(() => SortOrderSchema).optional(),
  prepTime: import_zod.z.lazy(() => SortOrderSchema).optional(),
  frequency: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  cookBookId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  foodCost: import_zod.z.lazy(() => SortOrderSchema).optional(),
  isDeleted: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var RecipeMinOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  description: import_zod.z.lazy(() => SortOrderSchema).optional(),
  servings: import_zod.z.lazy(() => SortOrderSchema).optional(),
  cookTime: import_zod.z.lazy(() => SortOrderSchema).optional(),
  prepTime: import_zod.z.lazy(() => SortOrderSchema).optional(),
  frequency: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  cookBookId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  foodCost: import_zod.z.lazy(() => SortOrderSchema).optional(),
  isDeleted: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var RecipeSumOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  servings: import_zod.z.lazy(() => SortOrderSchema).optional(),
  cookTime: import_zod.z.lazy(() => SortOrderSchema).optional(),
  prepTime: import_zod.z.lazy(() => SortOrderSchema).optional(),
  frequency: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  cookBookId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  foodCost: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var OrderItemListRelationFilterSchema = import_zod.z.object({
  every: import_zod.z.lazy(() => OrderItemWhereInputSchema).optional(),
  some: import_zod.z.lazy(() => OrderItemWhereInputSchema).optional(),
  none: import_zod.z.lazy(() => OrderItemWhereInputSchema).optional()
}).strict();
var VendorListRelationFilterSchema = import_zod.z.object({
  every: import_zod.z.lazy(() => VendorWhereInputSchema).optional(),
  some: import_zod.z.lazy(() => VendorWhereInputSchema).optional(),
  none: import_zod.z.lazy(() => VendorWhereInputSchema).optional()
}).strict();
var SupplierPriceHistoryListRelationFilterSchema = import_zod.z.object({
  every: import_zod.z.lazy(() => SupplierPriceHistoryWhereInputSchema).optional(),
  some: import_zod.z.lazy(() => SupplierPriceHistoryWhereInputSchema).optional(),
  none: import_zod.z.lazy(() => SupplierPriceHistoryWhereInputSchema).optional()
}).strict();
var DietaryRestrictionNullableRelationFilterSchema = import_zod.z.object({
  is: import_zod.z.lazy(() => DietaryRestrictionWhereInputSchema).optional().nullable(),
  isNot: import_zod.z.lazy(() => DietaryRestrictionWhereInputSchema).optional().nullable()
}).strict();
var OrderItemOrderByRelationAggregateInputSchema = import_zod.z.object({
  _count: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var VendorOrderByRelationAggregateInputSchema = import_zod.z.object({
  _count: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var SupplierPriceHistoryOrderByRelationAggregateInputSchema = import_zod.z.object({
  _count: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var IngredientCountOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  category: import_zod.z.lazy(() => SortOrderSchema).optional(),
  price: import_zod.z.lazy(() => SortOrderSchema).optional(),
  dietaryRestrictionId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var IngredientAvgOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  price: import_zod.z.lazy(() => SortOrderSchema).optional(),
  dietaryRestrictionId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var IngredientMaxOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  category: import_zod.z.lazy(() => SortOrderSchema).optional(),
  price: import_zod.z.lazy(() => SortOrderSchema).optional(),
  dietaryRestrictionId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var IngredientMinOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  category: import_zod.z.lazy(() => SortOrderSchema).optional(),
  price: import_zod.z.lazy(() => SortOrderSchema).optional(),
  dietaryRestrictionId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var IngredientSumOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  price: import_zod.z.lazy(() => SortOrderSchema).optional(),
  dietaryRestrictionId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var RecipeVersionNullableRelationFilterSchema = import_zod.z.object({
  is: import_zod.z.lazy(() => RecipeVersionWhereInputSchema).optional().nullable(),
  isNot: import_zod.z.lazy(() => RecipeVersionWhereInputSchema).optional().nullable()
}).strict();
var RecipeIngredientRecipeIdIngredientIdCompoundUniqueInputSchema = import_zod.z.object({
  recipeId: import_zod.z.number(),
  ingredientId: import_zod.z.number()
}).strict();
var RecipeIngredientCountOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  ingredientId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  quantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  unit: import_zod.z.lazy(() => SortOrderSchema).optional(),
  joinAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeVersionId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var RecipeIngredientAvgOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  ingredientId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  quantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeVersionId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var RecipeIngredientMaxOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  ingredientId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  quantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  unit: import_zod.z.lazy(() => SortOrderSchema).optional(),
  joinAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeVersionId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var RecipeIngredientMinOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  ingredientId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  quantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  unit: import_zod.z.lazy(() => SortOrderSchema).optional(),
  joinAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeVersionId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var RecipeIngredientSumOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  ingredientId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  quantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeVersionId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var RecipeInstructionRecipeIdStepNumberCompoundUniqueInputSchema = import_zod.z.object({
  recipeId: import_zod.z.number(),
  stepNumber: import_zod.z.number()
}).strict();
var RecipeInstructionCountOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  stepNumber: import_zod.z.lazy(() => SortOrderSchema).optional(),
  instruction: import_zod.z.lazy(() => SortOrderSchema).optional(),
  imageUrl: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeVersionId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var RecipeInstructionAvgOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  stepNumber: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeVersionId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var RecipeInstructionMaxOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  stepNumber: import_zod.z.lazy(() => SortOrderSchema).optional(),
  instruction: import_zod.z.lazy(() => SortOrderSchema).optional(),
  imageUrl: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeVersionId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var RecipeInstructionMinOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  stepNumber: import_zod.z.lazy(() => SortOrderSchema).optional(),
  instruction: import_zod.z.lazy(() => SortOrderSchema).optional(),
  imageUrl: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeVersionId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var RecipeInstructionSumOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  stepNumber: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeVersionId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var InventoryCountOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var InventoryAvgOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var InventoryMaxOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var InventoryMinOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var InventorySumOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var InventoryRelationFilterSchema = import_zod.z.object({
  is: import_zod.z.lazy(() => InventoryWhereInputSchema).optional(),
  isNot: import_zod.z.lazy(() => InventoryWhereInputSchema).optional()
}).strict();
var InventoryItemCountOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  inventoryId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  ingredientId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  quantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  unit: import_zod.z.lazy(() => SortOrderSchema).optional(),
  minQuantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restockThreshold: import_zod.z.lazy(() => SortOrderSchema).optional(),
  lastUpdatedById: import_zod.z.lazy(() => SortOrderSchema).optional(),
  lastUpdated: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var InventoryItemAvgOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  inventoryId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  ingredientId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  quantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  minQuantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restockThreshold: import_zod.z.lazy(() => SortOrderSchema).optional(),
  lastUpdatedById: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var InventoryItemMaxOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  inventoryId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  ingredientId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  quantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  unit: import_zod.z.lazy(() => SortOrderSchema).optional(),
  minQuantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restockThreshold: import_zod.z.lazy(() => SortOrderSchema).optional(),
  lastUpdatedById: import_zod.z.lazy(() => SortOrderSchema).optional(),
  lastUpdated: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var InventoryItemMinOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  inventoryId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  ingredientId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  quantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  unit: import_zod.z.lazy(() => SortOrderSchema).optional(),
  minQuantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restockThreshold: import_zod.z.lazy(() => SortOrderSchema).optional(),
  lastUpdatedById: import_zod.z.lazy(() => SortOrderSchema).optional(),
  lastUpdated: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var InventoryItemSumOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  inventoryId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  ingredientId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  quantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  minQuantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restockThreshold: import_zod.z.lazy(() => SortOrderSchema).optional(),
  lastUpdatedById: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var EnumOrderStatusFilterSchema = import_zod.z.object({
  equals: import_zod.z.lazy(() => OrderStatusSchema).optional(),
  in: import_zod.z.lazy(() => OrderStatusSchema).array().optional(),
  notIn: import_zod.z.lazy(() => OrderStatusSchema).array().optional(),
  not: import_zod.z.union([import_zod.z.lazy(() => OrderStatusSchema), import_zod.z.lazy(() => NestedEnumOrderStatusFilterSchema)]).optional()
}).strict();
var OrderCountOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  vendorId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  status: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var OrderAvgOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  vendorId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var OrderMaxOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  vendorId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  status: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var OrderMinOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  vendorId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  status: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var OrderSumOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  vendorId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var EnumOrderStatusWithAggregatesFilterSchema = import_zod.z.object({
  equals: import_zod.z.lazy(() => OrderStatusSchema).optional(),
  in: import_zod.z.lazy(() => OrderStatusSchema).array().optional(),
  notIn: import_zod.z.lazy(() => OrderStatusSchema).array().optional(),
  not: import_zod.z.union([import_zod.z.lazy(() => OrderStatusSchema), import_zod.z.lazy(() => NestedEnumOrderStatusWithAggregatesFilterSchema)]).optional(),
  _count: import_zod.z.lazy(() => NestedIntFilterSchema).optional(),
  _min: import_zod.z.lazy(() => NestedEnumOrderStatusFilterSchema).optional(),
  _max: import_zod.z.lazy(() => NestedEnumOrderStatusFilterSchema).optional()
}).strict();
var OrderRelationFilterSchema = import_zod.z.object({
  is: import_zod.z.lazy(() => OrderWhereInputSchema).optional(),
  isNot: import_zod.z.lazy(() => OrderWhereInputSchema).optional()
}).strict();
var OrderItemCountOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  orderId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  ingredientId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  quantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  unit: import_zod.z.lazy(() => SortOrderSchema).optional(),
  price: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var OrderItemAvgOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  orderId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  ingredientId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  quantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  price: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var OrderItemMaxOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  orderId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  ingredientId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  quantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  unit: import_zod.z.lazy(() => SortOrderSchema).optional(),
  price: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var OrderItemMinOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  orderId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  ingredientId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  quantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  unit: import_zod.z.lazy(() => SortOrderSchema).optional(),
  price: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var OrderItemSumOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  orderId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  ingredientId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  quantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  price: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var VendorCountOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  contact: import_zod.z.lazy(() => SortOrderSchema).optional(),
  email: import_zod.z.lazy(() => SortOrderSchema).optional(),
  phone: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var VendorAvgOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var VendorMaxOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  contact: import_zod.z.lazy(() => SortOrderSchema).optional(),
  email: import_zod.z.lazy(() => SortOrderSchema).optional(),
  phone: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var VendorMinOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  contact: import_zod.z.lazy(() => SortOrderSchema).optional(),
  email: import_zod.z.lazy(() => SortOrderSchema).optional(),
  phone: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var VendorSumOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var EnumShiftStatusFilterSchema = import_zod.z.object({
  equals: import_zod.z.lazy(() => ShiftStatusSchema).optional(),
  in: import_zod.z.lazy(() => ShiftStatusSchema).array().optional(),
  notIn: import_zod.z.lazy(() => ShiftStatusSchema).array().optional(),
  not: import_zod.z.union([import_zod.z.lazy(() => ShiftStatusSchema), import_zod.z.lazy(() => NestedEnumShiftStatusFilterSchema)]).optional()
}).strict();
var ShiftTaskListRelationFilterSchema = import_zod.z.object({
  every: import_zod.z.lazy(() => ShiftTaskWhereInputSchema).optional(),
  some: import_zod.z.lazy(() => ShiftTaskWhereInputSchema).optional(),
  none: import_zod.z.lazy(() => ShiftTaskWhereInputSchema).optional()
}).strict();
var ShiftTaskOrderByRelationAggregateInputSchema = import_zod.z.object({
  _count: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var ShiftCountOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  userId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  startTime: import_zod.z.lazy(() => SortOrderSchema).optional(),
  endTime: import_zod.z.lazy(() => SortOrderSchema).optional(),
  status: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var ShiftAvgOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  userId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var ShiftMaxOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  userId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  startTime: import_zod.z.lazy(() => SortOrderSchema).optional(),
  endTime: import_zod.z.lazy(() => SortOrderSchema).optional(),
  status: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var ShiftMinOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  userId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  startTime: import_zod.z.lazy(() => SortOrderSchema).optional(),
  endTime: import_zod.z.lazy(() => SortOrderSchema).optional(),
  status: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var ShiftSumOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  userId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var EnumShiftStatusWithAggregatesFilterSchema = import_zod.z.object({
  equals: import_zod.z.lazy(() => ShiftStatusSchema).optional(),
  in: import_zod.z.lazy(() => ShiftStatusSchema).array().optional(),
  notIn: import_zod.z.lazy(() => ShiftStatusSchema).array().optional(),
  not: import_zod.z.union([import_zod.z.lazy(() => ShiftStatusSchema), import_zod.z.lazy(() => NestedEnumShiftStatusWithAggregatesFilterSchema)]).optional(),
  _count: import_zod.z.lazy(() => NestedIntFilterSchema).optional(),
  _min: import_zod.z.lazy(() => NestedEnumShiftStatusFilterSchema).optional(),
  _max: import_zod.z.lazy(() => NestedEnumShiftStatusFilterSchema).optional()
}).strict();
var EnumPrepStatusFilterSchema = import_zod.z.object({
  equals: import_zod.z.lazy(() => PrepStatusSchema).optional(),
  in: import_zod.z.lazy(() => PrepStatusSchema).array().optional(),
  notIn: import_zod.z.lazy(() => PrepStatusSchema).array().optional(),
  not: import_zod.z.union([import_zod.z.lazy(() => PrepStatusSchema), import_zod.z.lazy(() => NestedEnumPrepStatusFilterSchema)]).optional()
}).strict();
var PrepBoardCountOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  status: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var PrepBoardAvgOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var PrepBoardMaxOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  status: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var PrepBoardMinOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  status: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var PrepBoardSumOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var EnumPrepStatusWithAggregatesFilterSchema = import_zod.z.object({
  equals: import_zod.z.lazy(() => PrepStatusSchema).optional(),
  in: import_zod.z.lazy(() => PrepStatusSchema).array().optional(),
  notIn: import_zod.z.lazy(() => PrepStatusSchema).array().optional(),
  not: import_zod.z.union([import_zod.z.lazy(() => PrepStatusSchema), import_zod.z.lazy(() => NestedEnumPrepStatusWithAggregatesFilterSchema)]).optional(),
  _count: import_zod.z.lazy(() => NestedIntFilterSchema).optional(),
  _min: import_zod.z.lazy(() => NestedEnumPrepStatusFilterSchema).optional(),
  _max: import_zod.z.lazy(() => NestedEnumPrepStatusFilterSchema).optional()
}).strict();
var PrepBoardRelationFilterSchema = import_zod.z.object({
  is: import_zod.z.lazy(() => PrepBoardWhereInputSchema).optional(),
  isNot: import_zod.z.lazy(() => PrepBoardWhereInputSchema).optional()
}).strict();
var PrepItemCountOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  prepBoardId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  quantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  status: import_zod.z.lazy(() => SortOrderSchema).optional(),
  assignedToId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var PrepItemAvgOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  prepBoardId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  quantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  assignedToId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var PrepItemMaxOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  prepBoardId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  quantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  status: import_zod.z.lazy(() => SortOrderSchema).optional(),
  assignedToId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var PrepItemMinOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  prepBoardId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  quantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  status: import_zod.z.lazy(() => SortOrderSchema).optional(),
  assignedToId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var PrepItemSumOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  prepBoardId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  quantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  assignedToId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var PasswordResetCountOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  token: import_zod.z.lazy(() => SortOrderSchema).optional(),
  userId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  expiresAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var PasswordResetAvgOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  userId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var PasswordResetMaxOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  token: import_zod.z.lazy(() => SortOrderSchema).optional(),
  userId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  expiresAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var PasswordResetMinOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  token: import_zod.z.lazy(() => SortOrderSchema).optional(),
  userId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  expiresAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var PasswordResetSumOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  userId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var MenuCategoryListRelationFilterSchema = import_zod.z.object({
  every: import_zod.z.lazy(() => MenuCategoryWhereInputSchema).optional(),
  some: import_zod.z.lazy(() => MenuCategoryWhereInputSchema).optional(),
  none: import_zod.z.lazy(() => MenuCategoryWhereInputSchema).optional()
}).strict();
var MenuCategoryOrderByRelationAggregateInputSchema = import_zod.z.object({
  _count: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var MenuCountOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var MenuAvgOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var MenuMaxOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var MenuMinOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var MenuSumOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  restaurantId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var MenuItemRecipeMenuItemIdRecipeIdCompoundUniqueInputSchema = import_zod.z.object({
  menuItemId: import_zod.z.number(),
  recipeId: import_zod.z.number()
}).strict();
var MenuItemRecipeCountOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  menuItemId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  joinAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var MenuItemRecipeAvgOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  menuItemId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var MenuItemRecipeMaxOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  menuItemId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  joinAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var MenuItemRecipeMinOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  menuItemId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  joinAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var MenuItemRecipeSumOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  menuItemId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var IntNullableListFilterSchema = import_zod.z.object({
  equals: import_zod.z.number().array().optional().nullable(),
  has: import_zod.z.number().optional().nullable(),
  hasEvery: import_zod.z.number().array().optional(),
  hasSome: import_zod.z.number().array().optional(),
  isEmpty: import_zod.z.boolean().optional()
}).strict();
var FloatNullableListFilterSchema = import_zod.z.object({
  equals: import_zod.z.number().array().optional().nullable(),
  has: import_zod.z.number().optional().nullable(),
  hasEvery: import_zod.z.number().array().optional(),
  hasSome: import_zod.z.number().array().optional(),
  isEmpty: import_zod.z.boolean().optional()
}).strict();
var NutritionalInfoNullableRelationFilterSchema = import_zod.z.object({
  is: import_zod.z.lazy(() => NutritionalInfoWhereInputSchema).optional().nullable(),
  isNot: import_zod.z.lazy(() => NutritionalInfoWhereInputSchema).optional().nullable()
}).strict();
var NutritionalRecommendationListRelationFilterSchema = import_zod.z.object({
  every: import_zod.z.lazy(() => NutritionalRecommendationWhereInputSchema).optional(),
  some: import_zod.z.lazy(() => NutritionalRecommendationWhereInputSchema).optional(),
  none: import_zod.z.lazy(() => NutritionalRecommendationWhereInputSchema).optional()
}).strict();
var MenuCategoryNullableRelationFilterSchema = import_zod.z.object({
  is: import_zod.z.lazy(() => MenuCategoryWhereInputSchema).optional().nullable(),
  isNot: import_zod.z.lazy(() => MenuCategoryWhereInputSchema).optional().nullable()
}).strict();
var NutritionalRecommendationOrderByRelationAggregateInputSchema = import_zod.z.object({
  _count: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var MenuItemCountOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  description: import_zod.z.lazy(() => SortOrderSchema).optional(),
  price: import_zod.z.lazy(() => SortOrderSchema).optional(),
  foodCost: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeIds: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeServingsAmount: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeServingsCost: import_zod.z.lazy(() => SortOrderSchema).optional(),
  allergens: import_zod.z.lazy(() => SortOrderSchema).optional(),
  nutritionalInfoId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  menuId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  categoryId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var MenuItemAvgOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  price: import_zod.z.lazy(() => SortOrderSchema).optional(),
  foodCost: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeIds: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeServingsAmount: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeServingsCost: import_zod.z.lazy(() => SortOrderSchema).optional(),
  nutritionalInfoId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  menuId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  categoryId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var MenuItemMaxOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  description: import_zod.z.lazy(() => SortOrderSchema).optional(),
  price: import_zod.z.lazy(() => SortOrderSchema).optional(),
  foodCost: import_zod.z.lazy(() => SortOrderSchema).optional(),
  nutritionalInfoId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  menuId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  categoryId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var MenuItemMinOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  name: import_zod.z.lazy(() => SortOrderSchema).optional(),
  description: import_zod.z.lazy(() => SortOrderSchema).optional(),
  price: import_zod.z.lazy(() => SortOrderSchema).optional(),
  foodCost: import_zod.z.lazy(() => SortOrderSchema).optional(),
  nutritionalInfoId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  menuId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  categoryId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var MenuItemSumOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  price: import_zod.z.lazy(() => SortOrderSchema).optional(),
  foodCost: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeIds: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeServingsAmount: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeServingsCost: import_zod.z.lazy(() => SortOrderSchema).optional(),
  nutritionalInfoId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  menuId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  categoryId: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var NutritionalInfoCountOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  menuItemId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  calories: import_zod.z.lazy(() => SortOrderSchema).optional(),
  fat: import_zod.z.lazy(() => SortOrderSchema).optional(),
  saturatedFat: import_zod.z.lazy(() => SortOrderSchema).optional(),
  transFat: import_zod.z.lazy(() => SortOrderSchema).optional(),
  cholesterol: import_zod.z.lazy(() => SortOrderSchema).optional(),
  sodium: import_zod.z.lazy(() => SortOrderSchema).optional(),
  carbohydrates: import_zod.z.lazy(() => SortOrderSchema).optional(),
  fiber: import_zod.z.lazy(() => SortOrderSchema).optional(),
  sugar: import_zod.z.lazy(() => SortOrderSchema).optional(),
  protein: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var NutritionalInfoAvgOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  menuItemId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  calories: import_zod.z.lazy(() => SortOrderSchema).optional(),
  fat: import_zod.z.lazy(() => SortOrderSchema).optional(),
  saturatedFat: import_zod.z.lazy(() => SortOrderSchema).optional(),
  transFat: import_zod.z.lazy(() => SortOrderSchema).optional(),
  cholesterol: import_zod.z.lazy(() => SortOrderSchema).optional(),
  sodium: import_zod.z.lazy(() => SortOrderSchema).optional(),
  carbohydrates: import_zod.z.lazy(() => SortOrderSchema).optional(),
  fiber: import_zod.z.lazy(() => SortOrderSchema).optional(),
  sugar: import_zod.z.lazy(() => SortOrderSchema).optional(),
  protein: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var NutritionalInfoMaxOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  menuItemId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  calories: import_zod.z.lazy(() => SortOrderSchema).optional(),
  fat: import_zod.z.lazy(() => SortOrderSchema).optional(),
  saturatedFat: import_zod.z.lazy(() => SortOrderSchema).optional(),
  transFat: import_zod.z.lazy(() => SortOrderSchema).optional(),
  cholesterol: import_zod.z.lazy(() => SortOrderSchema).optional(),
  sodium: import_zod.z.lazy(() => SortOrderSchema).optional(),
  carbohydrates: import_zod.z.lazy(() => SortOrderSchema).optional(),
  fiber: import_zod.z.lazy(() => SortOrderSchema).optional(),
  sugar: import_zod.z.lazy(() => SortOrderSchema).optional(),
  protein: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var NutritionalInfoMinOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  menuItemId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  calories: import_zod.z.lazy(() => SortOrderSchema).optional(),
  fat: import_zod.z.lazy(() => SortOrderSchema).optional(),
  saturatedFat: import_zod.z.lazy(() => SortOrderSchema).optional(),
  transFat: import_zod.z.lazy(() => SortOrderSchema).optional(),
  cholesterol: import_zod.z.lazy(() => SortOrderSchema).optional(),
  sodium: import_zod.z.lazy(() => SortOrderSchema).optional(),
  carbohydrates: import_zod.z.lazy(() => SortOrderSchema).optional(),
  fiber: import_zod.z.lazy(() => SortOrderSchema).optional(),
  sugar: import_zod.z.lazy(() => SortOrderSchema).optional(),
  protein: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var NutritionalInfoSumOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  menuItemId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  calories: import_zod.z.lazy(() => SortOrderSchema).optional(),
  fat: import_zod.z.lazy(() => SortOrderSchema).optional(),
  saturatedFat: import_zod.z.lazy(() => SortOrderSchema).optional(),
  transFat: import_zod.z.lazy(() => SortOrderSchema).optional(),
  cholesterol: import_zod.z.lazy(() => SortOrderSchema).optional(),
  sodium: import_zod.z.lazy(() => SortOrderSchema).optional(),
  carbohydrates: import_zod.z.lazy(() => SortOrderSchema).optional(),
  fiber: import_zod.z.lazy(() => SortOrderSchema).optional(),
  sugar: import_zod.z.lazy(() => SortOrderSchema).optional(),
  protein: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var FoodCostHistoryCountOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  cost: import_zod.z.lazy(() => SortOrderSchema).optional(),
  date: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var FoodCostHistoryAvgOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  cost: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var FoodCostHistoryMaxOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  cost: import_zod.z.lazy(() => SortOrderSchema).optional(),
  date: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var FoodCostHistoryMinOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  cost: import_zod.z.lazy(() => SortOrderSchema).optional(),
  date: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var FoodCostHistorySumOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  cost: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var PrepHistoryCountOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  quantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  date: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var PrepHistoryAvgOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  quantity: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var PrepHistoryMaxOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  quantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  date: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var PrepHistoryMinOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  quantity: import_zod.z.lazy(() => SortOrderSchema).optional(),
  date: import_zod.z.lazy(() => SortOrderSchema).optional(),
  createdAt: import_zod.z.lazy(() => SortOrderSchema).optional(),
  updatedAt: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var PrepHistorySumOrderByAggregateInputSchema = import_zod.z.object({
  id: import_zod.z.lazy(() => SortOrderSchema).optional(),
  recipeId: import_zod.z.lazy(() => SortOrderSchema).optional(),
  quantity: import_zod.z.lazy(() => SortOrderSchema).optional()
}).strict();
var RestaurantCreateNestedOneWithoutSalesTransactionsInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RestaurantCreateWithoutSalesTransactionsInputSchema), import_zod.z.lazy(() => RestaurantUncheckedCreateWithoutSalesTransactionsInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => RestaurantCreateOrConnectWithoutSalesTransactionsInputSchema).optional(),
  connect: import_zod.z.lazy(() => RestaurantWhereUniqueInputSchema).optional()
}).strict();
var MenuItemCreateNestedOneWithoutSalesTransactionsInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateWithoutSalesTransactionsInputSchema), import_zod.z.lazy(() => MenuItemUncheckedCreateWithoutSalesTransactionsInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => MenuItemCreateOrConnectWithoutSalesTransactionsInputSchema).optional(),
  connect: import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema).optional()
}).strict();
var NullableStringFieldUpdateOperationsInputSchema = import_zod.z.object({
  set: import_zod.z.string().optional().nullable()
}).strict();
var FloatFieldUpdateOperationsInputSchema = import_zod.z.object({
  set: import_zod.z.number().optional(),
  increment: import_zod.z.number().optional(),
  decrement: import_zod.z.number().optional(),
  multiply: import_zod.z.number().optional(),
  divide: import_zod.z.number().optional()
}).strict();
var DateTimeFieldUpdateOperationsInputSchema = import_zod.z.object({
  set: import_zod.z.coerce.date().optional()
}).strict();
var RestaurantUpdateOneRequiredWithoutSalesTransactionsNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RestaurantCreateWithoutSalesTransactionsInputSchema), import_zod.z.lazy(() => RestaurantUncheckedCreateWithoutSalesTransactionsInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => RestaurantCreateOrConnectWithoutSalesTransactionsInputSchema).optional(),
  upsert: import_zod.z.lazy(() => RestaurantUpsertWithoutSalesTransactionsInputSchema).optional(),
  connect: import_zod.z.lazy(() => RestaurantWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => RestaurantUpdateToOneWithWhereWithoutSalesTransactionsInputSchema), import_zod.z.lazy(() => RestaurantUpdateWithoutSalesTransactionsInputSchema), import_zod.z.lazy(() => RestaurantUncheckedUpdateWithoutSalesTransactionsInputSchema)]).optional()
}).strict();
var MenuItemUpdateOneRequiredWithoutSalesTransactionsNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateWithoutSalesTransactionsInputSchema), import_zod.z.lazy(() => MenuItemUncheckedCreateWithoutSalesTransactionsInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => MenuItemCreateOrConnectWithoutSalesTransactionsInputSchema).optional(),
  upsert: import_zod.z.lazy(() => MenuItemUpsertWithoutSalesTransactionsInputSchema).optional(),
  connect: import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateToOneWithWhereWithoutSalesTransactionsInputSchema), import_zod.z.lazy(() => MenuItemUpdateWithoutSalesTransactionsInputSchema), import_zod.z.lazy(() => MenuItemUncheckedUpdateWithoutSalesTransactionsInputSchema)]).optional()
}).strict();
var IntFieldUpdateOperationsInputSchema = import_zod.z.object({
  set: import_zod.z.number().optional(),
  increment: import_zod.z.number().optional(),
  decrement: import_zod.z.number().optional(),
  multiply: import_zod.z.number().optional(),
  divide: import_zod.z.number().optional()
}).strict();
var MenuCreateNestedOneWithoutMenuCategoryInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => MenuCreateWithoutMenuCategoryInputSchema), import_zod.z.lazy(() => MenuUncheckedCreateWithoutMenuCategoryInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => MenuCreateOrConnectWithoutMenuCategoryInputSchema).optional(),
  connect: import_zod.z.lazy(() => MenuWhereUniqueInputSchema).optional()
}).strict();
var MenuItemCreateNestedManyWithoutCategoryInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateWithoutCategoryInputSchema), import_zod.z.lazy(() => MenuItemCreateWithoutCategoryInputSchema).array(), import_zod.z.lazy(() => MenuItemUncheckedCreateWithoutCategoryInputSchema), import_zod.z.lazy(() => MenuItemUncheckedCreateWithoutCategoryInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateOrConnectWithoutCategoryInputSchema), import_zod.z.lazy(() => MenuItemCreateOrConnectWithoutCategoryInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => MenuItemCreateManyCategoryInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema), import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var MenuItemUncheckedCreateNestedManyWithoutCategoryInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateWithoutCategoryInputSchema), import_zod.z.lazy(() => MenuItemCreateWithoutCategoryInputSchema).array(), import_zod.z.lazy(() => MenuItemUncheckedCreateWithoutCategoryInputSchema), import_zod.z.lazy(() => MenuItemUncheckedCreateWithoutCategoryInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateOrConnectWithoutCategoryInputSchema), import_zod.z.lazy(() => MenuItemCreateOrConnectWithoutCategoryInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => MenuItemCreateManyCategoryInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema), import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var StringFieldUpdateOperationsInputSchema = import_zod.z.object({
  set: import_zod.z.string().optional()
}).strict();
var BoolFieldUpdateOperationsInputSchema = import_zod.z.object({
  set: import_zod.z.boolean().optional()
}).strict();
var MenuUpdateOneRequiredWithoutMenuCategoryNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => MenuCreateWithoutMenuCategoryInputSchema), import_zod.z.lazy(() => MenuUncheckedCreateWithoutMenuCategoryInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => MenuCreateOrConnectWithoutMenuCategoryInputSchema).optional(),
  upsert: import_zod.z.lazy(() => MenuUpsertWithoutMenuCategoryInputSchema).optional(),
  connect: import_zod.z.lazy(() => MenuWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => MenuUpdateToOneWithWhereWithoutMenuCategoryInputSchema), import_zod.z.lazy(() => MenuUpdateWithoutMenuCategoryInputSchema), import_zod.z.lazy(() => MenuUncheckedUpdateWithoutMenuCategoryInputSchema)]).optional()
}).strict();
var MenuItemUpdateManyWithoutCategoryNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateWithoutCategoryInputSchema), import_zod.z.lazy(() => MenuItemCreateWithoutCategoryInputSchema).array(), import_zod.z.lazy(() => MenuItemUncheckedCreateWithoutCategoryInputSchema), import_zod.z.lazy(() => MenuItemUncheckedCreateWithoutCategoryInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateOrConnectWithoutCategoryInputSchema), import_zod.z.lazy(() => MenuItemCreateOrConnectWithoutCategoryInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpsertWithWhereUniqueWithoutCategoryInputSchema), import_zod.z.lazy(() => MenuItemUpsertWithWhereUniqueWithoutCategoryInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => MenuItemCreateManyCategoryInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema), import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema), import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema), import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema), import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateWithWhereUniqueWithoutCategoryInputSchema), import_zod.z.lazy(() => MenuItemUpdateWithWhereUniqueWithoutCategoryInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateManyWithWhereWithoutCategoryInputSchema), import_zod.z.lazy(() => MenuItemUpdateManyWithWhereWithoutCategoryInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => MenuItemScalarWhereInputSchema), import_zod.z.lazy(() => MenuItemScalarWhereInputSchema).array()]).optional()
}).strict();
var MenuItemUncheckedUpdateManyWithoutCategoryNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateWithoutCategoryInputSchema), import_zod.z.lazy(() => MenuItemCreateWithoutCategoryInputSchema).array(), import_zod.z.lazy(() => MenuItemUncheckedCreateWithoutCategoryInputSchema), import_zod.z.lazy(() => MenuItemUncheckedCreateWithoutCategoryInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateOrConnectWithoutCategoryInputSchema), import_zod.z.lazy(() => MenuItemCreateOrConnectWithoutCategoryInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpsertWithWhereUniqueWithoutCategoryInputSchema), import_zod.z.lazy(() => MenuItemUpsertWithWhereUniqueWithoutCategoryInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => MenuItemCreateManyCategoryInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema), import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema), import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema), import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema), import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateWithWhereUniqueWithoutCategoryInputSchema), import_zod.z.lazy(() => MenuItemUpdateWithWhereUniqueWithoutCategoryInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateManyWithWhereWithoutCategoryInputSchema), import_zod.z.lazy(() => MenuItemUpdateManyWithWhereWithoutCategoryInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => MenuItemScalarWhereInputSchema), import_zod.z.lazy(() => MenuItemScalarWhereInputSchema).array()]).optional()
}).strict();
var RecipeCreateNestedOneWithoutVersionsInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutVersionsInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutVersionsInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => RecipeCreateOrConnectWithoutVersionsInputSchema).optional(),
  connect: import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).optional()
}).strict();
var RecipeIngredientCreateNestedManyWithoutRecipeVersionInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientCreateWithoutRecipeVersionInputSchema), import_zod.z.lazy(() => RecipeIngredientCreateWithoutRecipeVersionInputSchema).array(), import_zod.z.lazy(() => RecipeIngredientUncheckedCreateWithoutRecipeVersionInputSchema), import_zod.z.lazy(() => RecipeIngredientUncheckedCreateWithoutRecipeVersionInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientCreateOrConnectWithoutRecipeVersionInputSchema), import_zod.z.lazy(() => RecipeIngredientCreateOrConnectWithoutRecipeVersionInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => RecipeIngredientCreateManyRecipeVersionInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema).array()]).optional()
}).strict();
var RecipeInstructionCreateNestedManyWithoutRecipeVersionInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionCreateWithoutRecipeVersionInputSchema), import_zod.z.lazy(() => RecipeInstructionCreateWithoutRecipeVersionInputSchema).array(), import_zod.z.lazy(() => RecipeInstructionUncheckedCreateWithoutRecipeVersionInputSchema), import_zod.z.lazy(() => RecipeInstructionUncheckedCreateWithoutRecipeVersionInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionCreateOrConnectWithoutRecipeVersionInputSchema), import_zod.z.lazy(() => RecipeInstructionCreateOrConnectWithoutRecipeVersionInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => RecipeInstructionCreateManyRecipeVersionInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeInstructionWhereUniqueInputSchema).array()]).optional()
}).strict();
var UserCreateNestedOneWithoutRecipeVersionsCreatedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutRecipeVersionsCreatedInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutRecipeVersionsCreatedInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => UserCreateOrConnectWithoutRecipeVersionsCreatedInputSchema).optional(),
  connect: import_zod.z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();
var UserCreateNestedOneWithoutRecipeVersionsApprovedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutRecipeVersionsApprovedInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutRecipeVersionsApprovedInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => UserCreateOrConnectWithoutRecipeVersionsApprovedInputSchema).optional(),
  connect: import_zod.z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();
var RecipeIngredientUncheckedCreateNestedManyWithoutRecipeVersionInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientCreateWithoutRecipeVersionInputSchema), import_zod.z.lazy(() => RecipeIngredientCreateWithoutRecipeVersionInputSchema).array(), import_zod.z.lazy(() => RecipeIngredientUncheckedCreateWithoutRecipeVersionInputSchema), import_zod.z.lazy(() => RecipeIngredientUncheckedCreateWithoutRecipeVersionInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientCreateOrConnectWithoutRecipeVersionInputSchema), import_zod.z.lazy(() => RecipeIngredientCreateOrConnectWithoutRecipeVersionInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => RecipeIngredientCreateManyRecipeVersionInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema).array()]).optional()
}).strict();
var RecipeInstructionUncheckedCreateNestedManyWithoutRecipeVersionInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionCreateWithoutRecipeVersionInputSchema), import_zod.z.lazy(() => RecipeInstructionCreateWithoutRecipeVersionInputSchema).array(), import_zod.z.lazy(() => RecipeInstructionUncheckedCreateWithoutRecipeVersionInputSchema), import_zod.z.lazy(() => RecipeInstructionUncheckedCreateWithoutRecipeVersionInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionCreateOrConnectWithoutRecipeVersionInputSchema), import_zod.z.lazy(() => RecipeInstructionCreateOrConnectWithoutRecipeVersionInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => RecipeInstructionCreateManyRecipeVersionInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeInstructionWhereUniqueInputSchema).array()]).optional()
}).strict();
var NullableDateTimeFieldUpdateOperationsInputSchema = import_zod.z.object({
  set: import_zod.z.coerce.date().optional().nullable()
}).strict();
var RecipeUpdateOneRequiredWithoutVersionsNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutVersionsInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutVersionsInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => RecipeCreateOrConnectWithoutVersionsInputSchema).optional(),
  upsert: import_zod.z.lazy(() => RecipeUpsertWithoutVersionsInputSchema).optional(),
  connect: import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateToOneWithWhereWithoutVersionsInputSchema), import_zod.z.lazy(() => RecipeUpdateWithoutVersionsInputSchema), import_zod.z.lazy(() => RecipeUncheckedUpdateWithoutVersionsInputSchema)]).optional()
}).strict();
var RecipeIngredientUpdateManyWithoutRecipeVersionNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientCreateWithoutRecipeVersionInputSchema), import_zod.z.lazy(() => RecipeIngredientCreateWithoutRecipeVersionInputSchema).array(), import_zod.z.lazy(() => RecipeIngredientUncheckedCreateWithoutRecipeVersionInputSchema), import_zod.z.lazy(() => RecipeIngredientUncheckedCreateWithoutRecipeVersionInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientCreateOrConnectWithoutRecipeVersionInputSchema), import_zod.z.lazy(() => RecipeIngredientCreateOrConnectWithoutRecipeVersionInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientUpsertWithWhereUniqueWithoutRecipeVersionInputSchema), import_zod.z.lazy(() => RecipeIngredientUpsertWithWhereUniqueWithoutRecipeVersionInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => RecipeIngredientCreateManyRecipeVersionInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientUpdateWithWhereUniqueWithoutRecipeVersionInputSchema), import_zod.z.lazy(() => RecipeIngredientUpdateWithWhereUniqueWithoutRecipeVersionInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientUpdateManyWithWhereWithoutRecipeVersionInputSchema), import_zod.z.lazy(() => RecipeIngredientUpdateManyWithWhereWithoutRecipeVersionInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientScalarWhereInputSchema), import_zod.z.lazy(() => RecipeIngredientScalarWhereInputSchema).array()]).optional()
}).strict();
var RecipeInstructionUpdateManyWithoutRecipeVersionNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionCreateWithoutRecipeVersionInputSchema), import_zod.z.lazy(() => RecipeInstructionCreateWithoutRecipeVersionInputSchema).array(), import_zod.z.lazy(() => RecipeInstructionUncheckedCreateWithoutRecipeVersionInputSchema), import_zod.z.lazy(() => RecipeInstructionUncheckedCreateWithoutRecipeVersionInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionCreateOrConnectWithoutRecipeVersionInputSchema), import_zod.z.lazy(() => RecipeInstructionCreateOrConnectWithoutRecipeVersionInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionUpsertWithWhereUniqueWithoutRecipeVersionInputSchema), import_zod.z.lazy(() => RecipeInstructionUpsertWithWhereUniqueWithoutRecipeVersionInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => RecipeInstructionCreateManyRecipeVersionInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeInstructionWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeInstructionWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeInstructionWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeInstructionWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionUpdateWithWhereUniqueWithoutRecipeVersionInputSchema), import_zod.z.lazy(() => RecipeInstructionUpdateWithWhereUniqueWithoutRecipeVersionInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionUpdateManyWithWhereWithoutRecipeVersionInputSchema), import_zod.z.lazy(() => RecipeInstructionUpdateManyWithWhereWithoutRecipeVersionInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionScalarWhereInputSchema), import_zod.z.lazy(() => RecipeInstructionScalarWhereInputSchema).array()]).optional()
}).strict();
var UserUpdateOneRequiredWithoutRecipeVersionsCreatedNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutRecipeVersionsCreatedInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutRecipeVersionsCreatedInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => UserCreateOrConnectWithoutRecipeVersionsCreatedInputSchema).optional(),
  upsert: import_zod.z.lazy(() => UserUpsertWithoutRecipeVersionsCreatedInputSchema).optional(),
  connect: import_zod.z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => UserUpdateToOneWithWhereWithoutRecipeVersionsCreatedInputSchema), import_zod.z.lazy(() => UserUpdateWithoutRecipeVersionsCreatedInputSchema), import_zod.z.lazy(() => UserUncheckedUpdateWithoutRecipeVersionsCreatedInputSchema)]).optional()
}).strict();
var UserUpdateOneWithoutRecipeVersionsApprovedNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutRecipeVersionsApprovedInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutRecipeVersionsApprovedInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => UserCreateOrConnectWithoutRecipeVersionsApprovedInputSchema).optional(),
  upsert: import_zod.z.lazy(() => UserUpsertWithoutRecipeVersionsApprovedInputSchema).optional(),
  disconnect: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => UserWhereInputSchema)]).optional(),
  delete: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => UserWhereInputSchema)]).optional(),
  connect: import_zod.z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => UserUpdateToOneWithWhereWithoutRecipeVersionsApprovedInputSchema), import_zod.z.lazy(() => UserUpdateWithoutRecipeVersionsApprovedInputSchema), import_zod.z.lazy(() => UserUncheckedUpdateWithoutRecipeVersionsApprovedInputSchema)]).optional()
}).strict();
var NullableIntFieldUpdateOperationsInputSchema = import_zod.z.object({
  set: import_zod.z.number().optional().nullable(),
  increment: import_zod.z.number().optional(),
  decrement: import_zod.z.number().optional(),
  multiply: import_zod.z.number().optional(),
  divide: import_zod.z.number().optional()
}).strict();
var RecipeIngredientUncheckedUpdateManyWithoutRecipeVersionNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientCreateWithoutRecipeVersionInputSchema), import_zod.z.lazy(() => RecipeIngredientCreateWithoutRecipeVersionInputSchema).array(), import_zod.z.lazy(() => RecipeIngredientUncheckedCreateWithoutRecipeVersionInputSchema), import_zod.z.lazy(() => RecipeIngredientUncheckedCreateWithoutRecipeVersionInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientCreateOrConnectWithoutRecipeVersionInputSchema), import_zod.z.lazy(() => RecipeIngredientCreateOrConnectWithoutRecipeVersionInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientUpsertWithWhereUniqueWithoutRecipeVersionInputSchema), import_zod.z.lazy(() => RecipeIngredientUpsertWithWhereUniqueWithoutRecipeVersionInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => RecipeIngredientCreateManyRecipeVersionInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientUpdateWithWhereUniqueWithoutRecipeVersionInputSchema), import_zod.z.lazy(() => RecipeIngredientUpdateWithWhereUniqueWithoutRecipeVersionInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientUpdateManyWithWhereWithoutRecipeVersionInputSchema), import_zod.z.lazy(() => RecipeIngredientUpdateManyWithWhereWithoutRecipeVersionInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientScalarWhereInputSchema), import_zod.z.lazy(() => RecipeIngredientScalarWhereInputSchema).array()]).optional()
}).strict();
var RecipeInstructionUncheckedUpdateManyWithoutRecipeVersionNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionCreateWithoutRecipeVersionInputSchema), import_zod.z.lazy(() => RecipeInstructionCreateWithoutRecipeVersionInputSchema).array(), import_zod.z.lazy(() => RecipeInstructionUncheckedCreateWithoutRecipeVersionInputSchema), import_zod.z.lazy(() => RecipeInstructionUncheckedCreateWithoutRecipeVersionInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionCreateOrConnectWithoutRecipeVersionInputSchema), import_zod.z.lazy(() => RecipeInstructionCreateOrConnectWithoutRecipeVersionInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionUpsertWithWhereUniqueWithoutRecipeVersionInputSchema), import_zod.z.lazy(() => RecipeInstructionUpsertWithWhereUniqueWithoutRecipeVersionInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => RecipeInstructionCreateManyRecipeVersionInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeInstructionWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeInstructionWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeInstructionWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeInstructionWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionUpdateWithWhereUniqueWithoutRecipeVersionInputSchema), import_zod.z.lazy(() => RecipeInstructionUpdateWithWhereUniqueWithoutRecipeVersionInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionUpdateManyWithWhereWithoutRecipeVersionInputSchema), import_zod.z.lazy(() => RecipeInstructionUpdateManyWithWhereWithoutRecipeVersionInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionScalarWhereInputSchema), import_zod.z.lazy(() => RecipeInstructionScalarWhereInputSchema).array()]).optional()
}).strict();
var RestaurantCreateNestedOneWithoutEquipmentInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RestaurantCreateWithoutEquipmentInputSchema), import_zod.z.lazy(() => RestaurantUncheckedCreateWithoutEquipmentInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => RestaurantCreateOrConnectWithoutEquipmentInputSchema).optional(),
  connect: import_zod.z.lazy(() => RestaurantWhereUniqueInputSchema).optional()
}).strict();
var RecipeEquipmentCreateNestedManyWithoutEquipmentInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentCreateWithoutEquipmentInputSchema), import_zod.z.lazy(() => RecipeEquipmentCreateWithoutEquipmentInputSchema).array(), import_zod.z.lazy(() => RecipeEquipmentUncheckedCreateWithoutEquipmentInputSchema), import_zod.z.lazy(() => RecipeEquipmentUncheckedCreateWithoutEquipmentInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentCreateOrConnectWithoutEquipmentInputSchema), import_zod.z.lazy(() => RecipeEquipmentCreateOrConnectWithoutEquipmentInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => RecipeEquipmentCreateManyEquipmentInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array()]).optional()
}).strict();
var MaintenanceLogCreateNestedManyWithoutEquipmentInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => MaintenanceLogCreateWithoutEquipmentInputSchema), import_zod.z.lazy(() => MaintenanceLogCreateWithoutEquipmentInputSchema).array(), import_zod.z.lazy(() => MaintenanceLogUncheckedCreateWithoutEquipmentInputSchema), import_zod.z.lazy(() => MaintenanceLogUncheckedCreateWithoutEquipmentInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => MaintenanceLogCreateOrConnectWithoutEquipmentInputSchema), import_zod.z.lazy(() => MaintenanceLogCreateOrConnectWithoutEquipmentInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => MaintenanceLogCreateManyEquipmentInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => MaintenanceLogWhereUniqueInputSchema), import_zod.z.lazy(() => MaintenanceLogWhereUniqueInputSchema).array()]).optional()
}).strict();
var RecipeEquipmentUncheckedCreateNestedManyWithoutEquipmentInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentCreateWithoutEquipmentInputSchema), import_zod.z.lazy(() => RecipeEquipmentCreateWithoutEquipmentInputSchema).array(), import_zod.z.lazy(() => RecipeEquipmentUncheckedCreateWithoutEquipmentInputSchema), import_zod.z.lazy(() => RecipeEquipmentUncheckedCreateWithoutEquipmentInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentCreateOrConnectWithoutEquipmentInputSchema), import_zod.z.lazy(() => RecipeEquipmentCreateOrConnectWithoutEquipmentInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => RecipeEquipmentCreateManyEquipmentInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array()]).optional()
}).strict();
var MaintenanceLogUncheckedCreateNestedManyWithoutEquipmentInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => MaintenanceLogCreateWithoutEquipmentInputSchema), import_zod.z.lazy(() => MaintenanceLogCreateWithoutEquipmentInputSchema).array(), import_zod.z.lazy(() => MaintenanceLogUncheckedCreateWithoutEquipmentInputSchema), import_zod.z.lazy(() => MaintenanceLogUncheckedCreateWithoutEquipmentInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => MaintenanceLogCreateOrConnectWithoutEquipmentInputSchema), import_zod.z.lazy(() => MaintenanceLogCreateOrConnectWithoutEquipmentInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => MaintenanceLogCreateManyEquipmentInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => MaintenanceLogWhereUniqueInputSchema), import_zod.z.lazy(() => MaintenanceLogWhereUniqueInputSchema).array()]).optional()
}).strict();
var EnumEquipmentStatusFieldUpdateOperationsInputSchema = import_zod.z.object({
  set: import_zod.z.lazy(() => EquipmentStatusSchema).optional()
}).strict();
var RestaurantUpdateOneRequiredWithoutEquipmentNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RestaurantCreateWithoutEquipmentInputSchema), import_zod.z.lazy(() => RestaurantUncheckedCreateWithoutEquipmentInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => RestaurantCreateOrConnectWithoutEquipmentInputSchema).optional(),
  upsert: import_zod.z.lazy(() => RestaurantUpsertWithoutEquipmentInputSchema).optional(),
  connect: import_zod.z.lazy(() => RestaurantWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => RestaurantUpdateToOneWithWhereWithoutEquipmentInputSchema), import_zod.z.lazy(() => RestaurantUpdateWithoutEquipmentInputSchema), import_zod.z.lazy(() => RestaurantUncheckedUpdateWithoutEquipmentInputSchema)]).optional()
}).strict();
var RecipeEquipmentUpdateManyWithoutEquipmentNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentCreateWithoutEquipmentInputSchema), import_zod.z.lazy(() => RecipeEquipmentCreateWithoutEquipmentInputSchema).array(), import_zod.z.lazy(() => RecipeEquipmentUncheckedCreateWithoutEquipmentInputSchema), import_zod.z.lazy(() => RecipeEquipmentUncheckedCreateWithoutEquipmentInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentCreateOrConnectWithoutEquipmentInputSchema), import_zod.z.lazy(() => RecipeEquipmentCreateOrConnectWithoutEquipmentInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentUpsertWithWhereUniqueWithoutEquipmentInputSchema), import_zod.z.lazy(() => RecipeEquipmentUpsertWithWhereUniqueWithoutEquipmentInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => RecipeEquipmentCreateManyEquipmentInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentUpdateWithWhereUniqueWithoutEquipmentInputSchema), import_zod.z.lazy(() => RecipeEquipmentUpdateWithWhereUniqueWithoutEquipmentInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentUpdateManyWithWhereWithoutEquipmentInputSchema), import_zod.z.lazy(() => RecipeEquipmentUpdateManyWithWhereWithoutEquipmentInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentScalarWhereInputSchema), import_zod.z.lazy(() => RecipeEquipmentScalarWhereInputSchema).array()]).optional()
}).strict();
var MaintenanceLogUpdateManyWithoutEquipmentNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => MaintenanceLogCreateWithoutEquipmentInputSchema), import_zod.z.lazy(() => MaintenanceLogCreateWithoutEquipmentInputSchema).array(), import_zod.z.lazy(() => MaintenanceLogUncheckedCreateWithoutEquipmentInputSchema), import_zod.z.lazy(() => MaintenanceLogUncheckedCreateWithoutEquipmentInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => MaintenanceLogCreateOrConnectWithoutEquipmentInputSchema), import_zod.z.lazy(() => MaintenanceLogCreateOrConnectWithoutEquipmentInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => MaintenanceLogUpsertWithWhereUniqueWithoutEquipmentInputSchema), import_zod.z.lazy(() => MaintenanceLogUpsertWithWhereUniqueWithoutEquipmentInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => MaintenanceLogCreateManyEquipmentInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => MaintenanceLogWhereUniqueInputSchema), import_zod.z.lazy(() => MaintenanceLogWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => MaintenanceLogWhereUniqueInputSchema), import_zod.z.lazy(() => MaintenanceLogWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => MaintenanceLogWhereUniqueInputSchema), import_zod.z.lazy(() => MaintenanceLogWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => MaintenanceLogWhereUniqueInputSchema), import_zod.z.lazy(() => MaintenanceLogWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => MaintenanceLogUpdateWithWhereUniqueWithoutEquipmentInputSchema), import_zod.z.lazy(() => MaintenanceLogUpdateWithWhereUniqueWithoutEquipmentInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => MaintenanceLogUpdateManyWithWhereWithoutEquipmentInputSchema), import_zod.z.lazy(() => MaintenanceLogUpdateManyWithWhereWithoutEquipmentInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => MaintenanceLogScalarWhereInputSchema), import_zod.z.lazy(() => MaintenanceLogScalarWhereInputSchema).array()]).optional()
}).strict();
var RecipeEquipmentUncheckedUpdateManyWithoutEquipmentNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentCreateWithoutEquipmentInputSchema), import_zod.z.lazy(() => RecipeEquipmentCreateWithoutEquipmentInputSchema).array(), import_zod.z.lazy(() => RecipeEquipmentUncheckedCreateWithoutEquipmentInputSchema), import_zod.z.lazy(() => RecipeEquipmentUncheckedCreateWithoutEquipmentInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentCreateOrConnectWithoutEquipmentInputSchema), import_zod.z.lazy(() => RecipeEquipmentCreateOrConnectWithoutEquipmentInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentUpsertWithWhereUniqueWithoutEquipmentInputSchema), import_zod.z.lazy(() => RecipeEquipmentUpsertWithWhereUniqueWithoutEquipmentInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => RecipeEquipmentCreateManyEquipmentInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentUpdateWithWhereUniqueWithoutEquipmentInputSchema), import_zod.z.lazy(() => RecipeEquipmentUpdateWithWhereUniqueWithoutEquipmentInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentUpdateManyWithWhereWithoutEquipmentInputSchema), import_zod.z.lazy(() => RecipeEquipmentUpdateManyWithWhereWithoutEquipmentInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentScalarWhereInputSchema), import_zod.z.lazy(() => RecipeEquipmentScalarWhereInputSchema).array()]).optional()
}).strict();
var MaintenanceLogUncheckedUpdateManyWithoutEquipmentNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => MaintenanceLogCreateWithoutEquipmentInputSchema), import_zod.z.lazy(() => MaintenanceLogCreateWithoutEquipmentInputSchema).array(), import_zod.z.lazy(() => MaintenanceLogUncheckedCreateWithoutEquipmentInputSchema), import_zod.z.lazy(() => MaintenanceLogUncheckedCreateWithoutEquipmentInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => MaintenanceLogCreateOrConnectWithoutEquipmentInputSchema), import_zod.z.lazy(() => MaintenanceLogCreateOrConnectWithoutEquipmentInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => MaintenanceLogUpsertWithWhereUniqueWithoutEquipmentInputSchema), import_zod.z.lazy(() => MaintenanceLogUpsertWithWhereUniqueWithoutEquipmentInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => MaintenanceLogCreateManyEquipmentInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => MaintenanceLogWhereUniqueInputSchema), import_zod.z.lazy(() => MaintenanceLogWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => MaintenanceLogWhereUniqueInputSchema), import_zod.z.lazy(() => MaintenanceLogWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => MaintenanceLogWhereUniqueInputSchema), import_zod.z.lazy(() => MaintenanceLogWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => MaintenanceLogWhereUniqueInputSchema), import_zod.z.lazy(() => MaintenanceLogWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => MaintenanceLogUpdateWithWhereUniqueWithoutEquipmentInputSchema), import_zod.z.lazy(() => MaintenanceLogUpdateWithWhereUniqueWithoutEquipmentInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => MaintenanceLogUpdateManyWithWhereWithoutEquipmentInputSchema), import_zod.z.lazy(() => MaintenanceLogUpdateManyWithWhereWithoutEquipmentInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => MaintenanceLogScalarWhereInputSchema), import_zod.z.lazy(() => MaintenanceLogScalarWhereInputSchema).array()]).optional()
}).strict();
var RecipeCreateNestedOneWithoutEquipmentInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutEquipmentInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutEquipmentInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => RecipeCreateOrConnectWithoutEquipmentInputSchema).optional(),
  connect: import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).optional()
}).strict();
var EquipmentCreateNestedOneWithoutRecipesInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => EquipmentCreateWithoutRecipesInputSchema), import_zod.z.lazy(() => EquipmentUncheckedCreateWithoutRecipesInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => EquipmentCreateOrConnectWithoutRecipesInputSchema).optional(),
  connect: import_zod.z.lazy(() => EquipmentWhereUniqueInputSchema).optional()
}).strict();
var RecipeUpdateOneRequiredWithoutEquipmentNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutEquipmentInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutEquipmentInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => RecipeCreateOrConnectWithoutEquipmentInputSchema).optional(),
  upsert: import_zod.z.lazy(() => RecipeUpsertWithoutEquipmentInputSchema).optional(),
  connect: import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateToOneWithWhereWithoutEquipmentInputSchema), import_zod.z.lazy(() => RecipeUpdateWithoutEquipmentInputSchema), import_zod.z.lazy(() => RecipeUncheckedUpdateWithoutEquipmentInputSchema)]).optional()
}).strict();
var EquipmentUpdateOneRequiredWithoutRecipesNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => EquipmentCreateWithoutRecipesInputSchema), import_zod.z.lazy(() => EquipmentUncheckedCreateWithoutRecipesInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => EquipmentCreateOrConnectWithoutRecipesInputSchema).optional(),
  upsert: import_zod.z.lazy(() => EquipmentUpsertWithoutRecipesInputSchema).optional(),
  connect: import_zod.z.lazy(() => EquipmentWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => EquipmentUpdateToOneWithWhereWithoutRecipesInputSchema), import_zod.z.lazy(() => EquipmentUpdateWithoutRecipesInputSchema), import_zod.z.lazy(() => EquipmentUncheckedUpdateWithoutRecipesInputSchema)]).optional()
}).strict();
var EquipmentCreateNestedOneWithoutMaintenanceLogsInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => EquipmentCreateWithoutMaintenanceLogsInputSchema), import_zod.z.lazy(() => EquipmentUncheckedCreateWithoutMaintenanceLogsInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => EquipmentCreateOrConnectWithoutMaintenanceLogsInputSchema).optional(),
  connect: import_zod.z.lazy(() => EquipmentWhereUniqueInputSchema).optional()
}).strict();
var EnumMaintenanceTypeFieldUpdateOperationsInputSchema = import_zod.z.object({
  set: import_zod.z.lazy(() => MaintenanceTypeSchema).optional()
}).strict();
var NullableFloatFieldUpdateOperationsInputSchema = import_zod.z.object({
  set: import_zod.z.number().optional().nullable(),
  increment: import_zod.z.number().optional(),
  decrement: import_zod.z.number().optional(),
  multiply: import_zod.z.number().optional(),
  divide: import_zod.z.number().optional()
}).strict();
var EquipmentUpdateOneRequiredWithoutMaintenanceLogsNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => EquipmentCreateWithoutMaintenanceLogsInputSchema), import_zod.z.lazy(() => EquipmentUncheckedCreateWithoutMaintenanceLogsInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => EquipmentCreateOrConnectWithoutMaintenanceLogsInputSchema).optional(),
  upsert: import_zod.z.lazy(() => EquipmentUpsertWithoutMaintenanceLogsInputSchema).optional(),
  connect: import_zod.z.lazy(() => EquipmentWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => EquipmentUpdateToOneWithWhereWithoutMaintenanceLogsInputSchema), import_zod.z.lazy(() => EquipmentUpdateWithoutMaintenanceLogsInputSchema), import_zod.z.lazy(() => EquipmentUncheckedUpdateWithoutMaintenanceLogsInputSchema)]).optional()
}).strict();
var RestaurantCreateNestedOneWithoutQualityChecklistInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RestaurantCreateWithoutQualityChecklistInputSchema), import_zod.z.lazy(() => RestaurantUncheckedCreateWithoutQualityChecklistInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => RestaurantCreateOrConnectWithoutQualityChecklistInputSchema).optional(),
  connect: import_zod.z.lazy(() => RestaurantWhereUniqueInputSchema).optional()
}).strict();
var ChecklistItemCreateNestedManyWithoutChecklistInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCreateWithoutChecklistInputSchema), import_zod.z.lazy(() => ChecklistItemCreateWithoutChecklistInputSchema).array(), import_zod.z.lazy(() => ChecklistItemUncheckedCreateWithoutChecklistInputSchema), import_zod.z.lazy(() => ChecklistItemUncheckedCreateWithoutChecklistInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCreateOrConnectWithoutChecklistInputSchema), import_zod.z.lazy(() => ChecklistItemCreateOrConnectWithoutChecklistInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => ChecklistItemCreateManyChecklistInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemWhereUniqueInputSchema), import_zod.z.lazy(() => ChecklistItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var ChecklistCompleteCreateNestedManyWithoutChecklistInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteCreateWithoutChecklistInputSchema), import_zod.z.lazy(() => ChecklistCompleteCreateWithoutChecklistInputSchema).array(), import_zod.z.lazy(() => ChecklistCompleteUncheckedCreateWithoutChecklistInputSchema), import_zod.z.lazy(() => ChecklistCompleteUncheckedCreateWithoutChecklistInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteCreateOrConnectWithoutChecklistInputSchema), import_zod.z.lazy(() => ChecklistCompleteCreateOrConnectWithoutChecklistInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => ChecklistCompleteCreateManyChecklistInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteWhereUniqueInputSchema), import_zod.z.lazy(() => ChecklistCompleteWhereUniqueInputSchema).array()]).optional()
}).strict();
var ChecklistItemUncheckedCreateNestedManyWithoutChecklistInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCreateWithoutChecklistInputSchema), import_zod.z.lazy(() => ChecklistItemCreateWithoutChecklistInputSchema).array(), import_zod.z.lazy(() => ChecklistItemUncheckedCreateWithoutChecklistInputSchema), import_zod.z.lazy(() => ChecklistItemUncheckedCreateWithoutChecklistInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCreateOrConnectWithoutChecklistInputSchema), import_zod.z.lazy(() => ChecklistItemCreateOrConnectWithoutChecklistInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => ChecklistItemCreateManyChecklistInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemWhereUniqueInputSchema), import_zod.z.lazy(() => ChecklistItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var ChecklistCompleteUncheckedCreateNestedManyWithoutChecklistInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteCreateWithoutChecklistInputSchema), import_zod.z.lazy(() => ChecklistCompleteCreateWithoutChecklistInputSchema).array(), import_zod.z.lazy(() => ChecklistCompleteUncheckedCreateWithoutChecklistInputSchema), import_zod.z.lazy(() => ChecklistCompleteUncheckedCreateWithoutChecklistInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteCreateOrConnectWithoutChecklistInputSchema), import_zod.z.lazy(() => ChecklistCompleteCreateOrConnectWithoutChecklistInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => ChecklistCompleteCreateManyChecklistInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteWhereUniqueInputSchema), import_zod.z.lazy(() => ChecklistCompleteWhereUniqueInputSchema).array()]).optional()
}).strict();
var EnumChecklistFrequencyFieldUpdateOperationsInputSchema = import_zod.z.object({
  set: import_zod.z.lazy(() => ChecklistFrequencySchema).optional()
}).strict();
var RestaurantUpdateOneRequiredWithoutQualityChecklistNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RestaurantCreateWithoutQualityChecklistInputSchema), import_zod.z.lazy(() => RestaurantUncheckedCreateWithoutQualityChecklistInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => RestaurantCreateOrConnectWithoutQualityChecklistInputSchema).optional(),
  upsert: import_zod.z.lazy(() => RestaurantUpsertWithoutQualityChecklistInputSchema).optional(),
  connect: import_zod.z.lazy(() => RestaurantWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => RestaurantUpdateToOneWithWhereWithoutQualityChecklistInputSchema), import_zod.z.lazy(() => RestaurantUpdateWithoutQualityChecklistInputSchema), import_zod.z.lazy(() => RestaurantUncheckedUpdateWithoutQualityChecklistInputSchema)]).optional()
}).strict();
var ChecklistItemUpdateManyWithoutChecklistNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCreateWithoutChecklistInputSchema), import_zod.z.lazy(() => ChecklistItemCreateWithoutChecklistInputSchema).array(), import_zod.z.lazy(() => ChecklistItemUncheckedCreateWithoutChecklistInputSchema), import_zod.z.lazy(() => ChecklistItemUncheckedCreateWithoutChecklistInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCreateOrConnectWithoutChecklistInputSchema), import_zod.z.lazy(() => ChecklistItemCreateOrConnectWithoutChecklistInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemUpsertWithWhereUniqueWithoutChecklistInputSchema), import_zod.z.lazy(() => ChecklistItemUpsertWithWhereUniqueWithoutChecklistInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => ChecklistItemCreateManyChecklistInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemWhereUniqueInputSchema), import_zod.z.lazy(() => ChecklistItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemWhereUniqueInputSchema), import_zod.z.lazy(() => ChecklistItemWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemWhereUniqueInputSchema), import_zod.z.lazy(() => ChecklistItemWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemWhereUniqueInputSchema), import_zod.z.lazy(() => ChecklistItemWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemUpdateWithWhereUniqueWithoutChecklistInputSchema), import_zod.z.lazy(() => ChecklistItemUpdateWithWhereUniqueWithoutChecklistInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemUpdateManyWithWhereWithoutChecklistInputSchema), import_zod.z.lazy(() => ChecklistItemUpdateManyWithWhereWithoutChecklistInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemScalarWhereInputSchema), import_zod.z.lazy(() => ChecklistItemScalarWhereInputSchema).array()]).optional()
}).strict();
var ChecklistCompleteUpdateManyWithoutChecklistNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteCreateWithoutChecklistInputSchema), import_zod.z.lazy(() => ChecklistCompleteCreateWithoutChecklistInputSchema).array(), import_zod.z.lazy(() => ChecklistCompleteUncheckedCreateWithoutChecklistInputSchema), import_zod.z.lazy(() => ChecklistCompleteUncheckedCreateWithoutChecklistInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteCreateOrConnectWithoutChecklistInputSchema), import_zod.z.lazy(() => ChecklistCompleteCreateOrConnectWithoutChecklistInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteUpsertWithWhereUniqueWithoutChecklistInputSchema), import_zod.z.lazy(() => ChecklistCompleteUpsertWithWhereUniqueWithoutChecklistInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => ChecklistCompleteCreateManyChecklistInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteWhereUniqueInputSchema), import_zod.z.lazy(() => ChecklistCompleteWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteWhereUniqueInputSchema), import_zod.z.lazy(() => ChecklistCompleteWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteWhereUniqueInputSchema), import_zod.z.lazy(() => ChecklistCompleteWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteWhereUniqueInputSchema), import_zod.z.lazy(() => ChecklistCompleteWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteUpdateWithWhereUniqueWithoutChecklistInputSchema), import_zod.z.lazy(() => ChecklistCompleteUpdateWithWhereUniqueWithoutChecklistInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteUpdateManyWithWhereWithoutChecklistInputSchema), import_zod.z.lazy(() => ChecklistCompleteUpdateManyWithWhereWithoutChecklistInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteScalarWhereInputSchema), import_zod.z.lazy(() => ChecklistCompleteScalarWhereInputSchema).array()]).optional()
}).strict();
var ChecklistItemUncheckedUpdateManyWithoutChecklistNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCreateWithoutChecklistInputSchema), import_zod.z.lazy(() => ChecklistItemCreateWithoutChecklistInputSchema).array(), import_zod.z.lazy(() => ChecklistItemUncheckedCreateWithoutChecklistInputSchema), import_zod.z.lazy(() => ChecklistItemUncheckedCreateWithoutChecklistInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCreateOrConnectWithoutChecklistInputSchema), import_zod.z.lazy(() => ChecklistItemCreateOrConnectWithoutChecklistInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemUpsertWithWhereUniqueWithoutChecklistInputSchema), import_zod.z.lazy(() => ChecklistItemUpsertWithWhereUniqueWithoutChecklistInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => ChecklistItemCreateManyChecklistInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemWhereUniqueInputSchema), import_zod.z.lazy(() => ChecklistItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemWhereUniqueInputSchema), import_zod.z.lazy(() => ChecklistItemWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemWhereUniqueInputSchema), import_zod.z.lazy(() => ChecklistItemWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemWhereUniqueInputSchema), import_zod.z.lazy(() => ChecklistItemWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemUpdateWithWhereUniqueWithoutChecklistInputSchema), import_zod.z.lazy(() => ChecklistItemUpdateWithWhereUniqueWithoutChecklistInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemUpdateManyWithWhereWithoutChecklistInputSchema), import_zod.z.lazy(() => ChecklistItemUpdateManyWithWhereWithoutChecklistInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemScalarWhereInputSchema), import_zod.z.lazy(() => ChecklistItemScalarWhereInputSchema).array()]).optional()
}).strict();
var ChecklistCompleteUncheckedUpdateManyWithoutChecklistNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteCreateWithoutChecklistInputSchema), import_zod.z.lazy(() => ChecklistCompleteCreateWithoutChecklistInputSchema).array(), import_zod.z.lazy(() => ChecklistCompleteUncheckedCreateWithoutChecklistInputSchema), import_zod.z.lazy(() => ChecklistCompleteUncheckedCreateWithoutChecklistInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteCreateOrConnectWithoutChecklistInputSchema), import_zod.z.lazy(() => ChecklistCompleteCreateOrConnectWithoutChecklistInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteUpsertWithWhereUniqueWithoutChecklistInputSchema), import_zod.z.lazy(() => ChecklistCompleteUpsertWithWhereUniqueWithoutChecklistInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => ChecklistCompleteCreateManyChecklistInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteWhereUniqueInputSchema), import_zod.z.lazy(() => ChecklistCompleteWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteWhereUniqueInputSchema), import_zod.z.lazy(() => ChecklistCompleteWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteWhereUniqueInputSchema), import_zod.z.lazy(() => ChecklistCompleteWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteWhereUniqueInputSchema), import_zod.z.lazy(() => ChecklistCompleteWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteUpdateWithWhereUniqueWithoutChecklistInputSchema), import_zod.z.lazy(() => ChecklistCompleteUpdateWithWhereUniqueWithoutChecklistInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteUpdateManyWithWhereWithoutChecklistInputSchema), import_zod.z.lazy(() => ChecklistCompleteUpdateManyWithWhereWithoutChecklistInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteScalarWhereInputSchema), import_zod.z.lazy(() => ChecklistCompleteScalarWhereInputSchema).array()]).optional()
}).strict();
var QualityChecklistCreateNestedOneWithoutItemsInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => QualityChecklistCreateWithoutItemsInputSchema), import_zod.z.lazy(() => QualityChecklistUncheckedCreateWithoutItemsInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => QualityChecklistCreateOrConnectWithoutItemsInputSchema).optional(),
  connect: import_zod.z.lazy(() => QualityChecklistWhereUniqueInputSchema).optional()
}).strict();
var ChecklistItemCompleteCreateNestedManyWithoutChecklistItemInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteCreateWithoutChecklistItemInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteCreateWithoutChecklistItemInputSchema).array(), import_zod.z.lazy(() => ChecklistItemCompleteUncheckedCreateWithoutChecklistItemInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteUncheckedCreateWithoutChecklistItemInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteCreateOrConnectWithoutChecklistItemInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteCreateOrConnectWithoutChecklistItemInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => ChecklistItemCompleteCreateManyChecklistItemInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema).array()]).optional()
}).strict();
var ChecklistItemCompleteUncheckedCreateNestedManyWithoutChecklistItemInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteCreateWithoutChecklistItemInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteCreateWithoutChecklistItemInputSchema).array(), import_zod.z.lazy(() => ChecklistItemCompleteUncheckedCreateWithoutChecklistItemInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteUncheckedCreateWithoutChecklistItemInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteCreateOrConnectWithoutChecklistItemInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteCreateOrConnectWithoutChecklistItemInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => ChecklistItemCompleteCreateManyChecklistItemInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema).array()]).optional()
}).strict();
var EnumChecklistItemTypeFieldUpdateOperationsInputSchema = import_zod.z.object({
  set: import_zod.z.lazy(() => ChecklistItemTypeSchema).optional()
}).strict();
var QualityChecklistUpdateOneRequiredWithoutItemsNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => QualityChecklistCreateWithoutItemsInputSchema), import_zod.z.lazy(() => QualityChecklistUncheckedCreateWithoutItemsInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => QualityChecklistCreateOrConnectWithoutItemsInputSchema).optional(),
  upsert: import_zod.z.lazy(() => QualityChecklistUpsertWithoutItemsInputSchema).optional(),
  connect: import_zod.z.lazy(() => QualityChecklistWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => QualityChecklistUpdateToOneWithWhereWithoutItemsInputSchema), import_zod.z.lazy(() => QualityChecklistUpdateWithoutItemsInputSchema), import_zod.z.lazy(() => QualityChecklistUncheckedUpdateWithoutItemsInputSchema)]).optional()
}).strict();
var ChecklistItemCompleteUpdateManyWithoutChecklistItemNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteCreateWithoutChecklistItemInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteCreateWithoutChecklistItemInputSchema).array(), import_zod.z.lazy(() => ChecklistItemCompleteUncheckedCreateWithoutChecklistItemInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteUncheckedCreateWithoutChecklistItemInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteCreateOrConnectWithoutChecklistItemInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteCreateOrConnectWithoutChecklistItemInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteUpsertWithWhereUniqueWithoutChecklistItemInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteUpsertWithWhereUniqueWithoutChecklistItemInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => ChecklistItemCompleteCreateManyChecklistItemInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteUpdateWithWhereUniqueWithoutChecklistItemInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteUpdateWithWhereUniqueWithoutChecklistItemInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteUpdateManyWithWhereWithoutChecklistItemInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteUpdateManyWithWhereWithoutChecklistItemInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteScalarWhereInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteScalarWhereInputSchema).array()]).optional()
}).strict();
var ChecklistItemCompleteUncheckedUpdateManyWithoutChecklistItemNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteCreateWithoutChecklistItemInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteCreateWithoutChecklistItemInputSchema).array(), import_zod.z.lazy(() => ChecklistItemCompleteUncheckedCreateWithoutChecklistItemInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteUncheckedCreateWithoutChecklistItemInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteCreateOrConnectWithoutChecklistItemInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteCreateOrConnectWithoutChecklistItemInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteUpsertWithWhereUniqueWithoutChecklistItemInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteUpsertWithWhereUniqueWithoutChecklistItemInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => ChecklistItemCompleteCreateManyChecklistItemInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteUpdateWithWhereUniqueWithoutChecklistItemInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteUpdateWithWhereUniqueWithoutChecklistItemInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteUpdateManyWithWhereWithoutChecklistItemInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteUpdateManyWithWhereWithoutChecklistItemInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteScalarWhereInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteScalarWhereInputSchema).array()]).optional()
}).strict();
var QualityChecklistCreateNestedOneWithoutCompletionsInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => QualityChecklistCreateWithoutCompletionsInputSchema), import_zod.z.lazy(() => QualityChecklistUncheckedCreateWithoutCompletionsInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => QualityChecklistCreateOrConnectWithoutCompletionsInputSchema).optional(),
  connect: import_zod.z.lazy(() => QualityChecklistWhereUniqueInputSchema).optional()
}).strict();
var UserCreateNestedOneWithoutChecklistCompleteInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutChecklistCompleteInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutChecklistCompleteInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => UserCreateOrConnectWithoutChecklistCompleteInputSchema).optional(),
  connect: import_zod.z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();
var ChecklistItemCompleteCreateNestedManyWithoutChecklistCompleteInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteCreateWithoutChecklistCompleteInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteCreateWithoutChecklistCompleteInputSchema).array(), import_zod.z.lazy(() => ChecklistItemCompleteUncheckedCreateWithoutChecklistCompleteInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteUncheckedCreateWithoutChecklistCompleteInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteCreateOrConnectWithoutChecklistCompleteInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteCreateOrConnectWithoutChecklistCompleteInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => ChecklistItemCompleteCreateManyChecklistCompleteInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema).array()]).optional()
}).strict();
var ChecklistItemCompleteUncheckedCreateNestedManyWithoutChecklistCompleteInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteCreateWithoutChecklistCompleteInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteCreateWithoutChecklistCompleteInputSchema).array(), import_zod.z.lazy(() => ChecklistItemCompleteUncheckedCreateWithoutChecklistCompleteInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteUncheckedCreateWithoutChecklistCompleteInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteCreateOrConnectWithoutChecklistCompleteInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteCreateOrConnectWithoutChecklistCompleteInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => ChecklistItemCompleteCreateManyChecklistCompleteInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema).array()]).optional()
}).strict();
var QualityChecklistUpdateOneRequiredWithoutCompletionsNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => QualityChecklistCreateWithoutCompletionsInputSchema), import_zod.z.lazy(() => QualityChecklistUncheckedCreateWithoutCompletionsInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => QualityChecklistCreateOrConnectWithoutCompletionsInputSchema).optional(),
  upsert: import_zod.z.lazy(() => QualityChecklistUpsertWithoutCompletionsInputSchema).optional(),
  connect: import_zod.z.lazy(() => QualityChecklistWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => QualityChecklistUpdateToOneWithWhereWithoutCompletionsInputSchema), import_zod.z.lazy(() => QualityChecklistUpdateWithoutCompletionsInputSchema), import_zod.z.lazy(() => QualityChecklistUncheckedUpdateWithoutCompletionsInputSchema)]).optional()
}).strict();
var UserUpdateOneRequiredWithoutChecklistCompleteNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutChecklistCompleteInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutChecklistCompleteInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => UserCreateOrConnectWithoutChecklistCompleteInputSchema).optional(),
  upsert: import_zod.z.lazy(() => UserUpsertWithoutChecklistCompleteInputSchema).optional(),
  connect: import_zod.z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => UserUpdateToOneWithWhereWithoutChecklistCompleteInputSchema), import_zod.z.lazy(() => UserUpdateWithoutChecklistCompleteInputSchema), import_zod.z.lazy(() => UserUncheckedUpdateWithoutChecklistCompleteInputSchema)]).optional()
}).strict();
var ChecklistItemCompleteUpdateManyWithoutChecklistCompleteNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteCreateWithoutChecklistCompleteInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteCreateWithoutChecklistCompleteInputSchema).array(), import_zod.z.lazy(() => ChecklistItemCompleteUncheckedCreateWithoutChecklistCompleteInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteUncheckedCreateWithoutChecklistCompleteInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteCreateOrConnectWithoutChecklistCompleteInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteCreateOrConnectWithoutChecklistCompleteInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteUpsertWithWhereUniqueWithoutChecklistCompleteInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteUpsertWithWhereUniqueWithoutChecklistCompleteInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => ChecklistItemCompleteCreateManyChecklistCompleteInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteUpdateWithWhereUniqueWithoutChecklistCompleteInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteUpdateWithWhereUniqueWithoutChecklistCompleteInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteUpdateManyWithWhereWithoutChecklistCompleteInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteUpdateManyWithWhereWithoutChecklistCompleteInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteScalarWhereInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteScalarWhereInputSchema).array()]).optional()
}).strict();
var ChecklistItemCompleteUncheckedUpdateManyWithoutChecklistCompleteNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteCreateWithoutChecklistCompleteInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteCreateWithoutChecklistCompleteInputSchema).array(), import_zod.z.lazy(() => ChecklistItemCompleteUncheckedCreateWithoutChecklistCompleteInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteUncheckedCreateWithoutChecklistCompleteInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteCreateOrConnectWithoutChecklistCompleteInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteCreateOrConnectWithoutChecklistCompleteInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteUpsertWithWhereUniqueWithoutChecklistCompleteInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteUpsertWithWhereUniqueWithoutChecklistCompleteInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => ChecklistItemCompleteCreateManyChecklistCompleteInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteUpdateWithWhereUniqueWithoutChecklistCompleteInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteUpdateWithWhereUniqueWithoutChecklistCompleteInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteUpdateManyWithWhereWithoutChecklistCompleteInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteUpdateManyWithWhereWithoutChecklistCompleteInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteScalarWhereInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteScalarWhereInputSchema).array()]).optional()
}).strict();
var ChecklistItemCompleteCreatephotoUrlsInputSchema = import_zod.z.object({
  set: import_zod.z.string().array()
}).strict();
var ChecklistCompleteCreateNestedOneWithoutItemsInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteCreateWithoutItemsInputSchema), import_zod.z.lazy(() => ChecklistCompleteUncheckedCreateWithoutItemsInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => ChecklistCompleteCreateOrConnectWithoutItemsInputSchema).optional(),
  connect: import_zod.z.lazy(() => ChecklistCompleteWhereUniqueInputSchema).optional()
}).strict();
var ChecklistItemCreateNestedOneWithoutCompletionsInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCreateWithoutCompletionsInputSchema), import_zod.z.lazy(() => ChecklistItemUncheckedCreateWithoutCompletionsInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => ChecklistItemCreateOrConnectWithoutCompletionsInputSchema).optional(),
  connect: import_zod.z.lazy(() => ChecklistItemWhereUniqueInputSchema).optional()
}).strict();
var EnumChecklistStatusFieldUpdateOperationsInputSchema = import_zod.z.object({
  set: import_zod.z.lazy(() => ChecklistStatusSchema).optional()
}).strict();
var ChecklistItemCompleteUpdatephotoUrlsInputSchema = import_zod.z.object({
  set: import_zod.z.string().array().optional(),
  push: import_zod.z.union([import_zod.z.string(), import_zod.z.string().array()]).optional()
}).strict();
var ChecklistCompleteUpdateOneRequiredWithoutItemsNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteCreateWithoutItemsInputSchema), import_zod.z.lazy(() => ChecklistCompleteUncheckedCreateWithoutItemsInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => ChecklistCompleteCreateOrConnectWithoutItemsInputSchema).optional(),
  upsert: import_zod.z.lazy(() => ChecklistCompleteUpsertWithoutItemsInputSchema).optional(),
  connect: import_zod.z.lazy(() => ChecklistCompleteWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteUpdateToOneWithWhereWithoutItemsInputSchema), import_zod.z.lazy(() => ChecklistCompleteUpdateWithoutItemsInputSchema), import_zod.z.lazy(() => ChecklistCompleteUncheckedUpdateWithoutItemsInputSchema)]).optional()
}).strict();
var ChecklistItemUpdateOneRequiredWithoutCompletionsNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCreateWithoutCompletionsInputSchema), import_zod.z.lazy(() => ChecklistItemUncheckedCreateWithoutCompletionsInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => ChecklistItemCreateOrConnectWithoutCompletionsInputSchema).optional(),
  upsert: import_zod.z.lazy(() => ChecklistItemUpsertWithoutCompletionsInputSchema).optional(),
  connect: import_zod.z.lazy(() => ChecklistItemWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemUpdateToOneWithWhereWithoutCompletionsInputSchema), import_zod.z.lazy(() => ChecklistItemUpdateWithoutCompletionsInputSchema), import_zod.z.lazy(() => ChecklistItemUncheckedUpdateWithoutCompletionsInputSchema)]).optional()
}).strict();
var VendorCreateNestedOneWithoutSupplierPriceHistoryInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => VendorCreateWithoutSupplierPriceHistoryInputSchema), import_zod.z.lazy(() => VendorUncheckedCreateWithoutSupplierPriceHistoryInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => VendorCreateOrConnectWithoutSupplierPriceHistoryInputSchema).optional(),
  connect: import_zod.z.lazy(() => VendorWhereUniqueInputSchema).optional()
}).strict();
var IngredientCreateNestedOneWithoutSupplierPriceHistoryInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => IngredientCreateWithoutSupplierPriceHistoryInputSchema), import_zod.z.lazy(() => IngredientUncheckedCreateWithoutSupplierPriceHistoryInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => IngredientCreateOrConnectWithoutSupplierPriceHistoryInputSchema).optional(),
  connect: import_zod.z.lazy(() => IngredientWhereUniqueInputSchema).optional()
}).strict();
var VendorUpdateOneRequiredWithoutSupplierPriceHistoryNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => VendorCreateWithoutSupplierPriceHistoryInputSchema), import_zod.z.lazy(() => VendorUncheckedCreateWithoutSupplierPriceHistoryInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => VendorCreateOrConnectWithoutSupplierPriceHistoryInputSchema).optional(),
  upsert: import_zod.z.lazy(() => VendorUpsertWithoutSupplierPriceHistoryInputSchema).optional(),
  connect: import_zod.z.lazy(() => VendorWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => VendorUpdateToOneWithWhereWithoutSupplierPriceHistoryInputSchema), import_zod.z.lazy(() => VendorUpdateWithoutSupplierPriceHistoryInputSchema), import_zod.z.lazy(() => VendorUncheckedUpdateWithoutSupplierPriceHistoryInputSchema)]).optional()
}).strict();
var IngredientUpdateOneRequiredWithoutSupplierPriceHistoryNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => IngredientCreateWithoutSupplierPriceHistoryInputSchema), import_zod.z.lazy(() => IngredientUncheckedCreateWithoutSupplierPriceHistoryInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => IngredientCreateOrConnectWithoutSupplierPriceHistoryInputSchema).optional(),
  upsert: import_zod.z.lazy(() => IngredientUpsertWithoutSupplierPriceHistoryInputSchema).optional(),
  connect: import_zod.z.lazy(() => IngredientWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => IngredientUpdateToOneWithWhereWithoutSupplierPriceHistoryInputSchema), import_zod.z.lazy(() => IngredientUpdateWithoutSupplierPriceHistoryInputSchema), import_zod.z.lazy(() => IngredientUncheckedUpdateWithoutSupplierPriceHistoryInputSchema)]).optional()
}).strict();
var CustomerFeedbackCreatetagsInputSchema = import_zod.z.object({
  set: import_zod.z.string().array()
}).strict();
var RestaurantCreateNestedOneWithoutQustomerFeedbackInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RestaurantCreateWithoutQustomerFeedbackInputSchema), import_zod.z.lazy(() => RestaurantUncheckedCreateWithoutQustomerFeedbackInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => RestaurantCreateOrConnectWithoutQustomerFeedbackInputSchema).optional(),
  connect: import_zod.z.lazy(() => RestaurantWhereUniqueInputSchema).optional()
}).strict();
var MenuItemCreateNestedOneWithoutFeedbackInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateWithoutFeedbackInputSchema), import_zod.z.lazy(() => MenuItemUncheckedCreateWithoutFeedbackInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => MenuItemCreateOrConnectWithoutFeedbackInputSchema).optional(),
  connect: import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema).optional()
}).strict();
var UserCreateNestedOneWithoutCustomerFeedbackInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutCustomerFeedbackInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutCustomerFeedbackInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => UserCreateOrConnectWithoutCustomerFeedbackInputSchema).optional(),
  connect: import_zod.z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();
var EnumFeedbackSourceFieldUpdateOperationsInputSchema = import_zod.z.object({
  set: import_zod.z.lazy(() => FeedbackSourceSchema).optional()
}).strict();
var CustomerFeedbackUpdatetagsInputSchema = import_zod.z.object({
  set: import_zod.z.string().array().optional(),
  push: import_zod.z.union([import_zod.z.string(), import_zod.z.string().array()]).optional()
}).strict();
var EnumFeedbackStatusFieldUpdateOperationsInputSchema = import_zod.z.object({
  set: import_zod.z.lazy(() => FeedbackStatusSchema).optional()
}).strict();
var RestaurantUpdateOneRequiredWithoutQustomerFeedbackNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RestaurantCreateWithoutQustomerFeedbackInputSchema), import_zod.z.lazy(() => RestaurantUncheckedCreateWithoutQustomerFeedbackInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => RestaurantCreateOrConnectWithoutQustomerFeedbackInputSchema).optional(),
  upsert: import_zod.z.lazy(() => RestaurantUpsertWithoutQustomerFeedbackInputSchema).optional(),
  connect: import_zod.z.lazy(() => RestaurantWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => RestaurantUpdateToOneWithWhereWithoutQustomerFeedbackInputSchema), import_zod.z.lazy(() => RestaurantUpdateWithoutQustomerFeedbackInputSchema), import_zod.z.lazy(() => RestaurantUncheckedUpdateWithoutQustomerFeedbackInputSchema)]).optional()
}).strict();
var MenuItemUpdateOneWithoutFeedbackNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateWithoutFeedbackInputSchema), import_zod.z.lazy(() => MenuItemUncheckedCreateWithoutFeedbackInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => MenuItemCreateOrConnectWithoutFeedbackInputSchema).optional(),
  upsert: import_zod.z.lazy(() => MenuItemUpsertWithoutFeedbackInputSchema).optional(),
  disconnect: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => MenuItemWhereInputSchema)]).optional(),
  delete: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => MenuItemWhereInputSchema)]).optional(),
  connect: import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateToOneWithWhereWithoutFeedbackInputSchema), import_zod.z.lazy(() => MenuItemUpdateWithoutFeedbackInputSchema), import_zod.z.lazy(() => MenuItemUncheckedUpdateWithoutFeedbackInputSchema)]).optional()
}).strict();
var UserUpdateOneWithoutCustomerFeedbackNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutCustomerFeedbackInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutCustomerFeedbackInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => UserCreateOrConnectWithoutCustomerFeedbackInputSchema).optional(),
  upsert: import_zod.z.lazy(() => UserUpsertWithoutCustomerFeedbackInputSchema).optional(),
  disconnect: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => UserWhereInputSchema)]).optional(),
  delete: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => UserWhereInputSchema)]).optional(),
  connect: import_zod.z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => UserUpdateToOneWithWhereWithoutCustomerFeedbackInputSchema), import_zod.z.lazy(() => UserUpdateWithoutCustomerFeedbackInputSchema), import_zod.z.lazy(() => UserUncheckedUpdateWithoutCustomerFeedbackInputSchema)]).optional()
}).strict();
var MenuItemCreateNestedManyWithoutDietaryRestrictionsInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateWithoutDietaryRestrictionsInputSchema), import_zod.z.lazy(() => MenuItemCreateWithoutDietaryRestrictionsInputSchema).array(), import_zod.z.lazy(() => MenuItemUncheckedCreateWithoutDietaryRestrictionsInputSchema), import_zod.z.lazy(() => MenuItemUncheckedCreateWithoutDietaryRestrictionsInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateOrConnectWithoutDietaryRestrictionsInputSchema), import_zod.z.lazy(() => MenuItemCreateOrConnectWithoutDietaryRestrictionsInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema), import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var RecipeCreateNestedManyWithoutDietaryRestrictionsInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutDietaryRestrictionsInputSchema), import_zod.z.lazy(() => RecipeCreateWithoutDietaryRestrictionsInputSchema).array(), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutDietaryRestrictionsInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutDietaryRestrictionsInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateOrConnectWithoutDietaryRestrictionsInputSchema), import_zod.z.lazy(() => RecipeCreateOrConnectWithoutDietaryRestrictionsInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional()
}).strict();
var IngredientCreateNestedManyWithoutDietaryRestrictionInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => IngredientCreateWithoutDietaryRestrictionInputSchema), import_zod.z.lazy(() => IngredientCreateWithoutDietaryRestrictionInputSchema).array(), import_zod.z.lazy(() => IngredientUncheckedCreateWithoutDietaryRestrictionInputSchema), import_zod.z.lazy(() => IngredientUncheckedCreateWithoutDietaryRestrictionInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => IngredientCreateOrConnectWithoutDietaryRestrictionInputSchema), import_zod.z.lazy(() => IngredientCreateOrConnectWithoutDietaryRestrictionInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => IngredientCreateManyDietaryRestrictionInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => IngredientWhereUniqueInputSchema), import_zod.z.lazy(() => IngredientWhereUniqueInputSchema).array()]).optional()
}).strict();
var MenuItemUncheckedCreateNestedManyWithoutDietaryRestrictionsInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateWithoutDietaryRestrictionsInputSchema), import_zod.z.lazy(() => MenuItemCreateWithoutDietaryRestrictionsInputSchema).array(), import_zod.z.lazy(() => MenuItemUncheckedCreateWithoutDietaryRestrictionsInputSchema), import_zod.z.lazy(() => MenuItemUncheckedCreateWithoutDietaryRestrictionsInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateOrConnectWithoutDietaryRestrictionsInputSchema), import_zod.z.lazy(() => MenuItemCreateOrConnectWithoutDietaryRestrictionsInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema), import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var RecipeUncheckedCreateNestedManyWithoutDietaryRestrictionsInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutDietaryRestrictionsInputSchema), import_zod.z.lazy(() => RecipeCreateWithoutDietaryRestrictionsInputSchema).array(), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutDietaryRestrictionsInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutDietaryRestrictionsInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateOrConnectWithoutDietaryRestrictionsInputSchema), import_zod.z.lazy(() => RecipeCreateOrConnectWithoutDietaryRestrictionsInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional()
}).strict();
var IngredientUncheckedCreateNestedManyWithoutDietaryRestrictionInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => IngredientCreateWithoutDietaryRestrictionInputSchema), import_zod.z.lazy(() => IngredientCreateWithoutDietaryRestrictionInputSchema).array(), import_zod.z.lazy(() => IngredientUncheckedCreateWithoutDietaryRestrictionInputSchema), import_zod.z.lazy(() => IngredientUncheckedCreateWithoutDietaryRestrictionInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => IngredientCreateOrConnectWithoutDietaryRestrictionInputSchema), import_zod.z.lazy(() => IngredientCreateOrConnectWithoutDietaryRestrictionInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => IngredientCreateManyDietaryRestrictionInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => IngredientWhereUniqueInputSchema), import_zod.z.lazy(() => IngredientWhereUniqueInputSchema).array()]).optional()
}).strict();
var MenuItemUpdateManyWithoutDietaryRestrictionsNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateWithoutDietaryRestrictionsInputSchema), import_zod.z.lazy(() => MenuItemCreateWithoutDietaryRestrictionsInputSchema).array(), import_zod.z.lazy(() => MenuItemUncheckedCreateWithoutDietaryRestrictionsInputSchema), import_zod.z.lazy(() => MenuItemUncheckedCreateWithoutDietaryRestrictionsInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateOrConnectWithoutDietaryRestrictionsInputSchema), import_zod.z.lazy(() => MenuItemCreateOrConnectWithoutDietaryRestrictionsInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpsertWithWhereUniqueWithoutDietaryRestrictionsInputSchema), import_zod.z.lazy(() => MenuItemUpsertWithWhereUniqueWithoutDietaryRestrictionsInputSchema).array()]).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema), import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema), import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema), import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema), import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateWithWhereUniqueWithoutDietaryRestrictionsInputSchema), import_zod.z.lazy(() => MenuItemUpdateWithWhereUniqueWithoutDietaryRestrictionsInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateManyWithWhereWithoutDietaryRestrictionsInputSchema), import_zod.z.lazy(() => MenuItemUpdateManyWithWhereWithoutDietaryRestrictionsInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => MenuItemScalarWhereInputSchema), import_zod.z.lazy(() => MenuItemScalarWhereInputSchema).array()]).optional()
}).strict();
var RecipeUpdateManyWithoutDietaryRestrictionsNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutDietaryRestrictionsInputSchema), import_zod.z.lazy(() => RecipeCreateWithoutDietaryRestrictionsInputSchema).array(), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutDietaryRestrictionsInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutDietaryRestrictionsInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateOrConnectWithoutDietaryRestrictionsInputSchema), import_zod.z.lazy(() => RecipeCreateOrConnectWithoutDietaryRestrictionsInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => RecipeUpsertWithWhereUniqueWithoutDietaryRestrictionsInputSchema), import_zod.z.lazy(() => RecipeUpsertWithWhereUniqueWithoutDietaryRestrictionsInputSchema).array()]).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => RecipeWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => RecipeWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => RecipeWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateWithWhereUniqueWithoutDietaryRestrictionsInputSchema), import_zod.z.lazy(() => RecipeUpdateWithWhereUniqueWithoutDietaryRestrictionsInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateManyWithWhereWithoutDietaryRestrictionsInputSchema), import_zod.z.lazy(() => RecipeUpdateManyWithWhereWithoutDietaryRestrictionsInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => RecipeScalarWhereInputSchema), import_zod.z.lazy(() => RecipeScalarWhereInputSchema).array()]).optional()
}).strict();
var IngredientUpdateManyWithoutDietaryRestrictionNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => IngredientCreateWithoutDietaryRestrictionInputSchema), import_zod.z.lazy(() => IngredientCreateWithoutDietaryRestrictionInputSchema).array(), import_zod.z.lazy(() => IngredientUncheckedCreateWithoutDietaryRestrictionInputSchema), import_zod.z.lazy(() => IngredientUncheckedCreateWithoutDietaryRestrictionInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => IngredientCreateOrConnectWithoutDietaryRestrictionInputSchema), import_zod.z.lazy(() => IngredientCreateOrConnectWithoutDietaryRestrictionInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => IngredientUpsertWithWhereUniqueWithoutDietaryRestrictionInputSchema), import_zod.z.lazy(() => IngredientUpsertWithWhereUniqueWithoutDietaryRestrictionInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => IngredientCreateManyDietaryRestrictionInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => IngredientWhereUniqueInputSchema), import_zod.z.lazy(() => IngredientWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => IngredientWhereUniqueInputSchema), import_zod.z.lazy(() => IngredientWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => IngredientWhereUniqueInputSchema), import_zod.z.lazy(() => IngredientWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => IngredientWhereUniqueInputSchema), import_zod.z.lazy(() => IngredientWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => IngredientUpdateWithWhereUniqueWithoutDietaryRestrictionInputSchema), import_zod.z.lazy(() => IngredientUpdateWithWhereUniqueWithoutDietaryRestrictionInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => IngredientUpdateManyWithWhereWithoutDietaryRestrictionInputSchema), import_zod.z.lazy(() => IngredientUpdateManyWithWhereWithoutDietaryRestrictionInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => IngredientScalarWhereInputSchema), import_zod.z.lazy(() => IngredientScalarWhereInputSchema).array()]).optional()
}).strict();
var MenuItemUncheckedUpdateManyWithoutDietaryRestrictionsNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateWithoutDietaryRestrictionsInputSchema), import_zod.z.lazy(() => MenuItemCreateWithoutDietaryRestrictionsInputSchema).array(), import_zod.z.lazy(() => MenuItemUncheckedCreateWithoutDietaryRestrictionsInputSchema), import_zod.z.lazy(() => MenuItemUncheckedCreateWithoutDietaryRestrictionsInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateOrConnectWithoutDietaryRestrictionsInputSchema), import_zod.z.lazy(() => MenuItemCreateOrConnectWithoutDietaryRestrictionsInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpsertWithWhereUniqueWithoutDietaryRestrictionsInputSchema), import_zod.z.lazy(() => MenuItemUpsertWithWhereUniqueWithoutDietaryRestrictionsInputSchema).array()]).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema), import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema), import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema), import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema), import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateWithWhereUniqueWithoutDietaryRestrictionsInputSchema), import_zod.z.lazy(() => MenuItemUpdateWithWhereUniqueWithoutDietaryRestrictionsInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateManyWithWhereWithoutDietaryRestrictionsInputSchema), import_zod.z.lazy(() => MenuItemUpdateManyWithWhereWithoutDietaryRestrictionsInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => MenuItemScalarWhereInputSchema), import_zod.z.lazy(() => MenuItemScalarWhereInputSchema).array()]).optional()
}).strict();
var RecipeUncheckedUpdateManyWithoutDietaryRestrictionsNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutDietaryRestrictionsInputSchema), import_zod.z.lazy(() => RecipeCreateWithoutDietaryRestrictionsInputSchema).array(), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutDietaryRestrictionsInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutDietaryRestrictionsInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateOrConnectWithoutDietaryRestrictionsInputSchema), import_zod.z.lazy(() => RecipeCreateOrConnectWithoutDietaryRestrictionsInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => RecipeUpsertWithWhereUniqueWithoutDietaryRestrictionsInputSchema), import_zod.z.lazy(() => RecipeUpsertWithWhereUniqueWithoutDietaryRestrictionsInputSchema).array()]).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => RecipeWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => RecipeWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => RecipeWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateWithWhereUniqueWithoutDietaryRestrictionsInputSchema), import_zod.z.lazy(() => RecipeUpdateWithWhereUniqueWithoutDietaryRestrictionsInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateManyWithWhereWithoutDietaryRestrictionsInputSchema), import_zod.z.lazy(() => RecipeUpdateManyWithWhereWithoutDietaryRestrictionsInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => RecipeScalarWhereInputSchema), import_zod.z.lazy(() => RecipeScalarWhereInputSchema).array()]).optional()
}).strict();
var IngredientUncheckedUpdateManyWithoutDietaryRestrictionNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => IngredientCreateWithoutDietaryRestrictionInputSchema), import_zod.z.lazy(() => IngredientCreateWithoutDietaryRestrictionInputSchema).array(), import_zod.z.lazy(() => IngredientUncheckedCreateWithoutDietaryRestrictionInputSchema), import_zod.z.lazy(() => IngredientUncheckedCreateWithoutDietaryRestrictionInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => IngredientCreateOrConnectWithoutDietaryRestrictionInputSchema), import_zod.z.lazy(() => IngredientCreateOrConnectWithoutDietaryRestrictionInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => IngredientUpsertWithWhereUniqueWithoutDietaryRestrictionInputSchema), import_zod.z.lazy(() => IngredientUpsertWithWhereUniqueWithoutDietaryRestrictionInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => IngredientCreateManyDietaryRestrictionInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => IngredientWhereUniqueInputSchema), import_zod.z.lazy(() => IngredientWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => IngredientWhereUniqueInputSchema), import_zod.z.lazy(() => IngredientWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => IngredientWhereUniqueInputSchema), import_zod.z.lazy(() => IngredientWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => IngredientWhereUniqueInputSchema), import_zod.z.lazy(() => IngredientWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => IngredientUpdateWithWhereUniqueWithoutDietaryRestrictionInputSchema), import_zod.z.lazy(() => IngredientUpdateWithWhereUniqueWithoutDietaryRestrictionInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => IngredientUpdateManyWithWhereWithoutDietaryRestrictionInputSchema), import_zod.z.lazy(() => IngredientUpdateManyWithWhereWithoutDietaryRestrictionInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => IngredientScalarWhereInputSchema), import_zod.z.lazy(() => IngredientScalarWhereInputSchema).array()]).optional()
}).strict();
var RecipeCreateNestedManyWithoutTagsInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutTagsInputSchema), import_zod.z.lazy(() => RecipeCreateWithoutTagsInputSchema).array(), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutTagsInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutTagsInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateOrConnectWithoutTagsInputSchema), import_zod.z.lazy(() => RecipeCreateOrConnectWithoutTagsInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional()
}).strict();
var RecipeUncheckedCreateNestedManyWithoutTagsInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutTagsInputSchema), import_zod.z.lazy(() => RecipeCreateWithoutTagsInputSchema).array(), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutTagsInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutTagsInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateOrConnectWithoutTagsInputSchema), import_zod.z.lazy(() => RecipeCreateOrConnectWithoutTagsInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional()
}).strict();
var RecipeUpdateManyWithoutTagsNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutTagsInputSchema), import_zod.z.lazy(() => RecipeCreateWithoutTagsInputSchema).array(), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutTagsInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutTagsInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateOrConnectWithoutTagsInputSchema), import_zod.z.lazy(() => RecipeCreateOrConnectWithoutTagsInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => RecipeUpsertWithWhereUniqueWithoutTagsInputSchema), import_zod.z.lazy(() => RecipeUpsertWithWhereUniqueWithoutTagsInputSchema).array()]).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => RecipeWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => RecipeWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => RecipeWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateWithWhereUniqueWithoutTagsInputSchema), import_zod.z.lazy(() => RecipeUpdateWithWhereUniqueWithoutTagsInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateManyWithWhereWithoutTagsInputSchema), import_zod.z.lazy(() => RecipeUpdateManyWithWhereWithoutTagsInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => RecipeScalarWhereInputSchema), import_zod.z.lazy(() => RecipeScalarWhereInputSchema).array()]).optional()
}).strict();
var RecipeUncheckedUpdateManyWithoutTagsNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutTagsInputSchema), import_zod.z.lazy(() => RecipeCreateWithoutTagsInputSchema).array(), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutTagsInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutTagsInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateOrConnectWithoutTagsInputSchema), import_zod.z.lazy(() => RecipeCreateOrConnectWithoutTagsInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => RecipeUpsertWithWhereUniqueWithoutTagsInputSchema), import_zod.z.lazy(() => RecipeUpsertWithWhereUniqueWithoutTagsInputSchema).array()]).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => RecipeWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => RecipeWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => RecipeWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateWithWhereUniqueWithoutTagsInputSchema), import_zod.z.lazy(() => RecipeUpdateWithWhereUniqueWithoutTagsInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateManyWithWhereWithoutTagsInputSchema), import_zod.z.lazy(() => RecipeUpdateManyWithWhereWithoutTagsInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => RecipeScalarWhereInputSchema), import_zod.z.lazy(() => RecipeScalarWhereInputSchema).array()]).optional()
}).strict();
var RestaurantCreateNestedOneWithoutLeftoverItemInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RestaurantCreateWithoutLeftoverItemInputSchema), import_zod.z.lazy(() => RestaurantUncheckedCreateWithoutLeftoverItemInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => RestaurantCreateOrConnectWithoutLeftoverItemInputSchema).optional(),
  connect: import_zod.z.lazy(() => RestaurantWhereUniqueInputSchema).optional()
}).strict();
var MenuItemCreateNestedOneWithoutLeftoverItemInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateWithoutLeftoverItemInputSchema), import_zod.z.lazy(() => MenuItemUncheckedCreateWithoutLeftoverItemInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => MenuItemCreateOrConnectWithoutLeftoverItemInputSchema).optional(),
  connect: import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema).optional()
}).strict();
var UserCreateNestedOneWithoutLeftoverItemInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutLeftoverItemInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutLeftoverItemInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => UserCreateOrConnectWithoutLeftoverItemInputSchema).optional(),
  connect: import_zod.z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();
var RestaurantUpdateOneRequiredWithoutLeftoverItemNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RestaurantCreateWithoutLeftoverItemInputSchema), import_zod.z.lazy(() => RestaurantUncheckedCreateWithoutLeftoverItemInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => RestaurantCreateOrConnectWithoutLeftoverItemInputSchema).optional(),
  upsert: import_zod.z.lazy(() => RestaurantUpsertWithoutLeftoverItemInputSchema).optional(),
  connect: import_zod.z.lazy(() => RestaurantWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => RestaurantUpdateToOneWithWhereWithoutLeftoverItemInputSchema), import_zod.z.lazy(() => RestaurantUpdateWithoutLeftoverItemInputSchema), import_zod.z.lazy(() => RestaurantUncheckedUpdateWithoutLeftoverItemInputSchema)]).optional()
}).strict();
var MenuItemUpdateOneRequiredWithoutLeftoverItemNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateWithoutLeftoverItemInputSchema), import_zod.z.lazy(() => MenuItemUncheckedCreateWithoutLeftoverItemInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => MenuItemCreateOrConnectWithoutLeftoverItemInputSchema).optional(),
  upsert: import_zod.z.lazy(() => MenuItemUpsertWithoutLeftoverItemInputSchema).optional(),
  connect: import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateToOneWithWhereWithoutLeftoverItemInputSchema), import_zod.z.lazy(() => MenuItemUpdateWithoutLeftoverItemInputSchema), import_zod.z.lazy(() => MenuItemUncheckedUpdateWithoutLeftoverItemInputSchema)]).optional()
}).strict();
var UserUpdateOneRequiredWithoutLeftoverItemNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutLeftoverItemInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutLeftoverItemInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => UserCreateOrConnectWithoutLeftoverItemInputSchema).optional(),
  upsert: import_zod.z.lazy(() => UserUpsertWithoutLeftoverItemInputSchema).optional(),
  connect: import_zod.z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => UserUpdateToOneWithWhereWithoutLeftoverItemInputSchema), import_zod.z.lazy(() => UserUpdateWithoutLeftoverItemInputSchema), import_zod.z.lazy(() => UserUncheckedUpdateWithoutLeftoverItemInputSchema)]).optional()
}).strict();
var RestaurantCreateNestedOneWithoutWasteRecordInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RestaurantCreateWithoutWasteRecordInputSchema), import_zod.z.lazy(() => RestaurantUncheckedCreateWithoutWasteRecordInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => RestaurantCreateOrConnectWithoutWasteRecordInputSchema).optional(),
  connect: import_zod.z.lazy(() => RestaurantWhereUniqueInputSchema).optional()
}).strict();
var IngredientCreateNestedOneWithoutWasteRecordInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => IngredientCreateWithoutWasteRecordInputSchema), import_zod.z.lazy(() => IngredientUncheckedCreateWithoutWasteRecordInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => IngredientCreateOrConnectWithoutWasteRecordInputSchema).optional(),
  connect: import_zod.z.lazy(() => IngredientWhereUniqueInputSchema).optional()
}).strict();
var UserCreateNestedOneWithoutWasteRecordInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutWasteRecordInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutWasteRecordInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => UserCreateOrConnectWithoutWasteRecordInputSchema).optional(),
  connect: import_zod.z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();
var RestaurantUpdateOneRequiredWithoutWasteRecordNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RestaurantCreateWithoutWasteRecordInputSchema), import_zod.z.lazy(() => RestaurantUncheckedCreateWithoutWasteRecordInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => RestaurantCreateOrConnectWithoutWasteRecordInputSchema).optional(),
  upsert: import_zod.z.lazy(() => RestaurantUpsertWithoutWasteRecordInputSchema).optional(),
  connect: import_zod.z.lazy(() => RestaurantWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => RestaurantUpdateToOneWithWhereWithoutWasteRecordInputSchema), import_zod.z.lazy(() => RestaurantUpdateWithoutWasteRecordInputSchema), import_zod.z.lazy(() => RestaurantUncheckedUpdateWithoutWasteRecordInputSchema)]).optional()
}).strict();
var IngredientUpdateOneRequiredWithoutWasteRecordNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => IngredientCreateWithoutWasteRecordInputSchema), import_zod.z.lazy(() => IngredientUncheckedCreateWithoutWasteRecordInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => IngredientCreateOrConnectWithoutWasteRecordInputSchema).optional(),
  upsert: import_zod.z.lazy(() => IngredientUpsertWithoutWasteRecordInputSchema).optional(),
  connect: import_zod.z.lazy(() => IngredientWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => IngredientUpdateToOneWithWhereWithoutWasteRecordInputSchema), import_zod.z.lazy(() => IngredientUpdateWithoutWasteRecordInputSchema), import_zod.z.lazy(() => IngredientUncheckedUpdateWithoutWasteRecordInputSchema)]).optional()
}).strict();
var UserUpdateOneRequiredWithoutWasteRecordNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutWasteRecordInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutWasteRecordInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => UserCreateOrConnectWithoutWasteRecordInputSchema).optional(),
  upsert: import_zod.z.lazy(() => UserUpsertWithoutWasteRecordInputSchema).optional(),
  connect: import_zod.z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => UserUpdateToOneWithWhereWithoutWasteRecordInputSchema), import_zod.z.lazy(() => UserUpdateWithoutWasteRecordInputSchema), import_zod.z.lazy(() => UserUncheckedUpdateWithoutWasteRecordInputSchema)]).optional()
}).strict();
var RestaurantCreateNestedOneWithoutProductionPlanInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RestaurantCreateWithoutProductionPlanInputSchema), import_zod.z.lazy(() => RestaurantUncheckedCreateWithoutProductionPlanInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => RestaurantCreateOrConnectWithoutProductionPlanInputSchema).optional(),
  connect: import_zod.z.lazy(() => RestaurantWhereUniqueInputSchema).optional()
}).strict();
var UserCreateNestedOneWithoutProductionPlanInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutProductionPlanInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutProductionPlanInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => UserCreateOrConnectWithoutProductionPlanInputSchema).optional(),
  connect: import_zod.z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();
var ProductionPlanItemCreateNestedManyWithoutProductionPlanInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemCreateWithoutProductionPlanInputSchema), import_zod.z.lazy(() => ProductionPlanItemCreateWithoutProductionPlanInputSchema).array(), import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateWithoutProductionPlanInputSchema), import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateWithoutProductionPlanInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemCreateOrConnectWithoutProductionPlanInputSchema), import_zod.z.lazy(() => ProductionPlanItemCreateOrConnectWithoutProductionPlanInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => ProductionPlanItemCreateManyProductionPlanInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema), import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var ProductionPlanItemUncheckedCreateNestedManyWithoutProductionPlanInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemCreateWithoutProductionPlanInputSchema), import_zod.z.lazy(() => ProductionPlanItemCreateWithoutProductionPlanInputSchema).array(), import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateWithoutProductionPlanInputSchema), import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateWithoutProductionPlanInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemCreateOrConnectWithoutProductionPlanInputSchema), import_zod.z.lazy(() => ProductionPlanItemCreateOrConnectWithoutProductionPlanInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => ProductionPlanItemCreateManyProductionPlanInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema), import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var RestaurantUpdateOneRequiredWithoutProductionPlanNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RestaurantCreateWithoutProductionPlanInputSchema), import_zod.z.lazy(() => RestaurantUncheckedCreateWithoutProductionPlanInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => RestaurantCreateOrConnectWithoutProductionPlanInputSchema).optional(),
  upsert: import_zod.z.lazy(() => RestaurantUpsertWithoutProductionPlanInputSchema).optional(),
  connect: import_zod.z.lazy(() => RestaurantWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => RestaurantUpdateToOneWithWhereWithoutProductionPlanInputSchema), import_zod.z.lazy(() => RestaurantUpdateWithoutProductionPlanInputSchema), import_zod.z.lazy(() => RestaurantUncheckedUpdateWithoutProductionPlanInputSchema)]).optional()
}).strict();
var UserUpdateOneRequiredWithoutProductionPlanNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutProductionPlanInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutProductionPlanInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => UserCreateOrConnectWithoutProductionPlanInputSchema).optional(),
  upsert: import_zod.z.lazy(() => UserUpsertWithoutProductionPlanInputSchema).optional(),
  connect: import_zod.z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => UserUpdateToOneWithWhereWithoutProductionPlanInputSchema), import_zod.z.lazy(() => UserUpdateWithoutProductionPlanInputSchema), import_zod.z.lazy(() => UserUncheckedUpdateWithoutProductionPlanInputSchema)]).optional()
}).strict();
var ProductionPlanItemUpdateManyWithoutProductionPlanNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemCreateWithoutProductionPlanInputSchema), import_zod.z.lazy(() => ProductionPlanItemCreateWithoutProductionPlanInputSchema).array(), import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateWithoutProductionPlanInputSchema), import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateWithoutProductionPlanInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemCreateOrConnectWithoutProductionPlanInputSchema), import_zod.z.lazy(() => ProductionPlanItemCreateOrConnectWithoutProductionPlanInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemUpsertWithWhereUniqueWithoutProductionPlanInputSchema), import_zod.z.lazy(() => ProductionPlanItemUpsertWithWhereUniqueWithoutProductionPlanInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => ProductionPlanItemCreateManyProductionPlanInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema), import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema), import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema), import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema), import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemUpdateWithWhereUniqueWithoutProductionPlanInputSchema), import_zod.z.lazy(() => ProductionPlanItemUpdateWithWhereUniqueWithoutProductionPlanInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemUpdateManyWithWhereWithoutProductionPlanInputSchema), import_zod.z.lazy(() => ProductionPlanItemUpdateManyWithWhereWithoutProductionPlanInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemScalarWhereInputSchema), import_zod.z.lazy(() => ProductionPlanItemScalarWhereInputSchema).array()]).optional()
}).strict();
var ProductionPlanItemUncheckedUpdateManyWithoutProductionPlanNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemCreateWithoutProductionPlanInputSchema), import_zod.z.lazy(() => ProductionPlanItemCreateWithoutProductionPlanInputSchema).array(), import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateWithoutProductionPlanInputSchema), import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateWithoutProductionPlanInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemCreateOrConnectWithoutProductionPlanInputSchema), import_zod.z.lazy(() => ProductionPlanItemCreateOrConnectWithoutProductionPlanInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemUpsertWithWhereUniqueWithoutProductionPlanInputSchema), import_zod.z.lazy(() => ProductionPlanItemUpsertWithWhereUniqueWithoutProductionPlanInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => ProductionPlanItemCreateManyProductionPlanInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema), import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema), import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema), import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema), import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemUpdateWithWhereUniqueWithoutProductionPlanInputSchema), import_zod.z.lazy(() => ProductionPlanItemUpdateWithWhereUniqueWithoutProductionPlanInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemUpdateManyWithWhereWithoutProductionPlanInputSchema), import_zod.z.lazy(() => ProductionPlanItemUpdateManyWithWhereWithoutProductionPlanInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemScalarWhereInputSchema), import_zod.z.lazy(() => ProductionPlanItemScalarWhereInputSchema).array()]).optional()
}).strict();
var ProductionPlanCreateNestedOneWithoutItemsInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanCreateWithoutItemsInputSchema), import_zod.z.lazy(() => ProductionPlanUncheckedCreateWithoutItemsInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => ProductionPlanCreateOrConnectWithoutItemsInputSchema).optional(),
  connect: import_zod.z.lazy(() => ProductionPlanWhereUniqueInputSchema).optional()
}).strict();
var RecipeCreateNestedOneWithoutProductionPlanItemInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutProductionPlanItemInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutProductionPlanItemInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => RecipeCreateOrConnectWithoutProductionPlanItemInputSchema).optional(),
  connect: import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).optional()
}).strict();
var UserCreateNestedOneWithoutProductionPlanItemInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutProductionPlanItemInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutProductionPlanItemInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => UserCreateOrConnectWithoutProductionPlanItemInputSchema).optional(),
  connect: import_zod.z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();
var ProductionPlanUpdateOneRequiredWithoutItemsNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanCreateWithoutItemsInputSchema), import_zod.z.lazy(() => ProductionPlanUncheckedCreateWithoutItemsInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => ProductionPlanCreateOrConnectWithoutItemsInputSchema).optional(),
  upsert: import_zod.z.lazy(() => ProductionPlanUpsertWithoutItemsInputSchema).optional(),
  connect: import_zod.z.lazy(() => ProductionPlanWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanUpdateToOneWithWhereWithoutItemsInputSchema), import_zod.z.lazy(() => ProductionPlanUpdateWithoutItemsInputSchema), import_zod.z.lazy(() => ProductionPlanUncheckedUpdateWithoutItemsInputSchema)]).optional()
}).strict();
var RecipeUpdateOneRequiredWithoutProductionPlanItemNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutProductionPlanItemInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutProductionPlanItemInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => RecipeCreateOrConnectWithoutProductionPlanItemInputSchema).optional(),
  upsert: import_zod.z.lazy(() => RecipeUpsertWithoutProductionPlanItemInputSchema).optional(),
  connect: import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateToOneWithWhereWithoutProductionPlanItemInputSchema), import_zod.z.lazy(() => RecipeUpdateWithoutProductionPlanItemInputSchema), import_zod.z.lazy(() => RecipeUncheckedUpdateWithoutProductionPlanItemInputSchema)]).optional()
}).strict();
var UserUpdateOneWithoutProductionPlanItemNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutProductionPlanItemInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutProductionPlanItemInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => UserCreateOrConnectWithoutProductionPlanItemInputSchema).optional(),
  upsert: import_zod.z.lazy(() => UserUpsertWithoutProductionPlanItemInputSchema).optional(),
  disconnect: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => UserWhereInputSchema)]).optional(),
  delete: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => UserWhereInputSchema)]).optional(),
  connect: import_zod.z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => UserUpdateToOneWithWhereWithoutProductionPlanItemInputSchema), import_zod.z.lazy(() => UserUpdateWithoutProductionPlanItemInputSchema), import_zod.z.lazy(() => UserUncheckedUpdateWithoutProductionPlanItemInputSchema)]).optional()
}).strict();
var ShiftCreateNestedOneWithoutShiftTaskInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => ShiftCreateWithoutShiftTaskInputSchema), import_zod.z.lazy(() => ShiftUncheckedCreateWithoutShiftTaskInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => ShiftCreateOrConnectWithoutShiftTaskInputSchema).optional(),
  connect: import_zod.z.lazy(() => ShiftWhereUniqueInputSchema).optional()
}).strict();
var EnumTaskTypeFieldUpdateOperationsInputSchema = import_zod.z.object({
  set: import_zod.z.lazy(() => TaskTypeSchema).optional()
}).strict();
var ShiftUpdateOneRequiredWithoutShiftTaskNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => ShiftCreateWithoutShiftTaskInputSchema), import_zod.z.lazy(() => ShiftUncheckedCreateWithoutShiftTaskInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => ShiftCreateOrConnectWithoutShiftTaskInputSchema).optional(),
  upsert: import_zod.z.lazy(() => ShiftUpsertWithoutShiftTaskInputSchema).optional(),
  connect: import_zod.z.lazy(() => ShiftWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => ShiftUpdateToOneWithWhereWithoutShiftTaskInputSchema), import_zod.z.lazy(() => ShiftUpdateWithoutShiftTaskInputSchema), import_zod.z.lazy(() => ShiftUncheckedUpdateWithoutShiftTaskInputSchema)]).optional()
}).strict();
var UserCreateNestedOneWithoutAvailabilityInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutAvailabilityInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutAvailabilityInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => UserCreateOrConnectWithoutAvailabilityInputSchema).optional(),
  connect: import_zod.z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();
var EnumDayOfWeekFieldUpdateOperationsInputSchema = import_zod.z.object({
  set: import_zod.z.lazy(() => DayOfWeekSchema).optional()
}).strict();
var UserUpdateOneRequiredWithoutAvailabilityNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutAvailabilityInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutAvailabilityInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => UserCreateOrConnectWithoutAvailabilityInputSchema).optional(),
  upsert: import_zod.z.lazy(() => UserUpsertWithoutAvailabilityInputSchema).optional(),
  connect: import_zod.z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => UserUpdateToOneWithWhereWithoutAvailabilityInputSchema), import_zod.z.lazy(() => UserUpdateWithoutAvailabilityInputSchema), import_zod.z.lazy(() => UserUncheckedUpdateWithoutAvailabilityInputSchema)]).optional()
}).strict();
var UserCreateNestedOneWithoutSchedulingConstraintInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutSchedulingConstraintInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutSchedulingConstraintInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => UserCreateOrConnectWithoutSchedulingConstraintInputSchema).optional(),
  connect: import_zod.z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();
var EnumConstraintTypeFieldUpdateOperationsInputSchema = import_zod.z.object({
  set: import_zod.z.lazy(() => ConstraintTypeSchema).optional()
}).strict();
var UserUpdateOneRequiredWithoutSchedulingConstraintNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutSchedulingConstraintInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutSchedulingConstraintInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => UserCreateOrConnectWithoutSchedulingConstraintInputSchema).optional(),
  upsert: import_zod.z.lazy(() => UserUpsertWithoutSchedulingConstraintInputSchema).optional(),
  connect: import_zod.z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => UserUpdateToOneWithWhereWithoutSchedulingConstraintInputSchema), import_zod.z.lazy(() => UserUpdateWithoutSchedulingConstraintInputSchema), import_zod.z.lazy(() => UserUncheckedUpdateWithoutSchedulingConstraintInputSchema)]).optional()
}).strict();
var InventoryItemCreateNestedOneWithoutInventoryWithdrawalInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => InventoryItemCreateWithoutInventoryWithdrawalInputSchema), import_zod.z.lazy(() => InventoryItemUncheckedCreateWithoutInventoryWithdrawalInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => InventoryItemCreateOrConnectWithoutInventoryWithdrawalInputSchema).optional(),
  connect: import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema).optional()
}).strict();
var RecipeCreateNestedOneWithoutInventoryWithdrawalInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutInventoryWithdrawalInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutInventoryWithdrawalInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => RecipeCreateOrConnectWithoutInventoryWithdrawalInputSchema).optional(),
  connect: import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).optional()
}).strict();
var UserCreateNestedOneWithoutInventoryWithdrawalInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutInventoryWithdrawalInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutInventoryWithdrawalInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => UserCreateOrConnectWithoutInventoryWithdrawalInputSchema).optional(),
  connect: import_zod.z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();
var InventoryItemUpdateOneRequiredWithoutInventoryWithdrawalNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => InventoryItemCreateWithoutInventoryWithdrawalInputSchema), import_zod.z.lazy(() => InventoryItemUncheckedCreateWithoutInventoryWithdrawalInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => InventoryItemCreateOrConnectWithoutInventoryWithdrawalInputSchema).optional(),
  upsert: import_zod.z.lazy(() => InventoryItemUpsertWithoutInventoryWithdrawalInputSchema).optional(),
  connect: import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => InventoryItemUpdateToOneWithWhereWithoutInventoryWithdrawalInputSchema), import_zod.z.lazy(() => InventoryItemUpdateWithoutInventoryWithdrawalInputSchema), import_zod.z.lazy(() => InventoryItemUncheckedUpdateWithoutInventoryWithdrawalInputSchema)]).optional()
}).strict();
var RecipeUpdateOneWithoutInventoryWithdrawalNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutInventoryWithdrawalInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutInventoryWithdrawalInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => RecipeCreateOrConnectWithoutInventoryWithdrawalInputSchema).optional(),
  upsert: import_zod.z.lazy(() => RecipeUpsertWithoutInventoryWithdrawalInputSchema).optional(),
  disconnect: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeWhereInputSchema)]).optional(),
  delete: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeWhereInputSchema)]).optional(),
  connect: import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateToOneWithWhereWithoutInventoryWithdrawalInputSchema), import_zod.z.lazy(() => RecipeUpdateWithoutInventoryWithdrawalInputSchema), import_zod.z.lazy(() => RecipeUncheckedUpdateWithoutInventoryWithdrawalInputSchema)]).optional()
}).strict();
var UserUpdateOneRequiredWithoutInventoryWithdrawalNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutInventoryWithdrawalInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutInventoryWithdrawalInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => UserCreateOrConnectWithoutInventoryWithdrawalInputSchema).optional(),
  upsert: import_zod.z.lazy(() => UserUpsertWithoutInventoryWithdrawalInputSchema).optional(),
  connect: import_zod.z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => UserUpdateToOneWithWhereWithoutInventoryWithdrawalInputSchema), import_zod.z.lazy(() => UserUpdateWithoutInventoryWithdrawalInputSchema), import_zod.z.lazy(() => UserUncheckedUpdateWithoutInventoryWithdrawalInputSchema)]).optional()
}).strict();
var IngredientAllergenCreateNestedManyWithoutAllergenInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenCreateWithoutAllergenInputSchema), import_zod.z.lazy(() => IngredientAllergenCreateWithoutAllergenInputSchema).array(), import_zod.z.lazy(() => IngredientAllergenUncheckedCreateWithoutAllergenInputSchema), import_zod.z.lazy(() => IngredientAllergenUncheckedCreateWithoutAllergenInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenCreateOrConnectWithoutAllergenInputSchema), import_zod.z.lazy(() => IngredientAllergenCreateOrConnectWithoutAllergenInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => IngredientAllergenCreateManyAllergenInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenWhereUniqueInputSchema), import_zod.z.lazy(() => IngredientAllergenWhereUniqueInputSchema).array()]).optional()
}).strict();
var IngredientAllergenUncheckedCreateNestedManyWithoutAllergenInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenCreateWithoutAllergenInputSchema), import_zod.z.lazy(() => IngredientAllergenCreateWithoutAllergenInputSchema).array(), import_zod.z.lazy(() => IngredientAllergenUncheckedCreateWithoutAllergenInputSchema), import_zod.z.lazy(() => IngredientAllergenUncheckedCreateWithoutAllergenInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenCreateOrConnectWithoutAllergenInputSchema), import_zod.z.lazy(() => IngredientAllergenCreateOrConnectWithoutAllergenInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => IngredientAllergenCreateManyAllergenInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenWhereUniqueInputSchema), import_zod.z.lazy(() => IngredientAllergenWhereUniqueInputSchema).array()]).optional()
}).strict();
var IngredientAllergenUpdateManyWithoutAllergenNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenCreateWithoutAllergenInputSchema), import_zod.z.lazy(() => IngredientAllergenCreateWithoutAllergenInputSchema).array(), import_zod.z.lazy(() => IngredientAllergenUncheckedCreateWithoutAllergenInputSchema), import_zod.z.lazy(() => IngredientAllergenUncheckedCreateWithoutAllergenInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenCreateOrConnectWithoutAllergenInputSchema), import_zod.z.lazy(() => IngredientAllergenCreateOrConnectWithoutAllergenInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenUpsertWithWhereUniqueWithoutAllergenInputSchema), import_zod.z.lazy(() => IngredientAllergenUpsertWithWhereUniqueWithoutAllergenInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => IngredientAllergenCreateManyAllergenInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenWhereUniqueInputSchema), import_zod.z.lazy(() => IngredientAllergenWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenWhereUniqueInputSchema), import_zod.z.lazy(() => IngredientAllergenWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenWhereUniqueInputSchema), import_zod.z.lazy(() => IngredientAllergenWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenWhereUniqueInputSchema), import_zod.z.lazy(() => IngredientAllergenWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenUpdateWithWhereUniqueWithoutAllergenInputSchema), import_zod.z.lazy(() => IngredientAllergenUpdateWithWhereUniqueWithoutAllergenInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenUpdateManyWithWhereWithoutAllergenInputSchema), import_zod.z.lazy(() => IngredientAllergenUpdateManyWithWhereWithoutAllergenInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenScalarWhereInputSchema), import_zod.z.lazy(() => IngredientAllergenScalarWhereInputSchema).array()]).optional()
}).strict();
var IngredientAllergenUncheckedUpdateManyWithoutAllergenNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenCreateWithoutAllergenInputSchema), import_zod.z.lazy(() => IngredientAllergenCreateWithoutAllergenInputSchema).array(), import_zod.z.lazy(() => IngredientAllergenUncheckedCreateWithoutAllergenInputSchema), import_zod.z.lazy(() => IngredientAllergenUncheckedCreateWithoutAllergenInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenCreateOrConnectWithoutAllergenInputSchema), import_zod.z.lazy(() => IngredientAllergenCreateOrConnectWithoutAllergenInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenUpsertWithWhereUniqueWithoutAllergenInputSchema), import_zod.z.lazy(() => IngredientAllergenUpsertWithWhereUniqueWithoutAllergenInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => IngredientAllergenCreateManyAllergenInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenWhereUniqueInputSchema), import_zod.z.lazy(() => IngredientAllergenWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenWhereUniqueInputSchema), import_zod.z.lazy(() => IngredientAllergenWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenWhereUniqueInputSchema), import_zod.z.lazy(() => IngredientAllergenWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenWhereUniqueInputSchema), import_zod.z.lazy(() => IngredientAllergenWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenUpdateWithWhereUniqueWithoutAllergenInputSchema), import_zod.z.lazy(() => IngredientAllergenUpdateWithWhereUniqueWithoutAllergenInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenUpdateManyWithWhereWithoutAllergenInputSchema), import_zod.z.lazy(() => IngredientAllergenUpdateManyWithWhereWithoutAllergenInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenScalarWhereInputSchema), import_zod.z.lazy(() => IngredientAllergenScalarWhereInputSchema).array()]).optional()
}).strict();
var IngredientCreateNestedOneWithoutIngredientAllergenInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => IngredientCreateWithoutIngredientAllergenInputSchema), import_zod.z.lazy(() => IngredientUncheckedCreateWithoutIngredientAllergenInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => IngredientCreateOrConnectWithoutIngredientAllergenInputSchema).optional(),
  connect: import_zod.z.lazy(() => IngredientWhereUniqueInputSchema).optional()
}).strict();
var AllergenCreateNestedOneWithoutIngredientsInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => AllergenCreateWithoutIngredientsInputSchema), import_zod.z.lazy(() => AllergenUncheckedCreateWithoutIngredientsInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => AllergenCreateOrConnectWithoutIngredientsInputSchema).optional(),
  connect: import_zod.z.lazy(() => AllergenWhereUniqueInputSchema).optional()
}).strict();
var IngredientUpdateOneRequiredWithoutIngredientAllergenNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => IngredientCreateWithoutIngredientAllergenInputSchema), import_zod.z.lazy(() => IngredientUncheckedCreateWithoutIngredientAllergenInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => IngredientCreateOrConnectWithoutIngredientAllergenInputSchema).optional(),
  upsert: import_zod.z.lazy(() => IngredientUpsertWithoutIngredientAllergenInputSchema).optional(),
  connect: import_zod.z.lazy(() => IngredientWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => IngredientUpdateToOneWithWhereWithoutIngredientAllergenInputSchema), import_zod.z.lazy(() => IngredientUpdateWithoutIngredientAllergenInputSchema), import_zod.z.lazy(() => IngredientUncheckedUpdateWithoutIngredientAllergenInputSchema)]).optional()
}).strict();
var AllergenUpdateOneRequiredWithoutIngredientsNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => AllergenCreateWithoutIngredientsInputSchema), import_zod.z.lazy(() => AllergenUncheckedCreateWithoutIngredientsInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => AllergenCreateOrConnectWithoutIngredientsInputSchema).optional(),
  upsert: import_zod.z.lazy(() => AllergenUpsertWithoutIngredientsInputSchema).optional(),
  connect: import_zod.z.lazy(() => AllergenWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => AllergenUpdateToOneWithWhereWithoutIngredientsInputSchema), import_zod.z.lazy(() => AllergenUpdateWithoutIngredientsInputSchema), import_zod.z.lazy(() => AllergenUncheckedUpdateWithoutIngredientsInputSchema)]).optional()
}).strict();
var MenuItemCreateNestedOneWithoutNutritionalRecommendationInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateWithoutNutritionalRecommendationInputSchema), import_zod.z.lazy(() => MenuItemUncheckedCreateWithoutNutritionalRecommendationInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => MenuItemCreateOrConnectWithoutNutritionalRecommendationInputSchema).optional(),
  connect: import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema).optional()
}).strict();
var MenuItemUpdateOneRequiredWithoutNutritionalRecommendationNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateWithoutNutritionalRecommendationInputSchema), import_zod.z.lazy(() => MenuItemUncheckedCreateWithoutNutritionalRecommendationInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => MenuItemCreateOrConnectWithoutNutritionalRecommendationInputSchema).optional(),
  upsert: import_zod.z.lazy(() => MenuItemUpsertWithoutNutritionalRecommendationInputSchema).optional(),
  connect: import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateToOneWithWhereWithoutNutritionalRecommendationInputSchema), import_zod.z.lazy(() => MenuItemUpdateWithoutNutritionalRecommendationInputSchema), import_zod.z.lazy(() => MenuItemUncheckedUpdateWithoutNutritionalRecommendationInputSchema)]).optional()
}).strict();
var RestaurantCreateNestedManyWithoutOrganizationInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RestaurantCreateWithoutOrganizationInputSchema), import_zod.z.lazy(() => RestaurantCreateWithoutOrganizationInputSchema).array(), import_zod.z.lazy(() => RestaurantUncheckedCreateWithoutOrganizationInputSchema), import_zod.z.lazy(() => RestaurantUncheckedCreateWithoutOrganizationInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RestaurantCreateOrConnectWithoutOrganizationInputSchema), import_zod.z.lazy(() => RestaurantCreateOrConnectWithoutOrganizationInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => RestaurantCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RestaurantWhereUniqueInputSchema), import_zod.z.lazy(() => RestaurantWhereUniqueInputSchema).array()]).optional()
}).strict();
var UserCreateNestedManyWithoutOrganizationInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutOrganizationInputSchema), import_zod.z.lazy(() => UserCreateWithoutOrganizationInputSchema).array(), import_zod.z.lazy(() => UserUncheckedCreateWithoutOrganizationInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutOrganizationInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => UserCreateOrConnectWithoutOrganizationInputSchema), import_zod.z.lazy(() => UserCreateOrConnectWithoutOrganizationInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => UserCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => UserWhereUniqueInputSchema), import_zod.z.lazy(() => UserWhereUniqueInputSchema).array()]).optional()
}).strict();
var RestaurantUncheckedCreateNestedManyWithoutOrganizationInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RestaurantCreateWithoutOrganizationInputSchema), import_zod.z.lazy(() => RestaurantCreateWithoutOrganizationInputSchema).array(), import_zod.z.lazy(() => RestaurantUncheckedCreateWithoutOrganizationInputSchema), import_zod.z.lazy(() => RestaurantUncheckedCreateWithoutOrganizationInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RestaurantCreateOrConnectWithoutOrganizationInputSchema), import_zod.z.lazy(() => RestaurantCreateOrConnectWithoutOrganizationInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => RestaurantCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RestaurantWhereUniqueInputSchema), import_zod.z.lazy(() => RestaurantWhereUniqueInputSchema).array()]).optional()
}).strict();
var UserUncheckedCreateNestedManyWithoutOrganizationInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutOrganizationInputSchema), import_zod.z.lazy(() => UserCreateWithoutOrganizationInputSchema).array(), import_zod.z.lazy(() => UserUncheckedCreateWithoutOrganizationInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutOrganizationInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => UserCreateOrConnectWithoutOrganizationInputSchema), import_zod.z.lazy(() => UserCreateOrConnectWithoutOrganizationInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => UserCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => UserWhereUniqueInputSchema), import_zod.z.lazy(() => UserWhereUniqueInputSchema).array()]).optional()
}).strict();
var RestaurantUpdateManyWithoutOrganizationNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RestaurantCreateWithoutOrganizationInputSchema), import_zod.z.lazy(() => RestaurantCreateWithoutOrganizationInputSchema).array(), import_zod.z.lazy(() => RestaurantUncheckedCreateWithoutOrganizationInputSchema), import_zod.z.lazy(() => RestaurantUncheckedCreateWithoutOrganizationInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RestaurantCreateOrConnectWithoutOrganizationInputSchema), import_zod.z.lazy(() => RestaurantCreateOrConnectWithoutOrganizationInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => RestaurantUpsertWithWhereUniqueWithoutOrganizationInputSchema), import_zod.z.lazy(() => RestaurantUpsertWithWhereUniqueWithoutOrganizationInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => RestaurantCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => RestaurantWhereUniqueInputSchema), import_zod.z.lazy(() => RestaurantWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => RestaurantWhereUniqueInputSchema), import_zod.z.lazy(() => RestaurantWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => RestaurantWhereUniqueInputSchema), import_zod.z.lazy(() => RestaurantWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RestaurantWhereUniqueInputSchema), import_zod.z.lazy(() => RestaurantWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => RestaurantUpdateWithWhereUniqueWithoutOrganizationInputSchema), import_zod.z.lazy(() => RestaurantUpdateWithWhereUniqueWithoutOrganizationInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => RestaurantUpdateManyWithWhereWithoutOrganizationInputSchema), import_zod.z.lazy(() => RestaurantUpdateManyWithWhereWithoutOrganizationInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => RestaurantScalarWhereInputSchema), import_zod.z.lazy(() => RestaurantScalarWhereInputSchema).array()]).optional()
}).strict();
var UserUpdateManyWithoutOrganizationNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutOrganizationInputSchema), import_zod.z.lazy(() => UserCreateWithoutOrganizationInputSchema).array(), import_zod.z.lazy(() => UserUncheckedCreateWithoutOrganizationInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutOrganizationInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => UserCreateOrConnectWithoutOrganizationInputSchema), import_zod.z.lazy(() => UserCreateOrConnectWithoutOrganizationInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => UserUpsertWithWhereUniqueWithoutOrganizationInputSchema), import_zod.z.lazy(() => UserUpsertWithWhereUniqueWithoutOrganizationInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => UserCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => UserWhereUniqueInputSchema), import_zod.z.lazy(() => UserWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => UserWhereUniqueInputSchema), import_zod.z.lazy(() => UserWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => UserWhereUniqueInputSchema), import_zod.z.lazy(() => UserWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => UserWhereUniqueInputSchema), import_zod.z.lazy(() => UserWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => UserUpdateWithWhereUniqueWithoutOrganizationInputSchema), import_zod.z.lazy(() => UserUpdateWithWhereUniqueWithoutOrganizationInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => UserUpdateManyWithWhereWithoutOrganizationInputSchema), import_zod.z.lazy(() => UserUpdateManyWithWhereWithoutOrganizationInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => UserScalarWhereInputSchema), import_zod.z.lazy(() => UserScalarWhereInputSchema).array()]).optional()
}).strict();
var RestaurantUncheckedUpdateManyWithoutOrganizationNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RestaurantCreateWithoutOrganizationInputSchema), import_zod.z.lazy(() => RestaurantCreateWithoutOrganizationInputSchema).array(), import_zod.z.lazy(() => RestaurantUncheckedCreateWithoutOrganizationInputSchema), import_zod.z.lazy(() => RestaurantUncheckedCreateWithoutOrganizationInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RestaurantCreateOrConnectWithoutOrganizationInputSchema), import_zod.z.lazy(() => RestaurantCreateOrConnectWithoutOrganizationInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => RestaurantUpsertWithWhereUniqueWithoutOrganizationInputSchema), import_zod.z.lazy(() => RestaurantUpsertWithWhereUniqueWithoutOrganizationInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => RestaurantCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => RestaurantWhereUniqueInputSchema), import_zod.z.lazy(() => RestaurantWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => RestaurantWhereUniqueInputSchema), import_zod.z.lazy(() => RestaurantWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => RestaurantWhereUniqueInputSchema), import_zod.z.lazy(() => RestaurantWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RestaurantWhereUniqueInputSchema), import_zod.z.lazy(() => RestaurantWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => RestaurantUpdateWithWhereUniqueWithoutOrganizationInputSchema), import_zod.z.lazy(() => RestaurantUpdateWithWhereUniqueWithoutOrganizationInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => RestaurantUpdateManyWithWhereWithoutOrganizationInputSchema), import_zod.z.lazy(() => RestaurantUpdateManyWithWhereWithoutOrganizationInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => RestaurantScalarWhereInputSchema), import_zod.z.lazy(() => RestaurantScalarWhereInputSchema).array()]).optional()
}).strict();
var UserUncheckedUpdateManyWithoutOrganizationNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutOrganizationInputSchema), import_zod.z.lazy(() => UserCreateWithoutOrganizationInputSchema).array(), import_zod.z.lazy(() => UserUncheckedCreateWithoutOrganizationInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutOrganizationInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => UserCreateOrConnectWithoutOrganizationInputSchema), import_zod.z.lazy(() => UserCreateOrConnectWithoutOrganizationInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => UserUpsertWithWhereUniqueWithoutOrganizationInputSchema), import_zod.z.lazy(() => UserUpsertWithWhereUniqueWithoutOrganizationInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => UserCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => UserWhereUniqueInputSchema), import_zod.z.lazy(() => UserWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => UserWhereUniqueInputSchema), import_zod.z.lazy(() => UserWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => UserWhereUniqueInputSchema), import_zod.z.lazy(() => UserWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => UserWhereUniqueInputSchema), import_zod.z.lazy(() => UserWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => UserUpdateWithWhereUniqueWithoutOrganizationInputSchema), import_zod.z.lazy(() => UserUpdateWithWhereUniqueWithoutOrganizationInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => UserUpdateManyWithWhereWithoutOrganizationInputSchema), import_zod.z.lazy(() => UserUpdateManyWithWhereWithoutOrganizationInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => UserScalarWhereInputSchema), import_zod.z.lazy(() => UserScalarWhereInputSchema).array()]).optional()
}).strict();
var OrganizationCreateNestedOneWithoutRestaurantsInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => OrganizationCreateWithoutRestaurantsInputSchema), import_zod.z.lazy(() => OrganizationUncheckedCreateWithoutRestaurantsInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => OrganizationCreateOrConnectWithoutRestaurantsInputSchema).optional(),
  connect: import_zod.z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();
var UserCreateNestedManyWithoutRestaurantInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => UserCreateWithoutRestaurantInputSchema).array(), import_zod.z.lazy(() => UserUncheckedCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => UserCreateOrConnectWithoutRestaurantInputSchema), import_zod.z.lazy(() => UserCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => UserCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => UserWhereUniqueInputSchema), import_zod.z.lazy(() => UserWhereUniqueInputSchema).array()]).optional()
}).strict();
var CookBookCreateNestedManyWithoutRestaurantInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => CookBookCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => CookBookCreateWithoutRestaurantInputSchema).array(), import_zod.z.lazy(() => CookBookUncheckedCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => CookBookUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => CookBookCreateOrConnectWithoutRestaurantInputSchema), import_zod.z.lazy(() => CookBookCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => CookBookCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => CookBookWhereUniqueInputSchema), import_zod.z.lazy(() => CookBookWhereUniqueInputSchema).array()]).optional()
}).strict();
var InventoryCreateNestedOneWithoutRestaurantInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => InventoryCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => InventoryUncheckedCreateWithoutRestaurantInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => InventoryCreateOrConnectWithoutRestaurantInputSchema).optional(),
  connect: import_zod.z.lazy(() => InventoryWhereUniqueInputSchema).optional()
}).strict();
var OrderCreateNestedManyWithoutRestaurantInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => OrderCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => OrderCreateWithoutRestaurantInputSchema).array(), import_zod.z.lazy(() => OrderUncheckedCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => OrderUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => OrderCreateOrConnectWithoutRestaurantInputSchema), import_zod.z.lazy(() => OrderCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => OrderCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => OrderWhereUniqueInputSchema), import_zod.z.lazy(() => OrderWhereUniqueInputSchema).array()]).optional()
}).strict();
var RecipeCreateNestedManyWithoutRestaurantInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => RecipeCreateWithoutRestaurantInputSchema).array(), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateOrConnectWithoutRestaurantInputSchema), import_zod.z.lazy(() => RecipeCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => RecipeCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional()
}).strict();
var MenuCreateNestedManyWithoutRestaurantInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => MenuCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => MenuCreateWithoutRestaurantInputSchema).array(), import_zod.z.lazy(() => MenuUncheckedCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => MenuUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => MenuCreateOrConnectWithoutRestaurantInputSchema), import_zod.z.lazy(() => MenuCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => MenuCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => MenuWhereUniqueInputSchema), import_zod.z.lazy(() => MenuWhereUniqueInputSchema).array()]).optional()
}).strict();
var SalesTransactionsCreateNestedManyWithoutRestaurantInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => SalesTransactionsCreateWithoutRestaurantInputSchema).array(), import_zod.z.lazy(() => SalesTransactionsUncheckedCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => SalesTransactionsUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsCreateOrConnectWithoutRestaurantInputSchema), import_zod.z.lazy(() => SalesTransactionsCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => SalesTransactionsCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsWhereUniqueInputSchema), import_zod.z.lazy(() => SalesTransactionsWhereUniqueInputSchema).array()]).optional()
}).strict();
var LeftoverItemCreateNestedManyWithoutRestaurantInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => LeftoverItemCreateWithoutRestaurantInputSchema).array(), import_zod.z.lazy(() => LeftoverItemUncheckedCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => LeftoverItemUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemCreateOrConnectWithoutRestaurantInputSchema), import_zod.z.lazy(() => LeftoverItemCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => LeftoverItemCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema), import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var WasteRecordCreateNestedManyWithoutRestaurantInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => WasteRecordCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => WasteRecordCreateWithoutRestaurantInputSchema).array(), import_zod.z.lazy(() => WasteRecordUncheckedCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => WasteRecordUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => WasteRecordCreateOrConnectWithoutRestaurantInputSchema), import_zod.z.lazy(() => WasteRecordCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => WasteRecordCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema), import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema).array()]).optional()
}).strict();
var ProductionPlanCreateNestedManyWithoutRestaurantInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => ProductionPlanCreateWithoutRestaurantInputSchema).array(), import_zod.z.lazy(() => ProductionPlanUncheckedCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => ProductionPlanUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanCreateOrConnectWithoutRestaurantInputSchema), import_zod.z.lazy(() => ProductionPlanCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => ProductionPlanCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanWhereUniqueInputSchema), import_zod.z.lazy(() => ProductionPlanWhereUniqueInputSchema).array()]).optional()
}).strict();
var EquipmentCreateNestedManyWithoutRestaurantInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => EquipmentCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => EquipmentCreateWithoutRestaurantInputSchema).array(), import_zod.z.lazy(() => EquipmentUncheckedCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => EquipmentUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => EquipmentCreateOrConnectWithoutRestaurantInputSchema), import_zod.z.lazy(() => EquipmentCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => EquipmentCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => EquipmentWhereUniqueInputSchema), import_zod.z.lazy(() => EquipmentWhereUniqueInputSchema).array()]).optional()
}).strict();
var QualityChecklistCreateNestedManyWithoutRestaurantInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => QualityChecklistCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => QualityChecklistCreateWithoutRestaurantInputSchema).array(), import_zod.z.lazy(() => QualityChecklistUncheckedCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => QualityChecklistUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => QualityChecklistCreateOrConnectWithoutRestaurantInputSchema), import_zod.z.lazy(() => QualityChecklistCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => QualityChecklistCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => QualityChecklistWhereUniqueInputSchema), import_zod.z.lazy(() => QualityChecklistWhereUniqueInputSchema).array()]).optional()
}).strict();
var CustomerFeedbackCreateNestedManyWithoutRestaurantInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => CustomerFeedbackCreateWithoutRestaurantInputSchema).array(), import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackCreateOrConnectWithoutRestaurantInputSchema), import_zod.z.lazy(() => CustomerFeedbackCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => CustomerFeedbackCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema), import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array()]).optional()
}).strict();
var UserUncheckedCreateNestedManyWithoutRestaurantInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => UserCreateWithoutRestaurantInputSchema).array(), import_zod.z.lazy(() => UserUncheckedCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => UserCreateOrConnectWithoutRestaurantInputSchema), import_zod.z.lazy(() => UserCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => UserCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => UserWhereUniqueInputSchema), import_zod.z.lazy(() => UserWhereUniqueInputSchema).array()]).optional()
}).strict();
var CookBookUncheckedCreateNestedManyWithoutRestaurantInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => CookBookCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => CookBookCreateWithoutRestaurantInputSchema).array(), import_zod.z.lazy(() => CookBookUncheckedCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => CookBookUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => CookBookCreateOrConnectWithoutRestaurantInputSchema), import_zod.z.lazy(() => CookBookCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => CookBookCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => CookBookWhereUniqueInputSchema), import_zod.z.lazy(() => CookBookWhereUniqueInputSchema).array()]).optional()
}).strict();
var InventoryUncheckedCreateNestedOneWithoutRestaurantInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => InventoryCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => InventoryUncheckedCreateWithoutRestaurantInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => InventoryCreateOrConnectWithoutRestaurantInputSchema).optional(),
  connect: import_zod.z.lazy(() => InventoryWhereUniqueInputSchema).optional()
}).strict();
var OrderUncheckedCreateNestedManyWithoutRestaurantInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => OrderCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => OrderCreateWithoutRestaurantInputSchema).array(), import_zod.z.lazy(() => OrderUncheckedCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => OrderUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => OrderCreateOrConnectWithoutRestaurantInputSchema), import_zod.z.lazy(() => OrderCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => OrderCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => OrderWhereUniqueInputSchema), import_zod.z.lazy(() => OrderWhereUniqueInputSchema).array()]).optional()
}).strict();
var RecipeUncheckedCreateNestedManyWithoutRestaurantInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => RecipeCreateWithoutRestaurantInputSchema).array(), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateOrConnectWithoutRestaurantInputSchema), import_zod.z.lazy(() => RecipeCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => RecipeCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional()
}).strict();
var MenuUncheckedCreateNestedManyWithoutRestaurantInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => MenuCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => MenuCreateWithoutRestaurantInputSchema).array(), import_zod.z.lazy(() => MenuUncheckedCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => MenuUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => MenuCreateOrConnectWithoutRestaurantInputSchema), import_zod.z.lazy(() => MenuCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => MenuCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => MenuWhereUniqueInputSchema), import_zod.z.lazy(() => MenuWhereUniqueInputSchema).array()]).optional()
}).strict();
var SalesTransactionsUncheckedCreateNestedManyWithoutRestaurantInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => SalesTransactionsCreateWithoutRestaurantInputSchema).array(), import_zod.z.lazy(() => SalesTransactionsUncheckedCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => SalesTransactionsUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsCreateOrConnectWithoutRestaurantInputSchema), import_zod.z.lazy(() => SalesTransactionsCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => SalesTransactionsCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsWhereUniqueInputSchema), import_zod.z.lazy(() => SalesTransactionsWhereUniqueInputSchema).array()]).optional()
}).strict();
var LeftoverItemUncheckedCreateNestedManyWithoutRestaurantInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => LeftoverItemCreateWithoutRestaurantInputSchema).array(), import_zod.z.lazy(() => LeftoverItemUncheckedCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => LeftoverItemUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemCreateOrConnectWithoutRestaurantInputSchema), import_zod.z.lazy(() => LeftoverItemCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => LeftoverItemCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema), import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var WasteRecordUncheckedCreateNestedManyWithoutRestaurantInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => WasteRecordCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => WasteRecordCreateWithoutRestaurantInputSchema).array(), import_zod.z.lazy(() => WasteRecordUncheckedCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => WasteRecordUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => WasteRecordCreateOrConnectWithoutRestaurantInputSchema), import_zod.z.lazy(() => WasteRecordCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => WasteRecordCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema), import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema).array()]).optional()
}).strict();
var ProductionPlanUncheckedCreateNestedManyWithoutRestaurantInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => ProductionPlanCreateWithoutRestaurantInputSchema).array(), import_zod.z.lazy(() => ProductionPlanUncheckedCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => ProductionPlanUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanCreateOrConnectWithoutRestaurantInputSchema), import_zod.z.lazy(() => ProductionPlanCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => ProductionPlanCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanWhereUniqueInputSchema), import_zod.z.lazy(() => ProductionPlanWhereUniqueInputSchema).array()]).optional()
}).strict();
var EquipmentUncheckedCreateNestedManyWithoutRestaurantInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => EquipmentCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => EquipmentCreateWithoutRestaurantInputSchema).array(), import_zod.z.lazy(() => EquipmentUncheckedCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => EquipmentUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => EquipmentCreateOrConnectWithoutRestaurantInputSchema), import_zod.z.lazy(() => EquipmentCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => EquipmentCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => EquipmentWhereUniqueInputSchema), import_zod.z.lazy(() => EquipmentWhereUniqueInputSchema).array()]).optional()
}).strict();
var QualityChecklistUncheckedCreateNestedManyWithoutRestaurantInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => QualityChecklistCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => QualityChecklistCreateWithoutRestaurantInputSchema).array(), import_zod.z.lazy(() => QualityChecklistUncheckedCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => QualityChecklistUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => QualityChecklistCreateOrConnectWithoutRestaurantInputSchema), import_zod.z.lazy(() => QualityChecklistCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => QualityChecklistCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => QualityChecklistWhereUniqueInputSchema), import_zod.z.lazy(() => QualityChecklistWhereUniqueInputSchema).array()]).optional()
}).strict();
var CustomerFeedbackUncheckedCreateNestedManyWithoutRestaurantInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => CustomerFeedbackCreateWithoutRestaurantInputSchema).array(), import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackCreateOrConnectWithoutRestaurantInputSchema), import_zod.z.lazy(() => CustomerFeedbackCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => CustomerFeedbackCreateManyRestaurantInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema), import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array()]).optional()
}).strict();
var OrganizationUpdateOneWithoutRestaurantsNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => OrganizationCreateWithoutRestaurantsInputSchema), import_zod.z.lazy(() => OrganizationUncheckedCreateWithoutRestaurantsInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => OrganizationCreateOrConnectWithoutRestaurantsInputSchema).optional(),
  upsert: import_zod.z.lazy(() => OrganizationUpsertWithoutRestaurantsInputSchema).optional(),
  disconnect: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => OrganizationWhereInputSchema)]).optional(),
  delete: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => OrganizationWhereInputSchema)]).optional(),
  connect: import_zod.z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => OrganizationUpdateToOneWithWhereWithoutRestaurantsInputSchema), import_zod.z.lazy(() => OrganizationUpdateWithoutRestaurantsInputSchema), import_zod.z.lazy(() => OrganizationUncheckedUpdateWithoutRestaurantsInputSchema)]).optional()
}).strict();
var UserUpdateManyWithoutRestaurantNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => UserCreateWithoutRestaurantInputSchema).array(), import_zod.z.lazy(() => UserUncheckedCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => UserCreateOrConnectWithoutRestaurantInputSchema), import_zod.z.lazy(() => UserCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => UserUpsertWithWhereUniqueWithoutRestaurantInputSchema), import_zod.z.lazy(() => UserUpsertWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => UserCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => UserWhereUniqueInputSchema), import_zod.z.lazy(() => UserWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => UserWhereUniqueInputSchema), import_zod.z.lazy(() => UserWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => UserWhereUniqueInputSchema), import_zod.z.lazy(() => UserWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => UserWhereUniqueInputSchema), import_zod.z.lazy(() => UserWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => UserUpdateWithWhereUniqueWithoutRestaurantInputSchema), import_zod.z.lazy(() => UserUpdateWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => UserUpdateManyWithWhereWithoutRestaurantInputSchema), import_zod.z.lazy(() => UserUpdateManyWithWhereWithoutRestaurantInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => UserScalarWhereInputSchema), import_zod.z.lazy(() => UserScalarWhereInputSchema).array()]).optional()
}).strict();
var CookBookUpdateManyWithoutRestaurantNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => CookBookCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => CookBookCreateWithoutRestaurantInputSchema).array(), import_zod.z.lazy(() => CookBookUncheckedCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => CookBookUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => CookBookCreateOrConnectWithoutRestaurantInputSchema), import_zod.z.lazy(() => CookBookCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => CookBookUpsertWithWhereUniqueWithoutRestaurantInputSchema), import_zod.z.lazy(() => CookBookUpsertWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => CookBookCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => CookBookWhereUniqueInputSchema), import_zod.z.lazy(() => CookBookWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => CookBookWhereUniqueInputSchema), import_zod.z.lazy(() => CookBookWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => CookBookWhereUniqueInputSchema), import_zod.z.lazy(() => CookBookWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => CookBookWhereUniqueInputSchema), import_zod.z.lazy(() => CookBookWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => CookBookUpdateWithWhereUniqueWithoutRestaurantInputSchema), import_zod.z.lazy(() => CookBookUpdateWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => CookBookUpdateManyWithWhereWithoutRestaurantInputSchema), import_zod.z.lazy(() => CookBookUpdateManyWithWhereWithoutRestaurantInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => CookBookScalarWhereInputSchema), import_zod.z.lazy(() => CookBookScalarWhereInputSchema).array()]).optional()
}).strict();
var InventoryUpdateOneWithoutRestaurantNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => InventoryCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => InventoryUncheckedCreateWithoutRestaurantInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => InventoryCreateOrConnectWithoutRestaurantInputSchema).optional(),
  upsert: import_zod.z.lazy(() => InventoryUpsertWithoutRestaurantInputSchema).optional(),
  disconnect: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => InventoryWhereInputSchema)]).optional(),
  delete: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => InventoryWhereInputSchema)]).optional(),
  connect: import_zod.z.lazy(() => InventoryWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => InventoryUpdateToOneWithWhereWithoutRestaurantInputSchema), import_zod.z.lazy(() => InventoryUpdateWithoutRestaurantInputSchema), import_zod.z.lazy(() => InventoryUncheckedUpdateWithoutRestaurantInputSchema)]).optional()
}).strict();
var OrderUpdateManyWithoutRestaurantNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => OrderCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => OrderCreateWithoutRestaurantInputSchema).array(), import_zod.z.lazy(() => OrderUncheckedCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => OrderUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => OrderCreateOrConnectWithoutRestaurantInputSchema), import_zod.z.lazy(() => OrderCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => OrderUpsertWithWhereUniqueWithoutRestaurantInputSchema), import_zod.z.lazy(() => OrderUpsertWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => OrderCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => OrderWhereUniqueInputSchema), import_zod.z.lazy(() => OrderWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => OrderWhereUniqueInputSchema), import_zod.z.lazy(() => OrderWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => OrderWhereUniqueInputSchema), import_zod.z.lazy(() => OrderWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => OrderWhereUniqueInputSchema), import_zod.z.lazy(() => OrderWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => OrderUpdateWithWhereUniqueWithoutRestaurantInputSchema), import_zod.z.lazy(() => OrderUpdateWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => OrderUpdateManyWithWhereWithoutRestaurantInputSchema), import_zod.z.lazy(() => OrderUpdateManyWithWhereWithoutRestaurantInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => OrderScalarWhereInputSchema), import_zod.z.lazy(() => OrderScalarWhereInputSchema).array()]).optional()
}).strict();
var RecipeUpdateManyWithoutRestaurantNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => RecipeCreateWithoutRestaurantInputSchema).array(), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateOrConnectWithoutRestaurantInputSchema), import_zod.z.lazy(() => RecipeCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => RecipeUpsertWithWhereUniqueWithoutRestaurantInputSchema), import_zod.z.lazy(() => RecipeUpsertWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => RecipeCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => RecipeWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => RecipeWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => RecipeWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateWithWhereUniqueWithoutRestaurantInputSchema), import_zod.z.lazy(() => RecipeUpdateWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateManyWithWhereWithoutRestaurantInputSchema), import_zod.z.lazy(() => RecipeUpdateManyWithWhereWithoutRestaurantInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => RecipeScalarWhereInputSchema), import_zod.z.lazy(() => RecipeScalarWhereInputSchema).array()]).optional()
}).strict();
var MenuUpdateManyWithoutRestaurantNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => MenuCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => MenuCreateWithoutRestaurantInputSchema).array(), import_zod.z.lazy(() => MenuUncheckedCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => MenuUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => MenuCreateOrConnectWithoutRestaurantInputSchema), import_zod.z.lazy(() => MenuCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => MenuUpsertWithWhereUniqueWithoutRestaurantInputSchema), import_zod.z.lazy(() => MenuUpsertWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => MenuCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => MenuWhereUniqueInputSchema), import_zod.z.lazy(() => MenuWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => MenuWhereUniqueInputSchema), import_zod.z.lazy(() => MenuWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => MenuWhereUniqueInputSchema), import_zod.z.lazy(() => MenuWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => MenuWhereUniqueInputSchema), import_zod.z.lazy(() => MenuWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => MenuUpdateWithWhereUniqueWithoutRestaurantInputSchema), import_zod.z.lazy(() => MenuUpdateWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => MenuUpdateManyWithWhereWithoutRestaurantInputSchema), import_zod.z.lazy(() => MenuUpdateManyWithWhereWithoutRestaurantInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => MenuScalarWhereInputSchema), import_zod.z.lazy(() => MenuScalarWhereInputSchema).array()]).optional()
}).strict();
var SalesTransactionsUpdateManyWithoutRestaurantNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => SalesTransactionsCreateWithoutRestaurantInputSchema).array(), import_zod.z.lazy(() => SalesTransactionsUncheckedCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => SalesTransactionsUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsCreateOrConnectWithoutRestaurantInputSchema), import_zod.z.lazy(() => SalesTransactionsCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsUpsertWithWhereUniqueWithoutRestaurantInputSchema), import_zod.z.lazy(() => SalesTransactionsUpsertWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => SalesTransactionsCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsWhereUniqueInputSchema), import_zod.z.lazy(() => SalesTransactionsWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsWhereUniqueInputSchema), import_zod.z.lazy(() => SalesTransactionsWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsWhereUniqueInputSchema), import_zod.z.lazy(() => SalesTransactionsWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsWhereUniqueInputSchema), import_zod.z.lazy(() => SalesTransactionsWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsUpdateWithWhereUniqueWithoutRestaurantInputSchema), import_zod.z.lazy(() => SalesTransactionsUpdateWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsUpdateManyWithWhereWithoutRestaurantInputSchema), import_zod.z.lazy(() => SalesTransactionsUpdateManyWithWhereWithoutRestaurantInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsScalarWhereInputSchema), import_zod.z.lazy(() => SalesTransactionsScalarWhereInputSchema).array()]).optional()
}).strict();
var LeftoverItemUpdateManyWithoutRestaurantNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => LeftoverItemCreateWithoutRestaurantInputSchema).array(), import_zod.z.lazy(() => LeftoverItemUncheckedCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => LeftoverItemUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemCreateOrConnectWithoutRestaurantInputSchema), import_zod.z.lazy(() => LeftoverItemCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemUpsertWithWhereUniqueWithoutRestaurantInputSchema), import_zod.z.lazy(() => LeftoverItemUpsertWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => LeftoverItemCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema), import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema), import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema), import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema), import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemUpdateWithWhereUniqueWithoutRestaurantInputSchema), import_zod.z.lazy(() => LeftoverItemUpdateWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemUpdateManyWithWhereWithoutRestaurantInputSchema), import_zod.z.lazy(() => LeftoverItemUpdateManyWithWhereWithoutRestaurantInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemScalarWhereInputSchema), import_zod.z.lazy(() => LeftoverItemScalarWhereInputSchema).array()]).optional()
}).strict();
var WasteRecordUpdateManyWithoutRestaurantNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => WasteRecordCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => WasteRecordCreateWithoutRestaurantInputSchema).array(), import_zod.z.lazy(() => WasteRecordUncheckedCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => WasteRecordUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => WasteRecordCreateOrConnectWithoutRestaurantInputSchema), import_zod.z.lazy(() => WasteRecordCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => WasteRecordUpsertWithWhereUniqueWithoutRestaurantInputSchema), import_zod.z.lazy(() => WasteRecordUpsertWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => WasteRecordCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema), import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema), import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema), import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema), import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => WasteRecordUpdateWithWhereUniqueWithoutRestaurantInputSchema), import_zod.z.lazy(() => WasteRecordUpdateWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => WasteRecordUpdateManyWithWhereWithoutRestaurantInputSchema), import_zod.z.lazy(() => WasteRecordUpdateManyWithWhereWithoutRestaurantInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => WasteRecordScalarWhereInputSchema), import_zod.z.lazy(() => WasteRecordScalarWhereInputSchema).array()]).optional()
}).strict();
var ProductionPlanUpdateManyWithoutRestaurantNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => ProductionPlanCreateWithoutRestaurantInputSchema).array(), import_zod.z.lazy(() => ProductionPlanUncheckedCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => ProductionPlanUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanCreateOrConnectWithoutRestaurantInputSchema), import_zod.z.lazy(() => ProductionPlanCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanUpsertWithWhereUniqueWithoutRestaurantInputSchema), import_zod.z.lazy(() => ProductionPlanUpsertWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => ProductionPlanCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanWhereUniqueInputSchema), import_zod.z.lazy(() => ProductionPlanWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanWhereUniqueInputSchema), import_zod.z.lazy(() => ProductionPlanWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanWhereUniqueInputSchema), import_zod.z.lazy(() => ProductionPlanWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanWhereUniqueInputSchema), import_zod.z.lazy(() => ProductionPlanWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanUpdateWithWhereUniqueWithoutRestaurantInputSchema), import_zod.z.lazy(() => ProductionPlanUpdateWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanUpdateManyWithWhereWithoutRestaurantInputSchema), import_zod.z.lazy(() => ProductionPlanUpdateManyWithWhereWithoutRestaurantInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanScalarWhereInputSchema), import_zod.z.lazy(() => ProductionPlanScalarWhereInputSchema).array()]).optional()
}).strict();
var EquipmentUpdateManyWithoutRestaurantNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => EquipmentCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => EquipmentCreateWithoutRestaurantInputSchema).array(), import_zod.z.lazy(() => EquipmentUncheckedCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => EquipmentUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => EquipmentCreateOrConnectWithoutRestaurantInputSchema), import_zod.z.lazy(() => EquipmentCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => EquipmentUpsertWithWhereUniqueWithoutRestaurantInputSchema), import_zod.z.lazy(() => EquipmentUpsertWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => EquipmentCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => EquipmentWhereUniqueInputSchema), import_zod.z.lazy(() => EquipmentWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => EquipmentWhereUniqueInputSchema), import_zod.z.lazy(() => EquipmentWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => EquipmentWhereUniqueInputSchema), import_zod.z.lazy(() => EquipmentWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => EquipmentWhereUniqueInputSchema), import_zod.z.lazy(() => EquipmentWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => EquipmentUpdateWithWhereUniqueWithoutRestaurantInputSchema), import_zod.z.lazy(() => EquipmentUpdateWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => EquipmentUpdateManyWithWhereWithoutRestaurantInputSchema), import_zod.z.lazy(() => EquipmentUpdateManyWithWhereWithoutRestaurantInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => EquipmentScalarWhereInputSchema), import_zod.z.lazy(() => EquipmentScalarWhereInputSchema).array()]).optional()
}).strict();
var QualityChecklistUpdateManyWithoutRestaurantNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => QualityChecklistCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => QualityChecklistCreateWithoutRestaurantInputSchema).array(), import_zod.z.lazy(() => QualityChecklistUncheckedCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => QualityChecklistUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => QualityChecklistCreateOrConnectWithoutRestaurantInputSchema), import_zod.z.lazy(() => QualityChecklistCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => QualityChecklistUpsertWithWhereUniqueWithoutRestaurantInputSchema), import_zod.z.lazy(() => QualityChecklistUpsertWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => QualityChecklistCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => QualityChecklistWhereUniqueInputSchema), import_zod.z.lazy(() => QualityChecklistWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => QualityChecklistWhereUniqueInputSchema), import_zod.z.lazy(() => QualityChecklistWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => QualityChecklistWhereUniqueInputSchema), import_zod.z.lazy(() => QualityChecklistWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => QualityChecklistWhereUniqueInputSchema), import_zod.z.lazy(() => QualityChecklistWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => QualityChecklistUpdateWithWhereUniqueWithoutRestaurantInputSchema), import_zod.z.lazy(() => QualityChecklistUpdateWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => QualityChecklistUpdateManyWithWhereWithoutRestaurantInputSchema), import_zod.z.lazy(() => QualityChecklistUpdateManyWithWhereWithoutRestaurantInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => QualityChecklistScalarWhereInputSchema), import_zod.z.lazy(() => QualityChecklistScalarWhereInputSchema).array()]).optional()
}).strict();
var CustomerFeedbackUpdateManyWithoutRestaurantNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => CustomerFeedbackCreateWithoutRestaurantInputSchema).array(), import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackCreateOrConnectWithoutRestaurantInputSchema), import_zod.z.lazy(() => CustomerFeedbackCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackUpsertWithWhereUniqueWithoutRestaurantInputSchema), import_zod.z.lazy(() => CustomerFeedbackUpsertWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => CustomerFeedbackCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema), import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema), import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema), import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema), import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackUpdateWithWhereUniqueWithoutRestaurantInputSchema), import_zod.z.lazy(() => CustomerFeedbackUpdateWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackUpdateManyWithWhereWithoutRestaurantInputSchema), import_zod.z.lazy(() => CustomerFeedbackUpdateManyWithWhereWithoutRestaurantInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackScalarWhereInputSchema), import_zod.z.lazy(() => CustomerFeedbackScalarWhereInputSchema).array()]).optional()
}).strict();
var UserUncheckedUpdateManyWithoutRestaurantNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => UserCreateWithoutRestaurantInputSchema).array(), import_zod.z.lazy(() => UserUncheckedCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => UserCreateOrConnectWithoutRestaurantInputSchema), import_zod.z.lazy(() => UserCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => UserUpsertWithWhereUniqueWithoutRestaurantInputSchema), import_zod.z.lazy(() => UserUpsertWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => UserCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => UserWhereUniqueInputSchema), import_zod.z.lazy(() => UserWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => UserWhereUniqueInputSchema), import_zod.z.lazy(() => UserWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => UserWhereUniqueInputSchema), import_zod.z.lazy(() => UserWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => UserWhereUniqueInputSchema), import_zod.z.lazy(() => UserWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => UserUpdateWithWhereUniqueWithoutRestaurantInputSchema), import_zod.z.lazy(() => UserUpdateWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => UserUpdateManyWithWhereWithoutRestaurantInputSchema), import_zod.z.lazy(() => UserUpdateManyWithWhereWithoutRestaurantInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => UserScalarWhereInputSchema), import_zod.z.lazy(() => UserScalarWhereInputSchema).array()]).optional()
}).strict();
var CookBookUncheckedUpdateManyWithoutRestaurantNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => CookBookCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => CookBookCreateWithoutRestaurantInputSchema).array(), import_zod.z.lazy(() => CookBookUncheckedCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => CookBookUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => CookBookCreateOrConnectWithoutRestaurantInputSchema), import_zod.z.lazy(() => CookBookCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => CookBookUpsertWithWhereUniqueWithoutRestaurantInputSchema), import_zod.z.lazy(() => CookBookUpsertWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => CookBookCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => CookBookWhereUniqueInputSchema), import_zod.z.lazy(() => CookBookWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => CookBookWhereUniqueInputSchema), import_zod.z.lazy(() => CookBookWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => CookBookWhereUniqueInputSchema), import_zod.z.lazy(() => CookBookWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => CookBookWhereUniqueInputSchema), import_zod.z.lazy(() => CookBookWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => CookBookUpdateWithWhereUniqueWithoutRestaurantInputSchema), import_zod.z.lazy(() => CookBookUpdateWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => CookBookUpdateManyWithWhereWithoutRestaurantInputSchema), import_zod.z.lazy(() => CookBookUpdateManyWithWhereWithoutRestaurantInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => CookBookScalarWhereInputSchema), import_zod.z.lazy(() => CookBookScalarWhereInputSchema).array()]).optional()
}).strict();
var InventoryUncheckedUpdateOneWithoutRestaurantNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => InventoryCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => InventoryUncheckedCreateWithoutRestaurantInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => InventoryCreateOrConnectWithoutRestaurantInputSchema).optional(),
  upsert: import_zod.z.lazy(() => InventoryUpsertWithoutRestaurantInputSchema).optional(),
  disconnect: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => InventoryWhereInputSchema)]).optional(),
  delete: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => InventoryWhereInputSchema)]).optional(),
  connect: import_zod.z.lazy(() => InventoryWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => InventoryUpdateToOneWithWhereWithoutRestaurantInputSchema), import_zod.z.lazy(() => InventoryUpdateWithoutRestaurantInputSchema), import_zod.z.lazy(() => InventoryUncheckedUpdateWithoutRestaurantInputSchema)]).optional()
}).strict();
var OrderUncheckedUpdateManyWithoutRestaurantNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => OrderCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => OrderCreateWithoutRestaurantInputSchema).array(), import_zod.z.lazy(() => OrderUncheckedCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => OrderUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => OrderCreateOrConnectWithoutRestaurantInputSchema), import_zod.z.lazy(() => OrderCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => OrderUpsertWithWhereUniqueWithoutRestaurantInputSchema), import_zod.z.lazy(() => OrderUpsertWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => OrderCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => OrderWhereUniqueInputSchema), import_zod.z.lazy(() => OrderWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => OrderWhereUniqueInputSchema), import_zod.z.lazy(() => OrderWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => OrderWhereUniqueInputSchema), import_zod.z.lazy(() => OrderWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => OrderWhereUniqueInputSchema), import_zod.z.lazy(() => OrderWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => OrderUpdateWithWhereUniqueWithoutRestaurantInputSchema), import_zod.z.lazy(() => OrderUpdateWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => OrderUpdateManyWithWhereWithoutRestaurantInputSchema), import_zod.z.lazy(() => OrderUpdateManyWithWhereWithoutRestaurantInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => OrderScalarWhereInputSchema), import_zod.z.lazy(() => OrderScalarWhereInputSchema).array()]).optional()
}).strict();
var RecipeUncheckedUpdateManyWithoutRestaurantNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => RecipeCreateWithoutRestaurantInputSchema).array(), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateOrConnectWithoutRestaurantInputSchema), import_zod.z.lazy(() => RecipeCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => RecipeUpsertWithWhereUniqueWithoutRestaurantInputSchema), import_zod.z.lazy(() => RecipeUpsertWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => RecipeCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => RecipeWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => RecipeWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => RecipeWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateWithWhereUniqueWithoutRestaurantInputSchema), import_zod.z.lazy(() => RecipeUpdateWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateManyWithWhereWithoutRestaurantInputSchema), import_zod.z.lazy(() => RecipeUpdateManyWithWhereWithoutRestaurantInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => RecipeScalarWhereInputSchema), import_zod.z.lazy(() => RecipeScalarWhereInputSchema).array()]).optional()
}).strict();
var MenuUncheckedUpdateManyWithoutRestaurantNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => MenuCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => MenuCreateWithoutRestaurantInputSchema).array(), import_zod.z.lazy(() => MenuUncheckedCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => MenuUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => MenuCreateOrConnectWithoutRestaurantInputSchema), import_zod.z.lazy(() => MenuCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => MenuUpsertWithWhereUniqueWithoutRestaurantInputSchema), import_zod.z.lazy(() => MenuUpsertWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => MenuCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => MenuWhereUniqueInputSchema), import_zod.z.lazy(() => MenuWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => MenuWhereUniqueInputSchema), import_zod.z.lazy(() => MenuWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => MenuWhereUniqueInputSchema), import_zod.z.lazy(() => MenuWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => MenuWhereUniqueInputSchema), import_zod.z.lazy(() => MenuWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => MenuUpdateWithWhereUniqueWithoutRestaurantInputSchema), import_zod.z.lazy(() => MenuUpdateWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => MenuUpdateManyWithWhereWithoutRestaurantInputSchema), import_zod.z.lazy(() => MenuUpdateManyWithWhereWithoutRestaurantInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => MenuScalarWhereInputSchema), import_zod.z.lazy(() => MenuScalarWhereInputSchema).array()]).optional()
}).strict();
var SalesTransactionsUncheckedUpdateManyWithoutRestaurantNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => SalesTransactionsCreateWithoutRestaurantInputSchema).array(), import_zod.z.lazy(() => SalesTransactionsUncheckedCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => SalesTransactionsUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsCreateOrConnectWithoutRestaurantInputSchema), import_zod.z.lazy(() => SalesTransactionsCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsUpsertWithWhereUniqueWithoutRestaurantInputSchema), import_zod.z.lazy(() => SalesTransactionsUpsertWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => SalesTransactionsCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsWhereUniqueInputSchema), import_zod.z.lazy(() => SalesTransactionsWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsWhereUniqueInputSchema), import_zod.z.lazy(() => SalesTransactionsWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsWhereUniqueInputSchema), import_zod.z.lazy(() => SalesTransactionsWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsWhereUniqueInputSchema), import_zod.z.lazy(() => SalesTransactionsWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsUpdateWithWhereUniqueWithoutRestaurantInputSchema), import_zod.z.lazy(() => SalesTransactionsUpdateWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsUpdateManyWithWhereWithoutRestaurantInputSchema), import_zod.z.lazy(() => SalesTransactionsUpdateManyWithWhereWithoutRestaurantInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsScalarWhereInputSchema), import_zod.z.lazy(() => SalesTransactionsScalarWhereInputSchema).array()]).optional()
}).strict();
var LeftoverItemUncheckedUpdateManyWithoutRestaurantNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => LeftoverItemCreateWithoutRestaurantInputSchema).array(), import_zod.z.lazy(() => LeftoverItemUncheckedCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => LeftoverItemUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemCreateOrConnectWithoutRestaurantInputSchema), import_zod.z.lazy(() => LeftoverItemCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemUpsertWithWhereUniqueWithoutRestaurantInputSchema), import_zod.z.lazy(() => LeftoverItemUpsertWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => LeftoverItemCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema), import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema), import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema), import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema), import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemUpdateWithWhereUniqueWithoutRestaurantInputSchema), import_zod.z.lazy(() => LeftoverItemUpdateWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemUpdateManyWithWhereWithoutRestaurantInputSchema), import_zod.z.lazy(() => LeftoverItemUpdateManyWithWhereWithoutRestaurantInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemScalarWhereInputSchema), import_zod.z.lazy(() => LeftoverItemScalarWhereInputSchema).array()]).optional()
}).strict();
var WasteRecordUncheckedUpdateManyWithoutRestaurantNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => WasteRecordCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => WasteRecordCreateWithoutRestaurantInputSchema).array(), import_zod.z.lazy(() => WasteRecordUncheckedCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => WasteRecordUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => WasteRecordCreateOrConnectWithoutRestaurantInputSchema), import_zod.z.lazy(() => WasteRecordCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => WasteRecordUpsertWithWhereUniqueWithoutRestaurantInputSchema), import_zod.z.lazy(() => WasteRecordUpsertWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => WasteRecordCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema), import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema), import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema), import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema), import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => WasteRecordUpdateWithWhereUniqueWithoutRestaurantInputSchema), import_zod.z.lazy(() => WasteRecordUpdateWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => WasteRecordUpdateManyWithWhereWithoutRestaurantInputSchema), import_zod.z.lazy(() => WasteRecordUpdateManyWithWhereWithoutRestaurantInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => WasteRecordScalarWhereInputSchema), import_zod.z.lazy(() => WasteRecordScalarWhereInputSchema).array()]).optional()
}).strict();
var ProductionPlanUncheckedUpdateManyWithoutRestaurantNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => ProductionPlanCreateWithoutRestaurantInputSchema).array(), import_zod.z.lazy(() => ProductionPlanUncheckedCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => ProductionPlanUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanCreateOrConnectWithoutRestaurantInputSchema), import_zod.z.lazy(() => ProductionPlanCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanUpsertWithWhereUniqueWithoutRestaurantInputSchema), import_zod.z.lazy(() => ProductionPlanUpsertWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => ProductionPlanCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanWhereUniqueInputSchema), import_zod.z.lazy(() => ProductionPlanWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanWhereUniqueInputSchema), import_zod.z.lazy(() => ProductionPlanWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanWhereUniqueInputSchema), import_zod.z.lazy(() => ProductionPlanWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanWhereUniqueInputSchema), import_zod.z.lazy(() => ProductionPlanWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanUpdateWithWhereUniqueWithoutRestaurantInputSchema), import_zod.z.lazy(() => ProductionPlanUpdateWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanUpdateManyWithWhereWithoutRestaurantInputSchema), import_zod.z.lazy(() => ProductionPlanUpdateManyWithWhereWithoutRestaurantInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanScalarWhereInputSchema), import_zod.z.lazy(() => ProductionPlanScalarWhereInputSchema).array()]).optional()
}).strict();
var EquipmentUncheckedUpdateManyWithoutRestaurantNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => EquipmentCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => EquipmentCreateWithoutRestaurantInputSchema).array(), import_zod.z.lazy(() => EquipmentUncheckedCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => EquipmentUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => EquipmentCreateOrConnectWithoutRestaurantInputSchema), import_zod.z.lazy(() => EquipmentCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => EquipmentUpsertWithWhereUniqueWithoutRestaurantInputSchema), import_zod.z.lazy(() => EquipmentUpsertWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => EquipmentCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => EquipmentWhereUniqueInputSchema), import_zod.z.lazy(() => EquipmentWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => EquipmentWhereUniqueInputSchema), import_zod.z.lazy(() => EquipmentWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => EquipmentWhereUniqueInputSchema), import_zod.z.lazy(() => EquipmentWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => EquipmentWhereUniqueInputSchema), import_zod.z.lazy(() => EquipmentWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => EquipmentUpdateWithWhereUniqueWithoutRestaurantInputSchema), import_zod.z.lazy(() => EquipmentUpdateWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => EquipmentUpdateManyWithWhereWithoutRestaurantInputSchema), import_zod.z.lazy(() => EquipmentUpdateManyWithWhereWithoutRestaurantInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => EquipmentScalarWhereInputSchema), import_zod.z.lazy(() => EquipmentScalarWhereInputSchema).array()]).optional()
}).strict();
var QualityChecklistUncheckedUpdateManyWithoutRestaurantNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => QualityChecklistCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => QualityChecklistCreateWithoutRestaurantInputSchema).array(), import_zod.z.lazy(() => QualityChecklistUncheckedCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => QualityChecklistUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => QualityChecklistCreateOrConnectWithoutRestaurantInputSchema), import_zod.z.lazy(() => QualityChecklistCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => QualityChecklistUpsertWithWhereUniqueWithoutRestaurantInputSchema), import_zod.z.lazy(() => QualityChecklistUpsertWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => QualityChecklistCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => QualityChecklistWhereUniqueInputSchema), import_zod.z.lazy(() => QualityChecklistWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => QualityChecklistWhereUniqueInputSchema), import_zod.z.lazy(() => QualityChecklistWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => QualityChecklistWhereUniqueInputSchema), import_zod.z.lazy(() => QualityChecklistWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => QualityChecklistWhereUniqueInputSchema), import_zod.z.lazy(() => QualityChecklistWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => QualityChecklistUpdateWithWhereUniqueWithoutRestaurantInputSchema), import_zod.z.lazy(() => QualityChecklistUpdateWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => QualityChecklistUpdateManyWithWhereWithoutRestaurantInputSchema), import_zod.z.lazy(() => QualityChecklistUpdateManyWithWhereWithoutRestaurantInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => QualityChecklistScalarWhereInputSchema), import_zod.z.lazy(() => QualityChecklistScalarWhereInputSchema).array()]).optional()
}).strict();
var CustomerFeedbackUncheckedUpdateManyWithoutRestaurantNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => CustomerFeedbackCreateWithoutRestaurantInputSchema).array(), import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateWithoutRestaurantInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackCreateOrConnectWithoutRestaurantInputSchema), import_zod.z.lazy(() => CustomerFeedbackCreateOrConnectWithoutRestaurantInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackUpsertWithWhereUniqueWithoutRestaurantInputSchema), import_zod.z.lazy(() => CustomerFeedbackUpsertWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => CustomerFeedbackCreateManyRestaurantInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema), import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema), import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema), import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema), import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackUpdateWithWhereUniqueWithoutRestaurantInputSchema), import_zod.z.lazy(() => CustomerFeedbackUpdateWithWhereUniqueWithoutRestaurantInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackUpdateManyWithWhereWithoutRestaurantInputSchema), import_zod.z.lazy(() => CustomerFeedbackUpdateManyWithWhereWithoutRestaurantInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackScalarWhereInputSchema), import_zod.z.lazy(() => CustomerFeedbackScalarWhereInputSchema).array()]).optional()
}).strict();
var OrganizationCreateNestedOneWithoutUsersInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => OrganizationCreateWithoutUsersInputSchema), import_zod.z.lazy(() => OrganizationUncheckedCreateWithoutUsersInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => OrganizationCreateOrConnectWithoutUsersInputSchema).optional(),
  connect: import_zod.z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();
var RestaurantCreateNestedOneWithoutUsersInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RestaurantCreateWithoutUsersInputSchema), import_zod.z.lazy(() => RestaurantUncheckedCreateWithoutUsersInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => RestaurantCreateOrConnectWithoutUsersInputSchema).optional(),
  connect: import_zod.z.lazy(() => RestaurantWhereUniqueInputSchema).optional()
}).strict();
var ShiftCreateNestedManyWithoutUserInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => ShiftCreateWithoutUserInputSchema), import_zod.z.lazy(() => ShiftCreateWithoutUserInputSchema).array(), import_zod.z.lazy(() => ShiftUncheckedCreateWithoutUserInputSchema), import_zod.z.lazy(() => ShiftUncheckedCreateWithoutUserInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => ShiftCreateOrConnectWithoutUserInputSchema), import_zod.z.lazy(() => ShiftCreateOrConnectWithoutUserInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => ShiftCreateManyUserInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => ShiftWhereUniqueInputSchema), import_zod.z.lazy(() => ShiftWhereUniqueInputSchema).array()]).optional()
}).strict();
var PrepItemCreateNestedManyWithoutAssignedToInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => PrepItemCreateWithoutAssignedToInputSchema), import_zod.z.lazy(() => PrepItemCreateWithoutAssignedToInputSchema).array(), import_zod.z.lazy(() => PrepItemUncheckedCreateWithoutAssignedToInputSchema), import_zod.z.lazy(() => PrepItemUncheckedCreateWithoutAssignedToInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => PrepItemCreateOrConnectWithoutAssignedToInputSchema), import_zod.z.lazy(() => PrepItemCreateOrConnectWithoutAssignedToInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => PrepItemCreateManyAssignedToInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema), import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var InventoryItemCreateNestedManyWithoutLastUpdatedByInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => InventoryItemCreateWithoutLastUpdatedByInputSchema), import_zod.z.lazy(() => InventoryItemCreateWithoutLastUpdatedByInputSchema).array(), import_zod.z.lazy(() => InventoryItemUncheckedCreateWithoutLastUpdatedByInputSchema), import_zod.z.lazy(() => InventoryItemUncheckedCreateWithoutLastUpdatedByInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => InventoryItemCreateOrConnectWithoutLastUpdatedByInputSchema), import_zod.z.lazy(() => InventoryItemCreateOrConnectWithoutLastUpdatedByInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => InventoryItemCreateManyLastUpdatedByInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema), import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var SessionCreateNestedManyWithoutUserInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => SessionCreateWithoutUserInputSchema), import_zod.z.lazy(() => SessionCreateWithoutUserInputSchema).array(), import_zod.z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema), import_zod.z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema), import_zod.z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => SessionCreateManyUserInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => SessionWhereUniqueInputSchema), import_zod.z.lazy(() => SessionWhereUniqueInputSchema).array()]).optional()
}).strict();
var PasswordResetCreateNestedManyWithoutUserInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => PasswordResetCreateWithoutUserInputSchema), import_zod.z.lazy(() => PasswordResetCreateWithoutUserInputSchema).array(), import_zod.z.lazy(() => PasswordResetUncheckedCreateWithoutUserInputSchema), import_zod.z.lazy(() => PasswordResetUncheckedCreateWithoutUserInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => PasswordResetCreateOrConnectWithoutUserInputSchema), import_zod.z.lazy(() => PasswordResetCreateOrConnectWithoutUserInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => PasswordResetCreateManyUserInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => PasswordResetWhereUniqueInputSchema), import_zod.z.lazy(() => PasswordResetWhereUniqueInputSchema).array()]).optional()
}).strict();
var LeftoverItemCreateNestedManyWithoutRecordedByInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemCreateWithoutRecordedByInputSchema), import_zod.z.lazy(() => LeftoverItemCreateWithoutRecordedByInputSchema).array(), import_zod.z.lazy(() => LeftoverItemUncheckedCreateWithoutRecordedByInputSchema), import_zod.z.lazy(() => LeftoverItemUncheckedCreateWithoutRecordedByInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemCreateOrConnectWithoutRecordedByInputSchema), import_zod.z.lazy(() => LeftoverItemCreateOrConnectWithoutRecordedByInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => LeftoverItemCreateManyRecordedByInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema), import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var WasteRecordCreateNestedManyWithoutRecordedByInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => WasteRecordCreateWithoutRecordedByInputSchema), import_zod.z.lazy(() => WasteRecordCreateWithoutRecordedByInputSchema).array(), import_zod.z.lazy(() => WasteRecordUncheckedCreateWithoutRecordedByInputSchema), import_zod.z.lazy(() => WasteRecordUncheckedCreateWithoutRecordedByInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => WasteRecordCreateOrConnectWithoutRecordedByInputSchema), import_zod.z.lazy(() => WasteRecordCreateOrConnectWithoutRecordedByInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => WasteRecordCreateManyRecordedByInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema), import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema).array()]).optional()
}).strict();
var ProductionPlanCreateNestedManyWithoutCreatedByInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanCreateWithoutCreatedByInputSchema), import_zod.z.lazy(() => ProductionPlanCreateWithoutCreatedByInputSchema).array(), import_zod.z.lazy(() => ProductionPlanUncheckedCreateWithoutCreatedByInputSchema), import_zod.z.lazy(() => ProductionPlanUncheckedCreateWithoutCreatedByInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanCreateOrConnectWithoutCreatedByInputSchema), import_zod.z.lazy(() => ProductionPlanCreateOrConnectWithoutCreatedByInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => ProductionPlanCreateManyCreatedByInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanWhereUniqueInputSchema), import_zod.z.lazy(() => ProductionPlanWhereUniqueInputSchema).array()]).optional()
}).strict();
var ProductionPlanItemCreateNestedManyWithoutAssignedToInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemCreateWithoutAssignedToInputSchema), import_zod.z.lazy(() => ProductionPlanItemCreateWithoutAssignedToInputSchema).array(), import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateWithoutAssignedToInputSchema), import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateWithoutAssignedToInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemCreateOrConnectWithoutAssignedToInputSchema), import_zod.z.lazy(() => ProductionPlanItemCreateOrConnectWithoutAssignedToInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => ProductionPlanItemCreateManyAssignedToInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema), import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var AvailabilityCreateNestedManyWithoutUserInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => AvailabilityCreateWithoutUserInputSchema), import_zod.z.lazy(() => AvailabilityCreateWithoutUserInputSchema).array(), import_zod.z.lazy(() => AvailabilityUncheckedCreateWithoutUserInputSchema), import_zod.z.lazy(() => AvailabilityUncheckedCreateWithoutUserInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => AvailabilityCreateOrConnectWithoutUserInputSchema), import_zod.z.lazy(() => AvailabilityCreateOrConnectWithoutUserInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => AvailabilityCreateManyUserInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => AvailabilityWhereUniqueInputSchema), import_zod.z.lazy(() => AvailabilityWhereUniqueInputSchema).array()]).optional()
}).strict();
var SchedulingConstraintCreateNestedManyWithoutUserInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => SchedulingConstraintCreateWithoutUserInputSchema), import_zod.z.lazy(() => SchedulingConstraintCreateWithoutUserInputSchema).array(), import_zod.z.lazy(() => SchedulingConstraintUncheckedCreateWithoutUserInputSchema), import_zod.z.lazy(() => SchedulingConstraintUncheckedCreateWithoutUserInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => SchedulingConstraintCreateOrConnectWithoutUserInputSchema), import_zod.z.lazy(() => SchedulingConstraintCreateOrConnectWithoutUserInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => SchedulingConstraintCreateManyUserInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => SchedulingConstraintWhereUniqueInputSchema), import_zod.z.lazy(() => SchedulingConstraintWhereUniqueInputSchema).array()]).optional()
}).strict();
var InventoryWithdrawalCreateNestedManyWithoutCreatedByInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalCreateWithoutCreatedByInputSchema), import_zod.z.lazy(() => InventoryWithdrawalCreateWithoutCreatedByInputSchema).array(), import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateWithoutCreatedByInputSchema), import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateWithoutCreatedByInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalCreateOrConnectWithoutCreatedByInputSchema), import_zod.z.lazy(() => InventoryWithdrawalCreateOrConnectWithoutCreatedByInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => InventoryWithdrawalCreateManyCreatedByInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema), import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array()]).optional()
}).strict();
var ChecklistCompleteCreateNestedManyWithoutCompletedByInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteCreateWithoutCompletedByInputSchema), import_zod.z.lazy(() => ChecklistCompleteCreateWithoutCompletedByInputSchema).array(), import_zod.z.lazy(() => ChecklistCompleteUncheckedCreateWithoutCompletedByInputSchema), import_zod.z.lazy(() => ChecklistCompleteUncheckedCreateWithoutCompletedByInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteCreateOrConnectWithoutCompletedByInputSchema), import_zod.z.lazy(() => ChecklistCompleteCreateOrConnectWithoutCompletedByInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => ChecklistCompleteCreateManyCompletedByInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteWhereUniqueInputSchema), import_zod.z.lazy(() => ChecklistCompleteWhereUniqueInputSchema).array()]).optional()
}).strict();
var CustomerFeedbackCreateNestedManyWithoutRespondedByInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackCreateWithoutRespondedByInputSchema), import_zod.z.lazy(() => CustomerFeedbackCreateWithoutRespondedByInputSchema).array(), import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateWithoutRespondedByInputSchema), import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateWithoutRespondedByInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackCreateOrConnectWithoutRespondedByInputSchema), import_zod.z.lazy(() => CustomerFeedbackCreateOrConnectWithoutRespondedByInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => CustomerFeedbackCreateManyRespondedByInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema), import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array()]).optional()
}).strict();
var RecipeVersionCreateNestedManyWithoutCreatedByInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionCreateWithoutCreatedByInputSchema), import_zod.z.lazy(() => RecipeVersionCreateWithoutCreatedByInputSchema).array(), import_zod.z.lazy(() => RecipeVersionUncheckedCreateWithoutCreatedByInputSchema), import_zod.z.lazy(() => RecipeVersionUncheckedCreateWithoutCreatedByInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionCreateOrConnectWithoutCreatedByInputSchema), import_zod.z.lazy(() => RecipeVersionCreateOrConnectWithoutCreatedByInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => RecipeVersionCreateManyCreatedByInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema).array()]).optional()
}).strict();
var RecipeVersionCreateNestedManyWithoutApprovedByInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionCreateWithoutApprovedByInputSchema), import_zod.z.lazy(() => RecipeVersionCreateWithoutApprovedByInputSchema).array(), import_zod.z.lazy(() => RecipeVersionUncheckedCreateWithoutApprovedByInputSchema), import_zod.z.lazy(() => RecipeVersionUncheckedCreateWithoutApprovedByInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionCreateOrConnectWithoutApprovedByInputSchema), import_zod.z.lazy(() => RecipeVersionCreateOrConnectWithoutApprovedByInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => RecipeVersionCreateManyApprovedByInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema).array()]).optional()
}).strict();
var ShiftUncheckedCreateNestedManyWithoutUserInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => ShiftCreateWithoutUserInputSchema), import_zod.z.lazy(() => ShiftCreateWithoutUserInputSchema).array(), import_zod.z.lazy(() => ShiftUncheckedCreateWithoutUserInputSchema), import_zod.z.lazy(() => ShiftUncheckedCreateWithoutUserInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => ShiftCreateOrConnectWithoutUserInputSchema), import_zod.z.lazy(() => ShiftCreateOrConnectWithoutUserInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => ShiftCreateManyUserInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => ShiftWhereUniqueInputSchema), import_zod.z.lazy(() => ShiftWhereUniqueInputSchema).array()]).optional()
}).strict();
var PrepItemUncheckedCreateNestedManyWithoutAssignedToInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => PrepItemCreateWithoutAssignedToInputSchema), import_zod.z.lazy(() => PrepItemCreateWithoutAssignedToInputSchema).array(), import_zod.z.lazy(() => PrepItemUncheckedCreateWithoutAssignedToInputSchema), import_zod.z.lazy(() => PrepItemUncheckedCreateWithoutAssignedToInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => PrepItemCreateOrConnectWithoutAssignedToInputSchema), import_zod.z.lazy(() => PrepItemCreateOrConnectWithoutAssignedToInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => PrepItemCreateManyAssignedToInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema), import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var InventoryItemUncheckedCreateNestedManyWithoutLastUpdatedByInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => InventoryItemCreateWithoutLastUpdatedByInputSchema), import_zod.z.lazy(() => InventoryItemCreateWithoutLastUpdatedByInputSchema).array(), import_zod.z.lazy(() => InventoryItemUncheckedCreateWithoutLastUpdatedByInputSchema), import_zod.z.lazy(() => InventoryItemUncheckedCreateWithoutLastUpdatedByInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => InventoryItemCreateOrConnectWithoutLastUpdatedByInputSchema), import_zod.z.lazy(() => InventoryItemCreateOrConnectWithoutLastUpdatedByInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => InventoryItemCreateManyLastUpdatedByInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema), import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var SessionUncheckedCreateNestedManyWithoutUserInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => SessionCreateWithoutUserInputSchema), import_zod.z.lazy(() => SessionCreateWithoutUserInputSchema).array(), import_zod.z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema), import_zod.z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema), import_zod.z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => SessionCreateManyUserInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => SessionWhereUniqueInputSchema), import_zod.z.lazy(() => SessionWhereUniqueInputSchema).array()]).optional()
}).strict();
var PasswordResetUncheckedCreateNestedManyWithoutUserInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => PasswordResetCreateWithoutUserInputSchema), import_zod.z.lazy(() => PasswordResetCreateWithoutUserInputSchema).array(), import_zod.z.lazy(() => PasswordResetUncheckedCreateWithoutUserInputSchema), import_zod.z.lazy(() => PasswordResetUncheckedCreateWithoutUserInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => PasswordResetCreateOrConnectWithoutUserInputSchema), import_zod.z.lazy(() => PasswordResetCreateOrConnectWithoutUserInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => PasswordResetCreateManyUserInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => PasswordResetWhereUniqueInputSchema), import_zod.z.lazy(() => PasswordResetWhereUniqueInputSchema).array()]).optional()
}).strict();
var LeftoverItemUncheckedCreateNestedManyWithoutRecordedByInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemCreateWithoutRecordedByInputSchema), import_zod.z.lazy(() => LeftoverItemCreateWithoutRecordedByInputSchema).array(), import_zod.z.lazy(() => LeftoverItemUncheckedCreateWithoutRecordedByInputSchema), import_zod.z.lazy(() => LeftoverItemUncheckedCreateWithoutRecordedByInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemCreateOrConnectWithoutRecordedByInputSchema), import_zod.z.lazy(() => LeftoverItemCreateOrConnectWithoutRecordedByInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => LeftoverItemCreateManyRecordedByInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema), import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var WasteRecordUncheckedCreateNestedManyWithoutRecordedByInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => WasteRecordCreateWithoutRecordedByInputSchema), import_zod.z.lazy(() => WasteRecordCreateWithoutRecordedByInputSchema).array(), import_zod.z.lazy(() => WasteRecordUncheckedCreateWithoutRecordedByInputSchema), import_zod.z.lazy(() => WasteRecordUncheckedCreateWithoutRecordedByInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => WasteRecordCreateOrConnectWithoutRecordedByInputSchema), import_zod.z.lazy(() => WasteRecordCreateOrConnectWithoutRecordedByInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => WasteRecordCreateManyRecordedByInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema), import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema).array()]).optional()
}).strict();
var ProductionPlanUncheckedCreateNestedManyWithoutCreatedByInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanCreateWithoutCreatedByInputSchema), import_zod.z.lazy(() => ProductionPlanCreateWithoutCreatedByInputSchema).array(), import_zod.z.lazy(() => ProductionPlanUncheckedCreateWithoutCreatedByInputSchema), import_zod.z.lazy(() => ProductionPlanUncheckedCreateWithoutCreatedByInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanCreateOrConnectWithoutCreatedByInputSchema), import_zod.z.lazy(() => ProductionPlanCreateOrConnectWithoutCreatedByInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => ProductionPlanCreateManyCreatedByInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanWhereUniqueInputSchema), import_zod.z.lazy(() => ProductionPlanWhereUniqueInputSchema).array()]).optional()
}).strict();
var ProductionPlanItemUncheckedCreateNestedManyWithoutAssignedToInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemCreateWithoutAssignedToInputSchema), import_zod.z.lazy(() => ProductionPlanItemCreateWithoutAssignedToInputSchema).array(), import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateWithoutAssignedToInputSchema), import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateWithoutAssignedToInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemCreateOrConnectWithoutAssignedToInputSchema), import_zod.z.lazy(() => ProductionPlanItemCreateOrConnectWithoutAssignedToInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => ProductionPlanItemCreateManyAssignedToInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema), import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var AvailabilityUncheckedCreateNestedManyWithoutUserInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => AvailabilityCreateWithoutUserInputSchema), import_zod.z.lazy(() => AvailabilityCreateWithoutUserInputSchema).array(), import_zod.z.lazy(() => AvailabilityUncheckedCreateWithoutUserInputSchema), import_zod.z.lazy(() => AvailabilityUncheckedCreateWithoutUserInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => AvailabilityCreateOrConnectWithoutUserInputSchema), import_zod.z.lazy(() => AvailabilityCreateOrConnectWithoutUserInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => AvailabilityCreateManyUserInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => AvailabilityWhereUniqueInputSchema), import_zod.z.lazy(() => AvailabilityWhereUniqueInputSchema).array()]).optional()
}).strict();
var SchedulingConstraintUncheckedCreateNestedManyWithoutUserInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => SchedulingConstraintCreateWithoutUserInputSchema), import_zod.z.lazy(() => SchedulingConstraintCreateWithoutUserInputSchema).array(), import_zod.z.lazy(() => SchedulingConstraintUncheckedCreateWithoutUserInputSchema), import_zod.z.lazy(() => SchedulingConstraintUncheckedCreateWithoutUserInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => SchedulingConstraintCreateOrConnectWithoutUserInputSchema), import_zod.z.lazy(() => SchedulingConstraintCreateOrConnectWithoutUserInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => SchedulingConstraintCreateManyUserInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => SchedulingConstraintWhereUniqueInputSchema), import_zod.z.lazy(() => SchedulingConstraintWhereUniqueInputSchema).array()]).optional()
}).strict();
var InventoryWithdrawalUncheckedCreateNestedManyWithoutCreatedByInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalCreateWithoutCreatedByInputSchema), import_zod.z.lazy(() => InventoryWithdrawalCreateWithoutCreatedByInputSchema).array(), import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateWithoutCreatedByInputSchema), import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateWithoutCreatedByInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalCreateOrConnectWithoutCreatedByInputSchema), import_zod.z.lazy(() => InventoryWithdrawalCreateOrConnectWithoutCreatedByInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => InventoryWithdrawalCreateManyCreatedByInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema), import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array()]).optional()
}).strict();
var ChecklistCompleteUncheckedCreateNestedManyWithoutCompletedByInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteCreateWithoutCompletedByInputSchema), import_zod.z.lazy(() => ChecklistCompleteCreateWithoutCompletedByInputSchema).array(), import_zod.z.lazy(() => ChecklistCompleteUncheckedCreateWithoutCompletedByInputSchema), import_zod.z.lazy(() => ChecklistCompleteUncheckedCreateWithoutCompletedByInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteCreateOrConnectWithoutCompletedByInputSchema), import_zod.z.lazy(() => ChecklistCompleteCreateOrConnectWithoutCompletedByInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => ChecklistCompleteCreateManyCompletedByInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteWhereUniqueInputSchema), import_zod.z.lazy(() => ChecklistCompleteWhereUniqueInputSchema).array()]).optional()
}).strict();
var CustomerFeedbackUncheckedCreateNestedManyWithoutRespondedByInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackCreateWithoutRespondedByInputSchema), import_zod.z.lazy(() => CustomerFeedbackCreateWithoutRespondedByInputSchema).array(), import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateWithoutRespondedByInputSchema), import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateWithoutRespondedByInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackCreateOrConnectWithoutRespondedByInputSchema), import_zod.z.lazy(() => CustomerFeedbackCreateOrConnectWithoutRespondedByInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => CustomerFeedbackCreateManyRespondedByInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema), import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array()]).optional()
}).strict();
var RecipeVersionUncheckedCreateNestedManyWithoutCreatedByInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionCreateWithoutCreatedByInputSchema), import_zod.z.lazy(() => RecipeVersionCreateWithoutCreatedByInputSchema).array(), import_zod.z.lazy(() => RecipeVersionUncheckedCreateWithoutCreatedByInputSchema), import_zod.z.lazy(() => RecipeVersionUncheckedCreateWithoutCreatedByInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionCreateOrConnectWithoutCreatedByInputSchema), import_zod.z.lazy(() => RecipeVersionCreateOrConnectWithoutCreatedByInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => RecipeVersionCreateManyCreatedByInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema).array()]).optional()
}).strict();
var RecipeVersionUncheckedCreateNestedManyWithoutApprovedByInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionCreateWithoutApprovedByInputSchema), import_zod.z.lazy(() => RecipeVersionCreateWithoutApprovedByInputSchema).array(), import_zod.z.lazy(() => RecipeVersionUncheckedCreateWithoutApprovedByInputSchema), import_zod.z.lazy(() => RecipeVersionUncheckedCreateWithoutApprovedByInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionCreateOrConnectWithoutApprovedByInputSchema), import_zod.z.lazy(() => RecipeVersionCreateOrConnectWithoutApprovedByInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => RecipeVersionCreateManyApprovedByInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema).array()]).optional()
}).strict();
var EnumUserRoleFieldUpdateOperationsInputSchema = import_zod.z.object({
  set: import_zod.z.lazy(() => UserRoleSchema).optional()
}).strict();
var OrganizationUpdateOneWithoutUsersNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => OrganizationCreateWithoutUsersInputSchema), import_zod.z.lazy(() => OrganizationUncheckedCreateWithoutUsersInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => OrganizationCreateOrConnectWithoutUsersInputSchema).optional(),
  upsert: import_zod.z.lazy(() => OrganizationUpsertWithoutUsersInputSchema).optional(),
  disconnect: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => OrganizationWhereInputSchema)]).optional(),
  delete: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => OrganizationWhereInputSchema)]).optional(),
  connect: import_zod.z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => OrganizationUpdateToOneWithWhereWithoutUsersInputSchema), import_zod.z.lazy(() => OrganizationUpdateWithoutUsersInputSchema), import_zod.z.lazy(() => OrganizationUncheckedUpdateWithoutUsersInputSchema)]).optional()
}).strict();
var RestaurantUpdateOneWithoutUsersNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RestaurantCreateWithoutUsersInputSchema), import_zod.z.lazy(() => RestaurantUncheckedCreateWithoutUsersInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => RestaurantCreateOrConnectWithoutUsersInputSchema).optional(),
  upsert: import_zod.z.lazy(() => RestaurantUpsertWithoutUsersInputSchema).optional(),
  disconnect: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RestaurantWhereInputSchema)]).optional(),
  delete: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RestaurantWhereInputSchema)]).optional(),
  connect: import_zod.z.lazy(() => RestaurantWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => RestaurantUpdateToOneWithWhereWithoutUsersInputSchema), import_zod.z.lazy(() => RestaurantUpdateWithoutUsersInputSchema), import_zod.z.lazy(() => RestaurantUncheckedUpdateWithoutUsersInputSchema)]).optional()
}).strict();
var ShiftUpdateManyWithoutUserNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => ShiftCreateWithoutUserInputSchema), import_zod.z.lazy(() => ShiftCreateWithoutUserInputSchema).array(), import_zod.z.lazy(() => ShiftUncheckedCreateWithoutUserInputSchema), import_zod.z.lazy(() => ShiftUncheckedCreateWithoutUserInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => ShiftCreateOrConnectWithoutUserInputSchema), import_zod.z.lazy(() => ShiftCreateOrConnectWithoutUserInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => ShiftUpsertWithWhereUniqueWithoutUserInputSchema), import_zod.z.lazy(() => ShiftUpsertWithWhereUniqueWithoutUserInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => ShiftCreateManyUserInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => ShiftWhereUniqueInputSchema), import_zod.z.lazy(() => ShiftWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => ShiftWhereUniqueInputSchema), import_zod.z.lazy(() => ShiftWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => ShiftWhereUniqueInputSchema), import_zod.z.lazy(() => ShiftWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => ShiftWhereUniqueInputSchema), import_zod.z.lazy(() => ShiftWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => ShiftUpdateWithWhereUniqueWithoutUserInputSchema), import_zod.z.lazy(() => ShiftUpdateWithWhereUniqueWithoutUserInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => ShiftUpdateManyWithWhereWithoutUserInputSchema), import_zod.z.lazy(() => ShiftUpdateManyWithWhereWithoutUserInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => ShiftScalarWhereInputSchema), import_zod.z.lazy(() => ShiftScalarWhereInputSchema).array()]).optional()
}).strict();
var PrepItemUpdateManyWithoutAssignedToNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => PrepItemCreateWithoutAssignedToInputSchema), import_zod.z.lazy(() => PrepItemCreateWithoutAssignedToInputSchema).array(), import_zod.z.lazy(() => PrepItemUncheckedCreateWithoutAssignedToInputSchema), import_zod.z.lazy(() => PrepItemUncheckedCreateWithoutAssignedToInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => PrepItemCreateOrConnectWithoutAssignedToInputSchema), import_zod.z.lazy(() => PrepItemCreateOrConnectWithoutAssignedToInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => PrepItemUpsertWithWhereUniqueWithoutAssignedToInputSchema), import_zod.z.lazy(() => PrepItemUpsertWithWhereUniqueWithoutAssignedToInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => PrepItemCreateManyAssignedToInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema), import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema), import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema), import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema), import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => PrepItemUpdateWithWhereUniqueWithoutAssignedToInputSchema), import_zod.z.lazy(() => PrepItemUpdateWithWhereUniqueWithoutAssignedToInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => PrepItemUpdateManyWithWhereWithoutAssignedToInputSchema), import_zod.z.lazy(() => PrepItemUpdateManyWithWhereWithoutAssignedToInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => PrepItemScalarWhereInputSchema), import_zod.z.lazy(() => PrepItemScalarWhereInputSchema).array()]).optional()
}).strict();
var InventoryItemUpdateManyWithoutLastUpdatedByNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => InventoryItemCreateWithoutLastUpdatedByInputSchema), import_zod.z.lazy(() => InventoryItemCreateWithoutLastUpdatedByInputSchema).array(), import_zod.z.lazy(() => InventoryItemUncheckedCreateWithoutLastUpdatedByInputSchema), import_zod.z.lazy(() => InventoryItemUncheckedCreateWithoutLastUpdatedByInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => InventoryItemCreateOrConnectWithoutLastUpdatedByInputSchema), import_zod.z.lazy(() => InventoryItemCreateOrConnectWithoutLastUpdatedByInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => InventoryItemUpsertWithWhereUniqueWithoutLastUpdatedByInputSchema), import_zod.z.lazy(() => InventoryItemUpsertWithWhereUniqueWithoutLastUpdatedByInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => InventoryItemCreateManyLastUpdatedByInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema), import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema), import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema), import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema), import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => InventoryItemUpdateWithWhereUniqueWithoutLastUpdatedByInputSchema), import_zod.z.lazy(() => InventoryItemUpdateWithWhereUniqueWithoutLastUpdatedByInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => InventoryItemUpdateManyWithWhereWithoutLastUpdatedByInputSchema), import_zod.z.lazy(() => InventoryItemUpdateManyWithWhereWithoutLastUpdatedByInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => InventoryItemScalarWhereInputSchema), import_zod.z.lazy(() => InventoryItemScalarWhereInputSchema).array()]).optional()
}).strict();
var SessionUpdateManyWithoutUserNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => SessionCreateWithoutUserInputSchema), import_zod.z.lazy(() => SessionCreateWithoutUserInputSchema).array(), import_zod.z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema), import_zod.z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema), import_zod.z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema), import_zod.z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => SessionCreateManyUserInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => SessionWhereUniqueInputSchema), import_zod.z.lazy(() => SessionWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => SessionWhereUniqueInputSchema), import_zod.z.lazy(() => SessionWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => SessionWhereUniqueInputSchema), import_zod.z.lazy(() => SessionWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => SessionWhereUniqueInputSchema), import_zod.z.lazy(() => SessionWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema), import_zod.z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema), import_zod.z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => SessionScalarWhereInputSchema), import_zod.z.lazy(() => SessionScalarWhereInputSchema).array()]).optional()
}).strict();
var PasswordResetUpdateManyWithoutUserNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => PasswordResetCreateWithoutUserInputSchema), import_zod.z.lazy(() => PasswordResetCreateWithoutUserInputSchema).array(), import_zod.z.lazy(() => PasswordResetUncheckedCreateWithoutUserInputSchema), import_zod.z.lazy(() => PasswordResetUncheckedCreateWithoutUserInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => PasswordResetCreateOrConnectWithoutUserInputSchema), import_zod.z.lazy(() => PasswordResetCreateOrConnectWithoutUserInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => PasswordResetUpsertWithWhereUniqueWithoutUserInputSchema), import_zod.z.lazy(() => PasswordResetUpsertWithWhereUniqueWithoutUserInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => PasswordResetCreateManyUserInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => PasswordResetWhereUniqueInputSchema), import_zod.z.lazy(() => PasswordResetWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => PasswordResetWhereUniqueInputSchema), import_zod.z.lazy(() => PasswordResetWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => PasswordResetWhereUniqueInputSchema), import_zod.z.lazy(() => PasswordResetWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => PasswordResetWhereUniqueInputSchema), import_zod.z.lazy(() => PasswordResetWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => PasswordResetUpdateWithWhereUniqueWithoutUserInputSchema), import_zod.z.lazy(() => PasswordResetUpdateWithWhereUniqueWithoutUserInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => PasswordResetUpdateManyWithWhereWithoutUserInputSchema), import_zod.z.lazy(() => PasswordResetUpdateManyWithWhereWithoutUserInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => PasswordResetScalarWhereInputSchema), import_zod.z.lazy(() => PasswordResetScalarWhereInputSchema).array()]).optional()
}).strict();
var LeftoverItemUpdateManyWithoutRecordedByNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemCreateWithoutRecordedByInputSchema), import_zod.z.lazy(() => LeftoverItemCreateWithoutRecordedByInputSchema).array(), import_zod.z.lazy(() => LeftoverItemUncheckedCreateWithoutRecordedByInputSchema), import_zod.z.lazy(() => LeftoverItemUncheckedCreateWithoutRecordedByInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemCreateOrConnectWithoutRecordedByInputSchema), import_zod.z.lazy(() => LeftoverItemCreateOrConnectWithoutRecordedByInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemUpsertWithWhereUniqueWithoutRecordedByInputSchema), import_zod.z.lazy(() => LeftoverItemUpsertWithWhereUniqueWithoutRecordedByInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => LeftoverItemCreateManyRecordedByInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema), import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema), import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema), import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema), import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemUpdateWithWhereUniqueWithoutRecordedByInputSchema), import_zod.z.lazy(() => LeftoverItemUpdateWithWhereUniqueWithoutRecordedByInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemUpdateManyWithWhereWithoutRecordedByInputSchema), import_zod.z.lazy(() => LeftoverItemUpdateManyWithWhereWithoutRecordedByInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemScalarWhereInputSchema), import_zod.z.lazy(() => LeftoverItemScalarWhereInputSchema).array()]).optional()
}).strict();
var WasteRecordUpdateManyWithoutRecordedByNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => WasteRecordCreateWithoutRecordedByInputSchema), import_zod.z.lazy(() => WasteRecordCreateWithoutRecordedByInputSchema).array(), import_zod.z.lazy(() => WasteRecordUncheckedCreateWithoutRecordedByInputSchema), import_zod.z.lazy(() => WasteRecordUncheckedCreateWithoutRecordedByInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => WasteRecordCreateOrConnectWithoutRecordedByInputSchema), import_zod.z.lazy(() => WasteRecordCreateOrConnectWithoutRecordedByInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => WasteRecordUpsertWithWhereUniqueWithoutRecordedByInputSchema), import_zod.z.lazy(() => WasteRecordUpsertWithWhereUniqueWithoutRecordedByInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => WasteRecordCreateManyRecordedByInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema), import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema), import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema), import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema), import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => WasteRecordUpdateWithWhereUniqueWithoutRecordedByInputSchema), import_zod.z.lazy(() => WasteRecordUpdateWithWhereUniqueWithoutRecordedByInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => WasteRecordUpdateManyWithWhereWithoutRecordedByInputSchema), import_zod.z.lazy(() => WasteRecordUpdateManyWithWhereWithoutRecordedByInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => WasteRecordScalarWhereInputSchema), import_zod.z.lazy(() => WasteRecordScalarWhereInputSchema).array()]).optional()
}).strict();
var ProductionPlanUpdateManyWithoutCreatedByNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanCreateWithoutCreatedByInputSchema), import_zod.z.lazy(() => ProductionPlanCreateWithoutCreatedByInputSchema).array(), import_zod.z.lazy(() => ProductionPlanUncheckedCreateWithoutCreatedByInputSchema), import_zod.z.lazy(() => ProductionPlanUncheckedCreateWithoutCreatedByInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanCreateOrConnectWithoutCreatedByInputSchema), import_zod.z.lazy(() => ProductionPlanCreateOrConnectWithoutCreatedByInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanUpsertWithWhereUniqueWithoutCreatedByInputSchema), import_zod.z.lazy(() => ProductionPlanUpsertWithWhereUniqueWithoutCreatedByInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => ProductionPlanCreateManyCreatedByInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanWhereUniqueInputSchema), import_zod.z.lazy(() => ProductionPlanWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanWhereUniqueInputSchema), import_zod.z.lazy(() => ProductionPlanWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanWhereUniqueInputSchema), import_zod.z.lazy(() => ProductionPlanWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanWhereUniqueInputSchema), import_zod.z.lazy(() => ProductionPlanWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanUpdateWithWhereUniqueWithoutCreatedByInputSchema), import_zod.z.lazy(() => ProductionPlanUpdateWithWhereUniqueWithoutCreatedByInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanUpdateManyWithWhereWithoutCreatedByInputSchema), import_zod.z.lazy(() => ProductionPlanUpdateManyWithWhereWithoutCreatedByInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanScalarWhereInputSchema), import_zod.z.lazy(() => ProductionPlanScalarWhereInputSchema).array()]).optional()
}).strict();
var ProductionPlanItemUpdateManyWithoutAssignedToNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemCreateWithoutAssignedToInputSchema), import_zod.z.lazy(() => ProductionPlanItemCreateWithoutAssignedToInputSchema).array(), import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateWithoutAssignedToInputSchema), import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateWithoutAssignedToInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemCreateOrConnectWithoutAssignedToInputSchema), import_zod.z.lazy(() => ProductionPlanItemCreateOrConnectWithoutAssignedToInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemUpsertWithWhereUniqueWithoutAssignedToInputSchema), import_zod.z.lazy(() => ProductionPlanItemUpsertWithWhereUniqueWithoutAssignedToInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => ProductionPlanItemCreateManyAssignedToInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema), import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema), import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema), import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema), import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemUpdateWithWhereUniqueWithoutAssignedToInputSchema), import_zod.z.lazy(() => ProductionPlanItemUpdateWithWhereUniqueWithoutAssignedToInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemUpdateManyWithWhereWithoutAssignedToInputSchema), import_zod.z.lazy(() => ProductionPlanItemUpdateManyWithWhereWithoutAssignedToInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemScalarWhereInputSchema), import_zod.z.lazy(() => ProductionPlanItemScalarWhereInputSchema).array()]).optional()
}).strict();
var AvailabilityUpdateManyWithoutUserNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => AvailabilityCreateWithoutUserInputSchema), import_zod.z.lazy(() => AvailabilityCreateWithoutUserInputSchema).array(), import_zod.z.lazy(() => AvailabilityUncheckedCreateWithoutUserInputSchema), import_zod.z.lazy(() => AvailabilityUncheckedCreateWithoutUserInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => AvailabilityCreateOrConnectWithoutUserInputSchema), import_zod.z.lazy(() => AvailabilityCreateOrConnectWithoutUserInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => AvailabilityUpsertWithWhereUniqueWithoutUserInputSchema), import_zod.z.lazy(() => AvailabilityUpsertWithWhereUniqueWithoutUserInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => AvailabilityCreateManyUserInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => AvailabilityWhereUniqueInputSchema), import_zod.z.lazy(() => AvailabilityWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => AvailabilityWhereUniqueInputSchema), import_zod.z.lazy(() => AvailabilityWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => AvailabilityWhereUniqueInputSchema), import_zod.z.lazy(() => AvailabilityWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => AvailabilityWhereUniqueInputSchema), import_zod.z.lazy(() => AvailabilityWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => AvailabilityUpdateWithWhereUniqueWithoutUserInputSchema), import_zod.z.lazy(() => AvailabilityUpdateWithWhereUniqueWithoutUserInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => AvailabilityUpdateManyWithWhereWithoutUserInputSchema), import_zod.z.lazy(() => AvailabilityUpdateManyWithWhereWithoutUserInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => AvailabilityScalarWhereInputSchema), import_zod.z.lazy(() => AvailabilityScalarWhereInputSchema).array()]).optional()
}).strict();
var SchedulingConstraintUpdateManyWithoutUserNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => SchedulingConstraintCreateWithoutUserInputSchema), import_zod.z.lazy(() => SchedulingConstraintCreateWithoutUserInputSchema).array(), import_zod.z.lazy(() => SchedulingConstraintUncheckedCreateWithoutUserInputSchema), import_zod.z.lazy(() => SchedulingConstraintUncheckedCreateWithoutUserInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => SchedulingConstraintCreateOrConnectWithoutUserInputSchema), import_zod.z.lazy(() => SchedulingConstraintCreateOrConnectWithoutUserInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => SchedulingConstraintUpsertWithWhereUniqueWithoutUserInputSchema), import_zod.z.lazy(() => SchedulingConstraintUpsertWithWhereUniqueWithoutUserInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => SchedulingConstraintCreateManyUserInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => SchedulingConstraintWhereUniqueInputSchema), import_zod.z.lazy(() => SchedulingConstraintWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => SchedulingConstraintWhereUniqueInputSchema), import_zod.z.lazy(() => SchedulingConstraintWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => SchedulingConstraintWhereUniqueInputSchema), import_zod.z.lazy(() => SchedulingConstraintWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => SchedulingConstraintWhereUniqueInputSchema), import_zod.z.lazy(() => SchedulingConstraintWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => SchedulingConstraintUpdateWithWhereUniqueWithoutUserInputSchema), import_zod.z.lazy(() => SchedulingConstraintUpdateWithWhereUniqueWithoutUserInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => SchedulingConstraintUpdateManyWithWhereWithoutUserInputSchema), import_zod.z.lazy(() => SchedulingConstraintUpdateManyWithWhereWithoutUserInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => SchedulingConstraintScalarWhereInputSchema), import_zod.z.lazy(() => SchedulingConstraintScalarWhereInputSchema).array()]).optional()
}).strict();
var InventoryWithdrawalUpdateManyWithoutCreatedByNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalCreateWithoutCreatedByInputSchema), import_zod.z.lazy(() => InventoryWithdrawalCreateWithoutCreatedByInputSchema).array(), import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateWithoutCreatedByInputSchema), import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateWithoutCreatedByInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalCreateOrConnectWithoutCreatedByInputSchema), import_zod.z.lazy(() => InventoryWithdrawalCreateOrConnectWithoutCreatedByInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalUpsertWithWhereUniqueWithoutCreatedByInputSchema), import_zod.z.lazy(() => InventoryWithdrawalUpsertWithWhereUniqueWithoutCreatedByInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => InventoryWithdrawalCreateManyCreatedByInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema), import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema), import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema), import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema), import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalUpdateWithWhereUniqueWithoutCreatedByInputSchema), import_zod.z.lazy(() => InventoryWithdrawalUpdateWithWhereUniqueWithoutCreatedByInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalUpdateManyWithWhereWithoutCreatedByInputSchema), import_zod.z.lazy(() => InventoryWithdrawalUpdateManyWithWhereWithoutCreatedByInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalScalarWhereInputSchema), import_zod.z.lazy(() => InventoryWithdrawalScalarWhereInputSchema).array()]).optional()
}).strict();
var ChecklistCompleteUpdateManyWithoutCompletedByNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteCreateWithoutCompletedByInputSchema), import_zod.z.lazy(() => ChecklistCompleteCreateWithoutCompletedByInputSchema).array(), import_zod.z.lazy(() => ChecklistCompleteUncheckedCreateWithoutCompletedByInputSchema), import_zod.z.lazy(() => ChecklistCompleteUncheckedCreateWithoutCompletedByInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteCreateOrConnectWithoutCompletedByInputSchema), import_zod.z.lazy(() => ChecklistCompleteCreateOrConnectWithoutCompletedByInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteUpsertWithWhereUniqueWithoutCompletedByInputSchema), import_zod.z.lazy(() => ChecklistCompleteUpsertWithWhereUniqueWithoutCompletedByInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => ChecklistCompleteCreateManyCompletedByInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteWhereUniqueInputSchema), import_zod.z.lazy(() => ChecklistCompleteWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteWhereUniqueInputSchema), import_zod.z.lazy(() => ChecklistCompleteWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteWhereUniqueInputSchema), import_zod.z.lazy(() => ChecklistCompleteWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteWhereUniqueInputSchema), import_zod.z.lazy(() => ChecklistCompleteWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteUpdateWithWhereUniqueWithoutCompletedByInputSchema), import_zod.z.lazy(() => ChecklistCompleteUpdateWithWhereUniqueWithoutCompletedByInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteUpdateManyWithWhereWithoutCompletedByInputSchema), import_zod.z.lazy(() => ChecklistCompleteUpdateManyWithWhereWithoutCompletedByInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteScalarWhereInputSchema), import_zod.z.lazy(() => ChecklistCompleteScalarWhereInputSchema).array()]).optional()
}).strict();
var CustomerFeedbackUpdateManyWithoutRespondedByNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackCreateWithoutRespondedByInputSchema), import_zod.z.lazy(() => CustomerFeedbackCreateWithoutRespondedByInputSchema).array(), import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateWithoutRespondedByInputSchema), import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateWithoutRespondedByInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackCreateOrConnectWithoutRespondedByInputSchema), import_zod.z.lazy(() => CustomerFeedbackCreateOrConnectWithoutRespondedByInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackUpsertWithWhereUniqueWithoutRespondedByInputSchema), import_zod.z.lazy(() => CustomerFeedbackUpsertWithWhereUniqueWithoutRespondedByInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => CustomerFeedbackCreateManyRespondedByInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema), import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema), import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema), import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema), import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackUpdateWithWhereUniqueWithoutRespondedByInputSchema), import_zod.z.lazy(() => CustomerFeedbackUpdateWithWhereUniqueWithoutRespondedByInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackUpdateManyWithWhereWithoutRespondedByInputSchema), import_zod.z.lazy(() => CustomerFeedbackUpdateManyWithWhereWithoutRespondedByInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackScalarWhereInputSchema), import_zod.z.lazy(() => CustomerFeedbackScalarWhereInputSchema).array()]).optional()
}).strict();
var RecipeVersionUpdateManyWithoutCreatedByNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionCreateWithoutCreatedByInputSchema), import_zod.z.lazy(() => RecipeVersionCreateWithoutCreatedByInputSchema).array(), import_zod.z.lazy(() => RecipeVersionUncheckedCreateWithoutCreatedByInputSchema), import_zod.z.lazy(() => RecipeVersionUncheckedCreateWithoutCreatedByInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionCreateOrConnectWithoutCreatedByInputSchema), import_zod.z.lazy(() => RecipeVersionCreateOrConnectWithoutCreatedByInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionUpsertWithWhereUniqueWithoutCreatedByInputSchema), import_zod.z.lazy(() => RecipeVersionUpsertWithWhereUniqueWithoutCreatedByInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => RecipeVersionCreateManyCreatedByInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionUpdateWithWhereUniqueWithoutCreatedByInputSchema), import_zod.z.lazy(() => RecipeVersionUpdateWithWhereUniqueWithoutCreatedByInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionUpdateManyWithWhereWithoutCreatedByInputSchema), import_zod.z.lazy(() => RecipeVersionUpdateManyWithWhereWithoutCreatedByInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionScalarWhereInputSchema), import_zod.z.lazy(() => RecipeVersionScalarWhereInputSchema).array()]).optional()
}).strict();
var RecipeVersionUpdateManyWithoutApprovedByNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionCreateWithoutApprovedByInputSchema), import_zod.z.lazy(() => RecipeVersionCreateWithoutApprovedByInputSchema).array(), import_zod.z.lazy(() => RecipeVersionUncheckedCreateWithoutApprovedByInputSchema), import_zod.z.lazy(() => RecipeVersionUncheckedCreateWithoutApprovedByInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionCreateOrConnectWithoutApprovedByInputSchema), import_zod.z.lazy(() => RecipeVersionCreateOrConnectWithoutApprovedByInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionUpsertWithWhereUniqueWithoutApprovedByInputSchema), import_zod.z.lazy(() => RecipeVersionUpsertWithWhereUniqueWithoutApprovedByInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => RecipeVersionCreateManyApprovedByInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionUpdateWithWhereUniqueWithoutApprovedByInputSchema), import_zod.z.lazy(() => RecipeVersionUpdateWithWhereUniqueWithoutApprovedByInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionUpdateManyWithWhereWithoutApprovedByInputSchema), import_zod.z.lazy(() => RecipeVersionUpdateManyWithWhereWithoutApprovedByInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionScalarWhereInputSchema), import_zod.z.lazy(() => RecipeVersionScalarWhereInputSchema).array()]).optional()
}).strict();
var ShiftUncheckedUpdateManyWithoutUserNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => ShiftCreateWithoutUserInputSchema), import_zod.z.lazy(() => ShiftCreateWithoutUserInputSchema).array(), import_zod.z.lazy(() => ShiftUncheckedCreateWithoutUserInputSchema), import_zod.z.lazy(() => ShiftUncheckedCreateWithoutUserInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => ShiftCreateOrConnectWithoutUserInputSchema), import_zod.z.lazy(() => ShiftCreateOrConnectWithoutUserInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => ShiftUpsertWithWhereUniqueWithoutUserInputSchema), import_zod.z.lazy(() => ShiftUpsertWithWhereUniqueWithoutUserInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => ShiftCreateManyUserInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => ShiftWhereUniqueInputSchema), import_zod.z.lazy(() => ShiftWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => ShiftWhereUniqueInputSchema), import_zod.z.lazy(() => ShiftWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => ShiftWhereUniqueInputSchema), import_zod.z.lazy(() => ShiftWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => ShiftWhereUniqueInputSchema), import_zod.z.lazy(() => ShiftWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => ShiftUpdateWithWhereUniqueWithoutUserInputSchema), import_zod.z.lazy(() => ShiftUpdateWithWhereUniqueWithoutUserInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => ShiftUpdateManyWithWhereWithoutUserInputSchema), import_zod.z.lazy(() => ShiftUpdateManyWithWhereWithoutUserInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => ShiftScalarWhereInputSchema), import_zod.z.lazy(() => ShiftScalarWhereInputSchema).array()]).optional()
}).strict();
var PrepItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => PrepItemCreateWithoutAssignedToInputSchema), import_zod.z.lazy(() => PrepItemCreateWithoutAssignedToInputSchema).array(), import_zod.z.lazy(() => PrepItemUncheckedCreateWithoutAssignedToInputSchema), import_zod.z.lazy(() => PrepItemUncheckedCreateWithoutAssignedToInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => PrepItemCreateOrConnectWithoutAssignedToInputSchema), import_zod.z.lazy(() => PrepItemCreateOrConnectWithoutAssignedToInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => PrepItemUpsertWithWhereUniqueWithoutAssignedToInputSchema), import_zod.z.lazy(() => PrepItemUpsertWithWhereUniqueWithoutAssignedToInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => PrepItemCreateManyAssignedToInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema), import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema), import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema), import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema), import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => PrepItemUpdateWithWhereUniqueWithoutAssignedToInputSchema), import_zod.z.lazy(() => PrepItemUpdateWithWhereUniqueWithoutAssignedToInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => PrepItemUpdateManyWithWhereWithoutAssignedToInputSchema), import_zod.z.lazy(() => PrepItemUpdateManyWithWhereWithoutAssignedToInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => PrepItemScalarWhereInputSchema), import_zod.z.lazy(() => PrepItemScalarWhereInputSchema).array()]).optional()
}).strict();
var InventoryItemUncheckedUpdateManyWithoutLastUpdatedByNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => InventoryItemCreateWithoutLastUpdatedByInputSchema), import_zod.z.lazy(() => InventoryItemCreateWithoutLastUpdatedByInputSchema).array(), import_zod.z.lazy(() => InventoryItemUncheckedCreateWithoutLastUpdatedByInputSchema), import_zod.z.lazy(() => InventoryItemUncheckedCreateWithoutLastUpdatedByInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => InventoryItemCreateOrConnectWithoutLastUpdatedByInputSchema), import_zod.z.lazy(() => InventoryItemCreateOrConnectWithoutLastUpdatedByInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => InventoryItemUpsertWithWhereUniqueWithoutLastUpdatedByInputSchema), import_zod.z.lazy(() => InventoryItemUpsertWithWhereUniqueWithoutLastUpdatedByInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => InventoryItemCreateManyLastUpdatedByInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema), import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema), import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema), import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema), import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => InventoryItemUpdateWithWhereUniqueWithoutLastUpdatedByInputSchema), import_zod.z.lazy(() => InventoryItemUpdateWithWhereUniqueWithoutLastUpdatedByInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => InventoryItemUpdateManyWithWhereWithoutLastUpdatedByInputSchema), import_zod.z.lazy(() => InventoryItemUpdateManyWithWhereWithoutLastUpdatedByInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => InventoryItemScalarWhereInputSchema), import_zod.z.lazy(() => InventoryItemScalarWhereInputSchema).array()]).optional()
}).strict();
var SessionUncheckedUpdateManyWithoutUserNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => SessionCreateWithoutUserInputSchema), import_zod.z.lazy(() => SessionCreateWithoutUserInputSchema).array(), import_zod.z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema), import_zod.z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema), import_zod.z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema), import_zod.z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => SessionCreateManyUserInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => SessionWhereUniqueInputSchema), import_zod.z.lazy(() => SessionWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => SessionWhereUniqueInputSchema), import_zod.z.lazy(() => SessionWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => SessionWhereUniqueInputSchema), import_zod.z.lazy(() => SessionWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => SessionWhereUniqueInputSchema), import_zod.z.lazy(() => SessionWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema), import_zod.z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema), import_zod.z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => SessionScalarWhereInputSchema), import_zod.z.lazy(() => SessionScalarWhereInputSchema).array()]).optional()
}).strict();
var PasswordResetUncheckedUpdateManyWithoutUserNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => PasswordResetCreateWithoutUserInputSchema), import_zod.z.lazy(() => PasswordResetCreateWithoutUserInputSchema).array(), import_zod.z.lazy(() => PasswordResetUncheckedCreateWithoutUserInputSchema), import_zod.z.lazy(() => PasswordResetUncheckedCreateWithoutUserInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => PasswordResetCreateOrConnectWithoutUserInputSchema), import_zod.z.lazy(() => PasswordResetCreateOrConnectWithoutUserInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => PasswordResetUpsertWithWhereUniqueWithoutUserInputSchema), import_zod.z.lazy(() => PasswordResetUpsertWithWhereUniqueWithoutUserInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => PasswordResetCreateManyUserInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => PasswordResetWhereUniqueInputSchema), import_zod.z.lazy(() => PasswordResetWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => PasswordResetWhereUniqueInputSchema), import_zod.z.lazy(() => PasswordResetWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => PasswordResetWhereUniqueInputSchema), import_zod.z.lazy(() => PasswordResetWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => PasswordResetWhereUniqueInputSchema), import_zod.z.lazy(() => PasswordResetWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => PasswordResetUpdateWithWhereUniqueWithoutUserInputSchema), import_zod.z.lazy(() => PasswordResetUpdateWithWhereUniqueWithoutUserInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => PasswordResetUpdateManyWithWhereWithoutUserInputSchema), import_zod.z.lazy(() => PasswordResetUpdateManyWithWhereWithoutUserInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => PasswordResetScalarWhereInputSchema), import_zod.z.lazy(() => PasswordResetScalarWhereInputSchema).array()]).optional()
}).strict();
var LeftoverItemUncheckedUpdateManyWithoutRecordedByNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemCreateWithoutRecordedByInputSchema), import_zod.z.lazy(() => LeftoverItemCreateWithoutRecordedByInputSchema).array(), import_zod.z.lazy(() => LeftoverItemUncheckedCreateWithoutRecordedByInputSchema), import_zod.z.lazy(() => LeftoverItemUncheckedCreateWithoutRecordedByInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemCreateOrConnectWithoutRecordedByInputSchema), import_zod.z.lazy(() => LeftoverItemCreateOrConnectWithoutRecordedByInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemUpsertWithWhereUniqueWithoutRecordedByInputSchema), import_zod.z.lazy(() => LeftoverItemUpsertWithWhereUniqueWithoutRecordedByInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => LeftoverItemCreateManyRecordedByInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema), import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema), import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema), import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema), import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemUpdateWithWhereUniqueWithoutRecordedByInputSchema), import_zod.z.lazy(() => LeftoverItemUpdateWithWhereUniqueWithoutRecordedByInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemUpdateManyWithWhereWithoutRecordedByInputSchema), import_zod.z.lazy(() => LeftoverItemUpdateManyWithWhereWithoutRecordedByInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemScalarWhereInputSchema), import_zod.z.lazy(() => LeftoverItemScalarWhereInputSchema).array()]).optional()
}).strict();
var WasteRecordUncheckedUpdateManyWithoutRecordedByNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => WasteRecordCreateWithoutRecordedByInputSchema), import_zod.z.lazy(() => WasteRecordCreateWithoutRecordedByInputSchema).array(), import_zod.z.lazy(() => WasteRecordUncheckedCreateWithoutRecordedByInputSchema), import_zod.z.lazy(() => WasteRecordUncheckedCreateWithoutRecordedByInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => WasteRecordCreateOrConnectWithoutRecordedByInputSchema), import_zod.z.lazy(() => WasteRecordCreateOrConnectWithoutRecordedByInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => WasteRecordUpsertWithWhereUniqueWithoutRecordedByInputSchema), import_zod.z.lazy(() => WasteRecordUpsertWithWhereUniqueWithoutRecordedByInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => WasteRecordCreateManyRecordedByInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema), import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema), import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema), import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema), import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => WasteRecordUpdateWithWhereUniqueWithoutRecordedByInputSchema), import_zod.z.lazy(() => WasteRecordUpdateWithWhereUniqueWithoutRecordedByInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => WasteRecordUpdateManyWithWhereWithoutRecordedByInputSchema), import_zod.z.lazy(() => WasteRecordUpdateManyWithWhereWithoutRecordedByInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => WasteRecordScalarWhereInputSchema), import_zod.z.lazy(() => WasteRecordScalarWhereInputSchema).array()]).optional()
}).strict();
var ProductionPlanUncheckedUpdateManyWithoutCreatedByNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanCreateWithoutCreatedByInputSchema), import_zod.z.lazy(() => ProductionPlanCreateWithoutCreatedByInputSchema).array(), import_zod.z.lazy(() => ProductionPlanUncheckedCreateWithoutCreatedByInputSchema), import_zod.z.lazy(() => ProductionPlanUncheckedCreateWithoutCreatedByInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanCreateOrConnectWithoutCreatedByInputSchema), import_zod.z.lazy(() => ProductionPlanCreateOrConnectWithoutCreatedByInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanUpsertWithWhereUniqueWithoutCreatedByInputSchema), import_zod.z.lazy(() => ProductionPlanUpsertWithWhereUniqueWithoutCreatedByInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => ProductionPlanCreateManyCreatedByInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanWhereUniqueInputSchema), import_zod.z.lazy(() => ProductionPlanWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanWhereUniqueInputSchema), import_zod.z.lazy(() => ProductionPlanWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanWhereUniqueInputSchema), import_zod.z.lazy(() => ProductionPlanWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanWhereUniqueInputSchema), import_zod.z.lazy(() => ProductionPlanWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanUpdateWithWhereUniqueWithoutCreatedByInputSchema), import_zod.z.lazy(() => ProductionPlanUpdateWithWhereUniqueWithoutCreatedByInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanUpdateManyWithWhereWithoutCreatedByInputSchema), import_zod.z.lazy(() => ProductionPlanUpdateManyWithWhereWithoutCreatedByInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanScalarWhereInputSchema), import_zod.z.lazy(() => ProductionPlanScalarWhereInputSchema).array()]).optional()
}).strict();
var ProductionPlanItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemCreateWithoutAssignedToInputSchema), import_zod.z.lazy(() => ProductionPlanItemCreateWithoutAssignedToInputSchema).array(), import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateWithoutAssignedToInputSchema), import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateWithoutAssignedToInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemCreateOrConnectWithoutAssignedToInputSchema), import_zod.z.lazy(() => ProductionPlanItemCreateOrConnectWithoutAssignedToInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemUpsertWithWhereUniqueWithoutAssignedToInputSchema), import_zod.z.lazy(() => ProductionPlanItemUpsertWithWhereUniqueWithoutAssignedToInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => ProductionPlanItemCreateManyAssignedToInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema), import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema), import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema), import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema), import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemUpdateWithWhereUniqueWithoutAssignedToInputSchema), import_zod.z.lazy(() => ProductionPlanItemUpdateWithWhereUniqueWithoutAssignedToInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemUpdateManyWithWhereWithoutAssignedToInputSchema), import_zod.z.lazy(() => ProductionPlanItemUpdateManyWithWhereWithoutAssignedToInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemScalarWhereInputSchema), import_zod.z.lazy(() => ProductionPlanItemScalarWhereInputSchema).array()]).optional()
}).strict();
var AvailabilityUncheckedUpdateManyWithoutUserNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => AvailabilityCreateWithoutUserInputSchema), import_zod.z.lazy(() => AvailabilityCreateWithoutUserInputSchema).array(), import_zod.z.lazy(() => AvailabilityUncheckedCreateWithoutUserInputSchema), import_zod.z.lazy(() => AvailabilityUncheckedCreateWithoutUserInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => AvailabilityCreateOrConnectWithoutUserInputSchema), import_zod.z.lazy(() => AvailabilityCreateOrConnectWithoutUserInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => AvailabilityUpsertWithWhereUniqueWithoutUserInputSchema), import_zod.z.lazy(() => AvailabilityUpsertWithWhereUniqueWithoutUserInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => AvailabilityCreateManyUserInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => AvailabilityWhereUniqueInputSchema), import_zod.z.lazy(() => AvailabilityWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => AvailabilityWhereUniqueInputSchema), import_zod.z.lazy(() => AvailabilityWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => AvailabilityWhereUniqueInputSchema), import_zod.z.lazy(() => AvailabilityWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => AvailabilityWhereUniqueInputSchema), import_zod.z.lazy(() => AvailabilityWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => AvailabilityUpdateWithWhereUniqueWithoutUserInputSchema), import_zod.z.lazy(() => AvailabilityUpdateWithWhereUniqueWithoutUserInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => AvailabilityUpdateManyWithWhereWithoutUserInputSchema), import_zod.z.lazy(() => AvailabilityUpdateManyWithWhereWithoutUserInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => AvailabilityScalarWhereInputSchema), import_zod.z.lazy(() => AvailabilityScalarWhereInputSchema).array()]).optional()
}).strict();
var SchedulingConstraintUncheckedUpdateManyWithoutUserNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => SchedulingConstraintCreateWithoutUserInputSchema), import_zod.z.lazy(() => SchedulingConstraintCreateWithoutUserInputSchema).array(), import_zod.z.lazy(() => SchedulingConstraintUncheckedCreateWithoutUserInputSchema), import_zod.z.lazy(() => SchedulingConstraintUncheckedCreateWithoutUserInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => SchedulingConstraintCreateOrConnectWithoutUserInputSchema), import_zod.z.lazy(() => SchedulingConstraintCreateOrConnectWithoutUserInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => SchedulingConstraintUpsertWithWhereUniqueWithoutUserInputSchema), import_zod.z.lazy(() => SchedulingConstraintUpsertWithWhereUniqueWithoutUserInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => SchedulingConstraintCreateManyUserInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => SchedulingConstraintWhereUniqueInputSchema), import_zod.z.lazy(() => SchedulingConstraintWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => SchedulingConstraintWhereUniqueInputSchema), import_zod.z.lazy(() => SchedulingConstraintWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => SchedulingConstraintWhereUniqueInputSchema), import_zod.z.lazy(() => SchedulingConstraintWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => SchedulingConstraintWhereUniqueInputSchema), import_zod.z.lazy(() => SchedulingConstraintWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => SchedulingConstraintUpdateWithWhereUniqueWithoutUserInputSchema), import_zod.z.lazy(() => SchedulingConstraintUpdateWithWhereUniqueWithoutUserInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => SchedulingConstraintUpdateManyWithWhereWithoutUserInputSchema), import_zod.z.lazy(() => SchedulingConstraintUpdateManyWithWhereWithoutUserInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => SchedulingConstraintScalarWhereInputSchema), import_zod.z.lazy(() => SchedulingConstraintScalarWhereInputSchema).array()]).optional()
}).strict();
var InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalCreateWithoutCreatedByInputSchema), import_zod.z.lazy(() => InventoryWithdrawalCreateWithoutCreatedByInputSchema).array(), import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateWithoutCreatedByInputSchema), import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateWithoutCreatedByInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalCreateOrConnectWithoutCreatedByInputSchema), import_zod.z.lazy(() => InventoryWithdrawalCreateOrConnectWithoutCreatedByInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalUpsertWithWhereUniqueWithoutCreatedByInputSchema), import_zod.z.lazy(() => InventoryWithdrawalUpsertWithWhereUniqueWithoutCreatedByInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => InventoryWithdrawalCreateManyCreatedByInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema), import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema), import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema), import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema), import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalUpdateWithWhereUniqueWithoutCreatedByInputSchema), import_zod.z.lazy(() => InventoryWithdrawalUpdateWithWhereUniqueWithoutCreatedByInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalUpdateManyWithWhereWithoutCreatedByInputSchema), import_zod.z.lazy(() => InventoryWithdrawalUpdateManyWithWhereWithoutCreatedByInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalScalarWhereInputSchema), import_zod.z.lazy(() => InventoryWithdrawalScalarWhereInputSchema).array()]).optional()
}).strict();
var ChecklistCompleteUncheckedUpdateManyWithoutCompletedByNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteCreateWithoutCompletedByInputSchema), import_zod.z.lazy(() => ChecklistCompleteCreateWithoutCompletedByInputSchema).array(), import_zod.z.lazy(() => ChecklistCompleteUncheckedCreateWithoutCompletedByInputSchema), import_zod.z.lazy(() => ChecklistCompleteUncheckedCreateWithoutCompletedByInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteCreateOrConnectWithoutCompletedByInputSchema), import_zod.z.lazy(() => ChecklistCompleteCreateOrConnectWithoutCompletedByInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteUpsertWithWhereUniqueWithoutCompletedByInputSchema), import_zod.z.lazy(() => ChecklistCompleteUpsertWithWhereUniqueWithoutCompletedByInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => ChecklistCompleteCreateManyCompletedByInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteWhereUniqueInputSchema), import_zod.z.lazy(() => ChecklistCompleteWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteWhereUniqueInputSchema), import_zod.z.lazy(() => ChecklistCompleteWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteWhereUniqueInputSchema), import_zod.z.lazy(() => ChecklistCompleteWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteWhereUniqueInputSchema), import_zod.z.lazy(() => ChecklistCompleteWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteUpdateWithWhereUniqueWithoutCompletedByInputSchema), import_zod.z.lazy(() => ChecklistCompleteUpdateWithWhereUniqueWithoutCompletedByInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteUpdateManyWithWhereWithoutCompletedByInputSchema), import_zod.z.lazy(() => ChecklistCompleteUpdateManyWithWhereWithoutCompletedByInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteScalarWhereInputSchema), import_zod.z.lazy(() => ChecklistCompleteScalarWhereInputSchema).array()]).optional()
}).strict();
var CustomerFeedbackUncheckedUpdateManyWithoutRespondedByNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackCreateWithoutRespondedByInputSchema), import_zod.z.lazy(() => CustomerFeedbackCreateWithoutRespondedByInputSchema).array(), import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateWithoutRespondedByInputSchema), import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateWithoutRespondedByInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackCreateOrConnectWithoutRespondedByInputSchema), import_zod.z.lazy(() => CustomerFeedbackCreateOrConnectWithoutRespondedByInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackUpsertWithWhereUniqueWithoutRespondedByInputSchema), import_zod.z.lazy(() => CustomerFeedbackUpsertWithWhereUniqueWithoutRespondedByInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => CustomerFeedbackCreateManyRespondedByInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema), import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema), import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema), import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema), import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackUpdateWithWhereUniqueWithoutRespondedByInputSchema), import_zod.z.lazy(() => CustomerFeedbackUpdateWithWhereUniqueWithoutRespondedByInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackUpdateManyWithWhereWithoutRespondedByInputSchema), import_zod.z.lazy(() => CustomerFeedbackUpdateManyWithWhereWithoutRespondedByInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackScalarWhereInputSchema), import_zod.z.lazy(() => CustomerFeedbackScalarWhereInputSchema).array()]).optional()
}).strict();
var RecipeVersionUncheckedUpdateManyWithoutCreatedByNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionCreateWithoutCreatedByInputSchema), import_zod.z.lazy(() => RecipeVersionCreateWithoutCreatedByInputSchema).array(), import_zod.z.lazy(() => RecipeVersionUncheckedCreateWithoutCreatedByInputSchema), import_zod.z.lazy(() => RecipeVersionUncheckedCreateWithoutCreatedByInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionCreateOrConnectWithoutCreatedByInputSchema), import_zod.z.lazy(() => RecipeVersionCreateOrConnectWithoutCreatedByInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionUpsertWithWhereUniqueWithoutCreatedByInputSchema), import_zod.z.lazy(() => RecipeVersionUpsertWithWhereUniqueWithoutCreatedByInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => RecipeVersionCreateManyCreatedByInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionUpdateWithWhereUniqueWithoutCreatedByInputSchema), import_zod.z.lazy(() => RecipeVersionUpdateWithWhereUniqueWithoutCreatedByInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionUpdateManyWithWhereWithoutCreatedByInputSchema), import_zod.z.lazy(() => RecipeVersionUpdateManyWithWhereWithoutCreatedByInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionScalarWhereInputSchema), import_zod.z.lazy(() => RecipeVersionScalarWhereInputSchema).array()]).optional()
}).strict();
var RecipeVersionUncheckedUpdateManyWithoutApprovedByNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionCreateWithoutApprovedByInputSchema), import_zod.z.lazy(() => RecipeVersionCreateWithoutApprovedByInputSchema).array(), import_zod.z.lazy(() => RecipeVersionUncheckedCreateWithoutApprovedByInputSchema), import_zod.z.lazy(() => RecipeVersionUncheckedCreateWithoutApprovedByInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionCreateOrConnectWithoutApprovedByInputSchema), import_zod.z.lazy(() => RecipeVersionCreateOrConnectWithoutApprovedByInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionUpsertWithWhereUniqueWithoutApprovedByInputSchema), import_zod.z.lazy(() => RecipeVersionUpsertWithWhereUniqueWithoutApprovedByInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => RecipeVersionCreateManyApprovedByInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionUpdateWithWhereUniqueWithoutApprovedByInputSchema), import_zod.z.lazy(() => RecipeVersionUpdateWithWhereUniqueWithoutApprovedByInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionUpdateManyWithWhereWithoutApprovedByInputSchema), import_zod.z.lazy(() => RecipeVersionUpdateManyWithWhereWithoutApprovedByInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionScalarWhereInputSchema), import_zod.z.lazy(() => RecipeVersionScalarWhereInputSchema).array()]).optional()
}).strict();
var UserCreateNestedOneWithoutSessionsInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutSessionsInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutSessionsInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => UserCreateOrConnectWithoutSessionsInputSchema).optional(),
  connect: import_zod.z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();
var UserUpdateOneRequiredWithoutSessionsNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutSessionsInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutSessionsInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => UserCreateOrConnectWithoutSessionsInputSchema).optional(),
  upsert: import_zod.z.lazy(() => UserUpsertWithoutSessionsInputSchema).optional(),
  connect: import_zod.z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => UserUpdateToOneWithWhereWithoutSessionsInputSchema), import_zod.z.lazy(() => UserUpdateWithoutSessionsInputSchema), import_zod.z.lazy(() => UserUncheckedUpdateWithoutSessionsInputSchema)]).optional()
}).strict();
var RecipeCreateNestedManyWithoutCookBookInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutCookBookInputSchema), import_zod.z.lazy(() => RecipeCreateWithoutCookBookInputSchema).array(), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutCookBookInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutCookBookInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateOrConnectWithoutCookBookInputSchema), import_zod.z.lazy(() => RecipeCreateOrConnectWithoutCookBookInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => RecipeCreateManyCookBookInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional()
}).strict();
var RestaurantCreateNestedOneWithoutCookbooksInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RestaurantCreateWithoutCookbooksInputSchema), import_zod.z.lazy(() => RestaurantUncheckedCreateWithoutCookbooksInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => RestaurantCreateOrConnectWithoutCookbooksInputSchema).optional(),
  connect: import_zod.z.lazy(() => RestaurantWhereUniqueInputSchema).optional()
}).strict();
var RecipeUncheckedCreateNestedManyWithoutCookBookInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutCookBookInputSchema), import_zod.z.lazy(() => RecipeCreateWithoutCookBookInputSchema).array(), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutCookBookInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutCookBookInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateOrConnectWithoutCookBookInputSchema), import_zod.z.lazy(() => RecipeCreateOrConnectWithoutCookBookInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => RecipeCreateManyCookBookInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional()
}).strict();
var RecipeUpdateManyWithoutCookBookNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutCookBookInputSchema), import_zod.z.lazy(() => RecipeCreateWithoutCookBookInputSchema).array(), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutCookBookInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutCookBookInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateOrConnectWithoutCookBookInputSchema), import_zod.z.lazy(() => RecipeCreateOrConnectWithoutCookBookInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => RecipeUpsertWithWhereUniqueWithoutCookBookInputSchema), import_zod.z.lazy(() => RecipeUpsertWithWhereUniqueWithoutCookBookInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => RecipeCreateManyCookBookInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => RecipeWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => RecipeWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => RecipeWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateWithWhereUniqueWithoutCookBookInputSchema), import_zod.z.lazy(() => RecipeUpdateWithWhereUniqueWithoutCookBookInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateManyWithWhereWithoutCookBookInputSchema), import_zod.z.lazy(() => RecipeUpdateManyWithWhereWithoutCookBookInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => RecipeScalarWhereInputSchema), import_zod.z.lazy(() => RecipeScalarWhereInputSchema).array()]).optional()
}).strict();
var RestaurantUpdateOneWithoutCookbooksNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RestaurantCreateWithoutCookbooksInputSchema), import_zod.z.lazy(() => RestaurantUncheckedCreateWithoutCookbooksInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => RestaurantCreateOrConnectWithoutCookbooksInputSchema).optional(),
  upsert: import_zod.z.lazy(() => RestaurantUpsertWithoutCookbooksInputSchema).optional(),
  disconnect: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RestaurantWhereInputSchema)]).optional(),
  delete: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RestaurantWhereInputSchema)]).optional(),
  connect: import_zod.z.lazy(() => RestaurantWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => RestaurantUpdateToOneWithWhereWithoutCookbooksInputSchema), import_zod.z.lazy(() => RestaurantUpdateWithoutCookbooksInputSchema), import_zod.z.lazy(() => RestaurantUncheckedUpdateWithoutCookbooksInputSchema)]).optional()
}).strict();
var RecipeUncheckedUpdateManyWithoutCookBookNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutCookBookInputSchema), import_zod.z.lazy(() => RecipeCreateWithoutCookBookInputSchema).array(), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutCookBookInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutCookBookInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateOrConnectWithoutCookBookInputSchema), import_zod.z.lazy(() => RecipeCreateOrConnectWithoutCookBookInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => RecipeUpsertWithWhereUniqueWithoutCookBookInputSchema), import_zod.z.lazy(() => RecipeUpsertWithWhereUniqueWithoutCookBookInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => RecipeCreateManyCookBookInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => RecipeWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => RecipeWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => RecipeWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateWithWhereUniqueWithoutCookBookInputSchema), import_zod.z.lazy(() => RecipeUpdateWithWhereUniqueWithoutCookBookInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateManyWithWhereWithoutCookBookInputSchema), import_zod.z.lazy(() => RecipeUpdateManyWithWhereWithoutCookBookInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => RecipeScalarWhereInputSchema), import_zod.z.lazy(() => RecipeScalarWhereInputSchema).array()]).optional()
}).strict();
var RecipeCreateimageUrlInputSchema = import_zod.z.object({
  set: import_zod.z.string().array()
}).strict();
var RestaurantCreateNestedOneWithoutRecipesInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RestaurantCreateWithoutRecipesInputSchema), import_zod.z.lazy(() => RestaurantUncheckedCreateWithoutRecipesInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => RestaurantCreateOrConnectWithoutRecipesInputSchema).optional(),
  connect: import_zod.z.lazy(() => RestaurantWhereUniqueInputSchema).optional()
}).strict();
var CookBookCreateNestedOneWithoutRecipesInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => CookBookCreateWithoutRecipesInputSchema), import_zod.z.lazy(() => CookBookUncheckedCreateWithoutRecipesInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => CookBookCreateOrConnectWithoutRecipesInputSchema).optional(),
  connect: import_zod.z.lazy(() => CookBookWhereUniqueInputSchema).optional()
}).strict();
var RecipeIngredientCreateNestedManyWithoutRecipeInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeIngredientCreateWithoutRecipeInputSchema).array(), import_zod.z.lazy(() => RecipeIngredientUncheckedCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeIngredientUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientCreateOrConnectWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeIngredientCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => RecipeIngredientCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema).array()]).optional()
}).strict();
var RecipeInstructionCreateNestedManyWithoutRecipeInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeInstructionCreateWithoutRecipeInputSchema).array(), import_zod.z.lazy(() => RecipeInstructionUncheckedCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeInstructionUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionCreateOrConnectWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeInstructionCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => RecipeInstructionCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeInstructionWhereUniqueInputSchema).array()]).optional()
}).strict();
var MenuItemCreateNestedManyWithoutRecipesInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateWithoutRecipesInputSchema), import_zod.z.lazy(() => MenuItemCreateWithoutRecipesInputSchema).array(), import_zod.z.lazy(() => MenuItemUncheckedCreateWithoutRecipesInputSchema), import_zod.z.lazy(() => MenuItemUncheckedCreateWithoutRecipesInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateOrConnectWithoutRecipesInputSchema), import_zod.z.lazy(() => MenuItemCreateOrConnectWithoutRecipesInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema), import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var FoodCostHistoryCreateNestedManyWithoutRecipeInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => FoodCostHistoryCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => FoodCostHistoryCreateWithoutRecipeInputSchema).array(), import_zod.z.lazy(() => FoodCostHistoryUncheckedCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => FoodCostHistoryUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => FoodCostHistoryCreateOrConnectWithoutRecipeInputSchema), import_zod.z.lazy(() => FoodCostHistoryCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => FoodCostHistoryCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => FoodCostHistoryWhereUniqueInputSchema), import_zod.z.lazy(() => FoodCostHistoryWhereUniqueInputSchema).array()]).optional()
}).strict();
var PrepHistoryCreateNestedManyWithoutRecipeInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => PrepHistoryCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => PrepHistoryCreateWithoutRecipeInputSchema).array(), import_zod.z.lazy(() => PrepHistoryUncheckedCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => PrepHistoryUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => PrepHistoryCreateOrConnectWithoutRecipeInputSchema), import_zod.z.lazy(() => PrepHistoryCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => PrepHistoryCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => PrepHistoryWhereUniqueInputSchema), import_zod.z.lazy(() => PrepHistoryWhereUniqueInputSchema).array()]).optional()
}).strict();
var PrepBoardCreateNestedManyWithoutRecipesInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => PrepBoardCreateWithoutRecipesInputSchema), import_zod.z.lazy(() => PrepBoardCreateWithoutRecipesInputSchema).array(), import_zod.z.lazy(() => PrepBoardUncheckedCreateWithoutRecipesInputSchema), import_zod.z.lazy(() => PrepBoardUncheckedCreateWithoutRecipesInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => PrepBoardCreateOrConnectWithoutRecipesInputSchema), import_zod.z.lazy(() => PrepBoardCreateOrConnectWithoutRecipesInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => PrepBoardWhereUniqueInputSchema), import_zod.z.lazy(() => PrepBoardWhereUniqueInputSchema).array()]).optional()
}).strict();
var PrepItemCreateNestedManyWithoutRecipeInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => PrepItemCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => PrepItemCreateWithoutRecipeInputSchema).array(), import_zod.z.lazy(() => PrepItemUncheckedCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => PrepItemUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => PrepItemCreateOrConnectWithoutRecipeInputSchema), import_zod.z.lazy(() => PrepItemCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => PrepItemCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema), import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var MenuItemRecipeCreateNestedManyWithoutRecipeInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => MenuItemRecipeCreateWithoutRecipeInputSchema).array(), import_zod.z.lazy(() => MenuItemRecipeUncheckedCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => MenuItemRecipeUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeCreateOrConnectWithoutRecipeInputSchema), import_zod.z.lazy(() => MenuItemRecipeCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => MenuItemRecipeCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeWhereUniqueInputSchema), import_zod.z.lazy(() => MenuItemRecipeWhereUniqueInputSchema).array()]).optional()
}).strict();
var ProductionPlanItemCreateNestedManyWithoutRecipeInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => ProductionPlanItemCreateWithoutRecipeInputSchema).array(), import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemCreateOrConnectWithoutRecipeInputSchema), import_zod.z.lazy(() => ProductionPlanItemCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => ProductionPlanItemCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema), import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var InventoryWithdrawalCreateNestedManyWithoutRecipeInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => InventoryWithdrawalCreateWithoutRecipeInputSchema).array(), import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalCreateOrConnectWithoutRecipeInputSchema), import_zod.z.lazy(() => InventoryWithdrawalCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => InventoryWithdrawalCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema), import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array()]).optional()
}).strict();
var RecipeTagCreateNestedManyWithoutRecipesInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeTagCreateWithoutRecipesInputSchema), import_zod.z.lazy(() => RecipeTagCreateWithoutRecipesInputSchema).array(), import_zod.z.lazy(() => RecipeTagUncheckedCreateWithoutRecipesInputSchema), import_zod.z.lazy(() => RecipeTagUncheckedCreateWithoutRecipesInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeTagCreateOrConnectWithoutRecipesInputSchema), import_zod.z.lazy(() => RecipeTagCreateOrConnectWithoutRecipesInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeTagWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeTagWhereUniqueInputSchema).array()]).optional()
}).strict();
var RecipeVersionCreateNestedManyWithoutRecipeInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeVersionCreateWithoutRecipeInputSchema).array(), import_zod.z.lazy(() => RecipeVersionUncheckedCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeVersionUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionCreateOrConnectWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeVersionCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => RecipeVersionCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema).array()]).optional()
}).strict();
var RecipeEquipmentCreateNestedManyWithoutRecipeInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeEquipmentCreateWithoutRecipeInputSchema).array(), import_zod.z.lazy(() => RecipeEquipmentUncheckedCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeEquipmentUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentCreateOrConnectWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeEquipmentCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => RecipeEquipmentCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array()]).optional()
}).strict();
var DietaryRestrictionCreateNestedManyWithoutRecipesInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionCreateWithoutRecipesInputSchema), import_zod.z.lazy(() => DietaryRestrictionCreateWithoutRecipesInputSchema).array(), import_zod.z.lazy(() => DietaryRestrictionUncheckedCreateWithoutRecipesInputSchema), import_zod.z.lazy(() => DietaryRestrictionUncheckedCreateWithoutRecipesInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionCreateOrConnectWithoutRecipesInputSchema), import_zod.z.lazy(() => DietaryRestrictionCreateOrConnectWithoutRecipesInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionWhereUniqueInputSchema), import_zod.z.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array()]).optional()
}).strict();
var RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeIngredientCreateWithoutRecipeInputSchema).array(), import_zod.z.lazy(() => RecipeIngredientUncheckedCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeIngredientUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientCreateOrConnectWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeIngredientCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => RecipeIngredientCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema).array()]).optional()
}).strict();
var RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeInstructionCreateWithoutRecipeInputSchema).array(), import_zod.z.lazy(() => RecipeInstructionUncheckedCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeInstructionUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionCreateOrConnectWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeInstructionCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => RecipeInstructionCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeInstructionWhereUniqueInputSchema).array()]).optional()
}).strict();
var MenuItemUncheckedCreateNestedManyWithoutRecipesInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateWithoutRecipesInputSchema), import_zod.z.lazy(() => MenuItemCreateWithoutRecipesInputSchema).array(), import_zod.z.lazy(() => MenuItemUncheckedCreateWithoutRecipesInputSchema), import_zod.z.lazy(() => MenuItemUncheckedCreateWithoutRecipesInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateOrConnectWithoutRecipesInputSchema), import_zod.z.lazy(() => MenuItemCreateOrConnectWithoutRecipesInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema), import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var FoodCostHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => FoodCostHistoryCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => FoodCostHistoryCreateWithoutRecipeInputSchema).array(), import_zod.z.lazy(() => FoodCostHistoryUncheckedCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => FoodCostHistoryUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => FoodCostHistoryCreateOrConnectWithoutRecipeInputSchema), import_zod.z.lazy(() => FoodCostHistoryCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => FoodCostHistoryCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => FoodCostHistoryWhereUniqueInputSchema), import_zod.z.lazy(() => FoodCostHistoryWhereUniqueInputSchema).array()]).optional()
}).strict();
var PrepHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => PrepHistoryCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => PrepHistoryCreateWithoutRecipeInputSchema).array(), import_zod.z.lazy(() => PrepHistoryUncheckedCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => PrepHistoryUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => PrepHistoryCreateOrConnectWithoutRecipeInputSchema), import_zod.z.lazy(() => PrepHistoryCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => PrepHistoryCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => PrepHistoryWhereUniqueInputSchema), import_zod.z.lazy(() => PrepHistoryWhereUniqueInputSchema).array()]).optional()
}).strict();
var PrepBoardUncheckedCreateNestedManyWithoutRecipesInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => PrepBoardCreateWithoutRecipesInputSchema), import_zod.z.lazy(() => PrepBoardCreateWithoutRecipesInputSchema).array(), import_zod.z.lazy(() => PrepBoardUncheckedCreateWithoutRecipesInputSchema), import_zod.z.lazy(() => PrepBoardUncheckedCreateWithoutRecipesInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => PrepBoardCreateOrConnectWithoutRecipesInputSchema), import_zod.z.lazy(() => PrepBoardCreateOrConnectWithoutRecipesInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => PrepBoardWhereUniqueInputSchema), import_zod.z.lazy(() => PrepBoardWhereUniqueInputSchema).array()]).optional()
}).strict();
var PrepItemUncheckedCreateNestedManyWithoutRecipeInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => PrepItemCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => PrepItemCreateWithoutRecipeInputSchema).array(), import_zod.z.lazy(() => PrepItemUncheckedCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => PrepItemUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => PrepItemCreateOrConnectWithoutRecipeInputSchema), import_zod.z.lazy(() => PrepItemCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => PrepItemCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema), import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var MenuItemRecipeUncheckedCreateNestedManyWithoutRecipeInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => MenuItemRecipeCreateWithoutRecipeInputSchema).array(), import_zod.z.lazy(() => MenuItemRecipeUncheckedCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => MenuItemRecipeUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeCreateOrConnectWithoutRecipeInputSchema), import_zod.z.lazy(() => MenuItemRecipeCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => MenuItemRecipeCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeWhereUniqueInputSchema), import_zod.z.lazy(() => MenuItemRecipeWhereUniqueInputSchema).array()]).optional()
}).strict();
var ProductionPlanItemUncheckedCreateNestedManyWithoutRecipeInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => ProductionPlanItemCreateWithoutRecipeInputSchema).array(), import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemCreateOrConnectWithoutRecipeInputSchema), import_zod.z.lazy(() => ProductionPlanItemCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => ProductionPlanItemCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema), import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var InventoryWithdrawalUncheckedCreateNestedManyWithoutRecipeInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => InventoryWithdrawalCreateWithoutRecipeInputSchema).array(), import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalCreateOrConnectWithoutRecipeInputSchema), import_zod.z.lazy(() => InventoryWithdrawalCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => InventoryWithdrawalCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema), import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array()]).optional()
}).strict();
var RecipeTagUncheckedCreateNestedManyWithoutRecipesInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeTagCreateWithoutRecipesInputSchema), import_zod.z.lazy(() => RecipeTagCreateWithoutRecipesInputSchema).array(), import_zod.z.lazy(() => RecipeTagUncheckedCreateWithoutRecipesInputSchema), import_zod.z.lazy(() => RecipeTagUncheckedCreateWithoutRecipesInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeTagCreateOrConnectWithoutRecipesInputSchema), import_zod.z.lazy(() => RecipeTagCreateOrConnectWithoutRecipesInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeTagWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeTagWhereUniqueInputSchema).array()]).optional()
}).strict();
var RecipeVersionUncheckedCreateNestedManyWithoutRecipeInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeVersionCreateWithoutRecipeInputSchema).array(), import_zod.z.lazy(() => RecipeVersionUncheckedCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeVersionUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionCreateOrConnectWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeVersionCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => RecipeVersionCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema).array()]).optional()
}).strict();
var RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeEquipmentCreateWithoutRecipeInputSchema).array(), import_zod.z.lazy(() => RecipeEquipmentUncheckedCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeEquipmentUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentCreateOrConnectWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeEquipmentCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => RecipeEquipmentCreateManyRecipeInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array()]).optional()
}).strict();
var DietaryRestrictionUncheckedCreateNestedManyWithoutRecipesInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionCreateWithoutRecipesInputSchema), import_zod.z.lazy(() => DietaryRestrictionCreateWithoutRecipesInputSchema).array(), import_zod.z.lazy(() => DietaryRestrictionUncheckedCreateWithoutRecipesInputSchema), import_zod.z.lazy(() => DietaryRestrictionUncheckedCreateWithoutRecipesInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionCreateOrConnectWithoutRecipesInputSchema), import_zod.z.lazy(() => DietaryRestrictionCreateOrConnectWithoutRecipesInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionWhereUniqueInputSchema), import_zod.z.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array()]).optional()
}).strict();
var RecipeUpdateimageUrlInputSchema = import_zod.z.object({
  set: import_zod.z.string().array().optional(),
  push: import_zod.z.union([import_zod.z.string(), import_zod.z.string().array()]).optional()
}).strict();
var RestaurantUpdateOneRequiredWithoutRecipesNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RestaurantCreateWithoutRecipesInputSchema), import_zod.z.lazy(() => RestaurantUncheckedCreateWithoutRecipesInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => RestaurantCreateOrConnectWithoutRecipesInputSchema).optional(),
  upsert: import_zod.z.lazy(() => RestaurantUpsertWithoutRecipesInputSchema).optional(),
  connect: import_zod.z.lazy(() => RestaurantWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => RestaurantUpdateToOneWithWhereWithoutRecipesInputSchema), import_zod.z.lazy(() => RestaurantUpdateWithoutRecipesInputSchema), import_zod.z.lazy(() => RestaurantUncheckedUpdateWithoutRecipesInputSchema)]).optional()
}).strict();
var CookBookUpdateOneRequiredWithoutRecipesNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => CookBookCreateWithoutRecipesInputSchema), import_zod.z.lazy(() => CookBookUncheckedCreateWithoutRecipesInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => CookBookCreateOrConnectWithoutRecipesInputSchema).optional(),
  upsert: import_zod.z.lazy(() => CookBookUpsertWithoutRecipesInputSchema).optional(),
  connect: import_zod.z.lazy(() => CookBookWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => CookBookUpdateToOneWithWhereWithoutRecipesInputSchema), import_zod.z.lazy(() => CookBookUpdateWithoutRecipesInputSchema), import_zod.z.lazy(() => CookBookUncheckedUpdateWithoutRecipesInputSchema)]).optional()
}).strict();
var RecipeIngredientUpdateManyWithoutRecipeNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeIngredientCreateWithoutRecipeInputSchema).array(), import_zod.z.lazy(() => RecipeIngredientUncheckedCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeIngredientUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientCreateOrConnectWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeIngredientCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientUpsertWithWhereUniqueWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeIngredientUpsertWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => RecipeIngredientCreateManyRecipeInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientUpdateWithWhereUniqueWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeIngredientUpdateWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientUpdateManyWithWhereWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeIngredientUpdateManyWithWhereWithoutRecipeInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientScalarWhereInputSchema), import_zod.z.lazy(() => RecipeIngredientScalarWhereInputSchema).array()]).optional()
}).strict();
var RecipeInstructionUpdateManyWithoutRecipeNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeInstructionCreateWithoutRecipeInputSchema).array(), import_zod.z.lazy(() => RecipeInstructionUncheckedCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeInstructionUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionCreateOrConnectWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeInstructionCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionUpsertWithWhereUniqueWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeInstructionUpsertWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => RecipeInstructionCreateManyRecipeInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeInstructionWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeInstructionWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeInstructionWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeInstructionWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionUpdateWithWhereUniqueWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeInstructionUpdateWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionUpdateManyWithWhereWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeInstructionUpdateManyWithWhereWithoutRecipeInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionScalarWhereInputSchema), import_zod.z.lazy(() => RecipeInstructionScalarWhereInputSchema).array()]).optional()
}).strict();
var MenuItemUpdateManyWithoutRecipesNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateWithoutRecipesInputSchema), import_zod.z.lazy(() => MenuItemCreateWithoutRecipesInputSchema).array(), import_zod.z.lazy(() => MenuItemUncheckedCreateWithoutRecipesInputSchema), import_zod.z.lazy(() => MenuItemUncheckedCreateWithoutRecipesInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateOrConnectWithoutRecipesInputSchema), import_zod.z.lazy(() => MenuItemCreateOrConnectWithoutRecipesInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpsertWithWhereUniqueWithoutRecipesInputSchema), import_zod.z.lazy(() => MenuItemUpsertWithWhereUniqueWithoutRecipesInputSchema).array()]).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema), import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema), import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema), import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema), import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateWithWhereUniqueWithoutRecipesInputSchema), import_zod.z.lazy(() => MenuItemUpdateWithWhereUniqueWithoutRecipesInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateManyWithWhereWithoutRecipesInputSchema), import_zod.z.lazy(() => MenuItemUpdateManyWithWhereWithoutRecipesInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => MenuItemScalarWhereInputSchema), import_zod.z.lazy(() => MenuItemScalarWhereInputSchema).array()]).optional()
}).strict();
var FoodCostHistoryUpdateManyWithoutRecipeNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => FoodCostHistoryCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => FoodCostHistoryCreateWithoutRecipeInputSchema).array(), import_zod.z.lazy(() => FoodCostHistoryUncheckedCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => FoodCostHistoryUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => FoodCostHistoryCreateOrConnectWithoutRecipeInputSchema), import_zod.z.lazy(() => FoodCostHistoryCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => FoodCostHistoryUpsertWithWhereUniqueWithoutRecipeInputSchema), import_zod.z.lazy(() => FoodCostHistoryUpsertWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => FoodCostHistoryCreateManyRecipeInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => FoodCostHistoryWhereUniqueInputSchema), import_zod.z.lazy(() => FoodCostHistoryWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => FoodCostHistoryWhereUniqueInputSchema), import_zod.z.lazy(() => FoodCostHistoryWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => FoodCostHistoryWhereUniqueInputSchema), import_zod.z.lazy(() => FoodCostHistoryWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => FoodCostHistoryWhereUniqueInputSchema), import_zod.z.lazy(() => FoodCostHistoryWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => FoodCostHistoryUpdateWithWhereUniqueWithoutRecipeInputSchema), import_zod.z.lazy(() => FoodCostHistoryUpdateWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => FoodCostHistoryUpdateManyWithWhereWithoutRecipeInputSchema), import_zod.z.lazy(() => FoodCostHistoryUpdateManyWithWhereWithoutRecipeInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => FoodCostHistoryScalarWhereInputSchema), import_zod.z.lazy(() => FoodCostHistoryScalarWhereInputSchema).array()]).optional()
}).strict();
var PrepHistoryUpdateManyWithoutRecipeNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => PrepHistoryCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => PrepHistoryCreateWithoutRecipeInputSchema).array(), import_zod.z.lazy(() => PrepHistoryUncheckedCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => PrepHistoryUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => PrepHistoryCreateOrConnectWithoutRecipeInputSchema), import_zod.z.lazy(() => PrepHistoryCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => PrepHistoryUpsertWithWhereUniqueWithoutRecipeInputSchema), import_zod.z.lazy(() => PrepHistoryUpsertWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => PrepHistoryCreateManyRecipeInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => PrepHistoryWhereUniqueInputSchema), import_zod.z.lazy(() => PrepHistoryWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => PrepHistoryWhereUniqueInputSchema), import_zod.z.lazy(() => PrepHistoryWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => PrepHistoryWhereUniqueInputSchema), import_zod.z.lazy(() => PrepHistoryWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => PrepHistoryWhereUniqueInputSchema), import_zod.z.lazy(() => PrepHistoryWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => PrepHistoryUpdateWithWhereUniqueWithoutRecipeInputSchema), import_zod.z.lazy(() => PrepHistoryUpdateWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => PrepHistoryUpdateManyWithWhereWithoutRecipeInputSchema), import_zod.z.lazy(() => PrepHistoryUpdateManyWithWhereWithoutRecipeInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => PrepHistoryScalarWhereInputSchema), import_zod.z.lazy(() => PrepHistoryScalarWhereInputSchema).array()]).optional()
}).strict();
var PrepBoardUpdateManyWithoutRecipesNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => PrepBoardCreateWithoutRecipesInputSchema), import_zod.z.lazy(() => PrepBoardCreateWithoutRecipesInputSchema).array(), import_zod.z.lazy(() => PrepBoardUncheckedCreateWithoutRecipesInputSchema), import_zod.z.lazy(() => PrepBoardUncheckedCreateWithoutRecipesInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => PrepBoardCreateOrConnectWithoutRecipesInputSchema), import_zod.z.lazy(() => PrepBoardCreateOrConnectWithoutRecipesInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => PrepBoardUpsertWithWhereUniqueWithoutRecipesInputSchema), import_zod.z.lazy(() => PrepBoardUpsertWithWhereUniqueWithoutRecipesInputSchema).array()]).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => PrepBoardWhereUniqueInputSchema), import_zod.z.lazy(() => PrepBoardWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => PrepBoardWhereUniqueInputSchema), import_zod.z.lazy(() => PrepBoardWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => PrepBoardWhereUniqueInputSchema), import_zod.z.lazy(() => PrepBoardWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => PrepBoardWhereUniqueInputSchema), import_zod.z.lazy(() => PrepBoardWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => PrepBoardUpdateWithWhereUniqueWithoutRecipesInputSchema), import_zod.z.lazy(() => PrepBoardUpdateWithWhereUniqueWithoutRecipesInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => PrepBoardUpdateManyWithWhereWithoutRecipesInputSchema), import_zod.z.lazy(() => PrepBoardUpdateManyWithWhereWithoutRecipesInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => PrepBoardScalarWhereInputSchema), import_zod.z.lazy(() => PrepBoardScalarWhereInputSchema).array()]).optional()
}).strict();
var PrepItemUpdateManyWithoutRecipeNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => PrepItemCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => PrepItemCreateWithoutRecipeInputSchema).array(), import_zod.z.lazy(() => PrepItemUncheckedCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => PrepItemUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => PrepItemCreateOrConnectWithoutRecipeInputSchema), import_zod.z.lazy(() => PrepItemCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => PrepItemUpsertWithWhereUniqueWithoutRecipeInputSchema), import_zod.z.lazy(() => PrepItemUpsertWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => PrepItemCreateManyRecipeInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema), import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema), import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema), import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema), import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => PrepItemUpdateWithWhereUniqueWithoutRecipeInputSchema), import_zod.z.lazy(() => PrepItemUpdateWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => PrepItemUpdateManyWithWhereWithoutRecipeInputSchema), import_zod.z.lazy(() => PrepItemUpdateManyWithWhereWithoutRecipeInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => PrepItemScalarWhereInputSchema), import_zod.z.lazy(() => PrepItemScalarWhereInputSchema).array()]).optional()
}).strict();
var MenuItemRecipeUpdateManyWithoutRecipeNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => MenuItemRecipeCreateWithoutRecipeInputSchema).array(), import_zod.z.lazy(() => MenuItemRecipeUncheckedCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => MenuItemRecipeUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeCreateOrConnectWithoutRecipeInputSchema), import_zod.z.lazy(() => MenuItemRecipeCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeUpsertWithWhereUniqueWithoutRecipeInputSchema), import_zod.z.lazy(() => MenuItemRecipeUpsertWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => MenuItemRecipeCreateManyRecipeInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeWhereUniqueInputSchema), import_zod.z.lazy(() => MenuItemRecipeWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeWhereUniqueInputSchema), import_zod.z.lazy(() => MenuItemRecipeWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeWhereUniqueInputSchema), import_zod.z.lazy(() => MenuItemRecipeWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeWhereUniqueInputSchema), import_zod.z.lazy(() => MenuItemRecipeWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeUpdateWithWhereUniqueWithoutRecipeInputSchema), import_zod.z.lazy(() => MenuItemRecipeUpdateWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeUpdateManyWithWhereWithoutRecipeInputSchema), import_zod.z.lazy(() => MenuItemRecipeUpdateManyWithWhereWithoutRecipeInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeScalarWhereInputSchema), import_zod.z.lazy(() => MenuItemRecipeScalarWhereInputSchema).array()]).optional()
}).strict();
var ProductionPlanItemUpdateManyWithoutRecipeNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => ProductionPlanItemCreateWithoutRecipeInputSchema).array(), import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemCreateOrConnectWithoutRecipeInputSchema), import_zod.z.lazy(() => ProductionPlanItemCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemUpsertWithWhereUniqueWithoutRecipeInputSchema), import_zod.z.lazy(() => ProductionPlanItemUpsertWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => ProductionPlanItemCreateManyRecipeInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema), import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema), import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema), import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema), import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemUpdateWithWhereUniqueWithoutRecipeInputSchema), import_zod.z.lazy(() => ProductionPlanItemUpdateWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemUpdateManyWithWhereWithoutRecipeInputSchema), import_zod.z.lazy(() => ProductionPlanItemUpdateManyWithWhereWithoutRecipeInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemScalarWhereInputSchema), import_zod.z.lazy(() => ProductionPlanItemScalarWhereInputSchema).array()]).optional()
}).strict();
var InventoryWithdrawalUpdateManyWithoutRecipeNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => InventoryWithdrawalCreateWithoutRecipeInputSchema).array(), import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalCreateOrConnectWithoutRecipeInputSchema), import_zod.z.lazy(() => InventoryWithdrawalCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalUpsertWithWhereUniqueWithoutRecipeInputSchema), import_zod.z.lazy(() => InventoryWithdrawalUpsertWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => InventoryWithdrawalCreateManyRecipeInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema), import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema), import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema), import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema), import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalUpdateWithWhereUniqueWithoutRecipeInputSchema), import_zod.z.lazy(() => InventoryWithdrawalUpdateWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalUpdateManyWithWhereWithoutRecipeInputSchema), import_zod.z.lazy(() => InventoryWithdrawalUpdateManyWithWhereWithoutRecipeInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalScalarWhereInputSchema), import_zod.z.lazy(() => InventoryWithdrawalScalarWhereInputSchema).array()]).optional()
}).strict();
var RecipeTagUpdateManyWithoutRecipesNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeTagCreateWithoutRecipesInputSchema), import_zod.z.lazy(() => RecipeTagCreateWithoutRecipesInputSchema).array(), import_zod.z.lazy(() => RecipeTagUncheckedCreateWithoutRecipesInputSchema), import_zod.z.lazy(() => RecipeTagUncheckedCreateWithoutRecipesInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeTagCreateOrConnectWithoutRecipesInputSchema), import_zod.z.lazy(() => RecipeTagCreateOrConnectWithoutRecipesInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => RecipeTagUpsertWithWhereUniqueWithoutRecipesInputSchema), import_zod.z.lazy(() => RecipeTagUpsertWithWhereUniqueWithoutRecipesInputSchema).array()]).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => RecipeTagWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeTagWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => RecipeTagWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeTagWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => RecipeTagWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeTagWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeTagWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeTagWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeTagUpdateWithWhereUniqueWithoutRecipesInputSchema), import_zod.z.lazy(() => RecipeTagUpdateWithWhereUniqueWithoutRecipesInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => RecipeTagUpdateManyWithWhereWithoutRecipesInputSchema), import_zod.z.lazy(() => RecipeTagUpdateManyWithWhereWithoutRecipesInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => RecipeTagScalarWhereInputSchema), import_zod.z.lazy(() => RecipeTagScalarWhereInputSchema).array()]).optional()
}).strict();
var RecipeVersionUpdateManyWithoutRecipeNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeVersionCreateWithoutRecipeInputSchema).array(), import_zod.z.lazy(() => RecipeVersionUncheckedCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeVersionUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionCreateOrConnectWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeVersionCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionUpsertWithWhereUniqueWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeVersionUpsertWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => RecipeVersionCreateManyRecipeInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionUpdateWithWhereUniqueWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeVersionUpdateWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionUpdateManyWithWhereWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeVersionUpdateManyWithWhereWithoutRecipeInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionScalarWhereInputSchema), import_zod.z.lazy(() => RecipeVersionScalarWhereInputSchema).array()]).optional()
}).strict();
var RecipeEquipmentUpdateManyWithoutRecipeNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeEquipmentCreateWithoutRecipeInputSchema).array(), import_zod.z.lazy(() => RecipeEquipmentUncheckedCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeEquipmentUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentCreateOrConnectWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeEquipmentCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentUpsertWithWhereUniqueWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeEquipmentUpsertWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => RecipeEquipmentCreateManyRecipeInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentUpdateWithWhereUniqueWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeEquipmentUpdateWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentUpdateManyWithWhereWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeEquipmentUpdateManyWithWhereWithoutRecipeInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentScalarWhereInputSchema), import_zod.z.lazy(() => RecipeEquipmentScalarWhereInputSchema).array()]).optional()
}).strict();
var DietaryRestrictionUpdateManyWithoutRecipesNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionCreateWithoutRecipesInputSchema), import_zod.z.lazy(() => DietaryRestrictionCreateWithoutRecipesInputSchema).array(), import_zod.z.lazy(() => DietaryRestrictionUncheckedCreateWithoutRecipesInputSchema), import_zod.z.lazy(() => DietaryRestrictionUncheckedCreateWithoutRecipesInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionCreateOrConnectWithoutRecipesInputSchema), import_zod.z.lazy(() => DietaryRestrictionCreateOrConnectWithoutRecipesInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionUpsertWithWhereUniqueWithoutRecipesInputSchema), import_zod.z.lazy(() => DietaryRestrictionUpsertWithWhereUniqueWithoutRecipesInputSchema).array()]).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionWhereUniqueInputSchema), import_zod.z.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionWhereUniqueInputSchema), import_zod.z.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionWhereUniqueInputSchema), import_zod.z.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionWhereUniqueInputSchema), import_zod.z.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionUpdateWithWhereUniqueWithoutRecipesInputSchema), import_zod.z.lazy(() => DietaryRestrictionUpdateWithWhereUniqueWithoutRecipesInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionUpdateManyWithWhereWithoutRecipesInputSchema), import_zod.z.lazy(() => DietaryRestrictionUpdateManyWithWhereWithoutRecipesInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionScalarWhereInputSchema), import_zod.z.lazy(() => DietaryRestrictionScalarWhereInputSchema).array()]).optional()
}).strict();
var RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeIngredientCreateWithoutRecipeInputSchema).array(), import_zod.z.lazy(() => RecipeIngredientUncheckedCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeIngredientUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientCreateOrConnectWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeIngredientCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientUpsertWithWhereUniqueWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeIngredientUpsertWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => RecipeIngredientCreateManyRecipeInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientUpdateWithWhereUniqueWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeIngredientUpdateWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientUpdateManyWithWhereWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeIngredientUpdateManyWithWhereWithoutRecipeInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientScalarWhereInputSchema), import_zod.z.lazy(() => RecipeIngredientScalarWhereInputSchema).array()]).optional()
}).strict();
var RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeInstructionCreateWithoutRecipeInputSchema).array(), import_zod.z.lazy(() => RecipeInstructionUncheckedCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeInstructionUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionCreateOrConnectWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeInstructionCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionUpsertWithWhereUniqueWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeInstructionUpsertWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => RecipeInstructionCreateManyRecipeInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeInstructionWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeInstructionWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeInstructionWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeInstructionWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionUpdateWithWhereUniqueWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeInstructionUpdateWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionUpdateManyWithWhereWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeInstructionUpdateManyWithWhereWithoutRecipeInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionScalarWhereInputSchema), import_zod.z.lazy(() => RecipeInstructionScalarWhereInputSchema).array()]).optional()
}).strict();
var MenuItemUncheckedUpdateManyWithoutRecipesNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateWithoutRecipesInputSchema), import_zod.z.lazy(() => MenuItemCreateWithoutRecipesInputSchema).array(), import_zod.z.lazy(() => MenuItemUncheckedCreateWithoutRecipesInputSchema), import_zod.z.lazy(() => MenuItemUncheckedCreateWithoutRecipesInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateOrConnectWithoutRecipesInputSchema), import_zod.z.lazy(() => MenuItemCreateOrConnectWithoutRecipesInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpsertWithWhereUniqueWithoutRecipesInputSchema), import_zod.z.lazy(() => MenuItemUpsertWithWhereUniqueWithoutRecipesInputSchema).array()]).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema), import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema), import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema), import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema), import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateWithWhereUniqueWithoutRecipesInputSchema), import_zod.z.lazy(() => MenuItemUpdateWithWhereUniqueWithoutRecipesInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateManyWithWhereWithoutRecipesInputSchema), import_zod.z.lazy(() => MenuItemUpdateManyWithWhereWithoutRecipesInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => MenuItemScalarWhereInputSchema), import_zod.z.lazy(() => MenuItemScalarWhereInputSchema).array()]).optional()
}).strict();
var FoodCostHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => FoodCostHistoryCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => FoodCostHistoryCreateWithoutRecipeInputSchema).array(), import_zod.z.lazy(() => FoodCostHistoryUncheckedCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => FoodCostHistoryUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => FoodCostHistoryCreateOrConnectWithoutRecipeInputSchema), import_zod.z.lazy(() => FoodCostHistoryCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => FoodCostHistoryUpsertWithWhereUniqueWithoutRecipeInputSchema), import_zod.z.lazy(() => FoodCostHistoryUpsertWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => FoodCostHistoryCreateManyRecipeInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => FoodCostHistoryWhereUniqueInputSchema), import_zod.z.lazy(() => FoodCostHistoryWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => FoodCostHistoryWhereUniqueInputSchema), import_zod.z.lazy(() => FoodCostHistoryWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => FoodCostHistoryWhereUniqueInputSchema), import_zod.z.lazy(() => FoodCostHistoryWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => FoodCostHistoryWhereUniqueInputSchema), import_zod.z.lazy(() => FoodCostHistoryWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => FoodCostHistoryUpdateWithWhereUniqueWithoutRecipeInputSchema), import_zod.z.lazy(() => FoodCostHistoryUpdateWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => FoodCostHistoryUpdateManyWithWhereWithoutRecipeInputSchema), import_zod.z.lazy(() => FoodCostHistoryUpdateManyWithWhereWithoutRecipeInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => FoodCostHistoryScalarWhereInputSchema), import_zod.z.lazy(() => FoodCostHistoryScalarWhereInputSchema).array()]).optional()
}).strict();
var PrepHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => PrepHistoryCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => PrepHistoryCreateWithoutRecipeInputSchema).array(), import_zod.z.lazy(() => PrepHistoryUncheckedCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => PrepHistoryUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => PrepHistoryCreateOrConnectWithoutRecipeInputSchema), import_zod.z.lazy(() => PrepHistoryCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => PrepHistoryUpsertWithWhereUniqueWithoutRecipeInputSchema), import_zod.z.lazy(() => PrepHistoryUpsertWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => PrepHistoryCreateManyRecipeInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => PrepHistoryWhereUniqueInputSchema), import_zod.z.lazy(() => PrepHistoryWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => PrepHistoryWhereUniqueInputSchema), import_zod.z.lazy(() => PrepHistoryWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => PrepHistoryWhereUniqueInputSchema), import_zod.z.lazy(() => PrepHistoryWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => PrepHistoryWhereUniqueInputSchema), import_zod.z.lazy(() => PrepHistoryWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => PrepHistoryUpdateWithWhereUniqueWithoutRecipeInputSchema), import_zod.z.lazy(() => PrepHistoryUpdateWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => PrepHistoryUpdateManyWithWhereWithoutRecipeInputSchema), import_zod.z.lazy(() => PrepHistoryUpdateManyWithWhereWithoutRecipeInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => PrepHistoryScalarWhereInputSchema), import_zod.z.lazy(() => PrepHistoryScalarWhereInputSchema).array()]).optional()
}).strict();
var PrepBoardUncheckedUpdateManyWithoutRecipesNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => PrepBoardCreateWithoutRecipesInputSchema), import_zod.z.lazy(() => PrepBoardCreateWithoutRecipesInputSchema).array(), import_zod.z.lazy(() => PrepBoardUncheckedCreateWithoutRecipesInputSchema), import_zod.z.lazy(() => PrepBoardUncheckedCreateWithoutRecipesInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => PrepBoardCreateOrConnectWithoutRecipesInputSchema), import_zod.z.lazy(() => PrepBoardCreateOrConnectWithoutRecipesInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => PrepBoardUpsertWithWhereUniqueWithoutRecipesInputSchema), import_zod.z.lazy(() => PrepBoardUpsertWithWhereUniqueWithoutRecipesInputSchema).array()]).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => PrepBoardWhereUniqueInputSchema), import_zod.z.lazy(() => PrepBoardWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => PrepBoardWhereUniqueInputSchema), import_zod.z.lazy(() => PrepBoardWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => PrepBoardWhereUniqueInputSchema), import_zod.z.lazy(() => PrepBoardWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => PrepBoardWhereUniqueInputSchema), import_zod.z.lazy(() => PrepBoardWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => PrepBoardUpdateWithWhereUniqueWithoutRecipesInputSchema), import_zod.z.lazy(() => PrepBoardUpdateWithWhereUniqueWithoutRecipesInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => PrepBoardUpdateManyWithWhereWithoutRecipesInputSchema), import_zod.z.lazy(() => PrepBoardUpdateManyWithWhereWithoutRecipesInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => PrepBoardScalarWhereInputSchema), import_zod.z.lazy(() => PrepBoardScalarWhereInputSchema).array()]).optional()
}).strict();
var PrepItemUncheckedUpdateManyWithoutRecipeNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => PrepItemCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => PrepItemCreateWithoutRecipeInputSchema).array(), import_zod.z.lazy(() => PrepItemUncheckedCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => PrepItemUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => PrepItemCreateOrConnectWithoutRecipeInputSchema), import_zod.z.lazy(() => PrepItemCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => PrepItemUpsertWithWhereUniqueWithoutRecipeInputSchema), import_zod.z.lazy(() => PrepItemUpsertWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => PrepItemCreateManyRecipeInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema), import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema), import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema), import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema), import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => PrepItemUpdateWithWhereUniqueWithoutRecipeInputSchema), import_zod.z.lazy(() => PrepItemUpdateWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => PrepItemUpdateManyWithWhereWithoutRecipeInputSchema), import_zod.z.lazy(() => PrepItemUpdateManyWithWhereWithoutRecipeInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => PrepItemScalarWhereInputSchema), import_zod.z.lazy(() => PrepItemScalarWhereInputSchema).array()]).optional()
}).strict();
var MenuItemRecipeUncheckedUpdateManyWithoutRecipeNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => MenuItemRecipeCreateWithoutRecipeInputSchema).array(), import_zod.z.lazy(() => MenuItemRecipeUncheckedCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => MenuItemRecipeUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeCreateOrConnectWithoutRecipeInputSchema), import_zod.z.lazy(() => MenuItemRecipeCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeUpsertWithWhereUniqueWithoutRecipeInputSchema), import_zod.z.lazy(() => MenuItemRecipeUpsertWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => MenuItemRecipeCreateManyRecipeInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeWhereUniqueInputSchema), import_zod.z.lazy(() => MenuItemRecipeWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeWhereUniqueInputSchema), import_zod.z.lazy(() => MenuItemRecipeWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeWhereUniqueInputSchema), import_zod.z.lazy(() => MenuItemRecipeWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeWhereUniqueInputSchema), import_zod.z.lazy(() => MenuItemRecipeWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeUpdateWithWhereUniqueWithoutRecipeInputSchema), import_zod.z.lazy(() => MenuItemRecipeUpdateWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeUpdateManyWithWhereWithoutRecipeInputSchema), import_zod.z.lazy(() => MenuItemRecipeUpdateManyWithWhereWithoutRecipeInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeScalarWhereInputSchema), import_zod.z.lazy(() => MenuItemRecipeScalarWhereInputSchema).array()]).optional()
}).strict();
var ProductionPlanItemUncheckedUpdateManyWithoutRecipeNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => ProductionPlanItemCreateWithoutRecipeInputSchema).array(), import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemCreateOrConnectWithoutRecipeInputSchema), import_zod.z.lazy(() => ProductionPlanItemCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemUpsertWithWhereUniqueWithoutRecipeInputSchema), import_zod.z.lazy(() => ProductionPlanItemUpsertWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => ProductionPlanItemCreateManyRecipeInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema), import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema), import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema), import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema), import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemUpdateWithWhereUniqueWithoutRecipeInputSchema), import_zod.z.lazy(() => ProductionPlanItemUpdateWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemUpdateManyWithWhereWithoutRecipeInputSchema), import_zod.z.lazy(() => ProductionPlanItemUpdateManyWithWhereWithoutRecipeInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemScalarWhereInputSchema), import_zod.z.lazy(() => ProductionPlanItemScalarWhereInputSchema).array()]).optional()
}).strict();
var InventoryWithdrawalUncheckedUpdateManyWithoutRecipeNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => InventoryWithdrawalCreateWithoutRecipeInputSchema).array(), import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalCreateOrConnectWithoutRecipeInputSchema), import_zod.z.lazy(() => InventoryWithdrawalCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalUpsertWithWhereUniqueWithoutRecipeInputSchema), import_zod.z.lazy(() => InventoryWithdrawalUpsertWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => InventoryWithdrawalCreateManyRecipeInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema), import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema), import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema), import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema), import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalUpdateWithWhereUniqueWithoutRecipeInputSchema), import_zod.z.lazy(() => InventoryWithdrawalUpdateWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalUpdateManyWithWhereWithoutRecipeInputSchema), import_zod.z.lazy(() => InventoryWithdrawalUpdateManyWithWhereWithoutRecipeInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalScalarWhereInputSchema), import_zod.z.lazy(() => InventoryWithdrawalScalarWhereInputSchema).array()]).optional()
}).strict();
var RecipeTagUncheckedUpdateManyWithoutRecipesNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeTagCreateWithoutRecipesInputSchema), import_zod.z.lazy(() => RecipeTagCreateWithoutRecipesInputSchema).array(), import_zod.z.lazy(() => RecipeTagUncheckedCreateWithoutRecipesInputSchema), import_zod.z.lazy(() => RecipeTagUncheckedCreateWithoutRecipesInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeTagCreateOrConnectWithoutRecipesInputSchema), import_zod.z.lazy(() => RecipeTagCreateOrConnectWithoutRecipesInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => RecipeTagUpsertWithWhereUniqueWithoutRecipesInputSchema), import_zod.z.lazy(() => RecipeTagUpsertWithWhereUniqueWithoutRecipesInputSchema).array()]).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => RecipeTagWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeTagWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => RecipeTagWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeTagWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => RecipeTagWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeTagWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeTagWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeTagWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeTagUpdateWithWhereUniqueWithoutRecipesInputSchema), import_zod.z.lazy(() => RecipeTagUpdateWithWhereUniqueWithoutRecipesInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => RecipeTagUpdateManyWithWhereWithoutRecipesInputSchema), import_zod.z.lazy(() => RecipeTagUpdateManyWithWhereWithoutRecipesInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => RecipeTagScalarWhereInputSchema), import_zod.z.lazy(() => RecipeTagScalarWhereInputSchema).array()]).optional()
}).strict();
var RecipeVersionUncheckedUpdateManyWithoutRecipeNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeVersionCreateWithoutRecipeInputSchema).array(), import_zod.z.lazy(() => RecipeVersionUncheckedCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeVersionUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionCreateOrConnectWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeVersionCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionUpsertWithWhereUniqueWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeVersionUpsertWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => RecipeVersionCreateManyRecipeInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionUpdateWithWhereUniqueWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeVersionUpdateWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionUpdateManyWithWhereWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeVersionUpdateManyWithWhereWithoutRecipeInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionScalarWhereInputSchema), import_zod.z.lazy(() => RecipeVersionScalarWhereInputSchema).array()]).optional()
}).strict();
var RecipeEquipmentUncheckedUpdateManyWithoutRecipeNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeEquipmentCreateWithoutRecipeInputSchema).array(), import_zod.z.lazy(() => RecipeEquipmentUncheckedCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeEquipmentUncheckedCreateWithoutRecipeInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentCreateOrConnectWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeEquipmentCreateOrConnectWithoutRecipeInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentUpsertWithWhereUniqueWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeEquipmentUpsertWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => RecipeEquipmentCreateManyRecipeInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeEquipmentWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentUpdateWithWhereUniqueWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeEquipmentUpdateWithWhereUniqueWithoutRecipeInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentUpdateManyWithWhereWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeEquipmentUpdateManyWithWhereWithoutRecipeInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentScalarWhereInputSchema), import_zod.z.lazy(() => RecipeEquipmentScalarWhereInputSchema).array()]).optional()
}).strict();
var DietaryRestrictionUncheckedUpdateManyWithoutRecipesNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionCreateWithoutRecipesInputSchema), import_zod.z.lazy(() => DietaryRestrictionCreateWithoutRecipesInputSchema).array(), import_zod.z.lazy(() => DietaryRestrictionUncheckedCreateWithoutRecipesInputSchema), import_zod.z.lazy(() => DietaryRestrictionUncheckedCreateWithoutRecipesInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionCreateOrConnectWithoutRecipesInputSchema), import_zod.z.lazy(() => DietaryRestrictionCreateOrConnectWithoutRecipesInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionUpsertWithWhereUniqueWithoutRecipesInputSchema), import_zod.z.lazy(() => DietaryRestrictionUpsertWithWhereUniqueWithoutRecipesInputSchema).array()]).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionWhereUniqueInputSchema), import_zod.z.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionWhereUniqueInputSchema), import_zod.z.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionWhereUniqueInputSchema), import_zod.z.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionWhereUniqueInputSchema), import_zod.z.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionUpdateWithWhereUniqueWithoutRecipesInputSchema), import_zod.z.lazy(() => DietaryRestrictionUpdateWithWhereUniqueWithoutRecipesInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionUpdateManyWithWhereWithoutRecipesInputSchema), import_zod.z.lazy(() => DietaryRestrictionUpdateManyWithWhereWithoutRecipesInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionScalarWhereInputSchema), import_zod.z.lazy(() => DietaryRestrictionScalarWhereInputSchema).array()]).optional()
}).strict();
var RecipeIngredientCreateNestedManyWithoutIngredientInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientCreateWithoutIngredientInputSchema), import_zod.z.lazy(() => RecipeIngredientCreateWithoutIngredientInputSchema).array(), import_zod.z.lazy(() => RecipeIngredientUncheckedCreateWithoutIngredientInputSchema), import_zod.z.lazy(() => RecipeIngredientUncheckedCreateWithoutIngredientInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientCreateOrConnectWithoutIngredientInputSchema), import_zod.z.lazy(() => RecipeIngredientCreateOrConnectWithoutIngredientInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => RecipeIngredientCreateManyIngredientInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema).array()]).optional()
}).strict();
var InventoryItemCreateNestedManyWithoutIngredientInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => InventoryItemCreateWithoutIngredientInputSchema), import_zod.z.lazy(() => InventoryItemCreateWithoutIngredientInputSchema).array(), import_zod.z.lazy(() => InventoryItemUncheckedCreateWithoutIngredientInputSchema), import_zod.z.lazy(() => InventoryItemUncheckedCreateWithoutIngredientInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => InventoryItemCreateOrConnectWithoutIngredientInputSchema), import_zod.z.lazy(() => InventoryItemCreateOrConnectWithoutIngredientInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => InventoryItemCreateManyIngredientInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema), import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var OrderItemCreateNestedManyWithoutIngredientInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => OrderItemCreateWithoutIngredientInputSchema), import_zod.z.lazy(() => OrderItemCreateWithoutIngredientInputSchema).array(), import_zod.z.lazy(() => OrderItemUncheckedCreateWithoutIngredientInputSchema), import_zod.z.lazy(() => OrderItemUncheckedCreateWithoutIngredientInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => OrderItemCreateOrConnectWithoutIngredientInputSchema), import_zod.z.lazy(() => OrderItemCreateOrConnectWithoutIngredientInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => OrderItemCreateManyIngredientInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => OrderItemWhereUniqueInputSchema), import_zod.z.lazy(() => OrderItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var VendorCreateNestedManyWithoutIngredientsInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => VendorCreateWithoutIngredientsInputSchema), import_zod.z.lazy(() => VendorCreateWithoutIngredientsInputSchema).array(), import_zod.z.lazy(() => VendorUncheckedCreateWithoutIngredientsInputSchema), import_zod.z.lazy(() => VendorUncheckedCreateWithoutIngredientsInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => VendorCreateOrConnectWithoutIngredientsInputSchema), import_zod.z.lazy(() => VendorCreateOrConnectWithoutIngredientsInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => VendorWhereUniqueInputSchema), import_zod.z.lazy(() => VendorWhereUniqueInputSchema).array()]).optional()
}).strict();
var WasteRecordCreateNestedManyWithoutIngredienteInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => WasteRecordCreateWithoutIngredienteInputSchema), import_zod.z.lazy(() => WasteRecordCreateWithoutIngredienteInputSchema).array(), import_zod.z.lazy(() => WasteRecordUncheckedCreateWithoutIngredienteInputSchema), import_zod.z.lazy(() => WasteRecordUncheckedCreateWithoutIngredienteInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => WasteRecordCreateOrConnectWithoutIngredienteInputSchema), import_zod.z.lazy(() => WasteRecordCreateOrConnectWithoutIngredienteInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => WasteRecordCreateManyIngredienteInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema), import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema).array()]).optional()
}).strict();
var IngredientAllergenCreateNestedManyWithoutIngredientInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenCreateWithoutIngredientInputSchema), import_zod.z.lazy(() => IngredientAllergenCreateWithoutIngredientInputSchema).array(), import_zod.z.lazy(() => IngredientAllergenUncheckedCreateWithoutIngredientInputSchema), import_zod.z.lazy(() => IngredientAllergenUncheckedCreateWithoutIngredientInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenCreateOrConnectWithoutIngredientInputSchema), import_zod.z.lazy(() => IngredientAllergenCreateOrConnectWithoutIngredientInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => IngredientAllergenCreateManyIngredientInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenWhereUniqueInputSchema), import_zod.z.lazy(() => IngredientAllergenWhereUniqueInputSchema).array()]).optional()
}).strict();
var SupplierPriceHistoryCreateNestedManyWithoutIngredientInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryCreateWithoutIngredientInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryCreateWithoutIngredientInputSchema).array(), import_zod.z.lazy(() => SupplierPriceHistoryUncheckedCreateWithoutIngredientInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryUncheckedCreateWithoutIngredientInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryCreateOrConnectWithoutIngredientInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryCreateOrConnectWithoutIngredientInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => SupplierPriceHistoryCreateManyIngredientInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema).array()]).optional()
}).strict();
var DietaryRestrictionCreateNestedOneWithoutIngredientsInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionCreateWithoutIngredientsInputSchema), import_zod.z.lazy(() => DietaryRestrictionUncheckedCreateWithoutIngredientsInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => DietaryRestrictionCreateOrConnectWithoutIngredientsInputSchema).optional(),
  connect: import_zod.z.lazy(() => DietaryRestrictionWhereUniqueInputSchema).optional()
}).strict();
var RecipeIngredientUncheckedCreateNestedManyWithoutIngredientInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientCreateWithoutIngredientInputSchema), import_zod.z.lazy(() => RecipeIngredientCreateWithoutIngredientInputSchema).array(), import_zod.z.lazy(() => RecipeIngredientUncheckedCreateWithoutIngredientInputSchema), import_zod.z.lazy(() => RecipeIngredientUncheckedCreateWithoutIngredientInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientCreateOrConnectWithoutIngredientInputSchema), import_zod.z.lazy(() => RecipeIngredientCreateOrConnectWithoutIngredientInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => RecipeIngredientCreateManyIngredientInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema).array()]).optional()
}).strict();
var InventoryItemUncheckedCreateNestedManyWithoutIngredientInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => InventoryItemCreateWithoutIngredientInputSchema), import_zod.z.lazy(() => InventoryItemCreateWithoutIngredientInputSchema).array(), import_zod.z.lazy(() => InventoryItemUncheckedCreateWithoutIngredientInputSchema), import_zod.z.lazy(() => InventoryItemUncheckedCreateWithoutIngredientInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => InventoryItemCreateOrConnectWithoutIngredientInputSchema), import_zod.z.lazy(() => InventoryItemCreateOrConnectWithoutIngredientInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => InventoryItemCreateManyIngredientInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema), import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var OrderItemUncheckedCreateNestedManyWithoutIngredientInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => OrderItemCreateWithoutIngredientInputSchema), import_zod.z.lazy(() => OrderItemCreateWithoutIngredientInputSchema).array(), import_zod.z.lazy(() => OrderItemUncheckedCreateWithoutIngredientInputSchema), import_zod.z.lazy(() => OrderItemUncheckedCreateWithoutIngredientInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => OrderItemCreateOrConnectWithoutIngredientInputSchema), import_zod.z.lazy(() => OrderItemCreateOrConnectWithoutIngredientInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => OrderItemCreateManyIngredientInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => OrderItemWhereUniqueInputSchema), import_zod.z.lazy(() => OrderItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var VendorUncheckedCreateNestedManyWithoutIngredientsInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => VendorCreateWithoutIngredientsInputSchema), import_zod.z.lazy(() => VendorCreateWithoutIngredientsInputSchema).array(), import_zod.z.lazy(() => VendorUncheckedCreateWithoutIngredientsInputSchema), import_zod.z.lazy(() => VendorUncheckedCreateWithoutIngredientsInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => VendorCreateOrConnectWithoutIngredientsInputSchema), import_zod.z.lazy(() => VendorCreateOrConnectWithoutIngredientsInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => VendorWhereUniqueInputSchema), import_zod.z.lazy(() => VendorWhereUniqueInputSchema).array()]).optional()
}).strict();
var WasteRecordUncheckedCreateNestedManyWithoutIngredienteInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => WasteRecordCreateWithoutIngredienteInputSchema), import_zod.z.lazy(() => WasteRecordCreateWithoutIngredienteInputSchema).array(), import_zod.z.lazy(() => WasteRecordUncheckedCreateWithoutIngredienteInputSchema), import_zod.z.lazy(() => WasteRecordUncheckedCreateWithoutIngredienteInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => WasteRecordCreateOrConnectWithoutIngredienteInputSchema), import_zod.z.lazy(() => WasteRecordCreateOrConnectWithoutIngredienteInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => WasteRecordCreateManyIngredienteInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema), import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema).array()]).optional()
}).strict();
var IngredientAllergenUncheckedCreateNestedManyWithoutIngredientInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenCreateWithoutIngredientInputSchema), import_zod.z.lazy(() => IngredientAllergenCreateWithoutIngredientInputSchema).array(), import_zod.z.lazy(() => IngredientAllergenUncheckedCreateWithoutIngredientInputSchema), import_zod.z.lazy(() => IngredientAllergenUncheckedCreateWithoutIngredientInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenCreateOrConnectWithoutIngredientInputSchema), import_zod.z.lazy(() => IngredientAllergenCreateOrConnectWithoutIngredientInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => IngredientAllergenCreateManyIngredientInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenWhereUniqueInputSchema), import_zod.z.lazy(() => IngredientAllergenWhereUniqueInputSchema).array()]).optional()
}).strict();
var SupplierPriceHistoryUncheckedCreateNestedManyWithoutIngredientInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryCreateWithoutIngredientInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryCreateWithoutIngredientInputSchema).array(), import_zod.z.lazy(() => SupplierPriceHistoryUncheckedCreateWithoutIngredientInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryUncheckedCreateWithoutIngredientInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryCreateOrConnectWithoutIngredientInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryCreateOrConnectWithoutIngredientInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => SupplierPriceHistoryCreateManyIngredientInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema).array()]).optional()
}).strict();
var RecipeIngredientUpdateManyWithoutIngredientNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientCreateWithoutIngredientInputSchema), import_zod.z.lazy(() => RecipeIngredientCreateWithoutIngredientInputSchema).array(), import_zod.z.lazy(() => RecipeIngredientUncheckedCreateWithoutIngredientInputSchema), import_zod.z.lazy(() => RecipeIngredientUncheckedCreateWithoutIngredientInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientCreateOrConnectWithoutIngredientInputSchema), import_zod.z.lazy(() => RecipeIngredientCreateOrConnectWithoutIngredientInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientUpsertWithWhereUniqueWithoutIngredientInputSchema), import_zod.z.lazy(() => RecipeIngredientUpsertWithWhereUniqueWithoutIngredientInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => RecipeIngredientCreateManyIngredientInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientUpdateWithWhereUniqueWithoutIngredientInputSchema), import_zod.z.lazy(() => RecipeIngredientUpdateWithWhereUniqueWithoutIngredientInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientUpdateManyWithWhereWithoutIngredientInputSchema), import_zod.z.lazy(() => RecipeIngredientUpdateManyWithWhereWithoutIngredientInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientScalarWhereInputSchema), import_zod.z.lazy(() => RecipeIngredientScalarWhereInputSchema).array()]).optional()
}).strict();
var InventoryItemUpdateManyWithoutIngredientNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => InventoryItemCreateWithoutIngredientInputSchema), import_zod.z.lazy(() => InventoryItemCreateWithoutIngredientInputSchema).array(), import_zod.z.lazy(() => InventoryItemUncheckedCreateWithoutIngredientInputSchema), import_zod.z.lazy(() => InventoryItemUncheckedCreateWithoutIngredientInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => InventoryItemCreateOrConnectWithoutIngredientInputSchema), import_zod.z.lazy(() => InventoryItemCreateOrConnectWithoutIngredientInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => InventoryItemUpsertWithWhereUniqueWithoutIngredientInputSchema), import_zod.z.lazy(() => InventoryItemUpsertWithWhereUniqueWithoutIngredientInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => InventoryItemCreateManyIngredientInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema), import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema), import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema), import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema), import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => InventoryItemUpdateWithWhereUniqueWithoutIngredientInputSchema), import_zod.z.lazy(() => InventoryItemUpdateWithWhereUniqueWithoutIngredientInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => InventoryItemUpdateManyWithWhereWithoutIngredientInputSchema), import_zod.z.lazy(() => InventoryItemUpdateManyWithWhereWithoutIngredientInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => InventoryItemScalarWhereInputSchema), import_zod.z.lazy(() => InventoryItemScalarWhereInputSchema).array()]).optional()
}).strict();
var OrderItemUpdateManyWithoutIngredientNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => OrderItemCreateWithoutIngredientInputSchema), import_zod.z.lazy(() => OrderItemCreateWithoutIngredientInputSchema).array(), import_zod.z.lazy(() => OrderItemUncheckedCreateWithoutIngredientInputSchema), import_zod.z.lazy(() => OrderItemUncheckedCreateWithoutIngredientInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => OrderItemCreateOrConnectWithoutIngredientInputSchema), import_zod.z.lazy(() => OrderItemCreateOrConnectWithoutIngredientInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => OrderItemUpsertWithWhereUniqueWithoutIngredientInputSchema), import_zod.z.lazy(() => OrderItemUpsertWithWhereUniqueWithoutIngredientInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => OrderItemCreateManyIngredientInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => OrderItemWhereUniqueInputSchema), import_zod.z.lazy(() => OrderItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => OrderItemWhereUniqueInputSchema), import_zod.z.lazy(() => OrderItemWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => OrderItemWhereUniqueInputSchema), import_zod.z.lazy(() => OrderItemWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => OrderItemWhereUniqueInputSchema), import_zod.z.lazy(() => OrderItemWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => OrderItemUpdateWithWhereUniqueWithoutIngredientInputSchema), import_zod.z.lazy(() => OrderItemUpdateWithWhereUniqueWithoutIngredientInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => OrderItemUpdateManyWithWhereWithoutIngredientInputSchema), import_zod.z.lazy(() => OrderItemUpdateManyWithWhereWithoutIngredientInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => OrderItemScalarWhereInputSchema), import_zod.z.lazy(() => OrderItemScalarWhereInputSchema).array()]).optional()
}).strict();
var VendorUpdateManyWithoutIngredientsNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => VendorCreateWithoutIngredientsInputSchema), import_zod.z.lazy(() => VendorCreateWithoutIngredientsInputSchema).array(), import_zod.z.lazy(() => VendorUncheckedCreateWithoutIngredientsInputSchema), import_zod.z.lazy(() => VendorUncheckedCreateWithoutIngredientsInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => VendorCreateOrConnectWithoutIngredientsInputSchema), import_zod.z.lazy(() => VendorCreateOrConnectWithoutIngredientsInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => VendorUpsertWithWhereUniqueWithoutIngredientsInputSchema), import_zod.z.lazy(() => VendorUpsertWithWhereUniqueWithoutIngredientsInputSchema).array()]).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => VendorWhereUniqueInputSchema), import_zod.z.lazy(() => VendorWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => VendorWhereUniqueInputSchema), import_zod.z.lazy(() => VendorWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => VendorWhereUniqueInputSchema), import_zod.z.lazy(() => VendorWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => VendorWhereUniqueInputSchema), import_zod.z.lazy(() => VendorWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => VendorUpdateWithWhereUniqueWithoutIngredientsInputSchema), import_zod.z.lazy(() => VendorUpdateWithWhereUniqueWithoutIngredientsInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => VendorUpdateManyWithWhereWithoutIngredientsInputSchema), import_zod.z.lazy(() => VendorUpdateManyWithWhereWithoutIngredientsInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => VendorScalarWhereInputSchema), import_zod.z.lazy(() => VendorScalarWhereInputSchema).array()]).optional()
}).strict();
var WasteRecordUpdateManyWithoutIngredienteNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => WasteRecordCreateWithoutIngredienteInputSchema), import_zod.z.lazy(() => WasteRecordCreateWithoutIngredienteInputSchema).array(), import_zod.z.lazy(() => WasteRecordUncheckedCreateWithoutIngredienteInputSchema), import_zod.z.lazy(() => WasteRecordUncheckedCreateWithoutIngredienteInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => WasteRecordCreateOrConnectWithoutIngredienteInputSchema), import_zod.z.lazy(() => WasteRecordCreateOrConnectWithoutIngredienteInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => WasteRecordUpsertWithWhereUniqueWithoutIngredienteInputSchema), import_zod.z.lazy(() => WasteRecordUpsertWithWhereUniqueWithoutIngredienteInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => WasteRecordCreateManyIngredienteInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema), import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema), import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema), import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema), import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => WasteRecordUpdateWithWhereUniqueWithoutIngredienteInputSchema), import_zod.z.lazy(() => WasteRecordUpdateWithWhereUniqueWithoutIngredienteInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => WasteRecordUpdateManyWithWhereWithoutIngredienteInputSchema), import_zod.z.lazy(() => WasteRecordUpdateManyWithWhereWithoutIngredienteInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => WasteRecordScalarWhereInputSchema), import_zod.z.lazy(() => WasteRecordScalarWhereInputSchema).array()]).optional()
}).strict();
var IngredientAllergenUpdateManyWithoutIngredientNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenCreateWithoutIngredientInputSchema), import_zod.z.lazy(() => IngredientAllergenCreateWithoutIngredientInputSchema).array(), import_zod.z.lazy(() => IngredientAllergenUncheckedCreateWithoutIngredientInputSchema), import_zod.z.lazy(() => IngredientAllergenUncheckedCreateWithoutIngredientInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenCreateOrConnectWithoutIngredientInputSchema), import_zod.z.lazy(() => IngredientAllergenCreateOrConnectWithoutIngredientInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenUpsertWithWhereUniqueWithoutIngredientInputSchema), import_zod.z.lazy(() => IngredientAllergenUpsertWithWhereUniqueWithoutIngredientInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => IngredientAllergenCreateManyIngredientInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenWhereUniqueInputSchema), import_zod.z.lazy(() => IngredientAllergenWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenWhereUniqueInputSchema), import_zod.z.lazy(() => IngredientAllergenWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenWhereUniqueInputSchema), import_zod.z.lazy(() => IngredientAllergenWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenWhereUniqueInputSchema), import_zod.z.lazy(() => IngredientAllergenWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenUpdateWithWhereUniqueWithoutIngredientInputSchema), import_zod.z.lazy(() => IngredientAllergenUpdateWithWhereUniqueWithoutIngredientInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenUpdateManyWithWhereWithoutIngredientInputSchema), import_zod.z.lazy(() => IngredientAllergenUpdateManyWithWhereWithoutIngredientInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenScalarWhereInputSchema), import_zod.z.lazy(() => IngredientAllergenScalarWhereInputSchema).array()]).optional()
}).strict();
var SupplierPriceHistoryUpdateManyWithoutIngredientNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryCreateWithoutIngredientInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryCreateWithoutIngredientInputSchema).array(), import_zod.z.lazy(() => SupplierPriceHistoryUncheckedCreateWithoutIngredientInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryUncheckedCreateWithoutIngredientInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryCreateOrConnectWithoutIngredientInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryCreateOrConnectWithoutIngredientInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryUpsertWithWhereUniqueWithoutIngredientInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryUpsertWithWhereUniqueWithoutIngredientInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => SupplierPriceHistoryCreateManyIngredientInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryUpdateWithWhereUniqueWithoutIngredientInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryUpdateWithWhereUniqueWithoutIngredientInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryUpdateManyWithWhereWithoutIngredientInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryUpdateManyWithWhereWithoutIngredientInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryScalarWhereInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryScalarWhereInputSchema).array()]).optional()
}).strict();
var DietaryRestrictionUpdateOneWithoutIngredientsNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionCreateWithoutIngredientsInputSchema), import_zod.z.lazy(() => DietaryRestrictionUncheckedCreateWithoutIngredientsInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => DietaryRestrictionCreateOrConnectWithoutIngredientsInputSchema).optional(),
  upsert: import_zod.z.lazy(() => DietaryRestrictionUpsertWithoutIngredientsInputSchema).optional(),
  disconnect: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => DietaryRestrictionWhereInputSchema)]).optional(),
  delete: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => DietaryRestrictionWhereInputSchema)]).optional(),
  connect: import_zod.z.lazy(() => DietaryRestrictionWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionUpdateToOneWithWhereWithoutIngredientsInputSchema), import_zod.z.lazy(() => DietaryRestrictionUpdateWithoutIngredientsInputSchema), import_zod.z.lazy(() => DietaryRestrictionUncheckedUpdateWithoutIngredientsInputSchema)]).optional()
}).strict();
var RecipeIngredientUncheckedUpdateManyWithoutIngredientNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientCreateWithoutIngredientInputSchema), import_zod.z.lazy(() => RecipeIngredientCreateWithoutIngredientInputSchema).array(), import_zod.z.lazy(() => RecipeIngredientUncheckedCreateWithoutIngredientInputSchema), import_zod.z.lazy(() => RecipeIngredientUncheckedCreateWithoutIngredientInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientCreateOrConnectWithoutIngredientInputSchema), import_zod.z.lazy(() => RecipeIngredientCreateOrConnectWithoutIngredientInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientUpsertWithWhereUniqueWithoutIngredientInputSchema), import_zod.z.lazy(() => RecipeIngredientUpsertWithWhereUniqueWithoutIngredientInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => RecipeIngredientCreateManyIngredientInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientUpdateWithWhereUniqueWithoutIngredientInputSchema), import_zod.z.lazy(() => RecipeIngredientUpdateWithWhereUniqueWithoutIngredientInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientUpdateManyWithWhereWithoutIngredientInputSchema), import_zod.z.lazy(() => RecipeIngredientUpdateManyWithWhereWithoutIngredientInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientScalarWhereInputSchema), import_zod.z.lazy(() => RecipeIngredientScalarWhereInputSchema).array()]).optional()
}).strict();
var InventoryItemUncheckedUpdateManyWithoutIngredientNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => InventoryItemCreateWithoutIngredientInputSchema), import_zod.z.lazy(() => InventoryItemCreateWithoutIngredientInputSchema).array(), import_zod.z.lazy(() => InventoryItemUncheckedCreateWithoutIngredientInputSchema), import_zod.z.lazy(() => InventoryItemUncheckedCreateWithoutIngredientInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => InventoryItemCreateOrConnectWithoutIngredientInputSchema), import_zod.z.lazy(() => InventoryItemCreateOrConnectWithoutIngredientInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => InventoryItemUpsertWithWhereUniqueWithoutIngredientInputSchema), import_zod.z.lazy(() => InventoryItemUpsertWithWhereUniqueWithoutIngredientInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => InventoryItemCreateManyIngredientInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema), import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema), import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema), import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema), import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => InventoryItemUpdateWithWhereUniqueWithoutIngredientInputSchema), import_zod.z.lazy(() => InventoryItemUpdateWithWhereUniqueWithoutIngredientInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => InventoryItemUpdateManyWithWhereWithoutIngredientInputSchema), import_zod.z.lazy(() => InventoryItemUpdateManyWithWhereWithoutIngredientInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => InventoryItemScalarWhereInputSchema), import_zod.z.lazy(() => InventoryItemScalarWhereInputSchema).array()]).optional()
}).strict();
var OrderItemUncheckedUpdateManyWithoutIngredientNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => OrderItemCreateWithoutIngredientInputSchema), import_zod.z.lazy(() => OrderItemCreateWithoutIngredientInputSchema).array(), import_zod.z.lazy(() => OrderItemUncheckedCreateWithoutIngredientInputSchema), import_zod.z.lazy(() => OrderItemUncheckedCreateWithoutIngredientInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => OrderItemCreateOrConnectWithoutIngredientInputSchema), import_zod.z.lazy(() => OrderItemCreateOrConnectWithoutIngredientInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => OrderItemUpsertWithWhereUniqueWithoutIngredientInputSchema), import_zod.z.lazy(() => OrderItemUpsertWithWhereUniqueWithoutIngredientInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => OrderItemCreateManyIngredientInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => OrderItemWhereUniqueInputSchema), import_zod.z.lazy(() => OrderItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => OrderItemWhereUniqueInputSchema), import_zod.z.lazy(() => OrderItemWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => OrderItemWhereUniqueInputSchema), import_zod.z.lazy(() => OrderItemWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => OrderItemWhereUniqueInputSchema), import_zod.z.lazy(() => OrderItemWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => OrderItemUpdateWithWhereUniqueWithoutIngredientInputSchema), import_zod.z.lazy(() => OrderItemUpdateWithWhereUniqueWithoutIngredientInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => OrderItemUpdateManyWithWhereWithoutIngredientInputSchema), import_zod.z.lazy(() => OrderItemUpdateManyWithWhereWithoutIngredientInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => OrderItemScalarWhereInputSchema), import_zod.z.lazy(() => OrderItemScalarWhereInputSchema).array()]).optional()
}).strict();
var VendorUncheckedUpdateManyWithoutIngredientsNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => VendorCreateWithoutIngredientsInputSchema), import_zod.z.lazy(() => VendorCreateWithoutIngredientsInputSchema).array(), import_zod.z.lazy(() => VendorUncheckedCreateWithoutIngredientsInputSchema), import_zod.z.lazy(() => VendorUncheckedCreateWithoutIngredientsInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => VendorCreateOrConnectWithoutIngredientsInputSchema), import_zod.z.lazy(() => VendorCreateOrConnectWithoutIngredientsInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => VendorUpsertWithWhereUniqueWithoutIngredientsInputSchema), import_zod.z.lazy(() => VendorUpsertWithWhereUniqueWithoutIngredientsInputSchema).array()]).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => VendorWhereUniqueInputSchema), import_zod.z.lazy(() => VendorWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => VendorWhereUniqueInputSchema), import_zod.z.lazy(() => VendorWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => VendorWhereUniqueInputSchema), import_zod.z.lazy(() => VendorWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => VendorWhereUniqueInputSchema), import_zod.z.lazy(() => VendorWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => VendorUpdateWithWhereUniqueWithoutIngredientsInputSchema), import_zod.z.lazy(() => VendorUpdateWithWhereUniqueWithoutIngredientsInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => VendorUpdateManyWithWhereWithoutIngredientsInputSchema), import_zod.z.lazy(() => VendorUpdateManyWithWhereWithoutIngredientsInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => VendorScalarWhereInputSchema), import_zod.z.lazy(() => VendorScalarWhereInputSchema).array()]).optional()
}).strict();
var WasteRecordUncheckedUpdateManyWithoutIngredienteNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => WasteRecordCreateWithoutIngredienteInputSchema), import_zod.z.lazy(() => WasteRecordCreateWithoutIngredienteInputSchema).array(), import_zod.z.lazy(() => WasteRecordUncheckedCreateWithoutIngredienteInputSchema), import_zod.z.lazy(() => WasteRecordUncheckedCreateWithoutIngredienteInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => WasteRecordCreateOrConnectWithoutIngredienteInputSchema), import_zod.z.lazy(() => WasteRecordCreateOrConnectWithoutIngredienteInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => WasteRecordUpsertWithWhereUniqueWithoutIngredienteInputSchema), import_zod.z.lazy(() => WasteRecordUpsertWithWhereUniqueWithoutIngredienteInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => WasteRecordCreateManyIngredienteInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema), import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema), import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema), import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema), import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => WasteRecordUpdateWithWhereUniqueWithoutIngredienteInputSchema), import_zod.z.lazy(() => WasteRecordUpdateWithWhereUniqueWithoutIngredienteInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => WasteRecordUpdateManyWithWhereWithoutIngredienteInputSchema), import_zod.z.lazy(() => WasteRecordUpdateManyWithWhereWithoutIngredienteInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => WasteRecordScalarWhereInputSchema), import_zod.z.lazy(() => WasteRecordScalarWhereInputSchema).array()]).optional()
}).strict();
var IngredientAllergenUncheckedUpdateManyWithoutIngredientNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenCreateWithoutIngredientInputSchema), import_zod.z.lazy(() => IngredientAllergenCreateWithoutIngredientInputSchema).array(), import_zod.z.lazy(() => IngredientAllergenUncheckedCreateWithoutIngredientInputSchema), import_zod.z.lazy(() => IngredientAllergenUncheckedCreateWithoutIngredientInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenCreateOrConnectWithoutIngredientInputSchema), import_zod.z.lazy(() => IngredientAllergenCreateOrConnectWithoutIngredientInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenUpsertWithWhereUniqueWithoutIngredientInputSchema), import_zod.z.lazy(() => IngredientAllergenUpsertWithWhereUniqueWithoutIngredientInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => IngredientAllergenCreateManyIngredientInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenWhereUniqueInputSchema), import_zod.z.lazy(() => IngredientAllergenWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenWhereUniqueInputSchema), import_zod.z.lazy(() => IngredientAllergenWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenWhereUniqueInputSchema), import_zod.z.lazy(() => IngredientAllergenWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenWhereUniqueInputSchema), import_zod.z.lazy(() => IngredientAllergenWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenUpdateWithWhereUniqueWithoutIngredientInputSchema), import_zod.z.lazy(() => IngredientAllergenUpdateWithWhereUniqueWithoutIngredientInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenUpdateManyWithWhereWithoutIngredientInputSchema), import_zod.z.lazy(() => IngredientAllergenUpdateManyWithWhereWithoutIngredientInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenScalarWhereInputSchema), import_zod.z.lazy(() => IngredientAllergenScalarWhereInputSchema).array()]).optional()
}).strict();
var SupplierPriceHistoryUncheckedUpdateManyWithoutIngredientNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryCreateWithoutIngredientInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryCreateWithoutIngredientInputSchema).array(), import_zod.z.lazy(() => SupplierPriceHistoryUncheckedCreateWithoutIngredientInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryUncheckedCreateWithoutIngredientInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryCreateOrConnectWithoutIngredientInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryCreateOrConnectWithoutIngredientInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryUpsertWithWhereUniqueWithoutIngredientInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryUpsertWithWhereUniqueWithoutIngredientInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => SupplierPriceHistoryCreateManyIngredientInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryUpdateWithWhereUniqueWithoutIngredientInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryUpdateWithWhereUniqueWithoutIngredientInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryUpdateManyWithWhereWithoutIngredientInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryUpdateManyWithWhereWithoutIngredientInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryScalarWhereInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryScalarWhereInputSchema).array()]).optional()
}).strict();
var RecipeCreateNestedOneWithoutIngredientsInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutIngredientsInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutIngredientsInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => RecipeCreateOrConnectWithoutIngredientsInputSchema).optional(),
  connect: import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).optional()
}).strict();
var IngredientCreateNestedOneWithoutRecipeIngredientsInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => IngredientCreateWithoutRecipeIngredientsInputSchema), import_zod.z.lazy(() => IngredientUncheckedCreateWithoutRecipeIngredientsInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => IngredientCreateOrConnectWithoutRecipeIngredientsInputSchema).optional(),
  connect: import_zod.z.lazy(() => IngredientWhereUniqueInputSchema).optional()
}).strict();
var RecipeVersionCreateNestedOneWithoutIngredientsInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionCreateWithoutIngredientsInputSchema), import_zod.z.lazy(() => RecipeVersionUncheckedCreateWithoutIngredientsInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => RecipeVersionCreateOrConnectWithoutIngredientsInputSchema).optional(),
  connect: import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema).optional()
}).strict();
var RecipeUpdateOneRequiredWithoutIngredientsNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutIngredientsInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutIngredientsInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => RecipeCreateOrConnectWithoutIngredientsInputSchema).optional(),
  upsert: import_zod.z.lazy(() => RecipeUpsertWithoutIngredientsInputSchema).optional(),
  connect: import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateToOneWithWhereWithoutIngredientsInputSchema), import_zod.z.lazy(() => RecipeUpdateWithoutIngredientsInputSchema), import_zod.z.lazy(() => RecipeUncheckedUpdateWithoutIngredientsInputSchema)]).optional()
}).strict();
var IngredientUpdateOneRequiredWithoutRecipeIngredientsNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => IngredientCreateWithoutRecipeIngredientsInputSchema), import_zod.z.lazy(() => IngredientUncheckedCreateWithoutRecipeIngredientsInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => IngredientCreateOrConnectWithoutRecipeIngredientsInputSchema).optional(),
  upsert: import_zod.z.lazy(() => IngredientUpsertWithoutRecipeIngredientsInputSchema).optional(),
  connect: import_zod.z.lazy(() => IngredientWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => IngredientUpdateToOneWithWhereWithoutRecipeIngredientsInputSchema), import_zod.z.lazy(() => IngredientUpdateWithoutRecipeIngredientsInputSchema), import_zod.z.lazy(() => IngredientUncheckedUpdateWithoutRecipeIngredientsInputSchema)]).optional()
}).strict();
var RecipeVersionUpdateOneWithoutIngredientsNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionCreateWithoutIngredientsInputSchema), import_zod.z.lazy(() => RecipeVersionUncheckedCreateWithoutIngredientsInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => RecipeVersionCreateOrConnectWithoutIngredientsInputSchema).optional(),
  upsert: import_zod.z.lazy(() => RecipeVersionUpsertWithoutIngredientsInputSchema).optional(),
  disconnect: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeVersionWhereInputSchema)]).optional(),
  delete: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeVersionWhereInputSchema)]).optional(),
  connect: import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionUpdateToOneWithWhereWithoutIngredientsInputSchema), import_zod.z.lazy(() => RecipeVersionUpdateWithoutIngredientsInputSchema), import_zod.z.lazy(() => RecipeVersionUncheckedUpdateWithoutIngredientsInputSchema)]).optional()
}).strict();
var RecipeCreateNestedOneWithoutInstructionsInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutInstructionsInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutInstructionsInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => RecipeCreateOrConnectWithoutInstructionsInputSchema).optional(),
  connect: import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).optional()
}).strict();
var RecipeVersionCreateNestedOneWithoutInstructionsInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionCreateWithoutInstructionsInputSchema), import_zod.z.lazy(() => RecipeVersionUncheckedCreateWithoutInstructionsInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => RecipeVersionCreateOrConnectWithoutInstructionsInputSchema).optional(),
  connect: import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema).optional()
}).strict();
var RecipeUpdateOneRequiredWithoutInstructionsNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutInstructionsInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutInstructionsInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => RecipeCreateOrConnectWithoutInstructionsInputSchema).optional(),
  upsert: import_zod.z.lazy(() => RecipeUpsertWithoutInstructionsInputSchema).optional(),
  connect: import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateToOneWithWhereWithoutInstructionsInputSchema), import_zod.z.lazy(() => RecipeUpdateWithoutInstructionsInputSchema), import_zod.z.lazy(() => RecipeUncheckedUpdateWithoutInstructionsInputSchema)]).optional()
}).strict();
var RecipeVersionUpdateOneWithoutInstructionsNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionCreateWithoutInstructionsInputSchema), import_zod.z.lazy(() => RecipeVersionUncheckedCreateWithoutInstructionsInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => RecipeVersionCreateOrConnectWithoutInstructionsInputSchema).optional(),
  upsert: import_zod.z.lazy(() => RecipeVersionUpsertWithoutInstructionsInputSchema).optional(),
  disconnect: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeVersionWhereInputSchema)]).optional(),
  delete: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => RecipeVersionWhereInputSchema)]).optional(),
  connect: import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionUpdateToOneWithWhereWithoutInstructionsInputSchema), import_zod.z.lazy(() => RecipeVersionUpdateWithoutInstructionsInputSchema), import_zod.z.lazy(() => RecipeVersionUncheckedUpdateWithoutInstructionsInputSchema)]).optional()
}).strict();
var RestaurantCreateNestedOneWithoutInventoryInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RestaurantCreateWithoutInventoryInputSchema), import_zod.z.lazy(() => RestaurantUncheckedCreateWithoutInventoryInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => RestaurantCreateOrConnectWithoutInventoryInputSchema).optional(),
  connect: import_zod.z.lazy(() => RestaurantWhereUniqueInputSchema).optional()
}).strict();
var InventoryItemCreateNestedManyWithoutInventoryInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => InventoryItemCreateWithoutInventoryInputSchema), import_zod.z.lazy(() => InventoryItemCreateWithoutInventoryInputSchema).array(), import_zod.z.lazy(() => InventoryItemUncheckedCreateWithoutInventoryInputSchema), import_zod.z.lazy(() => InventoryItemUncheckedCreateWithoutInventoryInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => InventoryItemCreateOrConnectWithoutInventoryInputSchema), import_zod.z.lazy(() => InventoryItemCreateOrConnectWithoutInventoryInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => InventoryItemCreateManyInventoryInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema), import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var InventoryItemUncheckedCreateNestedManyWithoutInventoryInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => InventoryItemCreateWithoutInventoryInputSchema), import_zod.z.lazy(() => InventoryItemCreateWithoutInventoryInputSchema).array(), import_zod.z.lazy(() => InventoryItemUncheckedCreateWithoutInventoryInputSchema), import_zod.z.lazy(() => InventoryItemUncheckedCreateWithoutInventoryInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => InventoryItemCreateOrConnectWithoutInventoryInputSchema), import_zod.z.lazy(() => InventoryItemCreateOrConnectWithoutInventoryInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => InventoryItemCreateManyInventoryInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema), import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var RestaurantUpdateOneRequiredWithoutInventoryNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RestaurantCreateWithoutInventoryInputSchema), import_zod.z.lazy(() => RestaurantUncheckedCreateWithoutInventoryInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => RestaurantCreateOrConnectWithoutInventoryInputSchema).optional(),
  upsert: import_zod.z.lazy(() => RestaurantUpsertWithoutInventoryInputSchema).optional(),
  connect: import_zod.z.lazy(() => RestaurantWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => RestaurantUpdateToOneWithWhereWithoutInventoryInputSchema), import_zod.z.lazy(() => RestaurantUpdateWithoutInventoryInputSchema), import_zod.z.lazy(() => RestaurantUncheckedUpdateWithoutInventoryInputSchema)]).optional()
}).strict();
var InventoryItemUpdateManyWithoutInventoryNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => InventoryItemCreateWithoutInventoryInputSchema), import_zod.z.lazy(() => InventoryItemCreateWithoutInventoryInputSchema).array(), import_zod.z.lazy(() => InventoryItemUncheckedCreateWithoutInventoryInputSchema), import_zod.z.lazy(() => InventoryItemUncheckedCreateWithoutInventoryInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => InventoryItemCreateOrConnectWithoutInventoryInputSchema), import_zod.z.lazy(() => InventoryItemCreateOrConnectWithoutInventoryInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => InventoryItemUpsertWithWhereUniqueWithoutInventoryInputSchema), import_zod.z.lazy(() => InventoryItemUpsertWithWhereUniqueWithoutInventoryInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => InventoryItemCreateManyInventoryInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema), import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema), import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema), import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema), import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => InventoryItemUpdateWithWhereUniqueWithoutInventoryInputSchema), import_zod.z.lazy(() => InventoryItemUpdateWithWhereUniqueWithoutInventoryInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => InventoryItemUpdateManyWithWhereWithoutInventoryInputSchema), import_zod.z.lazy(() => InventoryItemUpdateManyWithWhereWithoutInventoryInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => InventoryItemScalarWhereInputSchema), import_zod.z.lazy(() => InventoryItemScalarWhereInputSchema).array()]).optional()
}).strict();
var InventoryItemUncheckedUpdateManyWithoutInventoryNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => InventoryItemCreateWithoutInventoryInputSchema), import_zod.z.lazy(() => InventoryItemCreateWithoutInventoryInputSchema).array(), import_zod.z.lazy(() => InventoryItemUncheckedCreateWithoutInventoryInputSchema), import_zod.z.lazy(() => InventoryItemUncheckedCreateWithoutInventoryInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => InventoryItemCreateOrConnectWithoutInventoryInputSchema), import_zod.z.lazy(() => InventoryItemCreateOrConnectWithoutInventoryInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => InventoryItemUpsertWithWhereUniqueWithoutInventoryInputSchema), import_zod.z.lazy(() => InventoryItemUpsertWithWhereUniqueWithoutInventoryInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => InventoryItemCreateManyInventoryInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema), import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema), import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema), import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema), import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => InventoryItemUpdateWithWhereUniqueWithoutInventoryInputSchema), import_zod.z.lazy(() => InventoryItemUpdateWithWhereUniqueWithoutInventoryInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => InventoryItemUpdateManyWithWhereWithoutInventoryInputSchema), import_zod.z.lazy(() => InventoryItemUpdateManyWithWhereWithoutInventoryInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => InventoryItemScalarWhereInputSchema), import_zod.z.lazy(() => InventoryItemScalarWhereInputSchema).array()]).optional()
}).strict();
var InventoryCreateNestedOneWithoutItemsInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => InventoryCreateWithoutItemsInputSchema), import_zod.z.lazy(() => InventoryUncheckedCreateWithoutItemsInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => InventoryCreateOrConnectWithoutItemsInputSchema).optional(),
  connect: import_zod.z.lazy(() => InventoryWhereUniqueInputSchema).optional()
}).strict();
var IngredientCreateNestedOneWithoutInventoryItemsInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => IngredientCreateWithoutInventoryItemsInputSchema), import_zod.z.lazy(() => IngredientUncheckedCreateWithoutInventoryItemsInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => IngredientCreateOrConnectWithoutInventoryItemsInputSchema).optional(),
  connect: import_zod.z.lazy(() => IngredientWhereUniqueInputSchema).optional()
}).strict();
var UserCreateNestedOneWithoutInventoryUpdatesInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutInventoryUpdatesInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutInventoryUpdatesInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => UserCreateOrConnectWithoutInventoryUpdatesInputSchema).optional(),
  connect: import_zod.z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();
var InventoryWithdrawalCreateNestedManyWithoutInventoryItemInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalCreateWithoutInventoryItemInputSchema), import_zod.z.lazy(() => InventoryWithdrawalCreateWithoutInventoryItemInputSchema).array(), import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateWithoutInventoryItemInputSchema), import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateWithoutInventoryItemInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalCreateOrConnectWithoutInventoryItemInputSchema), import_zod.z.lazy(() => InventoryWithdrawalCreateOrConnectWithoutInventoryItemInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => InventoryWithdrawalCreateManyInventoryItemInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema), import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array()]).optional()
}).strict();
var InventoryWithdrawalUncheckedCreateNestedManyWithoutInventoryItemInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalCreateWithoutInventoryItemInputSchema), import_zod.z.lazy(() => InventoryWithdrawalCreateWithoutInventoryItemInputSchema).array(), import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateWithoutInventoryItemInputSchema), import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateWithoutInventoryItemInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalCreateOrConnectWithoutInventoryItemInputSchema), import_zod.z.lazy(() => InventoryWithdrawalCreateOrConnectWithoutInventoryItemInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => InventoryWithdrawalCreateManyInventoryItemInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema), import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array()]).optional()
}).strict();
var InventoryUpdateOneRequiredWithoutItemsNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => InventoryCreateWithoutItemsInputSchema), import_zod.z.lazy(() => InventoryUncheckedCreateWithoutItemsInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => InventoryCreateOrConnectWithoutItemsInputSchema).optional(),
  upsert: import_zod.z.lazy(() => InventoryUpsertWithoutItemsInputSchema).optional(),
  connect: import_zod.z.lazy(() => InventoryWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => InventoryUpdateToOneWithWhereWithoutItemsInputSchema), import_zod.z.lazy(() => InventoryUpdateWithoutItemsInputSchema), import_zod.z.lazy(() => InventoryUncheckedUpdateWithoutItemsInputSchema)]).optional()
}).strict();
var IngredientUpdateOneRequiredWithoutInventoryItemsNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => IngredientCreateWithoutInventoryItemsInputSchema), import_zod.z.lazy(() => IngredientUncheckedCreateWithoutInventoryItemsInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => IngredientCreateOrConnectWithoutInventoryItemsInputSchema).optional(),
  upsert: import_zod.z.lazy(() => IngredientUpsertWithoutInventoryItemsInputSchema).optional(),
  connect: import_zod.z.lazy(() => IngredientWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => IngredientUpdateToOneWithWhereWithoutInventoryItemsInputSchema), import_zod.z.lazy(() => IngredientUpdateWithoutInventoryItemsInputSchema), import_zod.z.lazy(() => IngredientUncheckedUpdateWithoutInventoryItemsInputSchema)]).optional()
}).strict();
var UserUpdateOneWithoutInventoryUpdatesNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutInventoryUpdatesInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutInventoryUpdatesInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => UserCreateOrConnectWithoutInventoryUpdatesInputSchema).optional(),
  upsert: import_zod.z.lazy(() => UserUpsertWithoutInventoryUpdatesInputSchema).optional(),
  disconnect: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => UserWhereInputSchema)]).optional(),
  delete: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => UserWhereInputSchema)]).optional(),
  connect: import_zod.z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => UserUpdateToOneWithWhereWithoutInventoryUpdatesInputSchema), import_zod.z.lazy(() => UserUpdateWithoutInventoryUpdatesInputSchema), import_zod.z.lazy(() => UserUncheckedUpdateWithoutInventoryUpdatesInputSchema)]).optional()
}).strict();
var InventoryWithdrawalUpdateManyWithoutInventoryItemNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalCreateWithoutInventoryItemInputSchema), import_zod.z.lazy(() => InventoryWithdrawalCreateWithoutInventoryItemInputSchema).array(), import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateWithoutInventoryItemInputSchema), import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateWithoutInventoryItemInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalCreateOrConnectWithoutInventoryItemInputSchema), import_zod.z.lazy(() => InventoryWithdrawalCreateOrConnectWithoutInventoryItemInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalUpsertWithWhereUniqueWithoutInventoryItemInputSchema), import_zod.z.lazy(() => InventoryWithdrawalUpsertWithWhereUniqueWithoutInventoryItemInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => InventoryWithdrawalCreateManyInventoryItemInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema), import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema), import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema), import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema), import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalUpdateWithWhereUniqueWithoutInventoryItemInputSchema), import_zod.z.lazy(() => InventoryWithdrawalUpdateWithWhereUniqueWithoutInventoryItemInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalUpdateManyWithWhereWithoutInventoryItemInputSchema), import_zod.z.lazy(() => InventoryWithdrawalUpdateManyWithWhereWithoutInventoryItemInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalScalarWhereInputSchema), import_zod.z.lazy(() => InventoryWithdrawalScalarWhereInputSchema).array()]).optional()
}).strict();
var InventoryWithdrawalUncheckedUpdateManyWithoutInventoryItemNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalCreateWithoutInventoryItemInputSchema), import_zod.z.lazy(() => InventoryWithdrawalCreateWithoutInventoryItemInputSchema).array(), import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateWithoutInventoryItemInputSchema), import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateWithoutInventoryItemInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalCreateOrConnectWithoutInventoryItemInputSchema), import_zod.z.lazy(() => InventoryWithdrawalCreateOrConnectWithoutInventoryItemInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalUpsertWithWhereUniqueWithoutInventoryItemInputSchema), import_zod.z.lazy(() => InventoryWithdrawalUpsertWithWhereUniqueWithoutInventoryItemInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => InventoryWithdrawalCreateManyInventoryItemInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema), import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema), import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema), import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema), import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalUpdateWithWhereUniqueWithoutInventoryItemInputSchema), import_zod.z.lazy(() => InventoryWithdrawalUpdateWithWhereUniqueWithoutInventoryItemInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalUpdateManyWithWhereWithoutInventoryItemInputSchema), import_zod.z.lazy(() => InventoryWithdrawalUpdateManyWithWhereWithoutInventoryItemInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalScalarWhereInputSchema), import_zod.z.lazy(() => InventoryWithdrawalScalarWhereInputSchema).array()]).optional()
}).strict();
var RestaurantCreateNestedOneWithoutOrdersInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RestaurantCreateWithoutOrdersInputSchema), import_zod.z.lazy(() => RestaurantUncheckedCreateWithoutOrdersInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => RestaurantCreateOrConnectWithoutOrdersInputSchema).optional(),
  connect: import_zod.z.lazy(() => RestaurantWhereUniqueInputSchema).optional()
}).strict();
var VendorCreateNestedOneWithoutOrdersInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => VendorCreateWithoutOrdersInputSchema), import_zod.z.lazy(() => VendorUncheckedCreateWithoutOrdersInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => VendorCreateOrConnectWithoutOrdersInputSchema).optional(),
  connect: import_zod.z.lazy(() => VendorWhereUniqueInputSchema).optional()
}).strict();
var OrderItemCreateNestedManyWithoutOrderInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => OrderItemCreateWithoutOrderInputSchema), import_zod.z.lazy(() => OrderItemCreateWithoutOrderInputSchema).array(), import_zod.z.lazy(() => OrderItemUncheckedCreateWithoutOrderInputSchema), import_zod.z.lazy(() => OrderItemUncheckedCreateWithoutOrderInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => OrderItemCreateOrConnectWithoutOrderInputSchema), import_zod.z.lazy(() => OrderItemCreateOrConnectWithoutOrderInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => OrderItemCreateManyOrderInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => OrderItemWhereUniqueInputSchema), import_zod.z.lazy(() => OrderItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var OrderItemUncheckedCreateNestedManyWithoutOrderInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => OrderItemCreateWithoutOrderInputSchema), import_zod.z.lazy(() => OrderItemCreateWithoutOrderInputSchema).array(), import_zod.z.lazy(() => OrderItemUncheckedCreateWithoutOrderInputSchema), import_zod.z.lazy(() => OrderItemUncheckedCreateWithoutOrderInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => OrderItemCreateOrConnectWithoutOrderInputSchema), import_zod.z.lazy(() => OrderItemCreateOrConnectWithoutOrderInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => OrderItemCreateManyOrderInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => OrderItemWhereUniqueInputSchema), import_zod.z.lazy(() => OrderItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var EnumOrderStatusFieldUpdateOperationsInputSchema = import_zod.z.object({
  set: import_zod.z.lazy(() => OrderStatusSchema).optional()
}).strict();
var RestaurantUpdateOneRequiredWithoutOrdersNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RestaurantCreateWithoutOrdersInputSchema), import_zod.z.lazy(() => RestaurantUncheckedCreateWithoutOrdersInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => RestaurantCreateOrConnectWithoutOrdersInputSchema).optional(),
  upsert: import_zod.z.lazy(() => RestaurantUpsertWithoutOrdersInputSchema).optional(),
  connect: import_zod.z.lazy(() => RestaurantWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => RestaurantUpdateToOneWithWhereWithoutOrdersInputSchema), import_zod.z.lazy(() => RestaurantUpdateWithoutOrdersInputSchema), import_zod.z.lazy(() => RestaurantUncheckedUpdateWithoutOrdersInputSchema)]).optional()
}).strict();
var VendorUpdateOneRequiredWithoutOrdersNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => VendorCreateWithoutOrdersInputSchema), import_zod.z.lazy(() => VendorUncheckedCreateWithoutOrdersInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => VendorCreateOrConnectWithoutOrdersInputSchema).optional(),
  upsert: import_zod.z.lazy(() => VendorUpsertWithoutOrdersInputSchema).optional(),
  connect: import_zod.z.lazy(() => VendorWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => VendorUpdateToOneWithWhereWithoutOrdersInputSchema), import_zod.z.lazy(() => VendorUpdateWithoutOrdersInputSchema), import_zod.z.lazy(() => VendorUncheckedUpdateWithoutOrdersInputSchema)]).optional()
}).strict();
var OrderItemUpdateManyWithoutOrderNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => OrderItemCreateWithoutOrderInputSchema), import_zod.z.lazy(() => OrderItemCreateWithoutOrderInputSchema).array(), import_zod.z.lazy(() => OrderItemUncheckedCreateWithoutOrderInputSchema), import_zod.z.lazy(() => OrderItemUncheckedCreateWithoutOrderInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => OrderItemCreateOrConnectWithoutOrderInputSchema), import_zod.z.lazy(() => OrderItemCreateOrConnectWithoutOrderInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => OrderItemUpsertWithWhereUniqueWithoutOrderInputSchema), import_zod.z.lazy(() => OrderItemUpsertWithWhereUniqueWithoutOrderInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => OrderItemCreateManyOrderInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => OrderItemWhereUniqueInputSchema), import_zod.z.lazy(() => OrderItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => OrderItemWhereUniqueInputSchema), import_zod.z.lazy(() => OrderItemWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => OrderItemWhereUniqueInputSchema), import_zod.z.lazy(() => OrderItemWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => OrderItemWhereUniqueInputSchema), import_zod.z.lazy(() => OrderItemWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => OrderItemUpdateWithWhereUniqueWithoutOrderInputSchema), import_zod.z.lazy(() => OrderItemUpdateWithWhereUniqueWithoutOrderInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => OrderItemUpdateManyWithWhereWithoutOrderInputSchema), import_zod.z.lazy(() => OrderItemUpdateManyWithWhereWithoutOrderInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => OrderItemScalarWhereInputSchema), import_zod.z.lazy(() => OrderItemScalarWhereInputSchema).array()]).optional()
}).strict();
var OrderItemUncheckedUpdateManyWithoutOrderNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => OrderItemCreateWithoutOrderInputSchema), import_zod.z.lazy(() => OrderItemCreateWithoutOrderInputSchema).array(), import_zod.z.lazy(() => OrderItemUncheckedCreateWithoutOrderInputSchema), import_zod.z.lazy(() => OrderItemUncheckedCreateWithoutOrderInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => OrderItemCreateOrConnectWithoutOrderInputSchema), import_zod.z.lazy(() => OrderItemCreateOrConnectWithoutOrderInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => OrderItemUpsertWithWhereUniqueWithoutOrderInputSchema), import_zod.z.lazy(() => OrderItemUpsertWithWhereUniqueWithoutOrderInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => OrderItemCreateManyOrderInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => OrderItemWhereUniqueInputSchema), import_zod.z.lazy(() => OrderItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => OrderItemWhereUniqueInputSchema), import_zod.z.lazy(() => OrderItemWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => OrderItemWhereUniqueInputSchema), import_zod.z.lazy(() => OrderItemWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => OrderItemWhereUniqueInputSchema), import_zod.z.lazy(() => OrderItemWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => OrderItemUpdateWithWhereUniqueWithoutOrderInputSchema), import_zod.z.lazy(() => OrderItemUpdateWithWhereUniqueWithoutOrderInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => OrderItemUpdateManyWithWhereWithoutOrderInputSchema), import_zod.z.lazy(() => OrderItemUpdateManyWithWhereWithoutOrderInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => OrderItemScalarWhereInputSchema), import_zod.z.lazy(() => OrderItemScalarWhereInputSchema).array()]).optional()
}).strict();
var OrderCreateNestedOneWithoutItemsInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => OrderCreateWithoutItemsInputSchema), import_zod.z.lazy(() => OrderUncheckedCreateWithoutItemsInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => OrderCreateOrConnectWithoutItemsInputSchema).optional(),
  connect: import_zod.z.lazy(() => OrderWhereUniqueInputSchema).optional()
}).strict();
var IngredientCreateNestedOneWithoutOrderItemsInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => IngredientCreateWithoutOrderItemsInputSchema), import_zod.z.lazy(() => IngredientUncheckedCreateWithoutOrderItemsInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => IngredientCreateOrConnectWithoutOrderItemsInputSchema).optional(),
  connect: import_zod.z.lazy(() => IngredientWhereUniqueInputSchema).optional()
}).strict();
var OrderUpdateOneRequiredWithoutItemsNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => OrderCreateWithoutItemsInputSchema), import_zod.z.lazy(() => OrderUncheckedCreateWithoutItemsInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => OrderCreateOrConnectWithoutItemsInputSchema).optional(),
  upsert: import_zod.z.lazy(() => OrderUpsertWithoutItemsInputSchema).optional(),
  connect: import_zod.z.lazy(() => OrderWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => OrderUpdateToOneWithWhereWithoutItemsInputSchema), import_zod.z.lazy(() => OrderUpdateWithoutItemsInputSchema), import_zod.z.lazy(() => OrderUncheckedUpdateWithoutItemsInputSchema)]).optional()
}).strict();
var IngredientUpdateOneRequiredWithoutOrderItemsNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => IngredientCreateWithoutOrderItemsInputSchema), import_zod.z.lazy(() => IngredientUncheckedCreateWithoutOrderItemsInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => IngredientCreateOrConnectWithoutOrderItemsInputSchema).optional(),
  upsert: import_zod.z.lazy(() => IngredientUpsertWithoutOrderItemsInputSchema).optional(),
  connect: import_zod.z.lazy(() => IngredientWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => IngredientUpdateToOneWithWhereWithoutOrderItemsInputSchema), import_zod.z.lazy(() => IngredientUpdateWithoutOrderItemsInputSchema), import_zod.z.lazy(() => IngredientUncheckedUpdateWithoutOrderItemsInputSchema)]).optional()
}).strict();
var OrderCreateNestedManyWithoutVendorInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => OrderCreateWithoutVendorInputSchema), import_zod.z.lazy(() => OrderCreateWithoutVendorInputSchema).array(), import_zod.z.lazy(() => OrderUncheckedCreateWithoutVendorInputSchema), import_zod.z.lazy(() => OrderUncheckedCreateWithoutVendorInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => OrderCreateOrConnectWithoutVendorInputSchema), import_zod.z.lazy(() => OrderCreateOrConnectWithoutVendorInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => OrderCreateManyVendorInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => OrderWhereUniqueInputSchema), import_zod.z.lazy(() => OrderWhereUniqueInputSchema).array()]).optional()
}).strict();
var IngredientCreateNestedManyWithoutVendorsInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => IngredientCreateWithoutVendorsInputSchema), import_zod.z.lazy(() => IngredientCreateWithoutVendorsInputSchema).array(), import_zod.z.lazy(() => IngredientUncheckedCreateWithoutVendorsInputSchema), import_zod.z.lazy(() => IngredientUncheckedCreateWithoutVendorsInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => IngredientCreateOrConnectWithoutVendorsInputSchema), import_zod.z.lazy(() => IngredientCreateOrConnectWithoutVendorsInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => IngredientWhereUniqueInputSchema), import_zod.z.lazy(() => IngredientWhereUniqueInputSchema).array()]).optional()
}).strict();
var SupplierPriceHistoryCreateNestedManyWithoutVendorInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryCreateWithoutVendorInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryCreateWithoutVendorInputSchema).array(), import_zod.z.lazy(() => SupplierPriceHistoryUncheckedCreateWithoutVendorInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryUncheckedCreateWithoutVendorInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryCreateOrConnectWithoutVendorInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryCreateOrConnectWithoutVendorInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => SupplierPriceHistoryCreateManyVendorInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema).array()]).optional()
}).strict();
var OrderUncheckedCreateNestedManyWithoutVendorInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => OrderCreateWithoutVendorInputSchema), import_zod.z.lazy(() => OrderCreateWithoutVendorInputSchema).array(), import_zod.z.lazy(() => OrderUncheckedCreateWithoutVendorInputSchema), import_zod.z.lazy(() => OrderUncheckedCreateWithoutVendorInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => OrderCreateOrConnectWithoutVendorInputSchema), import_zod.z.lazy(() => OrderCreateOrConnectWithoutVendorInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => OrderCreateManyVendorInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => OrderWhereUniqueInputSchema), import_zod.z.lazy(() => OrderWhereUniqueInputSchema).array()]).optional()
}).strict();
var IngredientUncheckedCreateNestedManyWithoutVendorsInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => IngredientCreateWithoutVendorsInputSchema), import_zod.z.lazy(() => IngredientCreateWithoutVendorsInputSchema).array(), import_zod.z.lazy(() => IngredientUncheckedCreateWithoutVendorsInputSchema), import_zod.z.lazy(() => IngredientUncheckedCreateWithoutVendorsInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => IngredientCreateOrConnectWithoutVendorsInputSchema), import_zod.z.lazy(() => IngredientCreateOrConnectWithoutVendorsInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => IngredientWhereUniqueInputSchema), import_zod.z.lazy(() => IngredientWhereUniqueInputSchema).array()]).optional()
}).strict();
var SupplierPriceHistoryUncheckedCreateNestedManyWithoutVendorInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryCreateWithoutVendorInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryCreateWithoutVendorInputSchema).array(), import_zod.z.lazy(() => SupplierPriceHistoryUncheckedCreateWithoutVendorInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryUncheckedCreateWithoutVendorInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryCreateOrConnectWithoutVendorInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryCreateOrConnectWithoutVendorInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => SupplierPriceHistoryCreateManyVendorInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema).array()]).optional()
}).strict();
var OrderUpdateManyWithoutVendorNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => OrderCreateWithoutVendorInputSchema), import_zod.z.lazy(() => OrderCreateWithoutVendorInputSchema).array(), import_zod.z.lazy(() => OrderUncheckedCreateWithoutVendorInputSchema), import_zod.z.lazy(() => OrderUncheckedCreateWithoutVendorInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => OrderCreateOrConnectWithoutVendorInputSchema), import_zod.z.lazy(() => OrderCreateOrConnectWithoutVendorInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => OrderUpsertWithWhereUniqueWithoutVendorInputSchema), import_zod.z.lazy(() => OrderUpsertWithWhereUniqueWithoutVendorInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => OrderCreateManyVendorInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => OrderWhereUniqueInputSchema), import_zod.z.lazy(() => OrderWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => OrderWhereUniqueInputSchema), import_zod.z.lazy(() => OrderWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => OrderWhereUniqueInputSchema), import_zod.z.lazy(() => OrderWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => OrderWhereUniqueInputSchema), import_zod.z.lazy(() => OrderWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => OrderUpdateWithWhereUniqueWithoutVendorInputSchema), import_zod.z.lazy(() => OrderUpdateWithWhereUniqueWithoutVendorInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => OrderUpdateManyWithWhereWithoutVendorInputSchema), import_zod.z.lazy(() => OrderUpdateManyWithWhereWithoutVendorInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => OrderScalarWhereInputSchema), import_zod.z.lazy(() => OrderScalarWhereInputSchema).array()]).optional()
}).strict();
var IngredientUpdateManyWithoutVendorsNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => IngredientCreateWithoutVendorsInputSchema), import_zod.z.lazy(() => IngredientCreateWithoutVendorsInputSchema).array(), import_zod.z.lazy(() => IngredientUncheckedCreateWithoutVendorsInputSchema), import_zod.z.lazy(() => IngredientUncheckedCreateWithoutVendorsInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => IngredientCreateOrConnectWithoutVendorsInputSchema), import_zod.z.lazy(() => IngredientCreateOrConnectWithoutVendorsInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => IngredientUpsertWithWhereUniqueWithoutVendorsInputSchema), import_zod.z.lazy(() => IngredientUpsertWithWhereUniqueWithoutVendorsInputSchema).array()]).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => IngredientWhereUniqueInputSchema), import_zod.z.lazy(() => IngredientWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => IngredientWhereUniqueInputSchema), import_zod.z.lazy(() => IngredientWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => IngredientWhereUniqueInputSchema), import_zod.z.lazy(() => IngredientWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => IngredientWhereUniqueInputSchema), import_zod.z.lazy(() => IngredientWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => IngredientUpdateWithWhereUniqueWithoutVendorsInputSchema), import_zod.z.lazy(() => IngredientUpdateWithWhereUniqueWithoutVendorsInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => IngredientUpdateManyWithWhereWithoutVendorsInputSchema), import_zod.z.lazy(() => IngredientUpdateManyWithWhereWithoutVendorsInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => IngredientScalarWhereInputSchema), import_zod.z.lazy(() => IngredientScalarWhereInputSchema).array()]).optional()
}).strict();
var SupplierPriceHistoryUpdateManyWithoutVendorNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryCreateWithoutVendorInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryCreateWithoutVendorInputSchema).array(), import_zod.z.lazy(() => SupplierPriceHistoryUncheckedCreateWithoutVendorInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryUncheckedCreateWithoutVendorInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryCreateOrConnectWithoutVendorInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryCreateOrConnectWithoutVendorInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryUpsertWithWhereUniqueWithoutVendorInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryUpsertWithWhereUniqueWithoutVendorInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => SupplierPriceHistoryCreateManyVendorInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryUpdateWithWhereUniqueWithoutVendorInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryUpdateWithWhereUniqueWithoutVendorInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryUpdateManyWithWhereWithoutVendorInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryUpdateManyWithWhereWithoutVendorInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryScalarWhereInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryScalarWhereInputSchema).array()]).optional()
}).strict();
var OrderUncheckedUpdateManyWithoutVendorNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => OrderCreateWithoutVendorInputSchema), import_zod.z.lazy(() => OrderCreateWithoutVendorInputSchema).array(), import_zod.z.lazy(() => OrderUncheckedCreateWithoutVendorInputSchema), import_zod.z.lazy(() => OrderUncheckedCreateWithoutVendorInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => OrderCreateOrConnectWithoutVendorInputSchema), import_zod.z.lazy(() => OrderCreateOrConnectWithoutVendorInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => OrderUpsertWithWhereUniqueWithoutVendorInputSchema), import_zod.z.lazy(() => OrderUpsertWithWhereUniqueWithoutVendorInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => OrderCreateManyVendorInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => OrderWhereUniqueInputSchema), import_zod.z.lazy(() => OrderWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => OrderWhereUniqueInputSchema), import_zod.z.lazy(() => OrderWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => OrderWhereUniqueInputSchema), import_zod.z.lazy(() => OrderWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => OrderWhereUniqueInputSchema), import_zod.z.lazy(() => OrderWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => OrderUpdateWithWhereUniqueWithoutVendorInputSchema), import_zod.z.lazy(() => OrderUpdateWithWhereUniqueWithoutVendorInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => OrderUpdateManyWithWhereWithoutVendorInputSchema), import_zod.z.lazy(() => OrderUpdateManyWithWhereWithoutVendorInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => OrderScalarWhereInputSchema), import_zod.z.lazy(() => OrderScalarWhereInputSchema).array()]).optional()
}).strict();
var IngredientUncheckedUpdateManyWithoutVendorsNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => IngredientCreateWithoutVendorsInputSchema), import_zod.z.lazy(() => IngredientCreateWithoutVendorsInputSchema).array(), import_zod.z.lazy(() => IngredientUncheckedCreateWithoutVendorsInputSchema), import_zod.z.lazy(() => IngredientUncheckedCreateWithoutVendorsInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => IngredientCreateOrConnectWithoutVendorsInputSchema), import_zod.z.lazy(() => IngredientCreateOrConnectWithoutVendorsInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => IngredientUpsertWithWhereUniqueWithoutVendorsInputSchema), import_zod.z.lazy(() => IngredientUpsertWithWhereUniqueWithoutVendorsInputSchema).array()]).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => IngredientWhereUniqueInputSchema), import_zod.z.lazy(() => IngredientWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => IngredientWhereUniqueInputSchema), import_zod.z.lazy(() => IngredientWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => IngredientWhereUniqueInputSchema), import_zod.z.lazy(() => IngredientWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => IngredientWhereUniqueInputSchema), import_zod.z.lazy(() => IngredientWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => IngredientUpdateWithWhereUniqueWithoutVendorsInputSchema), import_zod.z.lazy(() => IngredientUpdateWithWhereUniqueWithoutVendorsInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => IngredientUpdateManyWithWhereWithoutVendorsInputSchema), import_zod.z.lazy(() => IngredientUpdateManyWithWhereWithoutVendorsInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => IngredientScalarWhereInputSchema), import_zod.z.lazy(() => IngredientScalarWhereInputSchema).array()]).optional()
}).strict();
var SupplierPriceHistoryUncheckedUpdateManyWithoutVendorNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryCreateWithoutVendorInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryCreateWithoutVendorInputSchema).array(), import_zod.z.lazy(() => SupplierPriceHistoryUncheckedCreateWithoutVendorInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryUncheckedCreateWithoutVendorInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryCreateOrConnectWithoutVendorInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryCreateOrConnectWithoutVendorInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryUpsertWithWhereUniqueWithoutVendorInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryUpsertWithWhereUniqueWithoutVendorInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => SupplierPriceHistoryCreateManyVendorInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryUpdateWithWhereUniqueWithoutVendorInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryUpdateWithWhereUniqueWithoutVendorInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryUpdateManyWithWhereWithoutVendorInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryUpdateManyWithWhereWithoutVendorInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryScalarWhereInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryScalarWhereInputSchema).array()]).optional()
}).strict();
var UserCreateNestedOneWithoutShiftsInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutShiftsInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutShiftsInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => UserCreateOrConnectWithoutShiftsInputSchema).optional(),
  connect: import_zod.z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();
var ShiftTaskCreateNestedManyWithoutShiftInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => ShiftTaskCreateWithoutShiftInputSchema), import_zod.z.lazy(() => ShiftTaskCreateWithoutShiftInputSchema).array(), import_zod.z.lazy(() => ShiftTaskUncheckedCreateWithoutShiftInputSchema), import_zod.z.lazy(() => ShiftTaskUncheckedCreateWithoutShiftInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => ShiftTaskCreateOrConnectWithoutShiftInputSchema), import_zod.z.lazy(() => ShiftTaskCreateOrConnectWithoutShiftInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => ShiftTaskCreateManyShiftInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => ShiftTaskWhereUniqueInputSchema), import_zod.z.lazy(() => ShiftTaskWhereUniqueInputSchema).array()]).optional()
}).strict();
var ShiftTaskUncheckedCreateNestedManyWithoutShiftInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => ShiftTaskCreateWithoutShiftInputSchema), import_zod.z.lazy(() => ShiftTaskCreateWithoutShiftInputSchema).array(), import_zod.z.lazy(() => ShiftTaskUncheckedCreateWithoutShiftInputSchema), import_zod.z.lazy(() => ShiftTaskUncheckedCreateWithoutShiftInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => ShiftTaskCreateOrConnectWithoutShiftInputSchema), import_zod.z.lazy(() => ShiftTaskCreateOrConnectWithoutShiftInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => ShiftTaskCreateManyShiftInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => ShiftTaskWhereUniqueInputSchema), import_zod.z.lazy(() => ShiftTaskWhereUniqueInputSchema).array()]).optional()
}).strict();
var EnumShiftStatusFieldUpdateOperationsInputSchema = import_zod.z.object({
  set: import_zod.z.lazy(() => ShiftStatusSchema).optional()
}).strict();
var UserUpdateOneRequiredWithoutShiftsNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutShiftsInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutShiftsInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => UserCreateOrConnectWithoutShiftsInputSchema).optional(),
  upsert: import_zod.z.lazy(() => UserUpsertWithoutShiftsInputSchema).optional(),
  connect: import_zod.z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => UserUpdateToOneWithWhereWithoutShiftsInputSchema), import_zod.z.lazy(() => UserUpdateWithoutShiftsInputSchema), import_zod.z.lazy(() => UserUncheckedUpdateWithoutShiftsInputSchema)]).optional()
}).strict();
var ShiftTaskUpdateManyWithoutShiftNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => ShiftTaskCreateWithoutShiftInputSchema), import_zod.z.lazy(() => ShiftTaskCreateWithoutShiftInputSchema).array(), import_zod.z.lazy(() => ShiftTaskUncheckedCreateWithoutShiftInputSchema), import_zod.z.lazy(() => ShiftTaskUncheckedCreateWithoutShiftInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => ShiftTaskCreateOrConnectWithoutShiftInputSchema), import_zod.z.lazy(() => ShiftTaskCreateOrConnectWithoutShiftInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => ShiftTaskUpsertWithWhereUniqueWithoutShiftInputSchema), import_zod.z.lazy(() => ShiftTaskUpsertWithWhereUniqueWithoutShiftInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => ShiftTaskCreateManyShiftInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => ShiftTaskWhereUniqueInputSchema), import_zod.z.lazy(() => ShiftTaskWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => ShiftTaskWhereUniqueInputSchema), import_zod.z.lazy(() => ShiftTaskWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => ShiftTaskWhereUniqueInputSchema), import_zod.z.lazy(() => ShiftTaskWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => ShiftTaskWhereUniqueInputSchema), import_zod.z.lazy(() => ShiftTaskWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => ShiftTaskUpdateWithWhereUniqueWithoutShiftInputSchema), import_zod.z.lazy(() => ShiftTaskUpdateWithWhereUniqueWithoutShiftInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => ShiftTaskUpdateManyWithWhereWithoutShiftInputSchema), import_zod.z.lazy(() => ShiftTaskUpdateManyWithWhereWithoutShiftInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => ShiftTaskScalarWhereInputSchema), import_zod.z.lazy(() => ShiftTaskScalarWhereInputSchema).array()]).optional()
}).strict();
var ShiftTaskUncheckedUpdateManyWithoutShiftNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => ShiftTaskCreateWithoutShiftInputSchema), import_zod.z.lazy(() => ShiftTaskCreateWithoutShiftInputSchema).array(), import_zod.z.lazy(() => ShiftTaskUncheckedCreateWithoutShiftInputSchema), import_zod.z.lazy(() => ShiftTaskUncheckedCreateWithoutShiftInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => ShiftTaskCreateOrConnectWithoutShiftInputSchema), import_zod.z.lazy(() => ShiftTaskCreateOrConnectWithoutShiftInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => ShiftTaskUpsertWithWhereUniqueWithoutShiftInputSchema), import_zod.z.lazy(() => ShiftTaskUpsertWithWhereUniqueWithoutShiftInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => ShiftTaskCreateManyShiftInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => ShiftTaskWhereUniqueInputSchema), import_zod.z.lazy(() => ShiftTaskWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => ShiftTaskWhereUniqueInputSchema), import_zod.z.lazy(() => ShiftTaskWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => ShiftTaskWhereUniqueInputSchema), import_zod.z.lazy(() => ShiftTaskWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => ShiftTaskWhereUniqueInputSchema), import_zod.z.lazy(() => ShiftTaskWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => ShiftTaskUpdateWithWhereUniqueWithoutShiftInputSchema), import_zod.z.lazy(() => ShiftTaskUpdateWithWhereUniqueWithoutShiftInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => ShiftTaskUpdateManyWithWhereWithoutShiftInputSchema), import_zod.z.lazy(() => ShiftTaskUpdateManyWithWhereWithoutShiftInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => ShiftTaskScalarWhereInputSchema), import_zod.z.lazy(() => ShiftTaskScalarWhereInputSchema).array()]).optional()
}).strict();
var RecipeCreateNestedManyWithoutPrepBoardsInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutPrepBoardsInputSchema), import_zod.z.lazy(() => RecipeCreateWithoutPrepBoardsInputSchema).array(), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutPrepBoardsInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutPrepBoardsInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateOrConnectWithoutPrepBoardsInputSchema), import_zod.z.lazy(() => RecipeCreateOrConnectWithoutPrepBoardsInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional()
}).strict();
var PrepItemCreateNestedManyWithoutPrepBoardInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => PrepItemCreateWithoutPrepBoardInputSchema), import_zod.z.lazy(() => PrepItemCreateWithoutPrepBoardInputSchema).array(), import_zod.z.lazy(() => PrepItemUncheckedCreateWithoutPrepBoardInputSchema), import_zod.z.lazy(() => PrepItemUncheckedCreateWithoutPrepBoardInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => PrepItemCreateOrConnectWithoutPrepBoardInputSchema), import_zod.z.lazy(() => PrepItemCreateOrConnectWithoutPrepBoardInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => PrepItemCreateManyPrepBoardInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema), import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var RecipeUncheckedCreateNestedManyWithoutPrepBoardsInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutPrepBoardsInputSchema), import_zod.z.lazy(() => RecipeCreateWithoutPrepBoardsInputSchema).array(), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutPrepBoardsInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutPrepBoardsInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateOrConnectWithoutPrepBoardsInputSchema), import_zod.z.lazy(() => RecipeCreateOrConnectWithoutPrepBoardsInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional()
}).strict();
var PrepItemUncheckedCreateNestedManyWithoutPrepBoardInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => PrepItemCreateWithoutPrepBoardInputSchema), import_zod.z.lazy(() => PrepItemCreateWithoutPrepBoardInputSchema).array(), import_zod.z.lazy(() => PrepItemUncheckedCreateWithoutPrepBoardInputSchema), import_zod.z.lazy(() => PrepItemUncheckedCreateWithoutPrepBoardInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => PrepItemCreateOrConnectWithoutPrepBoardInputSchema), import_zod.z.lazy(() => PrepItemCreateOrConnectWithoutPrepBoardInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => PrepItemCreateManyPrepBoardInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema), import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var EnumPrepStatusFieldUpdateOperationsInputSchema = import_zod.z.object({
  set: import_zod.z.lazy(() => PrepStatusSchema).optional()
}).strict();
var RecipeUpdateManyWithoutPrepBoardsNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutPrepBoardsInputSchema), import_zod.z.lazy(() => RecipeCreateWithoutPrepBoardsInputSchema).array(), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutPrepBoardsInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutPrepBoardsInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateOrConnectWithoutPrepBoardsInputSchema), import_zod.z.lazy(() => RecipeCreateOrConnectWithoutPrepBoardsInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => RecipeUpsertWithWhereUniqueWithoutPrepBoardsInputSchema), import_zod.z.lazy(() => RecipeUpsertWithWhereUniqueWithoutPrepBoardsInputSchema).array()]).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => RecipeWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => RecipeWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => RecipeWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateWithWhereUniqueWithoutPrepBoardsInputSchema), import_zod.z.lazy(() => RecipeUpdateWithWhereUniqueWithoutPrepBoardsInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateManyWithWhereWithoutPrepBoardsInputSchema), import_zod.z.lazy(() => RecipeUpdateManyWithWhereWithoutPrepBoardsInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => RecipeScalarWhereInputSchema), import_zod.z.lazy(() => RecipeScalarWhereInputSchema).array()]).optional()
}).strict();
var PrepItemUpdateManyWithoutPrepBoardNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => PrepItemCreateWithoutPrepBoardInputSchema), import_zod.z.lazy(() => PrepItemCreateWithoutPrepBoardInputSchema).array(), import_zod.z.lazy(() => PrepItemUncheckedCreateWithoutPrepBoardInputSchema), import_zod.z.lazy(() => PrepItemUncheckedCreateWithoutPrepBoardInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => PrepItemCreateOrConnectWithoutPrepBoardInputSchema), import_zod.z.lazy(() => PrepItemCreateOrConnectWithoutPrepBoardInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => PrepItemUpsertWithWhereUniqueWithoutPrepBoardInputSchema), import_zod.z.lazy(() => PrepItemUpsertWithWhereUniqueWithoutPrepBoardInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => PrepItemCreateManyPrepBoardInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema), import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema), import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema), import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema), import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => PrepItemUpdateWithWhereUniqueWithoutPrepBoardInputSchema), import_zod.z.lazy(() => PrepItemUpdateWithWhereUniqueWithoutPrepBoardInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => PrepItemUpdateManyWithWhereWithoutPrepBoardInputSchema), import_zod.z.lazy(() => PrepItemUpdateManyWithWhereWithoutPrepBoardInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => PrepItemScalarWhereInputSchema), import_zod.z.lazy(() => PrepItemScalarWhereInputSchema).array()]).optional()
}).strict();
var RecipeUncheckedUpdateManyWithoutPrepBoardsNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutPrepBoardsInputSchema), import_zod.z.lazy(() => RecipeCreateWithoutPrepBoardsInputSchema).array(), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutPrepBoardsInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutPrepBoardsInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateOrConnectWithoutPrepBoardsInputSchema), import_zod.z.lazy(() => RecipeCreateOrConnectWithoutPrepBoardsInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => RecipeUpsertWithWhereUniqueWithoutPrepBoardsInputSchema), import_zod.z.lazy(() => RecipeUpsertWithWhereUniqueWithoutPrepBoardsInputSchema).array()]).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => RecipeWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => RecipeWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => RecipeWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateWithWhereUniqueWithoutPrepBoardsInputSchema), import_zod.z.lazy(() => RecipeUpdateWithWhereUniqueWithoutPrepBoardsInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateManyWithWhereWithoutPrepBoardsInputSchema), import_zod.z.lazy(() => RecipeUpdateManyWithWhereWithoutPrepBoardsInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => RecipeScalarWhereInputSchema), import_zod.z.lazy(() => RecipeScalarWhereInputSchema).array()]).optional()
}).strict();
var PrepItemUncheckedUpdateManyWithoutPrepBoardNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => PrepItemCreateWithoutPrepBoardInputSchema), import_zod.z.lazy(() => PrepItemCreateWithoutPrepBoardInputSchema).array(), import_zod.z.lazy(() => PrepItemUncheckedCreateWithoutPrepBoardInputSchema), import_zod.z.lazy(() => PrepItemUncheckedCreateWithoutPrepBoardInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => PrepItemCreateOrConnectWithoutPrepBoardInputSchema), import_zod.z.lazy(() => PrepItemCreateOrConnectWithoutPrepBoardInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => PrepItemUpsertWithWhereUniqueWithoutPrepBoardInputSchema), import_zod.z.lazy(() => PrepItemUpsertWithWhereUniqueWithoutPrepBoardInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => PrepItemCreateManyPrepBoardInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema), import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema), import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema), import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema), import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => PrepItemUpdateWithWhereUniqueWithoutPrepBoardInputSchema), import_zod.z.lazy(() => PrepItemUpdateWithWhereUniqueWithoutPrepBoardInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => PrepItemUpdateManyWithWhereWithoutPrepBoardInputSchema), import_zod.z.lazy(() => PrepItemUpdateManyWithWhereWithoutPrepBoardInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => PrepItemScalarWhereInputSchema), import_zod.z.lazy(() => PrepItemScalarWhereInputSchema).array()]).optional()
}).strict();
var PrepBoardCreateNestedOneWithoutPrepItemsInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => PrepBoardCreateWithoutPrepItemsInputSchema), import_zod.z.lazy(() => PrepBoardUncheckedCreateWithoutPrepItemsInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => PrepBoardCreateOrConnectWithoutPrepItemsInputSchema).optional(),
  connect: import_zod.z.lazy(() => PrepBoardWhereUniqueInputSchema).optional()
}).strict();
var RecipeCreateNestedOneWithoutPrepItemsInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutPrepItemsInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutPrepItemsInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => RecipeCreateOrConnectWithoutPrepItemsInputSchema).optional(),
  connect: import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).optional()
}).strict();
var UserCreateNestedOneWithoutPrepItemsInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutPrepItemsInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutPrepItemsInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => UserCreateOrConnectWithoutPrepItemsInputSchema).optional(),
  connect: import_zod.z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();
var PrepBoardUpdateOneRequiredWithoutPrepItemsNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => PrepBoardCreateWithoutPrepItemsInputSchema), import_zod.z.lazy(() => PrepBoardUncheckedCreateWithoutPrepItemsInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => PrepBoardCreateOrConnectWithoutPrepItemsInputSchema).optional(),
  upsert: import_zod.z.lazy(() => PrepBoardUpsertWithoutPrepItemsInputSchema).optional(),
  connect: import_zod.z.lazy(() => PrepBoardWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => PrepBoardUpdateToOneWithWhereWithoutPrepItemsInputSchema), import_zod.z.lazy(() => PrepBoardUpdateWithoutPrepItemsInputSchema), import_zod.z.lazy(() => PrepBoardUncheckedUpdateWithoutPrepItemsInputSchema)]).optional()
}).strict();
var RecipeUpdateOneRequiredWithoutPrepItemsNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutPrepItemsInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutPrepItemsInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => RecipeCreateOrConnectWithoutPrepItemsInputSchema).optional(),
  upsert: import_zod.z.lazy(() => RecipeUpsertWithoutPrepItemsInputSchema).optional(),
  connect: import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateToOneWithWhereWithoutPrepItemsInputSchema), import_zod.z.lazy(() => RecipeUpdateWithoutPrepItemsInputSchema), import_zod.z.lazy(() => RecipeUncheckedUpdateWithoutPrepItemsInputSchema)]).optional()
}).strict();
var UserUpdateOneRequiredWithoutPrepItemsNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutPrepItemsInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutPrepItemsInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => UserCreateOrConnectWithoutPrepItemsInputSchema).optional(),
  upsert: import_zod.z.lazy(() => UserUpsertWithoutPrepItemsInputSchema).optional(),
  connect: import_zod.z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => UserUpdateToOneWithWhereWithoutPrepItemsInputSchema), import_zod.z.lazy(() => UserUpdateWithoutPrepItemsInputSchema), import_zod.z.lazy(() => UserUncheckedUpdateWithoutPrepItemsInputSchema)]).optional()
}).strict();
var UserCreateNestedOneWithoutPasswordResetsInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutPasswordResetsInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutPasswordResetsInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => UserCreateOrConnectWithoutPasswordResetsInputSchema).optional(),
  connect: import_zod.z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();
var UserUpdateOneRequiredWithoutPasswordResetsNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutPasswordResetsInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutPasswordResetsInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => UserCreateOrConnectWithoutPasswordResetsInputSchema).optional(),
  upsert: import_zod.z.lazy(() => UserUpsertWithoutPasswordResetsInputSchema).optional(),
  connect: import_zod.z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => UserUpdateToOneWithWhereWithoutPasswordResetsInputSchema), import_zod.z.lazy(() => UserUpdateWithoutPasswordResetsInputSchema), import_zod.z.lazy(() => UserUncheckedUpdateWithoutPasswordResetsInputSchema)]).optional()
}).strict();
var RestaurantCreateNestedOneWithoutMenusInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RestaurantCreateWithoutMenusInputSchema), import_zod.z.lazy(() => RestaurantUncheckedCreateWithoutMenusInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => RestaurantCreateOrConnectWithoutMenusInputSchema).optional(),
  connect: import_zod.z.lazy(() => RestaurantWhereUniqueInputSchema).optional()
}).strict();
var MenuItemCreateNestedManyWithoutMenuInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateWithoutMenuInputSchema), import_zod.z.lazy(() => MenuItemCreateWithoutMenuInputSchema).array(), import_zod.z.lazy(() => MenuItemUncheckedCreateWithoutMenuInputSchema), import_zod.z.lazy(() => MenuItemUncheckedCreateWithoutMenuInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateOrConnectWithoutMenuInputSchema), import_zod.z.lazy(() => MenuItemCreateOrConnectWithoutMenuInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => MenuItemCreateManyMenuInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema), import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var MenuCategoryCreateNestedManyWithoutMenuInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => MenuCategoryCreateWithoutMenuInputSchema), import_zod.z.lazy(() => MenuCategoryCreateWithoutMenuInputSchema).array(), import_zod.z.lazy(() => MenuCategoryUncheckedCreateWithoutMenuInputSchema), import_zod.z.lazy(() => MenuCategoryUncheckedCreateWithoutMenuInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => MenuCategoryCreateOrConnectWithoutMenuInputSchema), import_zod.z.lazy(() => MenuCategoryCreateOrConnectWithoutMenuInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => MenuCategoryCreateManyMenuInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => MenuCategoryWhereUniqueInputSchema), import_zod.z.lazy(() => MenuCategoryWhereUniqueInputSchema).array()]).optional()
}).strict();
var MenuItemUncheckedCreateNestedManyWithoutMenuInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateWithoutMenuInputSchema), import_zod.z.lazy(() => MenuItemCreateWithoutMenuInputSchema).array(), import_zod.z.lazy(() => MenuItemUncheckedCreateWithoutMenuInputSchema), import_zod.z.lazy(() => MenuItemUncheckedCreateWithoutMenuInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateOrConnectWithoutMenuInputSchema), import_zod.z.lazy(() => MenuItemCreateOrConnectWithoutMenuInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => MenuItemCreateManyMenuInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema), import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var MenuCategoryUncheckedCreateNestedManyWithoutMenuInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => MenuCategoryCreateWithoutMenuInputSchema), import_zod.z.lazy(() => MenuCategoryCreateWithoutMenuInputSchema).array(), import_zod.z.lazy(() => MenuCategoryUncheckedCreateWithoutMenuInputSchema), import_zod.z.lazy(() => MenuCategoryUncheckedCreateWithoutMenuInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => MenuCategoryCreateOrConnectWithoutMenuInputSchema), import_zod.z.lazy(() => MenuCategoryCreateOrConnectWithoutMenuInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => MenuCategoryCreateManyMenuInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => MenuCategoryWhereUniqueInputSchema), import_zod.z.lazy(() => MenuCategoryWhereUniqueInputSchema).array()]).optional()
}).strict();
var RestaurantUpdateOneRequiredWithoutMenusNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RestaurantCreateWithoutMenusInputSchema), import_zod.z.lazy(() => RestaurantUncheckedCreateWithoutMenusInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => RestaurantCreateOrConnectWithoutMenusInputSchema).optional(),
  upsert: import_zod.z.lazy(() => RestaurantUpsertWithoutMenusInputSchema).optional(),
  connect: import_zod.z.lazy(() => RestaurantWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => RestaurantUpdateToOneWithWhereWithoutMenusInputSchema), import_zod.z.lazy(() => RestaurantUpdateWithoutMenusInputSchema), import_zod.z.lazy(() => RestaurantUncheckedUpdateWithoutMenusInputSchema)]).optional()
}).strict();
var MenuItemUpdateManyWithoutMenuNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateWithoutMenuInputSchema), import_zod.z.lazy(() => MenuItemCreateWithoutMenuInputSchema).array(), import_zod.z.lazy(() => MenuItemUncheckedCreateWithoutMenuInputSchema), import_zod.z.lazy(() => MenuItemUncheckedCreateWithoutMenuInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateOrConnectWithoutMenuInputSchema), import_zod.z.lazy(() => MenuItemCreateOrConnectWithoutMenuInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpsertWithWhereUniqueWithoutMenuInputSchema), import_zod.z.lazy(() => MenuItemUpsertWithWhereUniqueWithoutMenuInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => MenuItemCreateManyMenuInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema), import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema), import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema), import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema), import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateWithWhereUniqueWithoutMenuInputSchema), import_zod.z.lazy(() => MenuItemUpdateWithWhereUniqueWithoutMenuInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateManyWithWhereWithoutMenuInputSchema), import_zod.z.lazy(() => MenuItemUpdateManyWithWhereWithoutMenuInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => MenuItemScalarWhereInputSchema), import_zod.z.lazy(() => MenuItemScalarWhereInputSchema).array()]).optional()
}).strict();
var MenuCategoryUpdateManyWithoutMenuNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => MenuCategoryCreateWithoutMenuInputSchema), import_zod.z.lazy(() => MenuCategoryCreateWithoutMenuInputSchema).array(), import_zod.z.lazy(() => MenuCategoryUncheckedCreateWithoutMenuInputSchema), import_zod.z.lazy(() => MenuCategoryUncheckedCreateWithoutMenuInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => MenuCategoryCreateOrConnectWithoutMenuInputSchema), import_zod.z.lazy(() => MenuCategoryCreateOrConnectWithoutMenuInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => MenuCategoryUpsertWithWhereUniqueWithoutMenuInputSchema), import_zod.z.lazy(() => MenuCategoryUpsertWithWhereUniqueWithoutMenuInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => MenuCategoryCreateManyMenuInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => MenuCategoryWhereUniqueInputSchema), import_zod.z.lazy(() => MenuCategoryWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => MenuCategoryWhereUniqueInputSchema), import_zod.z.lazy(() => MenuCategoryWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => MenuCategoryWhereUniqueInputSchema), import_zod.z.lazy(() => MenuCategoryWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => MenuCategoryWhereUniqueInputSchema), import_zod.z.lazy(() => MenuCategoryWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => MenuCategoryUpdateWithWhereUniqueWithoutMenuInputSchema), import_zod.z.lazy(() => MenuCategoryUpdateWithWhereUniqueWithoutMenuInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => MenuCategoryUpdateManyWithWhereWithoutMenuInputSchema), import_zod.z.lazy(() => MenuCategoryUpdateManyWithWhereWithoutMenuInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => MenuCategoryScalarWhereInputSchema), import_zod.z.lazy(() => MenuCategoryScalarWhereInputSchema).array()]).optional()
}).strict();
var MenuItemUncheckedUpdateManyWithoutMenuNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateWithoutMenuInputSchema), import_zod.z.lazy(() => MenuItemCreateWithoutMenuInputSchema).array(), import_zod.z.lazy(() => MenuItemUncheckedCreateWithoutMenuInputSchema), import_zod.z.lazy(() => MenuItemUncheckedCreateWithoutMenuInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateOrConnectWithoutMenuInputSchema), import_zod.z.lazy(() => MenuItemCreateOrConnectWithoutMenuInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpsertWithWhereUniqueWithoutMenuInputSchema), import_zod.z.lazy(() => MenuItemUpsertWithWhereUniqueWithoutMenuInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => MenuItemCreateManyMenuInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema), import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema), import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema), import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema), import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateWithWhereUniqueWithoutMenuInputSchema), import_zod.z.lazy(() => MenuItemUpdateWithWhereUniqueWithoutMenuInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateManyWithWhereWithoutMenuInputSchema), import_zod.z.lazy(() => MenuItemUpdateManyWithWhereWithoutMenuInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => MenuItemScalarWhereInputSchema), import_zod.z.lazy(() => MenuItemScalarWhereInputSchema).array()]).optional()
}).strict();
var MenuCategoryUncheckedUpdateManyWithoutMenuNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => MenuCategoryCreateWithoutMenuInputSchema), import_zod.z.lazy(() => MenuCategoryCreateWithoutMenuInputSchema).array(), import_zod.z.lazy(() => MenuCategoryUncheckedCreateWithoutMenuInputSchema), import_zod.z.lazy(() => MenuCategoryUncheckedCreateWithoutMenuInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => MenuCategoryCreateOrConnectWithoutMenuInputSchema), import_zod.z.lazy(() => MenuCategoryCreateOrConnectWithoutMenuInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => MenuCategoryUpsertWithWhereUniqueWithoutMenuInputSchema), import_zod.z.lazy(() => MenuCategoryUpsertWithWhereUniqueWithoutMenuInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => MenuCategoryCreateManyMenuInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => MenuCategoryWhereUniqueInputSchema), import_zod.z.lazy(() => MenuCategoryWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => MenuCategoryWhereUniqueInputSchema), import_zod.z.lazy(() => MenuCategoryWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => MenuCategoryWhereUniqueInputSchema), import_zod.z.lazy(() => MenuCategoryWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => MenuCategoryWhereUniqueInputSchema), import_zod.z.lazy(() => MenuCategoryWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => MenuCategoryUpdateWithWhereUniqueWithoutMenuInputSchema), import_zod.z.lazy(() => MenuCategoryUpdateWithWhereUniqueWithoutMenuInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => MenuCategoryUpdateManyWithWhereWithoutMenuInputSchema), import_zod.z.lazy(() => MenuCategoryUpdateManyWithWhereWithoutMenuInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => MenuCategoryScalarWhereInputSchema), import_zod.z.lazy(() => MenuCategoryScalarWhereInputSchema).array()]).optional()
}).strict();
var MenuItemCreateNestedOneWithoutMenuItemRecipeInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateWithoutMenuItemRecipeInputSchema), import_zod.z.lazy(() => MenuItemUncheckedCreateWithoutMenuItemRecipeInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => MenuItemCreateOrConnectWithoutMenuItemRecipeInputSchema).optional(),
  connect: import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema).optional()
}).strict();
var RecipeCreateNestedOneWithoutMenuItemRecipeInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutMenuItemRecipeInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutMenuItemRecipeInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => RecipeCreateOrConnectWithoutMenuItemRecipeInputSchema).optional(),
  connect: import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).optional()
}).strict();
var MenuItemUpdateOneRequiredWithoutMenuItemRecipeNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateWithoutMenuItemRecipeInputSchema), import_zod.z.lazy(() => MenuItemUncheckedCreateWithoutMenuItemRecipeInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => MenuItemCreateOrConnectWithoutMenuItemRecipeInputSchema).optional(),
  upsert: import_zod.z.lazy(() => MenuItemUpsertWithoutMenuItemRecipeInputSchema).optional(),
  connect: import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateToOneWithWhereWithoutMenuItemRecipeInputSchema), import_zod.z.lazy(() => MenuItemUpdateWithoutMenuItemRecipeInputSchema), import_zod.z.lazy(() => MenuItemUncheckedUpdateWithoutMenuItemRecipeInputSchema)]).optional()
}).strict();
var RecipeUpdateOneRequiredWithoutMenuItemRecipeNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutMenuItemRecipeInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutMenuItemRecipeInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => RecipeCreateOrConnectWithoutMenuItemRecipeInputSchema).optional(),
  upsert: import_zod.z.lazy(() => RecipeUpsertWithoutMenuItemRecipeInputSchema).optional(),
  connect: import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateToOneWithWhereWithoutMenuItemRecipeInputSchema), import_zod.z.lazy(() => RecipeUpdateWithoutMenuItemRecipeInputSchema), import_zod.z.lazy(() => RecipeUncheckedUpdateWithoutMenuItemRecipeInputSchema)]).optional()
}).strict();
var MenuItemCreaterecipeIdsInputSchema = import_zod.z.object({
  set: import_zod.z.number().array()
}).strict();
var MenuItemCreaterecipeServingsAmountInputSchema = import_zod.z.object({
  set: import_zod.z.number().array()
}).strict();
var MenuItemCreaterecipeServingsCostInputSchema = import_zod.z.object({
  set: import_zod.z.number().array()
}).strict();
var MenuItemCreateallergensInputSchema = import_zod.z.object({
  set: import_zod.z.string().array()
}).strict();
var NutritionalInfoCreateNestedOneWithoutMenuItemInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => NutritionalInfoCreateWithoutMenuItemInputSchema), import_zod.z.lazy(() => NutritionalInfoUncheckedCreateWithoutMenuItemInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => NutritionalInfoCreateOrConnectWithoutMenuItemInputSchema).optional(),
  connect: import_zod.z.lazy(() => NutritionalInfoWhereUniqueInputSchema).optional()
}).strict();
var MenuCreateNestedOneWithoutMenuItemsInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => MenuCreateWithoutMenuItemsInputSchema), import_zod.z.lazy(() => MenuUncheckedCreateWithoutMenuItemsInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => MenuCreateOrConnectWithoutMenuItemsInputSchema).optional(),
  connect: import_zod.z.lazy(() => MenuWhereUniqueInputSchema).optional()
}).strict();
var RecipeCreateNestedManyWithoutMenuItemsInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutMenuItemsInputSchema), import_zod.z.lazy(() => RecipeCreateWithoutMenuItemsInputSchema).array(), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutMenuItemsInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutMenuItemsInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateOrConnectWithoutMenuItemsInputSchema), import_zod.z.lazy(() => RecipeCreateOrConnectWithoutMenuItemsInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional()
}).strict();
var MenuItemRecipeCreateNestedManyWithoutMenuItemInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeCreateWithoutMenuItemInputSchema), import_zod.z.lazy(() => MenuItemRecipeCreateWithoutMenuItemInputSchema).array(), import_zod.z.lazy(() => MenuItemRecipeUncheckedCreateWithoutMenuItemInputSchema), import_zod.z.lazy(() => MenuItemRecipeUncheckedCreateWithoutMenuItemInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeCreateOrConnectWithoutMenuItemInputSchema), import_zod.z.lazy(() => MenuItemRecipeCreateOrConnectWithoutMenuItemInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => MenuItemRecipeCreateManyMenuItemInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeWhereUniqueInputSchema), import_zod.z.lazy(() => MenuItemRecipeWhereUniqueInputSchema).array()]).optional()
}).strict();
var SalesTransactionsCreateNestedManyWithoutMenuItemInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsCreateWithoutMenuItemInputSchema), import_zod.z.lazy(() => SalesTransactionsCreateWithoutMenuItemInputSchema).array(), import_zod.z.lazy(() => SalesTransactionsUncheckedCreateWithoutMenuItemInputSchema), import_zod.z.lazy(() => SalesTransactionsUncheckedCreateWithoutMenuItemInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsCreateOrConnectWithoutMenuItemInputSchema), import_zod.z.lazy(() => SalesTransactionsCreateOrConnectWithoutMenuItemInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => SalesTransactionsCreateManyMenuItemInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsWhereUniqueInputSchema), import_zod.z.lazy(() => SalesTransactionsWhereUniqueInputSchema).array()]).optional()
}).strict();
var LeftoverItemCreateNestedManyWithoutMenuItemInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemCreateWithoutMenuItemInputSchema), import_zod.z.lazy(() => LeftoverItemCreateWithoutMenuItemInputSchema).array(), import_zod.z.lazy(() => LeftoverItemUncheckedCreateWithoutMenuItemInputSchema), import_zod.z.lazy(() => LeftoverItemUncheckedCreateWithoutMenuItemInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemCreateOrConnectWithoutMenuItemInputSchema), import_zod.z.lazy(() => LeftoverItemCreateOrConnectWithoutMenuItemInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => LeftoverItemCreateManyMenuItemInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema), import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var NutritionalRecommendationCreateNestedManyWithoutMenuItemInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => NutritionalRecommendationCreateWithoutMenuItemInputSchema), import_zod.z.lazy(() => NutritionalRecommendationCreateWithoutMenuItemInputSchema).array(), import_zod.z.lazy(() => NutritionalRecommendationUncheckedCreateWithoutMenuItemInputSchema), import_zod.z.lazy(() => NutritionalRecommendationUncheckedCreateWithoutMenuItemInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => NutritionalRecommendationCreateOrConnectWithoutMenuItemInputSchema), import_zod.z.lazy(() => NutritionalRecommendationCreateOrConnectWithoutMenuItemInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => NutritionalRecommendationCreateManyMenuItemInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => NutritionalRecommendationWhereUniqueInputSchema), import_zod.z.lazy(() => NutritionalRecommendationWhereUniqueInputSchema).array()]).optional()
}).strict();
var MenuCategoryCreateNestedOneWithoutMenuItemsInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => MenuCategoryCreateWithoutMenuItemsInputSchema), import_zod.z.lazy(() => MenuCategoryUncheckedCreateWithoutMenuItemsInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => MenuCategoryCreateOrConnectWithoutMenuItemsInputSchema).optional(),
  connect: import_zod.z.lazy(() => MenuCategoryWhereUniqueInputSchema).optional()
}).strict();
var CustomerFeedbackCreateNestedManyWithoutMenuItemInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackCreateWithoutMenuItemInputSchema), import_zod.z.lazy(() => CustomerFeedbackCreateWithoutMenuItemInputSchema).array(), import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateWithoutMenuItemInputSchema), import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateWithoutMenuItemInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackCreateOrConnectWithoutMenuItemInputSchema), import_zod.z.lazy(() => CustomerFeedbackCreateOrConnectWithoutMenuItemInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => CustomerFeedbackCreateManyMenuItemInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema), import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array()]).optional()
}).strict();
var DietaryRestrictionCreateNestedManyWithoutMenuItemsInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionCreateWithoutMenuItemsInputSchema), import_zod.z.lazy(() => DietaryRestrictionCreateWithoutMenuItemsInputSchema).array(), import_zod.z.lazy(() => DietaryRestrictionUncheckedCreateWithoutMenuItemsInputSchema), import_zod.z.lazy(() => DietaryRestrictionUncheckedCreateWithoutMenuItemsInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionCreateOrConnectWithoutMenuItemsInputSchema), import_zod.z.lazy(() => DietaryRestrictionCreateOrConnectWithoutMenuItemsInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionWhereUniqueInputSchema), import_zod.z.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array()]).optional()
}).strict();
var NutritionalInfoUncheckedCreateNestedOneWithoutMenuItemInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => NutritionalInfoCreateWithoutMenuItemInputSchema), import_zod.z.lazy(() => NutritionalInfoUncheckedCreateWithoutMenuItemInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => NutritionalInfoCreateOrConnectWithoutMenuItemInputSchema).optional(),
  connect: import_zod.z.lazy(() => NutritionalInfoWhereUniqueInputSchema).optional()
}).strict();
var RecipeUncheckedCreateNestedManyWithoutMenuItemsInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutMenuItemsInputSchema), import_zod.z.lazy(() => RecipeCreateWithoutMenuItemsInputSchema).array(), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutMenuItemsInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutMenuItemsInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateOrConnectWithoutMenuItemsInputSchema), import_zod.z.lazy(() => RecipeCreateOrConnectWithoutMenuItemsInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional()
}).strict();
var MenuItemRecipeUncheckedCreateNestedManyWithoutMenuItemInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeCreateWithoutMenuItemInputSchema), import_zod.z.lazy(() => MenuItemRecipeCreateWithoutMenuItemInputSchema).array(), import_zod.z.lazy(() => MenuItemRecipeUncheckedCreateWithoutMenuItemInputSchema), import_zod.z.lazy(() => MenuItemRecipeUncheckedCreateWithoutMenuItemInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeCreateOrConnectWithoutMenuItemInputSchema), import_zod.z.lazy(() => MenuItemRecipeCreateOrConnectWithoutMenuItemInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => MenuItemRecipeCreateManyMenuItemInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeWhereUniqueInputSchema), import_zod.z.lazy(() => MenuItemRecipeWhereUniqueInputSchema).array()]).optional()
}).strict();
var SalesTransactionsUncheckedCreateNestedManyWithoutMenuItemInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsCreateWithoutMenuItemInputSchema), import_zod.z.lazy(() => SalesTransactionsCreateWithoutMenuItemInputSchema).array(), import_zod.z.lazy(() => SalesTransactionsUncheckedCreateWithoutMenuItemInputSchema), import_zod.z.lazy(() => SalesTransactionsUncheckedCreateWithoutMenuItemInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsCreateOrConnectWithoutMenuItemInputSchema), import_zod.z.lazy(() => SalesTransactionsCreateOrConnectWithoutMenuItemInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => SalesTransactionsCreateManyMenuItemInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsWhereUniqueInputSchema), import_zod.z.lazy(() => SalesTransactionsWhereUniqueInputSchema).array()]).optional()
}).strict();
var LeftoverItemUncheckedCreateNestedManyWithoutMenuItemInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemCreateWithoutMenuItemInputSchema), import_zod.z.lazy(() => LeftoverItemCreateWithoutMenuItemInputSchema).array(), import_zod.z.lazy(() => LeftoverItemUncheckedCreateWithoutMenuItemInputSchema), import_zod.z.lazy(() => LeftoverItemUncheckedCreateWithoutMenuItemInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemCreateOrConnectWithoutMenuItemInputSchema), import_zod.z.lazy(() => LeftoverItemCreateOrConnectWithoutMenuItemInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => LeftoverItemCreateManyMenuItemInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema), import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema).array()]).optional()
}).strict();
var NutritionalRecommendationUncheckedCreateNestedManyWithoutMenuItemInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => NutritionalRecommendationCreateWithoutMenuItemInputSchema), import_zod.z.lazy(() => NutritionalRecommendationCreateWithoutMenuItemInputSchema).array(), import_zod.z.lazy(() => NutritionalRecommendationUncheckedCreateWithoutMenuItemInputSchema), import_zod.z.lazy(() => NutritionalRecommendationUncheckedCreateWithoutMenuItemInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => NutritionalRecommendationCreateOrConnectWithoutMenuItemInputSchema), import_zod.z.lazy(() => NutritionalRecommendationCreateOrConnectWithoutMenuItemInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => NutritionalRecommendationCreateManyMenuItemInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => NutritionalRecommendationWhereUniqueInputSchema), import_zod.z.lazy(() => NutritionalRecommendationWhereUniqueInputSchema).array()]).optional()
}).strict();
var CustomerFeedbackUncheckedCreateNestedManyWithoutMenuItemInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackCreateWithoutMenuItemInputSchema), import_zod.z.lazy(() => CustomerFeedbackCreateWithoutMenuItemInputSchema).array(), import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateWithoutMenuItemInputSchema), import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateWithoutMenuItemInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackCreateOrConnectWithoutMenuItemInputSchema), import_zod.z.lazy(() => CustomerFeedbackCreateOrConnectWithoutMenuItemInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => CustomerFeedbackCreateManyMenuItemInputEnvelopeSchema).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema), import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array()]).optional()
}).strict();
var DietaryRestrictionUncheckedCreateNestedManyWithoutMenuItemsInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionCreateWithoutMenuItemsInputSchema), import_zod.z.lazy(() => DietaryRestrictionCreateWithoutMenuItemsInputSchema).array(), import_zod.z.lazy(() => DietaryRestrictionUncheckedCreateWithoutMenuItemsInputSchema), import_zod.z.lazy(() => DietaryRestrictionUncheckedCreateWithoutMenuItemsInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionCreateOrConnectWithoutMenuItemsInputSchema), import_zod.z.lazy(() => DietaryRestrictionCreateOrConnectWithoutMenuItemsInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionWhereUniqueInputSchema), import_zod.z.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array()]).optional()
}).strict();
var MenuItemUpdaterecipeIdsInputSchema = import_zod.z.object({
  set: import_zod.z.number().array().optional(),
  push: import_zod.z.union([import_zod.z.number(), import_zod.z.number().array()]).optional()
}).strict();
var MenuItemUpdaterecipeServingsAmountInputSchema = import_zod.z.object({
  set: import_zod.z.number().array().optional(),
  push: import_zod.z.union([import_zod.z.number(), import_zod.z.number().array()]).optional()
}).strict();
var MenuItemUpdaterecipeServingsCostInputSchema = import_zod.z.object({
  set: import_zod.z.number().array().optional(),
  push: import_zod.z.union([import_zod.z.number(), import_zod.z.number().array()]).optional()
}).strict();
var MenuItemUpdateallergensInputSchema = import_zod.z.object({
  set: import_zod.z.string().array().optional(),
  push: import_zod.z.union([import_zod.z.string(), import_zod.z.string().array()]).optional()
}).strict();
var NutritionalInfoUpdateOneWithoutMenuItemNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => NutritionalInfoCreateWithoutMenuItemInputSchema), import_zod.z.lazy(() => NutritionalInfoUncheckedCreateWithoutMenuItemInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => NutritionalInfoCreateOrConnectWithoutMenuItemInputSchema).optional(),
  upsert: import_zod.z.lazy(() => NutritionalInfoUpsertWithoutMenuItemInputSchema).optional(),
  disconnect: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => NutritionalInfoWhereInputSchema)]).optional(),
  delete: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => NutritionalInfoWhereInputSchema)]).optional(),
  connect: import_zod.z.lazy(() => NutritionalInfoWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => NutritionalInfoUpdateToOneWithWhereWithoutMenuItemInputSchema), import_zod.z.lazy(() => NutritionalInfoUpdateWithoutMenuItemInputSchema), import_zod.z.lazy(() => NutritionalInfoUncheckedUpdateWithoutMenuItemInputSchema)]).optional()
}).strict();
var MenuUpdateOneRequiredWithoutMenuItemsNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => MenuCreateWithoutMenuItemsInputSchema), import_zod.z.lazy(() => MenuUncheckedCreateWithoutMenuItemsInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => MenuCreateOrConnectWithoutMenuItemsInputSchema).optional(),
  upsert: import_zod.z.lazy(() => MenuUpsertWithoutMenuItemsInputSchema).optional(),
  connect: import_zod.z.lazy(() => MenuWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => MenuUpdateToOneWithWhereWithoutMenuItemsInputSchema), import_zod.z.lazy(() => MenuUpdateWithoutMenuItemsInputSchema), import_zod.z.lazy(() => MenuUncheckedUpdateWithoutMenuItemsInputSchema)]).optional()
}).strict();
var RecipeUpdateManyWithoutMenuItemsNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutMenuItemsInputSchema), import_zod.z.lazy(() => RecipeCreateWithoutMenuItemsInputSchema).array(), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutMenuItemsInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutMenuItemsInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateOrConnectWithoutMenuItemsInputSchema), import_zod.z.lazy(() => RecipeCreateOrConnectWithoutMenuItemsInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => RecipeUpsertWithWhereUniqueWithoutMenuItemsInputSchema), import_zod.z.lazy(() => RecipeUpsertWithWhereUniqueWithoutMenuItemsInputSchema).array()]).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => RecipeWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => RecipeWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => RecipeWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateWithWhereUniqueWithoutMenuItemsInputSchema), import_zod.z.lazy(() => RecipeUpdateWithWhereUniqueWithoutMenuItemsInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateManyWithWhereWithoutMenuItemsInputSchema), import_zod.z.lazy(() => RecipeUpdateManyWithWhereWithoutMenuItemsInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => RecipeScalarWhereInputSchema), import_zod.z.lazy(() => RecipeScalarWhereInputSchema).array()]).optional()
}).strict();
var MenuItemRecipeUpdateManyWithoutMenuItemNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeCreateWithoutMenuItemInputSchema), import_zod.z.lazy(() => MenuItemRecipeCreateWithoutMenuItemInputSchema).array(), import_zod.z.lazy(() => MenuItemRecipeUncheckedCreateWithoutMenuItemInputSchema), import_zod.z.lazy(() => MenuItemRecipeUncheckedCreateWithoutMenuItemInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeCreateOrConnectWithoutMenuItemInputSchema), import_zod.z.lazy(() => MenuItemRecipeCreateOrConnectWithoutMenuItemInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeUpsertWithWhereUniqueWithoutMenuItemInputSchema), import_zod.z.lazy(() => MenuItemRecipeUpsertWithWhereUniqueWithoutMenuItemInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => MenuItemRecipeCreateManyMenuItemInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeWhereUniqueInputSchema), import_zod.z.lazy(() => MenuItemRecipeWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeWhereUniqueInputSchema), import_zod.z.lazy(() => MenuItemRecipeWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeWhereUniqueInputSchema), import_zod.z.lazy(() => MenuItemRecipeWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeWhereUniqueInputSchema), import_zod.z.lazy(() => MenuItemRecipeWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeUpdateWithWhereUniqueWithoutMenuItemInputSchema), import_zod.z.lazy(() => MenuItemRecipeUpdateWithWhereUniqueWithoutMenuItemInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeUpdateManyWithWhereWithoutMenuItemInputSchema), import_zod.z.lazy(() => MenuItemRecipeUpdateManyWithWhereWithoutMenuItemInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeScalarWhereInputSchema), import_zod.z.lazy(() => MenuItemRecipeScalarWhereInputSchema).array()]).optional()
}).strict();
var SalesTransactionsUpdateManyWithoutMenuItemNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsCreateWithoutMenuItemInputSchema), import_zod.z.lazy(() => SalesTransactionsCreateWithoutMenuItemInputSchema).array(), import_zod.z.lazy(() => SalesTransactionsUncheckedCreateWithoutMenuItemInputSchema), import_zod.z.lazy(() => SalesTransactionsUncheckedCreateWithoutMenuItemInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsCreateOrConnectWithoutMenuItemInputSchema), import_zod.z.lazy(() => SalesTransactionsCreateOrConnectWithoutMenuItemInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsUpsertWithWhereUniqueWithoutMenuItemInputSchema), import_zod.z.lazy(() => SalesTransactionsUpsertWithWhereUniqueWithoutMenuItemInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => SalesTransactionsCreateManyMenuItemInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsWhereUniqueInputSchema), import_zod.z.lazy(() => SalesTransactionsWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsWhereUniqueInputSchema), import_zod.z.lazy(() => SalesTransactionsWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsWhereUniqueInputSchema), import_zod.z.lazy(() => SalesTransactionsWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsWhereUniqueInputSchema), import_zod.z.lazy(() => SalesTransactionsWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsUpdateWithWhereUniqueWithoutMenuItemInputSchema), import_zod.z.lazy(() => SalesTransactionsUpdateWithWhereUniqueWithoutMenuItemInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsUpdateManyWithWhereWithoutMenuItemInputSchema), import_zod.z.lazy(() => SalesTransactionsUpdateManyWithWhereWithoutMenuItemInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsScalarWhereInputSchema), import_zod.z.lazy(() => SalesTransactionsScalarWhereInputSchema).array()]).optional()
}).strict();
var LeftoverItemUpdateManyWithoutMenuItemNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemCreateWithoutMenuItemInputSchema), import_zod.z.lazy(() => LeftoverItemCreateWithoutMenuItemInputSchema).array(), import_zod.z.lazy(() => LeftoverItemUncheckedCreateWithoutMenuItemInputSchema), import_zod.z.lazy(() => LeftoverItemUncheckedCreateWithoutMenuItemInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemCreateOrConnectWithoutMenuItemInputSchema), import_zod.z.lazy(() => LeftoverItemCreateOrConnectWithoutMenuItemInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemUpsertWithWhereUniqueWithoutMenuItemInputSchema), import_zod.z.lazy(() => LeftoverItemUpsertWithWhereUniqueWithoutMenuItemInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => LeftoverItemCreateManyMenuItemInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema), import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema), import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema), import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema), import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemUpdateWithWhereUniqueWithoutMenuItemInputSchema), import_zod.z.lazy(() => LeftoverItemUpdateWithWhereUniqueWithoutMenuItemInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemUpdateManyWithWhereWithoutMenuItemInputSchema), import_zod.z.lazy(() => LeftoverItemUpdateManyWithWhereWithoutMenuItemInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemScalarWhereInputSchema), import_zod.z.lazy(() => LeftoverItemScalarWhereInputSchema).array()]).optional()
}).strict();
var NutritionalRecommendationUpdateManyWithoutMenuItemNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => NutritionalRecommendationCreateWithoutMenuItemInputSchema), import_zod.z.lazy(() => NutritionalRecommendationCreateWithoutMenuItemInputSchema).array(), import_zod.z.lazy(() => NutritionalRecommendationUncheckedCreateWithoutMenuItemInputSchema), import_zod.z.lazy(() => NutritionalRecommendationUncheckedCreateWithoutMenuItemInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => NutritionalRecommendationCreateOrConnectWithoutMenuItemInputSchema), import_zod.z.lazy(() => NutritionalRecommendationCreateOrConnectWithoutMenuItemInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => NutritionalRecommendationUpsertWithWhereUniqueWithoutMenuItemInputSchema), import_zod.z.lazy(() => NutritionalRecommendationUpsertWithWhereUniqueWithoutMenuItemInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => NutritionalRecommendationCreateManyMenuItemInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => NutritionalRecommendationWhereUniqueInputSchema), import_zod.z.lazy(() => NutritionalRecommendationWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => NutritionalRecommendationWhereUniqueInputSchema), import_zod.z.lazy(() => NutritionalRecommendationWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => NutritionalRecommendationWhereUniqueInputSchema), import_zod.z.lazy(() => NutritionalRecommendationWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => NutritionalRecommendationWhereUniqueInputSchema), import_zod.z.lazy(() => NutritionalRecommendationWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => NutritionalRecommendationUpdateWithWhereUniqueWithoutMenuItemInputSchema), import_zod.z.lazy(() => NutritionalRecommendationUpdateWithWhereUniqueWithoutMenuItemInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => NutritionalRecommendationUpdateManyWithWhereWithoutMenuItemInputSchema), import_zod.z.lazy(() => NutritionalRecommendationUpdateManyWithWhereWithoutMenuItemInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => NutritionalRecommendationScalarWhereInputSchema), import_zod.z.lazy(() => NutritionalRecommendationScalarWhereInputSchema).array()]).optional()
}).strict();
var MenuCategoryUpdateOneWithoutMenuItemsNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => MenuCategoryCreateWithoutMenuItemsInputSchema), import_zod.z.lazy(() => MenuCategoryUncheckedCreateWithoutMenuItemsInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => MenuCategoryCreateOrConnectWithoutMenuItemsInputSchema).optional(),
  upsert: import_zod.z.lazy(() => MenuCategoryUpsertWithoutMenuItemsInputSchema).optional(),
  disconnect: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => MenuCategoryWhereInputSchema)]).optional(),
  delete: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => MenuCategoryWhereInputSchema)]).optional(),
  connect: import_zod.z.lazy(() => MenuCategoryWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => MenuCategoryUpdateToOneWithWhereWithoutMenuItemsInputSchema), import_zod.z.lazy(() => MenuCategoryUpdateWithoutMenuItemsInputSchema), import_zod.z.lazy(() => MenuCategoryUncheckedUpdateWithoutMenuItemsInputSchema)]).optional()
}).strict();
var CustomerFeedbackUpdateManyWithoutMenuItemNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackCreateWithoutMenuItemInputSchema), import_zod.z.lazy(() => CustomerFeedbackCreateWithoutMenuItemInputSchema).array(), import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateWithoutMenuItemInputSchema), import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateWithoutMenuItemInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackCreateOrConnectWithoutMenuItemInputSchema), import_zod.z.lazy(() => CustomerFeedbackCreateOrConnectWithoutMenuItemInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackUpsertWithWhereUniqueWithoutMenuItemInputSchema), import_zod.z.lazy(() => CustomerFeedbackUpsertWithWhereUniqueWithoutMenuItemInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => CustomerFeedbackCreateManyMenuItemInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema), import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema), import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema), import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema), import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackUpdateWithWhereUniqueWithoutMenuItemInputSchema), import_zod.z.lazy(() => CustomerFeedbackUpdateWithWhereUniqueWithoutMenuItemInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackUpdateManyWithWhereWithoutMenuItemInputSchema), import_zod.z.lazy(() => CustomerFeedbackUpdateManyWithWhereWithoutMenuItemInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackScalarWhereInputSchema), import_zod.z.lazy(() => CustomerFeedbackScalarWhereInputSchema).array()]).optional()
}).strict();
var DietaryRestrictionUpdateManyWithoutMenuItemsNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionCreateWithoutMenuItemsInputSchema), import_zod.z.lazy(() => DietaryRestrictionCreateWithoutMenuItemsInputSchema).array(), import_zod.z.lazy(() => DietaryRestrictionUncheckedCreateWithoutMenuItemsInputSchema), import_zod.z.lazy(() => DietaryRestrictionUncheckedCreateWithoutMenuItemsInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionCreateOrConnectWithoutMenuItemsInputSchema), import_zod.z.lazy(() => DietaryRestrictionCreateOrConnectWithoutMenuItemsInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionUpsertWithWhereUniqueWithoutMenuItemsInputSchema), import_zod.z.lazy(() => DietaryRestrictionUpsertWithWhereUniqueWithoutMenuItemsInputSchema).array()]).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionWhereUniqueInputSchema), import_zod.z.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionWhereUniqueInputSchema), import_zod.z.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionWhereUniqueInputSchema), import_zod.z.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionWhereUniqueInputSchema), import_zod.z.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionUpdateWithWhereUniqueWithoutMenuItemsInputSchema), import_zod.z.lazy(() => DietaryRestrictionUpdateWithWhereUniqueWithoutMenuItemsInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionUpdateManyWithWhereWithoutMenuItemsInputSchema), import_zod.z.lazy(() => DietaryRestrictionUpdateManyWithWhereWithoutMenuItemsInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionScalarWhereInputSchema), import_zod.z.lazy(() => DietaryRestrictionScalarWhereInputSchema).array()]).optional()
}).strict();
var NutritionalInfoUncheckedUpdateOneWithoutMenuItemNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => NutritionalInfoCreateWithoutMenuItemInputSchema), import_zod.z.lazy(() => NutritionalInfoUncheckedCreateWithoutMenuItemInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => NutritionalInfoCreateOrConnectWithoutMenuItemInputSchema).optional(),
  upsert: import_zod.z.lazy(() => NutritionalInfoUpsertWithoutMenuItemInputSchema).optional(),
  disconnect: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => NutritionalInfoWhereInputSchema)]).optional(),
  delete: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => NutritionalInfoWhereInputSchema)]).optional(),
  connect: import_zod.z.lazy(() => NutritionalInfoWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => NutritionalInfoUpdateToOneWithWhereWithoutMenuItemInputSchema), import_zod.z.lazy(() => NutritionalInfoUpdateWithoutMenuItemInputSchema), import_zod.z.lazy(() => NutritionalInfoUncheckedUpdateWithoutMenuItemInputSchema)]).optional()
}).strict();
var RecipeUncheckedUpdateManyWithoutMenuItemsNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutMenuItemsInputSchema), import_zod.z.lazy(() => RecipeCreateWithoutMenuItemsInputSchema).array(), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutMenuItemsInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutMenuItemsInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateOrConnectWithoutMenuItemsInputSchema), import_zod.z.lazy(() => RecipeCreateOrConnectWithoutMenuItemsInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => RecipeUpsertWithWhereUniqueWithoutMenuItemsInputSchema), import_zod.z.lazy(() => RecipeUpsertWithWhereUniqueWithoutMenuItemsInputSchema).array()]).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => RecipeWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => RecipeWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => RecipeWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => RecipeWhereUniqueInputSchema), import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateWithWhereUniqueWithoutMenuItemsInputSchema), import_zod.z.lazy(() => RecipeUpdateWithWhereUniqueWithoutMenuItemsInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateManyWithWhereWithoutMenuItemsInputSchema), import_zod.z.lazy(() => RecipeUpdateManyWithWhereWithoutMenuItemsInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => RecipeScalarWhereInputSchema), import_zod.z.lazy(() => RecipeScalarWhereInputSchema).array()]).optional()
}).strict();
var MenuItemRecipeUncheckedUpdateManyWithoutMenuItemNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeCreateWithoutMenuItemInputSchema), import_zod.z.lazy(() => MenuItemRecipeCreateWithoutMenuItemInputSchema).array(), import_zod.z.lazy(() => MenuItemRecipeUncheckedCreateWithoutMenuItemInputSchema), import_zod.z.lazy(() => MenuItemRecipeUncheckedCreateWithoutMenuItemInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeCreateOrConnectWithoutMenuItemInputSchema), import_zod.z.lazy(() => MenuItemRecipeCreateOrConnectWithoutMenuItemInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeUpsertWithWhereUniqueWithoutMenuItemInputSchema), import_zod.z.lazy(() => MenuItemRecipeUpsertWithWhereUniqueWithoutMenuItemInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => MenuItemRecipeCreateManyMenuItemInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeWhereUniqueInputSchema), import_zod.z.lazy(() => MenuItemRecipeWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeWhereUniqueInputSchema), import_zod.z.lazy(() => MenuItemRecipeWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeWhereUniqueInputSchema), import_zod.z.lazy(() => MenuItemRecipeWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeWhereUniqueInputSchema), import_zod.z.lazy(() => MenuItemRecipeWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeUpdateWithWhereUniqueWithoutMenuItemInputSchema), import_zod.z.lazy(() => MenuItemRecipeUpdateWithWhereUniqueWithoutMenuItemInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeUpdateManyWithWhereWithoutMenuItemInputSchema), import_zod.z.lazy(() => MenuItemRecipeUpdateManyWithWhereWithoutMenuItemInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeScalarWhereInputSchema), import_zod.z.lazy(() => MenuItemRecipeScalarWhereInputSchema).array()]).optional()
}).strict();
var SalesTransactionsUncheckedUpdateManyWithoutMenuItemNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsCreateWithoutMenuItemInputSchema), import_zod.z.lazy(() => SalesTransactionsCreateWithoutMenuItemInputSchema).array(), import_zod.z.lazy(() => SalesTransactionsUncheckedCreateWithoutMenuItemInputSchema), import_zod.z.lazy(() => SalesTransactionsUncheckedCreateWithoutMenuItemInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsCreateOrConnectWithoutMenuItemInputSchema), import_zod.z.lazy(() => SalesTransactionsCreateOrConnectWithoutMenuItemInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsUpsertWithWhereUniqueWithoutMenuItemInputSchema), import_zod.z.lazy(() => SalesTransactionsUpsertWithWhereUniqueWithoutMenuItemInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => SalesTransactionsCreateManyMenuItemInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsWhereUniqueInputSchema), import_zod.z.lazy(() => SalesTransactionsWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsWhereUniqueInputSchema), import_zod.z.lazy(() => SalesTransactionsWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsWhereUniqueInputSchema), import_zod.z.lazy(() => SalesTransactionsWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsWhereUniqueInputSchema), import_zod.z.lazy(() => SalesTransactionsWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsUpdateWithWhereUniqueWithoutMenuItemInputSchema), import_zod.z.lazy(() => SalesTransactionsUpdateWithWhereUniqueWithoutMenuItemInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsUpdateManyWithWhereWithoutMenuItemInputSchema), import_zod.z.lazy(() => SalesTransactionsUpdateManyWithWhereWithoutMenuItemInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsScalarWhereInputSchema), import_zod.z.lazy(() => SalesTransactionsScalarWhereInputSchema).array()]).optional()
}).strict();
var LeftoverItemUncheckedUpdateManyWithoutMenuItemNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemCreateWithoutMenuItemInputSchema), import_zod.z.lazy(() => LeftoverItemCreateWithoutMenuItemInputSchema).array(), import_zod.z.lazy(() => LeftoverItemUncheckedCreateWithoutMenuItemInputSchema), import_zod.z.lazy(() => LeftoverItemUncheckedCreateWithoutMenuItemInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemCreateOrConnectWithoutMenuItemInputSchema), import_zod.z.lazy(() => LeftoverItemCreateOrConnectWithoutMenuItemInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemUpsertWithWhereUniqueWithoutMenuItemInputSchema), import_zod.z.lazy(() => LeftoverItemUpsertWithWhereUniqueWithoutMenuItemInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => LeftoverItemCreateManyMenuItemInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema), import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema), import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema), import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema), import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemUpdateWithWhereUniqueWithoutMenuItemInputSchema), import_zod.z.lazy(() => LeftoverItemUpdateWithWhereUniqueWithoutMenuItemInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemUpdateManyWithWhereWithoutMenuItemInputSchema), import_zod.z.lazy(() => LeftoverItemUpdateManyWithWhereWithoutMenuItemInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemScalarWhereInputSchema), import_zod.z.lazy(() => LeftoverItemScalarWhereInputSchema).array()]).optional()
}).strict();
var NutritionalRecommendationUncheckedUpdateManyWithoutMenuItemNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => NutritionalRecommendationCreateWithoutMenuItemInputSchema), import_zod.z.lazy(() => NutritionalRecommendationCreateWithoutMenuItemInputSchema).array(), import_zod.z.lazy(() => NutritionalRecommendationUncheckedCreateWithoutMenuItemInputSchema), import_zod.z.lazy(() => NutritionalRecommendationUncheckedCreateWithoutMenuItemInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => NutritionalRecommendationCreateOrConnectWithoutMenuItemInputSchema), import_zod.z.lazy(() => NutritionalRecommendationCreateOrConnectWithoutMenuItemInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => NutritionalRecommendationUpsertWithWhereUniqueWithoutMenuItemInputSchema), import_zod.z.lazy(() => NutritionalRecommendationUpsertWithWhereUniqueWithoutMenuItemInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => NutritionalRecommendationCreateManyMenuItemInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => NutritionalRecommendationWhereUniqueInputSchema), import_zod.z.lazy(() => NutritionalRecommendationWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => NutritionalRecommendationWhereUniqueInputSchema), import_zod.z.lazy(() => NutritionalRecommendationWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => NutritionalRecommendationWhereUniqueInputSchema), import_zod.z.lazy(() => NutritionalRecommendationWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => NutritionalRecommendationWhereUniqueInputSchema), import_zod.z.lazy(() => NutritionalRecommendationWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => NutritionalRecommendationUpdateWithWhereUniqueWithoutMenuItemInputSchema), import_zod.z.lazy(() => NutritionalRecommendationUpdateWithWhereUniqueWithoutMenuItemInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => NutritionalRecommendationUpdateManyWithWhereWithoutMenuItemInputSchema), import_zod.z.lazy(() => NutritionalRecommendationUpdateManyWithWhereWithoutMenuItemInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => NutritionalRecommendationScalarWhereInputSchema), import_zod.z.lazy(() => NutritionalRecommendationScalarWhereInputSchema).array()]).optional()
}).strict();
var CustomerFeedbackUncheckedUpdateManyWithoutMenuItemNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackCreateWithoutMenuItemInputSchema), import_zod.z.lazy(() => CustomerFeedbackCreateWithoutMenuItemInputSchema).array(), import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateWithoutMenuItemInputSchema), import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateWithoutMenuItemInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackCreateOrConnectWithoutMenuItemInputSchema), import_zod.z.lazy(() => CustomerFeedbackCreateOrConnectWithoutMenuItemInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackUpsertWithWhereUniqueWithoutMenuItemInputSchema), import_zod.z.lazy(() => CustomerFeedbackUpsertWithWhereUniqueWithoutMenuItemInputSchema).array()]).optional(),
  createMany: import_zod.z.lazy(() => CustomerFeedbackCreateManyMenuItemInputEnvelopeSchema).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema), import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema), import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema), import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema), import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackUpdateWithWhereUniqueWithoutMenuItemInputSchema), import_zod.z.lazy(() => CustomerFeedbackUpdateWithWhereUniqueWithoutMenuItemInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackUpdateManyWithWhereWithoutMenuItemInputSchema), import_zod.z.lazy(() => CustomerFeedbackUpdateManyWithWhereWithoutMenuItemInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackScalarWhereInputSchema), import_zod.z.lazy(() => CustomerFeedbackScalarWhereInputSchema).array()]).optional()
}).strict();
var DietaryRestrictionUncheckedUpdateManyWithoutMenuItemsNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionCreateWithoutMenuItemsInputSchema), import_zod.z.lazy(() => DietaryRestrictionCreateWithoutMenuItemsInputSchema).array(), import_zod.z.lazy(() => DietaryRestrictionUncheckedCreateWithoutMenuItemsInputSchema), import_zod.z.lazy(() => DietaryRestrictionUncheckedCreateWithoutMenuItemsInputSchema).array()]).optional(),
  connectOrCreate: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionCreateOrConnectWithoutMenuItemsInputSchema), import_zod.z.lazy(() => DietaryRestrictionCreateOrConnectWithoutMenuItemsInputSchema).array()]).optional(),
  upsert: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionUpsertWithWhereUniqueWithoutMenuItemsInputSchema), import_zod.z.lazy(() => DietaryRestrictionUpsertWithWhereUniqueWithoutMenuItemsInputSchema).array()]).optional(),
  set: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionWhereUniqueInputSchema), import_zod.z.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array()]).optional(),
  disconnect: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionWhereUniqueInputSchema), import_zod.z.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array()]).optional(),
  delete: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionWhereUniqueInputSchema), import_zod.z.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array()]).optional(),
  connect: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionWhereUniqueInputSchema), import_zod.z.lazy(() => DietaryRestrictionWhereUniqueInputSchema).array()]).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionUpdateWithWhereUniqueWithoutMenuItemsInputSchema), import_zod.z.lazy(() => DietaryRestrictionUpdateWithWhereUniqueWithoutMenuItemsInputSchema).array()]).optional(),
  updateMany: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionUpdateManyWithWhereWithoutMenuItemsInputSchema), import_zod.z.lazy(() => DietaryRestrictionUpdateManyWithWhereWithoutMenuItemsInputSchema).array()]).optional(),
  deleteMany: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionScalarWhereInputSchema), import_zod.z.lazy(() => DietaryRestrictionScalarWhereInputSchema).array()]).optional()
}).strict();
var MenuItemCreateNestedOneWithoutNutritionalInfoInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateWithoutNutritionalInfoInputSchema), import_zod.z.lazy(() => MenuItemUncheckedCreateWithoutNutritionalInfoInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => MenuItemCreateOrConnectWithoutNutritionalInfoInputSchema).optional(),
  connect: import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema).optional()
}).strict();
var MenuItemUpdateOneWithoutNutritionalInfoNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateWithoutNutritionalInfoInputSchema), import_zod.z.lazy(() => MenuItemUncheckedCreateWithoutNutritionalInfoInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => MenuItemCreateOrConnectWithoutNutritionalInfoInputSchema).optional(),
  upsert: import_zod.z.lazy(() => MenuItemUpsertWithoutNutritionalInfoInputSchema).optional(),
  disconnect: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => MenuItemWhereInputSchema)]).optional(),
  delete: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => MenuItemWhereInputSchema)]).optional(),
  connect: import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateToOneWithWhereWithoutNutritionalInfoInputSchema), import_zod.z.lazy(() => MenuItemUpdateWithoutNutritionalInfoInputSchema), import_zod.z.lazy(() => MenuItemUncheckedUpdateWithoutNutritionalInfoInputSchema)]).optional()
}).strict();
var RecipeCreateNestedOneWithoutFoodCostHistoryInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutFoodCostHistoryInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutFoodCostHistoryInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => RecipeCreateOrConnectWithoutFoodCostHistoryInputSchema).optional(),
  connect: import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).optional()
}).strict();
var RecipeUpdateOneRequiredWithoutFoodCostHistoryNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutFoodCostHistoryInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutFoodCostHistoryInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => RecipeCreateOrConnectWithoutFoodCostHistoryInputSchema).optional(),
  upsert: import_zod.z.lazy(() => RecipeUpsertWithoutFoodCostHistoryInputSchema).optional(),
  connect: import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateToOneWithWhereWithoutFoodCostHistoryInputSchema), import_zod.z.lazy(() => RecipeUpdateWithoutFoodCostHistoryInputSchema), import_zod.z.lazy(() => RecipeUncheckedUpdateWithoutFoodCostHistoryInputSchema)]).optional()
}).strict();
var RecipeCreateNestedOneWithoutPrepHistoryInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutPrepHistoryInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutPrepHistoryInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => RecipeCreateOrConnectWithoutPrepHistoryInputSchema).optional(),
  connect: import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).optional()
}).strict();
var RecipeUpdateOneRequiredWithoutPrepHistoryNestedInputSchema = import_zod.z.object({
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutPrepHistoryInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutPrepHistoryInputSchema)]).optional(),
  connectOrCreate: import_zod.z.lazy(() => RecipeCreateOrConnectWithoutPrepHistoryInputSchema).optional(),
  upsert: import_zod.z.lazy(() => RecipeUpsertWithoutPrepHistoryInputSchema).optional(),
  connect: import_zod.z.lazy(() => RecipeWhereUniqueInputSchema).optional(),
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateToOneWithWhereWithoutPrepHistoryInputSchema), import_zod.z.lazy(() => RecipeUpdateWithoutPrepHistoryInputSchema), import_zod.z.lazy(() => RecipeUncheckedUpdateWithoutPrepHistoryInputSchema)]).optional()
}).strict();
var NestedIntFilterSchema = import_zod.z.object({
  equals: import_zod.z.number().optional(),
  in: import_zod.z.number().array().optional(),
  notIn: import_zod.z.number().array().optional(),
  lt: import_zod.z.number().optional(),
  lte: import_zod.z.number().optional(),
  gt: import_zod.z.number().optional(),
  gte: import_zod.z.number().optional(),
  not: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NestedIntFilterSchema)]).optional()
}).strict();
var NestedStringNullableFilterSchema = import_zod.z.object({
  equals: import_zod.z.string().optional().nullable(),
  in: import_zod.z.string().array().optional().nullable(),
  notIn: import_zod.z.string().array().optional().nullable(),
  lt: import_zod.z.string().optional(),
  lte: import_zod.z.string().optional(),
  gt: import_zod.z.string().optional(),
  gte: import_zod.z.string().optional(),
  contains: import_zod.z.string().optional(),
  startsWith: import_zod.z.string().optional(),
  endsWith: import_zod.z.string().optional(),
  not: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NestedStringNullableFilterSchema)]).optional().nullable()
}).strict();
var NestedFloatFilterSchema = import_zod.z.object({
  equals: import_zod.z.number().optional(),
  in: import_zod.z.number().array().optional(),
  notIn: import_zod.z.number().array().optional(),
  lt: import_zod.z.number().optional(),
  lte: import_zod.z.number().optional(),
  gt: import_zod.z.number().optional(),
  gte: import_zod.z.number().optional(),
  not: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NestedFloatFilterSchema)]).optional()
}).strict();
var NestedDateTimeFilterSchema = import_zod.z.object({
  equals: import_zod.z.coerce.date().optional(),
  in: import_zod.z.coerce.date().array().optional(),
  notIn: import_zod.z.coerce.date().array().optional(),
  lt: import_zod.z.coerce.date().optional(),
  lte: import_zod.z.coerce.date().optional(),
  gt: import_zod.z.coerce.date().optional(),
  gte: import_zod.z.coerce.date().optional(),
  not: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NestedDateTimeFilterSchema)]).optional()
}).strict();
var NestedIntWithAggregatesFilterSchema = import_zod.z.object({
  equals: import_zod.z.number().optional(),
  in: import_zod.z.number().array().optional(),
  notIn: import_zod.z.number().array().optional(),
  lt: import_zod.z.number().optional(),
  lte: import_zod.z.number().optional(),
  gt: import_zod.z.number().optional(),
  gte: import_zod.z.number().optional(),
  not: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NestedIntWithAggregatesFilterSchema)]).optional(),
  _count: import_zod.z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: import_zod.z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: import_zod.z.lazy(() => NestedIntFilterSchema).optional(),
  _min: import_zod.z.lazy(() => NestedIntFilterSchema).optional(),
  _max: import_zod.z.lazy(() => NestedIntFilterSchema).optional()
}).strict();
var NestedStringNullableWithAggregatesFilterSchema = import_zod.z.object({
  equals: import_zod.z.string().optional().nullable(),
  in: import_zod.z.string().array().optional().nullable(),
  notIn: import_zod.z.string().array().optional().nullable(),
  lt: import_zod.z.string().optional(),
  lte: import_zod.z.string().optional(),
  gt: import_zod.z.string().optional(),
  gte: import_zod.z.string().optional(),
  contains: import_zod.z.string().optional(),
  startsWith: import_zod.z.string().optional(),
  endsWith: import_zod.z.string().optional(),
  not: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NestedStringNullableWithAggregatesFilterSchema)]).optional().nullable(),
  _count: import_zod.z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: import_zod.z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: import_zod.z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();
var NestedIntNullableFilterSchema = import_zod.z.object({
  equals: import_zod.z.number().optional().nullable(),
  in: import_zod.z.number().array().optional().nullable(),
  notIn: import_zod.z.number().array().optional().nullable(),
  lt: import_zod.z.number().optional(),
  lte: import_zod.z.number().optional(),
  gt: import_zod.z.number().optional(),
  gte: import_zod.z.number().optional(),
  not: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NestedIntNullableFilterSchema)]).optional().nullable()
}).strict();
var NestedFloatWithAggregatesFilterSchema = import_zod.z.object({
  equals: import_zod.z.number().optional(),
  in: import_zod.z.number().array().optional(),
  notIn: import_zod.z.number().array().optional(),
  lt: import_zod.z.number().optional(),
  lte: import_zod.z.number().optional(),
  gt: import_zod.z.number().optional(),
  gte: import_zod.z.number().optional(),
  not: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NestedFloatWithAggregatesFilterSchema)]).optional(),
  _count: import_zod.z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: import_zod.z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: import_zod.z.lazy(() => NestedFloatFilterSchema).optional(),
  _min: import_zod.z.lazy(() => NestedFloatFilterSchema).optional(),
  _max: import_zod.z.lazy(() => NestedFloatFilterSchema).optional()
}).strict();
var NestedDateTimeWithAggregatesFilterSchema = import_zod.z.object({
  equals: import_zod.z.coerce.date().optional(),
  in: import_zod.z.coerce.date().array().optional(),
  notIn: import_zod.z.coerce.date().array().optional(),
  lt: import_zod.z.coerce.date().optional(),
  lte: import_zod.z.coerce.date().optional(),
  gt: import_zod.z.coerce.date().optional(),
  gte: import_zod.z.coerce.date().optional(),
  not: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NestedDateTimeWithAggregatesFilterSchema)]).optional(),
  _count: import_zod.z.lazy(() => NestedIntFilterSchema).optional(),
  _min: import_zod.z.lazy(() => NestedDateTimeFilterSchema).optional(),
  _max: import_zod.z.lazy(() => NestedDateTimeFilterSchema).optional()
}).strict();
var NestedStringFilterSchema = import_zod.z.object({
  equals: import_zod.z.string().optional(),
  in: import_zod.z.string().array().optional(),
  notIn: import_zod.z.string().array().optional(),
  lt: import_zod.z.string().optional(),
  lte: import_zod.z.string().optional(),
  gt: import_zod.z.string().optional(),
  gte: import_zod.z.string().optional(),
  contains: import_zod.z.string().optional(),
  startsWith: import_zod.z.string().optional(),
  endsWith: import_zod.z.string().optional(),
  not: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NestedStringFilterSchema)]).optional()
}).strict();
var NestedBoolFilterSchema = import_zod.z.object({
  equals: import_zod.z.boolean().optional(),
  not: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => NestedBoolFilterSchema)]).optional()
}).strict();
var NestedStringWithAggregatesFilterSchema = import_zod.z.object({
  equals: import_zod.z.string().optional(),
  in: import_zod.z.string().array().optional(),
  notIn: import_zod.z.string().array().optional(),
  lt: import_zod.z.string().optional(),
  lte: import_zod.z.string().optional(),
  gt: import_zod.z.string().optional(),
  gte: import_zod.z.string().optional(),
  contains: import_zod.z.string().optional(),
  startsWith: import_zod.z.string().optional(),
  endsWith: import_zod.z.string().optional(),
  not: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NestedStringWithAggregatesFilterSchema)]).optional(),
  _count: import_zod.z.lazy(() => NestedIntFilterSchema).optional(),
  _min: import_zod.z.lazy(() => NestedStringFilterSchema).optional(),
  _max: import_zod.z.lazy(() => NestedStringFilterSchema).optional()
}).strict();
var NestedBoolWithAggregatesFilterSchema = import_zod.z.object({
  equals: import_zod.z.boolean().optional(),
  not: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => NestedBoolWithAggregatesFilterSchema)]).optional(),
  _count: import_zod.z.lazy(() => NestedIntFilterSchema).optional(),
  _min: import_zod.z.lazy(() => NestedBoolFilterSchema).optional(),
  _max: import_zod.z.lazy(() => NestedBoolFilterSchema).optional()
}).strict();
var NestedDateTimeNullableFilterSchema = import_zod.z.object({
  equals: import_zod.z.coerce.date().optional().nullable(),
  in: import_zod.z.coerce.date().array().optional().nullable(),
  notIn: import_zod.z.coerce.date().array().optional().nullable(),
  lt: import_zod.z.coerce.date().optional(),
  lte: import_zod.z.coerce.date().optional(),
  gt: import_zod.z.coerce.date().optional(),
  gte: import_zod.z.coerce.date().optional(),
  not: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NestedDateTimeNullableFilterSchema)]).optional().nullable()
}).strict();
var NestedIntNullableWithAggregatesFilterSchema = import_zod.z.object({
  equals: import_zod.z.number().optional().nullable(),
  in: import_zod.z.number().array().optional().nullable(),
  notIn: import_zod.z.number().array().optional().nullable(),
  lt: import_zod.z.number().optional(),
  lte: import_zod.z.number().optional(),
  gt: import_zod.z.number().optional(),
  gte: import_zod.z.number().optional(),
  not: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NestedIntNullableWithAggregatesFilterSchema)]).optional().nullable(),
  _count: import_zod.z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: import_zod.z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: import_zod.z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: import_zod.z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _max: import_zod.z.lazy(() => NestedIntNullableFilterSchema).optional()
}).strict();
var NestedFloatNullableFilterSchema = import_zod.z.object({
  equals: import_zod.z.number().optional().nullable(),
  in: import_zod.z.number().array().optional().nullable(),
  notIn: import_zod.z.number().array().optional().nullable(),
  lt: import_zod.z.number().optional(),
  lte: import_zod.z.number().optional(),
  gt: import_zod.z.number().optional(),
  gte: import_zod.z.number().optional(),
  not: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NestedFloatNullableFilterSchema)]).optional().nullable()
}).strict();
var NestedDateTimeNullableWithAggregatesFilterSchema = import_zod.z.object({
  equals: import_zod.z.coerce.date().optional().nullable(),
  in: import_zod.z.coerce.date().array().optional().nullable(),
  notIn: import_zod.z.coerce.date().array().optional().nullable(),
  lt: import_zod.z.coerce.date().optional(),
  lte: import_zod.z.coerce.date().optional(),
  gt: import_zod.z.coerce.date().optional(),
  gte: import_zod.z.coerce.date().optional(),
  not: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema)]).optional().nullable(),
  _count: import_zod.z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: import_zod.z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
  _max: import_zod.z.lazy(() => NestedDateTimeNullableFilterSchema).optional()
}).strict();
var NestedEnumEquipmentStatusFilterSchema = import_zod.z.object({
  equals: import_zod.z.lazy(() => EquipmentStatusSchema).optional(),
  in: import_zod.z.lazy(() => EquipmentStatusSchema).array().optional(),
  notIn: import_zod.z.lazy(() => EquipmentStatusSchema).array().optional(),
  not: import_zod.z.union([import_zod.z.lazy(() => EquipmentStatusSchema), import_zod.z.lazy(() => NestedEnumEquipmentStatusFilterSchema)]).optional()
}).strict();
var NestedEnumEquipmentStatusWithAggregatesFilterSchema = import_zod.z.object({
  equals: import_zod.z.lazy(() => EquipmentStatusSchema).optional(),
  in: import_zod.z.lazy(() => EquipmentStatusSchema).array().optional(),
  notIn: import_zod.z.lazy(() => EquipmentStatusSchema).array().optional(),
  not: import_zod.z.union([import_zod.z.lazy(() => EquipmentStatusSchema), import_zod.z.lazy(() => NestedEnumEquipmentStatusWithAggregatesFilterSchema)]).optional(),
  _count: import_zod.z.lazy(() => NestedIntFilterSchema).optional(),
  _min: import_zod.z.lazy(() => NestedEnumEquipmentStatusFilterSchema).optional(),
  _max: import_zod.z.lazy(() => NestedEnumEquipmentStatusFilterSchema).optional()
}).strict();
var NestedEnumMaintenanceTypeFilterSchema = import_zod.z.object({
  equals: import_zod.z.lazy(() => MaintenanceTypeSchema).optional(),
  in: import_zod.z.lazy(() => MaintenanceTypeSchema).array().optional(),
  notIn: import_zod.z.lazy(() => MaintenanceTypeSchema).array().optional(),
  not: import_zod.z.union([import_zod.z.lazy(() => MaintenanceTypeSchema), import_zod.z.lazy(() => NestedEnumMaintenanceTypeFilterSchema)]).optional()
}).strict();
var NestedEnumMaintenanceTypeWithAggregatesFilterSchema = import_zod.z.object({
  equals: import_zod.z.lazy(() => MaintenanceTypeSchema).optional(),
  in: import_zod.z.lazy(() => MaintenanceTypeSchema).array().optional(),
  notIn: import_zod.z.lazy(() => MaintenanceTypeSchema).array().optional(),
  not: import_zod.z.union([import_zod.z.lazy(() => MaintenanceTypeSchema), import_zod.z.lazy(() => NestedEnumMaintenanceTypeWithAggregatesFilterSchema)]).optional(),
  _count: import_zod.z.lazy(() => NestedIntFilterSchema).optional(),
  _min: import_zod.z.lazy(() => NestedEnumMaintenanceTypeFilterSchema).optional(),
  _max: import_zod.z.lazy(() => NestedEnumMaintenanceTypeFilterSchema).optional()
}).strict();
var NestedFloatNullableWithAggregatesFilterSchema = import_zod.z.object({
  equals: import_zod.z.number().optional().nullable(),
  in: import_zod.z.number().array().optional().nullable(),
  notIn: import_zod.z.number().array().optional().nullable(),
  lt: import_zod.z.number().optional(),
  lte: import_zod.z.number().optional(),
  gt: import_zod.z.number().optional(),
  gte: import_zod.z.number().optional(),
  not: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NestedFloatNullableWithAggregatesFilterSchema)]).optional().nullable(),
  _count: import_zod.z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: import_zod.z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: import_zod.z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _min: import_zod.z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _max: import_zod.z.lazy(() => NestedFloatNullableFilterSchema).optional()
}).strict();
var NestedEnumChecklistFrequencyFilterSchema = import_zod.z.object({
  equals: import_zod.z.lazy(() => ChecklistFrequencySchema).optional(),
  in: import_zod.z.lazy(() => ChecklistFrequencySchema).array().optional(),
  notIn: import_zod.z.lazy(() => ChecklistFrequencySchema).array().optional(),
  not: import_zod.z.union([import_zod.z.lazy(() => ChecklistFrequencySchema), import_zod.z.lazy(() => NestedEnumChecklistFrequencyFilterSchema)]).optional()
}).strict();
var NestedEnumChecklistFrequencyWithAggregatesFilterSchema = import_zod.z.object({
  equals: import_zod.z.lazy(() => ChecklistFrequencySchema).optional(),
  in: import_zod.z.lazy(() => ChecklistFrequencySchema).array().optional(),
  notIn: import_zod.z.lazy(() => ChecklistFrequencySchema).array().optional(),
  not: import_zod.z.union([import_zod.z.lazy(() => ChecklistFrequencySchema), import_zod.z.lazy(() => NestedEnumChecklistFrequencyWithAggregatesFilterSchema)]).optional(),
  _count: import_zod.z.lazy(() => NestedIntFilterSchema).optional(),
  _min: import_zod.z.lazy(() => NestedEnumChecklistFrequencyFilterSchema).optional(),
  _max: import_zod.z.lazy(() => NestedEnumChecklistFrequencyFilterSchema).optional()
}).strict();
var NestedEnumChecklistItemTypeFilterSchema = import_zod.z.object({
  equals: import_zod.z.lazy(() => ChecklistItemTypeSchema).optional(),
  in: import_zod.z.lazy(() => ChecklistItemTypeSchema).array().optional(),
  notIn: import_zod.z.lazy(() => ChecklistItemTypeSchema).array().optional(),
  not: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemTypeSchema), import_zod.z.lazy(() => NestedEnumChecklistItemTypeFilterSchema)]).optional()
}).strict();
var NestedEnumChecklistItemTypeWithAggregatesFilterSchema = import_zod.z.object({
  equals: import_zod.z.lazy(() => ChecklistItemTypeSchema).optional(),
  in: import_zod.z.lazy(() => ChecklistItemTypeSchema).array().optional(),
  notIn: import_zod.z.lazy(() => ChecklistItemTypeSchema).array().optional(),
  not: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemTypeSchema), import_zod.z.lazy(() => NestedEnumChecklistItemTypeWithAggregatesFilterSchema)]).optional(),
  _count: import_zod.z.lazy(() => NestedIntFilterSchema).optional(),
  _min: import_zod.z.lazy(() => NestedEnumChecklistItemTypeFilterSchema).optional(),
  _max: import_zod.z.lazy(() => NestedEnumChecklistItemTypeFilterSchema).optional()
}).strict();
var NestedEnumChecklistStatusFilterSchema = import_zod.z.object({
  equals: import_zod.z.lazy(() => ChecklistStatusSchema).optional(),
  in: import_zod.z.lazy(() => ChecklistStatusSchema).array().optional(),
  notIn: import_zod.z.lazy(() => ChecklistStatusSchema).array().optional(),
  not: import_zod.z.union([import_zod.z.lazy(() => ChecklistStatusSchema), import_zod.z.lazy(() => NestedEnumChecklistStatusFilterSchema)]).optional()
}).strict();
var NestedEnumChecklistStatusWithAggregatesFilterSchema = import_zod.z.object({
  equals: import_zod.z.lazy(() => ChecklistStatusSchema).optional(),
  in: import_zod.z.lazy(() => ChecklistStatusSchema).array().optional(),
  notIn: import_zod.z.lazy(() => ChecklistStatusSchema).array().optional(),
  not: import_zod.z.union([import_zod.z.lazy(() => ChecklistStatusSchema), import_zod.z.lazy(() => NestedEnumChecklistStatusWithAggregatesFilterSchema)]).optional(),
  _count: import_zod.z.lazy(() => NestedIntFilterSchema).optional(),
  _min: import_zod.z.lazy(() => NestedEnumChecklistStatusFilterSchema).optional(),
  _max: import_zod.z.lazy(() => NestedEnumChecklistStatusFilterSchema).optional()
}).strict();
var NestedEnumFeedbackSourceFilterSchema = import_zod.z.object({
  equals: import_zod.z.lazy(() => FeedbackSourceSchema).optional(),
  in: import_zod.z.lazy(() => FeedbackSourceSchema).array().optional(),
  notIn: import_zod.z.lazy(() => FeedbackSourceSchema).array().optional(),
  not: import_zod.z.union([import_zod.z.lazy(() => FeedbackSourceSchema), import_zod.z.lazy(() => NestedEnumFeedbackSourceFilterSchema)]).optional()
}).strict();
var NestedEnumFeedbackStatusFilterSchema = import_zod.z.object({
  equals: import_zod.z.lazy(() => FeedbackStatusSchema).optional(),
  in: import_zod.z.lazy(() => FeedbackStatusSchema).array().optional(),
  notIn: import_zod.z.lazy(() => FeedbackStatusSchema).array().optional(),
  not: import_zod.z.union([import_zod.z.lazy(() => FeedbackStatusSchema), import_zod.z.lazy(() => NestedEnumFeedbackStatusFilterSchema)]).optional()
}).strict();
var NestedEnumFeedbackSourceWithAggregatesFilterSchema = import_zod.z.object({
  equals: import_zod.z.lazy(() => FeedbackSourceSchema).optional(),
  in: import_zod.z.lazy(() => FeedbackSourceSchema).array().optional(),
  notIn: import_zod.z.lazy(() => FeedbackSourceSchema).array().optional(),
  not: import_zod.z.union([import_zod.z.lazy(() => FeedbackSourceSchema), import_zod.z.lazy(() => NestedEnumFeedbackSourceWithAggregatesFilterSchema)]).optional(),
  _count: import_zod.z.lazy(() => NestedIntFilterSchema).optional(),
  _min: import_zod.z.lazy(() => NestedEnumFeedbackSourceFilterSchema).optional(),
  _max: import_zod.z.lazy(() => NestedEnumFeedbackSourceFilterSchema).optional()
}).strict();
var NestedEnumFeedbackStatusWithAggregatesFilterSchema = import_zod.z.object({
  equals: import_zod.z.lazy(() => FeedbackStatusSchema).optional(),
  in: import_zod.z.lazy(() => FeedbackStatusSchema).array().optional(),
  notIn: import_zod.z.lazy(() => FeedbackStatusSchema).array().optional(),
  not: import_zod.z.union([import_zod.z.lazy(() => FeedbackStatusSchema), import_zod.z.lazy(() => NestedEnumFeedbackStatusWithAggregatesFilterSchema)]).optional(),
  _count: import_zod.z.lazy(() => NestedIntFilterSchema).optional(),
  _min: import_zod.z.lazy(() => NestedEnumFeedbackStatusFilterSchema).optional(),
  _max: import_zod.z.lazy(() => NestedEnumFeedbackStatusFilterSchema).optional()
}).strict();
var NestedEnumTaskTypeFilterSchema = import_zod.z.object({
  equals: import_zod.z.lazy(() => TaskTypeSchema).optional(),
  in: import_zod.z.lazy(() => TaskTypeSchema).array().optional(),
  notIn: import_zod.z.lazy(() => TaskTypeSchema).array().optional(),
  not: import_zod.z.union([import_zod.z.lazy(() => TaskTypeSchema), import_zod.z.lazy(() => NestedEnumTaskTypeFilterSchema)]).optional()
}).strict();
var NestedEnumTaskTypeWithAggregatesFilterSchema = import_zod.z.object({
  equals: import_zod.z.lazy(() => TaskTypeSchema).optional(),
  in: import_zod.z.lazy(() => TaskTypeSchema).array().optional(),
  notIn: import_zod.z.lazy(() => TaskTypeSchema).array().optional(),
  not: import_zod.z.union([import_zod.z.lazy(() => TaskTypeSchema), import_zod.z.lazy(() => NestedEnumTaskTypeWithAggregatesFilterSchema)]).optional(),
  _count: import_zod.z.lazy(() => NestedIntFilterSchema).optional(),
  _min: import_zod.z.lazy(() => NestedEnumTaskTypeFilterSchema).optional(),
  _max: import_zod.z.lazy(() => NestedEnumTaskTypeFilterSchema).optional()
}).strict();
var NestedEnumDayOfWeekFilterSchema = import_zod.z.object({
  equals: import_zod.z.lazy(() => DayOfWeekSchema).optional(),
  in: import_zod.z.lazy(() => DayOfWeekSchema).array().optional(),
  notIn: import_zod.z.lazy(() => DayOfWeekSchema).array().optional(),
  not: import_zod.z.union([import_zod.z.lazy(() => DayOfWeekSchema), import_zod.z.lazy(() => NestedEnumDayOfWeekFilterSchema)]).optional()
}).strict();
var NestedEnumDayOfWeekWithAggregatesFilterSchema = import_zod.z.object({
  equals: import_zod.z.lazy(() => DayOfWeekSchema).optional(),
  in: import_zod.z.lazy(() => DayOfWeekSchema).array().optional(),
  notIn: import_zod.z.lazy(() => DayOfWeekSchema).array().optional(),
  not: import_zod.z.union([import_zod.z.lazy(() => DayOfWeekSchema), import_zod.z.lazy(() => NestedEnumDayOfWeekWithAggregatesFilterSchema)]).optional(),
  _count: import_zod.z.lazy(() => NestedIntFilterSchema).optional(),
  _min: import_zod.z.lazy(() => NestedEnumDayOfWeekFilterSchema).optional(),
  _max: import_zod.z.lazy(() => NestedEnumDayOfWeekFilterSchema).optional()
}).strict();
var NestedEnumConstraintTypeFilterSchema = import_zod.z.object({
  equals: import_zod.z.lazy(() => ConstraintTypeSchema).optional(),
  in: import_zod.z.lazy(() => ConstraintTypeSchema).array().optional(),
  notIn: import_zod.z.lazy(() => ConstraintTypeSchema).array().optional(),
  not: import_zod.z.union([import_zod.z.lazy(() => ConstraintTypeSchema), import_zod.z.lazy(() => NestedEnumConstraintTypeFilterSchema)]).optional()
}).strict();
var NestedEnumConstraintTypeWithAggregatesFilterSchema = import_zod.z.object({
  equals: import_zod.z.lazy(() => ConstraintTypeSchema).optional(),
  in: import_zod.z.lazy(() => ConstraintTypeSchema).array().optional(),
  notIn: import_zod.z.lazy(() => ConstraintTypeSchema).array().optional(),
  not: import_zod.z.union([import_zod.z.lazy(() => ConstraintTypeSchema), import_zod.z.lazy(() => NestedEnumConstraintTypeWithAggregatesFilterSchema)]).optional(),
  _count: import_zod.z.lazy(() => NestedIntFilterSchema).optional(),
  _min: import_zod.z.lazy(() => NestedEnumConstraintTypeFilterSchema).optional(),
  _max: import_zod.z.lazy(() => NestedEnumConstraintTypeFilterSchema).optional()
}).strict();
var NestedEnumUserRoleFilterSchema = import_zod.z.object({
  equals: import_zod.z.lazy(() => UserRoleSchema).optional(),
  in: import_zod.z.lazy(() => UserRoleSchema).array().optional(),
  notIn: import_zod.z.lazy(() => UserRoleSchema).array().optional(),
  not: import_zod.z.union([import_zod.z.lazy(() => UserRoleSchema), import_zod.z.lazy(() => NestedEnumUserRoleFilterSchema)]).optional()
}).strict();
var NestedEnumUserRoleWithAggregatesFilterSchema = import_zod.z.object({
  equals: import_zod.z.lazy(() => UserRoleSchema).optional(),
  in: import_zod.z.lazy(() => UserRoleSchema).array().optional(),
  notIn: import_zod.z.lazy(() => UserRoleSchema).array().optional(),
  not: import_zod.z.union([import_zod.z.lazy(() => UserRoleSchema), import_zod.z.lazy(() => NestedEnumUserRoleWithAggregatesFilterSchema)]).optional(),
  _count: import_zod.z.lazy(() => NestedIntFilterSchema).optional(),
  _min: import_zod.z.lazy(() => NestedEnumUserRoleFilterSchema).optional(),
  _max: import_zod.z.lazy(() => NestedEnumUserRoleFilterSchema).optional()
}).strict();
var NestedEnumOrderStatusFilterSchema = import_zod.z.object({
  equals: import_zod.z.lazy(() => OrderStatusSchema).optional(),
  in: import_zod.z.lazy(() => OrderStatusSchema).array().optional(),
  notIn: import_zod.z.lazy(() => OrderStatusSchema).array().optional(),
  not: import_zod.z.union([import_zod.z.lazy(() => OrderStatusSchema), import_zod.z.lazy(() => NestedEnumOrderStatusFilterSchema)]).optional()
}).strict();
var NestedEnumOrderStatusWithAggregatesFilterSchema = import_zod.z.object({
  equals: import_zod.z.lazy(() => OrderStatusSchema).optional(),
  in: import_zod.z.lazy(() => OrderStatusSchema).array().optional(),
  notIn: import_zod.z.lazy(() => OrderStatusSchema).array().optional(),
  not: import_zod.z.union([import_zod.z.lazy(() => OrderStatusSchema), import_zod.z.lazy(() => NestedEnumOrderStatusWithAggregatesFilterSchema)]).optional(),
  _count: import_zod.z.lazy(() => NestedIntFilterSchema).optional(),
  _min: import_zod.z.lazy(() => NestedEnumOrderStatusFilterSchema).optional(),
  _max: import_zod.z.lazy(() => NestedEnumOrderStatusFilterSchema).optional()
}).strict();
var NestedEnumShiftStatusFilterSchema = import_zod.z.object({
  equals: import_zod.z.lazy(() => ShiftStatusSchema).optional(),
  in: import_zod.z.lazy(() => ShiftStatusSchema).array().optional(),
  notIn: import_zod.z.lazy(() => ShiftStatusSchema).array().optional(),
  not: import_zod.z.union([import_zod.z.lazy(() => ShiftStatusSchema), import_zod.z.lazy(() => NestedEnumShiftStatusFilterSchema)]).optional()
}).strict();
var NestedEnumShiftStatusWithAggregatesFilterSchema = import_zod.z.object({
  equals: import_zod.z.lazy(() => ShiftStatusSchema).optional(),
  in: import_zod.z.lazy(() => ShiftStatusSchema).array().optional(),
  notIn: import_zod.z.lazy(() => ShiftStatusSchema).array().optional(),
  not: import_zod.z.union([import_zod.z.lazy(() => ShiftStatusSchema), import_zod.z.lazy(() => NestedEnumShiftStatusWithAggregatesFilterSchema)]).optional(),
  _count: import_zod.z.lazy(() => NestedIntFilterSchema).optional(),
  _min: import_zod.z.lazy(() => NestedEnumShiftStatusFilterSchema).optional(),
  _max: import_zod.z.lazy(() => NestedEnumShiftStatusFilterSchema).optional()
}).strict();
var NestedEnumPrepStatusFilterSchema = import_zod.z.object({
  equals: import_zod.z.lazy(() => PrepStatusSchema).optional(),
  in: import_zod.z.lazy(() => PrepStatusSchema).array().optional(),
  notIn: import_zod.z.lazy(() => PrepStatusSchema).array().optional(),
  not: import_zod.z.union([import_zod.z.lazy(() => PrepStatusSchema), import_zod.z.lazy(() => NestedEnumPrepStatusFilterSchema)]).optional()
}).strict();
var NestedEnumPrepStatusWithAggregatesFilterSchema = import_zod.z.object({
  equals: import_zod.z.lazy(() => PrepStatusSchema).optional(),
  in: import_zod.z.lazy(() => PrepStatusSchema).array().optional(),
  notIn: import_zod.z.lazy(() => PrepStatusSchema).array().optional(),
  not: import_zod.z.union([import_zod.z.lazy(() => PrepStatusSchema), import_zod.z.lazy(() => NestedEnumPrepStatusWithAggregatesFilterSchema)]).optional(),
  _count: import_zod.z.lazy(() => NestedIntFilterSchema).optional(),
  _min: import_zod.z.lazy(() => NestedEnumPrepStatusFilterSchema).optional(),
  _max: import_zod.z.lazy(() => NestedEnumPrepStatusFilterSchema).optional()
}).strict();
var RestaurantCreateWithoutSalesTransactionsInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  imageUrl: import_zod.z.string().optional().nullable(),
  address: import_zod.z.string(),
  city: import_zod.z.string(),
  zipCode: import_zod.z.string(),
  state: import_zod.z.string(),
  owner: import_zod.z.string(),
  foodCost: import_zod.z.number().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  isDeleted: import_zod.z.boolean().optional(),
  deleted: import_zod.z.coerce.date().optional().nullable(),
  organization: import_zod.z.lazy(() => OrganizationCreateNestedOneWithoutRestaurantsInputSchema).optional(),
  users: import_zod.z.lazy(() => UserCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: import_zod.z.lazy(() => CookBookCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: import_zod.z.lazy(() => InventoryCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: import_zod.z.lazy(() => OrderCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: import_zod.z.lazy(() => MenuCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipment: import_zod.z.lazy(() => EquipmentCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklist: import_zod.z.lazy(() => QualityChecklistCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qustomerFeedback: import_zod.z.lazy(() => CustomerFeedbackCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();
var RestaurantUncheckedCreateWithoutSalesTransactionsInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  imageUrl: import_zod.z.string().optional().nullable(),
  address: import_zod.z.string(),
  city: import_zod.z.string(),
  zipCode: import_zod.z.string(),
  state: import_zod.z.string(),
  owner: import_zod.z.string(),
  organizationId: import_zod.z.number().int().optional().nullable(),
  foodCost: import_zod.z.number().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  isDeleted: import_zod.z.boolean().optional(),
  deleted: import_zod.z.coerce.date().optional().nullable(),
  users: import_zod.z.lazy(() => UserUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: import_zod.z.lazy(() => CookBookUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: import_zod.z.lazy(() => InventoryUncheckedCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: import_zod.z.lazy(() => OrderUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: import_zod.z.lazy(() => MenuUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipment: import_zod.z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklist: import_zod.z.lazy(() => QualityChecklistUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qustomerFeedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();
var RestaurantCreateOrConnectWithoutSalesTransactionsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RestaurantWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => RestaurantCreateWithoutSalesTransactionsInputSchema), import_zod.z.lazy(() => RestaurantUncheckedCreateWithoutSalesTransactionsInputSchema)])
}).strict();
var MenuItemCreateWithoutSalesTransactionsInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  price: import_zod.z.number(),
  foodCost: import_zod.z.number(),
  recipeIds: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeIdsInputSchema), import_zod.z.number().int().array()]).optional(),
  recipeServingsAmount: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema), import_zod.z.number().array()]).optional(),
  recipeServingsCost: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeServingsCostInputSchema), import_zod.z.number().array()]).optional(),
  allergens: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateallergensInputSchema), import_zod.z.string().array()]).optional(),
  nutritionalInfoId: import_zod.z.number().int().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  nutritionalInfo: import_zod.z.lazy(() => NutritionalInfoCreateNestedOneWithoutMenuItemInputSchema).optional(),
  menu: import_zod.z.lazy(() => MenuCreateNestedOneWithoutMenuItemsInputSchema),
  recipes: import_zod.z.lazy(() => RecipeCreateNestedManyWithoutMenuItemsInputSchema).optional(),
  menuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeCreateNestedManyWithoutMenuItemInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemCreateNestedManyWithoutMenuItemInputSchema).optional(),
  nutritionalRecommendation: import_zod.z.lazy(() => NutritionalRecommendationCreateNestedManyWithoutMenuItemInputSchema).optional(),
  category: import_zod.z.lazy(() => MenuCategoryCreateNestedOneWithoutMenuItemsInputSchema).optional(),
  feedback: import_zod.z.lazy(() => CustomerFeedbackCreateNestedManyWithoutMenuItemInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionCreateNestedManyWithoutMenuItemsInputSchema).optional()
}).strict();
var MenuItemUncheckedCreateWithoutSalesTransactionsInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  price: import_zod.z.number(),
  foodCost: import_zod.z.number(),
  recipeIds: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeIdsInputSchema), import_zod.z.number().int().array()]).optional(),
  recipeServingsAmount: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema), import_zod.z.number().array()]).optional(),
  recipeServingsCost: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeServingsCostInputSchema), import_zod.z.number().array()]).optional(),
  allergens: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateallergensInputSchema), import_zod.z.string().array()]).optional(),
  nutritionalInfoId: import_zod.z.number().int().optional().nullable(),
  menuId: import_zod.z.number().int(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  categoryId: import_zod.z.number().int().optional().nullable(),
  nutritionalInfo: import_zod.z.lazy(() => NutritionalInfoUncheckedCreateNestedOneWithoutMenuItemInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUncheckedCreateNestedManyWithoutMenuItemsInputSchema).optional(),
  menuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  nutritionalRecommendation: import_zod.z.lazy(() => NutritionalRecommendationUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  feedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutMenuItemsInputSchema).optional()
}).strict();
var MenuItemCreateOrConnectWithoutSalesTransactionsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateWithoutSalesTransactionsInputSchema), import_zod.z.lazy(() => MenuItemUncheckedCreateWithoutSalesTransactionsInputSchema)])
}).strict();
var RestaurantUpsertWithoutSalesTransactionsInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => RestaurantUpdateWithoutSalesTransactionsInputSchema), import_zod.z.lazy(() => RestaurantUncheckedUpdateWithoutSalesTransactionsInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => RestaurantCreateWithoutSalesTransactionsInputSchema), import_zod.z.lazy(() => RestaurantUncheckedCreateWithoutSalesTransactionsInputSchema)]),
  where: import_zod.z.lazy(() => RestaurantWhereInputSchema).optional()
}).strict();
var RestaurantUpdateToOneWithWhereWithoutSalesTransactionsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RestaurantWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => RestaurantUpdateWithoutSalesTransactionsInputSchema), import_zod.z.lazy(() => RestaurantUncheckedUpdateWithoutSalesTransactionsInputSchema)])
}).strict();
var RestaurantUpdateWithoutSalesTransactionsInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  address: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  city: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  zipCode: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  state: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  owner: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  deleted: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  organization: import_zod.z.lazy(() => OrganizationUpdateOneWithoutRestaurantsNestedInputSchema).optional(),
  users: import_zod.z.lazy(() => UserUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: import_zod.z.lazy(() => CookBookUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: import_zod.z.lazy(() => InventoryUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: import_zod.z.lazy(() => OrderUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: import_zod.z.lazy(() => MenuUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipment: import_zod.z.lazy(() => EquipmentUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklist: import_zod.z.lazy(() => QualityChecklistUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qustomerFeedback: import_zod.z.lazy(() => CustomerFeedbackUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();
var RestaurantUncheckedUpdateWithoutSalesTransactionsInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  address: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  city: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  zipCode: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  state: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  owner: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  deleted: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  users: import_zod.z.lazy(() => UserUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: import_zod.z.lazy(() => CookBookUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: import_zod.z.lazy(() => InventoryUncheckedUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: import_zod.z.lazy(() => OrderUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: import_zod.z.lazy(() => MenuUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipment: import_zod.z.lazy(() => EquipmentUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklist: import_zod.z.lazy(() => QualityChecklistUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qustomerFeedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();
var MenuItemUpsertWithoutSalesTransactionsInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateWithoutSalesTransactionsInputSchema), import_zod.z.lazy(() => MenuItemUncheckedUpdateWithoutSalesTransactionsInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateWithoutSalesTransactionsInputSchema), import_zod.z.lazy(() => MenuItemUncheckedCreateWithoutSalesTransactionsInputSchema)]),
  where: import_zod.z.lazy(() => MenuItemWhereInputSchema).optional()
}).strict();
var MenuItemUpdateToOneWithWhereWithoutSalesTransactionsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => MenuItemWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateWithoutSalesTransactionsInputSchema), import_zod.z.lazy(() => MenuItemUncheckedUpdateWithoutSalesTransactionsInputSchema)])
}).strict();
var MenuItemUpdateWithoutSalesTransactionsInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIds: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeIdsInputSchema), import_zod.z.number().int().array()]).optional(),
  recipeServingsAmount: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema), import_zod.z.number().array()]).optional(),
  recipeServingsCost: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema), import_zod.z.number().array()]).optional(),
  allergens: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateallergensInputSchema), import_zod.z.string().array()]).optional(),
  nutritionalInfoId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  nutritionalInfo: import_zod.z.lazy(() => NutritionalInfoUpdateOneWithoutMenuItemNestedInputSchema).optional(),
  menu: import_zod.z.lazy(() => MenuUpdateOneRequiredWithoutMenuItemsNestedInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUpdateManyWithoutMenuItemsNestedInputSchema).optional(),
  menuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  nutritionalRecommendation: import_zod.z.lazy(() => NutritionalRecommendationUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  category: import_zod.z.lazy(() => MenuCategoryUpdateOneWithoutMenuItemsNestedInputSchema).optional(),
  feedback: import_zod.z.lazy(() => CustomerFeedbackUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUpdateManyWithoutMenuItemsNestedInputSchema).optional()
}).strict();
var MenuItemUncheckedUpdateWithoutSalesTransactionsInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIds: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeIdsInputSchema), import_zod.z.number().int().array()]).optional(),
  recipeServingsAmount: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema), import_zod.z.number().array()]).optional(),
  recipeServingsCost: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema), import_zod.z.number().array()]).optional(),
  allergens: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateallergensInputSchema), import_zod.z.string().array()]).optional(),
  nutritionalInfoId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  menuId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  categoryId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  nutritionalInfo: import_zod.z.lazy(() => NutritionalInfoUncheckedUpdateOneWithoutMenuItemNestedInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUncheckedUpdateManyWithoutMenuItemsNestedInputSchema).optional(),
  menuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  nutritionalRecommendation: import_zod.z.lazy(() => NutritionalRecommendationUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  feedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutMenuItemsNestedInputSchema).optional()
}).strict();
var MenuCreateWithoutMenuCategoryInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  restaurant: import_zod.z.lazy(() => RestaurantCreateNestedOneWithoutMenusInputSchema),
  menuItems: import_zod.z.lazy(() => MenuItemCreateNestedManyWithoutMenuInputSchema).optional()
}).strict();
var MenuUncheckedCreateWithoutMenuCategoryInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  restaurantId: import_zod.z.number().int(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUncheckedCreateNestedManyWithoutMenuInputSchema).optional()
}).strict();
var MenuCreateOrConnectWithoutMenuCategoryInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => MenuWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => MenuCreateWithoutMenuCategoryInputSchema), import_zod.z.lazy(() => MenuUncheckedCreateWithoutMenuCategoryInputSchema)])
}).strict();
var MenuItemCreateWithoutCategoryInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  price: import_zod.z.number(),
  foodCost: import_zod.z.number(),
  recipeIds: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeIdsInputSchema), import_zod.z.number().int().array()]).optional(),
  recipeServingsAmount: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema), import_zod.z.number().array()]).optional(),
  recipeServingsCost: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeServingsCostInputSchema), import_zod.z.number().array()]).optional(),
  allergens: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateallergensInputSchema), import_zod.z.string().array()]).optional(),
  nutritionalInfoId: import_zod.z.number().int().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  nutritionalInfo: import_zod.z.lazy(() => NutritionalInfoCreateNestedOneWithoutMenuItemInputSchema).optional(),
  menu: import_zod.z.lazy(() => MenuCreateNestedOneWithoutMenuItemsInputSchema),
  recipes: import_zod.z.lazy(() => RecipeCreateNestedManyWithoutMenuItemsInputSchema).optional(),
  menuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeCreateNestedManyWithoutMenuItemInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsCreateNestedManyWithoutMenuItemInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemCreateNestedManyWithoutMenuItemInputSchema).optional(),
  nutritionalRecommendation: import_zod.z.lazy(() => NutritionalRecommendationCreateNestedManyWithoutMenuItemInputSchema).optional(),
  feedback: import_zod.z.lazy(() => CustomerFeedbackCreateNestedManyWithoutMenuItemInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionCreateNestedManyWithoutMenuItemsInputSchema).optional()
}).strict();
var MenuItemUncheckedCreateWithoutCategoryInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  price: import_zod.z.number(),
  foodCost: import_zod.z.number(),
  recipeIds: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeIdsInputSchema), import_zod.z.number().int().array()]).optional(),
  recipeServingsAmount: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema), import_zod.z.number().array()]).optional(),
  recipeServingsCost: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeServingsCostInputSchema), import_zod.z.number().array()]).optional(),
  allergens: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateallergensInputSchema), import_zod.z.string().array()]).optional(),
  nutritionalInfoId: import_zod.z.number().int().optional().nullable(),
  menuId: import_zod.z.number().int(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  nutritionalInfo: import_zod.z.lazy(() => NutritionalInfoUncheckedCreateNestedOneWithoutMenuItemInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUncheckedCreateNestedManyWithoutMenuItemsInputSchema).optional(),
  menuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  nutritionalRecommendation: import_zod.z.lazy(() => NutritionalRecommendationUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  feedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutMenuItemsInputSchema).optional()
}).strict();
var MenuItemCreateOrConnectWithoutCategoryInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateWithoutCategoryInputSchema), import_zod.z.lazy(() => MenuItemUncheckedCreateWithoutCategoryInputSchema)])
}).strict();
var MenuItemCreateManyCategoryInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateManyCategoryInputSchema), import_zod.z.lazy(() => MenuItemCreateManyCategoryInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var MenuUpsertWithoutMenuCategoryInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => MenuUpdateWithoutMenuCategoryInputSchema), import_zod.z.lazy(() => MenuUncheckedUpdateWithoutMenuCategoryInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => MenuCreateWithoutMenuCategoryInputSchema), import_zod.z.lazy(() => MenuUncheckedCreateWithoutMenuCategoryInputSchema)]),
  where: import_zod.z.lazy(() => MenuWhereInputSchema).optional()
}).strict();
var MenuUpdateToOneWithWhereWithoutMenuCategoryInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => MenuWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => MenuUpdateWithoutMenuCategoryInputSchema), import_zod.z.lazy(() => MenuUncheckedUpdateWithoutMenuCategoryInputSchema)])
}).strict();
var MenuUpdateWithoutMenuCategoryInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantUpdateOneRequiredWithoutMenusNestedInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUpdateManyWithoutMenuNestedInputSchema).optional()
}).strict();
var MenuUncheckedUpdateWithoutMenuCategoryInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUncheckedUpdateManyWithoutMenuNestedInputSchema).optional()
}).strict();
var MenuItemUpsertWithWhereUniqueWithoutCategoryInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateWithoutCategoryInputSchema), import_zod.z.lazy(() => MenuItemUncheckedUpdateWithoutCategoryInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateWithoutCategoryInputSchema), import_zod.z.lazy(() => MenuItemUncheckedCreateWithoutCategoryInputSchema)])
}).strict();
var MenuItemUpdateWithWhereUniqueWithoutCategoryInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateWithoutCategoryInputSchema), import_zod.z.lazy(() => MenuItemUncheckedUpdateWithoutCategoryInputSchema)])
}).strict();
var MenuItemUpdateManyWithWhereWithoutCategoryInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => MenuItemScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateManyMutationInputSchema), import_zod.z.lazy(() => MenuItemUncheckedUpdateManyWithoutCategoryInputSchema)])
}).strict();
var MenuItemScalarWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => MenuItemScalarWhereInputSchema), import_zod.z.lazy(() => MenuItemScalarWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => MenuItemScalarWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => MenuItemScalarWhereInputSchema), import_zod.z.lazy(() => MenuItemScalarWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  name: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  description: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  price: import_zod.z.union([import_zod.z.lazy(() => FloatFilterSchema), import_zod.z.number()]).optional(),
  foodCost: import_zod.z.union([import_zod.z.lazy(() => FloatFilterSchema), import_zod.z.number()]).optional(),
  recipeIds: import_zod.z.lazy(() => IntNullableListFilterSchema).optional(),
  recipeServingsAmount: import_zod.z.lazy(() => FloatNullableListFilterSchema).optional(),
  recipeServingsCost: import_zod.z.lazy(() => FloatNullableListFilterSchema).optional(),
  allergens: import_zod.z.lazy(() => StringNullableListFilterSchema).optional(),
  nutritionalInfoId: import_zod.z.union([import_zod.z.lazy(() => IntNullableFilterSchema), import_zod.z.number()]).optional().nullable(),
  menuId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  categoryId: import_zod.z.union([import_zod.z.lazy(() => IntNullableFilterSchema), import_zod.z.number()]).optional().nullable()
}).strict();
var RecipeCreateWithoutVersionsInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.string().optional().nullable(),
  servings: import_zod.z.number().int(),
  cookTime: import_zod.z.number().int(),
  prepTime: import_zod.z.number().int(),
  frequency: import_zod.z.number().int().optional().nullable(),
  foodCost: import_zod.z.number().optional().nullable(),
  isDeleted: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  restaurant: import_zod.z.lazy(() => RestaurantCreateNestedOneWithoutRecipesInputSchema),
  cookBook: import_zod.z.lazy(() => CookBookCreateNestedOneWithoutRecipesInputSchema),
  ingredients: import_zod.z.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeCreateNestedManyWithoutRecipeInputSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagCreateNestedManyWithoutRecipesInputSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionCreateNestedManyWithoutRecipesInputSchema).optional()
}).strict();
var RecipeUncheckedCreateWithoutVersionsInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.string().optional().nullable(),
  servings: import_zod.z.number().int(),
  cookTime: import_zod.z.number().int(),
  prepTime: import_zod.z.number().int(),
  frequency: import_zod.z.number().int().optional().nullable(),
  restaurantId: import_zod.z.number().int(),
  cookBookId: import_zod.z.number().int(),
  foodCost: import_zod.z.number().optional().nullable(),
  isDeleted: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutRecipesInputSchema).optional()
}).strict();
var RecipeCreateOrConnectWithoutVersionsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutVersionsInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutVersionsInputSchema)])
}).strict();
var RecipeIngredientCreateWithoutRecipeVersionInputSchema = import_zod.z.object({
  quantity: import_zod.z.number(),
  unit: import_zod.z.string(),
  joinAt: import_zod.z.coerce.date().optional(),
  recipe: import_zod.z.lazy(() => RecipeCreateNestedOneWithoutIngredientsInputSchema),
  ingredient: import_zod.z.lazy(() => IngredientCreateNestedOneWithoutRecipeIngredientsInputSchema)
}).strict();
var RecipeIngredientUncheckedCreateWithoutRecipeVersionInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  recipeId: import_zod.z.number().int(),
  ingredientId: import_zod.z.number().int(),
  quantity: import_zod.z.number(),
  unit: import_zod.z.string(),
  joinAt: import_zod.z.coerce.date().optional()
}).strict();
var RecipeIngredientCreateOrConnectWithoutRecipeVersionInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientCreateWithoutRecipeVersionInputSchema), import_zod.z.lazy(() => RecipeIngredientUncheckedCreateWithoutRecipeVersionInputSchema)])
}).strict();
var RecipeIngredientCreateManyRecipeVersionInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientCreateManyRecipeVersionInputSchema), import_zod.z.lazy(() => RecipeIngredientCreateManyRecipeVersionInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var RecipeInstructionCreateWithoutRecipeVersionInputSchema = import_zod.z.object({
  stepNumber: import_zod.z.number().int(),
  instruction: import_zod.z.string(),
  imageUrl: import_zod.z.string().optional().nullable(),
  recipe: import_zod.z.lazy(() => RecipeCreateNestedOneWithoutInstructionsInputSchema)
}).strict();
var RecipeInstructionUncheckedCreateWithoutRecipeVersionInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  recipeId: import_zod.z.number().int(),
  stepNumber: import_zod.z.number().int(),
  instruction: import_zod.z.string(),
  imageUrl: import_zod.z.string().optional().nullable()
}).strict();
var RecipeInstructionCreateOrConnectWithoutRecipeVersionInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeInstructionWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionCreateWithoutRecipeVersionInputSchema), import_zod.z.lazy(() => RecipeInstructionUncheckedCreateWithoutRecipeVersionInputSchema)])
}).strict();
var RecipeInstructionCreateManyRecipeVersionInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionCreateManyRecipeVersionInputSchema), import_zod.z.lazy(() => RecipeInstructionCreateManyRecipeVersionInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var UserCreateWithoutRecipeVersionsCreatedInputSchema = import_zod.z.object({
  email: import_zod.z.string(),
  sub: import_zod.z.number().int().optional().nullable(),
  passwordHash: import_zod.z.string(),
  firstName: import_zod.z.string(),
  lastName: import_zod.z.string(),
  profileImage: import_zod.z.string().optional().nullable(),
  verified: import_zod.z.boolean().optional(),
  role: import_zod.z.lazy(() => UserRoleSchema),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  organization: import_zod.z.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantCreateNestedOneWithoutUsersInputSchema).optional(),
  shifts: import_zod.z.lazy(() => ShiftCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserUncheckedCreateWithoutRecipeVersionsCreatedInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  email: import_zod.z.string(),
  sub: import_zod.z.number().int().optional().nullable(),
  passwordHash: import_zod.z.string(),
  firstName: import_zod.z.string(),
  lastName: import_zod.z.string(),
  profileImage: import_zod.z.string().optional().nullable(),
  verified: import_zod.z.boolean().optional(),
  role: import_zod.z.lazy(() => UserRoleSchema),
  organizationId: import_zod.z.number().int().optional().nullable(),
  restaurantId: import_zod.z.number().int().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  shifts: import_zod.z.lazy(() => ShiftUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteUncheckedCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserCreateOrConnectWithoutRecipeVersionsCreatedInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => UserWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutRecipeVersionsCreatedInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutRecipeVersionsCreatedInputSchema)])
}).strict();
var UserCreateWithoutRecipeVersionsApprovedInputSchema = import_zod.z.object({
  email: import_zod.z.string(),
  sub: import_zod.z.number().int().optional().nullable(),
  passwordHash: import_zod.z.string(),
  firstName: import_zod.z.string(),
  lastName: import_zod.z.string(),
  profileImage: import_zod.z.string().optional().nullable(),
  verified: import_zod.z.boolean().optional(),
  role: import_zod.z.lazy(() => UserRoleSchema),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  organization: import_zod.z.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantCreateNestedOneWithoutUsersInputSchema).optional(),
  shifts: import_zod.z.lazy(() => ShiftCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionCreateNestedManyWithoutCreatedByInputSchema).optional()
}).strict();
var UserUncheckedCreateWithoutRecipeVersionsApprovedInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  email: import_zod.z.string(),
  sub: import_zod.z.number().int().optional().nullable(),
  passwordHash: import_zod.z.string(),
  firstName: import_zod.z.string(),
  lastName: import_zod.z.string(),
  profileImage: import_zod.z.string().optional().nullable(),
  verified: import_zod.z.boolean().optional(),
  role: import_zod.z.lazy(() => UserRoleSchema),
  organizationId: import_zod.z.number().int().optional().nullable(),
  restaurantId: import_zod.z.number().int().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  shifts: import_zod.z.lazy(() => ShiftUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteUncheckedCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional()
}).strict();
var UserCreateOrConnectWithoutRecipeVersionsApprovedInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => UserWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutRecipeVersionsApprovedInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutRecipeVersionsApprovedInputSchema)])
}).strict();
var RecipeUpsertWithoutVersionsInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateWithoutVersionsInputSchema), import_zod.z.lazy(() => RecipeUncheckedUpdateWithoutVersionsInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutVersionsInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutVersionsInputSchema)]),
  where: import_zod.z.lazy(() => RecipeWhereInputSchema).optional()
}).strict();
var RecipeUpdateToOneWithWhereWithoutVersionsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateWithoutVersionsInputSchema), import_zod.z.lazy(() => RecipeUncheckedUpdateWithoutVersionsInputSchema)])
}).strict();
var RecipeUpdateWithoutVersionsInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  cookBook: import_zod.z.lazy(() => CookBookUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUpdateManyWithoutRecipeNestedInputSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagUpdateManyWithoutRecipesNestedInputSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUpdateManyWithoutRecipesNestedInputSchema).optional()
}).strict();
var RecipeUncheckedUpdateWithoutVersionsInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookBookId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional()
}).strict();
var RecipeIngredientUpsertWithWhereUniqueWithoutRecipeVersionInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientUpdateWithoutRecipeVersionInputSchema), import_zod.z.lazy(() => RecipeIngredientUncheckedUpdateWithoutRecipeVersionInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientCreateWithoutRecipeVersionInputSchema), import_zod.z.lazy(() => RecipeIngredientUncheckedCreateWithoutRecipeVersionInputSchema)])
}).strict();
var RecipeIngredientUpdateWithWhereUniqueWithoutRecipeVersionInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientUpdateWithoutRecipeVersionInputSchema), import_zod.z.lazy(() => RecipeIngredientUncheckedUpdateWithoutRecipeVersionInputSchema)])
}).strict();
var RecipeIngredientUpdateManyWithWhereWithoutRecipeVersionInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeIngredientScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientUpdateManyMutationInputSchema), import_zod.z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeVersionInputSchema)])
}).strict();
var RecipeIngredientScalarWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientScalarWhereInputSchema), import_zod.z.lazy(() => RecipeIngredientScalarWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => RecipeIngredientScalarWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientScalarWhereInputSchema), import_zod.z.lazy(() => RecipeIngredientScalarWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  recipeId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  ingredientId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  quantity: import_zod.z.union([import_zod.z.lazy(() => FloatFilterSchema), import_zod.z.number()]).optional(),
  unit: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  joinAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  recipeVersionId: import_zod.z.union([import_zod.z.lazy(() => IntNullableFilterSchema), import_zod.z.number()]).optional().nullable()
}).strict();
var RecipeInstructionUpsertWithWhereUniqueWithoutRecipeVersionInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeInstructionWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionUpdateWithoutRecipeVersionInputSchema), import_zod.z.lazy(() => RecipeInstructionUncheckedUpdateWithoutRecipeVersionInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionCreateWithoutRecipeVersionInputSchema), import_zod.z.lazy(() => RecipeInstructionUncheckedCreateWithoutRecipeVersionInputSchema)])
}).strict();
var RecipeInstructionUpdateWithWhereUniqueWithoutRecipeVersionInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeInstructionWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionUpdateWithoutRecipeVersionInputSchema), import_zod.z.lazy(() => RecipeInstructionUncheckedUpdateWithoutRecipeVersionInputSchema)])
}).strict();
var RecipeInstructionUpdateManyWithWhereWithoutRecipeVersionInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeInstructionScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionUpdateManyMutationInputSchema), import_zod.z.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeVersionInputSchema)])
}).strict();
var RecipeInstructionScalarWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionScalarWhereInputSchema), import_zod.z.lazy(() => RecipeInstructionScalarWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => RecipeInstructionScalarWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionScalarWhereInputSchema), import_zod.z.lazy(() => RecipeInstructionScalarWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  recipeId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  stepNumber: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  instruction: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  recipeVersionId: import_zod.z.union([import_zod.z.lazy(() => IntNullableFilterSchema), import_zod.z.number()]).optional().nullable()
}).strict();
var UserUpsertWithoutRecipeVersionsCreatedInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => UserUpdateWithoutRecipeVersionsCreatedInputSchema), import_zod.z.lazy(() => UserUncheckedUpdateWithoutRecipeVersionsCreatedInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutRecipeVersionsCreatedInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutRecipeVersionsCreatedInputSchema)]),
  where: import_zod.z.lazy(() => UserWhereInputSchema).optional()
}).strict();
var UserUpdateToOneWithWhereWithoutRecipeVersionsCreatedInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => UserWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => UserUpdateWithoutRecipeVersionsCreatedInputSchema), import_zod.z.lazy(() => UserUncheckedUpdateWithoutRecipeVersionsCreatedInputSchema)])
}).strict();
var UserUpdateWithoutRecipeVersionsCreatedInputSchema = import_zod.z.object({
  email: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: import_zod.z.union([import_zod.z.lazy(() => UserRoleSchema), import_zod.z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  organization: import_zod.z.lazy(() => OrganizationUpdateOneWithoutUsersNestedInputSchema).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantUpdateOneWithoutUsersNestedInputSchema).optional(),
  shifts: import_zod.z.lazy(() => ShiftUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var UserUncheckedUpdateWithoutRecipeVersionsCreatedInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  email: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: import_zod.z.union([import_zod.z.lazy(() => UserRoleSchema), import_zod.z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  shifts: import_zod.z.lazy(() => ShiftUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemUncheckedUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var UserUpsertWithoutRecipeVersionsApprovedInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => UserUpdateWithoutRecipeVersionsApprovedInputSchema), import_zod.z.lazy(() => UserUncheckedUpdateWithoutRecipeVersionsApprovedInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutRecipeVersionsApprovedInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutRecipeVersionsApprovedInputSchema)]),
  where: import_zod.z.lazy(() => UserWhereInputSchema).optional()
}).strict();
var UserUpdateToOneWithWhereWithoutRecipeVersionsApprovedInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => UserWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => UserUpdateWithoutRecipeVersionsApprovedInputSchema), import_zod.z.lazy(() => UserUncheckedUpdateWithoutRecipeVersionsApprovedInputSchema)])
}).strict();
var UserUpdateWithoutRecipeVersionsApprovedInputSchema = import_zod.z.object({
  email: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: import_zod.z.union([import_zod.z.lazy(() => UserRoleSchema), import_zod.z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  organization: import_zod.z.lazy(() => OrganizationUpdateOneWithoutUsersNestedInputSchema).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantUpdateOneWithoutUsersNestedInputSchema).optional(),
  shifts: import_zod.z.lazy(() => ShiftUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionUpdateManyWithoutCreatedByNestedInputSchema).optional()
}).strict();
var UserUncheckedUpdateWithoutRecipeVersionsApprovedInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  email: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: import_zod.z.union([import_zod.z.lazy(() => UserRoleSchema), import_zod.z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  shifts: import_zod.z.lazy(() => ShiftUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemUncheckedUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional()
}).strict();
var RestaurantCreateWithoutEquipmentInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  imageUrl: import_zod.z.string().optional().nullable(),
  address: import_zod.z.string(),
  city: import_zod.z.string(),
  zipCode: import_zod.z.string(),
  state: import_zod.z.string(),
  owner: import_zod.z.string(),
  foodCost: import_zod.z.number().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  isDeleted: import_zod.z.boolean().optional(),
  deleted: import_zod.z.coerce.date().optional().nullable(),
  organization: import_zod.z.lazy(() => OrganizationCreateNestedOneWithoutRestaurantsInputSchema).optional(),
  users: import_zod.z.lazy(() => UserCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: import_zod.z.lazy(() => CookBookCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: import_zod.z.lazy(() => InventoryCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: import_zod.z.lazy(() => OrderCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: import_zod.z.lazy(() => MenuCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklist: import_zod.z.lazy(() => QualityChecklistCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qustomerFeedback: import_zod.z.lazy(() => CustomerFeedbackCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();
var RestaurantUncheckedCreateWithoutEquipmentInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  imageUrl: import_zod.z.string().optional().nullable(),
  address: import_zod.z.string(),
  city: import_zod.z.string(),
  zipCode: import_zod.z.string(),
  state: import_zod.z.string(),
  owner: import_zod.z.string(),
  organizationId: import_zod.z.number().int().optional().nullable(),
  foodCost: import_zod.z.number().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  isDeleted: import_zod.z.boolean().optional(),
  deleted: import_zod.z.coerce.date().optional().nullable(),
  users: import_zod.z.lazy(() => UserUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: import_zod.z.lazy(() => CookBookUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: import_zod.z.lazy(() => InventoryUncheckedCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: import_zod.z.lazy(() => OrderUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: import_zod.z.lazy(() => MenuUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklist: import_zod.z.lazy(() => QualityChecklistUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qustomerFeedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();
var RestaurantCreateOrConnectWithoutEquipmentInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RestaurantWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => RestaurantCreateWithoutEquipmentInputSchema), import_zod.z.lazy(() => RestaurantUncheckedCreateWithoutEquipmentInputSchema)])
}).strict();
var RecipeEquipmentCreateWithoutEquipmentInputSchema = import_zod.z.object({
  notes: import_zod.z.string().optional().nullable(),
  recipe: import_zod.z.lazy(() => RecipeCreateNestedOneWithoutEquipmentInputSchema)
}).strict();
var RecipeEquipmentUncheckedCreateWithoutEquipmentInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  recipeId: import_zod.z.number().int(),
  notes: import_zod.z.string().optional().nullable()
}).strict();
var RecipeEquipmentCreateOrConnectWithoutEquipmentInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeEquipmentWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentCreateWithoutEquipmentInputSchema), import_zod.z.lazy(() => RecipeEquipmentUncheckedCreateWithoutEquipmentInputSchema)])
}).strict();
var RecipeEquipmentCreateManyEquipmentInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentCreateManyEquipmentInputSchema), import_zod.z.lazy(() => RecipeEquipmentCreateManyEquipmentInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var MaintenanceLogCreateWithoutEquipmentInputSchema = import_zod.z.object({
  date: import_zod.z.coerce.date(),
  type: import_zod.z.lazy(() => MaintenanceTypeSchema),
  description: import_zod.z.string(),
  cost: import_zod.z.number().optional().nullable(),
  performedBy: import_zod.z.string(),
  notes: import_zod.z.string().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var MaintenanceLogUncheckedCreateWithoutEquipmentInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  date: import_zod.z.coerce.date(),
  type: import_zod.z.lazy(() => MaintenanceTypeSchema),
  description: import_zod.z.string(),
  cost: import_zod.z.number().optional().nullable(),
  performedBy: import_zod.z.string(),
  notes: import_zod.z.string().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var MaintenanceLogCreateOrConnectWithoutEquipmentInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => MaintenanceLogWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => MaintenanceLogCreateWithoutEquipmentInputSchema), import_zod.z.lazy(() => MaintenanceLogUncheckedCreateWithoutEquipmentInputSchema)])
}).strict();
var MaintenanceLogCreateManyEquipmentInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => MaintenanceLogCreateManyEquipmentInputSchema), import_zod.z.lazy(() => MaintenanceLogCreateManyEquipmentInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var RestaurantUpsertWithoutEquipmentInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => RestaurantUpdateWithoutEquipmentInputSchema), import_zod.z.lazy(() => RestaurantUncheckedUpdateWithoutEquipmentInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => RestaurantCreateWithoutEquipmentInputSchema), import_zod.z.lazy(() => RestaurantUncheckedCreateWithoutEquipmentInputSchema)]),
  where: import_zod.z.lazy(() => RestaurantWhereInputSchema).optional()
}).strict();
var RestaurantUpdateToOneWithWhereWithoutEquipmentInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RestaurantWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => RestaurantUpdateWithoutEquipmentInputSchema), import_zod.z.lazy(() => RestaurantUncheckedUpdateWithoutEquipmentInputSchema)])
}).strict();
var RestaurantUpdateWithoutEquipmentInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  address: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  city: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  zipCode: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  state: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  owner: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  deleted: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  organization: import_zod.z.lazy(() => OrganizationUpdateOneWithoutRestaurantsNestedInputSchema).optional(),
  users: import_zod.z.lazy(() => UserUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: import_zod.z.lazy(() => CookBookUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: import_zod.z.lazy(() => InventoryUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: import_zod.z.lazy(() => OrderUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: import_zod.z.lazy(() => MenuUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklist: import_zod.z.lazy(() => QualityChecklistUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qustomerFeedback: import_zod.z.lazy(() => CustomerFeedbackUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();
var RestaurantUncheckedUpdateWithoutEquipmentInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  address: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  city: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  zipCode: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  state: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  owner: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  deleted: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  users: import_zod.z.lazy(() => UserUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: import_zod.z.lazy(() => CookBookUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: import_zod.z.lazy(() => InventoryUncheckedUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: import_zod.z.lazy(() => OrderUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: import_zod.z.lazy(() => MenuUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklist: import_zod.z.lazy(() => QualityChecklistUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qustomerFeedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();
var RecipeEquipmentUpsertWithWhereUniqueWithoutEquipmentInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeEquipmentWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentUpdateWithoutEquipmentInputSchema), import_zod.z.lazy(() => RecipeEquipmentUncheckedUpdateWithoutEquipmentInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentCreateWithoutEquipmentInputSchema), import_zod.z.lazy(() => RecipeEquipmentUncheckedCreateWithoutEquipmentInputSchema)])
}).strict();
var RecipeEquipmentUpdateWithWhereUniqueWithoutEquipmentInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeEquipmentWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentUpdateWithoutEquipmentInputSchema), import_zod.z.lazy(() => RecipeEquipmentUncheckedUpdateWithoutEquipmentInputSchema)])
}).strict();
var RecipeEquipmentUpdateManyWithWhereWithoutEquipmentInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeEquipmentScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentUpdateManyMutationInputSchema), import_zod.z.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutEquipmentInputSchema)])
}).strict();
var RecipeEquipmentScalarWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentScalarWhereInputSchema), import_zod.z.lazy(() => RecipeEquipmentScalarWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => RecipeEquipmentScalarWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentScalarWhereInputSchema), import_zod.z.lazy(() => RecipeEquipmentScalarWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  recipeId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  equipmentId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  notes: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable()
}).strict();
var MaintenanceLogUpsertWithWhereUniqueWithoutEquipmentInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => MaintenanceLogWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => MaintenanceLogUpdateWithoutEquipmentInputSchema), import_zod.z.lazy(() => MaintenanceLogUncheckedUpdateWithoutEquipmentInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => MaintenanceLogCreateWithoutEquipmentInputSchema), import_zod.z.lazy(() => MaintenanceLogUncheckedCreateWithoutEquipmentInputSchema)])
}).strict();
var MaintenanceLogUpdateWithWhereUniqueWithoutEquipmentInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => MaintenanceLogWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => MaintenanceLogUpdateWithoutEquipmentInputSchema), import_zod.z.lazy(() => MaintenanceLogUncheckedUpdateWithoutEquipmentInputSchema)])
}).strict();
var MaintenanceLogUpdateManyWithWhereWithoutEquipmentInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => MaintenanceLogScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => MaintenanceLogUpdateManyMutationInputSchema), import_zod.z.lazy(() => MaintenanceLogUncheckedUpdateManyWithoutEquipmentInputSchema)])
}).strict();
var MaintenanceLogScalarWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => MaintenanceLogScalarWhereInputSchema), import_zod.z.lazy(() => MaintenanceLogScalarWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => MaintenanceLogScalarWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => MaintenanceLogScalarWhereInputSchema), import_zod.z.lazy(() => MaintenanceLogScalarWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  equipmentId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  date: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  type: import_zod.z.union([import_zod.z.lazy(() => EnumMaintenanceTypeFilterSchema), import_zod.z.lazy(() => MaintenanceTypeSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  cost: import_zod.z.union([import_zod.z.lazy(() => FloatNullableFilterSchema), import_zod.z.number()]).optional().nullable(),
  performedBy: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  notes: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var RecipeCreateWithoutEquipmentInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.string().optional().nullable(),
  servings: import_zod.z.number().int(),
  cookTime: import_zod.z.number().int(),
  prepTime: import_zod.z.number().int(),
  frequency: import_zod.z.number().int().optional().nullable(),
  foodCost: import_zod.z.number().optional().nullable(),
  isDeleted: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  restaurant: import_zod.z.lazy(() => RestaurantCreateNestedOneWithoutRecipesInputSchema),
  cookBook: import_zod.z.lazy(() => CookBookCreateNestedOneWithoutRecipesInputSchema),
  ingredients: import_zod.z.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeCreateNestedManyWithoutRecipeInputSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionCreateNestedManyWithoutRecipesInputSchema).optional()
}).strict();
var RecipeUncheckedCreateWithoutEquipmentInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.string().optional().nullable(),
  servings: import_zod.z.number().int(),
  cookTime: import_zod.z.number().int(),
  prepTime: import_zod.z.number().int(),
  frequency: import_zod.z.number().int().optional().nullable(),
  restaurantId: import_zod.z.number().int(),
  cookBookId: import_zod.z.number().int(),
  foodCost: import_zod.z.number().optional().nullable(),
  isDeleted: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutRecipesInputSchema).optional()
}).strict();
var RecipeCreateOrConnectWithoutEquipmentInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutEquipmentInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutEquipmentInputSchema)])
}).strict();
var EquipmentCreateWithoutRecipesInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  model: import_zod.z.string().optional().nullable(),
  serialNumber: import_zod.z.string().optional().nullable(),
  purchaseDate: import_zod.z.coerce.date().optional().nullable(),
  lastMaintenance: import_zod.z.coerce.date().optional().nullable(),
  nextMaintenance: import_zod.z.coerce.date().optional().nullable(),
  status: import_zod.z.lazy(() => EquipmentStatusSchema).optional(),
  location: import_zod.z.string().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  restaurant: import_zod.z.lazy(() => RestaurantCreateNestedOneWithoutEquipmentInputSchema),
  maintenanceLogs: import_zod.z.lazy(() => MaintenanceLogCreateNestedManyWithoutEquipmentInputSchema).optional()
}).strict();
var EquipmentUncheckedCreateWithoutRecipesInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  model: import_zod.z.string().optional().nullable(),
  serialNumber: import_zod.z.string().optional().nullable(),
  purchaseDate: import_zod.z.coerce.date().optional().nullable(),
  lastMaintenance: import_zod.z.coerce.date().optional().nullable(),
  nextMaintenance: import_zod.z.coerce.date().optional().nullable(),
  status: import_zod.z.lazy(() => EquipmentStatusSchema).optional(),
  location: import_zod.z.string().optional().nullable(),
  restaurantId: import_zod.z.number().int(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  maintenanceLogs: import_zod.z.lazy(() => MaintenanceLogUncheckedCreateNestedManyWithoutEquipmentInputSchema).optional()
}).strict();
var EquipmentCreateOrConnectWithoutRecipesInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => EquipmentWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => EquipmentCreateWithoutRecipesInputSchema), import_zod.z.lazy(() => EquipmentUncheckedCreateWithoutRecipesInputSchema)])
}).strict();
var RecipeUpsertWithoutEquipmentInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateWithoutEquipmentInputSchema), import_zod.z.lazy(() => RecipeUncheckedUpdateWithoutEquipmentInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutEquipmentInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutEquipmentInputSchema)]),
  where: import_zod.z.lazy(() => RecipeWhereInputSchema).optional()
}).strict();
var RecipeUpdateToOneWithWhereWithoutEquipmentInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateWithoutEquipmentInputSchema), import_zod.z.lazy(() => RecipeUncheckedUpdateWithoutEquipmentInputSchema)])
}).strict();
var RecipeUpdateWithoutEquipmentInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  cookBook: import_zod.z.lazy(() => CookBookUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUpdateManyWithoutRecipeNestedInputSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUpdateManyWithoutRecipesNestedInputSchema).optional()
}).strict();
var RecipeUncheckedUpdateWithoutEquipmentInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookBookId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional()
}).strict();
var EquipmentUpsertWithoutRecipesInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => EquipmentUpdateWithoutRecipesInputSchema), import_zod.z.lazy(() => EquipmentUncheckedUpdateWithoutRecipesInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => EquipmentCreateWithoutRecipesInputSchema), import_zod.z.lazy(() => EquipmentUncheckedCreateWithoutRecipesInputSchema)]),
  where: import_zod.z.lazy(() => EquipmentWhereInputSchema).optional()
}).strict();
var EquipmentUpdateToOneWithWhereWithoutRecipesInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => EquipmentWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => EquipmentUpdateWithoutRecipesInputSchema), import_zod.z.lazy(() => EquipmentUncheckedUpdateWithoutRecipesInputSchema)])
}).strict();
var EquipmentUpdateWithoutRecipesInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  model: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  serialNumber: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  purchaseDate: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastMaintenance: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  nextMaintenance: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  status: import_zod.z.union([import_zod.z.lazy(() => EquipmentStatusSchema), import_zod.z.lazy(() => EnumEquipmentStatusFieldUpdateOperationsInputSchema)]).optional(),
  location: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantUpdateOneRequiredWithoutEquipmentNestedInputSchema).optional(),
  maintenanceLogs: import_zod.z.lazy(() => MaintenanceLogUpdateManyWithoutEquipmentNestedInputSchema).optional()
}).strict();
var EquipmentUncheckedUpdateWithoutRecipesInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  model: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  serialNumber: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  purchaseDate: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastMaintenance: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  nextMaintenance: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  status: import_zod.z.union([import_zod.z.lazy(() => EquipmentStatusSchema), import_zod.z.lazy(() => EnumEquipmentStatusFieldUpdateOperationsInputSchema)]).optional(),
  location: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  maintenanceLogs: import_zod.z.lazy(() => MaintenanceLogUncheckedUpdateManyWithoutEquipmentNestedInputSchema).optional()
}).strict();
var EquipmentCreateWithoutMaintenanceLogsInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  model: import_zod.z.string().optional().nullable(),
  serialNumber: import_zod.z.string().optional().nullable(),
  purchaseDate: import_zod.z.coerce.date().optional().nullable(),
  lastMaintenance: import_zod.z.coerce.date().optional().nullable(),
  nextMaintenance: import_zod.z.coerce.date().optional().nullable(),
  status: import_zod.z.lazy(() => EquipmentStatusSchema).optional(),
  location: import_zod.z.string().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  restaurant: import_zod.z.lazy(() => RestaurantCreateNestedOneWithoutEquipmentInputSchema),
  recipes: import_zod.z.lazy(() => RecipeEquipmentCreateNestedManyWithoutEquipmentInputSchema).optional()
}).strict();
var EquipmentUncheckedCreateWithoutMaintenanceLogsInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  model: import_zod.z.string().optional().nullable(),
  serialNumber: import_zod.z.string().optional().nullable(),
  purchaseDate: import_zod.z.coerce.date().optional().nullable(),
  lastMaintenance: import_zod.z.coerce.date().optional().nullable(),
  nextMaintenance: import_zod.z.coerce.date().optional().nullable(),
  status: import_zod.z.lazy(() => EquipmentStatusSchema).optional(),
  location: import_zod.z.string().optional().nullable(),
  restaurantId: import_zod.z.number().int(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  recipes: import_zod.z.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutEquipmentInputSchema).optional()
}).strict();
var EquipmentCreateOrConnectWithoutMaintenanceLogsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => EquipmentWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => EquipmentCreateWithoutMaintenanceLogsInputSchema), import_zod.z.lazy(() => EquipmentUncheckedCreateWithoutMaintenanceLogsInputSchema)])
}).strict();
var EquipmentUpsertWithoutMaintenanceLogsInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => EquipmentUpdateWithoutMaintenanceLogsInputSchema), import_zod.z.lazy(() => EquipmentUncheckedUpdateWithoutMaintenanceLogsInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => EquipmentCreateWithoutMaintenanceLogsInputSchema), import_zod.z.lazy(() => EquipmentUncheckedCreateWithoutMaintenanceLogsInputSchema)]),
  where: import_zod.z.lazy(() => EquipmentWhereInputSchema).optional()
}).strict();
var EquipmentUpdateToOneWithWhereWithoutMaintenanceLogsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => EquipmentWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => EquipmentUpdateWithoutMaintenanceLogsInputSchema), import_zod.z.lazy(() => EquipmentUncheckedUpdateWithoutMaintenanceLogsInputSchema)])
}).strict();
var EquipmentUpdateWithoutMaintenanceLogsInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  model: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  serialNumber: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  purchaseDate: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastMaintenance: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  nextMaintenance: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  status: import_zod.z.union([import_zod.z.lazy(() => EquipmentStatusSchema), import_zod.z.lazy(() => EnumEquipmentStatusFieldUpdateOperationsInputSchema)]).optional(),
  location: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantUpdateOneRequiredWithoutEquipmentNestedInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeEquipmentUpdateManyWithoutEquipmentNestedInputSchema).optional()
}).strict();
var EquipmentUncheckedUpdateWithoutMaintenanceLogsInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  model: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  serialNumber: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  purchaseDate: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastMaintenance: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  nextMaintenance: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  status: import_zod.z.union([import_zod.z.lazy(() => EquipmentStatusSchema), import_zod.z.lazy(() => EnumEquipmentStatusFieldUpdateOperationsInputSchema)]).optional(),
  location: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  recipes: import_zod.z.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutEquipmentNestedInputSchema).optional()
}).strict();
var RestaurantCreateWithoutQualityChecklistInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  imageUrl: import_zod.z.string().optional().nullable(),
  address: import_zod.z.string(),
  city: import_zod.z.string(),
  zipCode: import_zod.z.string(),
  state: import_zod.z.string(),
  owner: import_zod.z.string(),
  foodCost: import_zod.z.number().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  isDeleted: import_zod.z.boolean().optional(),
  deleted: import_zod.z.coerce.date().optional().nullable(),
  organization: import_zod.z.lazy(() => OrganizationCreateNestedOneWithoutRestaurantsInputSchema).optional(),
  users: import_zod.z.lazy(() => UserCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: import_zod.z.lazy(() => CookBookCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: import_zod.z.lazy(() => InventoryCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: import_zod.z.lazy(() => OrderCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: import_zod.z.lazy(() => MenuCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipment: import_zod.z.lazy(() => EquipmentCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qustomerFeedback: import_zod.z.lazy(() => CustomerFeedbackCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();
var RestaurantUncheckedCreateWithoutQualityChecklistInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  imageUrl: import_zod.z.string().optional().nullable(),
  address: import_zod.z.string(),
  city: import_zod.z.string(),
  zipCode: import_zod.z.string(),
  state: import_zod.z.string(),
  owner: import_zod.z.string(),
  organizationId: import_zod.z.number().int().optional().nullable(),
  foodCost: import_zod.z.number().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  isDeleted: import_zod.z.boolean().optional(),
  deleted: import_zod.z.coerce.date().optional().nullable(),
  users: import_zod.z.lazy(() => UserUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: import_zod.z.lazy(() => CookBookUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: import_zod.z.lazy(() => InventoryUncheckedCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: import_zod.z.lazy(() => OrderUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: import_zod.z.lazy(() => MenuUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipment: import_zod.z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qustomerFeedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();
var RestaurantCreateOrConnectWithoutQualityChecklistInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RestaurantWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => RestaurantCreateWithoutQualityChecklistInputSchema), import_zod.z.lazy(() => RestaurantUncheckedCreateWithoutQualityChecklistInputSchema)])
}).strict();
var ChecklistItemCreateWithoutChecklistInputSchema = import_zod.z.object({
  description: import_zod.z.string(),
  order: import_zod.z.number().int(),
  type: import_zod.z.lazy(() => ChecklistItemTypeSchema),
  requiredPhotos: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  completions: import_zod.z.lazy(() => ChecklistItemCompleteCreateNestedManyWithoutChecklistItemInputSchema).optional()
}).strict();
var ChecklistItemUncheckedCreateWithoutChecklistInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  description: import_zod.z.string(),
  order: import_zod.z.number().int(),
  type: import_zod.z.lazy(() => ChecklistItemTypeSchema),
  requiredPhotos: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  completions: import_zod.z.lazy(() => ChecklistItemCompleteUncheckedCreateNestedManyWithoutChecklistItemInputSchema).optional()
}).strict();
var ChecklistItemCreateOrConnectWithoutChecklistInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => ChecklistItemWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCreateWithoutChecklistInputSchema), import_zod.z.lazy(() => ChecklistItemUncheckedCreateWithoutChecklistInputSchema)])
}).strict();
var ChecklistItemCreateManyChecklistInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCreateManyChecklistInputSchema), import_zod.z.lazy(() => ChecklistItemCreateManyChecklistInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var ChecklistCompleteCreateWithoutChecklistInputSchema = import_zod.z.object({
  date: import_zod.z.coerce.date(),
  notes: import_zod.z.string().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  completedBy: import_zod.z.lazy(() => UserCreateNestedOneWithoutChecklistCompleteInputSchema),
  items: import_zod.z.lazy(() => ChecklistItemCompleteCreateNestedManyWithoutChecklistCompleteInputSchema).optional()
}).strict();
var ChecklistCompleteUncheckedCreateWithoutChecklistInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  completedById: import_zod.z.number().int(),
  date: import_zod.z.coerce.date(),
  notes: import_zod.z.string().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  items: import_zod.z.lazy(() => ChecklistItemCompleteUncheckedCreateNestedManyWithoutChecklistCompleteInputSchema).optional()
}).strict();
var ChecklistCompleteCreateOrConnectWithoutChecklistInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => ChecklistCompleteWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteCreateWithoutChecklistInputSchema), import_zod.z.lazy(() => ChecklistCompleteUncheckedCreateWithoutChecklistInputSchema)])
}).strict();
var ChecklistCompleteCreateManyChecklistInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteCreateManyChecklistInputSchema), import_zod.z.lazy(() => ChecklistCompleteCreateManyChecklistInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var RestaurantUpsertWithoutQualityChecklistInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => RestaurantUpdateWithoutQualityChecklistInputSchema), import_zod.z.lazy(() => RestaurantUncheckedUpdateWithoutQualityChecklistInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => RestaurantCreateWithoutQualityChecklistInputSchema), import_zod.z.lazy(() => RestaurantUncheckedCreateWithoutQualityChecklistInputSchema)]),
  where: import_zod.z.lazy(() => RestaurantWhereInputSchema).optional()
}).strict();
var RestaurantUpdateToOneWithWhereWithoutQualityChecklistInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RestaurantWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => RestaurantUpdateWithoutQualityChecklistInputSchema), import_zod.z.lazy(() => RestaurantUncheckedUpdateWithoutQualityChecklistInputSchema)])
}).strict();
var RestaurantUpdateWithoutQualityChecklistInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  address: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  city: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  zipCode: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  state: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  owner: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  deleted: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  organization: import_zod.z.lazy(() => OrganizationUpdateOneWithoutRestaurantsNestedInputSchema).optional(),
  users: import_zod.z.lazy(() => UserUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: import_zod.z.lazy(() => CookBookUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: import_zod.z.lazy(() => InventoryUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: import_zod.z.lazy(() => OrderUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: import_zod.z.lazy(() => MenuUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipment: import_zod.z.lazy(() => EquipmentUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qustomerFeedback: import_zod.z.lazy(() => CustomerFeedbackUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();
var RestaurantUncheckedUpdateWithoutQualityChecklistInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  address: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  city: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  zipCode: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  state: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  owner: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  deleted: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  users: import_zod.z.lazy(() => UserUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: import_zod.z.lazy(() => CookBookUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: import_zod.z.lazy(() => InventoryUncheckedUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: import_zod.z.lazy(() => OrderUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: import_zod.z.lazy(() => MenuUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipment: import_zod.z.lazy(() => EquipmentUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qustomerFeedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();
var ChecklistItemUpsertWithWhereUniqueWithoutChecklistInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => ChecklistItemWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemUpdateWithoutChecklistInputSchema), import_zod.z.lazy(() => ChecklistItemUncheckedUpdateWithoutChecklistInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCreateWithoutChecklistInputSchema), import_zod.z.lazy(() => ChecklistItemUncheckedCreateWithoutChecklistInputSchema)])
}).strict();
var ChecklistItemUpdateWithWhereUniqueWithoutChecklistInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => ChecklistItemWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemUpdateWithoutChecklistInputSchema), import_zod.z.lazy(() => ChecklistItemUncheckedUpdateWithoutChecklistInputSchema)])
}).strict();
var ChecklistItemUpdateManyWithWhereWithoutChecklistInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => ChecklistItemScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemUpdateManyMutationInputSchema), import_zod.z.lazy(() => ChecklistItemUncheckedUpdateManyWithoutChecklistInputSchema)])
}).strict();
var ChecklistItemScalarWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemScalarWhereInputSchema), import_zod.z.lazy(() => ChecklistItemScalarWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => ChecklistItemScalarWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemScalarWhereInputSchema), import_zod.z.lazy(() => ChecklistItemScalarWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  checklistId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  description: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  order: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  type: import_zod.z.union([import_zod.z.lazy(() => EnumChecklistItemTypeFilterSchema), import_zod.z.lazy(() => ChecklistItemTypeSchema)]).optional(),
  requiredPhotos: import_zod.z.union([import_zod.z.lazy(() => BoolFilterSchema), import_zod.z.boolean()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var ChecklistCompleteUpsertWithWhereUniqueWithoutChecklistInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => ChecklistCompleteWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteUpdateWithoutChecklistInputSchema), import_zod.z.lazy(() => ChecklistCompleteUncheckedUpdateWithoutChecklistInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteCreateWithoutChecklistInputSchema), import_zod.z.lazy(() => ChecklistCompleteUncheckedCreateWithoutChecklistInputSchema)])
}).strict();
var ChecklistCompleteUpdateWithWhereUniqueWithoutChecklistInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => ChecklistCompleteWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteUpdateWithoutChecklistInputSchema), import_zod.z.lazy(() => ChecklistCompleteUncheckedUpdateWithoutChecklistInputSchema)])
}).strict();
var ChecklistCompleteUpdateManyWithWhereWithoutChecklistInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => ChecklistCompleteScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteUpdateManyMutationInputSchema), import_zod.z.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutChecklistInputSchema)])
}).strict();
var ChecklistCompleteScalarWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteScalarWhereInputSchema), import_zod.z.lazy(() => ChecklistCompleteScalarWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => ChecklistCompleteScalarWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteScalarWhereInputSchema), import_zod.z.lazy(() => ChecklistCompleteScalarWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  checklistId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  completedById: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  date: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  notes: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var QualityChecklistCreateWithoutItemsInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  frequency: import_zod.z.lazy(() => ChecklistFrequencySchema).optional(),
  isActive: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  restaurant: import_zod.z.lazy(() => RestaurantCreateNestedOneWithoutQualityChecklistInputSchema),
  completions: import_zod.z.lazy(() => ChecklistCompleteCreateNestedManyWithoutChecklistInputSchema).optional()
}).strict();
var QualityChecklistUncheckedCreateWithoutItemsInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  restaurantId: import_zod.z.number().int(),
  frequency: import_zod.z.lazy(() => ChecklistFrequencySchema).optional(),
  isActive: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  completions: import_zod.z.lazy(() => ChecklistCompleteUncheckedCreateNestedManyWithoutChecklistInputSchema).optional()
}).strict();
var QualityChecklistCreateOrConnectWithoutItemsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => QualityChecklistWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => QualityChecklistCreateWithoutItemsInputSchema), import_zod.z.lazy(() => QualityChecklistUncheckedCreateWithoutItemsInputSchema)])
}).strict();
var ChecklistItemCompleteCreateWithoutChecklistItemInputSchema = import_zod.z.object({
  status: import_zod.z.lazy(() => ChecklistStatusSchema),
  notes: import_zod.z.string().optional().nullable(),
  photoUrls: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteCreatephotoUrlsInputSchema), import_zod.z.string().array()]).optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteCreateNestedOneWithoutItemsInputSchema)
}).strict();
var ChecklistItemCompleteUncheckedCreateWithoutChecklistItemInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  checklistCompleteId: import_zod.z.number().int(),
  status: import_zod.z.lazy(() => ChecklistStatusSchema),
  notes: import_zod.z.string().optional().nullable(),
  photoUrls: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteCreatephotoUrlsInputSchema), import_zod.z.string().array()]).optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var ChecklistItemCompleteCreateOrConnectWithoutChecklistItemInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteCreateWithoutChecklistItemInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteUncheckedCreateWithoutChecklistItemInputSchema)])
}).strict();
var ChecklistItemCompleteCreateManyChecklistItemInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteCreateManyChecklistItemInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteCreateManyChecklistItemInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var QualityChecklistUpsertWithoutItemsInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => QualityChecklistUpdateWithoutItemsInputSchema), import_zod.z.lazy(() => QualityChecklistUncheckedUpdateWithoutItemsInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => QualityChecklistCreateWithoutItemsInputSchema), import_zod.z.lazy(() => QualityChecklistUncheckedCreateWithoutItemsInputSchema)]),
  where: import_zod.z.lazy(() => QualityChecklistWhereInputSchema).optional()
}).strict();
var QualityChecklistUpdateToOneWithWhereWithoutItemsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => QualityChecklistWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => QualityChecklistUpdateWithoutItemsInputSchema), import_zod.z.lazy(() => QualityChecklistUncheckedUpdateWithoutItemsInputSchema)])
}).strict();
var QualityChecklistUpdateWithoutItemsInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  frequency: import_zod.z.union([import_zod.z.lazy(() => ChecklistFrequencySchema), import_zod.z.lazy(() => EnumChecklistFrequencyFieldUpdateOperationsInputSchema)]).optional(),
  isActive: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantUpdateOneRequiredWithoutQualityChecklistNestedInputSchema).optional(),
  completions: import_zod.z.lazy(() => ChecklistCompleteUpdateManyWithoutChecklistNestedInputSchema).optional()
}).strict();
var QualityChecklistUncheckedUpdateWithoutItemsInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: import_zod.z.union([import_zod.z.lazy(() => ChecklistFrequencySchema), import_zod.z.lazy(() => EnumChecklistFrequencyFieldUpdateOperationsInputSchema)]).optional(),
  isActive: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  completions: import_zod.z.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutChecklistNestedInputSchema).optional()
}).strict();
var ChecklistItemCompleteUpsertWithWhereUniqueWithoutChecklistItemInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteUpdateWithoutChecklistItemInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteUncheckedUpdateWithoutChecklistItemInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteCreateWithoutChecklistItemInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteUncheckedCreateWithoutChecklistItemInputSchema)])
}).strict();
var ChecklistItemCompleteUpdateWithWhereUniqueWithoutChecklistItemInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteUpdateWithoutChecklistItemInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteUncheckedUpdateWithoutChecklistItemInputSchema)])
}).strict();
var ChecklistItemCompleteUpdateManyWithWhereWithoutChecklistItemInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => ChecklistItemCompleteScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteUpdateManyMutationInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteUncheckedUpdateManyWithoutChecklistItemInputSchema)])
}).strict();
var ChecklistItemCompleteScalarWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteScalarWhereInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteScalarWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => ChecklistItemCompleteScalarWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteScalarWhereInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteScalarWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  checklistCompleteId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  checklistItemId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => EnumChecklistStatusFilterSchema), import_zod.z.lazy(() => ChecklistStatusSchema)]).optional(),
  notes: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  photoUrls: import_zod.z.lazy(() => StringNullableListFilterSchema).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var QualityChecklistCreateWithoutCompletionsInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  frequency: import_zod.z.lazy(() => ChecklistFrequencySchema).optional(),
  isActive: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  restaurant: import_zod.z.lazy(() => RestaurantCreateNestedOneWithoutQualityChecklistInputSchema),
  items: import_zod.z.lazy(() => ChecklistItemCreateNestedManyWithoutChecklistInputSchema).optional()
}).strict();
var QualityChecklistUncheckedCreateWithoutCompletionsInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  restaurantId: import_zod.z.number().int(),
  frequency: import_zod.z.lazy(() => ChecklistFrequencySchema).optional(),
  isActive: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  items: import_zod.z.lazy(() => ChecklistItemUncheckedCreateNestedManyWithoutChecklistInputSchema).optional()
}).strict();
var QualityChecklistCreateOrConnectWithoutCompletionsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => QualityChecklistWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => QualityChecklistCreateWithoutCompletionsInputSchema), import_zod.z.lazy(() => QualityChecklistUncheckedCreateWithoutCompletionsInputSchema)])
}).strict();
var UserCreateWithoutChecklistCompleteInputSchema = import_zod.z.object({
  email: import_zod.z.string(),
  sub: import_zod.z.number().int().optional().nullable(),
  passwordHash: import_zod.z.string(),
  firstName: import_zod.z.string(),
  lastName: import_zod.z.string(),
  profileImage: import_zod.z.string().optional().nullable(),
  verified: import_zod.z.boolean().optional(),
  role: import_zod.z.lazy(() => UserRoleSchema),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  organization: import_zod.z.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantCreateNestedOneWithoutUsersInputSchema).optional(),
  shifts: import_zod.z.lazy(() => ShiftCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutCreatedByInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserUncheckedCreateWithoutChecklistCompleteInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  email: import_zod.z.string(),
  sub: import_zod.z.number().int().optional().nullable(),
  passwordHash: import_zod.z.string(),
  firstName: import_zod.z.string(),
  lastName: import_zod.z.string(),
  profileImage: import_zod.z.string().optional().nullable(),
  verified: import_zod.z.boolean().optional(),
  role: import_zod.z.lazy(() => UserRoleSchema),
  organizationId: import_zod.z.number().int().optional().nullable(),
  restaurantId: import_zod.z.number().int().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  shifts: import_zod.z.lazy(() => ShiftUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserCreateOrConnectWithoutChecklistCompleteInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => UserWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutChecklistCompleteInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutChecklistCompleteInputSchema)])
}).strict();
var ChecklistItemCompleteCreateWithoutChecklistCompleteInputSchema = import_zod.z.object({
  status: import_zod.z.lazy(() => ChecklistStatusSchema),
  notes: import_zod.z.string().optional().nullable(),
  photoUrls: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteCreatephotoUrlsInputSchema), import_zod.z.string().array()]).optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  checklistItem: import_zod.z.lazy(() => ChecklistItemCreateNestedOneWithoutCompletionsInputSchema)
}).strict();
var ChecklistItemCompleteUncheckedCreateWithoutChecklistCompleteInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  checklistItemId: import_zod.z.number().int(),
  status: import_zod.z.lazy(() => ChecklistStatusSchema),
  notes: import_zod.z.string().optional().nullable(),
  photoUrls: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteCreatephotoUrlsInputSchema), import_zod.z.string().array()]).optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var ChecklistItemCompleteCreateOrConnectWithoutChecklistCompleteInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteCreateWithoutChecklistCompleteInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteUncheckedCreateWithoutChecklistCompleteInputSchema)])
}).strict();
var ChecklistItemCompleteCreateManyChecklistCompleteInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteCreateManyChecklistCompleteInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteCreateManyChecklistCompleteInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var QualityChecklistUpsertWithoutCompletionsInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => QualityChecklistUpdateWithoutCompletionsInputSchema), import_zod.z.lazy(() => QualityChecklistUncheckedUpdateWithoutCompletionsInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => QualityChecklistCreateWithoutCompletionsInputSchema), import_zod.z.lazy(() => QualityChecklistUncheckedCreateWithoutCompletionsInputSchema)]),
  where: import_zod.z.lazy(() => QualityChecklistWhereInputSchema).optional()
}).strict();
var QualityChecklistUpdateToOneWithWhereWithoutCompletionsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => QualityChecklistWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => QualityChecklistUpdateWithoutCompletionsInputSchema), import_zod.z.lazy(() => QualityChecklistUncheckedUpdateWithoutCompletionsInputSchema)])
}).strict();
var QualityChecklistUpdateWithoutCompletionsInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  frequency: import_zod.z.union([import_zod.z.lazy(() => ChecklistFrequencySchema), import_zod.z.lazy(() => EnumChecklistFrequencyFieldUpdateOperationsInputSchema)]).optional(),
  isActive: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantUpdateOneRequiredWithoutQualityChecklistNestedInputSchema).optional(),
  items: import_zod.z.lazy(() => ChecklistItemUpdateManyWithoutChecklistNestedInputSchema).optional()
}).strict();
var QualityChecklistUncheckedUpdateWithoutCompletionsInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: import_zod.z.union([import_zod.z.lazy(() => ChecklistFrequencySchema), import_zod.z.lazy(() => EnumChecklistFrequencyFieldUpdateOperationsInputSchema)]).optional(),
  isActive: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  items: import_zod.z.lazy(() => ChecklistItemUncheckedUpdateManyWithoutChecklistNestedInputSchema).optional()
}).strict();
var UserUpsertWithoutChecklistCompleteInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => UserUpdateWithoutChecklistCompleteInputSchema), import_zod.z.lazy(() => UserUncheckedUpdateWithoutChecklistCompleteInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutChecklistCompleteInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutChecklistCompleteInputSchema)]),
  where: import_zod.z.lazy(() => UserWhereInputSchema).optional()
}).strict();
var UserUpdateToOneWithWhereWithoutChecklistCompleteInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => UserWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => UserUpdateWithoutChecklistCompleteInputSchema), import_zod.z.lazy(() => UserUncheckedUpdateWithoutChecklistCompleteInputSchema)])
}).strict();
var UserUpdateWithoutChecklistCompleteInputSchema = import_zod.z.object({
  email: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: import_zod.z.union([import_zod.z.lazy(() => UserRoleSchema), import_zod.z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  organization: import_zod.z.lazy(() => OrganizationUpdateOneWithoutUsersNestedInputSchema).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantUpdateOneWithoutUsersNestedInputSchema).optional(),
  shifts: import_zod.z.lazy(() => ShiftUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var UserUncheckedUpdateWithoutChecklistCompleteInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  email: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: import_zod.z.union([import_zod.z.lazy(() => UserRoleSchema), import_zod.z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  shifts: import_zod.z.lazy(() => ShiftUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemUncheckedUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var ChecklistItemCompleteUpsertWithWhereUniqueWithoutChecklistCompleteInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteUpdateWithoutChecklistCompleteInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteUncheckedUpdateWithoutChecklistCompleteInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteCreateWithoutChecklistCompleteInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteUncheckedCreateWithoutChecklistCompleteInputSchema)])
}).strict();
var ChecklistItemCompleteUpdateWithWhereUniqueWithoutChecklistCompleteInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => ChecklistItemCompleteWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteUpdateWithoutChecklistCompleteInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteUncheckedUpdateWithoutChecklistCompleteInputSchema)])
}).strict();
var ChecklistItemCompleteUpdateManyWithWhereWithoutChecklistCompleteInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => ChecklistItemCompleteScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteUpdateManyMutationInputSchema), import_zod.z.lazy(() => ChecklistItemCompleteUncheckedUpdateManyWithoutChecklistCompleteInputSchema)])
}).strict();
var ChecklistCompleteCreateWithoutItemsInputSchema = import_zod.z.object({
  date: import_zod.z.coerce.date(),
  notes: import_zod.z.string().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  checklist: import_zod.z.lazy(() => QualityChecklistCreateNestedOneWithoutCompletionsInputSchema),
  completedBy: import_zod.z.lazy(() => UserCreateNestedOneWithoutChecklistCompleteInputSchema)
}).strict();
var ChecklistCompleteUncheckedCreateWithoutItemsInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  checklistId: import_zod.z.number().int(),
  completedById: import_zod.z.number().int(),
  date: import_zod.z.coerce.date(),
  notes: import_zod.z.string().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var ChecklistCompleteCreateOrConnectWithoutItemsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => ChecklistCompleteWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteCreateWithoutItemsInputSchema), import_zod.z.lazy(() => ChecklistCompleteUncheckedCreateWithoutItemsInputSchema)])
}).strict();
var ChecklistItemCreateWithoutCompletionsInputSchema = import_zod.z.object({
  description: import_zod.z.string(),
  order: import_zod.z.number().int(),
  type: import_zod.z.lazy(() => ChecklistItemTypeSchema),
  requiredPhotos: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  checklist: import_zod.z.lazy(() => QualityChecklistCreateNestedOneWithoutItemsInputSchema)
}).strict();
var ChecklistItemUncheckedCreateWithoutCompletionsInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  checklistId: import_zod.z.number().int(),
  description: import_zod.z.string(),
  order: import_zod.z.number().int(),
  type: import_zod.z.lazy(() => ChecklistItemTypeSchema),
  requiredPhotos: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var ChecklistItemCreateOrConnectWithoutCompletionsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => ChecklistItemWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCreateWithoutCompletionsInputSchema), import_zod.z.lazy(() => ChecklistItemUncheckedCreateWithoutCompletionsInputSchema)])
}).strict();
var ChecklistCompleteUpsertWithoutItemsInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteUpdateWithoutItemsInputSchema), import_zod.z.lazy(() => ChecklistCompleteUncheckedUpdateWithoutItemsInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteCreateWithoutItemsInputSchema), import_zod.z.lazy(() => ChecklistCompleteUncheckedCreateWithoutItemsInputSchema)]),
  where: import_zod.z.lazy(() => ChecklistCompleteWhereInputSchema).optional()
}).strict();
var ChecklistCompleteUpdateToOneWithWhereWithoutItemsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => ChecklistCompleteWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteUpdateWithoutItemsInputSchema), import_zod.z.lazy(() => ChecklistCompleteUncheckedUpdateWithoutItemsInputSchema)])
}).strict();
var ChecklistCompleteUpdateWithoutItemsInputSchema = import_zod.z.object({
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  notes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  checklist: import_zod.z.lazy(() => QualityChecklistUpdateOneRequiredWithoutCompletionsNestedInputSchema).optional(),
  completedBy: import_zod.z.lazy(() => UserUpdateOneRequiredWithoutChecklistCompleteNestedInputSchema).optional()
}).strict();
var ChecklistCompleteUncheckedUpdateWithoutItemsInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  checklistId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  completedById: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  notes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ChecklistItemUpsertWithoutCompletionsInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemUpdateWithoutCompletionsInputSchema), import_zod.z.lazy(() => ChecklistItemUncheckedUpdateWithoutCompletionsInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCreateWithoutCompletionsInputSchema), import_zod.z.lazy(() => ChecklistItemUncheckedCreateWithoutCompletionsInputSchema)]),
  where: import_zod.z.lazy(() => ChecklistItemWhereInputSchema).optional()
}).strict();
var ChecklistItemUpdateToOneWithWhereWithoutCompletionsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => ChecklistItemWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemUpdateWithoutCompletionsInputSchema), import_zod.z.lazy(() => ChecklistItemUncheckedUpdateWithoutCompletionsInputSchema)])
}).strict();
var ChecklistItemUpdateWithoutCompletionsInputSchema = import_zod.z.object({
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  order: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  type: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemTypeSchema), import_zod.z.lazy(() => EnumChecklistItemTypeFieldUpdateOperationsInputSchema)]).optional(),
  requiredPhotos: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  checklist: import_zod.z.lazy(() => QualityChecklistUpdateOneRequiredWithoutItemsNestedInputSchema).optional()
}).strict();
var ChecklistItemUncheckedUpdateWithoutCompletionsInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  checklistId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  order: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  type: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemTypeSchema), import_zod.z.lazy(() => EnumChecklistItemTypeFieldUpdateOperationsInputSchema)]).optional(),
  requiredPhotos: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var VendorCreateWithoutSupplierPriceHistoryInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  contact: import_zod.z.string(),
  email: import_zod.z.string(),
  phone: import_zod.z.string(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  orders: import_zod.z.lazy(() => OrderCreateNestedManyWithoutVendorInputSchema).optional(),
  ingredients: import_zod.z.lazy(() => IngredientCreateNestedManyWithoutVendorsInputSchema).optional()
}).strict();
var VendorUncheckedCreateWithoutSupplierPriceHistoryInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  contact: import_zod.z.string(),
  email: import_zod.z.string(),
  phone: import_zod.z.string(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  orders: import_zod.z.lazy(() => OrderUncheckedCreateNestedManyWithoutVendorInputSchema).optional(),
  ingredients: import_zod.z.lazy(() => IngredientUncheckedCreateNestedManyWithoutVendorsInputSchema).optional()
}).strict();
var VendorCreateOrConnectWithoutSupplierPriceHistoryInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => VendorWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => VendorCreateWithoutSupplierPriceHistoryInputSchema), import_zod.z.lazy(() => VendorUncheckedCreateWithoutSupplierPriceHistoryInputSchema)])
}).strict();
var IngredientCreateWithoutSupplierPriceHistoryInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  category: import_zod.z.string(),
  price: import_zod.z.number(),
  recipeIngredients: import_zod.z.lazy(() => RecipeIngredientCreateNestedManyWithoutIngredientInputSchema).optional(),
  inventoryItems: import_zod.z.lazy(() => InventoryItemCreateNestedManyWithoutIngredientInputSchema).optional(),
  orderItems: import_zod.z.lazy(() => OrderItemCreateNestedManyWithoutIngredientInputSchema).optional(),
  vendors: import_zod.z.lazy(() => VendorCreateNestedManyWithoutIngredientsInputSchema).optional(),
  WasteRecord: import_zod.z.lazy(() => WasteRecordCreateNestedManyWithoutIngredienteInputSchema).optional(),
  IngredientAllergen: import_zod.z.lazy(() => IngredientAllergenCreateNestedManyWithoutIngredientInputSchema).optional(),
  DietaryRestriction: import_zod.z.lazy(() => DietaryRestrictionCreateNestedOneWithoutIngredientsInputSchema).optional()
}).strict();
var IngredientUncheckedCreateWithoutSupplierPriceHistoryInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  category: import_zod.z.string(),
  price: import_zod.z.number(),
  dietaryRestrictionId: import_zod.z.number().int().optional().nullable(),
  recipeIngredients: import_zod.z.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  inventoryItems: import_zod.z.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  orderItems: import_zod.z.lazy(() => OrderItemUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  vendors: import_zod.z.lazy(() => VendorUncheckedCreateNestedManyWithoutIngredientsInputSchema).optional(),
  WasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutIngredienteInputSchema).optional(),
  IngredientAllergen: import_zod.z.lazy(() => IngredientAllergenUncheckedCreateNestedManyWithoutIngredientInputSchema).optional()
}).strict();
var IngredientCreateOrConnectWithoutSupplierPriceHistoryInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => IngredientWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => IngredientCreateWithoutSupplierPriceHistoryInputSchema), import_zod.z.lazy(() => IngredientUncheckedCreateWithoutSupplierPriceHistoryInputSchema)])
}).strict();
var VendorUpsertWithoutSupplierPriceHistoryInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => VendorUpdateWithoutSupplierPriceHistoryInputSchema), import_zod.z.lazy(() => VendorUncheckedUpdateWithoutSupplierPriceHistoryInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => VendorCreateWithoutSupplierPriceHistoryInputSchema), import_zod.z.lazy(() => VendorUncheckedCreateWithoutSupplierPriceHistoryInputSchema)]),
  where: import_zod.z.lazy(() => VendorWhereInputSchema).optional()
}).strict();
var VendorUpdateToOneWithWhereWithoutSupplierPriceHistoryInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => VendorWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => VendorUpdateWithoutSupplierPriceHistoryInputSchema), import_zod.z.lazy(() => VendorUncheckedUpdateWithoutSupplierPriceHistoryInputSchema)])
}).strict();
var VendorUpdateWithoutSupplierPriceHistoryInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  contact: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  email: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  phone: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  orders: import_zod.z.lazy(() => OrderUpdateManyWithoutVendorNestedInputSchema).optional(),
  ingredients: import_zod.z.lazy(() => IngredientUpdateManyWithoutVendorsNestedInputSchema).optional()
}).strict();
var VendorUncheckedUpdateWithoutSupplierPriceHistoryInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  contact: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  email: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  phone: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  orders: import_zod.z.lazy(() => OrderUncheckedUpdateManyWithoutVendorNestedInputSchema).optional(),
  ingredients: import_zod.z.lazy(() => IngredientUncheckedUpdateManyWithoutVendorsNestedInputSchema).optional()
}).strict();
var IngredientUpsertWithoutSupplierPriceHistoryInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => IngredientUpdateWithoutSupplierPriceHistoryInputSchema), import_zod.z.lazy(() => IngredientUncheckedUpdateWithoutSupplierPriceHistoryInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => IngredientCreateWithoutSupplierPriceHistoryInputSchema), import_zod.z.lazy(() => IngredientUncheckedCreateWithoutSupplierPriceHistoryInputSchema)]),
  where: import_zod.z.lazy(() => IngredientWhereInputSchema).optional()
}).strict();
var IngredientUpdateToOneWithWhereWithoutSupplierPriceHistoryInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => IngredientWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => IngredientUpdateWithoutSupplierPriceHistoryInputSchema), import_zod.z.lazy(() => IngredientUncheckedUpdateWithoutSupplierPriceHistoryInputSchema)])
}).strict();
var IngredientUpdateWithoutSupplierPriceHistoryInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  category: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIngredients: import_zod.z.lazy(() => RecipeIngredientUpdateManyWithoutIngredientNestedInputSchema).optional(),
  inventoryItems: import_zod.z.lazy(() => InventoryItemUpdateManyWithoutIngredientNestedInputSchema).optional(),
  orderItems: import_zod.z.lazy(() => OrderItemUpdateManyWithoutIngredientNestedInputSchema).optional(),
  vendors: import_zod.z.lazy(() => VendorUpdateManyWithoutIngredientsNestedInputSchema).optional(),
  WasteRecord: import_zod.z.lazy(() => WasteRecordUpdateManyWithoutIngredienteNestedInputSchema).optional(),
  IngredientAllergen: import_zod.z.lazy(() => IngredientAllergenUpdateManyWithoutIngredientNestedInputSchema).optional(),
  DietaryRestriction: import_zod.z.lazy(() => DietaryRestrictionUpdateOneWithoutIngredientsNestedInputSchema).optional()
}).strict();
var IngredientUncheckedUpdateWithoutSupplierPriceHistoryInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  category: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  dietaryRestrictionId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  recipeIngredients: import_zod.z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  inventoryItems: import_zod.z.lazy(() => InventoryItemUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  orderItems: import_zod.z.lazy(() => OrderItemUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  vendors: import_zod.z.lazy(() => VendorUncheckedUpdateManyWithoutIngredientsNestedInputSchema).optional(),
  WasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedUpdateManyWithoutIngredienteNestedInputSchema).optional(),
  IngredientAllergen: import_zod.z.lazy(() => IngredientAllergenUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional()
}).strict();
var RestaurantCreateWithoutQustomerFeedbackInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  imageUrl: import_zod.z.string().optional().nullable(),
  address: import_zod.z.string(),
  city: import_zod.z.string(),
  zipCode: import_zod.z.string(),
  state: import_zod.z.string(),
  owner: import_zod.z.string(),
  foodCost: import_zod.z.number().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  isDeleted: import_zod.z.boolean().optional(),
  deleted: import_zod.z.coerce.date().optional().nullable(),
  organization: import_zod.z.lazy(() => OrganizationCreateNestedOneWithoutRestaurantsInputSchema).optional(),
  users: import_zod.z.lazy(() => UserCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: import_zod.z.lazy(() => CookBookCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: import_zod.z.lazy(() => InventoryCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: import_zod.z.lazy(() => OrderCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: import_zod.z.lazy(() => MenuCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipment: import_zod.z.lazy(() => EquipmentCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklist: import_zod.z.lazy(() => QualityChecklistCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();
var RestaurantUncheckedCreateWithoutQustomerFeedbackInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  imageUrl: import_zod.z.string().optional().nullable(),
  address: import_zod.z.string(),
  city: import_zod.z.string(),
  zipCode: import_zod.z.string(),
  state: import_zod.z.string(),
  owner: import_zod.z.string(),
  organizationId: import_zod.z.number().int().optional().nullable(),
  foodCost: import_zod.z.number().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  isDeleted: import_zod.z.boolean().optional(),
  deleted: import_zod.z.coerce.date().optional().nullable(),
  users: import_zod.z.lazy(() => UserUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: import_zod.z.lazy(() => CookBookUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: import_zod.z.lazy(() => InventoryUncheckedCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: import_zod.z.lazy(() => OrderUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: import_zod.z.lazy(() => MenuUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipment: import_zod.z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklist: import_zod.z.lazy(() => QualityChecklistUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();
var RestaurantCreateOrConnectWithoutQustomerFeedbackInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RestaurantWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => RestaurantCreateWithoutQustomerFeedbackInputSchema), import_zod.z.lazy(() => RestaurantUncheckedCreateWithoutQustomerFeedbackInputSchema)])
}).strict();
var MenuItemCreateWithoutFeedbackInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  price: import_zod.z.number(),
  foodCost: import_zod.z.number(),
  recipeIds: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeIdsInputSchema), import_zod.z.number().int().array()]).optional(),
  recipeServingsAmount: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema), import_zod.z.number().array()]).optional(),
  recipeServingsCost: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeServingsCostInputSchema), import_zod.z.number().array()]).optional(),
  allergens: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateallergensInputSchema), import_zod.z.string().array()]).optional(),
  nutritionalInfoId: import_zod.z.number().int().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  nutritionalInfo: import_zod.z.lazy(() => NutritionalInfoCreateNestedOneWithoutMenuItemInputSchema).optional(),
  menu: import_zod.z.lazy(() => MenuCreateNestedOneWithoutMenuItemsInputSchema),
  recipes: import_zod.z.lazy(() => RecipeCreateNestedManyWithoutMenuItemsInputSchema).optional(),
  menuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeCreateNestedManyWithoutMenuItemInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsCreateNestedManyWithoutMenuItemInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemCreateNestedManyWithoutMenuItemInputSchema).optional(),
  nutritionalRecommendation: import_zod.z.lazy(() => NutritionalRecommendationCreateNestedManyWithoutMenuItemInputSchema).optional(),
  category: import_zod.z.lazy(() => MenuCategoryCreateNestedOneWithoutMenuItemsInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionCreateNestedManyWithoutMenuItemsInputSchema).optional()
}).strict();
var MenuItemUncheckedCreateWithoutFeedbackInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  price: import_zod.z.number(),
  foodCost: import_zod.z.number(),
  recipeIds: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeIdsInputSchema), import_zod.z.number().int().array()]).optional(),
  recipeServingsAmount: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema), import_zod.z.number().array()]).optional(),
  recipeServingsCost: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeServingsCostInputSchema), import_zod.z.number().array()]).optional(),
  allergens: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateallergensInputSchema), import_zod.z.string().array()]).optional(),
  nutritionalInfoId: import_zod.z.number().int().optional().nullable(),
  menuId: import_zod.z.number().int(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  categoryId: import_zod.z.number().int().optional().nullable(),
  nutritionalInfo: import_zod.z.lazy(() => NutritionalInfoUncheckedCreateNestedOneWithoutMenuItemInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUncheckedCreateNestedManyWithoutMenuItemsInputSchema).optional(),
  menuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  nutritionalRecommendation: import_zod.z.lazy(() => NutritionalRecommendationUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutMenuItemsInputSchema).optional()
}).strict();
var MenuItemCreateOrConnectWithoutFeedbackInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateWithoutFeedbackInputSchema), import_zod.z.lazy(() => MenuItemUncheckedCreateWithoutFeedbackInputSchema)])
}).strict();
var UserCreateWithoutCustomerFeedbackInputSchema = import_zod.z.object({
  email: import_zod.z.string(),
  sub: import_zod.z.number().int().optional().nullable(),
  passwordHash: import_zod.z.string(),
  firstName: import_zod.z.string(),
  lastName: import_zod.z.string(),
  profileImage: import_zod.z.string().optional().nullable(),
  verified: import_zod.z.boolean().optional(),
  role: import_zod.z.lazy(() => UserRoleSchema),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  organization: import_zod.z.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantCreateNestedOneWithoutUsersInputSchema).optional(),
  shifts: import_zod.z.lazy(() => ShiftCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteCreateNestedManyWithoutCompletedByInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserUncheckedCreateWithoutCustomerFeedbackInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  email: import_zod.z.string(),
  sub: import_zod.z.number().int().optional().nullable(),
  passwordHash: import_zod.z.string(),
  firstName: import_zod.z.string(),
  lastName: import_zod.z.string(),
  profileImage: import_zod.z.string().optional().nullable(),
  verified: import_zod.z.boolean().optional(),
  role: import_zod.z.lazy(() => UserRoleSchema),
  organizationId: import_zod.z.number().int().optional().nullable(),
  restaurantId: import_zod.z.number().int().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  shifts: import_zod.z.lazy(() => ShiftUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteUncheckedCreateNestedManyWithoutCompletedByInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserCreateOrConnectWithoutCustomerFeedbackInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => UserWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutCustomerFeedbackInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutCustomerFeedbackInputSchema)])
}).strict();
var RestaurantUpsertWithoutQustomerFeedbackInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => RestaurantUpdateWithoutQustomerFeedbackInputSchema), import_zod.z.lazy(() => RestaurantUncheckedUpdateWithoutQustomerFeedbackInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => RestaurantCreateWithoutQustomerFeedbackInputSchema), import_zod.z.lazy(() => RestaurantUncheckedCreateWithoutQustomerFeedbackInputSchema)]),
  where: import_zod.z.lazy(() => RestaurantWhereInputSchema).optional()
}).strict();
var RestaurantUpdateToOneWithWhereWithoutQustomerFeedbackInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RestaurantWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => RestaurantUpdateWithoutQustomerFeedbackInputSchema), import_zod.z.lazy(() => RestaurantUncheckedUpdateWithoutQustomerFeedbackInputSchema)])
}).strict();
var RestaurantUpdateWithoutQustomerFeedbackInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  address: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  city: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  zipCode: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  state: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  owner: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  deleted: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  organization: import_zod.z.lazy(() => OrganizationUpdateOneWithoutRestaurantsNestedInputSchema).optional(),
  users: import_zod.z.lazy(() => UserUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: import_zod.z.lazy(() => CookBookUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: import_zod.z.lazy(() => InventoryUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: import_zod.z.lazy(() => OrderUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: import_zod.z.lazy(() => MenuUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipment: import_zod.z.lazy(() => EquipmentUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklist: import_zod.z.lazy(() => QualityChecklistUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();
var RestaurantUncheckedUpdateWithoutQustomerFeedbackInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  address: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  city: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  zipCode: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  state: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  owner: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  deleted: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  users: import_zod.z.lazy(() => UserUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: import_zod.z.lazy(() => CookBookUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: import_zod.z.lazy(() => InventoryUncheckedUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: import_zod.z.lazy(() => OrderUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: import_zod.z.lazy(() => MenuUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipment: import_zod.z.lazy(() => EquipmentUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklist: import_zod.z.lazy(() => QualityChecklistUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();
var MenuItemUpsertWithoutFeedbackInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateWithoutFeedbackInputSchema), import_zod.z.lazy(() => MenuItemUncheckedUpdateWithoutFeedbackInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateWithoutFeedbackInputSchema), import_zod.z.lazy(() => MenuItemUncheckedCreateWithoutFeedbackInputSchema)]),
  where: import_zod.z.lazy(() => MenuItemWhereInputSchema).optional()
}).strict();
var MenuItemUpdateToOneWithWhereWithoutFeedbackInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => MenuItemWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateWithoutFeedbackInputSchema), import_zod.z.lazy(() => MenuItemUncheckedUpdateWithoutFeedbackInputSchema)])
}).strict();
var MenuItemUpdateWithoutFeedbackInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIds: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeIdsInputSchema), import_zod.z.number().int().array()]).optional(),
  recipeServingsAmount: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema), import_zod.z.number().array()]).optional(),
  recipeServingsCost: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema), import_zod.z.number().array()]).optional(),
  allergens: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateallergensInputSchema), import_zod.z.string().array()]).optional(),
  nutritionalInfoId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  nutritionalInfo: import_zod.z.lazy(() => NutritionalInfoUpdateOneWithoutMenuItemNestedInputSchema).optional(),
  menu: import_zod.z.lazy(() => MenuUpdateOneRequiredWithoutMenuItemsNestedInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUpdateManyWithoutMenuItemsNestedInputSchema).optional(),
  menuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  nutritionalRecommendation: import_zod.z.lazy(() => NutritionalRecommendationUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  category: import_zod.z.lazy(() => MenuCategoryUpdateOneWithoutMenuItemsNestedInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUpdateManyWithoutMenuItemsNestedInputSchema).optional()
}).strict();
var MenuItemUncheckedUpdateWithoutFeedbackInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIds: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeIdsInputSchema), import_zod.z.number().int().array()]).optional(),
  recipeServingsAmount: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema), import_zod.z.number().array()]).optional(),
  recipeServingsCost: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema), import_zod.z.number().array()]).optional(),
  allergens: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateallergensInputSchema), import_zod.z.string().array()]).optional(),
  nutritionalInfoId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  menuId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  categoryId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  nutritionalInfo: import_zod.z.lazy(() => NutritionalInfoUncheckedUpdateOneWithoutMenuItemNestedInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUncheckedUpdateManyWithoutMenuItemsNestedInputSchema).optional(),
  menuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  nutritionalRecommendation: import_zod.z.lazy(() => NutritionalRecommendationUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutMenuItemsNestedInputSchema).optional()
}).strict();
var UserUpsertWithoutCustomerFeedbackInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => UserUpdateWithoutCustomerFeedbackInputSchema), import_zod.z.lazy(() => UserUncheckedUpdateWithoutCustomerFeedbackInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutCustomerFeedbackInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutCustomerFeedbackInputSchema)]),
  where: import_zod.z.lazy(() => UserWhereInputSchema).optional()
}).strict();
var UserUpdateToOneWithWhereWithoutCustomerFeedbackInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => UserWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => UserUpdateWithoutCustomerFeedbackInputSchema), import_zod.z.lazy(() => UserUncheckedUpdateWithoutCustomerFeedbackInputSchema)])
}).strict();
var UserUpdateWithoutCustomerFeedbackInputSchema = import_zod.z.object({
  email: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: import_zod.z.union([import_zod.z.lazy(() => UserRoleSchema), import_zod.z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  organization: import_zod.z.lazy(() => OrganizationUpdateOneWithoutUsersNestedInputSchema).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantUpdateOneWithoutUsersNestedInputSchema).optional(),
  shifts: import_zod.z.lazy(() => ShiftUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var UserUncheckedUpdateWithoutCustomerFeedbackInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  email: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: import_zod.z.union([import_zod.z.lazy(() => UserRoleSchema), import_zod.z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  shifts: import_zod.z.lazy(() => ShiftUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemUncheckedUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var MenuItemCreateWithoutDietaryRestrictionsInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  price: import_zod.z.number(),
  foodCost: import_zod.z.number(),
  recipeIds: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeIdsInputSchema), import_zod.z.number().int().array()]).optional(),
  recipeServingsAmount: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema), import_zod.z.number().array()]).optional(),
  recipeServingsCost: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeServingsCostInputSchema), import_zod.z.number().array()]).optional(),
  allergens: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateallergensInputSchema), import_zod.z.string().array()]).optional(),
  nutritionalInfoId: import_zod.z.number().int().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  nutritionalInfo: import_zod.z.lazy(() => NutritionalInfoCreateNestedOneWithoutMenuItemInputSchema).optional(),
  menu: import_zod.z.lazy(() => MenuCreateNestedOneWithoutMenuItemsInputSchema),
  recipes: import_zod.z.lazy(() => RecipeCreateNestedManyWithoutMenuItemsInputSchema).optional(),
  menuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeCreateNestedManyWithoutMenuItemInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsCreateNestedManyWithoutMenuItemInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemCreateNestedManyWithoutMenuItemInputSchema).optional(),
  nutritionalRecommendation: import_zod.z.lazy(() => NutritionalRecommendationCreateNestedManyWithoutMenuItemInputSchema).optional(),
  category: import_zod.z.lazy(() => MenuCategoryCreateNestedOneWithoutMenuItemsInputSchema).optional(),
  feedback: import_zod.z.lazy(() => CustomerFeedbackCreateNestedManyWithoutMenuItemInputSchema).optional()
}).strict();
var MenuItemUncheckedCreateWithoutDietaryRestrictionsInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  price: import_zod.z.number(),
  foodCost: import_zod.z.number(),
  recipeIds: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeIdsInputSchema), import_zod.z.number().int().array()]).optional(),
  recipeServingsAmount: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema), import_zod.z.number().array()]).optional(),
  recipeServingsCost: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeServingsCostInputSchema), import_zod.z.number().array()]).optional(),
  allergens: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateallergensInputSchema), import_zod.z.string().array()]).optional(),
  nutritionalInfoId: import_zod.z.number().int().optional().nullable(),
  menuId: import_zod.z.number().int(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  categoryId: import_zod.z.number().int().optional().nullable(),
  nutritionalInfo: import_zod.z.lazy(() => NutritionalInfoUncheckedCreateNestedOneWithoutMenuItemInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUncheckedCreateNestedManyWithoutMenuItemsInputSchema).optional(),
  menuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  nutritionalRecommendation: import_zod.z.lazy(() => NutritionalRecommendationUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  feedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional()
}).strict();
var MenuItemCreateOrConnectWithoutDietaryRestrictionsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateWithoutDietaryRestrictionsInputSchema), import_zod.z.lazy(() => MenuItemUncheckedCreateWithoutDietaryRestrictionsInputSchema)])
}).strict();
var RecipeCreateWithoutDietaryRestrictionsInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.string().optional().nullable(),
  servings: import_zod.z.number().int(),
  cookTime: import_zod.z.number().int(),
  prepTime: import_zod.z.number().int(),
  frequency: import_zod.z.number().int().optional().nullable(),
  foodCost: import_zod.z.number().optional().nullable(),
  isDeleted: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  restaurant: import_zod.z.lazy(() => RestaurantCreateNestedOneWithoutRecipesInputSchema),
  cookBook: import_zod.z.lazy(() => CookBookCreateNestedOneWithoutRecipesInputSchema),
  ingredients: import_zod.z.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeCreateNestedManyWithoutRecipeInputSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentCreateNestedManyWithoutRecipeInputSchema).optional()
}).strict();
var RecipeUncheckedCreateWithoutDietaryRestrictionsInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.string().optional().nullable(),
  servings: import_zod.z.number().int(),
  cookTime: import_zod.z.number().int(),
  prepTime: import_zod.z.number().int(),
  frequency: import_zod.z.number().int().optional().nullable(),
  restaurantId: import_zod.z.number().int(),
  cookBookId: import_zod.z.number().int(),
  foodCost: import_zod.z.number().optional().nullable(),
  isDeleted: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInputSchema).optional()
}).strict();
var RecipeCreateOrConnectWithoutDietaryRestrictionsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutDietaryRestrictionsInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutDietaryRestrictionsInputSchema)])
}).strict();
var IngredientCreateWithoutDietaryRestrictionInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  category: import_zod.z.string(),
  price: import_zod.z.number(),
  recipeIngredients: import_zod.z.lazy(() => RecipeIngredientCreateNestedManyWithoutIngredientInputSchema).optional(),
  inventoryItems: import_zod.z.lazy(() => InventoryItemCreateNestedManyWithoutIngredientInputSchema).optional(),
  orderItems: import_zod.z.lazy(() => OrderItemCreateNestedManyWithoutIngredientInputSchema).optional(),
  vendors: import_zod.z.lazy(() => VendorCreateNestedManyWithoutIngredientsInputSchema).optional(),
  WasteRecord: import_zod.z.lazy(() => WasteRecordCreateNestedManyWithoutIngredienteInputSchema).optional(),
  IngredientAllergen: import_zod.z.lazy(() => IngredientAllergenCreateNestedManyWithoutIngredientInputSchema).optional(),
  SupplierPriceHistory: import_zod.z.lazy(() => SupplierPriceHistoryCreateNestedManyWithoutIngredientInputSchema).optional()
}).strict();
var IngredientUncheckedCreateWithoutDietaryRestrictionInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  category: import_zod.z.string(),
  price: import_zod.z.number(),
  recipeIngredients: import_zod.z.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  inventoryItems: import_zod.z.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  orderItems: import_zod.z.lazy(() => OrderItemUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  vendors: import_zod.z.lazy(() => VendorUncheckedCreateNestedManyWithoutIngredientsInputSchema).optional(),
  WasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutIngredienteInputSchema).optional(),
  IngredientAllergen: import_zod.z.lazy(() => IngredientAllergenUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  SupplierPriceHistory: import_zod.z.lazy(() => SupplierPriceHistoryUncheckedCreateNestedManyWithoutIngredientInputSchema).optional()
}).strict();
var IngredientCreateOrConnectWithoutDietaryRestrictionInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => IngredientWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => IngredientCreateWithoutDietaryRestrictionInputSchema), import_zod.z.lazy(() => IngredientUncheckedCreateWithoutDietaryRestrictionInputSchema)])
}).strict();
var IngredientCreateManyDietaryRestrictionInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => IngredientCreateManyDietaryRestrictionInputSchema), import_zod.z.lazy(() => IngredientCreateManyDietaryRestrictionInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var MenuItemUpsertWithWhereUniqueWithoutDietaryRestrictionsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateWithoutDietaryRestrictionsInputSchema), import_zod.z.lazy(() => MenuItemUncheckedUpdateWithoutDietaryRestrictionsInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateWithoutDietaryRestrictionsInputSchema), import_zod.z.lazy(() => MenuItemUncheckedCreateWithoutDietaryRestrictionsInputSchema)])
}).strict();
var MenuItemUpdateWithWhereUniqueWithoutDietaryRestrictionsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateWithoutDietaryRestrictionsInputSchema), import_zod.z.lazy(() => MenuItemUncheckedUpdateWithoutDietaryRestrictionsInputSchema)])
}).strict();
var MenuItemUpdateManyWithWhereWithoutDietaryRestrictionsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => MenuItemScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateManyMutationInputSchema), import_zod.z.lazy(() => MenuItemUncheckedUpdateManyWithoutDietaryRestrictionsInputSchema)])
}).strict();
var RecipeUpsertWithWhereUniqueWithoutDietaryRestrictionsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateWithoutDietaryRestrictionsInputSchema), import_zod.z.lazy(() => RecipeUncheckedUpdateWithoutDietaryRestrictionsInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutDietaryRestrictionsInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutDietaryRestrictionsInputSchema)])
}).strict();
var RecipeUpdateWithWhereUniqueWithoutDietaryRestrictionsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateWithoutDietaryRestrictionsInputSchema), import_zod.z.lazy(() => RecipeUncheckedUpdateWithoutDietaryRestrictionsInputSchema)])
}).strict();
var RecipeUpdateManyWithWhereWithoutDietaryRestrictionsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateManyMutationInputSchema), import_zod.z.lazy(() => RecipeUncheckedUpdateManyWithoutDietaryRestrictionsInputSchema)])
}).strict();
var RecipeScalarWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => RecipeScalarWhereInputSchema), import_zod.z.lazy(() => RecipeScalarWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => RecipeScalarWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => RecipeScalarWhereInputSchema), import_zod.z.lazy(() => RecipeScalarWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  name: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  imageUrl: import_zod.z.lazy(() => StringNullableListFilterSchema).optional(),
  description: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  servings: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  cookTime: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  prepTime: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  frequency: import_zod.z.union([import_zod.z.lazy(() => IntNullableFilterSchema), import_zod.z.number()]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  cookBookId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  foodCost: import_zod.z.union([import_zod.z.lazy(() => FloatNullableFilterSchema), import_zod.z.number()]).optional().nullable(),
  isDeleted: import_zod.z.union([import_zod.z.lazy(() => BoolFilterSchema), import_zod.z.boolean()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var IngredientUpsertWithWhereUniqueWithoutDietaryRestrictionInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => IngredientWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => IngredientUpdateWithoutDietaryRestrictionInputSchema), import_zod.z.lazy(() => IngredientUncheckedUpdateWithoutDietaryRestrictionInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => IngredientCreateWithoutDietaryRestrictionInputSchema), import_zod.z.lazy(() => IngredientUncheckedCreateWithoutDietaryRestrictionInputSchema)])
}).strict();
var IngredientUpdateWithWhereUniqueWithoutDietaryRestrictionInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => IngredientWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => IngredientUpdateWithoutDietaryRestrictionInputSchema), import_zod.z.lazy(() => IngredientUncheckedUpdateWithoutDietaryRestrictionInputSchema)])
}).strict();
var IngredientUpdateManyWithWhereWithoutDietaryRestrictionInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => IngredientScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => IngredientUpdateManyMutationInputSchema), import_zod.z.lazy(() => IngredientUncheckedUpdateManyWithoutDietaryRestrictionInputSchema)])
}).strict();
var IngredientScalarWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => IngredientScalarWhereInputSchema), import_zod.z.lazy(() => IngredientScalarWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => IngredientScalarWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => IngredientScalarWhereInputSchema), import_zod.z.lazy(() => IngredientScalarWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  name: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  category: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  price: import_zod.z.union([import_zod.z.lazy(() => FloatFilterSchema), import_zod.z.number()]).optional(),
  dietaryRestrictionId: import_zod.z.union([import_zod.z.lazy(() => IntNullableFilterSchema), import_zod.z.number()]).optional().nullable()
}).strict();
var RecipeCreateWithoutTagsInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.string().optional().nullable(),
  servings: import_zod.z.number().int(),
  cookTime: import_zod.z.number().int(),
  prepTime: import_zod.z.number().int(),
  frequency: import_zod.z.number().int().optional().nullable(),
  foodCost: import_zod.z.number().optional().nullable(),
  isDeleted: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  restaurant: import_zod.z.lazy(() => RestaurantCreateNestedOneWithoutRecipesInputSchema),
  cookBook: import_zod.z.lazy(() => CookBookCreateNestedOneWithoutRecipesInputSchema),
  ingredients: import_zod.z.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeCreateNestedManyWithoutRecipeInputSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutRecipeInputSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionCreateNestedManyWithoutRecipesInputSchema).optional()
}).strict();
var RecipeUncheckedCreateWithoutTagsInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.string().optional().nullable(),
  servings: import_zod.z.number().int(),
  cookTime: import_zod.z.number().int(),
  prepTime: import_zod.z.number().int(),
  frequency: import_zod.z.number().int().optional().nullable(),
  restaurantId: import_zod.z.number().int(),
  cookBookId: import_zod.z.number().int(),
  foodCost: import_zod.z.number().optional().nullable(),
  isDeleted: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutRecipesInputSchema).optional()
}).strict();
var RecipeCreateOrConnectWithoutTagsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutTagsInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutTagsInputSchema)])
}).strict();
var RecipeUpsertWithWhereUniqueWithoutTagsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateWithoutTagsInputSchema), import_zod.z.lazy(() => RecipeUncheckedUpdateWithoutTagsInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutTagsInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutTagsInputSchema)])
}).strict();
var RecipeUpdateWithWhereUniqueWithoutTagsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateWithoutTagsInputSchema), import_zod.z.lazy(() => RecipeUncheckedUpdateWithoutTagsInputSchema)])
}).strict();
var RecipeUpdateManyWithWhereWithoutTagsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateManyMutationInputSchema), import_zod.z.lazy(() => RecipeUncheckedUpdateManyWithoutTagsInputSchema)])
}).strict();
var RestaurantCreateWithoutLeftoverItemInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  imageUrl: import_zod.z.string().optional().nullable(),
  address: import_zod.z.string(),
  city: import_zod.z.string(),
  zipCode: import_zod.z.string(),
  state: import_zod.z.string(),
  owner: import_zod.z.string(),
  foodCost: import_zod.z.number().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  isDeleted: import_zod.z.boolean().optional(),
  deleted: import_zod.z.coerce.date().optional().nullable(),
  organization: import_zod.z.lazy(() => OrganizationCreateNestedOneWithoutRestaurantsInputSchema).optional(),
  users: import_zod.z.lazy(() => UserCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: import_zod.z.lazy(() => CookBookCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: import_zod.z.lazy(() => InventoryCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: import_zod.z.lazy(() => OrderCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: import_zod.z.lazy(() => MenuCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipment: import_zod.z.lazy(() => EquipmentCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklist: import_zod.z.lazy(() => QualityChecklistCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qustomerFeedback: import_zod.z.lazy(() => CustomerFeedbackCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();
var RestaurantUncheckedCreateWithoutLeftoverItemInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  imageUrl: import_zod.z.string().optional().nullable(),
  address: import_zod.z.string(),
  city: import_zod.z.string(),
  zipCode: import_zod.z.string(),
  state: import_zod.z.string(),
  owner: import_zod.z.string(),
  organizationId: import_zod.z.number().int().optional().nullable(),
  foodCost: import_zod.z.number().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  isDeleted: import_zod.z.boolean().optional(),
  deleted: import_zod.z.coerce.date().optional().nullable(),
  users: import_zod.z.lazy(() => UserUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: import_zod.z.lazy(() => CookBookUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: import_zod.z.lazy(() => InventoryUncheckedCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: import_zod.z.lazy(() => OrderUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: import_zod.z.lazy(() => MenuUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipment: import_zod.z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklist: import_zod.z.lazy(() => QualityChecklistUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qustomerFeedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();
var RestaurantCreateOrConnectWithoutLeftoverItemInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RestaurantWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => RestaurantCreateWithoutLeftoverItemInputSchema), import_zod.z.lazy(() => RestaurantUncheckedCreateWithoutLeftoverItemInputSchema)])
}).strict();
var MenuItemCreateWithoutLeftoverItemInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  price: import_zod.z.number(),
  foodCost: import_zod.z.number(),
  recipeIds: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeIdsInputSchema), import_zod.z.number().int().array()]).optional(),
  recipeServingsAmount: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema), import_zod.z.number().array()]).optional(),
  recipeServingsCost: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeServingsCostInputSchema), import_zod.z.number().array()]).optional(),
  allergens: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateallergensInputSchema), import_zod.z.string().array()]).optional(),
  nutritionalInfoId: import_zod.z.number().int().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  nutritionalInfo: import_zod.z.lazy(() => NutritionalInfoCreateNestedOneWithoutMenuItemInputSchema).optional(),
  menu: import_zod.z.lazy(() => MenuCreateNestedOneWithoutMenuItemsInputSchema),
  recipes: import_zod.z.lazy(() => RecipeCreateNestedManyWithoutMenuItemsInputSchema).optional(),
  menuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeCreateNestedManyWithoutMenuItemInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsCreateNestedManyWithoutMenuItemInputSchema).optional(),
  nutritionalRecommendation: import_zod.z.lazy(() => NutritionalRecommendationCreateNestedManyWithoutMenuItemInputSchema).optional(),
  category: import_zod.z.lazy(() => MenuCategoryCreateNestedOneWithoutMenuItemsInputSchema).optional(),
  feedback: import_zod.z.lazy(() => CustomerFeedbackCreateNestedManyWithoutMenuItemInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionCreateNestedManyWithoutMenuItemsInputSchema).optional()
}).strict();
var MenuItemUncheckedCreateWithoutLeftoverItemInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  price: import_zod.z.number(),
  foodCost: import_zod.z.number(),
  recipeIds: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeIdsInputSchema), import_zod.z.number().int().array()]).optional(),
  recipeServingsAmount: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema), import_zod.z.number().array()]).optional(),
  recipeServingsCost: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeServingsCostInputSchema), import_zod.z.number().array()]).optional(),
  allergens: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateallergensInputSchema), import_zod.z.string().array()]).optional(),
  nutritionalInfoId: import_zod.z.number().int().optional().nullable(),
  menuId: import_zod.z.number().int(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  categoryId: import_zod.z.number().int().optional().nullable(),
  nutritionalInfo: import_zod.z.lazy(() => NutritionalInfoUncheckedCreateNestedOneWithoutMenuItemInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUncheckedCreateNestedManyWithoutMenuItemsInputSchema).optional(),
  menuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  nutritionalRecommendation: import_zod.z.lazy(() => NutritionalRecommendationUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  feedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutMenuItemsInputSchema).optional()
}).strict();
var MenuItemCreateOrConnectWithoutLeftoverItemInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateWithoutLeftoverItemInputSchema), import_zod.z.lazy(() => MenuItemUncheckedCreateWithoutLeftoverItemInputSchema)])
}).strict();
var UserCreateWithoutLeftoverItemInputSchema = import_zod.z.object({
  email: import_zod.z.string(),
  sub: import_zod.z.number().int().optional().nullable(),
  passwordHash: import_zod.z.string(),
  firstName: import_zod.z.string(),
  lastName: import_zod.z.string(),
  profileImage: import_zod.z.string().optional().nullable(),
  verified: import_zod.z.boolean().optional(),
  role: import_zod.z.lazy(() => UserRoleSchema),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  organization: import_zod.z.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantCreateNestedOneWithoutUsersInputSchema).optional(),
  shifts: import_zod.z.lazy(() => ShiftCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetCreateNestedManyWithoutUserInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserUncheckedCreateWithoutLeftoverItemInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  email: import_zod.z.string(),
  sub: import_zod.z.number().int().optional().nullable(),
  passwordHash: import_zod.z.string(),
  firstName: import_zod.z.string(),
  lastName: import_zod.z.string(),
  profileImage: import_zod.z.string().optional().nullable(),
  verified: import_zod.z.boolean().optional(),
  role: import_zod.z.lazy(() => UserRoleSchema),
  organizationId: import_zod.z.number().int().optional().nullable(),
  restaurantId: import_zod.z.number().int().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  shifts: import_zod.z.lazy(() => ShiftUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteUncheckedCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserCreateOrConnectWithoutLeftoverItemInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => UserWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutLeftoverItemInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutLeftoverItemInputSchema)])
}).strict();
var RestaurantUpsertWithoutLeftoverItemInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => RestaurantUpdateWithoutLeftoverItemInputSchema), import_zod.z.lazy(() => RestaurantUncheckedUpdateWithoutLeftoverItemInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => RestaurantCreateWithoutLeftoverItemInputSchema), import_zod.z.lazy(() => RestaurantUncheckedCreateWithoutLeftoverItemInputSchema)]),
  where: import_zod.z.lazy(() => RestaurantWhereInputSchema).optional()
}).strict();
var RestaurantUpdateToOneWithWhereWithoutLeftoverItemInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RestaurantWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => RestaurantUpdateWithoutLeftoverItemInputSchema), import_zod.z.lazy(() => RestaurantUncheckedUpdateWithoutLeftoverItemInputSchema)])
}).strict();
var RestaurantUpdateWithoutLeftoverItemInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  address: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  city: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  zipCode: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  state: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  owner: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  deleted: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  organization: import_zod.z.lazy(() => OrganizationUpdateOneWithoutRestaurantsNestedInputSchema).optional(),
  users: import_zod.z.lazy(() => UserUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: import_zod.z.lazy(() => CookBookUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: import_zod.z.lazy(() => InventoryUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: import_zod.z.lazy(() => OrderUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: import_zod.z.lazy(() => MenuUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipment: import_zod.z.lazy(() => EquipmentUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklist: import_zod.z.lazy(() => QualityChecklistUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qustomerFeedback: import_zod.z.lazy(() => CustomerFeedbackUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();
var RestaurantUncheckedUpdateWithoutLeftoverItemInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  address: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  city: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  zipCode: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  state: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  owner: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  deleted: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  users: import_zod.z.lazy(() => UserUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: import_zod.z.lazy(() => CookBookUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: import_zod.z.lazy(() => InventoryUncheckedUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: import_zod.z.lazy(() => OrderUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: import_zod.z.lazy(() => MenuUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipment: import_zod.z.lazy(() => EquipmentUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklist: import_zod.z.lazy(() => QualityChecklistUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qustomerFeedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();
var MenuItemUpsertWithoutLeftoverItemInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateWithoutLeftoverItemInputSchema), import_zod.z.lazy(() => MenuItemUncheckedUpdateWithoutLeftoverItemInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateWithoutLeftoverItemInputSchema), import_zod.z.lazy(() => MenuItemUncheckedCreateWithoutLeftoverItemInputSchema)]),
  where: import_zod.z.lazy(() => MenuItemWhereInputSchema).optional()
}).strict();
var MenuItemUpdateToOneWithWhereWithoutLeftoverItemInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => MenuItemWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateWithoutLeftoverItemInputSchema), import_zod.z.lazy(() => MenuItemUncheckedUpdateWithoutLeftoverItemInputSchema)])
}).strict();
var MenuItemUpdateWithoutLeftoverItemInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIds: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeIdsInputSchema), import_zod.z.number().int().array()]).optional(),
  recipeServingsAmount: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema), import_zod.z.number().array()]).optional(),
  recipeServingsCost: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema), import_zod.z.number().array()]).optional(),
  allergens: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateallergensInputSchema), import_zod.z.string().array()]).optional(),
  nutritionalInfoId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  nutritionalInfo: import_zod.z.lazy(() => NutritionalInfoUpdateOneWithoutMenuItemNestedInputSchema).optional(),
  menu: import_zod.z.lazy(() => MenuUpdateOneRequiredWithoutMenuItemsNestedInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUpdateManyWithoutMenuItemsNestedInputSchema).optional(),
  menuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  nutritionalRecommendation: import_zod.z.lazy(() => NutritionalRecommendationUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  category: import_zod.z.lazy(() => MenuCategoryUpdateOneWithoutMenuItemsNestedInputSchema).optional(),
  feedback: import_zod.z.lazy(() => CustomerFeedbackUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUpdateManyWithoutMenuItemsNestedInputSchema).optional()
}).strict();
var MenuItemUncheckedUpdateWithoutLeftoverItemInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIds: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeIdsInputSchema), import_zod.z.number().int().array()]).optional(),
  recipeServingsAmount: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema), import_zod.z.number().array()]).optional(),
  recipeServingsCost: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema), import_zod.z.number().array()]).optional(),
  allergens: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateallergensInputSchema), import_zod.z.string().array()]).optional(),
  nutritionalInfoId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  menuId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  categoryId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  nutritionalInfo: import_zod.z.lazy(() => NutritionalInfoUncheckedUpdateOneWithoutMenuItemNestedInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUncheckedUpdateManyWithoutMenuItemsNestedInputSchema).optional(),
  menuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  nutritionalRecommendation: import_zod.z.lazy(() => NutritionalRecommendationUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  feedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutMenuItemsNestedInputSchema).optional()
}).strict();
var UserUpsertWithoutLeftoverItemInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => UserUpdateWithoutLeftoverItemInputSchema), import_zod.z.lazy(() => UserUncheckedUpdateWithoutLeftoverItemInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutLeftoverItemInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutLeftoverItemInputSchema)]),
  where: import_zod.z.lazy(() => UserWhereInputSchema).optional()
}).strict();
var UserUpdateToOneWithWhereWithoutLeftoverItemInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => UserWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => UserUpdateWithoutLeftoverItemInputSchema), import_zod.z.lazy(() => UserUncheckedUpdateWithoutLeftoverItemInputSchema)])
}).strict();
var UserUpdateWithoutLeftoverItemInputSchema = import_zod.z.object({
  email: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: import_zod.z.union([import_zod.z.lazy(() => UserRoleSchema), import_zod.z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  organization: import_zod.z.lazy(() => OrganizationUpdateOneWithoutUsersNestedInputSchema).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantUpdateOneWithoutUsersNestedInputSchema).optional(),
  shifts: import_zod.z.lazy(() => ShiftUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetUpdateManyWithoutUserNestedInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var UserUncheckedUpdateWithoutLeftoverItemInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  email: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: import_zod.z.union([import_zod.z.lazy(() => UserRoleSchema), import_zod.z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  shifts: import_zod.z.lazy(() => ShiftUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemUncheckedUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var RestaurantCreateWithoutWasteRecordInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  imageUrl: import_zod.z.string().optional().nullable(),
  address: import_zod.z.string(),
  city: import_zod.z.string(),
  zipCode: import_zod.z.string(),
  state: import_zod.z.string(),
  owner: import_zod.z.string(),
  foodCost: import_zod.z.number().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  isDeleted: import_zod.z.boolean().optional(),
  deleted: import_zod.z.coerce.date().optional().nullable(),
  organization: import_zod.z.lazy(() => OrganizationCreateNestedOneWithoutRestaurantsInputSchema).optional(),
  users: import_zod.z.lazy(() => UserCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: import_zod.z.lazy(() => CookBookCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: import_zod.z.lazy(() => InventoryCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: import_zod.z.lazy(() => OrderCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: import_zod.z.lazy(() => MenuCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipment: import_zod.z.lazy(() => EquipmentCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklist: import_zod.z.lazy(() => QualityChecklistCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qustomerFeedback: import_zod.z.lazy(() => CustomerFeedbackCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();
var RestaurantUncheckedCreateWithoutWasteRecordInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  imageUrl: import_zod.z.string().optional().nullable(),
  address: import_zod.z.string(),
  city: import_zod.z.string(),
  zipCode: import_zod.z.string(),
  state: import_zod.z.string(),
  owner: import_zod.z.string(),
  organizationId: import_zod.z.number().int().optional().nullable(),
  foodCost: import_zod.z.number().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  isDeleted: import_zod.z.boolean().optional(),
  deleted: import_zod.z.coerce.date().optional().nullable(),
  users: import_zod.z.lazy(() => UserUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: import_zod.z.lazy(() => CookBookUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: import_zod.z.lazy(() => InventoryUncheckedCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: import_zod.z.lazy(() => OrderUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: import_zod.z.lazy(() => MenuUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipment: import_zod.z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklist: import_zod.z.lazy(() => QualityChecklistUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qustomerFeedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();
var RestaurantCreateOrConnectWithoutWasteRecordInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RestaurantWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => RestaurantCreateWithoutWasteRecordInputSchema), import_zod.z.lazy(() => RestaurantUncheckedCreateWithoutWasteRecordInputSchema)])
}).strict();
var IngredientCreateWithoutWasteRecordInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  category: import_zod.z.string(),
  price: import_zod.z.number(),
  recipeIngredients: import_zod.z.lazy(() => RecipeIngredientCreateNestedManyWithoutIngredientInputSchema).optional(),
  inventoryItems: import_zod.z.lazy(() => InventoryItemCreateNestedManyWithoutIngredientInputSchema).optional(),
  orderItems: import_zod.z.lazy(() => OrderItemCreateNestedManyWithoutIngredientInputSchema).optional(),
  vendors: import_zod.z.lazy(() => VendorCreateNestedManyWithoutIngredientsInputSchema).optional(),
  IngredientAllergen: import_zod.z.lazy(() => IngredientAllergenCreateNestedManyWithoutIngredientInputSchema).optional(),
  SupplierPriceHistory: import_zod.z.lazy(() => SupplierPriceHistoryCreateNestedManyWithoutIngredientInputSchema).optional(),
  DietaryRestriction: import_zod.z.lazy(() => DietaryRestrictionCreateNestedOneWithoutIngredientsInputSchema).optional()
}).strict();
var IngredientUncheckedCreateWithoutWasteRecordInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  category: import_zod.z.string(),
  price: import_zod.z.number(),
  dietaryRestrictionId: import_zod.z.number().int().optional().nullable(),
  recipeIngredients: import_zod.z.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  inventoryItems: import_zod.z.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  orderItems: import_zod.z.lazy(() => OrderItemUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  vendors: import_zod.z.lazy(() => VendorUncheckedCreateNestedManyWithoutIngredientsInputSchema).optional(),
  IngredientAllergen: import_zod.z.lazy(() => IngredientAllergenUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  SupplierPriceHistory: import_zod.z.lazy(() => SupplierPriceHistoryUncheckedCreateNestedManyWithoutIngredientInputSchema).optional()
}).strict();
var IngredientCreateOrConnectWithoutWasteRecordInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => IngredientWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => IngredientCreateWithoutWasteRecordInputSchema), import_zod.z.lazy(() => IngredientUncheckedCreateWithoutWasteRecordInputSchema)])
}).strict();
var UserCreateWithoutWasteRecordInputSchema = import_zod.z.object({
  email: import_zod.z.string(),
  sub: import_zod.z.number().int().optional().nullable(),
  passwordHash: import_zod.z.string(),
  firstName: import_zod.z.string(),
  lastName: import_zod.z.string(),
  profileImage: import_zod.z.string().optional().nullable(),
  verified: import_zod.z.boolean().optional(),
  role: import_zod.z.lazy(() => UserRoleSchema),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  organization: import_zod.z.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantCreateNestedOneWithoutUsersInputSchema).optional(),
  shifts: import_zod.z.lazy(() => ShiftCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserUncheckedCreateWithoutWasteRecordInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  email: import_zod.z.string(),
  sub: import_zod.z.number().int().optional().nullable(),
  passwordHash: import_zod.z.string(),
  firstName: import_zod.z.string(),
  lastName: import_zod.z.string(),
  profileImage: import_zod.z.string().optional().nullable(),
  verified: import_zod.z.boolean().optional(),
  role: import_zod.z.lazy(() => UserRoleSchema),
  organizationId: import_zod.z.number().int().optional().nullable(),
  restaurantId: import_zod.z.number().int().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  shifts: import_zod.z.lazy(() => ShiftUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteUncheckedCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserCreateOrConnectWithoutWasteRecordInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => UserWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutWasteRecordInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutWasteRecordInputSchema)])
}).strict();
var RestaurantUpsertWithoutWasteRecordInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => RestaurantUpdateWithoutWasteRecordInputSchema), import_zod.z.lazy(() => RestaurantUncheckedUpdateWithoutWasteRecordInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => RestaurantCreateWithoutWasteRecordInputSchema), import_zod.z.lazy(() => RestaurantUncheckedCreateWithoutWasteRecordInputSchema)]),
  where: import_zod.z.lazy(() => RestaurantWhereInputSchema).optional()
}).strict();
var RestaurantUpdateToOneWithWhereWithoutWasteRecordInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RestaurantWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => RestaurantUpdateWithoutWasteRecordInputSchema), import_zod.z.lazy(() => RestaurantUncheckedUpdateWithoutWasteRecordInputSchema)])
}).strict();
var RestaurantUpdateWithoutWasteRecordInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  address: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  city: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  zipCode: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  state: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  owner: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  deleted: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  organization: import_zod.z.lazy(() => OrganizationUpdateOneWithoutRestaurantsNestedInputSchema).optional(),
  users: import_zod.z.lazy(() => UserUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: import_zod.z.lazy(() => CookBookUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: import_zod.z.lazy(() => InventoryUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: import_zod.z.lazy(() => OrderUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: import_zod.z.lazy(() => MenuUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipment: import_zod.z.lazy(() => EquipmentUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklist: import_zod.z.lazy(() => QualityChecklistUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qustomerFeedback: import_zod.z.lazy(() => CustomerFeedbackUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();
var RestaurantUncheckedUpdateWithoutWasteRecordInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  address: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  city: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  zipCode: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  state: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  owner: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  deleted: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  users: import_zod.z.lazy(() => UserUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: import_zod.z.lazy(() => CookBookUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: import_zod.z.lazy(() => InventoryUncheckedUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: import_zod.z.lazy(() => OrderUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: import_zod.z.lazy(() => MenuUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipment: import_zod.z.lazy(() => EquipmentUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklist: import_zod.z.lazy(() => QualityChecklistUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qustomerFeedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();
var IngredientUpsertWithoutWasteRecordInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => IngredientUpdateWithoutWasteRecordInputSchema), import_zod.z.lazy(() => IngredientUncheckedUpdateWithoutWasteRecordInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => IngredientCreateWithoutWasteRecordInputSchema), import_zod.z.lazy(() => IngredientUncheckedCreateWithoutWasteRecordInputSchema)]),
  where: import_zod.z.lazy(() => IngredientWhereInputSchema).optional()
}).strict();
var IngredientUpdateToOneWithWhereWithoutWasteRecordInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => IngredientWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => IngredientUpdateWithoutWasteRecordInputSchema), import_zod.z.lazy(() => IngredientUncheckedUpdateWithoutWasteRecordInputSchema)])
}).strict();
var IngredientUpdateWithoutWasteRecordInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  category: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIngredients: import_zod.z.lazy(() => RecipeIngredientUpdateManyWithoutIngredientNestedInputSchema).optional(),
  inventoryItems: import_zod.z.lazy(() => InventoryItemUpdateManyWithoutIngredientNestedInputSchema).optional(),
  orderItems: import_zod.z.lazy(() => OrderItemUpdateManyWithoutIngredientNestedInputSchema).optional(),
  vendors: import_zod.z.lazy(() => VendorUpdateManyWithoutIngredientsNestedInputSchema).optional(),
  IngredientAllergen: import_zod.z.lazy(() => IngredientAllergenUpdateManyWithoutIngredientNestedInputSchema).optional(),
  SupplierPriceHistory: import_zod.z.lazy(() => SupplierPriceHistoryUpdateManyWithoutIngredientNestedInputSchema).optional(),
  DietaryRestriction: import_zod.z.lazy(() => DietaryRestrictionUpdateOneWithoutIngredientsNestedInputSchema).optional()
}).strict();
var IngredientUncheckedUpdateWithoutWasteRecordInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  category: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  dietaryRestrictionId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  recipeIngredients: import_zod.z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  inventoryItems: import_zod.z.lazy(() => InventoryItemUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  orderItems: import_zod.z.lazy(() => OrderItemUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  vendors: import_zod.z.lazy(() => VendorUncheckedUpdateManyWithoutIngredientsNestedInputSchema).optional(),
  IngredientAllergen: import_zod.z.lazy(() => IngredientAllergenUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  SupplierPriceHistory: import_zod.z.lazy(() => SupplierPriceHistoryUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional()
}).strict();
var UserUpsertWithoutWasteRecordInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => UserUpdateWithoutWasteRecordInputSchema), import_zod.z.lazy(() => UserUncheckedUpdateWithoutWasteRecordInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutWasteRecordInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutWasteRecordInputSchema)]),
  where: import_zod.z.lazy(() => UserWhereInputSchema).optional()
}).strict();
var UserUpdateToOneWithWhereWithoutWasteRecordInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => UserWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => UserUpdateWithoutWasteRecordInputSchema), import_zod.z.lazy(() => UserUncheckedUpdateWithoutWasteRecordInputSchema)])
}).strict();
var UserUpdateWithoutWasteRecordInputSchema = import_zod.z.object({
  email: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: import_zod.z.union([import_zod.z.lazy(() => UserRoleSchema), import_zod.z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  organization: import_zod.z.lazy(() => OrganizationUpdateOneWithoutUsersNestedInputSchema).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantUpdateOneWithoutUsersNestedInputSchema).optional(),
  shifts: import_zod.z.lazy(() => ShiftUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var UserUncheckedUpdateWithoutWasteRecordInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  email: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: import_zod.z.union([import_zod.z.lazy(() => UserRoleSchema), import_zod.z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  shifts: import_zod.z.lazy(() => ShiftUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemUncheckedUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var RestaurantCreateWithoutProductionPlanInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  imageUrl: import_zod.z.string().optional().nullable(),
  address: import_zod.z.string(),
  city: import_zod.z.string(),
  zipCode: import_zod.z.string(),
  state: import_zod.z.string(),
  owner: import_zod.z.string(),
  foodCost: import_zod.z.number().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  isDeleted: import_zod.z.boolean().optional(),
  deleted: import_zod.z.coerce.date().optional().nullable(),
  organization: import_zod.z.lazy(() => OrganizationCreateNestedOneWithoutRestaurantsInputSchema).optional(),
  users: import_zod.z.lazy(() => UserCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: import_zod.z.lazy(() => CookBookCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: import_zod.z.lazy(() => InventoryCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: import_zod.z.lazy(() => OrderCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: import_zod.z.lazy(() => MenuCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipment: import_zod.z.lazy(() => EquipmentCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklist: import_zod.z.lazy(() => QualityChecklistCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qustomerFeedback: import_zod.z.lazy(() => CustomerFeedbackCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();
var RestaurantUncheckedCreateWithoutProductionPlanInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  imageUrl: import_zod.z.string().optional().nullable(),
  address: import_zod.z.string(),
  city: import_zod.z.string(),
  zipCode: import_zod.z.string(),
  state: import_zod.z.string(),
  owner: import_zod.z.string(),
  organizationId: import_zod.z.number().int().optional().nullable(),
  foodCost: import_zod.z.number().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  isDeleted: import_zod.z.boolean().optional(),
  deleted: import_zod.z.coerce.date().optional().nullable(),
  users: import_zod.z.lazy(() => UserUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: import_zod.z.lazy(() => CookBookUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: import_zod.z.lazy(() => InventoryUncheckedCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: import_zod.z.lazy(() => OrderUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: import_zod.z.lazy(() => MenuUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipment: import_zod.z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklist: import_zod.z.lazy(() => QualityChecklistUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qustomerFeedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();
var RestaurantCreateOrConnectWithoutProductionPlanInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RestaurantWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => RestaurantCreateWithoutProductionPlanInputSchema), import_zod.z.lazy(() => RestaurantUncheckedCreateWithoutProductionPlanInputSchema)])
}).strict();
var UserCreateWithoutProductionPlanInputSchema = import_zod.z.object({
  email: import_zod.z.string(),
  sub: import_zod.z.number().int().optional().nullable(),
  passwordHash: import_zod.z.string(),
  firstName: import_zod.z.string(),
  lastName: import_zod.z.string(),
  profileImage: import_zod.z.string().optional().nullable(),
  verified: import_zod.z.boolean().optional(),
  role: import_zod.z.lazy(() => UserRoleSchema),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  organization: import_zod.z.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantCreateNestedOneWithoutUsersInputSchema).optional(),
  shifts: import_zod.z.lazy(() => ShiftCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserUncheckedCreateWithoutProductionPlanInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  email: import_zod.z.string(),
  sub: import_zod.z.number().int().optional().nullable(),
  passwordHash: import_zod.z.string(),
  firstName: import_zod.z.string(),
  lastName: import_zod.z.string(),
  profileImage: import_zod.z.string().optional().nullable(),
  verified: import_zod.z.boolean().optional(),
  role: import_zod.z.lazy(() => UserRoleSchema),
  organizationId: import_zod.z.number().int().optional().nullable(),
  restaurantId: import_zod.z.number().int().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  shifts: import_zod.z.lazy(() => ShiftUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteUncheckedCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserCreateOrConnectWithoutProductionPlanInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => UserWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutProductionPlanInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutProductionPlanInputSchema)])
}).strict();
var ProductionPlanItemCreateWithoutProductionPlanInputSchema = import_zod.z.object({
  quantity: import_zod.z.number().int(),
  unit: import_zod.z.string(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  recipe: import_zod.z.lazy(() => RecipeCreateNestedOneWithoutProductionPlanItemInputSchema),
  assignedTo: import_zod.z.lazy(() => UserCreateNestedOneWithoutProductionPlanItemInputSchema).optional()
}).strict();
var ProductionPlanItemUncheckedCreateWithoutProductionPlanInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  recipeId: import_zod.z.number().int(),
  quantity: import_zod.z.number().int(),
  unit: import_zod.z.string(),
  assignedToId: import_zod.z.number().int().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var ProductionPlanItemCreateOrConnectWithoutProductionPlanInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemCreateWithoutProductionPlanInputSchema), import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateWithoutProductionPlanInputSchema)])
}).strict();
var ProductionPlanItemCreateManyProductionPlanInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemCreateManyProductionPlanInputSchema), import_zod.z.lazy(() => ProductionPlanItemCreateManyProductionPlanInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var RestaurantUpsertWithoutProductionPlanInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => RestaurantUpdateWithoutProductionPlanInputSchema), import_zod.z.lazy(() => RestaurantUncheckedUpdateWithoutProductionPlanInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => RestaurantCreateWithoutProductionPlanInputSchema), import_zod.z.lazy(() => RestaurantUncheckedCreateWithoutProductionPlanInputSchema)]),
  where: import_zod.z.lazy(() => RestaurantWhereInputSchema).optional()
}).strict();
var RestaurantUpdateToOneWithWhereWithoutProductionPlanInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RestaurantWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => RestaurantUpdateWithoutProductionPlanInputSchema), import_zod.z.lazy(() => RestaurantUncheckedUpdateWithoutProductionPlanInputSchema)])
}).strict();
var RestaurantUpdateWithoutProductionPlanInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  address: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  city: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  zipCode: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  state: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  owner: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  deleted: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  organization: import_zod.z.lazy(() => OrganizationUpdateOneWithoutRestaurantsNestedInputSchema).optional(),
  users: import_zod.z.lazy(() => UserUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: import_zod.z.lazy(() => CookBookUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: import_zod.z.lazy(() => InventoryUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: import_zod.z.lazy(() => OrderUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: import_zod.z.lazy(() => MenuUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipment: import_zod.z.lazy(() => EquipmentUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklist: import_zod.z.lazy(() => QualityChecklistUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qustomerFeedback: import_zod.z.lazy(() => CustomerFeedbackUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();
var RestaurantUncheckedUpdateWithoutProductionPlanInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  address: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  city: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  zipCode: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  state: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  owner: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  deleted: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  users: import_zod.z.lazy(() => UserUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: import_zod.z.lazy(() => CookBookUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: import_zod.z.lazy(() => InventoryUncheckedUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: import_zod.z.lazy(() => OrderUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: import_zod.z.lazy(() => MenuUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipment: import_zod.z.lazy(() => EquipmentUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklist: import_zod.z.lazy(() => QualityChecklistUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qustomerFeedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();
var UserUpsertWithoutProductionPlanInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => UserUpdateWithoutProductionPlanInputSchema), import_zod.z.lazy(() => UserUncheckedUpdateWithoutProductionPlanInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutProductionPlanInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutProductionPlanInputSchema)]),
  where: import_zod.z.lazy(() => UserWhereInputSchema).optional()
}).strict();
var UserUpdateToOneWithWhereWithoutProductionPlanInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => UserWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => UserUpdateWithoutProductionPlanInputSchema), import_zod.z.lazy(() => UserUncheckedUpdateWithoutProductionPlanInputSchema)])
}).strict();
var UserUpdateWithoutProductionPlanInputSchema = import_zod.z.object({
  email: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: import_zod.z.union([import_zod.z.lazy(() => UserRoleSchema), import_zod.z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  organization: import_zod.z.lazy(() => OrganizationUpdateOneWithoutUsersNestedInputSchema).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantUpdateOneWithoutUsersNestedInputSchema).optional(),
  shifts: import_zod.z.lazy(() => ShiftUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var UserUncheckedUpdateWithoutProductionPlanInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  email: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: import_zod.z.union([import_zod.z.lazy(() => UserRoleSchema), import_zod.z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  shifts: import_zod.z.lazy(() => ShiftUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemUncheckedUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var ProductionPlanItemUpsertWithWhereUniqueWithoutProductionPlanInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemUpdateWithoutProductionPlanInputSchema), import_zod.z.lazy(() => ProductionPlanItemUncheckedUpdateWithoutProductionPlanInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemCreateWithoutProductionPlanInputSchema), import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateWithoutProductionPlanInputSchema)])
}).strict();
var ProductionPlanItemUpdateWithWhereUniqueWithoutProductionPlanInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemUpdateWithoutProductionPlanInputSchema), import_zod.z.lazy(() => ProductionPlanItemUncheckedUpdateWithoutProductionPlanInputSchema)])
}).strict();
var ProductionPlanItemUpdateManyWithWhereWithoutProductionPlanInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => ProductionPlanItemScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemUpdateManyMutationInputSchema), import_zod.z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutProductionPlanInputSchema)])
}).strict();
var ProductionPlanItemScalarWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemScalarWhereInputSchema), import_zod.z.lazy(() => ProductionPlanItemScalarWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => ProductionPlanItemScalarWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemScalarWhereInputSchema), import_zod.z.lazy(() => ProductionPlanItemScalarWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  productionPlanId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  recipeId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  quantity: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  unit: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  assignedToId: import_zod.z.union([import_zod.z.lazy(() => IntNullableFilterSchema), import_zod.z.number()]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var ProductionPlanCreateWithoutItemsInputSchema = import_zod.z.object({
  date: import_zod.z.coerce.date(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  restaurant: import_zod.z.lazy(() => RestaurantCreateNestedOneWithoutProductionPlanInputSchema),
  createdBy: import_zod.z.lazy(() => UserCreateNestedOneWithoutProductionPlanInputSchema)
}).strict();
var ProductionPlanUncheckedCreateWithoutItemsInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  restaurantId: import_zod.z.number().int(),
  date: import_zod.z.coerce.date(),
  createdById: import_zod.z.number().int(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var ProductionPlanCreateOrConnectWithoutItemsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => ProductionPlanWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanCreateWithoutItemsInputSchema), import_zod.z.lazy(() => ProductionPlanUncheckedCreateWithoutItemsInputSchema)])
}).strict();
var RecipeCreateWithoutProductionPlanItemInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.string().optional().nullable(),
  servings: import_zod.z.number().int(),
  cookTime: import_zod.z.number().int(),
  prepTime: import_zod.z.number().int(),
  frequency: import_zod.z.number().int().optional().nullable(),
  foodCost: import_zod.z.number().optional().nullable(),
  isDeleted: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  restaurant: import_zod.z.lazy(() => RestaurantCreateNestedOneWithoutRecipesInputSchema),
  cookBook: import_zod.z.lazy(() => CookBookCreateNestedOneWithoutRecipesInputSchema),
  ingredients: import_zod.z.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeCreateNestedManyWithoutRecipeInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionCreateNestedManyWithoutRecipesInputSchema).optional()
}).strict();
var RecipeUncheckedCreateWithoutProductionPlanItemInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.string().optional().nullable(),
  servings: import_zod.z.number().int(),
  cookTime: import_zod.z.number().int(),
  prepTime: import_zod.z.number().int(),
  frequency: import_zod.z.number().int().optional().nullable(),
  restaurantId: import_zod.z.number().int(),
  cookBookId: import_zod.z.number().int(),
  foodCost: import_zod.z.number().optional().nullable(),
  isDeleted: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutRecipesInputSchema).optional()
}).strict();
var RecipeCreateOrConnectWithoutProductionPlanItemInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutProductionPlanItemInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutProductionPlanItemInputSchema)])
}).strict();
var UserCreateWithoutProductionPlanItemInputSchema = import_zod.z.object({
  email: import_zod.z.string(),
  sub: import_zod.z.number().int().optional().nullable(),
  passwordHash: import_zod.z.string(),
  firstName: import_zod.z.string(),
  lastName: import_zod.z.string(),
  profileImage: import_zod.z.string().optional().nullable(),
  verified: import_zod.z.boolean().optional(),
  role: import_zod.z.lazy(() => UserRoleSchema),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  organization: import_zod.z.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantCreateNestedOneWithoutUsersInputSchema).optional(),
  shifts: import_zod.z.lazy(() => ShiftCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanCreateNestedManyWithoutCreatedByInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserUncheckedCreateWithoutProductionPlanItemInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  email: import_zod.z.string(),
  sub: import_zod.z.number().int().optional().nullable(),
  passwordHash: import_zod.z.string(),
  firstName: import_zod.z.string(),
  lastName: import_zod.z.string(),
  profileImage: import_zod.z.string().optional().nullable(),
  verified: import_zod.z.boolean().optional(),
  role: import_zod.z.lazy(() => UserRoleSchema),
  organizationId: import_zod.z.number().int().optional().nullable(),
  restaurantId: import_zod.z.number().int().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  shifts: import_zod.z.lazy(() => ShiftUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteUncheckedCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserCreateOrConnectWithoutProductionPlanItemInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => UserWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutProductionPlanItemInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutProductionPlanItemInputSchema)])
}).strict();
var ProductionPlanUpsertWithoutItemsInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanUpdateWithoutItemsInputSchema), import_zod.z.lazy(() => ProductionPlanUncheckedUpdateWithoutItemsInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanCreateWithoutItemsInputSchema), import_zod.z.lazy(() => ProductionPlanUncheckedCreateWithoutItemsInputSchema)]),
  where: import_zod.z.lazy(() => ProductionPlanWhereInputSchema).optional()
}).strict();
var ProductionPlanUpdateToOneWithWhereWithoutItemsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => ProductionPlanWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanUpdateWithoutItemsInputSchema), import_zod.z.lazy(() => ProductionPlanUncheckedUpdateWithoutItemsInputSchema)])
}).strict();
var ProductionPlanUpdateWithoutItemsInputSchema = import_zod.z.object({
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantUpdateOneRequiredWithoutProductionPlanNestedInputSchema).optional(),
  createdBy: import_zod.z.lazy(() => UserUpdateOneRequiredWithoutProductionPlanNestedInputSchema).optional()
}).strict();
var ProductionPlanUncheckedUpdateWithoutItemsInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdById: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var RecipeUpsertWithoutProductionPlanItemInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateWithoutProductionPlanItemInputSchema), import_zod.z.lazy(() => RecipeUncheckedUpdateWithoutProductionPlanItemInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutProductionPlanItemInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutProductionPlanItemInputSchema)]),
  where: import_zod.z.lazy(() => RecipeWhereInputSchema).optional()
}).strict();
var RecipeUpdateToOneWithWhereWithoutProductionPlanItemInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateWithoutProductionPlanItemInputSchema), import_zod.z.lazy(() => RecipeUncheckedUpdateWithoutProductionPlanItemInputSchema)])
}).strict();
var RecipeUpdateWithoutProductionPlanItemInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  cookBook: import_zod.z.lazy(() => CookBookUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUpdateManyWithoutRecipeNestedInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUpdateManyWithoutRecipesNestedInputSchema).optional()
}).strict();
var RecipeUncheckedUpdateWithoutProductionPlanItemInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookBookId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional()
}).strict();
var UserUpsertWithoutProductionPlanItemInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => UserUpdateWithoutProductionPlanItemInputSchema), import_zod.z.lazy(() => UserUncheckedUpdateWithoutProductionPlanItemInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutProductionPlanItemInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutProductionPlanItemInputSchema)]),
  where: import_zod.z.lazy(() => UserWhereInputSchema).optional()
}).strict();
var UserUpdateToOneWithWhereWithoutProductionPlanItemInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => UserWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => UserUpdateWithoutProductionPlanItemInputSchema), import_zod.z.lazy(() => UserUncheckedUpdateWithoutProductionPlanItemInputSchema)])
}).strict();
var UserUpdateWithoutProductionPlanItemInputSchema = import_zod.z.object({
  email: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: import_zod.z.union([import_zod.z.lazy(() => UserRoleSchema), import_zod.z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  organization: import_zod.z.lazy(() => OrganizationUpdateOneWithoutUsersNestedInputSchema).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantUpdateOneWithoutUsersNestedInputSchema).optional(),
  shifts: import_zod.z.lazy(() => ShiftUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var UserUncheckedUpdateWithoutProductionPlanItemInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  email: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: import_zod.z.union([import_zod.z.lazy(() => UserRoleSchema), import_zod.z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  shifts: import_zod.z.lazy(() => ShiftUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemUncheckedUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var ShiftCreateWithoutShiftTaskInputSchema = import_zod.z.object({
  startTime: import_zod.z.coerce.date(),
  endTime: import_zod.z.coerce.date(),
  status: import_zod.z.lazy(() => ShiftStatusSchema),
  user: import_zod.z.lazy(() => UserCreateNestedOneWithoutShiftsInputSchema)
}).strict();
var ShiftUncheckedCreateWithoutShiftTaskInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  userId: import_zod.z.number().int(),
  startTime: import_zod.z.coerce.date(),
  endTime: import_zod.z.coerce.date(),
  status: import_zod.z.lazy(() => ShiftStatusSchema)
}).strict();
var ShiftCreateOrConnectWithoutShiftTaskInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => ShiftWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => ShiftCreateWithoutShiftTaskInputSchema), import_zod.z.lazy(() => ShiftUncheckedCreateWithoutShiftTaskInputSchema)])
}).strict();
var ShiftUpsertWithoutShiftTaskInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => ShiftUpdateWithoutShiftTaskInputSchema), import_zod.z.lazy(() => ShiftUncheckedUpdateWithoutShiftTaskInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => ShiftCreateWithoutShiftTaskInputSchema), import_zod.z.lazy(() => ShiftUncheckedCreateWithoutShiftTaskInputSchema)]),
  where: import_zod.z.lazy(() => ShiftWhereInputSchema).optional()
}).strict();
var ShiftUpdateToOneWithWhereWithoutShiftTaskInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => ShiftWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => ShiftUpdateWithoutShiftTaskInputSchema), import_zod.z.lazy(() => ShiftUncheckedUpdateWithoutShiftTaskInputSchema)])
}).strict();
var ShiftUpdateWithoutShiftTaskInputSchema = import_zod.z.object({
  startTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => ShiftStatusSchema), import_zod.z.lazy(() => EnumShiftStatusFieldUpdateOperationsInputSchema)]).optional(),
  user: import_zod.z.lazy(() => UserUpdateOneRequiredWithoutShiftsNestedInputSchema).optional()
}).strict();
var ShiftUncheckedUpdateWithoutShiftTaskInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  userId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  startTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => ShiftStatusSchema), import_zod.z.lazy(() => EnumShiftStatusFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var UserCreateWithoutAvailabilityInputSchema = import_zod.z.object({
  email: import_zod.z.string(),
  sub: import_zod.z.number().int().optional().nullable(),
  passwordHash: import_zod.z.string(),
  firstName: import_zod.z.string(),
  lastName: import_zod.z.string(),
  profileImage: import_zod.z.string().optional().nullable(),
  verified: import_zod.z.boolean().optional(),
  role: import_zod.z.lazy(() => UserRoleSchema),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  organization: import_zod.z.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantCreateNestedOneWithoutUsersInputSchema).optional(),
  shifts: import_zod.z.lazy(() => ShiftCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserUncheckedCreateWithoutAvailabilityInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  email: import_zod.z.string(),
  sub: import_zod.z.number().int().optional().nullable(),
  passwordHash: import_zod.z.string(),
  firstName: import_zod.z.string(),
  lastName: import_zod.z.string(),
  profileImage: import_zod.z.string().optional().nullable(),
  verified: import_zod.z.boolean().optional(),
  role: import_zod.z.lazy(() => UserRoleSchema),
  organizationId: import_zod.z.number().int().optional().nullable(),
  restaurantId: import_zod.z.number().int().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  shifts: import_zod.z.lazy(() => ShiftUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteUncheckedCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserCreateOrConnectWithoutAvailabilityInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => UserWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutAvailabilityInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutAvailabilityInputSchema)])
}).strict();
var UserUpsertWithoutAvailabilityInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => UserUpdateWithoutAvailabilityInputSchema), import_zod.z.lazy(() => UserUncheckedUpdateWithoutAvailabilityInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutAvailabilityInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutAvailabilityInputSchema)]),
  where: import_zod.z.lazy(() => UserWhereInputSchema).optional()
}).strict();
var UserUpdateToOneWithWhereWithoutAvailabilityInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => UserWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => UserUpdateWithoutAvailabilityInputSchema), import_zod.z.lazy(() => UserUncheckedUpdateWithoutAvailabilityInputSchema)])
}).strict();
var UserUpdateWithoutAvailabilityInputSchema = import_zod.z.object({
  email: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: import_zod.z.union([import_zod.z.lazy(() => UserRoleSchema), import_zod.z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  organization: import_zod.z.lazy(() => OrganizationUpdateOneWithoutUsersNestedInputSchema).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantUpdateOneWithoutUsersNestedInputSchema).optional(),
  shifts: import_zod.z.lazy(() => ShiftUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var UserUncheckedUpdateWithoutAvailabilityInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  email: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: import_zod.z.union([import_zod.z.lazy(() => UserRoleSchema), import_zod.z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  shifts: import_zod.z.lazy(() => ShiftUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemUncheckedUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var UserCreateWithoutSchedulingConstraintInputSchema = import_zod.z.object({
  email: import_zod.z.string(),
  sub: import_zod.z.number().int().optional().nullable(),
  passwordHash: import_zod.z.string(),
  firstName: import_zod.z.string(),
  lastName: import_zod.z.string(),
  profileImage: import_zod.z.string().optional().nullable(),
  verified: import_zod.z.boolean().optional(),
  role: import_zod.z.lazy(() => UserRoleSchema),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  organization: import_zod.z.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantCreateNestedOneWithoutUsersInputSchema).optional(),
  shifts: import_zod.z.lazy(() => ShiftCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserUncheckedCreateWithoutSchedulingConstraintInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  email: import_zod.z.string(),
  sub: import_zod.z.number().int().optional().nullable(),
  passwordHash: import_zod.z.string(),
  firstName: import_zod.z.string(),
  lastName: import_zod.z.string(),
  profileImage: import_zod.z.string().optional().nullable(),
  verified: import_zod.z.boolean().optional(),
  role: import_zod.z.lazy(() => UserRoleSchema),
  organizationId: import_zod.z.number().int().optional().nullable(),
  restaurantId: import_zod.z.number().int().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  shifts: import_zod.z.lazy(() => ShiftUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteUncheckedCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserCreateOrConnectWithoutSchedulingConstraintInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => UserWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutSchedulingConstraintInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutSchedulingConstraintInputSchema)])
}).strict();
var UserUpsertWithoutSchedulingConstraintInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => UserUpdateWithoutSchedulingConstraintInputSchema), import_zod.z.lazy(() => UserUncheckedUpdateWithoutSchedulingConstraintInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutSchedulingConstraintInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutSchedulingConstraintInputSchema)]),
  where: import_zod.z.lazy(() => UserWhereInputSchema).optional()
}).strict();
var UserUpdateToOneWithWhereWithoutSchedulingConstraintInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => UserWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => UserUpdateWithoutSchedulingConstraintInputSchema), import_zod.z.lazy(() => UserUncheckedUpdateWithoutSchedulingConstraintInputSchema)])
}).strict();
var UserUpdateWithoutSchedulingConstraintInputSchema = import_zod.z.object({
  email: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: import_zod.z.union([import_zod.z.lazy(() => UserRoleSchema), import_zod.z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  organization: import_zod.z.lazy(() => OrganizationUpdateOneWithoutUsersNestedInputSchema).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantUpdateOneWithoutUsersNestedInputSchema).optional(),
  shifts: import_zod.z.lazy(() => ShiftUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var UserUncheckedUpdateWithoutSchedulingConstraintInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  email: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: import_zod.z.union([import_zod.z.lazy(() => UserRoleSchema), import_zod.z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  shifts: import_zod.z.lazy(() => ShiftUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemUncheckedUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var InventoryItemCreateWithoutInventoryWithdrawalInputSchema = import_zod.z.object({
  quantity: import_zod.z.number(),
  unit: import_zod.z.string(),
  minQuantity: import_zod.z.number(),
  restockThreshold: import_zod.z.number(),
  lastUpdated: import_zod.z.coerce.date().optional(),
  inventory: import_zod.z.lazy(() => InventoryCreateNestedOneWithoutItemsInputSchema),
  ingredient: import_zod.z.lazy(() => IngredientCreateNestedOneWithoutInventoryItemsInputSchema),
  lastUpdatedBy: import_zod.z.lazy(() => UserCreateNestedOneWithoutInventoryUpdatesInputSchema).optional()
}).strict();
var InventoryItemUncheckedCreateWithoutInventoryWithdrawalInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  inventoryId: import_zod.z.number().int(),
  ingredientId: import_zod.z.number().int(),
  quantity: import_zod.z.number(),
  unit: import_zod.z.string(),
  minQuantity: import_zod.z.number(),
  restockThreshold: import_zod.z.number(),
  lastUpdatedById: import_zod.z.number().int().optional().nullable(),
  lastUpdated: import_zod.z.coerce.date().optional()
}).strict();
var InventoryItemCreateOrConnectWithoutInventoryWithdrawalInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => InventoryItemCreateWithoutInventoryWithdrawalInputSchema), import_zod.z.lazy(() => InventoryItemUncheckedCreateWithoutInventoryWithdrawalInputSchema)])
}).strict();
var RecipeCreateWithoutInventoryWithdrawalInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.string().optional().nullable(),
  servings: import_zod.z.number().int(),
  cookTime: import_zod.z.number().int(),
  prepTime: import_zod.z.number().int(),
  frequency: import_zod.z.number().int().optional().nullable(),
  foodCost: import_zod.z.number().optional().nullable(),
  isDeleted: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  restaurant: import_zod.z.lazy(() => RestaurantCreateNestedOneWithoutRecipesInputSchema),
  cookBook: import_zod.z.lazy(() => CookBookCreateNestedOneWithoutRecipesInputSchema),
  ingredients: import_zod.z.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeCreateNestedManyWithoutRecipeInputSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionCreateNestedManyWithoutRecipesInputSchema).optional()
}).strict();
var RecipeUncheckedCreateWithoutInventoryWithdrawalInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.string().optional().nullable(),
  servings: import_zod.z.number().int(),
  cookTime: import_zod.z.number().int(),
  prepTime: import_zod.z.number().int(),
  frequency: import_zod.z.number().int().optional().nullable(),
  restaurantId: import_zod.z.number().int(),
  cookBookId: import_zod.z.number().int(),
  foodCost: import_zod.z.number().optional().nullable(),
  isDeleted: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutRecipesInputSchema).optional()
}).strict();
var RecipeCreateOrConnectWithoutInventoryWithdrawalInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutInventoryWithdrawalInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutInventoryWithdrawalInputSchema)])
}).strict();
var UserCreateWithoutInventoryWithdrawalInputSchema = import_zod.z.object({
  email: import_zod.z.string(),
  sub: import_zod.z.number().int().optional().nullable(),
  passwordHash: import_zod.z.string(),
  firstName: import_zod.z.string(),
  lastName: import_zod.z.string(),
  profileImage: import_zod.z.string().optional().nullable(),
  verified: import_zod.z.boolean().optional(),
  role: import_zod.z.lazy(() => UserRoleSchema),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  organization: import_zod.z.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantCreateNestedOneWithoutUsersInputSchema).optional(),
  shifts: import_zod.z.lazy(() => ShiftCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintCreateNestedManyWithoutUserInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserUncheckedCreateWithoutInventoryWithdrawalInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  email: import_zod.z.string(),
  sub: import_zod.z.number().int().optional().nullable(),
  passwordHash: import_zod.z.string(),
  firstName: import_zod.z.string(),
  lastName: import_zod.z.string(),
  profileImage: import_zod.z.string().optional().nullable(),
  verified: import_zod.z.boolean().optional(),
  role: import_zod.z.lazy(() => UserRoleSchema),
  organizationId: import_zod.z.number().int().optional().nullable(),
  restaurantId: import_zod.z.number().int().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  shifts: import_zod.z.lazy(() => ShiftUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteUncheckedCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserCreateOrConnectWithoutInventoryWithdrawalInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => UserWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutInventoryWithdrawalInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutInventoryWithdrawalInputSchema)])
}).strict();
var InventoryItemUpsertWithoutInventoryWithdrawalInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => InventoryItemUpdateWithoutInventoryWithdrawalInputSchema), import_zod.z.lazy(() => InventoryItemUncheckedUpdateWithoutInventoryWithdrawalInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => InventoryItemCreateWithoutInventoryWithdrawalInputSchema), import_zod.z.lazy(() => InventoryItemUncheckedCreateWithoutInventoryWithdrawalInputSchema)]),
  where: import_zod.z.lazy(() => InventoryItemWhereInputSchema).optional()
}).strict();
var InventoryItemUpdateToOneWithWhereWithoutInventoryWithdrawalInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => InventoryItemWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => InventoryItemUpdateWithoutInventoryWithdrawalInputSchema), import_zod.z.lazy(() => InventoryItemUncheckedUpdateWithoutInventoryWithdrawalInputSchema)])
}).strict();
var InventoryItemUpdateWithoutInventoryWithdrawalInputSchema = import_zod.z.object({
  quantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  minQuantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  restockThreshold: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  lastUpdated: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  inventory: import_zod.z.lazy(() => InventoryUpdateOneRequiredWithoutItemsNestedInputSchema).optional(),
  ingredient: import_zod.z.lazy(() => IngredientUpdateOneRequiredWithoutInventoryItemsNestedInputSchema).optional(),
  lastUpdatedBy: import_zod.z.lazy(() => UserUpdateOneWithoutInventoryUpdatesNestedInputSchema).optional()
}).strict();
var InventoryItemUncheckedUpdateWithoutInventoryWithdrawalInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  inventoryId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  ingredientId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  minQuantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  restockThreshold: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  lastUpdatedById: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastUpdated: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var RecipeUpsertWithoutInventoryWithdrawalInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateWithoutInventoryWithdrawalInputSchema), import_zod.z.lazy(() => RecipeUncheckedUpdateWithoutInventoryWithdrawalInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutInventoryWithdrawalInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutInventoryWithdrawalInputSchema)]),
  where: import_zod.z.lazy(() => RecipeWhereInputSchema).optional()
}).strict();
var RecipeUpdateToOneWithWhereWithoutInventoryWithdrawalInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateWithoutInventoryWithdrawalInputSchema), import_zod.z.lazy(() => RecipeUncheckedUpdateWithoutInventoryWithdrawalInputSchema)])
}).strict();
var RecipeUpdateWithoutInventoryWithdrawalInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  cookBook: import_zod.z.lazy(() => CookBookUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUpdateManyWithoutRecipeNestedInputSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUpdateManyWithoutRecipesNestedInputSchema).optional()
}).strict();
var RecipeUncheckedUpdateWithoutInventoryWithdrawalInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookBookId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional()
}).strict();
var UserUpsertWithoutInventoryWithdrawalInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => UserUpdateWithoutInventoryWithdrawalInputSchema), import_zod.z.lazy(() => UserUncheckedUpdateWithoutInventoryWithdrawalInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutInventoryWithdrawalInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutInventoryWithdrawalInputSchema)]),
  where: import_zod.z.lazy(() => UserWhereInputSchema).optional()
}).strict();
var UserUpdateToOneWithWhereWithoutInventoryWithdrawalInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => UserWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => UserUpdateWithoutInventoryWithdrawalInputSchema), import_zod.z.lazy(() => UserUncheckedUpdateWithoutInventoryWithdrawalInputSchema)])
}).strict();
var UserUpdateWithoutInventoryWithdrawalInputSchema = import_zod.z.object({
  email: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: import_zod.z.union([import_zod.z.lazy(() => UserRoleSchema), import_zod.z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  organization: import_zod.z.lazy(() => OrganizationUpdateOneWithoutUsersNestedInputSchema).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantUpdateOneWithoutUsersNestedInputSchema).optional(),
  shifts: import_zod.z.lazy(() => ShiftUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintUpdateManyWithoutUserNestedInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var UserUncheckedUpdateWithoutInventoryWithdrawalInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  email: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: import_zod.z.union([import_zod.z.lazy(() => UserRoleSchema), import_zod.z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  shifts: import_zod.z.lazy(() => ShiftUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemUncheckedUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var IngredientAllergenCreateWithoutAllergenInputSchema = import_zod.z.object({
  ingredient: import_zod.z.lazy(() => IngredientCreateNestedOneWithoutIngredientAllergenInputSchema)
}).strict();
var IngredientAllergenUncheckedCreateWithoutAllergenInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  ingredientId: import_zod.z.number().int()
}).strict();
var IngredientAllergenCreateOrConnectWithoutAllergenInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => IngredientAllergenWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenCreateWithoutAllergenInputSchema), import_zod.z.lazy(() => IngredientAllergenUncheckedCreateWithoutAllergenInputSchema)])
}).strict();
var IngredientAllergenCreateManyAllergenInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenCreateManyAllergenInputSchema), import_zod.z.lazy(() => IngredientAllergenCreateManyAllergenInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var IngredientAllergenUpsertWithWhereUniqueWithoutAllergenInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => IngredientAllergenWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenUpdateWithoutAllergenInputSchema), import_zod.z.lazy(() => IngredientAllergenUncheckedUpdateWithoutAllergenInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenCreateWithoutAllergenInputSchema), import_zod.z.lazy(() => IngredientAllergenUncheckedCreateWithoutAllergenInputSchema)])
}).strict();
var IngredientAllergenUpdateWithWhereUniqueWithoutAllergenInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => IngredientAllergenWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenUpdateWithoutAllergenInputSchema), import_zod.z.lazy(() => IngredientAllergenUncheckedUpdateWithoutAllergenInputSchema)])
}).strict();
var IngredientAllergenUpdateManyWithWhereWithoutAllergenInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => IngredientAllergenScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenUpdateManyMutationInputSchema), import_zod.z.lazy(() => IngredientAllergenUncheckedUpdateManyWithoutAllergenInputSchema)])
}).strict();
var IngredientAllergenScalarWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenScalarWhereInputSchema), import_zod.z.lazy(() => IngredientAllergenScalarWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => IngredientAllergenScalarWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenScalarWhereInputSchema), import_zod.z.lazy(() => IngredientAllergenScalarWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  ingredientId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  allergenId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional()
}).strict();
var IngredientCreateWithoutIngredientAllergenInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  category: import_zod.z.string(),
  price: import_zod.z.number(),
  recipeIngredients: import_zod.z.lazy(() => RecipeIngredientCreateNestedManyWithoutIngredientInputSchema).optional(),
  inventoryItems: import_zod.z.lazy(() => InventoryItemCreateNestedManyWithoutIngredientInputSchema).optional(),
  orderItems: import_zod.z.lazy(() => OrderItemCreateNestedManyWithoutIngredientInputSchema).optional(),
  vendors: import_zod.z.lazy(() => VendorCreateNestedManyWithoutIngredientsInputSchema).optional(),
  WasteRecord: import_zod.z.lazy(() => WasteRecordCreateNestedManyWithoutIngredienteInputSchema).optional(),
  SupplierPriceHistory: import_zod.z.lazy(() => SupplierPriceHistoryCreateNestedManyWithoutIngredientInputSchema).optional(),
  DietaryRestriction: import_zod.z.lazy(() => DietaryRestrictionCreateNestedOneWithoutIngredientsInputSchema).optional()
}).strict();
var IngredientUncheckedCreateWithoutIngredientAllergenInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  category: import_zod.z.string(),
  price: import_zod.z.number(),
  dietaryRestrictionId: import_zod.z.number().int().optional().nullable(),
  recipeIngredients: import_zod.z.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  inventoryItems: import_zod.z.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  orderItems: import_zod.z.lazy(() => OrderItemUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  vendors: import_zod.z.lazy(() => VendorUncheckedCreateNestedManyWithoutIngredientsInputSchema).optional(),
  WasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutIngredienteInputSchema).optional(),
  SupplierPriceHistory: import_zod.z.lazy(() => SupplierPriceHistoryUncheckedCreateNestedManyWithoutIngredientInputSchema).optional()
}).strict();
var IngredientCreateOrConnectWithoutIngredientAllergenInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => IngredientWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => IngredientCreateWithoutIngredientAllergenInputSchema), import_zod.z.lazy(() => IngredientUncheckedCreateWithoutIngredientAllergenInputSchema)])
}).strict();
var AllergenCreateWithoutIngredientsInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable()
}).strict();
var AllergenUncheckedCreateWithoutIngredientsInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable()
}).strict();
var AllergenCreateOrConnectWithoutIngredientsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => AllergenWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => AllergenCreateWithoutIngredientsInputSchema), import_zod.z.lazy(() => AllergenUncheckedCreateWithoutIngredientsInputSchema)])
}).strict();
var IngredientUpsertWithoutIngredientAllergenInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => IngredientUpdateWithoutIngredientAllergenInputSchema), import_zod.z.lazy(() => IngredientUncheckedUpdateWithoutIngredientAllergenInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => IngredientCreateWithoutIngredientAllergenInputSchema), import_zod.z.lazy(() => IngredientUncheckedCreateWithoutIngredientAllergenInputSchema)]),
  where: import_zod.z.lazy(() => IngredientWhereInputSchema).optional()
}).strict();
var IngredientUpdateToOneWithWhereWithoutIngredientAllergenInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => IngredientWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => IngredientUpdateWithoutIngredientAllergenInputSchema), import_zod.z.lazy(() => IngredientUncheckedUpdateWithoutIngredientAllergenInputSchema)])
}).strict();
var IngredientUpdateWithoutIngredientAllergenInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  category: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIngredients: import_zod.z.lazy(() => RecipeIngredientUpdateManyWithoutIngredientNestedInputSchema).optional(),
  inventoryItems: import_zod.z.lazy(() => InventoryItemUpdateManyWithoutIngredientNestedInputSchema).optional(),
  orderItems: import_zod.z.lazy(() => OrderItemUpdateManyWithoutIngredientNestedInputSchema).optional(),
  vendors: import_zod.z.lazy(() => VendorUpdateManyWithoutIngredientsNestedInputSchema).optional(),
  WasteRecord: import_zod.z.lazy(() => WasteRecordUpdateManyWithoutIngredienteNestedInputSchema).optional(),
  SupplierPriceHistory: import_zod.z.lazy(() => SupplierPriceHistoryUpdateManyWithoutIngredientNestedInputSchema).optional(),
  DietaryRestriction: import_zod.z.lazy(() => DietaryRestrictionUpdateOneWithoutIngredientsNestedInputSchema).optional()
}).strict();
var IngredientUncheckedUpdateWithoutIngredientAllergenInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  category: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  dietaryRestrictionId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  recipeIngredients: import_zod.z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  inventoryItems: import_zod.z.lazy(() => InventoryItemUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  orderItems: import_zod.z.lazy(() => OrderItemUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  vendors: import_zod.z.lazy(() => VendorUncheckedUpdateManyWithoutIngredientsNestedInputSchema).optional(),
  WasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedUpdateManyWithoutIngredienteNestedInputSchema).optional(),
  SupplierPriceHistory: import_zod.z.lazy(() => SupplierPriceHistoryUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional()
}).strict();
var AllergenUpsertWithoutIngredientsInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => AllergenUpdateWithoutIngredientsInputSchema), import_zod.z.lazy(() => AllergenUncheckedUpdateWithoutIngredientsInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => AllergenCreateWithoutIngredientsInputSchema), import_zod.z.lazy(() => AllergenUncheckedCreateWithoutIngredientsInputSchema)]),
  where: import_zod.z.lazy(() => AllergenWhereInputSchema).optional()
}).strict();
var AllergenUpdateToOneWithWhereWithoutIngredientsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => AllergenWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => AllergenUpdateWithoutIngredientsInputSchema), import_zod.z.lazy(() => AllergenUncheckedUpdateWithoutIngredientsInputSchema)])
}).strict();
var AllergenUpdateWithoutIngredientsInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var AllergenUncheckedUpdateWithoutIngredientsInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var MenuItemCreateWithoutNutritionalRecommendationInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  price: import_zod.z.number(),
  foodCost: import_zod.z.number(),
  recipeIds: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeIdsInputSchema), import_zod.z.number().int().array()]).optional(),
  recipeServingsAmount: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema), import_zod.z.number().array()]).optional(),
  recipeServingsCost: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeServingsCostInputSchema), import_zod.z.number().array()]).optional(),
  allergens: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateallergensInputSchema), import_zod.z.string().array()]).optional(),
  nutritionalInfoId: import_zod.z.number().int().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  nutritionalInfo: import_zod.z.lazy(() => NutritionalInfoCreateNestedOneWithoutMenuItemInputSchema).optional(),
  menu: import_zod.z.lazy(() => MenuCreateNestedOneWithoutMenuItemsInputSchema),
  recipes: import_zod.z.lazy(() => RecipeCreateNestedManyWithoutMenuItemsInputSchema).optional(),
  menuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeCreateNestedManyWithoutMenuItemInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsCreateNestedManyWithoutMenuItemInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemCreateNestedManyWithoutMenuItemInputSchema).optional(),
  category: import_zod.z.lazy(() => MenuCategoryCreateNestedOneWithoutMenuItemsInputSchema).optional(),
  feedback: import_zod.z.lazy(() => CustomerFeedbackCreateNestedManyWithoutMenuItemInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionCreateNestedManyWithoutMenuItemsInputSchema).optional()
}).strict();
var MenuItemUncheckedCreateWithoutNutritionalRecommendationInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  price: import_zod.z.number(),
  foodCost: import_zod.z.number(),
  recipeIds: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeIdsInputSchema), import_zod.z.number().int().array()]).optional(),
  recipeServingsAmount: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema), import_zod.z.number().array()]).optional(),
  recipeServingsCost: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeServingsCostInputSchema), import_zod.z.number().array()]).optional(),
  allergens: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateallergensInputSchema), import_zod.z.string().array()]).optional(),
  nutritionalInfoId: import_zod.z.number().int().optional().nullable(),
  menuId: import_zod.z.number().int(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  categoryId: import_zod.z.number().int().optional().nullable(),
  nutritionalInfo: import_zod.z.lazy(() => NutritionalInfoUncheckedCreateNestedOneWithoutMenuItemInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUncheckedCreateNestedManyWithoutMenuItemsInputSchema).optional(),
  menuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  feedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutMenuItemsInputSchema).optional()
}).strict();
var MenuItemCreateOrConnectWithoutNutritionalRecommendationInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateWithoutNutritionalRecommendationInputSchema), import_zod.z.lazy(() => MenuItemUncheckedCreateWithoutNutritionalRecommendationInputSchema)])
}).strict();
var MenuItemUpsertWithoutNutritionalRecommendationInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateWithoutNutritionalRecommendationInputSchema), import_zod.z.lazy(() => MenuItemUncheckedUpdateWithoutNutritionalRecommendationInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateWithoutNutritionalRecommendationInputSchema), import_zod.z.lazy(() => MenuItemUncheckedCreateWithoutNutritionalRecommendationInputSchema)]),
  where: import_zod.z.lazy(() => MenuItemWhereInputSchema).optional()
}).strict();
var MenuItemUpdateToOneWithWhereWithoutNutritionalRecommendationInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => MenuItemWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateWithoutNutritionalRecommendationInputSchema), import_zod.z.lazy(() => MenuItemUncheckedUpdateWithoutNutritionalRecommendationInputSchema)])
}).strict();
var MenuItemUpdateWithoutNutritionalRecommendationInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIds: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeIdsInputSchema), import_zod.z.number().int().array()]).optional(),
  recipeServingsAmount: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema), import_zod.z.number().array()]).optional(),
  recipeServingsCost: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema), import_zod.z.number().array()]).optional(),
  allergens: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateallergensInputSchema), import_zod.z.string().array()]).optional(),
  nutritionalInfoId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  nutritionalInfo: import_zod.z.lazy(() => NutritionalInfoUpdateOneWithoutMenuItemNestedInputSchema).optional(),
  menu: import_zod.z.lazy(() => MenuUpdateOneRequiredWithoutMenuItemsNestedInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUpdateManyWithoutMenuItemsNestedInputSchema).optional(),
  menuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  category: import_zod.z.lazy(() => MenuCategoryUpdateOneWithoutMenuItemsNestedInputSchema).optional(),
  feedback: import_zod.z.lazy(() => CustomerFeedbackUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUpdateManyWithoutMenuItemsNestedInputSchema).optional()
}).strict();
var MenuItemUncheckedUpdateWithoutNutritionalRecommendationInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIds: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeIdsInputSchema), import_zod.z.number().int().array()]).optional(),
  recipeServingsAmount: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema), import_zod.z.number().array()]).optional(),
  recipeServingsCost: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema), import_zod.z.number().array()]).optional(),
  allergens: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateallergensInputSchema), import_zod.z.string().array()]).optional(),
  nutritionalInfoId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  menuId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  categoryId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  nutritionalInfo: import_zod.z.lazy(() => NutritionalInfoUncheckedUpdateOneWithoutMenuItemNestedInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUncheckedUpdateManyWithoutMenuItemsNestedInputSchema).optional(),
  menuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  feedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutMenuItemsNestedInputSchema).optional()
}).strict();
var RestaurantCreateWithoutOrganizationInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  imageUrl: import_zod.z.string().optional().nullable(),
  address: import_zod.z.string(),
  city: import_zod.z.string(),
  zipCode: import_zod.z.string(),
  state: import_zod.z.string(),
  owner: import_zod.z.string(),
  foodCost: import_zod.z.number().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  isDeleted: import_zod.z.boolean().optional(),
  deleted: import_zod.z.coerce.date().optional().nullable(),
  users: import_zod.z.lazy(() => UserCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: import_zod.z.lazy(() => CookBookCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: import_zod.z.lazy(() => InventoryCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: import_zod.z.lazy(() => OrderCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: import_zod.z.lazy(() => MenuCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipment: import_zod.z.lazy(() => EquipmentCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklist: import_zod.z.lazy(() => QualityChecklistCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qustomerFeedback: import_zod.z.lazy(() => CustomerFeedbackCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();
var RestaurantUncheckedCreateWithoutOrganizationInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  imageUrl: import_zod.z.string().optional().nullable(),
  address: import_zod.z.string(),
  city: import_zod.z.string(),
  zipCode: import_zod.z.string(),
  state: import_zod.z.string(),
  owner: import_zod.z.string(),
  foodCost: import_zod.z.number().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  isDeleted: import_zod.z.boolean().optional(),
  deleted: import_zod.z.coerce.date().optional().nullable(),
  users: import_zod.z.lazy(() => UserUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: import_zod.z.lazy(() => CookBookUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: import_zod.z.lazy(() => InventoryUncheckedCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: import_zod.z.lazy(() => OrderUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: import_zod.z.lazy(() => MenuUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipment: import_zod.z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklist: import_zod.z.lazy(() => QualityChecklistUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qustomerFeedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();
var RestaurantCreateOrConnectWithoutOrganizationInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RestaurantWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => RestaurantCreateWithoutOrganizationInputSchema), import_zod.z.lazy(() => RestaurantUncheckedCreateWithoutOrganizationInputSchema)])
}).strict();
var RestaurantCreateManyOrganizationInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => RestaurantCreateManyOrganizationInputSchema), import_zod.z.lazy(() => RestaurantCreateManyOrganizationInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var UserCreateWithoutOrganizationInputSchema = import_zod.z.object({
  email: import_zod.z.string(),
  sub: import_zod.z.number().int().optional().nullable(),
  passwordHash: import_zod.z.string(),
  firstName: import_zod.z.string(),
  lastName: import_zod.z.string(),
  profileImage: import_zod.z.string().optional().nullable(),
  verified: import_zod.z.boolean().optional(),
  role: import_zod.z.lazy(() => UserRoleSchema),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  restaurant: import_zod.z.lazy(() => RestaurantCreateNestedOneWithoutUsersInputSchema).optional(),
  shifts: import_zod.z.lazy(() => ShiftCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserUncheckedCreateWithoutOrganizationInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  email: import_zod.z.string(),
  sub: import_zod.z.number().int().optional().nullable(),
  passwordHash: import_zod.z.string(),
  firstName: import_zod.z.string(),
  lastName: import_zod.z.string(),
  profileImage: import_zod.z.string().optional().nullable(),
  verified: import_zod.z.boolean().optional(),
  role: import_zod.z.lazy(() => UserRoleSchema),
  restaurantId: import_zod.z.number().int().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  shifts: import_zod.z.lazy(() => ShiftUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteUncheckedCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserCreateOrConnectWithoutOrganizationInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => UserWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutOrganizationInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutOrganizationInputSchema)])
}).strict();
var UserCreateManyOrganizationInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => UserCreateManyOrganizationInputSchema), import_zod.z.lazy(() => UserCreateManyOrganizationInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var RestaurantUpsertWithWhereUniqueWithoutOrganizationInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RestaurantWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => RestaurantUpdateWithoutOrganizationInputSchema), import_zod.z.lazy(() => RestaurantUncheckedUpdateWithoutOrganizationInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => RestaurantCreateWithoutOrganizationInputSchema), import_zod.z.lazy(() => RestaurantUncheckedCreateWithoutOrganizationInputSchema)])
}).strict();
var RestaurantUpdateWithWhereUniqueWithoutOrganizationInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RestaurantWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => RestaurantUpdateWithoutOrganizationInputSchema), import_zod.z.lazy(() => RestaurantUncheckedUpdateWithoutOrganizationInputSchema)])
}).strict();
var RestaurantUpdateManyWithWhereWithoutOrganizationInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RestaurantScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => RestaurantUpdateManyMutationInputSchema), import_zod.z.lazy(() => RestaurantUncheckedUpdateManyWithoutOrganizationInputSchema)])
}).strict();
var RestaurantScalarWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => RestaurantScalarWhereInputSchema), import_zod.z.lazy(() => RestaurantScalarWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => RestaurantScalarWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => RestaurantScalarWhereInputSchema), import_zod.z.lazy(() => RestaurantScalarWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  name: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  address: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  city: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  zipCode: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  state: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  owner: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  organizationId: import_zod.z.union([import_zod.z.lazy(() => IntNullableFilterSchema), import_zod.z.number()]).optional().nullable(),
  foodCost: import_zod.z.union([import_zod.z.lazy(() => FloatNullableFilterSchema), import_zod.z.number()]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  isDeleted: import_zod.z.union([import_zod.z.lazy(() => BoolFilterSchema), import_zod.z.boolean()]).optional(),
  deleted: import_zod.z.union([import_zod.z.lazy(() => DateTimeNullableFilterSchema), import_zod.z.coerce.date()]).optional().nullable()
}).strict();
var UserUpsertWithWhereUniqueWithoutOrganizationInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => UserWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => UserUpdateWithoutOrganizationInputSchema), import_zod.z.lazy(() => UserUncheckedUpdateWithoutOrganizationInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutOrganizationInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutOrganizationInputSchema)])
}).strict();
var UserUpdateWithWhereUniqueWithoutOrganizationInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => UserWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => UserUpdateWithoutOrganizationInputSchema), import_zod.z.lazy(() => UserUncheckedUpdateWithoutOrganizationInputSchema)])
}).strict();
var UserUpdateManyWithWhereWithoutOrganizationInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => UserScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => UserUpdateManyMutationInputSchema), import_zod.z.lazy(() => UserUncheckedUpdateManyWithoutOrganizationInputSchema)])
}).strict();
var UserScalarWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => UserScalarWhereInputSchema), import_zod.z.lazy(() => UserScalarWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => UserScalarWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => UserScalarWhereInputSchema), import_zod.z.lazy(() => UserScalarWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  email: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  sub: import_zod.z.union([import_zod.z.lazy(() => IntNullableFilterSchema), import_zod.z.number()]).optional().nullable(),
  passwordHash: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  firstName: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  lastName: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  profileImage: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  verified: import_zod.z.union([import_zod.z.lazy(() => BoolFilterSchema), import_zod.z.boolean()]).optional(),
  role: import_zod.z.union([import_zod.z.lazy(() => EnumUserRoleFilterSchema), import_zod.z.lazy(() => UserRoleSchema)]).optional(),
  organizationId: import_zod.z.union([import_zod.z.lazy(() => IntNullableFilterSchema), import_zod.z.number()]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.lazy(() => IntNullableFilterSchema), import_zod.z.number()]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var OrganizationCreateWithoutRestaurantsInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  imageUrl: import_zod.z.string().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  users: import_zod.z.lazy(() => UserCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();
var OrganizationUncheckedCreateWithoutRestaurantsInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  imageUrl: import_zod.z.string().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  users: import_zod.z.lazy(() => UserUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();
var OrganizationCreateOrConnectWithoutRestaurantsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => OrganizationCreateWithoutRestaurantsInputSchema), import_zod.z.lazy(() => OrganizationUncheckedCreateWithoutRestaurantsInputSchema)])
}).strict();
var UserCreateWithoutRestaurantInputSchema = import_zod.z.object({
  email: import_zod.z.string(),
  sub: import_zod.z.number().int().optional().nullable(),
  passwordHash: import_zod.z.string(),
  firstName: import_zod.z.string(),
  lastName: import_zod.z.string(),
  profileImage: import_zod.z.string().optional().nullable(),
  verified: import_zod.z.boolean().optional(),
  role: import_zod.z.lazy(() => UserRoleSchema),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  organization: import_zod.z.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema).optional(),
  shifts: import_zod.z.lazy(() => ShiftCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserUncheckedCreateWithoutRestaurantInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  email: import_zod.z.string(),
  sub: import_zod.z.number().int().optional().nullable(),
  passwordHash: import_zod.z.string(),
  firstName: import_zod.z.string(),
  lastName: import_zod.z.string(),
  profileImage: import_zod.z.string().optional().nullable(),
  verified: import_zod.z.boolean().optional(),
  role: import_zod.z.lazy(() => UserRoleSchema),
  organizationId: import_zod.z.number().int().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  shifts: import_zod.z.lazy(() => ShiftUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteUncheckedCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserCreateOrConnectWithoutRestaurantInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => UserWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutRestaurantInputSchema)])
}).strict();
var UserCreateManyRestaurantInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => UserCreateManyRestaurantInputSchema), import_zod.z.lazy(() => UserCreateManyRestaurantInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var CookBookCreateWithoutRestaurantInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  imageUrl: import_zod.z.string().optional().nullable(),
  category: import_zod.z.string(),
  recipes: import_zod.z.lazy(() => RecipeCreateNestedManyWithoutCookBookInputSchema).optional()
}).strict();
var CookBookUncheckedCreateWithoutRestaurantInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  imageUrl: import_zod.z.string().optional().nullable(),
  category: import_zod.z.string(),
  recipes: import_zod.z.lazy(() => RecipeUncheckedCreateNestedManyWithoutCookBookInputSchema).optional()
}).strict();
var CookBookCreateOrConnectWithoutRestaurantInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => CookBookWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => CookBookCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => CookBookUncheckedCreateWithoutRestaurantInputSchema)])
}).strict();
var CookBookCreateManyRestaurantInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => CookBookCreateManyRestaurantInputSchema), import_zod.z.lazy(() => CookBookCreateManyRestaurantInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var InventoryCreateWithoutRestaurantInputSchema = import_zod.z.object({
  items: import_zod.z.lazy(() => InventoryItemCreateNestedManyWithoutInventoryInputSchema).optional()
}).strict();
var InventoryUncheckedCreateWithoutRestaurantInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  items: import_zod.z.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutInventoryInputSchema).optional()
}).strict();
var InventoryCreateOrConnectWithoutRestaurantInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => InventoryWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => InventoryCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => InventoryUncheckedCreateWithoutRestaurantInputSchema)])
}).strict();
var OrderCreateWithoutRestaurantInputSchema = import_zod.z.object({
  status: import_zod.z.lazy(() => OrderStatusSchema),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  vendor: import_zod.z.lazy(() => VendorCreateNestedOneWithoutOrdersInputSchema),
  items: import_zod.z.lazy(() => OrderItemCreateNestedManyWithoutOrderInputSchema).optional()
}).strict();
var OrderUncheckedCreateWithoutRestaurantInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  vendorId: import_zod.z.number().int(),
  status: import_zod.z.lazy(() => OrderStatusSchema),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  items: import_zod.z.lazy(() => OrderItemUncheckedCreateNestedManyWithoutOrderInputSchema).optional()
}).strict();
var OrderCreateOrConnectWithoutRestaurantInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => OrderWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => OrderCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => OrderUncheckedCreateWithoutRestaurantInputSchema)])
}).strict();
var OrderCreateManyRestaurantInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => OrderCreateManyRestaurantInputSchema), import_zod.z.lazy(() => OrderCreateManyRestaurantInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var RecipeCreateWithoutRestaurantInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.string().optional().nullable(),
  servings: import_zod.z.number().int(),
  cookTime: import_zod.z.number().int(),
  prepTime: import_zod.z.number().int(),
  frequency: import_zod.z.number().int().optional().nullable(),
  foodCost: import_zod.z.number().optional().nullable(),
  isDeleted: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  cookBook: import_zod.z.lazy(() => CookBookCreateNestedOneWithoutRecipesInputSchema),
  ingredients: import_zod.z.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeCreateNestedManyWithoutRecipeInputSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionCreateNestedManyWithoutRecipesInputSchema).optional()
}).strict();
var RecipeUncheckedCreateWithoutRestaurantInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.string().optional().nullable(),
  servings: import_zod.z.number().int(),
  cookTime: import_zod.z.number().int(),
  prepTime: import_zod.z.number().int(),
  frequency: import_zod.z.number().int().optional().nullable(),
  cookBookId: import_zod.z.number().int(),
  foodCost: import_zod.z.number().optional().nullable(),
  isDeleted: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutRecipesInputSchema).optional()
}).strict();
var RecipeCreateOrConnectWithoutRestaurantInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutRestaurantInputSchema)])
}).strict();
var RecipeCreateManyRestaurantInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateManyRestaurantInputSchema), import_zod.z.lazy(() => RecipeCreateManyRestaurantInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var MenuCreateWithoutRestaurantInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  menuItems: import_zod.z.lazy(() => MenuItemCreateNestedManyWithoutMenuInputSchema).optional(),
  MenuCategory: import_zod.z.lazy(() => MenuCategoryCreateNestedManyWithoutMenuInputSchema).optional()
}).strict();
var MenuUncheckedCreateWithoutRestaurantInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUncheckedCreateNestedManyWithoutMenuInputSchema).optional(),
  MenuCategory: import_zod.z.lazy(() => MenuCategoryUncheckedCreateNestedManyWithoutMenuInputSchema).optional()
}).strict();
var MenuCreateOrConnectWithoutRestaurantInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => MenuWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => MenuCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => MenuUncheckedCreateWithoutRestaurantInputSchema)])
}).strict();
var MenuCreateManyRestaurantInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => MenuCreateManyRestaurantInputSchema), import_zod.z.lazy(() => MenuCreateManyRestaurantInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var SalesTransactionsCreateWithoutRestaurantInputSchema = import_zod.z.object({
  posTransactionID: import_zod.z.string().optional().nullable(),
  price: import_zod.z.number(),
  total: import_zod.z.number(),
  transactionDate: import_zod.z.coerce.date(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  menuItem: import_zod.z.lazy(() => MenuItemCreateNestedOneWithoutSalesTransactionsInputSchema)
}).strict();
var SalesTransactionsUncheckedCreateWithoutRestaurantInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  posTransactionID: import_zod.z.string().optional().nullable(),
  menuItemId: import_zod.z.number().int(),
  price: import_zod.z.number(),
  total: import_zod.z.number(),
  transactionDate: import_zod.z.coerce.date(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var SalesTransactionsCreateOrConnectWithoutRestaurantInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => SalesTransactionsWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => SalesTransactionsUncheckedCreateWithoutRestaurantInputSchema)])
}).strict();
var SalesTransactionsCreateManyRestaurantInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsCreateManyRestaurantInputSchema), import_zod.z.lazy(() => SalesTransactionsCreateManyRestaurantInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var LeftoverItemCreateWithoutRestaurantInputSchema = import_zod.z.object({
  date: import_zod.z.coerce.date(),
  quantity: import_zod.z.number().int(),
  reason: import_zod.z.string(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  menuItem: import_zod.z.lazy(() => MenuItemCreateNestedOneWithoutLeftoverItemInputSchema),
  recordedBy: import_zod.z.lazy(() => UserCreateNestedOneWithoutLeftoverItemInputSchema)
}).strict();
var LeftoverItemUncheckedCreateWithoutRestaurantInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  date: import_zod.z.coerce.date(),
  menuItemId: import_zod.z.number().int(),
  quantity: import_zod.z.number().int(),
  reason: import_zod.z.string(),
  recordedById: import_zod.z.number().int(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var LeftoverItemCreateOrConnectWithoutRestaurantInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => LeftoverItemUncheckedCreateWithoutRestaurantInputSchema)])
}).strict();
var LeftoverItemCreateManyRestaurantInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemCreateManyRestaurantInputSchema), import_zod.z.lazy(() => LeftoverItemCreateManyRestaurantInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var WasteRecordCreateWithoutRestaurantInputSchema = import_zod.z.object({
  date: import_zod.z.coerce.date(),
  quantity: import_zod.z.number(),
  unit: import_zod.z.string(),
  reason: import_zod.z.string(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  ingrediente: import_zod.z.lazy(() => IngredientCreateNestedOneWithoutWasteRecordInputSchema),
  recordedBy: import_zod.z.lazy(() => UserCreateNestedOneWithoutWasteRecordInputSchema)
}).strict();
var WasteRecordUncheckedCreateWithoutRestaurantInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  date: import_zod.z.coerce.date(),
  ingredientId: import_zod.z.number().int(),
  quantity: import_zod.z.number(),
  unit: import_zod.z.string(),
  reason: import_zod.z.string(),
  recordedById: import_zod.z.number().int(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var WasteRecordCreateOrConnectWithoutRestaurantInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => WasteRecordCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => WasteRecordUncheckedCreateWithoutRestaurantInputSchema)])
}).strict();
var WasteRecordCreateManyRestaurantInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => WasteRecordCreateManyRestaurantInputSchema), import_zod.z.lazy(() => WasteRecordCreateManyRestaurantInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var ProductionPlanCreateWithoutRestaurantInputSchema = import_zod.z.object({
  date: import_zod.z.coerce.date(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  createdBy: import_zod.z.lazy(() => UserCreateNestedOneWithoutProductionPlanInputSchema),
  items: import_zod.z.lazy(() => ProductionPlanItemCreateNestedManyWithoutProductionPlanInputSchema).optional()
}).strict();
var ProductionPlanUncheckedCreateWithoutRestaurantInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  date: import_zod.z.coerce.date(),
  createdById: import_zod.z.number().int(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  items: import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutProductionPlanInputSchema).optional()
}).strict();
var ProductionPlanCreateOrConnectWithoutRestaurantInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => ProductionPlanWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => ProductionPlanUncheckedCreateWithoutRestaurantInputSchema)])
}).strict();
var ProductionPlanCreateManyRestaurantInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanCreateManyRestaurantInputSchema), import_zod.z.lazy(() => ProductionPlanCreateManyRestaurantInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var EquipmentCreateWithoutRestaurantInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  model: import_zod.z.string().optional().nullable(),
  serialNumber: import_zod.z.string().optional().nullable(),
  purchaseDate: import_zod.z.coerce.date().optional().nullable(),
  lastMaintenance: import_zod.z.coerce.date().optional().nullable(),
  nextMaintenance: import_zod.z.coerce.date().optional().nullable(),
  status: import_zod.z.lazy(() => EquipmentStatusSchema).optional(),
  location: import_zod.z.string().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  recipes: import_zod.z.lazy(() => RecipeEquipmentCreateNestedManyWithoutEquipmentInputSchema).optional(),
  maintenanceLogs: import_zod.z.lazy(() => MaintenanceLogCreateNestedManyWithoutEquipmentInputSchema).optional()
}).strict();
var EquipmentUncheckedCreateWithoutRestaurantInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  model: import_zod.z.string().optional().nullable(),
  serialNumber: import_zod.z.string().optional().nullable(),
  purchaseDate: import_zod.z.coerce.date().optional().nullable(),
  lastMaintenance: import_zod.z.coerce.date().optional().nullable(),
  nextMaintenance: import_zod.z.coerce.date().optional().nullable(),
  status: import_zod.z.lazy(() => EquipmentStatusSchema).optional(),
  location: import_zod.z.string().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  recipes: import_zod.z.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutEquipmentInputSchema).optional(),
  maintenanceLogs: import_zod.z.lazy(() => MaintenanceLogUncheckedCreateNestedManyWithoutEquipmentInputSchema).optional()
}).strict();
var EquipmentCreateOrConnectWithoutRestaurantInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => EquipmentWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => EquipmentCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => EquipmentUncheckedCreateWithoutRestaurantInputSchema)])
}).strict();
var EquipmentCreateManyRestaurantInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => EquipmentCreateManyRestaurantInputSchema), import_zod.z.lazy(() => EquipmentCreateManyRestaurantInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var QualityChecklistCreateWithoutRestaurantInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  frequency: import_zod.z.lazy(() => ChecklistFrequencySchema).optional(),
  isActive: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  items: import_zod.z.lazy(() => ChecklistItemCreateNestedManyWithoutChecklistInputSchema).optional(),
  completions: import_zod.z.lazy(() => ChecklistCompleteCreateNestedManyWithoutChecklistInputSchema).optional()
}).strict();
var QualityChecklistUncheckedCreateWithoutRestaurantInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  frequency: import_zod.z.lazy(() => ChecklistFrequencySchema).optional(),
  isActive: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  items: import_zod.z.lazy(() => ChecklistItemUncheckedCreateNestedManyWithoutChecklistInputSchema).optional(),
  completions: import_zod.z.lazy(() => ChecklistCompleteUncheckedCreateNestedManyWithoutChecklistInputSchema).optional()
}).strict();
var QualityChecklistCreateOrConnectWithoutRestaurantInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => QualityChecklistWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => QualityChecklistCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => QualityChecklistUncheckedCreateWithoutRestaurantInputSchema)])
}).strict();
var QualityChecklistCreateManyRestaurantInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => QualityChecklistCreateManyRestaurantInputSchema), import_zod.z.lazy(() => QualityChecklistCreateManyRestaurantInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var CustomerFeedbackCreateWithoutRestaurantInputSchema = import_zod.z.object({
  rating: import_zod.z.number().int(),
  comment: import_zod.z.string().optional().nullable(),
  source: import_zod.z.lazy(() => FeedbackSourceSchema),
  tags: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackCreatetagsInputSchema), import_zod.z.string().array()]).optional(),
  status: import_zod.z.lazy(() => FeedbackStatusSchema).optional(),
  responseText: import_zod.z.string().optional().nullable(),
  respondedAt: import_zod.z.coerce.date().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  menuItem: import_zod.z.lazy(() => MenuItemCreateNestedOneWithoutFeedbackInputSchema).optional(),
  respondedBy: import_zod.z.lazy(() => UserCreateNestedOneWithoutCustomerFeedbackInputSchema).optional()
}).strict();
var CustomerFeedbackUncheckedCreateWithoutRestaurantInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  menuItemId: import_zod.z.number().int().optional().nullable(),
  rating: import_zod.z.number().int(),
  comment: import_zod.z.string().optional().nullable(),
  source: import_zod.z.lazy(() => FeedbackSourceSchema),
  tags: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackCreatetagsInputSchema), import_zod.z.string().array()]).optional(),
  status: import_zod.z.lazy(() => FeedbackStatusSchema).optional(),
  responseText: import_zod.z.string().optional().nullable(),
  respondedAt: import_zod.z.coerce.date().optional().nullable(),
  respondedById: import_zod.z.number().int().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var CustomerFeedbackCreateOrConnectWithoutRestaurantInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateWithoutRestaurantInputSchema)])
}).strict();
var CustomerFeedbackCreateManyRestaurantInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackCreateManyRestaurantInputSchema), import_zod.z.lazy(() => CustomerFeedbackCreateManyRestaurantInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var OrganizationUpsertWithoutRestaurantsInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => OrganizationUpdateWithoutRestaurantsInputSchema), import_zod.z.lazy(() => OrganizationUncheckedUpdateWithoutRestaurantsInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => OrganizationCreateWithoutRestaurantsInputSchema), import_zod.z.lazy(() => OrganizationUncheckedCreateWithoutRestaurantsInputSchema)]),
  where: import_zod.z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();
var OrganizationUpdateToOneWithWhereWithoutRestaurantsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => OrganizationUpdateWithoutRestaurantsInputSchema), import_zod.z.lazy(() => OrganizationUncheckedUpdateWithoutRestaurantsInputSchema)])
}).strict();
var OrganizationUpdateWithoutRestaurantsInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  users: import_zod.z.lazy(() => UserUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();
var OrganizationUncheckedUpdateWithoutRestaurantsInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  users: import_zod.z.lazy(() => UserUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();
var UserUpsertWithWhereUniqueWithoutRestaurantInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => UserWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => UserUpdateWithoutRestaurantInputSchema), import_zod.z.lazy(() => UserUncheckedUpdateWithoutRestaurantInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutRestaurantInputSchema)])
}).strict();
var UserUpdateWithWhereUniqueWithoutRestaurantInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => UserWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => UserUpdateWithoutRestaurantInputSchema), import_zod.z.lazy(() => UserUncheckedUpdateWithoutRestaurantInputSchema)])
}).strict();
var UserUpdateManyWithWhereWithoutRestaurantInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => UserScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => UserUpdateManyMutationInputSchema), import_zod.z.lazy(() => UserUncheckedUpdateManyWithoutRestaurantInputSchema)])
}).strict();
var CookBookUpsertWithWhereUniqueWithoutRestaurantInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => CookBookWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => CookBookUpdateWithoutRestaurantInputSchema), import_zod.z.lazy(() => CookBookUncheckedUpdateWithoutRestaurantInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => CookBookCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => CookBookUncheckedCreateWithoutRestaurantInputSchema)])
}).strict();
var CookBookUpdateWithWhereUniqueWithoutRestaurantInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => CookBookWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => CookBookUpdateWithoutRestaurantInputSchema), import_zod.z.lazy(() => CookBookUncheckedUpdateWithoutRestaurantInputSchema)])
}).strict();
var CookBookUpdateManyWithWhereWithoutRestaurantInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => CookBookScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => CookBookUpdateManyMutationInputSchema), import_zod.z.lazy(() => CookBookUncheckedUpdateManyWithoutRestaurantInputSchema)])
}).strict();
var CookBookScalarWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => CookBookScalarWhereInputSchema), import_zod.z.lazy(() => CookBookScalarWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => CookBookScalarWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => CookBookScalarWhereInputSchema), import_zod.z.lazy(() => CookBookScalarWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  name: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  category: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.lazy(() => IntNullableFilterSchema), import_zod.z.number()]).optional().nullable()
}).strict();
var InventoryUpsertWithoutRestaurantInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => InventoryUpdateWithoutRestaurantInputSchema), import_zod.z.lazy(() => InventoryUncheckedUpdateWithoutRestaurantInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => InventoryCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => InventoryUncheckedCreateWithoutRestaurantInputSchema)]),
  where: import_zod.z.lazy(() => InventoryWhereInputSchema).optional()
}).strict();
var InventoryUpdateToOneWithWhereWithoutRestaurantInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => InventoryWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => InventoryUpdateWithoutRestaurantInputSchema), import_zod.z.lazy(() => InventoryUncheckedUpdateWithoutRestaurantInputSchema)])
}).strict();
var InventoryUpdateWithoutRestaurantInputSchema = import_zod.z.object({
  items: import_zod.z.lazy(() => InventoryItemUpdateManyWithoutInventoryNestedInputSchema).optional()
}).strict();
var InventoryUncheckedUpdateWithoutRestaurantInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  items: import_zod.z.lazy(() => InventoryItemUncheckedUpdateManyWithoutInventoryNestedInputSchema).optional()
}).strict();
var OrderUpsertWithWhereUniqueWithoutRestaurantInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => OrderWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => OrderUpdateWithoutRestaurantInputSchema), import_zod.z.lazy(() => OrderUncheckedUpdateWithoutRestaurantInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => OrderCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => OrderUncheckedCreateWithoutRestaurantInputSchema)])
}).strict();
var OrderUpdateWithWhereUniqueWithoutRestaurantInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => OrderWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => OrderUpdateWithoutRestaurantInputSchema), import_zod.z.lazy(() => OrderUncheckedUpdateWithoutRestaurantInputSchema)])
}).strict();
var OrderUpdateManyWithWhereWithoutRestaurantInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => OrderScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => OrderUpdateManyMutationInputSchema), import_zod.z.lazy(() => OrderUncheckedUpdateManyWithoutRestaurantInputSchema)])
}).strict();
var OrderScalarWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => OrderScalarWhereInputSchema), import_zod.z.lazy(() => OrderScalarWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => OrderScalarWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => OrderScalarWhereInputSchema), import_zod.z.lazy(() => OrderScalarWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  vendorId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => EnumOrderStatusFilterSchema), import_zod.z.lazy(() => OrderStatusSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var RecipeUpsertWithWhereUniqueWithoutRestaurantInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateWithoutRestaurantInputSchema), import_zod.z.lazy(() => RecipeUncheckedUpdateWithoutRestaurantInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutRestaurantInputSchema)])
}).strict();
var RecipeUpdateWithWhereUniqueWithoutRestaurantInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateWithoutRestaurantInputSchema), import_zod.z.lazy(() => RecipeUncheckedUpdateWithoutRestaurantInputSchema)])
}).strict();
var RecipeUpdateManyWithWhereWithoutRestaurantInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateManyMutationInputSchema), import_zod.z.lazy(() => RecipeUncheckedUpdateManyWithoutRestaurantInputSchema)])
}).strict();
var MenuUpsertWithWhereUniqueWithoutRestaurantInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => MenuWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => MenuUpdateWithoutRestaurantInputSchema), import_zod.z.lazy(() => MenuUncheckedUpdateWithoutRestaurantInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => MenuCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => MenuUncheckedCreateWithoutRestaurantInputSchema)])
}).strict();
var MenuUpdateWithWhereUniqueWithoutRestaurantInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => MenuWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => MenuUpdateWithoutRestaurantInputSchema), import_zod.z.lazy(() => MenuUncheckedUpdateWithoutRestaurantInputSchema)])
}).strict();
var MenuUpdateManyWithWhereWithoutRestaurantInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => MenuScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => MenuUpdateManyMutationInputSchema), import_zod.z.lazy(() => MenuUncheckedUpdateManyWithoutRestaurantInputSchema)])
}).strict();
var MenuScalarWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => MenuScalarWhereInputSchema), import_zod.z.lazy(() => MenuScalarWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => MenuScalarWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => MenuScalarWhereInputSchema), import_zod.z.lazy(() => MenuScalarWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  name: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var SalesTransactionsUpsertWithWhereUniqueWithoutRestaurantInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => SalesTransactionsWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsUpdateWithoutRestaurantInputSchema), import_zod.z.lazy(() => SalesTransactionsUncheckedUpdateWithoutRestaurantInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => SalesTransactionsUncheckedCreateWithoutRestaurantInputSchema)])
}).strict();
var SalesTransactionsUpdateWithWhereUniqueWithoutRestaurantInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => SalesTransactionsWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsUpdateWithoutRestaurantInputSchema), import_zod.z.lazy(() => SalesTransactionsUncheckedUpdateWithoutRestaurantInputSchema)])
}).strict();
var SalesTransactionsUpdateManyWithWhereWithoutRestaurantInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => SalesTransactionsScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsUpdateManyMutationInputSchema), import_zod.z.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutRestaurantInputSchema)])
}).strict();
var SalesTransactionsScalarWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsScalarWhereInputSchema), import_zod.z.lazy(() => SalesTransactionsScalarWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => SalesTransactionsScalarWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsScalarWhereInputSchema), import_zod.z.lazy(() => SalesTransactionsScalarWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  posTransactionID: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  menuItemId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  price: import_zod.z.union([import_zod.z.lazy(() => FloatFilterSchema), import_zod.z.number()]).optional(),
  total: import_zod.z.union([import_zod.z.lazy(() => FloatFilterSchema), import_zod.z.number()]).optional(),
  transactionDate: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var LeftoverItemUpsertWithWhereUniqueWithoutRestaurantInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemUpdateWithoutRestaurantInputSchema), import_zod.z.lazy(() => LeftoverItemUncheckedUpdateWithoutRestaurantInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => LeftoverItemUncheckedCreateWithoutRestaurantInputSchema)])
}).strict();
var LeftoverItemUpdateWithWhereUniqueWithoutRestaurantInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemUpdateWithoutRestaurantInputSchema), import_zod.z.lazy(() => LeftoverItemUncheckedUpdateWithoutRestaurantInputSchema)])
}).strict();
var LeftoverItemUpdateManyWithWhereWithoutRestaurantInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => LeftoverItemScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemUpdateManyMutationInputSchema), import_zod.z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRestaurantInputSchema)])
}).strict();
var LeftoverItemScalarWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemScalarWhereInputSchema), import_zod.z.lazy(() => LeftoverItemScalarWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => LeftoverItemScalarWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemScalarWhereInputSchema), import_zod.z.lazy(() => LeftoverItemScalarWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  date: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  menuItemId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  quantity: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  reason: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  recordedById: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var WasteRecordUpsertWithWhereUniqueWithoutRestaurantInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => WasteRecordUpdateWithoutRestaurantInputSchema), import_zod.z.lazy(() => WasteRecordUncheckedUpdateWithoutRestaurantInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => WasteRecordCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => WasteRecordUncheckedCreateWithoutRestaurantInputSchema)])
}).strict();
var WasteRecordUpdateWithWhereUniqueWithoutRestaurantInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => WasteRecordUpdateWithoutRestaurantInputSchema), import_zod.z.lazy(() => WasteRecordUncheckedUpdateWithoutRestaurantInputSchema)])
}).strict();
var WasteRecordUpdateManyWithWhereWithoutRestaurantInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => WasteRecordScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => WasteRecordUpdateManyMutationInputSchema), import_zod.z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRestaurantInputSchema)])
}).strict();
var WasteRecordScalarWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => WasteRecordScalarWhereInputSchema), import_zod.z.lazy(() => WasteRecordScalarWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => WasteRecordScalarWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => WasteRecordScalarWhereInputSchema), import_zod.z.lazy(() => WasteRecordScalarWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  date: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  ingredientId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  quantity: import_zod.z.union([import_zod.z.lazy(() => FloatFilterSchema), import_zod.z.number()]).optional(),
  unit: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  reason: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  recordedById: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var ProductionPlanUpsertWithWhereUniqueWithoutRestaurantInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => ProductionPlanWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanUpdateWithoutRestaurantInputSchema), import_zod.z.lazy(() => ProductionPlanUncheckedUpdateWithoutRestaurantInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => ProductionPlanUncheckedCreateWithoutRestaurantInputSchema)])
}).strict();
var ProductionPlanUpdateWithWhereUniqueWithoutRestaurantInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => ProductionPlanWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanUpdateWithoutRestaurantInputSchema), import_zod.z.lazy(() => ProductionPlanUncheckedUpdateWithoutRestaurantInputSchema)])
}).strict();
var ProductionPlanUpdateManyWithWhereWithoutRestaurantInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => ProductionPlanScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanUpdateManyMutationInputSchema), import_zod.z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutRestaurantInputSchema)])
}).strict();
var ProductionPlanScalarWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanScalarWhereInputSchema), import_zod.z.lazy(() => ProductionPlanScalarWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => ProductionPlanScalarWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanScalarWhereInputSchema), import_zod.z.lazy(() => ProductionPlanScalarWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  date: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  createdById: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var EquipmentUpsertWithWhereUniqueWithoutRestaurantInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => EquipmentWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => EquipmentUpdateWithoutRestaurantInputSchema), import_zod.z.lazy(() => EquipmentUncheckedUpdateWithoutRestaurantInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => EquipmentCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => EquipmentUncheckedCreateWithoutRestaurantInputSchema)])
}).strict();
var EquipmentUpdateWithWhereUniqueWithoutRestaurantInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => EquipmentWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => EquipmentUpdateWithoutRestaurantInputSchema), import_zod.z.lazy(() => EquipmentUncheckedUpdateWithoutRestaurantInputSchema)])
}).strict();
var EquipmentUpdateManyWithWhereWithoutRestaurantInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => EquipmentScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => EquipmentUpdateManyMutationInputSchema), import_zod.z.lazy(() => EquipmentUncheckedUpdateManyWithoutRestaurantInputSchema)])
}).strict();
var EquipmentScalarWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => EquipmentScalarWhereInputSchema), import_zod.z.lazy(() => EquipmentScalarWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => EquipmentScalarWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => EquipmentScalarWhereInputSchema), import_zod.z.lazy(() => EquipmentScalarWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  name: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  description: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  model: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  serialNumber: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  purchaseDate: import_zod.z.union([import_zod.z.lazy(() => DateTimeNullableFilterSchema), import_zod.z.coerce.date()]).optional().nullable(),
  lastMaintenance: import_zod.z.union([import_zod.z.lazy(() => DateTimeNullableFilterSchema), import_zod.z.coerce.date()]).optional().nullable(),
  nextMaintenance: import_zod.z.union([import_zod.z.lazy(() => DateTimeNullableFilterSchema), import_zod.z.coerce.date()]).optional().nullable(),
  status: import_zod.z.union([import_zod.z.lazy(() => EnumEquipmentStatusFilterSchema), import_zod.z.lazy(() => EquipmentStatusSchema)]).optional(),
  location: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var QualityChecklistUpsertWithWhereUniqueWithoutRestaurantInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => QualityChecklistWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => QualityChecklistUpdateWithoutRestaurantInputSchema), import_zod.z.lazy(() => QualityChecklistUncheckedUpdateWithoutRestaurantInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => QualityChecklistCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => QualityChecklistUncheckedCreateWithoutRestaurantInputSchema)])
}).strict();
var QualityChecklistUpdateWithWhereUniqueWithoutRestaurantInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => QualityChecklistWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => QualityChecklistUpdateWithoutRestaurantInputSchema), import_zod.z.lazy(() => QualityChecklistUncheckedUpdateWithoutRestaurantInputSchema)])
}).strict();
var QualityChecklistUpdateManyWithWhereWithoutRestaurantInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => QualityChecklistScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => QualityChecklistUpdateManyMutationInputSchema), import_zod.z.lazy(() => QualityChecklistUncheckedUpdateManyWithoutRestaurantInputSchema)])
}).strict();
var QualityChecklistScalarWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => QualityChecklistScalarWhereInputSchema), import_zod.z.lazy(() => QualityChecklistScalarWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => QualityChecklistScalarWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => QualityChecklistScalarWhereInputSchema), import_zod.z.lazy(() => QualityChecklistScalarWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  name: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  description: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  frequency: import_zod.z.union([import_zod.z.lazy(() => EnumChecklistFrequencyFilterSchema), import_zod.z.lazy(() => ChecklistFrequencySchema)]).optional(),
  isActive: import_zod.z.union([import_zod.z.lazy(() => BoolFilterSchema), import_zod.z.boolean()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var CustomerFeedbackUpsertWithWhereUniqueWithoutRestaurantInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackUpdateWithoutRestaurantInputSchema), import_zod.z.lazy(() => CustomerFeedbackUncheckedUpdateWithoutRestaurantInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackCreateWithoutRestaurantInputSchema), import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateWithoutRestaurantInputSchema)])
}).strict();
var CustomerFeedbackUpdateWithWhereUniqueWithoutRestaurantInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackUpdateWithoutRestaurantInputSchema), import_zod.z.lazy(() => CustomerFeedbackUncheckedUpdateWithoutRestaurantInputSchema)])
}).strict();
var CustomerFeedbackUpdateManyWithWhereWithoutRestaurantInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => CustomerFeedbackScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackUpdateManyMutationInputSchema), import_zod.z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRestaurantInputSchema)])
}).strict();
var CustomerFeedbackScalarWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackScalarWhereInputSchema), import_zod.z.lazy(() => CustomerFeedbackScalarWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => CustomerFeedbackScalarWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackScalarWhereInputSchema), import_zod.z.lazy(() => CustomerFeedbackScalarWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  menuItemId: import_zod.z.union([import_zod.z.lazy(() => IntNullableFilterSchema), import_zod.z.number()]).optional().nullable(),
  rating: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  comment: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  source: import_zod.z.union([import_zod.z.lazy(() => EnumFeedbackSourceFilterSchema), import_zod.z.lazy(() => FeedbackSourceSchema)]).optional(),
  tags: import_zod.z.lazy(() => StringNullableListFilterSchema).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => EnumFeedbackStatusFilterSchema), import_zod.z.lazy(() => FeedbackStatusSchema)]).optional(),
  responseText: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  respondedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeNullableFilterSchema), import_zod.z.coerce.date()]).optional().nullable(),
  respondedById: import_zod.z.union([import_zod.z.lazy(() => IntNullableFilterSchema), import_zod.z.number()]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var OrganizationCreateWithoutUsersInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  imageUrl: import_zod.z.string().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  restaurants: import_zod.z.lazy(() => RestaurantCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();
var OrganizationUncheckedCreateWithoutUsersInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  imageUrl: import_zod.z.string().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  restaurants: import_zod.z.lazy(() => RestaurantUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();
var OrganizationCreateOrConnectWithoutUsersInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => OrganizationCreateWithoutUsersInputSchema), import_zod.z.lazy(() => OrganizationUncheckedCreateWithoutUsersInputSchema)])
}).strict();
var RestaurantCreateWithoutUsersInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  imageUrl: import_zod.z.string().optional().nullable(),
  address: import_zod.z.string(),
  city: import_zod.z.string(),
  zipCode: import_zod.z.string(),
  state: import_zod.z.string(),
  owner: import_zod.z.string(),
  foodCost: import_zod.z.number().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  isDeleted: import_zod.z.boolean().optional(),
  deleted: import_zod.z.coerce.date().optional().nullable(),
  organization: import_zod.z.lazy(() => OrganizationCreateNestedOneWithoutRestaurantsInputSchema).optional(),
  cookbooks: import_zod.z.lazy(() => CookBookCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: import_zod.z.lazy(() => InventoryCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: import_zod.z.lazy(() => OrderCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: import_zod.z.lazy(() => MenuCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipment: import_zod.z.lazy(() => EquipmentCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklist: import_zod.z.lazy(() => QualityChecklistCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qustomerFeedback: import_zod.z.lazy(() => CustomerFeedbackCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();
var RestaurantUncheckedCreateWithoutUsersInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  imageUrl: import_zod.z.string().optional().nullable(),
  address: import_zod.z.string(),
  city: import_zod.z.string(),
  zipCode: import_zod.z.string(),
  state: import_zod.z.string(),
  owner: import_zod.z.string(),
  organizationId: import_zod.z.number().int().optional().nullable(),
  foodCost: import_zod.z.number().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  isDeleted: import_zod.z.boolean().optional(),
  deleted: import_zod.z.coerce.date().optional().nullable(),
  cookbooks: import_zod.z.lazy(() => CookBookUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: import_zod.z.lazy(() => InventoryUncheckedCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: import_zod.z.lazy(() => OrderUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: import_zod.z.lazy(() => MenuUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipment: import_zod.z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklist: import_zod.z.lazy(() => QualityChecklistUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qustomerFeedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();
var RestaurantCreateOrConnectWithoutUsersInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RestaurantWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => RestaurantCreateWithoutUsersInputSchema), import_zod.z.lazy(() => RestaurantUncheckedCreateWithoutUsersInputSchema)])
}).strict();
var ShiftCreateWithoutUserInputSchema = import_zod.z.object({
  startTime: import_zod.z.coerce.date(),
  endTime: import_zod.z.coerce.date(),
  status: import_zod.z.lazy(() => ShiftStatusSchema),
  ShiftTask: import_zod.z.lazy(() => ShiftTaskCreateNestedManyWithoutShiftInputSchema).optional()
}).strict();
var ShiftUncheckedCreateWithoutUserInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  startTime: import_zod.z.coerce.date(),
  endTime: import_zod.z.coerce.date(),
  status: import_zod.z.lazy(() => ShiftStatusSchema),
  ShiftTask: import_zod.z.lazy(() => ShiftTaskUncheckedCreateNestedManyWithoutShiftInputSchema).optional()
}).strict();
var ShiftCreateOrConnectWithoutUserInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => ShiftWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => ShiftCreateWithoutUserInputSchema), import_zod.z.lazy(() => ShiftUncheckedCreateWithoutUserInputSchema)])
}).strict();
var ShiftCreateManyUserInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => ShiftCreateManyUserInputSchema), import_zod.z.lazy(() => ShiftCreateManyUserInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var PrepItemCreateWithoutAssignedToInputSchema = import_zod.z.object({
  quantity: import_zod.z.number().int(),
  status: import_zod.z.lazy(() => PrepStatusSchema),
  prepBoard: import_zod.z.lazy(() => PrepBoardCreateNestedOneWithoutPrepItemsInputSchema),
  recipe: import_zod.z.lazy(() => RecipeCreateNestedOneWithoutPrepItemsInputSchema)
}).strict();
var PrepItemUncheckedCreateWithoutAssignedToInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  prepBoardId: import_zod.z.number().int(),
  recipeId: import_zod.z.number().int(),
  quantity: import_zod.z.number().int(),
  status: import_zod.z.lazy(() => PrepStatusSchema)
}).strict();
var PrepItemCreateOrConnectWithoutAssignedToInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => PrepItemCreateWithoutAssignedToInputSchema), import_zod.z.lazy(() => PrepItemUncheckedCreateWithoutAssignedToInputSchema)])
}).strict();
var PrepItemCreateManyAssignedToInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => PrepItemCreateManyAssignedToInputSchema), import_zod.z.lazy(() => PrepItemCreateManyAssignedToInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var InventoryItemCreateWithoutLastUpdatedByInputSchema = import_zod.z.object({
  quantity: import_zod.z.number(),
  unit: import_zod.z.string(),
  minQuantity: import_zod.z.number(),
  restockThreshold: import_zod.z.number(),
  lastUpdated: import_zod.z.coerce.date().optional(),
  inventory: import_zod.z.lazy(() => InventoryCreateNestedOneWithoutItemsInputSchema),
  ingredient: import_zod.z.lazy(() => IngredientCreateNestedOneWithoutInventoryItemsInputSchema),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutInventoryItemInputSchema).optional()
}).strict();
var InventoryItemUncheckedCreateWithoutLastUpdatedByInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  inventoryId: import_zod.z.number().int(),
  ingredientId: import_zod.z.number().int(),
  quantity: import_zod.z.number(),
  unit: import_zod.z.string(),
  minQuantity: import_zod.z.number(),
  restockThreshold: import_zod.z.number(),
  lastUpdated: import_zod.z.coerce.date().optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutInventoryItemInputSchema).optional()
}).strict();
var InventoryItemCreateOrConnectWithoutLastUpdatedByInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => InventoryItemCreateWithoutLastUpdatedByInputSchema), import_zod.z.lazy(() => InventoryItemUncheckedCreateWithoutLastUpdatedByInputSchema)])
}).strict();
var InventoryItemCreateManyLastUpdatedByInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => InventoryItemCreateManyLastUpdatedByInputSchema), import_zod.z.lazy(() => InventoryItemCreateManyLastUpdatedByInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var SessionCreateWithoutUserInputSchema = import_zod.z.object({
  id: import_zod.z.string().optional(),
  code: import_zod.z.string(),
  token: import_zod.z.string(),
  expiresAt: import_zod.z.coerce.date(),
  createdAt: import_zod.z.coerce.date().optional()
}).strict();
var SessionUncheckedCreateWithoutUserInputSchema = import_zod.z.object({
  id: import_zod.z.string().optional(),
  code: import_zod.z.string(),
  token: import_zod.z.string(),
  expiresAt: import_zod.z.coerce.date(),
  createdAt: import_zod.z.coerce.date().optional()
}).strict();
var SessionCreateOrConnectWithoutUserInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => SessionWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => SessionCreateWithoutUserInputSchema), import_zod.z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema)])
}).strict();
var SessionCreateManyUserInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => SessionCreateManyUserInputSchema), import_zod.z.lazy(() => SessionCreateManyUserInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var PasswordResetCreateWithoutUserInputSchema = import_zod.z.object({
  token: import_zod.z.string(),
  expiresAt: import_zod.z.coerce.date(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var PasswordResetUncheckedCreateWithoutUserInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  token: import_zod.z.string(),
  expiresAt: import_zod.z.coerce.date(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var PasswordResetCreateOrConnectWithoutUserInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => PasswordResetWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => PasswordResetCreateWithoutUserInputSchema), import_zod.z.lazy(() => PasswordResetUncheckedCreateWithoutUserInputSchema)])
}).strict();
var PasswordResetCreateManyUserInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => PasswordResetCreateManyUserInputSchema), import_zod.z.lazy(() => PasswordResetCreateManyUserInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var LeftoverItemCreateWithoutRecordedByInputSchema = import_zod.z.object({
  date: import_zod.z.coerce.date(),
  quantity: import_zod.z.number().int(),
  reason: import_zod.z.string(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  restaurant: import_zod.z.lazy(() => RestaurantCreateNestedOneWithoutLeftoverItemInputSchema),
  menuItem: import_zod.z.lazy(() => MenuItemCreateNestedOneWithoutLeftoverItemInputSchema)
}).strict();
var LeftoverItemUncheckedCreateWithoutRecordedByInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  restaurantId: import_zod.z.number().int(),
  date: import_zod.z.coerce.date(),
  menuItemId: import_zod.z.number().int(),
  quantity: import_zod.z.number().int(),
  reason: import_zod.z.string(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var LeftoverItemCreateOrConnectWithoutRecordedByInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemCreateWithoutRecordedByInputSchema), import_zod.z.lazy(() => LeftoverItemUncheckedCreateWithoutRecordedByInputSchema)])
}).strict();
var LeftoverItemCreateManyRecordedByInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemCreateManyRecordedByInputSchema), import_zod.z.lazy(() => LeftoverItemCreateManyRecordedByInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var WasteRecordCreateWithoutRecordedByInputSchema = import_zod.z.object({
  date: import_zod.z.coerce.date(),
  quantity: import_zod.z.number(),
  unit: import_zod.z.string(),
  reason: import_zod.z.string(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  restaurant: import_zod.z.lazy(() => RestaurantCreateNestedOneWithoutWasteRecordInputSchema),
  ingrediente: import_zod.z.lazy(() => IngredientCreateNestedOneWithoutWasteRecordInputSchema)
}).strict();
var WasteRecordUncheckedCreateWithoutRecordedByInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  restaurantId: import_zod.z.number().int(),
  date: import_zod.z.coerce.date(),
  ingredientId: import_zod.z.number().int(),
  quantity: import_zod.z.number(),
  unit: import_zod.z.string(),
  reason: import_zod.z.string(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var WasteRecordCreateOrConnectWithoutRecordedByInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => WasteRecordCreateWithoutRecordedByInputSchema), import_zod.z.lazy(() => WasteRecordUncheckedCreateWithoutRecordedByInputSchema)])
}).strict();
var WasteRecordCreateManyRecordedByInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => WasteRecordCreateManyRecordedByInputSchema), import_zod.z.lazy(() => WasteRecordCreateManyRecordedByInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var ProductionPlanCreateWithoutCreatedByInputSchema = import_zod.z.object({
  date: import_zod.z.coerce.date(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  restaurant: import_zod.z.lazy(() => RestaurantCreateNestedOneWithoutProductionPlanInputSchema),
  items: import_zod.z.lazy(() => ProductionPlanItemCreateNestedManyWithoutProductionPlanInputSchema).optional()
}).strict();
var ProductionPlanUncheckedCreateWithoutCreatedByInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  restaurantId: import_zod.z.number().int(),
  date: import_zod.z.coerce.date(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  items: import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutProductionPlanInputSchema).optional()
}).strict();
var ProductionPlanCreateOrConnectWithoutCreatedByInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => ProductionPlanWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanCreateWithoutCreatedByInputSchema), import_zod.z.lazy(() => ProductionPlanUncheckedCreateWithoutCreatedByInputSchema)])
}).strict();
var ProductionPlanCreateManyCreatedByInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanCreateManyCreatedByInputSchema), import_zod.z.lazy(() => ProductionPlanCreateManyCreatedByInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var ProductionPlanItemCreateWithoutAssignedToInputSchema = import_zod.z.object({
  quantity: import_zod.z.number().int(),
  unit: import_zod.z.string(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanCreateNestedOneWithoutItemsInputSchema),
  recipe: import_zod.z.lazy(() => RecipeCreateNestedOneWithoutProductionPlanItemInputSchema)
}).strict();
var ProductionPlanItemUncheckedCreateWithoutAssignedToInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  productionPlanId: import_zod.z.number().int(),
  recipeId: import_zod.z.number().int(),
  quantity: import_zod.z.number().int(),
  unit: import_zod.z.string(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var ProductionPlanItemCreateOrConnectWithoutAssignedToInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemCreateWithoutAssignedToInputSchema), import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateWithoutAssignedToInputSchema)])
}).strict();
var ProductionPlanItemCreateManyAssignedToInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemCreateManyAssignedToInputSchema), import_zod.z.lazy(() => ProductionPlanItemCreateManyAssignedToInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var AvailabilityCreateWithoutUserInputSchema = import_zod.z.object({
  dayOfWeek: import_zod.z.lazy(() => DayOfWeekSchema),
  startTime: import_zod.z.coerce.date(),
  endTime: import_zod.z.coerce.date(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var AvailabilityUncheckedCreateWithoutUserInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  dayOfWeek: import_zod.z.lazy(() => DayOfWeekSchema),
  startTime: import_zod.z.coerce.date(),
  endTime: import_zod.z.coerce.date(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var AvailabilityCreateOrConnectWithoutUserInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => AvailabilityWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => AvailabilityCreateWithoutUserInputSchema), import_zod.z.lazy(() => AvailabilityUncheckedCreateWithoutUserInputSchema)])
}).strict();
var AvailabilityCreateManyUserInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => AvailabilityCreateManyUserInputSchema), import_zod.z.lazy(() => AvailabilityCreateManyUserInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var SchedulingConstraintCreateWithoutUserInputSchema = import_zod.z.object({
  date: import_zod.z.coerce.date(),
  constraintsType: import_zod.z.lazy(() => ConstraintTypeSchema),
  startTime: import_zod.z.coerce.date(),
  endTime: import_zod.z.coerce.date(),
  notes: import_zod.z.string().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var SchedulingConstraintUncheckedCreateWithoutUserInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  date: import_zod.z.coerce.date(),
  constraintsType: import_zod.z.lazy(() => ConstraintTypeSchema),
  startTime: import_zod.z.coerce.date(),
  endTime: import_zod.z.coerce.date(),
  notes: import_zod.z.string().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var SchedulingConstraintCreateOrConnectWithoutUserInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => SchedulingConstraintWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => SchedulingConstraintCreateWithoutUserInputSchema), import_zod.z.lazy(() => SchedulingConstraintUncheckedCreateWithoutUserInputSchema)])
}).strict();
var SchedulingConstraintCreateManyUserInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => SchedulingConstraintCreateManyUserInputSchema), import_zod.z.lazy(() => SchedulingConstraintCreateManyUserInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var InventoryWithdrawalCreateWithoutCreatedByInputSchema = import_zod.z.object({
  dateTime: import_zod.z.coerce.date(),
  quantity: import_zod.z.number(),
  unit: import_zod.z.string(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  inventoryItem: import_zod.z.lazy(() => InventoryItemCreateNestedOneWithoutInventoryWithdrawalInputSchema),
  recipe: import_zod.z.lazy(() => RecipeCreateNestedOneWithoutInventoryWithdrawalInputSchema).optional()
}).strict();
var InventoryWithdrawalUncheckedCreateWithoutCreatedByInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  inventoryItemId: import_zod.z.number().int(),
  dateTime: import_zod.z.coerce.date(),
  quantity: import_zod.z.number(),
  unit: import_zod.z.string(),
  recipeId: import_zod.z.number().int().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var InventoryWithdrawalCreateOrConnectWithoutCreatedByInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalCreateWithoutCreatedByInputSchema), import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateWithoutCreatedByInputSchema)])
}).strict();
var InventoryWithdrawalCreateManyCreatedByInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalCreateManyCreatedByInputSchema), import_zod.z.lazy(() => InventoryWithdrawalCreateManyCreatedByInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var ChecklistCompleteCreateWithoutCompletedByInputSchema = import_zod.z.object({
  date: import_zod.z.coerce.date(),
  notes: import_zod.z.string().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  checklist: import_zod.z.lazy(() => QualityChecklistCreateNestedOneWithoutCompletionsInputSchema),
  items: import_zod.z.lazy(() => ChecklistItemCompleteCreateNestedManyWithoutChecklistCompleteInputSchema).optional()
}).strict();
var ChecklistCompleteUncheckedCreateWithoutCompletedByInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  checklistId: import_zod.z.number().int(),
  date: import_zod.z.coerce.date(),
  notes: import_zod.z.string().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  items: import_zod.z.lazy(() => ChecklistItemCompleteUncheckedCreateNestedManyWithoutChecklistCompleteInputSchema).optional()
}).strict();
var ChecklistCompleteCreateOrConnectWithoutCompletedByInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => ChecklistCompleteWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteCreateWithoutCompletedByInputSchema), import_zod.z.lazy(() => ChecklistCompleteUncheckedCreateWithoutCompletedByInputSchema)])
}).strict();
var ChecklistCompleteCreateManyCompletedByInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteCreateManyCompletedByInputSchema), import_zod.z.lazy(() => ChecklistCompleteCreateManyCompletedByInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var CustomerFeedbackCreateWithoutRespondedByInputSchema = import_zod.z.object({
  rating: import_zod.z.number().int(),
  comment: import_zod.z.string().optional().nullable(),
  source: import_zod.z.lazy(() => FeedbackSourceSchema),
  tags: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackCreatetagsInputSchema), import_zod.z.string().array()]).optional(),
  status: import_zod.z.lazy(() => FeedbackStatusSchema).optional(),
  responseText: import_zod.z.string().optional().nullable(),
  respondedAt: import_zod.z.coerce.date().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  restaurant: import_zod.z.lazy(() => RestaurantCreateNestedOneWithoutQustomerFeedbackInputSchema),
  menuItem: import_zod.z.lazy(() => MenuItemCreateNestedOneWithoutFeedbackInputSchema).optional()
}).strict();
var CustomerFeedbackUncheckedCreateWithoutRespondedByInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  restaurantId: import_zod.z.number().int(),
  menuItemId: import_zod.z.number().int().optional().nullable(),
  rating: import_zod.z.number().int(),
  comment: import_zod.z.string().optional().nullable(),
  source: import_zod.z.lazy(() => FeedbackSourceSchema),
  tags: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackCreatetagsInputSchema), import_zod.z.string().array()]).optional(),
  status: import_zod.z.lazy(() => FeedbackStatusSchema).optional(),
  responseText: import_zod.z.string().optional().nullable(),
  respondedAt: import_zod.z.coerce.date().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var CustomerFeedbackCreateOrConnectWithoutRespondedByInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackCreateWithoutRespondedByInputSchema), import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateWithoutRespondedByInputSchema)])
}).strict();
var CustomerFeedbackCreateManyRespondedByInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackCreateManyRespondedByInputSchema), import_zod.z.lazy(() => CustomerFeedbackCreateManyRespondedByInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var RecipeVersionCreateWithoutCreatedByInputSchema = import_zod.z.object({
  versionNumber: import_zod.z.number().int(),
  description: import_zod.z.string().optional().nullable(),
  changes: import_zod.z.string().optional().nullable(),
  isActive: import_zod.z.boolean().optional(),
  approvedAt: import_zod.z.coerce.date().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  recipe: import_zod.z.lazy(() => RecipeCreateNestedOneWithoutVersionsInputSchema),
  ingredients: import_zod.z.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeVersionInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeVersionInputSchema).optional(),
  approvedBy: import_zod.z.lazy(() => UserCreateNestedOneWithoutRecipeVersionsApprovedInputSchema).optional()
}).strict();
var RecipeVersionUncheckedCreateWithoutCreatedByInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  recipeId: import_zod.z.number().int(),
  versionNumber: import_zod.z.number().int(),
  description: import_zod.z.string().optional().nullable(),
  changes: import_zod.z.string().optional().nullable(),
  isActive: import_zod.z.boolean().optional(),
  approvedById: import_zod.z.number().int().optional().nullable(),
  approvedAt: import_zod.z.coerce.date().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeVersionInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeVersionInputSchema).optional()
}).strict();
var RecipeVersionCreateOrConnectWithoutCreatedByInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionCreateWithoutCreatedByInputSchema), import_zod.z.lazy(() => RecipeVersionUncheckedCreateWithoutCreatedByInputSchema)])
}).strict();
var RecipeVersionCreateManyCreatedByInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionCreateManyCreatedByInputSchema), import_zod.z.lazy(() => RecipeVersionCreateManyCreatedByInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var RecipeVersionCreateWithoutApprovedByInputSchema = import_zod.z.object({
  versionNumber: import_zod.z.number().int(),
  description: import_zod.z.string().optional().nullable(),
  changes: import_zod.z.string().optional().nullable(),
  isActive: import_zod.z.boolean().optional(),
  approvedAt: import_zod.z.coerce.date().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  recipe: import_zod.z.lazy(() => RecipeCreateNestedOneWithoutVersionsInputSchema),
  ingredients: import_zod.z.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeVersionInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeVersionInputSchema).optional(),
  createdBy: import_zod.z.lazy(() => UserCreateNestedOneWithoutRecipeVersionsCreatedInputSchema)
}).strict();
var RecipeVersionUncheckedCreateWithoutApprovedByInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  recipeId: import_zod.z.number().int(),
  versionNumber: import_zod.z.number().int(),
  description: import_zod.z.string().optional().nullable(),
  changes: import_zod.z.string().optional().nullable(),
  isActive: import_zod.z.boolean().optional(),
  createdById: import_zod.z.number().int(),
  approvedAt: import_zod.z.coerce.date().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeVersionInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeVersionInputSchema).optional()
}).strict();
var RecipeVersionCreateOrConnectWithoutApprovedByInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionCreateWithoutApprovedByInputSchema), import_zod.z.lazy(() => RecipeVersionUncheckedCreateWithoutApprovedByInputSchema)])
}).strict();
var RecipeVersionCreateManyApprovedByInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionCreateManyApprovedByInputSchema), import_zod.z.lazy(() => RecipeVersionCreateManyApprovedByInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var OrganizationUpsertWithoutUsersInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => OrganizationUpdateWithoutUsersInputSchema), import_zod.z.lazy(() => OrganizationUncheckedUpdateWithoutUsersInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => OrganizationCreateWithoutUsersInputSchema), import_zod.z.lazy(() => OrganizationUncheckedCreateWithoutUsersInputSchema)]),
  where: import_zod.z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();
var OrganizationUpdateToOneWithWhereWithoutUsersInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => OrganizationUpdateWithoutUsersInputSchema), import_zod.z.lazy(() => OrganizationUncheckedUpdateWithoutUsersInputSchema)])
}).strict();
var OrganizationUpdateWithoutUsersInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurants: import_zod.z.lazy(() => RestaurantUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();
var OrganizationUncheckedUpdateWithoutUsersInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurants: import_zod.z.lazy(() => RestaurantUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();
var RestaurantUpsertWithoutUsersInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => RestaurantUpdateWithoutUsersInputSchema), import_zod.z.lazy(() => RestaurantUncheckedUpdateWithoutUsersInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => RestaurantCreateWithoutUsersInputSchema), import_zod.z.lazy(() => RestaurantUncheckedCreateWithoutUsersInputSchema)]),
  where: import_zod.z.lazy(() => RestaurantWhereInputSchema).optional()
}).strict();
var RestaurantUpdateToOneWithWhereWithoutUsersInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RestaurantWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => RestaurantUpdateWithoutUsersInputSchema), import_zod.z.lazy(() => RestaurantUncheckedUpdateWithoutUsersInputSchema)])
}).strict();
var RestaurantUpdateWithoutUsersInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  address: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  city: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  zipCode: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  state: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  owner: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  deleted: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  organization: import_zod.z.lazy(() => OrganizationUpdateOneWithoutRestaurantsNestedInputSchema).optional(),
  cookbooks: import_zod.z.lazy(() => CookBookUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: import_zod.z.lazy(() => InventoryUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: import_zod.z.lazy(() => OrderUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: import_zod.z.lazy(() => MenuUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipment: import_zod.z.lazy(() => EquipmentUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklist: import_zod.z.lazy(() => QualityChecklistUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qustomerFeedback: import_zod.z.lazy(() => CustomerFeedbackUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();
var RestaurantUncheckedUpdateWithoutUsersInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  address: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  city: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  zipCode: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  state: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  owner: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  deleted: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  cookbooks: import_zod.z.lazy(() => CookBookUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: import_zod.z.lazy(() => InventoryUncheckedUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: import_zod.z.lazy(() => OrderUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: import_zod.z.lazy(() => MenuUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipment: import_zod.z.lazy(() => EquipmentUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklist: import_zod.z.lazy(() => QualityChecklistUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qustomerFeedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();
var ShiftUpsertWithWhereUniqueWithoutUserInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => ShiftWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => ShiftUpdateWithoutUserInputSchema), import_zod.z.lazy(() => ShiftUncheckedUpdateWithoutUserInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => ShiftCreateWithoutUserInputSchema), import_zod.z.lazy(() => ShiftUncheckedCreateWithoutUserInputSchema)])
}).strict();
var ShiftUpdateWithWhereUniqueWithoutUserInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => ShiftWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => ShiftUpdateWithoutUserInputSchema), import_zod.z.lazy(() => ShiftUncheckedUpdateWithoutUserInputSchema)])
}).strict();
var ShiftUpdateManyWithWhereWithoutUserInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => ShiftScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => ShiftUpdateManyMutationInputSchema), import_zod.z.lazy(() => ShiftUncheckedUpdateManyWithoutUserInputSchema)])
}).strict();
var ShiftScalarWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => ShiftScalarWhereInputSchema), import_zod.z.lazy(() => ShiftScalarWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => ShiftScalarWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => ShiftScalarWhereInputSchema), import_zod.z.lazy(() => ShiftScalarWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  userId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  startTime: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  endTime: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => EnumShiftStatusFilterSchema), import_zod.z.lazy(() => ShiftStatusSchema)]).optional()
}).strict();
var PrepItemUpsertWithWhereUniqueWithoutAssignedToInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => PrepItemUpdateWithoutAssignedToInputSchema), import_zod.z.lazy(() => PrepItemUncheckedUpdateWithoutAssignedToInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => PrepItemCreateWithoutAssignedToInputSchema), import_zod.z.lazy(() => PrepItemUncheckedCreateWithoutAssignedToInputSchema)])
}).strict();
var PrepItemUpdateWithWhereUniqueWithoutAssignedToInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => PrepItemUpdateWithoutAssignedToInputSchema), import_zod.z.lazy(() => PrepItemUncheckedUpdateWithoutAssignedToInputSchema)])
}).strict();
var PrepItemUpdateManyWithWhereWithoutAssignedToInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => PrepItemScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => PrepItemUpdateManyMutationInputSchema), import_zod.z.lazy(() => PrepItemUncheckedUpdateManyWithoutAssignedToInputSchema)])
}).strict();
var PrepItemScalarWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => PrepItemScalarWhereInputSchema), import_zod.z.lazy(() => PrepItemScalarWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => PrepItemScalarWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => PrepItemScalarWhereInputSchema), import_zod.z.lazy(() => PrepItemScalarWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  prepBoardId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  recipeId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  quantity: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => EnumPrepStatusFilterSchema), import_zod.z.lazy(() => PrepStatusSchema)]).optional(),
  assignedToId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional()
}).strict();
var InventoryItemUpsertWithWhereUniqueWithoutLastUpdatedByInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => InventoryItemUpdateWithoutLastUpdatedByInputSchema), import_zod.z.lazy(() => InventoryItemUncheckedUpdateWithoutLastUpdatedByInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => InventoryItemCreateWithoutLastUpdatedByInputSchema), import_zod.z.lazy(() => InventoryItemUncheckedCreateWithoutLastUpdatedByInputSchema)])
}).strict();
var InventoryItemUpdateWithWhereUniqueWithoutLastUpdatedByInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => InventoryItemUpdateWithoutLastUpdatedByInputSchema), import_zod.z.lazy(() => InventoryItemUncheckedUpdateWithoutLastUpdatedByInputSchema)])
}).strict();
var InventoryItemUpdateManyWithWhereWithoutLastUpdatedByInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => InventoryItemScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => InventoryItemUpdateManyMutationInputSchema), import_zod.z.lazy(() => InventoryItemUncheckedUpdateManyWithoutLastUpdatedByInputSchema)])
}).strict();
var InventoryItemScalarWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => InventoryItemScalarWhereInputSchema), import_zod.z.lazy(() => InventoryItemScalarWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => InventoryItemScalarWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => InventoryItemScalarWhereInputSchema), import_zod.z.lazy(() => InventoryItemScalarWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  inventoryId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  ingredientId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  quantity: import_zod.z.union([import_zod.z.lazy(() => FloatFilterSchema), import_zod.z.number()]).optional(),
  unit: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  minQuantity: import_zod.z.union([import_zod.z.lazy(() => FloatFilterSchema), import_zod.z.number()]).optional(),
  restockThreshold: import_zod.z.union([import_zod.z.lazy(() => FloatFilterSchema), import_zod.z.number()]).optional(),
  lastUpdatedById: import_zod.z.union([import_zod.z.lazy(() => IntNullableFilterSchema), import_zod.z.number()]).optional().nullable(),
  lastUpdated: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var SessionUpsertWithWhereUniqueWithoutUserInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => SessionWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => SessionUpdateWithoutUserInputSchema), import_zod.z.lazy(() => SessionUncheckedUpdateWithoutUserInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => SessionCreateWithoutUserInputSchema), import_zod.z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema)])
}).strict();
var SessionUpdateWithWhereUniqueWithoutUserInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => SessionWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => SessionUpdateWithoutUserInputSchema), import_zod.z.lazy(() => SessionUncheckedUpdateWithoutUserInputSchema)])
}).strict();
var SessionUpdateManyWithWhereWithoutUserInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => SessionScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => SessionUpdateManyMutationInputSchema), import_zod.z.lazy(() => SessionUncheckedUpdateManyWithoutUserInputSchema)])
}).strict();
var SessionScalarWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => SessionScalarWhereInputSchema), import_zod.z.lazy(() => SessionScalarWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => SessionScalarWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => SessionScalarWhereInputSchema), import_zod.z.lazy(() => SessionScalarWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  userId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  code: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  token: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  expiresAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var PasswordResetUpsertWithWhereUniqueWithoutUserInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => PasswordResetWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => PasswordResetUpdateWithoutUserInputSchema), import_zod.z.lazy(() => PasswordResetUncheckedUpdateWithoutUserInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => PasswordResetCreateWithoutUserInputSchema), import_zod.z.lazy(() => PasswordResetUncheckedCreateWithoutUserInputSchema)])
}).strict();
var PasswordResetUpdateWithWhereUniqueWithoutUserInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => PasswordResetWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => PasswordResetUpdateWithoutUserInputSchema), import_zod.z.lazy(() => PasswordResetUncheckedUpdateWithoutUserInputSchema)])
}).strict();
var PasswordResetUpdateManyWithWhereWithoutUserInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => PasswordResetScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => PasswordResetUpdateManyMutationInputSchema), import_zod.z.lazy(() => PasswordResetUncheckedUpdateManyWithoutUserInputSchema)])
}).strict();
var PasswordResetScalarWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => PasswordResetScalarWhereInputSchema), import_zod.z.lazy(() => PasswordResetScalarWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => PasswordResetScalarWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => PasswordResetScalarWhereInputSchema), import_zod.z.lazy(() => PasswordResetScalarWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  token: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  userId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  expiresAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var LeftoverItemUpsertWithWhereUniqueWithoutRecordedByInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemUpdateWithoutRecordedByInputSchema), import_zod.z.lazy(() => LeftoverItemUncheckedUpdateWithoutRecordedByInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemCreateWithoutRecordedByInputSchema), import_zod.z.lazy(() => LeftoverItemUncheckedCreateWithoutRecordedByInputSchema)])
}).strict();
var LeftoverItemUpdateWithWhereUniqueWithoutRecordedByInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemUpdateWithoutRecordedByInputSchema), import_zod.z.lazy(() => LeftoverItemUncheckedUpdateWithoutRecordedByInputSchema)])
}).strict();
var LeftoverItemUpdateManyWithWhereWithoutRecordedByInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => LeftoverItemScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemUpdateManyMutationInputSchema), import_zod.z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRecordedByInputSchema)])
}).strict();
var WasteRecordUpsertWithWhereUniqueWithoutRecordedByInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => WasteRecordUpdateWithoutRecordedByInputSchema), import_zod.z.lazy(() => WasteRecordUncheckedUpdateWithoutRecordedByInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => WasteRecordCreateWithoutRecordedByInputSchema), import_zod.z.lazy(() => WasteRecordUncheckedCreateWithoutRecordedByInputSchema)])
}).strict();
var WasteRecordUpdateWithWhereUniqueWithoutRecordedByInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => WasteRecordUpdateWithoutRecordedByInputSchema), import_zod.z.lazy(() => WasteRecordUncheckedUpdateWithoutRecordedByInputSchema)])
}).strict();
var WasteRecordUpdateManyWithWhereWithoutRecordedByInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => WasteRecordScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => WasteRecordUpdateManyMutationInputSchema), import_zod.z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRecordedByInputSchema)])
}).strict();
var ProductionPlanUpsertWithWhereUniqueWithoutCreatedByInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => ProductionPlanWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanUpdateWithoutCreatedByInputSchema), import_zod.z.lazy(() => ProductionPlanUncheckedUpdateWithoutCreatedByInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanCreateWithoutCreatedByInputSchema), import_zod.z.lazy(() => ProductionPlanUncheckedCreateWithoutCreatedByInputSchema)])
}).strict();
var ProductionPlanUpdateWithWhereUniqueWithoutCreatedByInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => ProductionPlanWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanUpdateWithoutCreatedByInputSchema), import_zod.z.lazy(() => ProductionPlanUncheckedUpdateWithoutCreatedByInputSchema)])
}).strict();
var ProductionPlanUpdateManyWithWhereWithoutCreatedByInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => ProductionPlanScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanUpdateManyMutationInputSchema), import_zod.z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutCreatedByInputSchema)])
}).strict();
var ProductionPlanItemUpsertWithWhereUniqueWithoutAssignedToInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemUpdateWithoutAssignedToInputSchema), import_zod.z.lazy(() => ProductionPlanItemUncheckedUpdateWithoutAssignedToInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemCreateWithoutAssignedToInputSchema), import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateWithoutAssignedToInputSchema)])
}).strict();
var ProductionPlanItemUpdateWithWhereUniqueWithoutAssignedToInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemUpdateWithoutAssignedToInputSchema), import_zod.z.lazy(() => ProductionPlanItemUncheckedUpdateWithoutAssignedToInputSchema)])
}).strict();
var ProductionPlanItemUpdateManyWithWhereWithoutAssignedToInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => ProductionPlanItemScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemUpdateManyMutationInputSchema), import_zod.z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutAssignedToInputSchema)])
}).strict();
var AvailabilityUpsertWithWhereUniqueWithoutUserInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => AvailabilityWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => AvailabilityUpdateWithoutUserInputSchema), import_zod.z.lazy(() => AvailabilityUncheckedUpdateWithoutUserInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => AvailabilityCreateWithoutUserInputSchema), import_zod.z.lazy(() => AvailabilityUncheckedCreateWithoutUserInputSchema)])
}).strict();
var AvailabilityUpdateWithWhereUniqueWithoutUserInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => AvailabilityWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => AvailabilityUpdateWithoutUserInputSchema), import_zod.z.lazy(() => AvailabilityUncheckedUpdateWithoutUserInputSchema)])
}).strict();
var AvailabilityUpdateManyWithWhereWithoutUserInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => AvailabilityScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => AvailabilityUpdateManyMutationInputSchema), import_zod.z.lazy(() => AvailabilityUncheckedUpdateManyWithoutUserInputSchema)])
}).strict();
var AvailabilityScalarWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => AvailabilityScalarWhereInputSchema), import_zod.z.lazy(() => AvailabilityScalarWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => AvailabilityScalarWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => AvailabilityScalarWhereInputSchema), import_zod.z.lazy(() => AvailabilityScalarWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  userId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  dayOfWeek: import_zod.z.union([import_zod.z.lazy(() => EnumDayOfWeekFilterSchema), import_zod.z.lazy(() => DayOfWeekSchema)]).optional(),
  startTime: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  endTime: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var SchedulingConstraintUpsertWithWhereUniqueWithoutUserInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => SchedulingConstraintWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => SchedulingConstraintUpdateWithoutUserInputSchema), import_zod.z.lazy(() => SchedulingConstraintUncheckedUpdateWithoutUserInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => SchedulingConstraintCreateWithoutUserInputSchema), import_zod.z.lazy(() => SchedulingConstraintUncheckedCreateWithoutUserInputSchema)])
}).strict();
var SchedulingConstraintUpdateWithWhereUniqueWithoutUserInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => SchedulingConstraintWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => SchedulingConstraintUpdateWithoutUserInputSchema), import_zod.z.lazy(() => SchedulingConstraintUncheckedUpdateWithoutUserInputSchema)])
}).strict();
var SchedulingConstraintUpdateManyWithWhereWithoutUserInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => SchedulingConstraintScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => SchedulingConstraintUpdateManyMutationInputSchema), import_zod.z.lazy(() => SchedulingConstraintUncheckedUpdateManyWithoutUserInputSchema)])
}).strict();
var SchedulingConstraintScalarWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => SchedulingConstraintScalarWhereInputSchema), import_zod.z.lazy(() => SchedulingConstraintScalarWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => SchedulingConstraintScalarWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => SchedulingConstraintScalarWhereInputSchema), import_zod.z.lazy(() => SchedulingConstraintScalarWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  userId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  date: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  constraintsType: import_zod.z.union([import_zod.z.lazy(() => EnumConstraintTypeFilterSchema), import_zod.z.lazy(() => ConstraintTypeSchema)]).optional(),
  startTime: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  endTime: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  notes: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var InventoryWithdrawalUpsertWithWhereUniqueWithoutCreatedByInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalUpdateWithoutCreatedByInputSchema), import_zod.z.lazy(() => InventoryWithdrawalUncheckedUpdateWithoutCreatedByInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalCreateWithoutCreatedByInputSchema), import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateWithoutCreatedByInputSchema)])
}).strict();
var InventoryWithdrawalUpdateWithWhereUniqueWithoutCreatedByInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalUpdateWithoutCreatedByInputSchema), import_zod.z.lazy(() => InventoryWithdrawalUncheckedUpdateWithoutCreatedByInputSchema)])
}).strict();
var InventoryWithdrawalUpdateManyWithWhereWithoutCreatedByInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => InventoryWithdrawalScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalUpdateManyMutationInputSchema), import_zod.z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByInputSchema)])
}).strict();
var InventoryWithdrawalScalarWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalScalarWhereInputSchema), import_zod.z.lazy(() => InventoryWithdrawalScalarWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => InventoryWithdrawalScalarWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalScalarWhereInputSchema), import_zod.z.lazy(() => InventoryWithdrawalScalarWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  inventoryItemId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  dateTime: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  quantity: import_zod.z.union([import_zod.z.lazy(() => FloatFilterSchema), import_zod.z.number()]).optional(),
  unit: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  recipeId: import_zod.z.union([import_zod.z.lazy(() => IntNullableFilterSchema), import_zod.z.number()]).optional().nullable(),
  createdById: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var ChecklistCompleteUpsertWithWhereUniqueWithoutCompletedByInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => ChecklistCompleteWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteUpdateWithoutCompletedByInputSchema), import_zod.z.lazy(() => ChecklistCompleteUncheckedUpdateWithoutCompletedByInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteCreateWithoutCompletedByInputSchema), import_zod.z.lazy(() => ChecklistCompleteUncheckedCreateWithoutCompletedByInputSchema)])
}).strict();
var ChecklistCompleteUpdateWithWhereUniqueWithoutCompletedByInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => ChecklistCompleteWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteUpdateWithoutCompletedByInputSchema), import_zod.z.lazy(() => ChecklistCompleteUncheckedUpdateWithoutCompletedByInputSchema)])
}).strict();
var ChecklistCompleteUpdateManyWithWhereWithoutCompletedByInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => ChecklistCompleteScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => ChecklistCompleteUpdateManyMutationInputSchema), import_zod.z.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutCompletedByInputSchema)])
}).strict();
var CustomerFeedbackUpsertWithWhereUniqueWithoutRespondedByInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackUpdateWithoutRespondedByInputSchema), import_zod.z.lazy(() => CustomerFeedbackUncheckedUpdateWithoutRespondedByInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackCreateWithoutRespondedByInputSchema), import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateWithoutRespondedByInputSchema)])
}).strict();
var CustomerFeedbackUpdateWithWhereUniqueWithoutRespondedByInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackUpdateWithoutRespondedByInputSchema), import_zod.z.lazy(() => CustomerFeedbackUncheckedUpdateWithoutRespondedByInputSchema)])
}).strict();
var CustomerFeedbackUpdateManyWithWhereWithoutRespondedByInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => CustomerFeedbackScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackUpdateManyMutationInputSchema), import_zod.z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRespondedByInputSchema)])
}).strict();
var RecipeVersionUpsertWithWhereUniqueWithoutCreatedByInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionUpdateWithoutCreatedByInputSchema), import_zod.z.lazy(() => RecipeVersionUncheckedUpdateWithoutCreatedByInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionCreateWithoutCreatedByInputSchema), import_zod.z.lazy(() => RecipeVersionUncheckedCreateWithoutCreatedByInputSchema)])
}).strict();
var RecipeVersionUpdateWithWhereUniqueWithoutCreatedByInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionUpdateWithoutCreatedByInputSchema), import_zod.z.lazy(() => RecipeVersionUncheckedUpdateWithoutCreatedByInputSchema)])
}).strict();
var RecipeVersionUpdateManyWithWhereWithoutCreatedByInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeVersionScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionUpdateManyMutationInputSchema), import_zod.z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutCreatedByInputSchema)])
}).strict();
var RecipeVersionScalarWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionScalarWhereInputSchema), import_zod.z.lazy(() => RecipeVersionScalarWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => RecipeVersionScalarWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionScalarWhereInputSchema), import_zod.z.lazy(() => RecipeVersionScalarWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  recipeId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  versionNumber: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  description: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  changes: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  isActive: import_zod.z.union([import_zod.z.lazy(() => BoolFilterSchema), import_zod.z.boolean()]).optional(),
  createdById: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  approvedById: import_zod.z.union([import_zod.z.lazy(() => IntNullableFilterSchema), import_zod.z.number()]).optional().nullable(),
  approvedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeNullableFilterSchema), import_zod.z.coerce.date()]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var RecipeVersionUpsertWithWhereUniqueWithoutApprovedByInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionUpdateWithoutApprovedByInputSchema), import_zod.z.lazy(() => RecipeVersionUncheckedUpdateWithoutApprovedByInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionCreateWithoutApprovedByInputSchema), import_zod.z.lazy(() => RecipeVersionUncheckedCreateWithoutApprovedByInputSchema)])
}).strict();
var RecipeVersionUpdateWithWhereUniqueWithoutApprovedByInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionUpdateWithoutApprovedByInputSchema), import_zod.z.lazy(() => RecipeVersionUncheckedUpdateWithoutApprovedByInputSchema)])
}).strict();
var RecipeVersionUpdateManyWithWhereWithoutApprovedByInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeVersionScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionUpdateManyMutationInputSchema), import_zod.z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutApprovedByInputSchema)])
}).strict();
var UserCreateWithoutSessionsInputSchema = import_zod.z.object({
  email: import_zod.z.string(),
  sub: import_zod.z.number().int().optional().nullable(),
  passwordHash: import_zod.z.string(),
  firstName: import_zod.z.string(),
  lastName: import_zod.z.string(),
  profileImage: import_zod.z.string().optional().nullable(),
  verified: import_zod.z.boolean().optional(),
  role: import_zod.z.lazy(() => UserRoleSchema),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  organization: import_zod.z.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantCreateNestedOneWithoutUsersInputSchema).optional(),
  shifts: import_zod.z.lazy(() => ShiftCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserUncheckedCreateWithoutSessionsInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  email: import_zod.z.string(),
  sub: import_zod.z.number().int().optional().nullable(),
  passwordHash: import_zod.z.string(),
  firstName: import_zod.z.string(),
  lastName: import_zod.z.string(),
  profileImage: import_zod.z.string().optional().nullable(),
  verified: import_zod.z.boolean().optional(),
  role: import_zod.z.lazy(() => UserRoleSchema),
  organizationId: import_zod.z.number().int().optional().nullable(),
  restaurantId: import_zod.z.number().int().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  shifts: import_zod.z.lazy(() => ShiftUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteUncheckedCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserCreateOrConnectWithoutSessionsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => UserWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutSessionsInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutSessionsInputSchema)])
}).strict();
var UserUpsertWithoutSessionsInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => UserUpdateWithoutSessionsInputSchema), import_zod.z.lazy(() => UserUncheckedUpdateWithoutSessionsInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutSessionsInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutSessionsInputSchema)]),
  where: import_zod.z.lazy(() => UserWhereInputSchema).optional()
}).strict();
var UserUpdateToOneWithWhereWithoutSessionsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => UserWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => UserUpdateWithoutSessionsInputSchema), import_zod.z.lazy(() => UserUncheckedUpdateWithoutSessionsInputSchema)])
}).strict();
var UserUpdateWithoutSessionsInputSchema = import_zod.z.object({
  email: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: import_zod.z.union([import_zod.z.lazy(() => UserRoleSchema), import_zod.z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  organization: import_zod.z.lazy(() => OrganizationUpdateOneWithoutUsersNestedInputSchema).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantUpdateOneWithoutUsersNestedInputSchema).optional(),
  shifts: import_zod.z.lazy(() => ShiftUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var UserUncheckedUpdateWithoutSessionsInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  email: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: import_zod.z.union([import_zod.z.lazy(() => UserRoleSchema), import_zod.z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  shifts: import_zod.z.lazy(() => ShiftUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemUncheckedUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var RecipeCreateWithoutCookBookInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.string().optional().nullable(),
  servings: import_zod.z.number().int(),
  cookTime: import_zod.z.number().int(),
  prepTime: import_zod.z.number().int(),
  frequency: import_zod.z.number().int().optional().nullable(),
  foodCost: import_zod.z.number().optional().nullable(),
  isDeleted: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  restaurant: import_zod.z.lazy(() => RestaurantCreateNestedOneWithoutRecipesInputSchema),
  ingredients: import_zod.z.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeCreateNestedManyWithoutRecipeInputSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionCreateNestedManyWithoutRecipesInputSchema).optional()
}).strict();
var RecipeUncheckedCreateWithoutCookBookInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.string().optional().nullable(),
  servings: import_zod.z.number().int(),
  cookTime: import_zod.z.number().int(),
  prepTime: import_zod.z.number().int(),
  frequency: import_zod.z.number().int().optional().nullable(),
  restaurantId: import_zod.z.number().int(),
  foodCost: import_zod.z.number().optional().nullable(),
  isDeleted: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutRecipesInputSchema).optional()
}).strict();
var RecipeCreateOrConnectWithoutCookBookInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutCookBookInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutCookBookInputSchema)])
}).strict();
var RecipeCreateManyCookBookInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateManyCookBookInputSchema), import_zod.z.lazy(() => RecipeCreateManyCookBookInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var RestaurantCreateWithoutCookbooksInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  imageUrl: import_zod.z.string().optional().nullable(),
  address: import_zod.z.string(),
  city: import_zod.z.string(),
  zipCode: import_zod.z.string(),
  state: import_zod.z.string(),
  owner: import_zod.z.string(),
  foodCost: import_zod.z.number().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  isDeleted: import_zod.z.boolean().optional(),
  deleted: import_zod.z.coerce.date().optional().nullable(),
  organization: import_zod.z.lazy(() => OrganizationCreateNestedOneWithoutRestaurantsInputSchema).optional(),
  users: import_zod.z.lazy(() => UserCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: import_zod.z.lazy(() => InventoryCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: import_zod.z.lazy(() => OrderCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: import_zod.z.lazy(() => MenuCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipment: import_zod.z.lazy(() => EquipmentCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklist: import_zod.z.lazy(() => QualityChecklistCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qustomerFeedback: import_zod.z.lazy(() => CustomerFeedbackCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();
var RestaurantUncheckedCreateWithoutCookbooksInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  imageUrl: import_zod.z.string().optional().nullable(),
  address: import_zod.z.string(),
  city: import_zod.z.string(),
  zipCode: import_zod.z.string(),
  state: import_zod.z.string(),
  owner: import_zod.z.string(),
  organizationId: import_zod.z.number().int().optional().nullable(),
  foodCost: import_zod.z.number().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  isDeleted: import_zod.z.boolean().optional(),
  deleted: import_zod.z.coerce.date().optional().nullable(),
  users: import_zod.z.lazy(() => UserUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: import_zod.z.lazy(() => InventoryUncheckedCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: import_zod.z.lazy(() => OrderUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: import_zod.z.lazy(() => MenuUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipment: import_zod.z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklist: import_zod.z.lazy(() => QualityChecklistUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qustomerFeedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();
var RestaurantCreateOrConnectWithoutCookbooksInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RestaurantWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => RestaurantCreateWithoutCookbooksInputSchema), import_zod.z.lazy(() => RestaurantUncheckedCreateWithoutCookbooksInputSchema)])
}).strict();
var RecipeUpsertWithWhereUniqueWithoutCookBookInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateWithoutCookBookInputSchema), import_zod.z.lazy(() => RecipeUncheckedUpdateWithoutCookBookInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutCookBookInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutCookBookInputSchema)])
}).strict();
var RecipeUpdateWithWhereUniqueWithoutCookBookInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateWithoutCookBookInputSchema), import_zod.z.lazy(() => RecipeUncheckedUpdateWithoutCookBookInputSchema)])
}).strict();
var RecipeUpdateManyWithWhereWithoutCookBookInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateManyMutationInputSchema), import_zod.z.lazy(() => RecipeUncheckedUpdateManyWithoutCookBookInputSchema)])
}).strict();
var RestaurantUpsertWithoutCookbooksInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => RestaurantUpdateWithoutCookbooksInputSchema), import_zod.z.lazy(() => RestaurantUncheckedUpdateWithoutCookbooksInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => RestaurantCreateWithoutCookbooksInputSchema), import_zod.z.lazy(() => RestaurantUncheckedCreateWithoutCookbooksInputSchema)]),
  where: import_zod.z.lazy(() => RestaurantWhereInputSchema).optional()
}).strict();
var RestaurantUpdateToOneWithWhereWithoutCookbooksInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RestaurantWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => RestaurantUpdateWithoutCookbooksInputSchema), import_zod.z.lazy(() => RestaurantUncheckedUpdateWithoutCookbooksInputSchema)])
}).strict();
var RestaurantUpdateWithoutCookbooksInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  address: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  city: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  zipCode: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  state: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  owner: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  deleted: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  organization: import_zod.z.lazy(() => OrganizationUpdateOneWithoutRestaurantsNestedInputSchema).optional(),
  users: import_zod.z.lazy(() => UserUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: import_zod.z.lazy(() => InventoryUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: import_zod.z.lazy(() => OrderUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: import_zod.z.lazy(() => MenuUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipment: import_zod.z.lazy(() => EquipmentUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklist: import_zod.z.lazy(() => QualityChecklistUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qustomerFeedback: import_zod.z.lazy(() => CustomerFeedbackUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();
var RestaurantUncheckedUpdateWithoutCookbooksInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  address: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  city: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  zipCode: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  state: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  owner: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  deleted: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  users: import_zod.z.lazy(() => UserUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: import_zod.z.lazy(() => InventoryUncheckedUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: import_zod.z.lazy(() => OrderUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: import_zod.z.lazy(() => MenuUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipment: import_zod.z.lazy(() => EquipmentUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklist: import_zod.z.lazy(() => QualityChecklistUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qustomerFeedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();
var RestaurantCreateWithoutRecipesInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  imageUrl: import_zod.z.string().optional().nullable(),
  address: import_zod.z.string(),
  city: import_zod.z.string(),
  zipCode: import_zod.z.string(),
  state: import_zod.z.string(),
  owner: import_zod.z.string(),
  foodCost: import_zod.z.number().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  isDeleted: import_zod.z.boolean().optional(),
  deleted: import_zod.z.coerce.date().optional().nullable(),
  organization: import_zod.z.lazy(() => OrganizationCreateNestedOneWithoutRestaurantsInputSchema).optional(),
  users: import_zod.z.lazy(() => UserCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: import_zod.z.lazy(() => CookBookCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: import_zod.z.lazy(() => InventoryCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: import_zod.z.lazy(() => OrderCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: import_zod.z.lazy(() => MenuCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipment: import_zod.z.lazy(() => EquipmentCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklist: import_zod.z.lazy(() => QualityChecklistCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qustomerFeedback: import_zod.z.lazy(() => CustomerFeedbackCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();
var RestaurantUncheckedCreateWithoutRecipesInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  imageUrl: import_zod.z.string().optional().nullable(),
  address: import_zod.z.string(),
  city: import_zod.z.string(),
  zipCode: import_zod.z.string(),
  state: import_zod.z.string(),
  owner: import_zod.z.string(),
  organizationId: import_zod.z.number().int().optional().nullable(),
  foodCost: import_zod.z.number().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  isDeleted: import_zod.z.boolean().optional(),
  deleted: import_zod.z.coerce.date().optional().nullable(),
  users: import_zod.z.lazy(() => UserUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: import_zod.z.lazy(() => CookBookUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: import_zod.z.lazy(() => InventoryUncheckedCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: import_zod.z.lazy(() => OrderUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: import_zod.z.lazy(() => MenuUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipment: import_zod.z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklist: import_zod.z.lazy(() => QualityChecklistUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qustomerFeedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();
var RestaurantCreateOrConnectWithoutRecipesInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RestaurantWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => RestaurantCreateWithoutRecipesInputSchema), import_zod.z.lazy(() => RestaurantUncheckedCreateWithoutRecipesInputSchema)])
}).strict();
var CookBookCreateWithoutRecipesInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  imageUrl: import_zod.z.string().optional().nullable(),
  category: import_zod.z.string(),
  restaurant: import_zod.z.lazy(() => RestaurantCreateNestedOneWithoutCookbooksInputSchema).optional()
}).strict();
var CookBookUncheckedCreateWithoutRecipesInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  imageUrl: import_zod.z.string().optional().nullable(),
  category: import_zod.z.string(),
  restaurantId: import_zod.z.number().int().optional().nullable()
}).strict();
var CookBookCreateOrConnectWithoutRecipesInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => CookBookWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => CookBookCreateWithoutRecipesInputSchema), import_zod.z.lazy(() => CookBookUncheckedCreateWithoutRecipesInputSchema)])
}).strict();
var RecipeIngredientCreateWithoutRecipeInputSchema = import_zod.z.object({
  quantity: import_zod.z.number(),
  unit: import_zod.z.string(),
  joinAt: import_zod.z.coerce.date().optional(),
  ingredient: import_zod.z.lazy(() => IngredientCreateNestedOneWithoutRecipeIngredientsInputSchema),
  RecipeVersion: import_zod.z.lazy(() => RecipeVersionCreateNestedOneWithoutIngredientsInputSchema).optional()
}).strict();
var RecipeIngredientUncheckedCreateWithoutRecipeInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  ingredientId: import_zod.z.number().int(),
  quantity: import_zod.z.number(),
  unit: import_zod.z.string(),
  joinAt: import_zod.z.coerce.date().optional(),
  recipeVersionId: import_zod.z.number().int().optional().nullable()
}).strict();
var RecipeIngredientCreateOrConnectWithoutRecipeInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeIngredientUncheckedCreateWithoutRecipeInputSchema)])
}).strict();
var RecipeIngredientCreateManyRecipeInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientCreateManyRecipeInputSchema), import_zod.z.lazy(() => RecipeIngredientCreateManyRecipeInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var RecipeInstructionCreateWithoutRecipeInputSchema = import_zod.z.object({
  stepNumber: import_zod.z.number().int(),
  instruction: import_zod.z.string(),
  imageUrl: import_zod.z.string().optional().nullable(),
  RecipeVersion: import_zod.z.lazy(() => RecipeVersionCreateNestedOneWithoutInstructionsInputSchema).optional()
}).strict();
var RecipeInstructionUncheckedCreateWithoutRecipeInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  stepNumber: import_zod.z.number().int(),
  instruction: import_zod.z.string(),
  imageUrl: import_zod.z.string().optional().nullable(),
  recipeVersionId: import_zod.z.number().int().optional().nullable()
}).strict();
var RecipeInstructionCreateOrConnectWithoutRecipeInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeInstructionWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeInstructionUncheckedCreateWithoutRecipeInputSchema)])
}).strict();
var RecipeInstructionCreateManyRecipeInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionCreateManyRecipeInputSchema), import_zod.z.lazy(() => RecipeInstructionCreateManyRecipeInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var MenuItemCreateWithoutRecipesInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  price: import_zod.z.number(),
  foodCost: import_zod.z.number(),
  recipeIds: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeIdsInputSchema), import_zod.z.number().int().array()]).optional(),
  recipeServingsAmount: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema), import_zod.z.number().array()]).optional(),
  recipeServingsCost: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeServingsCostInputSchema), import_zod.z.number().array()]).optional(),
  allergens: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateallergensInputSchema), import_zod.z.string().array()]).optional(),
  nutritionalInfoId: import_zod.z.number().int().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  nutritionalInfo: import_zod.z.lazy(() => NutritionalInfoCreateNestedOneWithoutMenuItemInputSchema).optional(),
  menu: import_zod.z.lazy(() => MenuCreateNestedOneWithoutMenuItemsInputSchema),
  menuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeCreateNestedManyWithoutMenuItemInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsCreateNestedManyWithoutMenuItemInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemCreateNestedManyWithoutMenuItemInputSchema).optional(),
  nutritionalRecommendation: import_zod.z.lazy(() => NutritionalRecommendationCreateNestedManyWithoutMenuItemInputSchema).optional(),
  category: import_zod.z.lazy(() => MenuCategoryCreateNestedOneWithoutMenuItemsInputSchema).optional(),
  feedback: import_zod.z.lazy(() => CustomerFeedbackCreateNestedManyWithoutMenuItemInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionCreateNestedManyWithoutMenuItemsInputSchema).optional()
}).strict();
var MenuItemUncheckedCreateWithoutRecipesInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  price: import_zod.z.number(),
  foodCost: import_zod.z.number(),
  recipeIds: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeIdsInputSchema), import_zod.z.number().int().array()]).optional(),
  recipeServingsAmount: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema), import_zod.z.number().array()]).optional(),
  recipeServingsCost: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeServingsCostInputSchema), import_zod.z.number().array()]).optional(),
  allergens: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateallergensInputSchema), import_zod.z.string().array()]).optional(),
  nutritionalInfoId: import_zod.z.number().int().optional().nullable(),
  menuId: import_zod.z.number().int(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  categoryId: import_zod.z.number().int().optional().nullable(),
  nutritionalInfo: import_zod.z.lazy(() => NutritionalInfoUncheckedCreateNestedOneWithoutMenuItemInputSchema).optional(),
  menuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  nutritionalRecommendation: import_zod.z.lazy(() => NutritionalRecommendationUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  feedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutMenuItemsInputSchema).optional()
}).strict();
var MenuItemCreateOrConnectWithoutRecipesInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateWithoutRecipesInputSchema), import_zod.z.lazy(() => MenuItemUncheckedCreateWithoutRecipesInputSchema)])
}).strict();
var FoodCostHistoryCreateWithoutRecipeInputSchema = import_zod.z.object({
  cost: import_zod.z.number(),
  date: import_zod.z.coerce.date(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var FoodCostHistoryUncheckedCreateWithoutRecipeInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  cost: import_zod.z.number(),
  date: import_zod.z.coerce.date(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var FoodCostHistoryCreateOrConnectWithoutRecipeInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => FoodCostHistoryWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => FoodCostHistoryCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => FoodCostHistoryUncheckedCreateWithoutRecipeInputSchema)])
}).strict();
var FoodCostHistoryCreateManyRecipeInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => FoodCostHistoryCreateManyRecipeInputSchema), import_zod.z.lazy(() => FoodCostHistoryCreateManyRecipeInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var PrepHistoryCreateWithoutRecipeInputSchema = import_zod.z.object({
  quantity: import_zod.z.number().int(),
  date: import_zod.z.coerce.date(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var PrepHistoryUncheckedCreateWithoutRecipeInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  quantity: import_zod.z.number().int(),
  date: import_zod.z.coerce.date(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var PrepHistoryCreateOrConnectWithoutRecipeInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => PrepHistoryWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => PrepHistoryCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => PrepHistoryUncheckedCreateWithoutRecipeInputSchema)])
}).strict();
var PrepHistoryCreateManyRecipeInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => PrepHistoryCreateManyRecipeInputSchema), import_zod.z.lazy(() => PrepHistoryCreateManyRecipeInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var PrepBoardCreateWithoutRecipesInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  status: import_zod.z.lazy(() => PrepStatusSchema),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  prepItems: import_zod.z.lazy(() => PrepItemCreateNestedManyWithoutPrepBoardInputSchema).optional()
}).strict();
var PrepBoardUncheckedCreateWithoutRecipesInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  status: import_zod.z.lazy(() => PrepStatusSchema),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutPrepBoardInputSchema).optional()
}).strict();
var PrepBoardCreateOrConnectWithoutRecipesInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => PrepBoardWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => PrepBoardCreateWithoutRecipesInputSchema), import_zod.z.lazy(() => PrepBoardUncheckedCreateWithoutRecipesInputSchema)])
}).strict();
var PrepItemCreateWithoutRecipeInputSchema = import_zod.z.object({
  quantity: import_zod.z.number().int(),
  status: import_zod.z.lazy(() => PrepStatusSchema),
  prepBoard: import_zod.z.lazy(() => PrepBoardCreateNestedOneWithoutPrepItemsInputSchema),
  assignedTo: import_zod.z.lazy(() => UserCreateNestedOneWithoutPrepItemsInputSchema)
}).strict();
var PrepItemUncheckedCreateWithoutRecipeInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  prepBoardId: import_zod.z.number().int(),
  quantity: import_zod.z.number().int(),
  status: import_zod.z.lazy(() => PrepStatusSchema),
  assignedToId: import_zod.z.number().int()
}).strict();
var PrepItemCreateOrConnectWithoutRecipeInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => PrepItemCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => PrepItemUncheckedCreateWithoutRecipeInputSchema)])
}).strict();
var PrepItemCreateManyRecipeInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => PrepItemCreateManyRecipeInputSchema), import_zod.z.lazy(() => PrepItemCreateManyRecipeInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var MenuItemRecipeCreateWithoutRecipeInputSchema = import_zod.z.object({
  joinAt: import_zod.z.coerce.date().optional(),
  menuItem: import_zod.z.lazy(() => MenuItemCreateNestedOneWithoutMenuItemRecipeInputSchema)
}).strict();
var MenuItemRecipeUncheckedCreateWithoutRecipeInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  menuItemId: import_zod.z.number().int(),
  joinAt: import_zod.z.coerce.date().optional()
}).strict();
var MenuItemRecipeCreateOrConnectWithoutRecipeInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => MenuItemRecipeWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => MenuItemRecipeUncheckedCreateWithoutRecipeInputSchema)])
}).strict();
var MenuItemRecipeCreateManyRecipeInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeCreateManyRecipeInputSchema), import_zod.z.lazy(() => MenuItemRecipeCreateManyRecipeInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var ProductionPlanItemCreateWithoutRecipeInputSchema = import_zod.z.object({
  quantity: import_zod.z.number().int(),
  unit: import_zod.z.string(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanCreateNestedOneWithoutItemsInputSchema),
  assignedTo: import_zod.z.lazy(() => UserCreateNestedOneWithoutProductionPlanItemInputSchema).optional()
}).strict();
var ProductionPlanItemUncheckedCreateWithoutRecipeInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  productionPlanId: import_zod.z.number().int(),
  quantity: import_zod.z.number().int(),
  unit: import_zod.z.string(),
  assignedToId: import_zod.z.number().int().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var ProductionPlanItemCreateOrConnectWithoutRecipeInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateWithoutRecipeInputSchema)])
}).strict();
var ProductionPlanItemCreateManyRecipeInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemCreateManyRecipeInputSchema), import_zod.z.lazy(() => ProductionPlanItemCreateManyRecipeInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var InventoryWithdrawalCreateWithoutRecipeInputSchema = import_zod.z.object({
  dateTime: import_zod.z.coerce.date(),
  quantity: import_zod.z.number(),
  unit: import_zod.z.string(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  inventoryItem: import_zod.z.lazy(() => InventoryItemCreateNestedOneWithoutInventoryWithdrawalInputSchema),
  createdBy: import_zod.z.lazy(() => UserCreateNestedOneWithoutInventoryWithdrawalInputSchema)
}).strict();
var InventoryWithdrawalUncheckedCreateWithoutRecipeInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  inventoryItemId: import_zod.z.number().int(),
  dateTime: import_zod.z.coerce.date(),
  quantity: import_zod.z.number(),
  unit: import_zod.z.string(),
  createdById: import_zod.z.number().int(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var InventoryWithdrawalCreateOrConnectWithoutRecipeInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateWithoutRecipeInputSchema)])
}).strict();
var InventoryWithdrawalCreateManyRecipeInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalCreateManyRecipeInputSchema), import_zod.z.lazy(() => InventoryWithdrawalCreateManyRecipeInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var RecipeTagCreateWithoutRecipesInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var RecipeTagUncheckedCreateWithoutRecipesInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var RecipeTagCreateOrConnectWithoutRecipesInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeTagWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeTagCreateWithoutRecipesInputSchema), import_zod.z.lazy(() => RecipeTagUncheckedCreateWithoutRecipesInputSchema)])
}).strict();
var RecipeVersionCreateWithoutRecipeInputSchema = import_zod.z.object({
  versionNumber: import_zod.z.number().int(),
  description: import_zod.z.string().optional().nullable(),
  changes: import_zod.z.string().optional().nullable(),
  isActive: import_zod.z.boolean().optional(),
  approvedAt: import_zod.z.coerce.date().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeVersionInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeVersionInputSchema).optional(),
  createdBy: import_zod.z.lazy(() => UserCreateNestedOneWithoutRecipeVersionsCreatedInputSchema),
  approvedBy: import_zod.z.lazy(() => UserCreateNestedOneWithoutRecipeVersionsApprovedInputSchema).optional()
}).strict();
var RecipeVersionUncheckedCreateWithoutRecipeInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  versionNumber: import_zod.z.number().int(),
  description: import_zod.z.string().optional().nullable(),
  changes: import_zod.z.string().optional().nullable(),
  isActive: import_zod.z.boolean().optional(),
  createdById: import_zod.z.number().int(),
  approvedById: import_zod.z.number().int().optional().nullable(),
  approvedAt: import_zod.z.coerce.date().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeVersionInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeVersionInputSchema).optional()
}).strict();
var RecipeVersionCreateOrConnectWithoutRecipeInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeVersionUncheckedCreateWithoutRecipeInputSchema)])
}).strict();
var RecipeVersionCreateManyRecipeInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionCreateManyRecipeInputSchema), import_zod.z.lazy(() => RecipeVersionCreateManyRecipeInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var RecipeEquipmentCreateWithoutRecipeInputSchema = import_zod.z.object({
  notes: import_zod.z.string().optional().nullable(),
  equipment: import_zod.z.lazy(() => EquipmentCreateNestedOneWithoutRecipesInputSchema)
}).strict();
var RecipeEquipmentUncheckedCreateWithoutRecipeInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  equipmentId: import_zod.z.number().int(),
  notes: import_zod.z.string().optional().nullable()
}).strict();
var RecipeEquipmentCreateOrConnectWithoutRecipeInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeEquipmentWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeEquipmentUncheckedCreateWithoutRecipeInputSchema)])
}).strict();
var RecipeEquipmentCreateManyRecipeInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentCreateManyRecipeInputSchema), import_zod.z.lazy(() => RecipeEquipmentCreateManyRecipeInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var DietaryRestrictionCreateWithoutRecipesInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  icon: import_zod.z.string().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  menuItems: import_zod.z.lazy(() => MenuItemCreateNestedManyWithoutDietaryRestrictionsInputSchema).optional(),
  ingredients: import_zod.z.lazy(() => IngredientCreateNestedManyWithoutDietaryRestrictionInputSchema).optional()
}).strict();
var DietaryRestrictionUncheckedCreateWithoutRecipesInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  icon: import_zod.z.string().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUncheckedCreateNestedManyWithoutDietaryRestrictionsInputSchema).optional(),
  ingredients: import_zod.z.lazy(() => IngredientUncheckedCreateNestedManyWithoutDietaryRestrictionInputSchema).optional()
}).strict();
var DietaryRestrictionCreateOrConnectWithoutRecipesInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => DietaryRestrictionWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionCreateWithoutRecipesInputSchema), import_zod.z.lazy(() => DietaryRestrictionUncheckedCreateWithoutRecipesInputSchema)])
}).strict();
var RestaurantUpsertWithoutRecipesInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => RestaurantUpdateWithoutRecipesInputSchema), import_zod.z.lazy(() => RestaurantUncheckedUpdateWithoutRecipesInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => RestaurantCreateWithoutRecipesInputSchema), import_zod.z.lazy(() => RestaurantUncheckedCreateWithoutRecipesInputSchema)]),
  where: import_zod.z.lazy(() => RestaurantWhereInputSchema).optional()
}).strict();
var RestaurantUpdateToOneWithWhereWithoutRecipesInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RestaurantWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => RestaurantUpdateWithoutRecipesInputSchema), import_zod.z.lazy(() => RestaurantUncheckedUpdateWithoutRecipesInputSchema)])
}).strict();
var RestaurantUpdateWithoutRecipesInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  address: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  city: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  zipCode: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  state: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  owner: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  deleted: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  organization: import_zod.z.lazy(() => OrganizationUpdateOneWithoutRestaurantsNestedInputSchema).optional(),
  users: import_zod.z.lazy(() => UserUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: import_zod.z.lazy(() => CookBookUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: import_zod.z.lazy(() => InventoryUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: import_zod.z.lazy(() => OrderUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: import_zod.z.lazy(() => MenuUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipment: import_zod.z.lazy(() => EquipmentUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklist: import_zod.z.lazy(() => QualityChecklistUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qustomerFeedback: import_zod.z.lazy(() => CustomerFeedbackUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();
var RestaurantUncheckedUpdateWithoutRecipesInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  address: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  city: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  zipCode: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  state: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  owner: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  deleted: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  users: import_zod.z.lazy(() => UserUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: import_zod.z.lazy(() => CookBookUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: import_zod.z.lazy(() => InventoryUncheckedUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: import_zod.z.lazy(() => OrderUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: import_zod.z.lazy(() => MenuUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipment: import_zod.z.lazy(() => EquipmentUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklist: import_zod.z.lazy(() => QualityChecklistUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qustomerFeedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();
var CookBookUpsertWithoutRecipesInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => CookBookUpdateWithoutRecipesInputSchema), import_zod.z.lazy(() => CookBookUncheckedUpdateWithoutRecipesInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => CookBookCreateWithoutRecipesInputSchema), import_zod.z.lazy(() => CookBookUncheckedCreateWithoutRecipesInputSchema)]),
  where: import_zod.z.lazy(() => CookBookWhereInputSchema).optional()
}).strict();
var CookBookUpdateToOneWithWhereWithoutRecipesInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => CookBookWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => CookBookUpdateWithoutRecipesInputSchema), import_zod.z.lazy(() => CookBookUncheckedUpdateWithoutRecipesInputSchema)])
}).strict();
var CookBookUpdateWithoutRecipesInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  category: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantUpdateOneWithoutCookbooksNestedInputSchema).optional()
}).strict();
var CookBookUncheckedUpdateWithoutRecipesInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  category: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var RecipeIngredientUpsertWithWhereUniqueWithoutRecipeInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientUpdateWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeIngredientUncheckedUpdateWithoutRecipeInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeIngredientUncheckedCreateWithoutRecipeInputSchema)])
}).strict();
var RecipeIngredientUpdateWithWhereUniqueWithoutRecipeInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientUpdateWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeIngredientUncheckedUpdateWithoutRecipeInputSchema)])
}).strict();
var RecipeIngredientUpdateManyWithWhereWithoutRecipeInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeIngredientScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientUpdateManyMutationInputSchema), import_zod.z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeInputSchema)])
}).strict();
var RecipeInstructionUpsertWithWhereUniqueWithoutRecipeInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeInstructionWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionUpdateWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeInstructionUncheckedUpdateWithoutRecipeInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeInstructionUncheckedCreateWithoutRecipeInputSchema)])
}).strict();
var RecipeInstructionUpdateWithWhereUniqueWithoutRecipeInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeInstructionWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionUpdateWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeInstructionUncheckedUpdateWithoutRecipeInputSchema)])
}).strict();
var RecipeInstructionUpdateManyWithWhereWithoutRecipeInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeInstructionScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => RecipeInstructionUpdateManyMutationInputSchema), import_zod.z.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeInputSchema)])
}).strict();
var MenuItemUpsertWithWhereUniqueWithoutRecipesInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateWithoutRecipesInputSchema), import_zod.z.lazy(() => MenuItemUncheckedUpdateWithoutRecipesInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateWithoutRecipesInputSchema), import_zod.z.lazy(() => MenuItemUncheckedCreateWithoutRecipesInputSchema)])
}).strict();
var MenuItemUpdateWithWhereUniqueWithoutRecipesInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateWithoutRecipesInputSchema), import_zod.z.lazy(() => MenuItemUncheckedUpdateWithoutRecipesInputSchema)])
}).strict();
var MenuItemUpdateManyWithWhereWithoutRecipesInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => MenuItemScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateManyMutationInputSchema), import_zod.z.lazy(() => MenuItemUncheckedUpdateManyWithoutRecipesInputSchema)])
}).strict();
var FoodCostHistoryUpsertWithWhereUniqueWithoutRecipeInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => FoodCostHistoryWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => FoodCostHistoryUpdateWithoutRecipeInputSchema), import_zod.z.lazy(() => FoodCostHistoryUncheckedUpdateWithoutRecipeInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => FoodCostHistoryCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => FoodCostHistoryUncheckedCreateWithoutRecipeInputSchema)])
}).strict();
var FoodCostHistoryUpdateWithWhereUniqueWithoutRecipeInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => FoodCostHistoryWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => FoodCostHistoryUpdateWithoutRecipeInputSchema), import_zod.z.lazy(() => FoodCostHistoryUncheckedUpdateWithoutRecipeInputSchema)])
}).strict();
var FoodCostHistoryUpdateManyWithWhereWithoutRecipeInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => FoodCostHistoryScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => FoodCostHistoryUpdateManyMutationInputSchema), import_zod.z.lazy(() => FoodCostHistoryUncheckedUpdateManyWithoutRecipeInputSchema)])
}).strict();
var FoodCostHistoryScalarWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => FoodCostHistoryScalarWhereInputSchema), import_zod.z.lazy(() => FoodCostHistoryScalarWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => FoodCostHistoryScalarWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => FoodCostHistoryScalarWhereInputSchema), import_zod.z.lazy(() => FoodCostHistoryScalarWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  recipeId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  cost: import_zod.z.union([import_zod.z.lazy(() => FloatFilterSchema), import_zod.z.number()]).optional(),
  date: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var PrepHistoryUpsertWithWhereUniqueWithoutRecipeInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => PrepHistoryWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => PrepHistoryUpdateWithoutRecipeInputSchema), import_zod.z.lazy(() => PrepHistoryUncheckedUpdateWithoutRecipeInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => PrepHistoryCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => PrepHistoryUncheckedCreateWithoutRecipeInputSchema)])
}).strict();
var PrepHistoryUpdateWithWhereUniqueWithoutRecipeInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => PrepHistoryWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => PrepHistoryUpdateWithoutRecipeInputSchema), import_zod.z.lazy(() => PrepHistoryUncheckedUpdateWithoutRecipeInputSchema)])
}).strict();
var PrepHistoryUpdateManyWithWhereWithoutRecipeInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => PrepHistoryScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => PrepHistoryUpdateManyMutationInputSchema), import_zod.z.lazy(() => PrepHistoryUncheckedUpdateManyWithoutRecipeInputSchema)])
}).strict();
var PrepHistoryScalarWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => PrepHistoryScalarWhereInputSchema), import_zod.z.lazy(() => PrepHistoryScalarWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => PrepHistoryScalarWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => PrepHistoryScalarWhereInputSchema), import_zod.z.lazy(() => PrepHistoryScalarWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  recipeId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  quantity: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  date: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var PrepBoardUpsertWithWhereUniqueWithoutRecipesInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => PrepBoardWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => PrepBoardUpdateWithoutRecipesInputSchema), import_zod.z.lazy(() => PrepBoardUncheckedUpdateWithoutRecipesInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => PrepBoardCreateWithoutRecipesInputSchema), import_zod.z.lazy(() => PrepBoardUncheckedCreateWithoutRecipesInputSchema)])
}).strict();
var PrepBoardUpdateWithWhereUniqueWithoutRecipesInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => PrepBoardWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => PrepBoardUpdateWithoutRecipesInputSchema), import_zod.z.lazy(() => PrepBoardUncheckedUpdateWithoutRecipesInputSchema)])
}).strict();
var PrepBoardUpdateManyWithWhereWithoutRecipesInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => PrepBoardScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => PrepBoardUpdateManyMutationInputSchema), import_zod.z.lazy(() => PrepBoardUncheckedUpdateManyWithoutRecipesInputSchema)])
}).strict();
var PrepBoardScalarWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => PrepBoardScalarWhereInputSchema), import_zod.z.lazy(() => PrepBoardScalarWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => PrepBoardScalarWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => PrepBoardScalarWhereInputSchema), import_zod.z.lazy(() => PrepBoardScalarWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  name: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => EnumPrepStatusFilterSchema), import_zod.z.lazy(() => PrepStatusSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var PrepItemUpsertWithWhereUniqueWithoutRecipeInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => PrepItemUpdateWithoutRecipeInputSchema), import_zod.z.lazy(() => PrepItemUncheckedUpdateWithoutRecipeInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => PrepItemCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => PrepItemUncheckedCreateWithoutRecipeInputSchema)])
}).strict();
var PrepItemUpdateWithWhereUniqueWithoutRecipeInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => PrepItemUpdateWithoutRecipeInputSchema), import_zod.z.lazy(() => PrepItemUncheckedUpdateWithoutRecipeInputSchema)])
}).strict();
var PrepItemUpdateManyWithWhereWithoutRecipeInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => PrepItemScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => PrepItemUpdateManyMutationInputSchema), import_zod.z.lazy(() => PrepItemUncheckedUpdateManyWithoutRecipeInputSchema)])
}).strict();
var MenuItemRecipeUpsertWithWhereUniqueWithoutRecipeInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => MenuItemRecipeWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeUpdateWithoutRecipeInputSchema), import_zod.z.lazy(() => MenuItemRecipeUncheckedUpdateWithoutRecipeInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => MenuItemRecipeUncheckedCreateWithoutRecipeInputSchema)])
}).strict();
var MenuItemRecipeUpdateWithWhereUniqueWithoutRecipeInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => MenuItemRecipeWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeUpdateWithoutRecipeInputSchema), import_zod.z.lazy(() => MenuItemRecipeUncheckedUpdateWithoutRecipeInputSchema)])
}).strict();
var MenuItemRecipeUpdateManyWithWhereWithoutRecipeInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => MenuItemRecipeScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeUpdateManyMutationInputSchema), import_zod.z.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutRecipeInputSchema)])
}).strict();
var MenuItemRecipeScalarWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeScalarWhereInputSchema), import_zod.z.lazy(() => MenuItemRecipeScalarWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => MenuItemRecipeScalarWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeScalarWhereInputSchema), import_zod.z.lazy(() => MenuItemRecipeScalarWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  menuItemId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  recipeId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  joinAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var ProductionPlanItemUpsertWithWhereUniqueWithoutRecipeInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemUpdateWithoutRecipeInputSchema), import_zod.z.lazy(() => ProductionPlanItemUncheckedUpdateWithoutRecipeInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateWithoutRecipeInputSchema)])
}).strict();
var ProductionPlanItemUpdateWithWhereUniqueWithoutRecipeInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => ProductionPlanItemWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemUpdateWithoutRecipeInputSchema), import_zod.z.lazy(() => ProductionPlanItemUncheckedUpdateWithoutRecipeInputSchema)])
}).strict();
var ProductionPlanItemUpdateManyWithWhereWithoutRecipeInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => ProductionPlanItemScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => ProductionPlanItemUpdateManyMutationInputSchema), import_zod.z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutRecipeInputSchema)])
}).strict();
var InventoryWithdrawalUpsertWithWhereUniqueWithoutRecipeInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalUpdateWithoutRecipeInputSchema), import_zod.z.lazy(() => InventoryWithdrawalUncheckedUpdateWithoutRecipeInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateWithoutRecipeInputSchema)])
}).strict();
var InventoryWithdrawalUpdateWithWhereUniqueWithoutRecipeInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalUpdateWithoutRecipeInputSchema), import_zod.z.lazy(() => InventoryWithdrawalUncheckedUpdateWithoutRecipeInputSchema)])
}).strict();
var InventoryWithdrawalUpdateManyWithWhereWithoutRecipeInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => InventoryWithdrawalScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalUpdateManyMutationInputSchema), import_zod.z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutRecipeInputSchema)])
}).strict();
var RecipeTagUpsertWithWhereUniqueWithoutRecipesInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeTagWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeTagUpdateWithoutRecipesInputSchema), import_zod.z.lazy(() => RecipeTagUncheckedUpdateWithoutRecipesInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeTagCreateWithoutRecipesInputSchema), import_zod.z.lazy(() => RecipeTagUncheckedCreateWithoutRecipesInputSchema)])
}).strict();
var RecipeTagUpdateWithWhereUniqueWithoutRecipesInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeTagWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => RecipeTagUpdateWithoutRecipesInputSchema), import_zod.z.lazy(() => RecipeTagUncheckedUpdateWithoutRecipesInputSchema)])
}).strict();
var RecipeTagUpdateManyWithWhereWithoutRecipesInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeTagScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => RecipeTagUpdateManyMutationInputSchema), import_zod.z.lazy(() => RecipeTagUncheckedUpdateManyWithoutRecipesInputSchema)])
}).strict();
var RecipeTagScalarWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => RecipeTagScalarWhereInputSchema), import_zod.z.lazy(() => RecipeTagScalarWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => RecipeTagScalarWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => RecipeTagScalarWhereInputSchema), import_zod.z.lazy(() => RecipeTagScalarWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  name: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  description: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var RecipeVersionUpsertWithWhereUniqueWithoutRecipeInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionUpdateWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeVersionUncheckedUpdateWithoutRecipeInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeVersionUncheckedCreateWithoutRecipeInputSchema)])
}).strict();
var RecipeVersionUpdateWithWhereUniqueWithoutRecipeInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionUpdateWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeVersionUncheckedUpdateWithoutRecipeInputSchema)])
}).strict();
var RecipeVersionUpdateManyWithWhereWithoutRecipeInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeVersionScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionUpdateManyMutationInputSchema), import_zod.z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutRecipeInputSchema)])
}).strict();
var RecipeEquipmentUpsertWithWhereUniqueWithoutRecipeInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeEquipmentWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentUpdateWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeEquipmentUncheckedUpdateWithoutRecipeInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentCreateWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeEquipmentUncheckedCreateWithoutRecipeInputSchema)])
}).strict();
var RecipeEquipmentUpdateWithWhereUniqueWithoutRecipeInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeEquipmentWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentUpdateWithoutRecipeInputSchema), import_zod.z.lazy(() => RecipeEquipmentUncheckedUpdateWithoutRecipeInputSchema)])
}).strict();
var RecipeEquipmentUpdateManyWithWhereWithoutRecipeInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeEquipmentScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => RecipeEquipmentUpdateManyMutationInputSchema), import_zod.z.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutRecipeInputSchema)])
}).strict();
var DietaryRestrictionUpsertWithWhereUniqueWithoutRecipesInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => DietaryRestrictionWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionUpdateWithoutRecipesInputSchema), import_zod.z.lazy(() => DietaryRestrictionUncheckedUpdateWithoutRecipesInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionCreateWithoutRecipesInputSchema), import_zod.z.lazy(() => DietaryRestrictionUncheckedCreateWithoutRecipesInputSchema)])
}).strict();
var DietaryRestrictionUpdateWithWhereUniqueWithoutRecipesInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => DietaryRestrictionWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionUpdateWithoutRecipesInputSchema), import_zod.z.lazy(() => DietaryRestrictionUncheckedUpdateWithoutRecipesInputSchema)])
}).strict();
var DietaryRestrictionUpdateManyWithWhereWithoutRecipesInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => DietaryRestrictionScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionUpdateManyMutationInputSchema), import_zod.z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutRecipesInputSchema)])
}).strict();
var DietaryRestrictionScalarWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionScalarWhereInputSchema), import_zod.z.lazy(() => DietaryRestrictionScalarWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => DietaryRestrictionScalarWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionScalarWhereInputSchema), import_zod.z.lazy(() => DietaryRestrictionScalarWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  name: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  description: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  icon: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var RecipeIngredientCreateWithoutIngredientInputSchema = import_zod.z.object({
  quantity: import_zod.z.number(),
  unit: import_zod.z.string(),
  joinAt: import_zod.z.coerce.date().optional(),
  recipe: import_zod.z.lazy(() => RecipeCreateNestedOneWithoutIngredientsInputSchema),
  RecipeVersion: import_zod.z.lazy(() => RecipeVersionCreateNestedOneWithoutIngredientsInputSchema).optional()
}).strict();
var RecipeIngredientUncheckedCreateWithoutIngredientInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  recipeId: import_zod.z.number().int(),
  quantity: import_zod.z.number(),
  unit: import_zod.z.string(),
  joinAt: import_zod.z.coerce.date().optional(),
  recipeVersionId: import_zod.z.number().int().optional().nullable()
}).strict();
var RecipeIngredientCreateOrConnectWithoutIngredientInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientCreateWithoutIngredientInputSchema), import_zod.z.lazy(() => RecipeIngredientUncheckedCreateWithoutIngredientInputSchema)])
}).strict();
var RecipeIngredientCreateManyIngredientInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientCreateManyIngredientInputSchema), import_zod.z.lazy(() => RecipeIngredientCreateManyIngredientInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var InventoryItemCreateWithoutIngredientInputSchema = import_zod.z.object({
  quantity: import_zod.z.number(),
  unit: import_zod.z.string(),
  minQuantity: import_zod.z.number(),
  restockThreshold: import_zod.z.number(),
  lastUpdated: import_zod.z.coerce.date().optional(),
  inventory: import_zod.z.lazy(() => InventoryCreateNestedOneWithoutItemsInputSchema),
  lastUpdatedBy: import_zod.z.lazy(() => UserCreateNestedOneWithoutInventoryUpdatesInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutInventoryItemInputSchema).optional()
}).strict();
var InventoryItemUncheckedCreateWithoutIngredientInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  inventoryId: import_zod.z.number().int(),
  quantity: import_zod.z.number(),
  unit: import_zod.z.string(),
  minQuantity: import_zod.z.number(),
  restockThreshold: import_zod.z.number(),
  lastUpdatedById: import_zod.z.number().int().optional().nullable(),
  lastUpdated: import_zod.z.coerce.date().optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutInventoryItemInputSchema).optional()
}).strict();
var InventoryItemCreateOrConnectWithoutIngredientInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => InventoryItemCreateWithoutIngredientInputSchema), import_zod.z.lazy(() => InventoryItemUncheckedCreateWithoutIngredientInputSchema)])
}).strict();
var InventoryItemCreateManyIngredientInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => InventoryItemCreateManyIngredientInputSchema), import_zod.z.lazy(() => InventoryItemCreateManyIngredientInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var OrderItemCreateWithoutIngredientInputSchema = import_zod.z.object({
  quantity: import_zod.z.number(),
  unit: import_zod.z.string(),
  price: import_zod.z.number(),
  order: import_zod.z.lazy(() => OrderCreateNestedOneWithoutItemsInputSchema)
}).strict();
var OrderItemUncheckedCreateWithoutIngredientInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  orderId: import_zod.z.number().int(),
  quantity: import_zod.z.number(),
  unit: import_zod.z.string(),
  price: import_zod.z.number()
}).strict();
var OrderItemCreateOrConnectWithoutIngredientInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => OrderItemWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => OrderItemCreateWithoutIngredientInputSchema), import_zod.z.lazy(() => OrderItemUncheckedCreateWithoutIngredientInputSchema)])
}).strict();
var OrderItemCreateManyIngredientInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => OrderItemCreateManyIngredientInputSchema), import_zod.z.lazy(() => OrderItemCreateManyIngredientInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var VendorCreateWithoutIngredientsInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  contact: import_zod.z.string(),
  email: import_zod.z.string(),
  phone: import_zod.z.string(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  orders: import_zod.z.lazy(() => OrderCreateNestedManyWithoutVendorInputSchema).optional(),
  supplierPriceHistory: import_zod.z.lazy(() => SupplierPriceHistoryCreateNestedManyWithoutVendorInputSchema).optional()
}).strict();
var VendorUncheckedCreateWithoutIngredientsInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  contact: import_zod.z.string(),
  email: import_zod.z.string(),
  phone: import_zod.z.string(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  orders: import_zod.z.lazy(() => OrderUncheckedCreateNestedManyWithoutVendorInputSchema).optional(),
  supplierPriceHistory: import_zod.z.lazy(() => SupplierPriceHistoryUncheckedCreateNestedManyWithoutVendorInputSchema).optional()
}).strict();
var VendorCreateOrConnectWithoutIngredientsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => VendorWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => VendorCreateWithoutIngredientsInputSchema), import_zod.z.lazy(() => VendorUncheckedCreateWithoutIngredientsInputSchema)])
}).strict();
var WasteRecordCreateWithoutIngredienteInputSchema = import_zod.z.object({
  date: import_zod.z.coerce.date(),
  quantity: import_zod.z.number(),
  unit: import_zod.z.string(),
  reason: import_zod.z.string(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  restaurant: import_zod.z.lazy(() => RestaurantCreateNestedOneWithoutWasteRecordInputSchema),
  recordedBy: import_zod.z.lazy(() => UserCreateNestedOneWithoutWasteRecordInputSchema)
}).strict();
var WasteRecordUncheckedCreateWithoutIngredienteInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  restaurantId: import_zod.z.number().int(),
  date: import_zod.z.coerce.date(),
  quantity: import_zod.z.number(),
  unit: import_zod.z.string(),
  reason: import_zod.z.string(),
  recordedById: import_zod.z.number().int(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var WasteRecordCreateOrConnectWithoutIngredienteInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => WasteRecordCreateWithoutIngredienteInputSchema), import_zod.z.lazy(() => WasteRecordUncheckedCreateWithoutIngredienteInputSchema)])
}).strict();
var WasteRecordCreateManyIngredienteInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => WasteRecordCreateManyIngredienteInputSchema), import_zod.z.lazy(() => WasteRecordCreateManyIngredienteInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var IngredientAllergenCreateWithoutIngredientInputSchema = import_zod.z.object({
  allergen: import_zod.z.lazy(() => AllergenCreateNestedOneWithoutIngredientsInputSchema)
}).strict();
var IngredientAllergenUncheckedCreateWithoutIngredientInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  allergenId: import_zod.z.number().int()
}).strict();
var IngredientAllergenCreateOrConnectWithoutIngredientInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => IngredientAllergenWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenCreateWithoutIngredientInputSchema), import_zod.z.lazy(() => IngredientAllergenUncheckedCreateWithoutIngredientInputSchema)])
}).strict();
var IngredientAllergenCreateManyIngredientInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenCreateManyIngredientInputSchema), import_zod.z.lazy(() => IngredientAllergenCreateManyIngredientInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var SupplierPriceHistoryCreateWithoutIngredientInputSchema = import_zod.z.object({
  price: import_zod.z.number(),
  unit: import_zod.z.string(),
  startDate: import_zod.z.coerce.date(),
  endDate: import_zod.z.coerce.date().optional().nullable(),
  notes: import_zod.z.string().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  vendor: import_zod.z.lazy(() => VendorCreateNestedOneWithoutSupplierPriceHistoryInputSchema)
}).strict();
var SupplierPriceHistoryUncheckedCreateWithoutIngredientInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  vendorId: import_zod.z.number().int(),
  price: import_zod.z.number(),
  unit: import_zod.z.string(),
  startDate: import_zod.z.coerce.date(),
  endDate: import_zod.z.coerce.date().optional().nullable(),
  notes: import_zod.z.string().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var SupplierPriceHistoryCreateOrConnectWithoutIngredientInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryCreateWithoutIngredientInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryUncheckedCreateWithoutIngredientInputSchema)])
}).strict();
var SupplierPriceHistoryCreateManyIngredientInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryCreateManyIngredientInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryCreateManyIngredientInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var DietaryRestrictionCreateWithoutIngredientsInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  icon: import_zod.z.string().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  menuItems: import_zod.z.lazy(() => MenuItemCreateNestedManyWithoutDietaryRestrictionsInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeCreateNestedManyWithoutDietaryRestrictionsInputSchema).optional()
}).strict();
var DietaryRestrictionUncheckedCreateWithoutIngredientsInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  icon: import_zod.z.string().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUncheckedCreateNestedManyWithoutDietaryRestrictionsInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUncheckedCreateNestedManyWithoutDietaryRestrictionsInputSchema).optional()
}).strict();
var DietaryRestrictionCreateOrConnectWithoutIngredientsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => DietaryRestrictionWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionCreateWithoutIngredientsInputSchema), import_zod.z.lazy(() => DietaryRestrictionUncheckedCreateWithoutIngredientsInputSchema)])
}).strict();
var RecipeIngredientUpsertWithWhereUniqueWithoutIngredientInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientUpdateWithoutIngredientInputSchema), import_zod.z.lazy(() => RecipeIngredientUncheckedUpdateWithoutIngredientInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientCreateWithoutIngredientInputSchema), import_zod.z.lazy(() => RecipeIngredientUncheckedCreateWithoutIngredientInputSchema)])
}).strict();
var RecipeIngredientUpdateWithWhereUniqueWithoutIngredientInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeIngredientWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientUpdateWithoutIngredientInputSchema), import_zod.z.lazy(() => RecipeIngredientUncheckedUpdateWithoutIngredientInputSchema)])
}).strict();
var RecipeIngredientUpdateManyWithWhereWithoutIngredientInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeIngredientScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => RecipeIngredientUpdateManyMutationInputSchema), import_zod.z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutIngredientInputSchema)])
}).strict();
var InventoryItemUpsertWithWhereUniqueWithoutIngredientInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => InventoryItemUpdateWithoutIngredientInputSchema), import_zod.z.lazy(() => InventoryItemUncheckedUpdateWithoutIngredientInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => InventoryItemCreateWithoutIngredientInputSchema), import_zod.z.lazy(() => InventoryItemUncheckedCreateWithoutIngredientInputSchema)])
}).strict();
var InventoryItemUpdateWithWhereUniqueWithoutIngredientInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => InventoryItemUpdateWithoutIngredientInputSchema), import_zod.z.lazy(() => InventoryItemUncheckedUpdateWithoutIngredientInputSchema)])
}).strict();
var InventoryItemUpdateManyWithWhereWithoutIngredientInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => InventoryItemScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => InventoryItemUpdateManyMutationInputSchema), import_zod.z.lazy(() => InventoryItemUncheckedUpdateManyWithoutIngredientInputSchema)])
}).strict();
var OrderItemUpsertWithWhereUniqueWithoutIngredientInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => OrderItemWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => OrderItemUpdateWithoutIngredientInputSchema), import_zod.z.lazy(() => OrderItemUncheckedUpdateWithoutIngredientInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => OrderItemCreateWithoutIngredientInputSchema), import_zod.z.lazy(() => OrderItemUncheckedCreateWithoutIngredientInputSchema)])
}).strict();
var OrderItemUpdateWithWhereUniqueWithoutIngredientInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => OrderItemWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => OrderItemUpdateWithoutIngredientInputSchema), import_zod.z.lazy(() => OrderItemUncheckedUpdateWithoutIngredientInputSchema)])
}).strict();
var OrderItemUpdateManyWithWhereWithoutIngredientInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => OrderItemScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => OrderItemUpdateManyMutationInputSchema), import_zod.z.lazy(() => OrderItemUncheckedUpdateManyWithoutIngredientInputSchema)])
}).strict();
var OrderItemScalarWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => OrderItemScalarWhereInputSchema), import_zod.z.lazy(() => OrderItemScalarWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => OrderItemScalarWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => OrderItemScalarWhereInputSchema), import_zod.z.lazy(() => OrderItemScalarWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  orderId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  ingredientId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  quantity: import_zod.z.union([import_zod.z.lazy(() => FloatFilterSchema), import_zod.z.number()]).optional(),
  unit: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  price: import_zod.z.union([import_zod.z.lazy(() => FloatFilterSchema), import_zod.z.number()]).optional()
}).strict();
var VendorUpsertWithWhereUniqueWithoutIngredientsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => VendorWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => VendorUpdateWithoutIngredientsInputSchema), import_zod.z.lazy(() => VendorUncheckedUpdateWithoutIngredientsInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => VendorCreateWithoutIngredientsInputSchema), import_zod.z.lazy(() => VendorUncheckedCreateWithoutIngredientsInputSchema)])
}).strict();
var VendorUpdateWithWhereUniqueWithoutIngredientsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => VendorWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => VendorUpdateWithoutIngredientsInputSchema), import_zod.z.lazy(() => VendorUncheckedUpdateWithoutIngredientsInputSchema)])
}).strict();
var VendorUpdateManyWithWhereWithoutIngredientsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => VendorScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => VendorUpdateManyMutationInputSchema), import_zod.z.lazy(() => VendorUncheckedUpdateManyWithoutIngredientsInputSchema)])
}).strict();
var VendorScalarWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => VendorScalarWhereInputSchema), import_zod.z.lazy(() => VendorScalarWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => VendorScalarWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => VendorScalarWhereInputSchema), import_zod.z.lazy(() => VendorScalarWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  name: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  contact: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  email: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  phone: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var WasteRecordUpsertWithWhereUniqueWithoutIngredienteInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => WasteRecordUpdateWithoutIngredienteInputSchema), import_zod.z.lazy(() => WasteRecordUncheckedUpdateWithoutIngredienteInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => WasteRecordCreateWithoutIngredienteInputSchema), import_zod.z.lazy(() => WasteRecordUncheckedCreateWithoutIngredienteInputSchema)])
}).strict();
var WasteRecordUpdateWithWhereUniqueWithoutIngredienteInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => WasteRecordWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => WasteRecordUpdateWithoutIngredienteInputSchema), import_zod.z.lazy(() => WasteRecordUncheckedUpdateWithoutIngredienteInputSchema)])
}).strict();
var WasteRecordUpdateManyWithWhereWithoutIngredienteInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => WasteRecordScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => WasteRecordUpdateManyMutationInputSchema), import_zod.z.lazy(() => WasteRecordUncheckedUpdateManyWithoutIngredienteInputSchema)])
}).strict();
var IngredientAllergenUpsertWithWhereUniqueWithoutIngredientInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => IngredientAllergenWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenUpdateWithoutIngredientInputSchema), import_zod.z.lazy(() => IngredientAllergenUncheckedUpdateWithoutIngredientInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenCreateWithoutIngredientInputSchema), import_zod.z.lazy(() => IngredientAllergenUncheckedCreateWithoutIngredientInputSchema)])
}).strict();
var IngredientAllergenUpdateWithWhereUniqueWithoutIngredientInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => IngredientAllergenWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenUpdateWithoutIngredientInputSchema), import_zod.z.lazy(() => IngredientAllergenUncheckedUpdateWithoutIngredientInputSchema)])
}).strict();
var IngredientAllergenUpdateManyWithWhereWithoutIngredientInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => IngredientAllergenScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => IngredientAllergenUpdateManyMutationInputSchema), import_zod.z.lazy(() => IngredientAllergenUncheckedUpdateManyWithoutIngredientInputSchema)])
}).strict();
var SupplierPriceHistoryUpsertWithWhereUniqueWithoutIngredientInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryUpdateWithoutIngredientInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryUncheckedUpdateWithoutIngredientInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryCreateWithoutIngredientInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryUncheckedCreateWithoutIngredientInputSchema)])
}).strict();
var SupplierPriceHistoryUpdateWithWhereUniqueWithoutIngredientInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryUpdateWithoutIngredientInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryUncheckedUpdateWithoutIngredientInputSchema)])
}).strict();
var SupplierPriceHistoryUpdateManyWithWhereWithoutIngredientInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => SupplierPriceHistoryScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryUpdateManyMutationInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryUncheckedUpdateManyWithoutIngredientInputSchema)])
}).strict();
var SupplierPriceHistoryScalarWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryScalarWhereInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryScalarWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => SupplierPriceHistoryScalarWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryScalarWhereInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryScalarWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  vendorId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  ingredientId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  price: import_zod.z.union([import_zod.z.lazy(() => FloatFilterSchema), import_zod.z.number()]).optional(),
  unit: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  startDate: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  endDate: import_zod.z.union([import_zod.z.lazy(() => DateTimeNullableFilterSchema), import_zod.z.coerce.date()]).optional().nullable(),
  notes: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var DietaryRestrictionUpsertWithoutIngredientsInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionUpdateWithoutIngredientsInputSchema), import_zod.z.lazy(() => DietaryRestrictionUncheckedUpdateWithoutIngredientsInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionCreateWithoutIngredientsInputSchema), import_zod.z.lazy(() => DietaryRestrictionUncheckedCreateWithoutIngredientsInputSchema)]),
  where: import_zod.z.lazy(() => DietaryRestrictionWhereInputSchema).optional()
}).strict();
var DietaryRestrictionUpdateToOneWithWhereWithoutIngredientsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => DietaryRestrictionWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionUpdateWithoutIngredientsInputSchema), import_zod.z.lazy(() => DietaryRestrictionUncheckedUpdateWithoutIngredientsInputSchema)])
}).strict();
var DietaryRestrictionUpdateWithoutIngredientsInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  icon: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUpdateManyWithoutDietaryRestrictionsNestedInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUpdateManyWithoutDietaryRestrictionsNestedInputSchema).optional()
}).strict();
var DietaryRestrictionUncheckedUpdateWithoutIngredientsInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  icon: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUncheckedUpdateManyWithoutDietaryRestrictionsNestedInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUncheckedUpdateManyWithoutDietaryRestrictionsNestedInputSchema).optional()
}).strict();
var RecipeCreateWithoutIngredientsInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.string().optional().nullable(),
  servings: import_zod.z.number().int(),
  cookTime: import_zod.z.number().int(),
  prepTime: import_zod.z.number().int(),
  frequency: import_zod.z.number().int().optional().nullable(),
  foodCost: import_zod.z.number().optional().nullable(),
  isDeleted: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  restaurant: import_zod.z.lazy(() => RestaurantCreateNestedOneWithoutRecipesInputSchema),
  cookBook: import_zod.z.lazy(() => CookBookCreateNestedOneWithoutRecipesInputSchema),
  instructions: import_zod.z.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeCreateNestedManyWithoutRecipeInputSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionCreateNestedManyWithoutRecipesInputSchema).optional()
}).strict();
var RecipeUncheckedCreateWithoutIngredientsInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.string().optional().nullable(),
  servings: import_zod.z.number().int(),
  cookTime: import_zod.z.number().int(),
  prepTime: import_zod.z.number().int(),
  frequency: import_zod.z.number().int().optional().nullable(),
  restaurantId: import_zod.z.number().int(),
  cookBookId: import_zod.z.number().int(),
  foodCost: import_zod.z.number().optional().nullable(),
  isDeleted: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutRecipesInputSchema).optional()
}).strict();
var RecipeCreateOrConnectWithoutIngredientsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutIngredientsInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutIngredientsInputSchema)])
}).strict();
var IngredientCreateWithoutRecipeIngredientsInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  category: import_zod.z.string(),
  price: import_zod.z.number(),
  inventoryItems: import_zod.z.lazy(() => InventoryItemCreateNestedManyWithoutIngredientInputSchema).optional(),
  orderItems: import_zod.z.lazy(() => OrderItemCreateNestedManyWithoutIngredientInputSchema).optional(),
  vendors: import_zod.z.lazy(() => VendorCreateNestedManyWithoutIngredientsInputSchema).optional(),
  WasteRecord: import_zod.z.lazy(() => WasteRecordCreateNestedManyWithoutIngredienteInputSchema).optional(),
  IngredientAllergen: import_zod.z.lazy(() => IngredientAllergenCreateNestedManyWithoutIngredientInputSchema).optional(),
  SupplierPriceHistory: import_zod.z.lazy(() => SupplierPriceHistoryCreateNestedManyWithoutIngredientInputSchema).optional(),
  DietaryRestriction: import_zod.z.lazy(() => DietaryRestrictionCreateNestedOneWithoutIngredientsInputSchema).optional()
}).strict();
var IngredientUncheckedCreateWithoutRecipeIngredientsInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  category: import_zod.z.string(),
  price: import_zod.z.number(),
  dietaryRestrictionId: import_zod.z.number().int().optional().nullable(),
  inventoryItems: import_zod.z.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  orderItems: import_zod.z.lazy(() => OrderItemUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  vendors: import_zod.z.lazy(() => VendorUncheckedCreateNestedManyWithoutIngredientsInputSchema).optional(),
  WasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutIngredienteInputSchema).optional(),
  IngredientAllergen: import_zod.z.lazy(() => IngredientAllergenUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  SupplierPriceHistory: import_zod.z.lazy(() => SupplierPriceHistoryUncheckedCreateNestedManyWithoutIngredientInputSchema).optional()
}).strict();
var IngredientCreateOrConnectWithoutRecipeIngredientsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => IngredientWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => IngredientCreateWithoutRecipeIngredientsInputSchema), import_zod.z.lazy(() => IngredientUncheckedCreateWithoutRecipeIngredientsInputSchema)])
}).strict();
var RecipeVersionCreateWithoutIngredientsInputSchema = import_zod.z.object({
  versionNumber: import_zod.z.number().int(),
  description: import_zod.z.string().optional().nullable(),
  changes: import_zod.z.string().optional().nullable(),
  isActive: import_zod.z.boolean().optional(),
  approvedAt: import_zod.z.coerce.date().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  recipe: import_zod.z.lazy(() => RecipeCreateNestedOneWithoutVersionsInputSchema),
  instructions: import_zod.z.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeVersionInputSchema).optional(),
  createdBy: import_zod.z.lazy(() => UserCreateNestedOneWithoutRecipeVersionsCreatedInputSchema),
  approvedBy: import_zod.z.lazy(() => UserCreateNestedOneWithoutRecipeVersionsApprovedInputSchema).optional()
}).strict();
var RecipeVersionUncheckedCreateWithoutIngredientsInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  recipeId: import_zod.z.number().int(),
  versionNumber: import_zod.z.number().int(),
  description: import_zod.z.string().optional().nullable(),
  changes: import_zod.z.string().optional().nullable(),
  isActive: import_zod.z.boolean().optional(),
  createdById: import_zod.z.number().int(),
  approvedById: import_zod.z.number().int().optional().nullable(),
  approvedAt: import_zod.z.coerce.date().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeVersionInputSchema).optional()
}).strict();
var RecipeVersionCreateOrConnectWithoutIngredientsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionCreateWithoutIngredientsInputSchema), import_zod.z.lazy(() => RecipeVersionUncheckedCreateWithoutIngredientsInputSchema)])
}).strict();
var RecipeUpsertWithoutIngredientsInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateWithoutIngredientsInputSchema), import_zod.z.lazy(() => RecipeUncheckedUpdateWithoutIngredientsInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutIngredientsInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutIngredientsInputSchema)]),
  where: import_zod.z.lazy(() => RecipeWhereInputSchema).optional()
}).strict();
var RecipeUpdateToOneWithWhereWithoutIngredientsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateWithoutIngredientsInputSchema), import_zod.z.lazy(() => RecipeUncheckedUpdateWithoutIngredientsInputSchema)])
}).strict();
var RecipeUpdateWithoutIngredientsInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  cookBook: import_zod.z.lazy(() => CookBookUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUpdateManyWithoutRecipeNestedInputSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUpdateManyWithoutRecipesNestedInputSchema).optional()
}).strict();
var RecipeUncheckedUpdateWithoutIngredientsInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookBookId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional()
}).strict();
var IngredientUpsertWithoutRecipeIngredientsInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => IngredientUpdateWithoutRecipeIngredientsInputSchema), import_zod.z.lazy(() => IngredientUncheckedUpdateWithoutRecipeIngredientsInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => IngredientCreateWithoutRecipeIngredientsInputSchema), import_zod.z.lazy(() => IngredientUncheckedCreateWithoutRecipeIngredientsInputSchema)]),
  where: import_zod.z.lazy(() => IngredientWhereInputSchema).optional()
}).strict();
var IngredientUpdateToOneWithWhereWithoutRecipeIngredientsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => IngredientWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => IngredientUpdateWithoutRecipeIngredientsInputSchema), import_zod.z.lazy(() => IngredientUncheckedUpdateWithoutRecipeIngredientsInputSchema)])
}).strict();
var IngredientUpdateWithoutRecipeIngredientsInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  category: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  inventoryItems: import_zod.z.lazy(() => InventoryItemUpdateManyWithoutIngredientNestedInputSchema).optional(),
  orderItems: import_zod.z.lazy(() => OrderItemUpdateManyWithoutIngredientNestedInputSchema).optional(),
  vendors: import_zod.z.lazy(() => VendorUpdateManyWithoutIngredientsNestedInputSchema).optional(),
  WasteRecord: import_zod.z.lazy(() => WasteRecordUpdateManyWithoutIngredienteNestedInputSchema).optional(),
  IngredientAllergen: import_zod.z.lazy(() => IngredientAllergenUpdateManyWithoutIngredientNestedInputSchema).optional(),
  SupplierPriceHistory: import_zod.z.lazy(() => SupplierPriceHistoryUpdateManyWithoutIngredientNestedInputSchema).optional(),
  DietaryRestriction: import_zod.z.lazy(() => DietaryRestrictionUpdateOneWithoutIngredientsNestedInputSchema).optional()
}).strict();
var IngredientUncheckedUpdateWithoutRecipeIngredientsInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  category: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  dietaryRestrictionId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  inventoryItems: import_zod.z.lazy(() => InventoryItemUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  orderItems: import_zod.z.lazy(() => OrderItemUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  vendors: import_zod.z.lazy(() => VendorUncheckedUpdateManyWithoutIngredientsNestedInputSchema).optional(),
  WasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedUpdateManyWithoutIngredienteNestedInputSchema).optional(),
  IngredientAllergen: import_zod.z.lazy(() => IngredientAllergenUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  SupplierPriceHistory: import_zod.z.lazy(() => SupplierPriceHistoryUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional()
}).strict();
var RecipeVersionUpsertWithoutIngredientsInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionUpdateWithoutIngredientsInputSchema), import_zod.z.lazy(() => RecipeVersionUncheckedUpdateWithoutIngredientsInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionCreateWithoutIngredientsInputSchema), import_zod.z.lazy(() => RecipeVersionUncheckedCreateWithoutIngredientsInputSchema)]),
  where: import_zod.z.lazy(() => RecipeVersionWhereInputSchema).optional()
}).strict();
var RecipeVersionUpdateToOneWithWhereWithoutIngredientsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeVersionWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionUpdateWithoutIngredientsInputSchema), import_zod.z.lazy(() => RecipeVersionUncheckedUpdateWithoutIngredientsInputSchema)])
}).strict();
var RecipeVersionUpdateWithoutIngredientsInputSchema = import_zod.z.object({
  versionNumber: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  changes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isActive: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  approvedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  recipe: import_zod.z.lazy(() => RecipeUpdateOneRequiredWithoutVersionsNestedInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionUpdateManyWithoutRecipeVersionNestedInputSchema).optional(),
  createdBy: import_zod.z.lazy(() => UserUpdateOneRequiredWithoutRecipeVersionsCreatedNestedInputSchema).optional(),
  approvedBy: import_zod.z.lazy(() => UserUpdateOneWithoutRecipeVersionsApprovedNestedInputSchema).optional()
}).strict();
var RecipeVersionUncheckedUpdateWithoutIngredientsInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  versionNumber: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  changes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isActive: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdById: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  approvedById: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  approvedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeVersionNestedInputSchema).optional()
}).strict();
var RecipeCreateWithoutInstructionsInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.string().optional().nullable(),
  servings: import_zod.z.number().int(),
  cookTime: import_zod.z.number().int(),
  prepTime: import_zod.z.number().int(),
  frequency: import_zod.z.number().int().optional().nullable(),
  foodCost: import_zod.z.number().optional().nullable(),
  isDeleted: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  restaurant: import_zod.z.lazy(() => RestaurantCreateNestedOneWithoutRecipesInputSchema),
  cookBook: import_zod.z.lazy(() => CookBookCreateNestedOneWithoutRecipesInputSchema),
  ingredients: import_zod.z.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeCreateNestedManyWithoutRecipeInputSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionCreateNestedManyWithoutRecipesInputSchema).optional()
}).strict();
var RecipeUncheckedCreateWithoutInstructionsInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.string().optional().nullable(),
  servings: import_zod.z.number().int(),
  cookTime: import_zod.z.number().int(),
  prepTime: import_zod.z.number().int(),
  frequency: import_zod.z.number().int().optional().nullable(),
  restaurantId: import_zod.z.number().int(),
  cookBookId: import_zod.z.number().int(),
  foodCost: import_zod.z.number().optional().nullable(),
  isDeleted: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutRecipesInputSchema).optional()
}).strict();
var RecipeCreateOrConnectWithoutInstructionsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutInstructionsInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutInstructionsInputSchema)])
}).strict();
var RecipeVersionCreateWithoutInstructionsInputSchema = import_zod.z.object({
  versionNumber: import_zod.z.number().int(),
  description: import_zod.z.string().optional().nullable(),
  changes: import_zod.z.string().optional().nullable(),
  isActive: import_zod.z.boolean().optional(),
  approvedAt: import_zod.z.coerce.date().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  recipe: import_zod.z.lazy(() => RecipeCreateNestedOneWithoutVersionsInputSchema),
  ingredients: import_zod.z.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeVersionInputSchema).optional(),
  createdBy: import_zod.z.lazy(() => UserCreateNestedOneWithoutRecipeVersionsCreatedInputSchema),
  approvedBy: import_zod.z.lazy(() => UserCreateNestedOneWithoutRecipeVersionsApprovedInputSchema).optional()
}).strict();
var RecipeVersionUncheckedCreateWithoutInstructionsInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  recipeId: import_zod.z.number().int(),
  versionNumber: import_zod.z.number().int(),
  description: import_zod.z.string().optional().nullable(),
  changes: import_zod.z.string().optional().nullable(),
  isActive: import_zod.z.boolean().optional(),
  createdById: import_zod.z.number().int(),
  approvedById: import_zod.z.number().int().optional().nullable(),
  approvedAt: import_zod.z.coerce.date().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeVersionInputSchema).optional()
}).strict();
var RecipeVersionCreateOrConnectWithoutInstructionsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeVersionWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionCreateWithoutInstructionsInputSchema), import_zod.z.lazy(() => RecipeVersionUncheckedCreateWithoutInstructionsInputSchema)])
}).strict();
var RecipeUpsertWithoutInstructionsInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateWithoutInstructionsInputSchema), import_zod.z.lazy(() => RecipeUncheckedUpdateWithoutInstructionsInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutInstructionsInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutInstructionsInputSchema)]),
  where: import_zod.z.lazy(() => RecipeWhereInputSchema).optional()
}).strict();
var RecipeUpdateToOneWithWhereWithoutInstructionsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateWithoutInstructionsInputSchema), import_zod.z.lazy(() => RecipeUncheckedUpdateWithoutInstructionsInputSchema)])
}).strict();
var RecipeUpdateWithoutInstructionsInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  cookBook: import_zod.z.lazy(() => CookBookUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUpdateManyWithoutRecipeNestedInputSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUpdateManyWithoutRecipesNestedInputSchema).optional()
}).strict();
var RecipeUncheckedUpdateWithoutInstructionsInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookBookId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional()
}).strict();
var RecipeVersionUpsertWithoutInstructionsInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionUpdateWithoutInstructionsInputSchema), import_zod.z.lazy(() => RecipeVersionUncheckedUpdateWithoutInstructionsInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionCreateWithoutInstructionsInputSchema), import_zod.z.lazy(() => RecipeVersionUncheckedCreateWithoutInstructionsInputSchema)]),
  where: import_zod.z.lazy(() => RecipeVersionWhereInputSchema).optional()
}).strict();
var RecipeVersionUpdateToOneWithWhereWithoutInstructionsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeVersionWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => RecipeVersionUpdateWithoutInstructionsInputSchema), import_zod.z.lazy(() => RecipeVersionUncheckedUpdateWithoutInstructionsInputSchema)])
}).strict();
var RecipeVersionUpdateWithoutInstructionsInputSchema = import_zod.z.object({
  versionNumber: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  changes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isActive: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  approvedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  recipe: import_zod.z.lazy(() => RecipeUpdateOneRequiredWithoutVersionsNestedInputSchema).optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientUpdateManyWithoutRecipeVersionNestedInputSchema).optional(),
  createdBy: import_zod.z.lazy(() => UserUpdateOneRequiredWithoutRecipeVersionsCreatedNestedInputSchema).optional(),
  approvedBy: import_zod.z.lazy(() => UserUpdateOneWithoutRecipeVersionsApprovedNestedInputSchema).optional()
}).strict();
var RecipeVersionUncheckedUpdateWithoutInstructionsInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  versionNumber: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  changes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isActive: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdById: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  approvedById: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  approvedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeVersionNestedInputSchema).optional()
}).strict();
var RestaurantCreateWithoutInventoryInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  imageUrl: import_zod.z.string().optional().nullable(),
  address: import_zod.z.string(),
  city: import_zod.z.string(),
  zipCode: import_zod.z.string(),
  state: import_zod.z.string(),
  owner: import_zod.z.string(),
  foodCost: import_zod.z.number().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  isDeleted: import_zod.z.boolean().optional(),
  deleted: import_zod.z.coerce.date().optional().nullable(),
  organization: import_zod.z.lazy(() => OrganizationCreateNestedOneWithoutRestaurantsInputSchema).optional(),
  users: import_zod.z.lazy(() => UserCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: import_zod.z.lazy(() => CookBookCreateNestedManyWithoutRestaurantInputSchema).optional(),
  orders: import_zod.z.lazy(() => OrderCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: import_zod.z.lazy(() => MenuCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipment: import_zod.z.lazy(() => EquipmentCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklist: import_zod.z.lazy(() => QualityChecklistCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qustomerFeedback: import_zod.z.lazy(() => CustomerFeedbackCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();
var RestaurantUncheckedCreateWithoutInventoryInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  imageUrl: import_zod.z.string().optional().nullable(),
  address: import_zod.z.string(),
  city: import_zod.z.string(),
  zipCode: import_zod.z.string(),
  state: import_zod.z.string(),
  owner: import_zod.z.string(),
  organizationId: import_zod.z.number().int().optional().nullable(),
  foodCost: import_zod.z.number().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  isDeleted: import_zod.z.boolean().optional(),
  deleted: import_zod.z.coerce.date().optional().nullable(),
  users: import_zod.z.lazy(() => UserUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: import_zod.z.lazy(() => CookBookUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  orders: import_zod.z.lazy(() => OrderUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: import_zod.z.lazy(() => MenuUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipment: import_zod.z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklist: import_zod.z.lazy(() => QualityChecklistUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qustomerFeedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();
var RestaurantCreateOrConnectWithoutInventoryInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RestaurantWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => RestaurantCreateWithoutInventoryInputSchema), import_zod.z.lazy(() => RestaurantUncheckedCreateWithoutInventoryInputSchema)])
}).strict();
var InventoryItemCreateWithoutInventoryInputSchema = import_zod.z.object({
  quantity: import_zod.z.number(),
  unit: import_zod.z.string(),
  minQuantity: import_zod.z.number(),
  restockThreshold: import_zod.z.number(),
  lastUpdated: import_zod.z.coerce.date().optional(),
  ingredient: import_zod.z.lazy(() => IngredientCreateNestedOneWithoutInventoryItemsInputSchema),
  lastUpdatedBy: import_zod.z.lazy(() => UserCreateNestedOneWithoutInventoryUpdatesInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutInventoryItemInputSchema).optional()
}).strict();
var InventoryItemUncheckedCreateWithoutInventoryInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  ingredientId: import_zod.z.number().int(),
  quantity: import_zod.z.number(),
  unit: import_zod.z.string(),
  minQuantity: import_zod.z.number(),
  restockThreshold: import_zod.z.number(),
  lastUpdatedById: import_zod.z.number().int().optional().nullable(),
  lastUpdated: import_zod.z.coerce.date().optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutInventoryItemInputSchema).optional()
}).strict();
var InventoryItemCreateOrConnectWithoutInventoryInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => InventoryItemCreateWithoutInventoryInputSchema), import_zod.z.lazy(() => InventoryItemUncheckedCreateWithoutInventoryInputSchema)])
}).strict();
var InventoryItemCreateManyInventoryInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => InventoryItemCreateManyInventoryInputSchema), import_zod.z.lazy(() => InventoryItemCreateManyInventoryInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var RestaurantUpsertWithoutInventoryInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => RestaurantUpdateWithoutInventoryInputSchema), import_zod.z.lazy(() => RestaurantUncheckedUpdateWithoutInventoryInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => RestaurantCreateWithoutInventoryInputSchema), import_zod.z.lazy(() => RestaurantUncheckedCreateWithoutInventoryInputSchema)]),
  where: import_zod.z.lazy(() => RestaurantWhereInputSchema).optional()
}).strict();
var RestaurantUpdateToOneWithWhereWithoutInventoryInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RestaurantWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => RestaurantUpdateWithoutInventoryInputSchema), import_zod.z.lazy(() => RestaurantUncheckedUpdateWithoutInventoryInputSchema)])
}).strict();
var RestaurantUpdateWithoutInventoryInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  address: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  city: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  zipCode: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  state: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  owner: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  deleted: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  organization: import_zod.z.lazy(() => OrganizationUpdateOneWithoutRestaurantsNestedInputSchema).optional(),
  users: import_zod.z.lazy(() => UserUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: import_zod.z.lazy(() => CookBookUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  orders: import_zod.z.lazy(() => OrderUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: import_zod.z.lazy(() => MenuUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipment: import_zod.z.lazy(() => EquipmentUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklist: import_zod.z.lazy(() => QualityChecklistUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qustomerFeedback: import_zod.z.lazy(() => CustomerFeedbackUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();
var RestaurantUncheckedUpdateWithoutInventoryInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  address: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  city: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  zipCode: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  state: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  owner: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  deleted: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  users: import_zod.z.lazy(() => UserUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: import_zod.z.lazy(() => CookBookUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  orders: import_zod.z.lazy(() => OrderUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: import_zod.z.lazy(() => MenuUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipment: import_zod.z.lazy(() => EquipmentUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklist: import_zod.z.lazy(() => QualityChecklistUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qustomerFeedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();
var InventoryItemUpsertWithWhereUniqueWithoutInventoryInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => InventoryItemUpdateWithoutInventoryInputSchema), import_zod.z.lazy(() => InventoryItemUncheckedUpdateWithoutInventoryInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => InventoryItemCreateWithoutInventoryInputSchema), import_zod.z.lazy(() => InventoryItemUncheckedCreateWithoutInventoryInputSchema)])
}).strict();
var InventoryItemUpdateWithWhereUniqueWithoutInventoryInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => InventoryItemWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => InventoryItemUpdateWithoutInventoryInputSchema), import_zod.z.lazy(() => InventoryItemUncheckedUpdateWithoutInventoryInputSchema)])
}).strict();
var InventoryItemUpdateManyWithWhereWithoutInventoryInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => InventoryItemScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => InventoryItemUpdateManyMutationInputSchema), import_zod.z.lazy(() => InventoryItemUncheckedUpdateManyWithoutInventoryInputSchema)])
}).strict();
var InventoryCreateWithoutItemsInputSchema = import_zod.z.object({
  restaurant: import_zod.z.lazy(() => RestaurantCreateNestedOneWithoutInventoryInputSchema)
}).strict();
var InventoryUncheckedCreateWithoutItemsInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  restaurantId: import_zod.z.number().int()
}).strict();
var InventoryCreateOrConnectWithoutItemsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => InventoryWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => InventoryCreateWithoutItemsInputSchema), import_zod.z.lazy(() => InventoryUncheckedCreateWithoutItemsInputSchema)])
}).strict();
var IngredientCreateWithoutInventoryItemsInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  category: import_zod.z.string(),
  price: import_zod.z.number(),
  recipeIngredients: import_zod.z.lazy(() => RecipeIngredientCreateNestedManyWithoutIngredientInputSchema).optional(),
  orderItems: import_zod.z.lazy(() => OrderItemCreateNestedManyWithoutIngredientInputSchema).optional(),
  vendors: import_zod.z.lazy(() => VendorCreateNestedManyWithoutIngredientsInputSchema).optional(),
  WasteRecord: import_zod.z.lazy(() => WasteRecordCreateNestedManyWithoutIngredienteInputSchema).optional(),
  IngredientAllergen: import_zod.z.lazy(() => IngredientAllergenCreateNestedManyWithoutIngredientInputSchema).optional(),
  SupplierPriceHistory: import_zod.z.lazy(() => SupplierPriceHistoryCreateNestedManyWithoutIngredientInputSchema).optional(),
  DietaryRestriction: import_zod.z.lazy(() => DietaryRestrictionCreateNestedOneWithoutIngredientsInputSchema).optional()
}).strict();
var IngredientUncheckedCreateWithoutInventoryItemsInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  category: import_zod.z.string(),
  price: import_zod.z.number(),
  dietaryRestrictionId: import_zod.z.number().int().optional().nullable(),
  recipeIngredients: import_zod.z.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  orderItems: import_zod.z.lazy(() => OrderItemUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  vendors: import_zod.z.lazy(() => VendorUncheckedCreateNestedManyWithoutIngredientsInputSchema).optional(),
  WasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutIngredienteInputSchema).optional(),
  IngredientAllergen: import_zod.z.lazy(() => IngredientAllergenUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  SupplierPriceHistory: import_zod.z.lazy(() => SupplierPriceHistoryUncheckedCreateNestedManyWithoutIngredientInputSchema).optional()
}).strict();
var IngredientCreateOrConnectWithoutInventoryItemsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => IngredientWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => IngredientCreateWithoutInventoryItemsInputSchema), import_zod.z.lazy(() => IngredientUncheckedCreateWithoutInventoryItemsInputSchema)])
}).strict();
var UserCreateWithoutInventoryUpdatesInputSchema = import_zod.z.object({
  email: import_zod.z.string(),
  sub: import_zod.z.number().int().optional().nullable(),
  passwordHash: import_zod.z.string(),
  firstName: import_zod.z.string(),
  lastName: import_zod.z.string(),
  profileImage: import_zod.z.string().optional().nullable(),
  verified: import_zod.z.boolean().optional(),
  role: import_zod.z.lazy(() => UserRoleSchema),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  organization: import_zod.z.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantCreateNestedOneWithoutUsersInputSchema).optional(),
  shifts: import_zod.z.lazy(() => ShiftCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserUncheckedCreateWithoutInventoryUpdatesInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  email: import_zod.z.string(),
  sub: import_zod.z.number().int().optional().nullable(),
  passwordHash: import_zod.z.string(),
  firstName: import_zod.z.string(),
  lastName: import_zod.z.string(),
  profileImage: import_zod.z.string().optional().nullable(),
  verified: import_zod.z.boolean().optional(),
  role: import_zod.z.lazy(() => UserRoleSchema),
  organizationId: import_zod.z.number().int().optional().nullable(),
  restaurantId: import_zod.z.number().int().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  shifts: import_zod.z.lazy(() => ShiftUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteUncheckedCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserCreateOrConnectWithoutInventoryUpdatesInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => UserWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutInventoryUpdatesInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutInventoryUpdatesInputSchema)])
}).strict();
var InventoryWithdrawalCreateWithoutInventoryItemInputSchema = import_zod.z.object({
  dateTime: import_zod.z.coerce.date(),
  quantity: import_zod.z.number(),
  unit: import_zod.z.string(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  recipe: import_zod.z.lazy(() => RecipeCreateNestedOneWithoutInventoryWithdrawalInputSchema).optional(),
  createdBy: import_zod.z.lazy(() => UserCreateNestedOneWithoutInventoryWithdrawalInputSchema)
}).strict();
var InventoryWithdrawalUncheckedCreateWithoutInventoryItemInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  dateTime: import_zod.z.coerce.date(),
  quantity: import_zod.z.number(),
  unit: import_zod.z.string(),
  recipeId: import_zod.z.number().int().optional().nullable(),
  createdById: import_zod.z.number().int(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var InventoryWithdrawalCreateOrConnectWithoutInventoryItemInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalCreateWithoutInventoryItemInputSchema), import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateWithoutInventoryItemInputSchema)])
}).strict();
var InventoryWithdrawalCreateManyInventoryItemInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalCreateManyInventoryItemInputSchema), import_zod.z.lazy(() => InventoryWithdrawalCreateManyInventoryItemInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var InventoryUpsertWithoutItemsInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => InventoryUpdateWithoutItemsInputSchema), import_zod.z.lazy(() => InventoryUncheckedUpdateWithoutItemsInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => InventoryCreateWithoutItemsInputSchema), import_zod.z.lazy(() => InventoryUncheckedCreateWithoutItemsInputSchema)]),
  where: import_zod.z.lazy(() => InventoryWhereInputSchema).optional()
}).strict();
var InventoryUpdateToOneWithWhereWithoutItemsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => InventoryWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => InventoryUpdateWithoutItemsInputSchema), import_zod.z.lazy(() => InventoryUncheckedUpdateWithoutItemsInputSchema)])
}).strict();
var InventoryUpdateWithoutItemsInputSchema = import_zod.z.object({
  restaurant: import_zod.z.lazy(() => RestaurantUpdateOneRequiredWithoutInventoryNestedInputSchema).optional()
}).strict();
var InventoryUncheckedUpdateWithoutItemsInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var IngredientUpsertWithoutInventoryItemsInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => IngredientUpdateWithoutInventoryItemsInputSchema), import_zod.z.lazy(() => IngredientUncheckedUpdateWithoutInventoryItemsInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => IngredientCreateWithoutInventoryItemsInputSchema), import_zod.z.lazy(() => IngredientUncheckedCreateWithoutInventoryItemsInputSchema)]),
  where: import_zod.z.lazy(() => IngredientWhereInputSchema).optional()
}).strict();
var IngredientUpdateToOneWithWhereWithoutInventoryItemsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => IngredientWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => IngredientUpdateWithoutInventoryItemsInputSchema), import_zod.z.lazy(() => IngredientUncheckedUpdateWithoutInventoryItemsInputSchema)])
}).strict();
var IngredientUpdateWithoutInventoryItemsInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  category: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIngredients: import_zod.z.lazy(() => RecipeIngredientUpdateManyWithoutIngredientNestedInputSchema).optional(),
  orderItems: import_zod.z.lazy(() => OrderItemUpdateManyWithoutIngredientNestedInputSchema).optional(),
  vendors: import_zod.z.lazy(() => VendorUpdateManyWithoutIngredientsNestedInputSchema).optional(),
  WasteRecord: import_zod.z.lazy(() => WasteRecordUpdateManyWithoutIngredienteNestedInputSchema).optional(),
  IngredientAllergen: import_zod.z.lazy(() => IngredientAllergenUpdateManyWithoutIngredientNestedInputSchema).optional(),
  SupplierPriceHistory: import_zod.z.lazy(() => SupplierPriceHistoryUpdateManyWithoutIngredientNestedInputSchema).optional(),
  DietaryRestriction: import_zod.z.lazy(() => DietaryRestrictionUpdateOneWithoutIngredientsNestedInputSchema).optional()
}).strict();
var IngredientUncheckedUpdateWithoutInventoryItemsInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  category: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  dietaryRestrictionId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  recipeIngredients: import_zod.z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  orderItems: import_zod.z.lazy(() => OrderItemUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  vendors: import_zod.z.lazy(() => VendorUncheckedUpdateManyWithoutIngredientsNestedInputSchema).optional(),
  WasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedUpdateManyWithoutIngredienteNestedInputSchema).optional(),
  IngredientAllergen: import_zod.z.lazy(() => IngredientAllergenUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  SupplierPriceHistory: import_zod.z.lazy(() => SupplierPriceHistoryUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional()
}).strict();
var UserUpsertWithoutInventoryUpdatesInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => UserUpdateWithoutInventoryUpdatesInputSchema), import_zod.z.lazy(() => UserUncheckedUpdateWithoutInventoryUpdatesInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutInventoryUpdatesInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutInventoryUpdatesInputSchema)]),
  where: import_zod.z.lazy(() => UserWhereInputSchema).optional()
}).strict();
var UserUpdateToOneWithWhereWithoutInventoryUpdatesInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => UserWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => UserUpdateWithoutInventoryUpdatesInputSchema), import_zod.z.lazy(() => UserUncheckedUpdateWithoutInventoryUpdatesInputSchema)])
}).strict();
var UserUpdateWithoutInventoryUpdatesInputSchema = import_zod.z.object({
  email: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: import_zod.z.union([import_zod.z.lazy(() => UserRoleSchema), import_zod.z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  organization: import_zod.z.lazy(() => OrganizationUpdateOneWithoutUsersNestedInputSchema).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantUpdateOneWithoutUsersNestedInputSchema).optional(),
  shifts: import_zod.z.lazy(() => ShiftUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var UserUncheckedUpdateWithoutInventoryUpdatesInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  email: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: import_zod.z.union([import_zod.z.lazy(() => UserRoleSchema), import_zod.z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  shifts: import_zod.z.lazy(() => ShiftUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var InventoryWithdrawalUpsertWithWhereUniqueWithoutInventoryItemInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalUpdateWithoutInventoryItemInputSchema), import_zod.z.lazy(() => InventoryWithdrawalUncheckedUpdateWithoutInventoryItemInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalCreateWithoutInventoryItemInputSchema), import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateWithoutInventoryItemInputSchema)])
}).strict();
var InventoryWithdrawalUpdateWithWhereUniqueWithoutInventoryItemInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => InventoryWithdrawalWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalUpdateWithoutInventoryItemInputSchema), import_zod.z.lazy(() => InventoryWithdrawalUncheckedUpdateWithoutInventoryItemInputSchema)])
}).strict();
var InventoryWithdrawalUpdateManyWithWhereWithoutInventoryItemInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => InventoryWithdrawalScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => InventoryWithdrawalUpdateManyMutationInputSchema), import_zod.z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutInventoryItemInputSchema)])
}).strict();
var RestaurantCreateWithoutOrdersInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  imageUrl: import_zod.z.string().optional().nullable(),
  address: import_zod.z.string(),
  city: import_zod.z.string(),
  zipCode: import_zod.z.string(),
  state: import_zod.z.string(),
  owner: import_zod.z.string(),
  foodCost: import_zod.z.number().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  isDeleted: import_zod.z.boolean().optional(),
  deleted: import_zod.z.coerce.date().optional().nullable(),
  organization: import_zod.z.lazy(() => OrganizationCreateNestedOneWithoutRestaurantsInputSchema).optional(),
  users: import_zod.z.lazy(() => UserCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: import_zod.z.lazy(() => CookBookCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: import_zod.z.lazy(() => InventoryCreateNestedOneWithoutRestaurantInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: import_zod.z.lazy(() => MenuCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipment: import_zod.z.lazy(() => EquipmentCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklist: import_zod.z.lazy(() => QualityChecklistCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qustomerFeedback: import_zod.z.lazy(() => CustomerFeedbackCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();
var RestaurantUncheckedCreateWithoutOrdersInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  imageUrl: import_zod.z.string().optional().nullable(),
  address: import_zod.z.string(),
  city: import_zod.z.string(),
  zipCode: import_zod.z.string(),
  state: import_zod.z.string(),
  owner: import_zod.z.string(),
  organizationId: import_zod.z.number().int().optional().nullable(),
  foodCost: import_zod.z.number().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  isDeleted: import_zod.z.boolean().optional(),
  deleted: import_zod.z.coerce.date().optional().nullable(),
  users: import_zod.z.lazy(() => UserUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: import_zod.z.lazy(() => CookBookUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: import_zod.z.lazy(() => InventoryUncheckedCreateNestedOneWithoutRestaurantInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  menus: import_zod.z.lazy(() => MenuUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipment: import_zod.z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklist: import_zod.z.lazy(() => QualityChecklistUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qustomerFeedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();
var RestaurantCreateOrConnectWithoutOrdersInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RestaurantWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => RestaurantCreateWithoutOrdersInputSchema), import_zod.z.lazy(() => RestaurantUncheckedCreateWithoutOrdersInputSchema)])
}).strict();
var VendorCreateWithoutOrdersInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  contact: import_zod.z.string(),
  email: import_zod.z.string(),
  phone: import_zod.z.string(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  ingredients: import_zod.z.lazy(() => IngredientCreateNestedManyWithoutVendorsInputSchema).optional(),
  supplierPriceHistory: import_zod.z.lazy(() => SupplierPriceHistoryCreateNestedManyWithoutVendorInputSchema).optional()
}).strict();
var VendorUncheckedCreateWithoutOrdersInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  contact: import_zod.z.string(),
  email: import_zod.z.string(),
  phone: import_zod.z.string(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  ingredients: import_zod.z.lazy(() => IngredientUncheckedCreateNestedManyWithoutVendorsInputSchema).optional(),
  supplierPriceHistory: import_zod.z.lazy(() => SupplierPriceHistoryUncheckedCreateNestedManyWithoutVendorInputSchema).optional()
}).strict();
var VendorCreateOrConnectWithoutOrdersInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => VendorWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => VendorCreateWithoutOrdersInputSchema), import_zod.z.lazy(() => VendorUncheckedCreateWithoutOrdersInputSchema)])
}).strict();
var OrderItemCreateWithoutOrderInputSchema = import_zod.z.object({
  quantity: import_zod.z.number(),
  unit: import_zod.z.string(),
  price: import_zod.z.number(),
  ingredient: import_zod.z.lazy(() => IngredientCreateNestedOneWithoutOrderItemsInputSchema)
}).strict();
var OrderItemUncheckedCreateWithoutOrderInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  ingredientId: import_zod.z.number().int(),
  quantity: import_zod.z.number(),
  unit: import_zod.z.string(),
  price: import_zod.z.number()
}).strict();
var OrderItemCreateOrConnectWithoutOrderInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => OrderItemWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => OrderItemCreateWithoutOrderInputSchema), import_zod.z.lazy(() => OrderItemUncheckedCreateWithoutOrderInputSchema)])
}).strict();
var OrderItemCreateManyOrderInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => OrderItemCreateManyOrderInputSchema), import_zod.z.lazy(() => OrderItemCreateManyOrderInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var RestaurantUpsertWithoutOrdersInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => RestaurantUpdateWithoutOrdersInputSchema), import_zod.z.lazy(() => RestaurantUncheckedUpdateWithoutOrdersInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => RestaurantCreateWithoutOrdersInputSchema), import_zod.z.lazy(() => RestaurantUncheckedCreateWithoutOrdersInputSchema)]),
  where: import_zod.z.lazy(() => RestaurantWhereInputSchema).optional()
}).strict();
var RestaurantUpdateToOneWithWhereWithoutOrdersInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RestaurantWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => RestaurantUpdateWithoutOrdersInputSchema), import_zod.z.lazy(() => RestaurantUncheckedUpdateWithoutOrdersInputSchema)])
}).strict();
var RestaurantUpdateWithoutOrdersInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  address: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  city: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  zipCode: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  state: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  owner: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  deleted: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  organization: import_zod.z.lazy(() => OrganizationUpdateOneWithoutRestaurantsNestedInputSchema).optional(),
  users: import_zod.z.lazy(() => UserUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: import_zod.z.lazy(() => CookBookUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: import_zod.z.lazy(() => InventoryUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: import_zod.z.lazy(() => MenuUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipment: import_zod.z.lazy(() => EquipmentUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklist: import_zod.z.lazy(() => QualityChecklistUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qustomerFeedback: import_zod.z.lazy(() => CustomerFeedbackUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();
var RestaurantUncheckedUpdateWithoutOrdersInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  address: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  city: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  zipCode: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  state: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  owner: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  deleted: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  users: import_zod.z.lazy(() => UserUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: import_zod.z.lazy(() => CookBookUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: import_zod.z.lazy(() => InventoryUncheckedUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: import_zod.z.lazy(() => MenuUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipment: import_zod.z.lazy(() => EquipmentUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklist: import_zod.z.lazy(() => QualityChecklistUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qustomerFeedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();
var VendorUpsertWithoutOrdersInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => VendorUpdateWithoutOrdersInputSchema), import_zod.z.lazy(() => VendorUncheckedUpdateWithoutOrdersInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => VendorCreateWithoutOrdersInputSchema), import_zod.z.lazy(() => VendorUncheckedCreateWithoutOrdersInputSchema)]),
  where: import_zod.z.lazy(() => VendorWhereInputSchema).optional()
}).strict();
var VendorUpdateToOneWithWhereWithoutOrdersInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => VendorWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => VendorUpdateWithoutOrdersInputSchema), import_zod.z.lazy(() => VendorUncheckedUpdateWithoutOrdersInputSchema)])
}).strict();
var VendorUpdateWithoutOrdersInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  contact: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  email: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  phone: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingredients: import_zod.z.lazy(() => IngredientUpdateManyWithoutVendorsNestedInputSchema).optional(),
  supplierPriceHistory: import_zod.z.lazy(() => SupplierPriceHistoryUpdateManyWithoutVendorNestedInputSchema).optional()
}).strict();
var VendorUncheckedUpdateWithoutOrdersInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  contact: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  email: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  phone: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingredients: import_zod.z.lazy(() => IngredientUncheckedUpdateManyWithoutVendorsNestedInputSchema).optional(),
  supplierPriceHistory: import_zod.z.lazy(() => SupplierPriceHistoryUncheckedUpdateManyWithoutVendorNestedInputSchema).optional()
}).strict();
var OrderItemUpsertWithWhereUniqueWithoutOrderInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => OrderItemWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => OrderItemUpdateWithoutOrderInputSchema), import_zod.z.lazy(() => OrderItemUncheckedUpdateWithoutOrderInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => OrderItemCreateWithoutOrderInputSchema), import_zod.z.lazy(() => OrderItemUncheckedCreateWithoutOrderInputSchema)])
}).strict();
var OrderItemUpdateWithWhereUniqueWithoutOrderInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => OrderItemWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => OrderItemUpdateWithoutOrderInputSchema), import_zod.z.lazy(() => OrderItemUncheckedUpdateWithoutOrderInputSchema)])
}).strict();
var OrderItemUpdateManyWithWhereWithoutOrderInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => OrderItemScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => OrderItemUpdateManyMutationInputSchema), import_zod.z.lazy(() => OrderItemUncheckedUpdateManyWithoutOrderInputSchema)])
}).strict();
var OrderCreateWithoutItemsInputSchema = import_zod.z.object({
  status: import_zod.z.lazy(() => OrderStatusSchema),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  restaurant: import_zod.z.lazy(() => RestaurantCreateNestedOneWithoutOrdersInputSchema),
  vendor: import_zod.z.lazy(() => VendorCreateNestedOneWithoutOrdersInputSchema)
}).strict();
var OrderUncheckedCreateWithoutItemsInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  restaurantId: import_zod.z.number().int(),
  vendorId: import_zod.z.number().int(),
  status: import_zod.z.lazy(() => OrderStatusSchema),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var OrderCreateOrConnectWithoutItemsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => OrderWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => OrderCreateWithoutItemsInputSchema), import_zod.z.lazy(() => OrderUncheckedCreateWithoutItemsInputSchema)])
}).strict();
var IngredientCreateWithoutOrderItemsInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  category: import_zod.z.string(),
  price: import_zod.z.number(),
  recipeIngredients: import_zod.z.lazy(() => RecipeIngredientCreateNestedManyWithoutIngredientInputSchema).optional(),
  inventoryItems: import_zod.z.lazy(() => InventoryItemCreateNestedManyWithoutIngredientInputSchema).optional(),
  vendors: import_zod.z.lazy(() => VendorCreateNestedManyWithoutIngredientsInputSchema).optional(),
  WasteRecord: import_zod.z.lazy(() => WasteRecordCreateNestedManyWithoutIngredienteInputSchema).optional(),
  IngredientAllergen: import_zod.z.lazy(() => IngredientAllergenCreateNestedManyWithoutIngredientInputSchema).optional(),
  SupplierPriceHistory: import_zod.z.lazy(() => SupplierPriceHistoryCreateNestedManyWithoutIngredientInputSchema).optional(),
  DietaryRestriction: import_zod.z.lazy(() => DietaryRestrictionCreateNestedOneWithoutIngredientsInputSchema).optional()
}).strict();
var IngredientUncheckedCreateWithoutOrderItemsInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  category: import_zod.z.string(),
  price: import_zod.z.number(),
  dietaryRestrictionId: import_zod.z.number().int().optional().nullable(),
  recipeIngredients: import_zod.z.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  inventoryItems: import_zod.z.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  vendors: import_zod.z.lazy(() => VendorUncheckedCreateNestedManyWithoutIngredientsInputSchema).optional(),
  WasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutIngredienteInputSchema).optional(),
  IngredientAllergen: import_zod.z.lazy(() => IngredientAllergenUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  SupplierPriceHistory: import_zod.z.lazy(() => SupplierPriceHistoryUncheckedCreateNestedManyWithoutIngredientInputSchema).optional()
}).strict();
var IngredientCreateOrConnectWithoutOrderItemsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => IngredientWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => IngredientCreateWithoutOrderItemsInputSchema), import_zod.z.lazy(() => IngredientUncheckedCreateWithoutOrderItemsInputSchema)])
}).strict();
var OrderUpsertWithoutItemsInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => OrderUpdateWithoutItemsInputSchema), import_zod.z.lazy(() => OrderUncheckedUpdateWithoutItemsInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => OrderCreateWithoutItemsInputSchema), import_zod.z.lazy(() => OrderUncheckedCreateWithoutItemsInputSchema)]),
  where: import_zod.z.lazy(() => OrderWhereInputSchema).optional()
}).strict();
var OrderUpdateToOneWithWhereWithoutItemsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => OrderWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => OrderUpdateWithoutItemsInputSchema), import_zod.z.lazy(() => OrderUncheckedUpdateWithoutItemsInputSchema)])
}).strict();
var OrderUpdateWithoutItemsInputSchema = import_zod.z.object({
  status: import_zod.z.union([import_zod.z.lazy(() => OrderStatusSchema), import_zod.z.lazy(() => EnumOrderStatusFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantUpdateOneRequiredWithoutOrdersNestedInputSchema).optional(),
  vendor: import_zod.z.lazy(() => VendorUpdateOneRequiredWithoutOrdersNestedInputSchema).optional()
}).strict();
var OrderUncheckedUpdateWithoutItemsInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  vendorId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => OrderStatusSchema), import_zod.z.lazy(() => EnumOrderStatusFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var IngredientUpsertWithoutOrderItemsInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => IngredientUpdateWithoutOrderItemsInputSchema), import_zod.z.lazy(() => IngredientUncheckedUpdateWithoutOrderItemsInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => IngredientCreateWithoutOrderItemsInputSchema), import_zod.z.lazy(() => IngredientUncheckedCreateWithoutOrderItemsInputSchema)]),
  where: import_zod.z.lazy(() => IngredientWhereInputSchema).optional()
}).strict();
var IngredientUpdateToOneWithWhereWithoutOrderItemsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => IngredientWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => IngredientUpdateWithoutOrderItemsInputSchema), import_zod.z.lazy(() => IngredientUncheckedUpdateWithoutOrderItemsInputSchema)])
}).strict();
var IngredientUpdateWithoutOrderItemsInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  category: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIngredients: import_zod.z.lazy(() => RecipeIngredientUpdateManyWithoutIngredientNestedInputSchema).optional(),
  inventoryItems: import_zod.z.lazy(() => InventoryItemUpdateManyWithoutIngredientNestedInputSchema).optional(),
  vendors: import_zod.z.lazy(() => VendorUpdateManyWithoutIngredientsNestedInputSchema).optional(),
  WasteRecord: import_zod.z.lazy(() => WasteRecordUpdateManyWithoutIngredienteNestedInputSchema).optional(),
  IngredientAllergen: import_zod.z.lazy(() => IngredientAllergenUpdateManyWithoutIngredientNestedInputSchema).optional(),
  SupplierPriceHistory: import_zod.z.lazy(() => SupplierPriceHistoryUpdateManyWithoutIngredientNestedInputSchema).optional(),
  DietaryRestriction: import_zod.z.lazy(() => DietaryRestrictionUpdateOneWithoutIngredientsNestedInputSchema).optional()
}).strict();
var IngredientUncheckedUpdateWithoutOrderItemsInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  category: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  dietaryRestrictionId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  recipeIngredients: import_zod.z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  inventoryItems: import_zod.z.lazy(() => InventoryItemUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  vendors: import_zod.z.lazy(() => VendorUncheckedUpdateManyWithoutIngredientsNestedInputSchema).optional(),
  WasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedUpdateManyWithoutIngredienteNestedInputSchema).optional(),
  IngredientAllergen: import_zod.z.lazy(() => IngredientAllergenUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  SupplierPriceHistory: import_zod.z.lazy(() => SupplierPriceHistoryUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional()
}).strict();
var OrderCreateWithoutVendorInputSchema = import_zod.z.object({
  status: import_zod.z.lazy(() => OrderStatusSchema),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  restaurant: import_zod.z.lazy(() => RestaurantCreateNestedOneWithoutOrdersInputSchema),
  items: import_zod.z.lazy(() => OrderItemCreateNestedManyWithoutOrderInputSchema).optional()
}).strict();
var OrderUncheckedCreateWithoutVendorInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  restaurantId: import_zod.z.number().int(),
  status: import_zod.z.lazy(() => OrderStatusSchema),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  items: import_zod.z.lazy(() => OrderItemUncheckedCreateNestedManyWithoutOrderInputSchema).optional()
}).strict();
var OrderCreateOrConnectWithoutVendorInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => OrderWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => OrderCreateWithoutVendorInputSchema), import_zod.z.lazy(() => OrderUncheckedCreateWithoutVendorInputSchema)])
}).strict();
var OrderCreateManyVendorInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => OrderCreateManyVendorInputSchema), import_zod.z.lazy(() => OrderCreateManyVendorInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var IngredientCreateWithoutVendorsInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  category: import_zod.z.string(),
  price: import_zod.z.number(),
  recipeIngredients: import_zod.z.lazy(() => RecipeIngredientCreateNestedManyWithoutIngredientInputSchema).optional(),
  inventoryItems: import_zod.z.lazy(() => InventoryItemCreateNestedManyWithoutIngredientInputSchema).optional(),
  orderItems: import_zod.z.lazy(() => OrderItemCreateNestedManyWithoutIngredientInputSchema).optional(),
  WasteRecord: import_zod.z.lazy(() => WasteRecordCreateNestedManyWithoutIngredienteInputSchema).optional(),
  IngredientAllergen: import_zod.z.lazy(() => IngredientAllergenCreateNestedManyWithoutIngredientInputSchema).optional(),
  SupplierPriceHistory: import_zod.z.lazy(() => SupplierPriceHistoryCreateNestedManyWithoutIngredientInputSchema).optional(),
  DietaryRestriction: import_zod.z.lazy(() => DietaryRestrictionCreateNestedOneWithoutIngredientsInputSchema).optional()
}).strict();
var IngredientUncheckedCreateWithoutVendorsInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  category: import_zod.z.string(),
  price: import_zod.z.number(),
  dietaryRestrictionId: import_zod.z.number().int().optional().nullable(),
  recipeIngredients: import_zod.z.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  inventoryItems: import_zod.z.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  orderItems: import_zod.z.lazy(() => OrderItemUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  WasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutIngredienteInputSchema).optional(),
  IngredientAllergen: import_zod.z.lazy(() => IngredientAllergenUncheckedCreateNestedManyWithoutIngredientInputSchema).optional(),
  SupplierPriceHistory: import_zod.z.lazy(() => SupplierPriceHistoryUncheckedCreateNestedManyWithoutIngredientInputSchema).optional()
}).strict();
var IngredientCreateOrConnectWithoutVendorsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => IngredientWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => IngredientCreateWithoutVendorsInputSchema), import_zod.z.lazy(() => IngredientUncheckedCreateWithoutVendorsInputSchema)])
}).strict();
var SupplierPriceHistoryCreateWithoutVendorInputSchema = import_zod.z.object({
  price: import_zod.z.number(),
  unit: import_zod.z.string(),
  startDate: import_zod.z.coerce.date(),
  endDate: import_zod.z.coerce.date().optional().nullable(),
  notes: import_zod.z.string().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  ingredient: import_zod.z.lazy(() => IngredientCreateNestedOneWithoutSupplierPriceHistoryInputSchema)
}).strict();
var SupplierPriceHistoryUncheckedCreateWithoutVendorInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  ingredientId: import_zod.z.number().int(),
  price: import_zod.z.number(),
  unit: import_zod.z.string(),
  startDate: import_zod.z.coerce.date(),
  endDate: import_zod.z.coerce.date().optional().nullable(),
  notes: import_zod.z.string().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var SupplierPriceHistoryCreateOrConnectWithoutVendorInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryCreateWithoutVendorInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryUncheckedCreateWithoutVendorInputSchema)])
}).strict();
var SupplierPriceHistoryCreateManyVendorInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryCreateManyVendorInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryCreateManyVendorInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var OrderUpsertWithWhereUniqueWithoutVendorInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => OrderWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => OrderUpdateWithoutVendorInputSchema), import_zod.z.lazy(() => OrderUncheckedUpdateWithoutVendorInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => OrderCreateWithoutVendorInputSchema), import_zod.z.lazy(() => OrderUncheckedCreateWithoutVendorInputSchema)])
}).strict();
var OrderUpdateWithWhereUniqueWithoutVendorInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => OrderWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => OrderUpdateWithoutVendorInputSchema), import_zod.z.lazy(() => OrderUncheckedUpdateWithoutVendorInputSchema)])
}).strict();
var OrderUpdateManyWithWhereWithoutVendorInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => OrderScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => OrderUpdateManyMutationInputSchema), import_zod.z.lazy(() => OrderUncheckedUpdateManyWithoutVendorInputSchema)])
}).strict();
var IngredientUpsertWithWhereUniqueWithoutVendorsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => IngredientWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => IngredientUpdateWithoutVendorsInputSchema), import_zod.z.lazy(() => IngredientUncheckedUpdateWithoutVendorsInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => IngredientCreateWithoutVendorsInputSchema), import_zod.z.lazy(() => IngredientUncheckedCreateWithoutVendorsInputSchema)])
}).strict();
var IngredientUpdateWithWhereUniqueWithoutVendorsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => IngredientWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => IngredientUpdateWithoutVendorsInputSchema), import_zod.z.lazy(() => IngredientUncheckedUpdateWithoutVendorsInputSchema)])
}).strict();
var IngredientUpdateManyWithWhereWithoutVendorsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => IngredientScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => IngredientUpdateManyMutationInputSchema), import_zod.z.lazy(() => IngredientUncheckedUpdateManyWithoutVendorsInputSchema)])
}).strict();
var SupplierPriceHistoryUpsertWithWhereUniqueWithoutVendorInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryUpdateWithoutVendorInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryUncheckedUpdateWithoutVendorInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryCreateWithoutVendorInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryUncheckedCreateWithoutVendorInputSchema)])
}).strict();
var SupplierPriceHistoryUpdateWithWhereUniqueWithoutVendorInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => SupplierPriceHistoryWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryUpdateWithoutVendorInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryUncheckedUpdateWithoutVendorInputSchema)])
}).strict();
var SupplierPriceHistoryUpdateManyWithWhereWithoutVendorInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => SupplierPriceHistoryScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => SupplierPriceHistoryUpdateManyMutationInputSchema), import_zod.z.lazy(() => SupplierPriceHistoryUncheckedUpdateManyWithoutVendorInputSchema)])
}).strict();
var UserCreateWithoutShiftsInputSchema = import_zod.z.object({
  email: import_zod.z.string(),
  sub: import_zod.z.number().int().optional().nullable(),
  passwordHash: import_zod.z.string(),
  firstName: import_zod.z.string(),
  lastName: import_zod.z.string(),
  profileImage: import_zod.z.string().optional().nullable(),
  verified: import_zod.z.boolean().optional(),
  role: import_zod.z.lazy(() => UserRoleSchema),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  organization: import_zod.z.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantCreateNestedOneWithoutUsersInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserUncheckedCreateWithoutShiftsInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  email: import_zod.z.string(),
  sub: import_zod.z.number().int().optional().nullable(),
  passwordHash: import_zod.z.string(),
  firstName: import_zod.z.string(),
  lastName: import_zod.z.string(),
  profileImage: import_zod.z.string().optional().nullable(),
  verified: import_zod.z.boolean().optional(),
  role: import_zod.z.lazy(() => UserRoleSchema),
  organizationId: import_zod.z.number().int().optional().nullable(),
  restaurantId: import_zod.z.number().int().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteUncheckedCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserCreateOrConnectWithoutShiftsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => UserWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutShiftsInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutShiftsInputSchema)])
}).strict();
var ShiftTaskCreateWithoutShiftInputSchema = import_zod.z.object({
  taskType: import_zod.z.lazy(() => TaskTypeSchema),
  startTime: import_zod.z.coerce.date(),
  endTime: import_zod.z.coerce.date(),
  duration: import_zod.z.number().int(),
  notes: import_zod.z.string().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var ShiftTaskUncheckedCreateWithoutShiftInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  taskType: import_zod.z.lazy(() => TaskTypeSchema),
  startTime: import_zod.z.coerce.date(),
  endTime: import_zod.z.coerce.date(),
  duration: import_zod.z.number().int(),
  notes: import_zod.z.string().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var ShiftTaskCreateOrConnectWithoutShiftInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => ShiftTaskWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => ShiftTaskCreateWithoutShiftInputSchema), import_zod.z.lazy(() => ShiftTaskUncheckedCreateWithoutShiftInputSchema)])
}).strict();
var ShiftTaskCreateManyShiftInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => ShiftTaskCreateManyShiftInputSchema), import_zod.z.lazy(() => ShiftTaskCreateManyShiftInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var UserUpsertWithoutShiftsInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => UserUpdateWithoutShiftsInputSchema), import_zod.z.lazy(() => UserUncheckedUpdateWithoutShiftsInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutShiftsInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutShiftsInputSchema)]),
  where: import_zod.z.lazy(() => UserWhereInputSchema).optional()
}).strict();
var UserUpdateToOneWithWhereWithoutShiftsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => UserWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => UserUpdateWithoutShiftsInputSchema), import_zod.z.lazy(() => UserUncheckedUpdateWithoutShiftsInputSchema)])
}).strict();
var UserUpdateWithoutShiftsInputSchema = import_zod.z.object({
  email: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: import_zod.z.union([import_zod.z.lazy(() => UserRoleSchema), import_zod.z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  organization: import_zod.z.lazy(() => OrganizationUpdateOneWithoutUsersNestedInputSchema).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantUpdateOneWithoutUsersNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var UserUncheckedUpdateWithoutShiftsInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  email: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: import_zod.z.union([import_zod.z.lazy(() => UserRoleSchema), import_zod.z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemUncheckedUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var ShiftTaskUpsertWithWhereUniqueWithoutShiftInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => ShiftTaskWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => ShiftTaskUpdateWithoutShiftInputSchema), import_zod.z.lazy(() => ShiftTaskUncheckedUpdateWithoutShiftInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => ShiftTaskCreateWithoutShiftInputSchema), import_zod.z.lazy(() => ShiftTaskUncheckedCreateWithoutShiftInputSchema)])
}).strict();
var ShiftTaskUpdateWithWhereUniqueWithoutShiftInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => ShiftTaskWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => ShiftTaskUpdateWithoutShiftInputSchema), import_zod.z.lazy(() => ShiftTaskUncheckedUpdateWithoutShiftInputSchema)])
}).strict();
var ShiftTaskUpdateManyWithWhereWithoutShiftInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => ShiftTaskScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => ShiftTaskUpdateManyMutationInputSchema), import_zod.z.lazy(() => ShiftTaskUncheckedUpdateManyWithoutShiftInputSchema)])
}).strict();
var ShiftTaskScalarWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => ShiftTaskScalarWhereInputSchema), import_zod.z.lazy(() => ShiftTaskScalarWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => ShiftTaskScalarWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => ShiftTaskScalarWhereInputSchema), import_zod.z.lazy(() => ShiftTaskScalarWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  shiftId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  taskType: import_zod.z.union([import_zod.z.lazy(() => EnumTaskTypeFilterSchema), import_zod.z.lazy(() => TaskTypeSchema)]).optional(),
  startTime: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  endTime: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  duration: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  notes: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var RecipeCreateWithoutPrepBoardsInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.string().optional().nullable(),
  servings: import_zod.z.number().int(),
  cookTime: import_zod.z.number().int(),
  prepTime: import_zod.z.number().int(),
  frequency: import_zod.z.number().int().optional().nullable(),
  foodCost: import_zod.z.number().optional().nullable(),
  isDeleted: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  restaurant: import_zod.z.lazy(() => RestaurantCreateNestedOneWithoutRecipesInputSchema),
  cookBook: import_zod.z.lazy(() => CookBookCreateNestedOneWithoutRecipesInputSchema),
  ingredients: import_zod.z.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeCreateNestedManyWithoutRecipeInputSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionCreateNestedManyWithoutRecipesInputSchema).optional()
}).strict();
var RecipeUncheckedCreateWithoutPrepBoardsInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.string().optional().nullable(),
  servings: import_zod.z.number().int(),
  cookTime: import_zod.z.number().int(),
  prepTime: import_zod.z.number().int(),
  frequency: import_zod.z.number().int().optional().nullable(),
  restaurantId: import_zod.z.number().int(),
  cookBookId: import_zod.z.number().int(),
  foodCost: import_zod.z.number().optional().nullable(),
  isDeleted: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutRecipesInputSchema).optional()
}).strict();
var RecipeCreateOrConnectWithoutPrepBoardsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutPrepBoardsInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutPrepBoardsInputSchema)])
}).strict();
var PrepItemCreateWithoutPrepBoardInputSchema = import_zod.z.object({
  quantity: import_zod.z.number().int(),
  status: import_zod.z.lazy(() => PrepStatusSchema),
  recipe: import_zod.z.lazy(() => RecipeCreateNestedOneWithoutPrepItemsInputSchema),
  assignedTo: import_zod.z.lazy(() => UserCreateNestedOneWithoutPrepItemsInputSchema)
}).strict();
var PrepItemUncheckedCreateWithoutPrepBoardInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  recipeId: import_zod.z.number().int(),
  quantity: import_zod.z.number().int(),
  status: import_zod.z.lazy(() => PrepStatusSchema),
  assignedToId: import_zod.z.number().int()
}).strict();
var PrepItemCreateOrConnectWithoutPrepBoardInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => PrepItemCreateWithoutPrepBoardInputSchema), import_zod.z.lazy(() => PrepItemUncheckedCreateWithoutPrepBoardInputSchema)])
}).strict();
var PrepItemCreateManyPrepBoardInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => PrepItemCreateManyPrepBoardInputSchema), import_zod.z.lazy(() => PrepItemCreateManyPrepBoardInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var RecipeUpsertWithWhereUniqueWithoutPrepBoardsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateWithoutPrepBoardsInputSchema), import_zod.z.lazy(() => RecipeUncheckedUpdateWithoutPrepBoardsInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutPrepBoardsInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutPrepBoardsInputSchema)])
}).strict();
var RecipeUpdateWithWhereUniqueWithoutPrepBoardsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateWithoutPrepBoardsInputSchema), import_zod.z.lazy(() => RecipeUncheckedUpdateWithoutPrepBoardsInputSchema)])
}).strict();
var RecipeUpdateManyWithWhereWithoutPrepBoardsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateManyMutationInputSchema), import_zod.z.lazy(() => RecipeUncheckedUpdateManyWithoutPrepBoardsInputSchema)])
}).strict();
var PrepItemUpsertWithWhereUniqueWithoutPrepBoardInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => PrepItemUpdateWithoutPrepBoardInputSchema), import_zod.z.lazy(() => PrepItemUncheckedUpdateWithoutPrepBoardInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => PrepItemCreateWithoutPrepBoardInputSchema), import_zod.z.lazy(() => PrepItemUncheckedCreateWithoutPrepBoardInputSchema)])
}).strict();
var PrepItemUpdateWithWhereUniqueWithoutPrepBoardInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => PrepItemWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => PrepItemUpdateWithoutPrepBoardInputSchema), import_zod.z.lazy(() => PrepItemUncheckedUpdateWithoutPrepBoardInputSchema)])
}).strict();
var PrepItemUpdateManyWithWhereWithoutPrepBoardInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => PrepItemScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => PrepItemUpdateManyMutationInputSchema), import_zod.z.lazy(() => PrepItemUncheckedUpdateManyWithoutPrepBoardInputSchema)])
}).strict();
var PrepBoardCreateWithoutPrepItemsInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  status: import_zod.z.lazy(() => PrepStatusSchema),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  recipes: import_zod.z.lazy(() => RecipeCreateNestedManyWithoutPrepBoardsInputSchema).optional()
}).strict();
var PrepBoardUncheckedCreateWithoutPrepItemsInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  status: import_zod.z.lazy(() => PrepStatusSchema),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  recipes: import_zod.z.lazy(() => RecipeUncheckedCreateNestedManyWithoutPrepBoardsInputSchema).optional()
}).strict();
var PrepBoardCreateOrConnectWithoutPrepItemsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => PrepBoardWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => PrepBoardCreateWithoutPrepItemsInputSchema), import_zod.z.lazy(() => PrepBoardUncheckedCreateWithoutPrepItemsInputSchema)])
}).strict();
var RecipeCreateWithoutPrepItemsInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.string().optional().nullable(),
  servings: import_zod.z.number().int(),
  cookTime: import_zod.z.number().int(),
  prepTime: import_zod.z.number().int(),
  frequency: import_zod.z.number().int().optional().nullable(),
  foodCost: import_zod.z.number().optional().nullable(),
  isDeleted: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  restaurant: import_zod.z.lazy(() => RestaurantCreateNestedOneWithoutRecipesInputSchema),
  cookBook: import_zod.z.lazy(() => CookBookCreateNestedOneWithoutRecipesInputSchema),
  ingredients: import_zod.z.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardCreateNestedManyWithoutRecipesInputSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeCreateNestedManyWithoutRecipeInputSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionCreateNestedManyWithoutRecipesInputSchema).optional()
}).strict();
var RecipeUncheckedCreateWithoutPrepItemsInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.string().optional().nullable(),
  servings: import_zod.z.number().int(),
  cookTime: import_zod.z.number().int(),
  prepTime: import_zod.z.number().int(),
  frequency: import_zod.z.number().int().optional().nullable(),
  restaurantId: import_zod.z.number().int(),
  cookBookId: import_zod.z.number().int(),
  foodCost: import_zod.z.number().optional().nullable(),
  isDeleted: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutRecipesInputSchema).optional()
}).strict();
var RecipeCreateOrConnectWithoutPrepItemsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutPrepItemsInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutPrepItemsInputSchema)])
}).strict();
var UserCreateWithoutPrepItemsInputSchema = import_zod.z.object({
  email: import_zod.z.string(),
  sub: import_zod.z.number().int().optional().nullable(),
  passwordHash: import_zod.z.string(),
  firstName: import_zod.z.string(),
  lastName: import_zod.z.string(),
  profileImage: import_zod.z.string().optional().nullable(),
  verified: import_zod.z.boolean().optional(),
  role: import_zod.z.lazy(() => UserRoleSchema),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  organization: import_zod.z.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantCreateNestedOneWithoutUsersInputSchema).optional(),
  shifts: import_zod.z.lazy(() => ShiftCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserUncheckedCreateWithoutPrepItemsInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  email: import_zod.z.string(),
  sub: import_zod.z.number().int().optional().nullable(),
  passwordHash: import_zod.z.string(),
  firstName: import_zod.z.string(),
  lastName: import_zod.z.string(),
  profileImage: import_zod.z.string().optional().nullable(),
  verified: import_zod.z.boolean().optional(),
  role: import_zod.z.lazy(() => UserRoleSchema),
  organizationId: import_zod.z.number().int().optional().nullable(),
  restaurantId: import_zod.z.number().int().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  shifts: import_zod.z.lazy(() => ShiftUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteUncheckedCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserCreateOrConnectWithoutPrepItemsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => UserWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutPrepItemsInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutPrepItemsInputSchema)])
}).strict();
var PrepBoardUpsertWithoutPrepItemsInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => PrepBoardUpdateWithoutPrepItemsInputSchema), import_zod.z.lazy(() => PrepBoardUncheckedUpdateWithoutPrepItemsInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => PrepBoardCreateWithoutPrepItemsInputSchema), import_zod.z.lazy(() => PrepBoardUncheckedCreateWithoutPrepItemsInputSchema)]),
  where: import_zod.z.lazy(() => PrepBoardWhereInputSchema).optional()
}).strict();
var PrepBoardUpdateToOneWithWhereWithoutPrepItemsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => PrepBoardWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => PrepBoardUpdateWithoutPrepItemsInputSchema), import_zod.z.lazy(() => PrepBoardUncheckedUpdateWithoutPrepItemsInputSchema)])
}).strict();
var PrepBoardUpdateWithoutPrepItemsInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => PrepStatusSchema), import_zod.z.lazy(() => EnumPrepStatusFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  recipes: import_zod.z.lazy(() => RecipeUpdateManyWithoutPrepBoardsNestedInputSchema).optional()
}).strict();
var PrepBoardUncheckedUpdateWithoutPrepItemsInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => PrepStatusSchema), import_zod.z.lazy(() => EnumPrepStatusFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  recipes: import_zod.z.lazy(() => RecipeUncheckedUpdateManyWithoutPrepBoardsNestedInputSchema).optional()
}).strict();
var RecipeUpsertWithoutPrepItemsInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateWithoutPrepItemsInputSchema), import_zod.z.lazy(() => RecipeUncheckedUpdateWithoutPrepItemsInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutPrepItemsInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutPrepItemsInputSchema)]),
  where: import_zod.z.lazy(() => RecipeWhereInputSchema).optional()
}).strict();
var RecipeUpdateToOneWithWhereWithoutPrepItemsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateWithoutPrepItemsInputSchema), import_zod.z.lazy(() => RecipeUncheckedUpdateWithoutPrepItemsInputSchema)])
}).strict();
var RecipeUpdateWithoutPrepItemsInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  cookBook: import_zod.z.lazy(() => CookBookUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardUpdateManyWithoutRecipesNestedInputSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUpdateManyWithoutRecipeNestedInputSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUpdateManyWithoutRecipesNestedInputSchema).optional()
}).strict();
var RecipeUncheckedUpdateWithoutPrepItemsInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookBookId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional()
}).strict();
var UserUpsertWithoutPrepItemsInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => UserUpdateWithoutPrepItemsInputSchema), import_zod.z.lazy(() => UserUncheckedUpdateWithoutPrepItemsInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutPrepItemsInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutPrepItemsInputSchema)]),
  where: import_zod.z.lazy(() => UserWhereInputSchema).optional()
}).strict();
var UserUpdateToOneWithWhereWithoutPrepItemsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => UserWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => UserUpdateWithoutPrepItemsInputSchema), import_zod.z.lazy(() => UserUncheckedUpdateWithoutPrepItemsInputSchema)])
}).strict();
var UserUpdateWithoutPrepItemsInputSchema = import_zod.z.object({
  email: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: import_zod.z.union([import_zod.z.lazy(() => UserRoleSchema), import_zod.z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  organization: import_zod.z.lazy(() => OrganizationUpdateOneWithoutUsersNestedInputSchema).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantUpdateOneWithoutUsersNestedInputSchema).optional(),
  shifts: import_zod.z.lazy(() => ShiftUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var UserUncheckedUpdateWithoutPrepItemsInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  email: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: import_zod.z.union([import_zod.z.lazy(() => UserRoleSchema), import_zod.z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  shifts: import_zod.z.lazy(() => ShiftUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemUncheckedUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var UserCreateWithoutPasswordResetsInputSchema = import_zod.z.object({
  email: import_zod.z.string(),
  sub: import_zod.z.number().int().optional().nullable(),
  passwordHash: import_zod.z.string(),
  firstName: import_zod.z.string(),
  lastName: import_zod.z.string(),
  profileImage: import_zod.z.string().optional().nullable(),
  verified: import_zod.z.boolean().optional(),
  role: import_zod.z.lazy(() => UserRoleSchema),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  organization: import_zod.z.lazy(() => OrganizationCreateNestedOneWithoutUsersInputSchema).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantCreateNestedOneWithoutUsersInputSchema).optional(),
  shifts: import_zod.z.lazy(() => ShiftCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserUncheckedCreateWithoutPasswordResetsInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  email: import_zod.z.string(),
  sub: import_zod.z.number().int().optional().nullable(),
  passwordHash: import_zod.z.string(),
  firstName: import_zod.z.string(),
  lastName: import_zod.z.string(),
  profileImage: import_zod.z.string().optional().nullable(),
  verified: import_zod.z.boolean().optional(),
  role: import_zod.z.lazy(() => UserRoleSchema),
  organizationId: import_zod.z.number().int().optional().nullable(),
  restaurantId: import_zod.z.number().int().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  shifts: import_zod.z.lazy(() => ShiftUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemUncheckedCreateNestedManyWithoutLastUpdatedByInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRecordedByInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutAssignedToInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteUncheckedCreateNestedManyWithoutCompletedByInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRespondedByInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutCreatedByInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutApprovedByInputSchema).optional()
}).strict();
var UserCreateOrConnectWithoutPasswordResetsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => UserWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutPasswordResetsInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutPasswordResetsInputSchema)])
}).strict();
var UserUpsertWithoutPasswordResetsInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => UserUpdateWithoutPasswordResetsInputSchema), import_zod.z.lazy(() => UserUncheckedUpdateWithoutPasswordResetsInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => UserCreateWithoutPasswordResetsInputSchema), import_zod.z.lazy(() => UserUncheckedCreateWithoutPasswordResetsInputSchema)]),
  where: import_zod.z.lazy(() => UserWhereInputSchema).optional()
}).strict();
var UserUpdateToOneWithWhereWithoutPasswordResetsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => UserWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => UserUpdateWithoutPasswordResetsInputSchema), import_zod.z.lazy(() => UserUncheckedUpdateWithoutPasswordResetsInputSchema)])
}).strict();
var UserUpdateWithoutPasswordResetsInputSchema = import_zod.z.object({
  email: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: import_zod.z.union([import_zod.z.lazy(() => UserRoleSchema), import_zod.z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  organization: import_zod.z.lazy(() => OrganizationUpdateOneWithoutUsersNestedInputSchema).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantUpdateOneWithoutUsersNestedInputSchema).optional(),
  shifts: import_zod.z.lazy(() => ShiftUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var UserUncheckedUpdateWithoutPasswordResetsInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  email: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: import_zod.z.union([import_zod.z.lazy(() => UserRoleSchema), import_zod.z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  shifts: import_zod.z.lazy(() => ShiftUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemUncheckedUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var RestaurantCreateWithoutMenusInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  imageUrl: import_zod.z.string().optional().nullable(),
  address: import_zod.z.string(),
  city: import_zod.z.string(),
  zipCode: import_zod.z.string(),
  state: import_zod.z.string(),
  owner: import_zod.z.string(),
  foodCost: import_zod.z.number().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  isDeleted: import_zod.z.boolean().optional(),
  deleted: import_zod.z.coerce.date().optional().nullable(),
  organization: import_zod.z.lazy(() => OrganizationCreateNestedOneWithoutRestaurantsInputSchema).optional(),
  users: import_zod.z.lazy(() => UserCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: import_zod.z.lazy(() => CookBookCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: import_zod.z.lazy(() => InventoryCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: import_zod.z.lazy(() => OrderCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipment: import_zod.z.lazy(() => EquipmentCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklist: import_zod.z.lazy(() => QualityChecklistCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qustomerFeedback: import_zod.z.lazy(() => CustomerFeedbackCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();
var RestaurantUncheckedCreateWithoutMenusInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  imageUrl: import_zod.z.string().optional().nullable(),
  address: import_zod.z.string(),
  city: import_zod.z.string(),
  zipCode: import_zod.z.string(),
  state: import_zod.z.string(),
  owner: import_zod.z.string(),
  organizationId: import_zod.z.number().int().optional().nullable(),
  foodCost: import_zod.z.number().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  isDeleted: import_zod.z.boolean().optional(),
  deleted: import_zod.z.coerce.date().optional().nullable(),
  users: import_zod.z.lazy(() => UserUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  cookbooks: import_zod.z.lazy(() => CookBookUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  inventory: import_zod.z.lazy(() => InventoryUncheckedCreateNestedOneWithoutRestaurantInputSchema).optional(),
  orders: import_zod.z.lazy(() => OrderUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  equipment: import_zod.z.lazy(() => EquipmentUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qualityChecklist: import_zod.z.lazy(() => QualityChecklistUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional(),
  qustomerFeedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutRestaurantInputSchema).optional()
}).strict();
var RestaurantCreateOrConnectWithoutMenusInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RestaurantWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => RestaurantCreateWithoutMenusInputSchema), import_zod.z.lazy(() => RestaurantUncheckedCreateWithoutMenusInputSchema)])
}).strict();
var MenuItemCreateWithoutMenuInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  price: import_zod.z.number(),
  foodCost: import_zod.z.number(),
  recipeIds: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeIdsInputSchema), import_zod.z.number().int().array()]).optional(),
  recipeServingsAmount: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema), import_zod.z.number().array()]).optional(),
  recipeServingsCost: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeServingsCostInputSchema), import_zod.z.number().array()]).optional(),
  allergens: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateallergensInputSchema), import_zod.z.string().array()]).optional(),
  nutritionalInfoId: import_zod.z.number().int().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  nutritionalInfo: import_zod.z.lazy(() => NutritionalInfoCreateNestedOneWithoutMenuItemInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeCreateNestedManyWithoutMenuItemsInputSchema).optional(),
  menuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeCreateNestedManyWithoutMenuItemInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsCreateNestedManyWithoutMenuItemInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemCreateNestedManyWithoutMenuItemInputSchema).optional(),
  nutritionalRecommendation: import_zod.z.lazy(() => NutritionalRecommendationCreateNestedManyWithoutMenuItemInputSchema).optional(),
  category: import_zod.z.lazy(() => MenuCategoryCreateNestedOneWithoutMenuItemsInputSchema).optional(),
  feedback: import_zod.z.lazy(() => CustomerFeedbackCreateNestedManyWithoutMenuItemInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionCreateNestedManyWithoutMenuItemsInputSchema).optional()
}).strict();
var MenuItemUncheckedCreateWithoutMenuInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  price: import_zod.z.number(),
  foodCost: import_zod.z.number(),
  recipeIds: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeIdsInputSchema), import_zod.z.number().int().array()]).optional(),
  recipeServingsAmount: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema), import_zod.z.number().array()]).optional(),
  recipeServingsCost: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeServingsCostInputSchema), import_zod.z.number().array()]).optional(),
  allergens: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateallergensInputSchema), import_zod.z.string().array()]).optional(),
  nutritionalInfoId: import_zod.z.number().int().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  categoryId: import_zod.z.number().int().optional().nullable(),
  nutritionalInfo: import_zod.z.lazy(() => NutritionalInfoUncheckedCreateNestedOneWithoutMenuItemInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUncheckedCreateNestedManyWithoutMenuItemsInputSchema).optional(),
  menuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  nutritionalRecommendation: import_zod.z.lazy(() => NutritionalRecommendationUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  feedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutMenuItemsInputSchema).optional()
}).strict();
var MenuItemCreateOrConnectWithoutMenuInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateWithoutMenuInputSchema), import_zod.z.lazy(() => MenuItemUncheckedCreateWithoutMenuInputSchema)])
}).strict();
var MenuItemCreateManyMenuInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateManyMenuInputSchema), import_zod.z.lazy(() => MenuItemCreateManyMenuInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var MenuCategoryCreateWithoutMenuInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  displayOrder: import_zod.z.number().int(),
  isActive: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  menuItems: import_zod.z.lazy(() => MenuItemCreateNestedManyWithoutCategoryInputSchema).optional()
}).strict();
var MenuCategoryUncheckedCreateWithoutMenuInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  displayOrder: import_zod.z.number().int(),
  isActive: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUncheckedCreateNestedManyWithoutCategoryInputSchema).optional()
}).strict();
var MenuCategoryCreateOrConnectWithoutMenuInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => MenuCategoryWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => MenuCategoryCreateWithoutMenuInputSchema), import_zod.z.lazy(() => MenuCategoryUncheckedCreateWithoutMenuInputSchema)])
}).strict();
var MenuCategoryCreateManyMenuInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => MenuCategoryCreateManyMenuInputSchema), import_zod.z.lazy(() => MenuCategoryCreateManyMenuInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var RestaurantUpsertWithoutMenusInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => RestaurantUpdateWithoutMenusInputSchema), import_zod.z.lazy(() => RestaurantUncheckedUpdateWithoutMenusInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => RestaurantCreateWithoutMenusInputSchema), import_zod.z.lazy(() => RestaurantUncheckedCreateWithoutMenusInputSchema)]),
  where: import_zod.z.lazy(() => RestaurantWhereInputSchema).optional()
}).strict();
var RestaurantUpdateToOneWithWhereWithoutMenusInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RestaurantWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => RestaurantUpdateWithoutMenusInputSchema), import_zod.z.lazy(() => RestaurantUncheckedUpdateWithoutMenusInputSchema)])
}).strict();
var RestaurantUpdateWithoutMenusInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  address: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  city: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  zipCode: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  state: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  owner: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  deleted: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  organization: import_zod.z.lazy(() => OrganizationUpdateOneWithoutRestaurantsNestedInputSchema).optional(),
  users: import_zod.z.lazy(() => UserUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: import_zod.z.lazy(() => CookBookUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: import_zod.z.lazy(() => InventoryUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: import_zod.z.lazy(() => OrderUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipment: import_zod.z.lazy(() => EquipmentUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklist: import_zod.z.lazy(() => QualityChecklistUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qustomerFeedback: import_zod.z.lazy(() => CustomerFeedbackUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();
var RestaurantUncheckedUpdateWithoutMenusInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  address: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  city: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  zipCode: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  state: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  owner: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  deleted: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  users: import_zod.z.lazy(() => UserUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: import_zod.z.lazy(() => CookBookUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: import_zod.z.lazy(() => InventoryUncheckedUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: import_zod.z.lazy(() => OrderUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipment: import_zod.z.lazy(() => EquipmentUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklist: import_zod.z.lazy(() => QualityChecklistUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qustomerFeedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();
var MenuItemUpsertWithWhereUniqueWithoutMenuInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateWithoutMenuInputSchema), import_zod.z.lazy(() => MenuItemUncheckedUpdateWithoutMenuInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateWithoutMenuInputSchema), import_zod.z.lazy(() => MenuItemUncheckedCreateWithoutMenuInputSchema)])
}).strict();
var MenuItemUpdateWithWhereUniqueWithoutMenuInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateWithoutMenuInputSchema), import_zod.z.lazy(() => MenuItemUncheckedUpdateWithoutMenuInputSchema)])
}).strict();
var MenuItemUpdateManyWithWhereWithoutMenuInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => MenuItemScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateManyMutationInputSchema), import_zod.z.lazy(() => MenuItemUncheckedUpdateManyWithoutMenuInputSchema)])
}).strict();
var MenuCategoryUpsertWithWhereUniqueWithoutMenuInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => MenuCategoryWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => MenuCategoryUpdateWithoutMenuInputSchema), import_zod.z.lazy(() => MenuCategoryUncheckedUpdateWithoutMenuInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => MenuCategoryCreateWithoutMenuInputSchema), import_zod.z.lazy(() => MenuCategoryUncheckedCreateWithoutMenuInputSchema)])
}).strict();
var MenuCategoryUpdateWithWhereUniqueWithoutMenuInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => MenuCategoryWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => MenuCategoryUpdateWithoutMenuInputSchema), import_zod.z.lazy(() => MenuCategoryUncheckedUpdateWithoutMenuInputSchema)])
}).strict();
var MenuCategoryUpdateManyWithWhereWithoutMenuInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => MenuCategoryScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => MenuCategoryUpdateManyMutationInputSchema), import_zod.z.lazy(() => MenuCategoryUncheckedUpdateManyWithoutMenuInputSchema)])
}).strict();
var MenuCategoryScalarWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => MenuCategoryScalarWhereInputSchema), import_zod.z.lazy(() => MenuCategoryScalarWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => MenuCategoryScalarWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => MenuCategoryScalarWhereInputSchema), import_zod.z.lazy(() => MenuCategoryScalarWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  name: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  description: import_zod.z.union([import_zod.z.lazy(() => StringNullableFilterSchema), import_zod.z.string()]).optional().nullable(),
  displayOrder: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  menuId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  isActive: import_zod.z.union([import_zod.z.lazy(() => BoolFilterSchema), import_zod.z.boolean()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var MenuItemCreateWithoutMenuItemRecipeInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  price: import_zod.z.number(),
  foodCost: import_zod.z.number(),
  recipeIds: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeIdsInputSchema), import_zod.z.number().int().array()]).optional(),
  recipeServingsAmount: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema), import_zod.z.number().array()]).optional(),
  recipeServingsCost: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeServingsCostInputSchema), import_zod.z.number().array()]).optional(),
  allergens: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateallergensInputSchema), import_zod.z.string().array()]).optional(),
  nutritionalInfoId: import_zod.z.number().int().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  nutritionalInfo: import_zod.z.lazy(() => NutritionalInfoCreateNestedOneWithoutMenuItemInputSchema).optional(),
  menu: import_zod.z.lazy(() => MenuCreateNestedOneWithoutMenuItemsInputSchema),
  recipes: import_zod.z.lazy(() => RecipeCreateNestedManyWithoutMenuItemsInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsCreateNestedManyWithoutMenuItemInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemCreateNestedManyWithoutMenuItemInputSchema).optional(),
  nutritionalRecommendation: import_zod.z.lazy(() => NutritionalRecommendationCreateNestedManyWithoutMenuItemInputSchema).optional(),
  category: import_zod.z.lazy(() => MenuCategoryCreateNestedOneWithoutMenuItemsInputSchema).optional(),
  feedback: import_zod.z.lazy(() => CustomerFeedbackCreateNestedManyWithoutMenuItemInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionCreateNestedManyWithoutMenuItemsInputSchema).optional()
}).strict();
var MenuItemUncheckedCreateWithoutMenuItemRecipeInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  price: import_zod.z.number(),
  foodCost: import_zod.z.number(),
  recipeIds: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeIdsInputSchema), import_zod.z.number().int().array()]).optional(),
  recipeServingsAmount: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema), import_zod.z.number().array()]).optional(),
  recipeServingsCost: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeServingsCostInputSchema), import_zod.z.number().array()]).optional(),
  allergens: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateallergensInputSchema), import_zod.z.string().array()]).optional(),
  nutritionalInfoId: import_zod.z.number().int().optional().nullable(),
  menuId: import_zod.z.number().int(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  categoryId: import_zod.z.number().int().optional().nullable(),
  nutritionalInfo: import_zod.z.lazy(() => NutritionalInfoUncheckedCreateNestedOneWithoutMenuItemInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUncheckedCreateNestedManyWithoutMenuItemsInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  nutritionalRecommendation: import_zod.z.lazy(() => NutritionalRecommendationUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  feedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutMenuItemsInputSchema).optional()
}).strict();
var MenuItemCreateOrConnectWithoutMenuItemRecipeInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateWithoutMenuItemRecipeInputSchema), import_zod.z.lazy(() => MenuItemUncheckedCreateWithoutMenuItemRecipeInputSchema)])
}).strict();
var RecipeCreateWithoutMenuItemRecipeInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.string().optional().nullable(),
  servings: import_zod.z.number().int(),
  cookTime: import_zod.z.number().int(),
  prepTime: import_zod.z.number().int(),
  frequency: import_zod.z.number().int().optional().nullable(),
  foodCost: import_zod.z.number().optional().nullable(),
  isDeleted: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  restaurant: import_zod.z.lazy(() => RestaurantCreateNestedOneWithoutRecipesInputSchema),
  cookBook: import_zod.z.lazy(() => CookBookCreateNestedOneWithoutRecipesInputSchema),
  ingredients: import_zod.z.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionCreateNestedManyWithoutRecipesInputSchema).optional()
}).strict();
var RecipeUncheckedCreateWithoutMenuItemRecipeInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.string().optional().nullable(),
  servings: import_zod.z.number().int(),
  cookTime: import_zod.z.number().int(),
  prepTime: import_zod.z.number().int(),
  frequency: import_zod.z.number().int().optional().nullable(),
  restaurantId: import_zod.z.number().int(),
  cookBookId: import_zod.z.number().int(),
  foodCost: import_zod.z.number().optional().nullable(),
  isDeleted: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutRecipesInputSchema).optional()
}).strict();
var RecipeCreateOrConnectWithoutMenuItemRecipeInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutMenuItemRecipeInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutMenuItemRecipeInputSchema)])
}).strict();
var MenuItemUpsertWithoutMenuItemRecipeInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateWithoutMenuItemRecipeInputSchema), import_zod.z.lazy(() => MenuItemUncheckedUpdateWithoutMenuItemRecipeInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateWithoutMenuItemRecipeInputSchema), import_zod.z.lazy(() => MenuItemUncheckedCreateWithoutMenuItemRecipeInputSchema)]),
  where: import_zod.z.lazy(() => MenuItemWhereInputSchema).optional()
}).strict();
var MenuItemUpdateToOneWithWhereWithoutMenuItemRecipeInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => MenuItemWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateWithoutMenuItemRecipeInputSchema), import_zod.z.lazy(() => MenuItemUncheckedUpdateWithoutMenuItemRecipeInputSchema)])
}).strict();
var MenuItemUpdateWithoutMenuItemRecipeInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIds: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeIdsInputSchema), import_zod.z.number().int().array()]).optional(),
  recipeServingsAmount: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema), import_zod.z.number().array()]).optional(),
  recipeServingsCost: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema), import_zod.z.number().array()]).optional(),
  allergens: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateallergensInputSchema), import_zod.z.string().array()]).optional(),
  nutritionalInfoId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  nutritionalInfo: import_zod.z.lazy(() => NutritionalInfoUpdateOneWithoutMenuItemNestedInputSchema).optional(),
  menu: import_zod.z.lazy(() => MenuUpdateOneRequiredWithoutMenuItemsNestedInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUpdateManyWithoutMenuItemsNestedInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  nutritionalRecommendation: import_zod.z.lazy(() => NutritionalRecommendationUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  category: import_zod.z.lazy(() => MenuCategoryUpdateOneWithoutMenuItemsNestedInputSchema).optional(),
  feedback: import_zod.z.lazy(() => CustomerFeedbackUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUpdateManyWithoutMenuItemsNestedInputSchema).optional()
}).strict();
var MenuItemUncheckedUpdateWithoutMenuItemRecipeInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIds: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeIdsInputSchema), import_zod.z.number().int().array()]).optional(),
  recipeServingsAmount: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema), import_zod.z.number().array()]).optional(),
  recipeServingsCost: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema), import_zod.z.number().array()]).optional(),
  allergens: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateallergensInputSchema), import_zod.z.string().array()]).optional(),
  nutritionalInfoId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  menuId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  categoryId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  nutritionalInfo: import_zod.z.lazy(() => NutritionalInfoUncheckedUpdateOneWithoutMenuItemNestedInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUncheckedUpdateManyWithoutMenuItemsNestedInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  nutritionalRecommendation: import_zod.z.lazy(() => NutritionalRecommendationUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  feedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutMenuItemsNestedInputSchema).optional()
}).strict();
var RecipeUpsertWithoutMenuItemRecipeInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateWithoutMenuItemRecipeInputSchema), import_zod.z.lazy(() => RecipeUncheckedUpdateWithoutMenuItemRecipeInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutMenuItemRecipeInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutMenuItemRecipeInputSchema)]),
  where: import_zod.z.lazy(() => RecipeWhereInputSchema).optional()
}).strict();
var RecipeUpdateToOneWithWhereWithoutMenuItemRecipeInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateWithoutMenuItemRecipeInputSchema), import_zod.z.lazy(() => RecipeUncheckedUpdateWithoutMenuItemRecipeInputSchema)])
}).strict();
var RecipeUpdateWithoutMenuItemRecipeInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  cookBook: import_zod.z.lazy(() => CookBookUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUpdateManyWithoutRecipesNestedInputSchema).optional()
}).strict();
var RecipeUncheckedUpdateWithoutMenuItemRecipeInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookBookId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional()
}).strict();
var NutritionalInfoCreateWithoutMenuItemInputSchema = import_zod.z.object({
  calories: import_zod.z.number(),
  fat: import_zod.z.number(),
  saturatedFat: import_zod.z.number(),
  transFat: import_zod.z.number(),
  cholesterol: import_zod.z.number(),
  sodium: import_zod.z.number(),
  carbohydrates: import_zod.z.number(),
  fiber: import_zod.z.number(),
  sugar: import_zod.z.number(),
  protein: import_zod.z.number(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var NutritionalInfoUncheckedCreateWithoutMenuItemInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  calories: import_zod.z.number(),
  fat: import_zod.z.number(),
  saturatedFat: import_zod.z.number(),
  transFat: import_zod.z.number(),
  cholesterol: import_zod.z.number(),
  sodium: import_zod.z.number(),
  carbohydrates: import_zod.z.number(),
  fiber: import_zod.z.number(),
  sugar: import_zod.z.number(),
  protein: import_zod.z.number(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var NutritionalInfoCreateOrConnectWithoutMenuItemInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => NutritionalInfoWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => NutritionalInfoCreateWithoutMenuItemInputSchema), import_zod.z.lazy(() => NutritionalInfoUncheckedCreateWithoutMenuItemInputSchema)])
}).strict();
var MenuCreateWithoutMenuItemsInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  restaurant: import_zod.z.lazy(() => RestaurantCreateNestedOneWithoutMenusInputSchema),
  MenuCategory: import_zod.z.lazy(() => MenuCategoryCreateNestedManyWithoutMenuInputSchema).optional()
}).strict();
var MenuUncheckedCreateWithoutMenuItemsInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  restaurantId: import_zod.z.number().int(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  MenuCategory: import_zod.z.lazy(() => MenuCategoryUncheckedCreateNestedManyWithoutMenuInputSchema).optional()
}).strict();
var MenuCreateOrConnectWithoutMenuItemsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => MenuWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => MenuCreateWithoutMenuItemsInputSchema), import_zod.z.lazy(() => MenuUncheckedCreateWithoutMenuItemsInputSchema)])
}).strict();
var RecipeCreateWithoutMenuItemsInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.string().optional().nullable(),
  servings: import_zod.z.number().int(),
  cookTime: import_zod.z.number().int(),
  prepTime: import_zod.z.number().int(),
  frequency: import_zod.z.number().int().optional().nullable(),
  foodCost: import_zod.z.number().optional().nullable(),
  isDeleted: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  restaurant: import_zod.z.lazy(() => RestaurantCreateNestedOneWithoutRecipesInputSchema),
  cookBook: import_zod.z.lazy(() => CookBookCreateNestedOneWithoutRecipesInputSchema),
  ingredients: import_zod.z.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeInputSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeCreateNestedManyWithoutRecipeInputSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionCreateNestedManyWithoutRecipesInputSchema).optional()
}).strict();
var RecipeUncheckedCreateWithoutMenuItemsInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.string().optional().nullable(),
  servings: import_zod.z.number().int(),
  cookTime: import_zod.z.number().int(),
  prepTime: import_zod.z.number().int(),
  frequency: import_zod.z.number().int().optional().nullable(),
  restaurantId: import_zod.z.number().int(),
  cookBookId: import_zod.z.number().int(),
  foodCost: import_zod.z.number().optional().nullable(),
  isDeleted: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutRecipesInputSchema).optional()
}).strict();
var RecipeCreateOrConnectWithoutMenuItemsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutMenuItemsInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutMenuItemsInputSchema)])
}).strict();
var MenuItemRecipeCreateWithoutMenuItemInputSchema = import_zod.z.object({
  joinAt: import_zod.z.coerce.date().optional(),
  recipe: import_zod.z.lazy(() => RecipeCreateNestedOneWithoutMenuItemRecipeInputSchema)
}).strict();
var MenuItemRecipeUncheckedCreateWithoutMenuItemInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  recipeId: import_zod.z.number().int(),
  joinAt: import_zod.z.coerce.date().optional()
}).strict();
var MenuItemRecipeCreateOrConnectWithoutMenuItemInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => MenuItemRecipeWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeCreateWithoutMenuItemInputSchema), import_zod.z.lazy(() => MenuItemRecipeUncheckedCreateWithoutMenuItemInputSchema)])
}).strict();
var MenuItemRecipeCreateManyMenuItemInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeCreateManyMenuItemInputSchema), import_zod.z.lazy(() => MenuItemRecipeCreateManyMenuItemInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var SalesTransactionsCreateWithoutMenuItemInputSchema = import_zod.z.object({
  posTransactionID: import_zod.z.string().optional().nullable(),
  price: import_zod.z.number(),
  total: import_zod.z.number(),
  transactionDate: import_zod.z.coerce.date(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  restaurant: import_zod.z.lazy(() => RestaurantCreateNestedOneWithoutSalesTransactionsInputSchema)
}).strict();
var SalesTransactionsUncheckedCreateWithoutMenuItemInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  posTransactionID: import_zod.z.string().optional().nullable(),
  restaurantId: import_zod.z.number().int(),
  price: import_zod.z.number(),
  total: import_zod.z.number(),
  transactionDate: import_zod.z.coerce.date(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var SalesTransactionsCreateOrConnectWithoutMenuItemInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => SalesTransactionsWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsCreateWithoutMenuItemInputSchema), import_zod.z.lazy(() => SalesTransactionsUncheckedCreateWithoutMenuItemInputSchema)])
}).strict();
var SalesTransactionsCreateManyMenuItemInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsCreateManyMenuItemInputSchema), import_zod.z.lazy(() => SalesTransactionsCreateManyMenuItemInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var LeftoverItemCreateWithoutMenuItemInputSchema = import_zod.z.object({
  date: import_zod.z.coerce.date(),
  quantity: import_zod.z.number().int(),
  reason: import_zod.z.string(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  restaurant: import_zod.z.lazy(() => RestaurantCreateNestedOneWithoutLeftoverItemInputSchema),
  recordedBy: import_zod.z.lazy(() => UserCreateNestedOneWithoutLeftoverItemInputSchema)
}).strict();
var LeftoverItemUncheckedCreateWithoutMenuItemInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  restaurantId: import_zod.z.number().int(),
  date: import_zod.z.coerce.date(),
  quantity: import_zod.z.number().int(),
  reason: import_zod.z.string(),
  recordedById: import_zod.z.number().int(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var LeftoverItemCreateOrConnectWithoutMenuItemInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemCreateWithoutMenuItemInputSchema), import_zod.z.lazy(() => LeftoverItemUncheckedCreateWithoutMenuItemInputSchema)])
}).strict();
var LeftoverItemCreateManyMenuItemInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemCreateManyMenuItemInputSchema), import_zod.z.lazy(() => LeftoverItemCreateManyMenuItemInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var NutritionalRecommendationCreateWithoutMenuItemInputSchema = import_zod.z.object({
  recommendation: import_zod.z.string(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var NutritionalRecommendationUncheckedCreateWithoutMenuItemInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  recommendation: import_zod.z.string(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var NutritionalRecommendationCreateOrConnectWithoutMenuItemInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => NutritionalRecommendationWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => NutritionalRecommendationCreateWithoutMenuItemInputSchema), import_zod.z.lazy(() => NutritionalRecommendationUncheckedCreateWithoutMenuItemInputSchema)])
}).strict();
var NutritionalRecommendationCreateManyMenuItemInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => NutritionalRecommendationCreateManyMenuItemInputSchema), import_zod.z.lazy(() => NutritionalRecommendationCreateManyMenuItemInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var MenuCategoryCreateWithoutMenuItemsInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  displayOrder: import_zod.z.number().int(),
  isActive: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  menu: import_zod.z.lazy(() => MenuCreateNestedOneWithoutMenuCategoryInputSchema)
}).strict();
var MenuCategoryUncheckedCreateWithoutMenuItemsInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  displayOrder: import_zod.z.number().int(),
  menuId: import_zod.z.number().int(),
  isActive: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var MenuCategoryCreateOrConnectWithoutMenuItemsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => MenuCategoryWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => MenuCategoryCreateWithoutMenuItemsInputSchema), import_zod.z.lazy(() => MenuCategoryUncheckedCreateWithoutMenuItemsInputSchema)])
}).strict();
var CustomerFeedbackCreateWithoutMenuItemInputSchema = import_zod.z.object({
  rating: import_zod.z.number().int(),
  comment: import_zod.z.string().optional().nullable(),
  source: import_zod.z.lazy(() => FeedbackSourceSchema),
  tags: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackCreatetagsInputSchema), import_zod.z.string().array()]).optional(),
  status: import_zod.z.lazy(() => FeedbackStatusSchema).optional(),
  responseText: import_zod.z.string().optional().nullable(),
  respondedAt: import_zod.z.coerce.date().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  restaurant: import_zod.z.lazy(() => RestaurantCreateNestedOneWithoutQustomerFeedbackInputSchema),
  respondedBy: import_zod.z.lazy(() => UserCreateNestedOneWithoutCustomerFeedbackInputSchema).optional()
}).strict();
var CustomerFeedbackUncheckedCreateWithoutMenuItemInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  restaurantId: import_zod.z.number().int(),
  rating: import_zod.z.number().int(),
  comment: import_zod.z.string().optional().nullable(),
  source: import_zod.z.lazy(() => FeedbackSourceSchema),
  tags: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackCreatetagsInputSchema), import_zod.z.string().array()]).optional(),
  status: import_zod.z.lazy(() => FeedbackStatusSchema).optional(),
  responseText: import_zod.z.string().optional().nullable(),
  respondedAt: import_zod.z.coerce.date().optional().nullable(),
  respondedById: import_zod.z.number().int().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var CustomerFeedbackCreateOrConnectWithoutMenuItemInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackCreateWithoutMenuItemInputSchema), import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateWithoutMenuItemInputSchema)])
}).strict();
var CustomerFeedbackCreateManyMenuItemInputEnvelopeSchema = import_zod.z.object({
  data: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackCreateManyMenuItemInputSchema), import_zod.z.lazy(() => CustomerFeedbackCreateManyMenuItemInputSchema).array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var DietaryRestrictionCreateWithoutMenuItemsInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  icon: import_zod.z.string().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  recipes: import_zod.z.lazy(() => RecipeCreateNestedManyWithoutDietaryRestrictionsInputSchema).optional(),
  ingredients: import_zod.z.lazy(() => IngredientCreateNestedManyWithoutDietaryRestrictionInputSchema).optional()
}).strict();
var DietaryRestrictionUncheckedCreateWithoutMenuItemsInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  icon: import_zod.z.string().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  recipes: import_zod.z.lazy(() => RecipeUncheckedCreateNestedManyWithoutDietaryRestrictionsInputSchema).optional(),
  ingredients: import_zod.z.lazy(() => IngredientUncheckedCreateNestedManyWithoutDietaryRestrictionInputSchema).optional()
}).strict();
var DietaryRestrictionCreateOrConnectWithoutMenuItemsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => DietaryRestrictionWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionCreateWithoutMenuItemsInputSchema), import_zod.z.lazy(() => DietaryRestrictionUncheckedCreateWithoutMenuItemsInputSchema)])
}).strict();
var NutritionalInfoUpsertWithoutMenuItemInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => NutritionalInfoUpdateWithoutMenuItemInputSchema), import_zod.z.lazy(() => NutritionalInfoUncheckedUpdateWithoutMenuItemInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => NutritionalInfoCreateWithoutMenuItemInputSchema), import_zod.z.lazy(() => NutritionalInfoUncheckedCreateWithoutMenuItemInputSchema)]),
  where: import_zod.z.lazy(() => NutritionalInfoWhereInputSchema).optional()
}).strict();
var NutritionalInfoUpdateToOneWithWhereWithoutMenuItemInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => NutritionalInfoWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => NutritionalInfoUpdateWithoutMenuItemInputSchema), import_zod.z.lazy(() => NutritionalInfoUncheckedUpdateWithoutMenuItemInputSchema)])
}).strict();
var NutritionalInfoUpdateWithoutMenuItemInputSchema = import_zod.z.object({
  calories: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  fat: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  saturatedFat: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  transFat: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  cholesterol: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  sodium: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  carbohydrates: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  fiber: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  sugar: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  protein: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var NutritionalInfoUncheckedUpdateWithoutMenuItemInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  calories: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  fat: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  saturatedFat: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  transFat: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  cholesterol: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  sodium: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  carbohydrates: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  fiber: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  sugar: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  protein: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var MenuUpsertWithoutMenuItemsInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => MenuUpdateWithoutMenuItemsInputSchema), import_zod.z.lazy(() => MenuUncheckedUpdateWithoutMenuItemsInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => MenuCreateWithoutMenuItemsInputSchema), import_zod.z.lazy(() => MenuUncheckedCreateWithoutMenuItemsInputSchema)]),
  where: import_zod.z.lazy(() => MenuWhereInputSchema).optional()
}).strict();
var MenuUpdateToOneWithWhereWithoutMenuItemsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => MenuWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => MenuUpdateWithoutMenuItemsInputSchema), import_zod.z.lazy(() => MenuUncheckedUpdateWithoutMenuItemsInputSchema)])
}).strict();
var MenuUpdateWithoutMenuItemsInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantUpdateOneRequiredWithoutMenusNestedInputSchema).optional(),
  MenuCategory: import_zod.z.lazy(() => MenuCategoryUpdateManyWithoutMenuNestedInputSchema).optional()
}).strict();
var MenuUncheckedUpdateWithoutMenuItemsInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  MenuCategory: import_zod.z.lazy(() => MenuCategoryUncheckedUpdateManyWithoutMenuNestedInputSchema).optional()
}).strict();
var RecipeUpsertWithWhereUniqueWithoutMenuItemsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateWithoutMenuItemsInputSchema), import_zod.z.lazy(() => RecipeUncheckedUpdateWithoutMenuItemsInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutMenuItemsInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutMenuItemsInputSchema)])
}).strict();
var RecipeUpdateWithWhereUniqueWithoutMenuItemsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateWithoutMenuItemsInputSchema), import_zod.z.lazy(() => RecipeUncheckedUpdateWithoutMenuItemsInputSchema)])
}).strict();
var RecipeUpdateManyWithWhereWithoutMenuItemsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateManyMutationInputSchema), import_zod.z.lazy(() => RecipeUncheckedUpdateManyWithoutMenuItemsInputSchema)])
}).strict();
var MenuItemRecipeUpsertWithWhereUniqueWithoutMenuItemInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => MenuItemRecipeWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeUpdateWithoutMenuItemInputSchema), import_zod.z.lazy(() => MenuItemRecipeUncheckedUpdateWithoutMenuItemInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeCreateWithoutMenuItemInputSchema), import_zod.z.lazy(() => MenuItemRecipeUncheckedCreateWithoutMenuItemInputSchema)])
}).strict();
var MenuItemRecipeUpdateWithWhereUniqueWithoutMenuItemInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => MenuItemRecipeWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeUpdateWithoutMenuItemInputSchema), import_zod.z.lazy(() => MenuItemRecipeUncheckedUpdateWithoutMenuItemInputSchema)])
}).strict();
var MenuItemRecipeUpdateManyWithWhereWithoutMenuItemInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => MenuItemRecipeScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => MenuItemRecipeUpdateManyMutationInputSchema), import_zod.z.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutMenuItemInputSchema)])
}).strict();
var SalesTransactionsUpsertWithWhereUniqueWithoutMenuItemInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => SalesTransactionsWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsUpdateWithoutMenuItemInputSchema), import_zod.z.lazy(() => SalesTransactionsUncheckedUpdateWithoutMenuItemInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsCreateWithoutMenuItemInputSchema), import_zod.z.lazy(() => SalesTransactionsUncheckedCreateWithoutMenuItemInputSchema)])
}).strict();
var SalesTransactionsUpdateWithWhereUniqueWithoutMenuItemInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => SalesTransactionsWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsUpdateWithoutMenuItemInputSchema), import_zod.z.lazy(() => SalesTransactionsUncheckedUpdateWithoutMenuItemInputSchema)])
}).strict();
var SalesTransactionsUpdateManyWithWhereWithoutMenuItemInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => SalesTransactionsScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => SalesTransactionsUpdateManyMutationInputSchema), import_zod.z.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutMenuItemInputSchema)])
}).strict();
var LeftoverItemUpsertWithWhereUniqueWithoutMenuItemInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemUpdateWithoutMenuItemInputSchema), import_zod.z.lazy(() => LeftoverItemUncheckedUpdateWithoutMenuItemInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemCreateWithoutMenuItemInputSchema), import_zod.z.lazy(() => LeftoverItemUncheckedCreateWithoutMenuItemInputSchema)])
}).strict();
var LeftoverItemUpdateWithWhereUniqueWithoutMenuItemInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => LeftoverItemWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemUpdateWithoutMenuItemInputSchema), import_zod.z.lazy(() => LeftoverItemUncheckedUpdateWithoutMenuItemInputSchema)])
}).strict();
var LeftoverItemUpdateManyWithWhereWithoutMenuItemInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => LeftoverItemScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => LeftoverItemUpdateManyMutationInputSchema), import_zod.z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutMenuItemInputSchema)])
}).strict();
var NutritionalRecommendationUpsertWithWhereUniqueWithoutMenuItemInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => NutritionalRecommendationWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => NutritionalRecommendationUpdateWithoutMenuItemInputSchema), import_zod.z.lazy(() => NutritionalRecommendationUncheckedUpdateWithoutMenuItemInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => NutritionalRecommendationCreateWithoutMenuItemInputSchema), import_zod.z.lazy(() => NutritionalRecommendationUncheckedCreateWithoutMenuItemInputSchema)])
}).strict();
var NutritionalRecommendationUpdateWithWhereUniqueWithoutMenuItemInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => NutritionalRecommendationWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => NutritionalRecommendationUpdateWithoutMenuItemInputSchema), import_zod.z.lazy(() => NutritionalRecommendationUncheckedUpdateWithoutMenuItemInputSchema)])
}).strict();
var NutritionalRecommendationUpdateManyWithWhereWithoutMenuItemInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => NutritionalRecommendationScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => NutritionalRecommendationUpdateManyMutationInputSchema), import_zod.z.lazy(() => NutritionalRecommendationUncheckedUpdateManyWithoutMenuItemInputSchema)])
}).strict();
var NutritionalRecommendationScalarWhereInputSchema = import_zod.z.object({
  AND: import_zod.z.union([import_zod.z.lazy(() => NutritionalRecommendationScalarWhereInputSchema), import_zod.z.lazy(() => NutritionalRecommendationScalarWhereInputSchema).array()]).optional(),
  OR: import_zod.z.lazy(() => NutritionalRecommendationScalarWhereInputSchema).array().optional(),
  NOT: import_zod.z.union([import_zod.z.lazy(() => NutritionalRecommendationScalarWhereInputSchema), import_zod.z.lazy(() => NutritionalRecommendationScalarWhereInputSchema).array()]).optional(),
  id: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  menuItemId: import_zod.z.union([import_zod.z.lazy(() => IntFilterSchema), import_zod.z.number()]).optional(),
  recommendation: import_zod.z.union([import_zod.z.lazy(() => StringFilterSchema), import_zod.z.string()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.lazy(() => DateTimeFilterSchema), import_zod.z.coerce.date()]).optional()
}).strict();
var MenuCategoryUpsertWithoutMenuItemsInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => MenuCategoryUpdateWithoutMenuItemsInputSchema), import_zod.z.lazy(() => MenuCategoryUncheckedUpdateWithoutMenuItemsInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => MenuCategoryCreateWithoutMenuItemsInputSchema), import_zod.z.lazy(() => MenuCategoryUncheckedCreateWithoutMenuItemsInputSchema)]),
  where: import_zod.z.lazy(() => MenuCategoryWhereInputSchema).optional()
}).strict();
var MenuCategoryUpdateToOneWithWhereWithoutMenuItemsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => MenuCategoryWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => MenuCategoryUpdateWithoutMenuItemsInputSchema), import_zod.z.lazy(() => MenuCategoryUncheckedUpdateWithoutMenuItemsInputSchema)])
}).strict();
var MenuCategoryUpdateWithoutMenuItemsInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  displayOrder: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  isActive: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  menu: import_zod.z.lazy(() => MenuUpdateOneRequiredWithoutMenuCategoryNestedInputSchema).optional()
}).strict();
var MenuCategoryUncheckedUpdateWithoutMenuItemsInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  displayOrder: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  menuId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  isActive: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var CustomerFeedbackUpsertWithWhereUniqueWithoutMenuItemInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackUpdateWithoutMenuItemInputSchema), import_zod.z.lazy(() => CustomerFeedbackUncheckedUpdateWithoutMenuItemInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackCreateWithoutMenuItemInputSchema), import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateWithoutMenuItemInputSchema)])
}).strict();
var CustomerFeedbackUpdateWithWhereUniqueWithoutMenuItemInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => CustomerFeedbackWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackUpdateWithoutMenuItemInputSchema), import_zod.z.lazy(() => CustomerFeedbackUncheckedUpdateWithoutMenuItemInputSchema)])
}).strict();
var CustomerFeedbackUpdateManyWithWhereWithoutMenuItemInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => CustomerFeedbackScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackUpdateManyMutationInputSchema), import_zod.z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutMenuItemInputSchema)])
}).strict();
var DietaryRestrictionUpsertWithWhereUniqueWithoutMenuItemsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => DietaryRestrictionWhereUniqueInputSchema),
  update: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionUpdateWithoutMenuItemsInputSchema), import_zod.z.lazy(() => DietaryRestrictionUncheckedUpdateWithoutMenuItemsInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionCreateWithoutMenuItemsInputSchema), import_zod.z.lazy(() => DietaryRestrictionUncheckedCreateWithoutMenuItemsInputSchema)])
}).strict();
var DietaryRestrictionUpdateWithWhereUniqueWithoutMenuItemsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => DietaryRestrictionWhereUniqueInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionUpdateWithoutMenuItemsInputSchema), import_zod.z.lazy(() => DietaryRestrictionUncheckedUpdateWithoutMenuItemsInputSchema)])
}).strict();
var DietaryRestrictionUpdateManyWithWhereWithoutMenuItemsInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => DietaryRestrictionScalarWhereInputSchema),
  data: import_zod.z.union([import_zod.z.lazy(() => DietaryRestrictionUpdateManyMutationInputSchema), import_zod.z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutMenuItemsInputSchema)])
}).strict();
var MenuItemCreateWithoutNutritionalInfoInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  price: import_zod.z.number(),
  foodCost: import_zod.z.number(),
  recipeIds: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeIdsInputSchema), import_zod.z.number().int().array()]).optional(),
  recipeServingsAmount: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema), import_zod.z.number().array()]).optional(),
  recipeServingsCost: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeServingsCostInputSchema), import_zod.z.number().array()]).optional(),
  allergens: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateallergensInputSchema), import_zod.z.string().array()]).optional(),
  nutritionalInfoId: import_zod.z.number().int().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  menu: import_zod.z.lazy(() => MenuCreateNestedOneWithoutMenuItemsInputSchema),
  recipes: import_zod.z.lazy(() => RecipeCreateNestedManyWithoutMenuItemsInputSchema).optional(),
  menuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeCreateNestedManyWithoutMenuItemInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsCreateNestedManyWithoutMenuItemInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemCreateNestedManyWithoutMenuItemInputSchema).optional(),
  nutritionalRecommendation: import_zod.z.lazy(() => NutritionalRecommendationCreateNestedManyWithoutMenuItemInputSchema).optional(),
  category: import_zod.z.lazy(() => MenuCategoryCreateNestedOneWithoutMenuItemsInputSchema).optional(),
  feedback: import_zod.z.lazy(() => CustomerFeedbackCreateNestedManyWithoutMenuItemInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionCreateNestedManyWithoutMenuItemsInputSchema).optional()
}).strict();
var MenuItemUncheckedCreateWithoutNutritionalInfoInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  price: import_zod.z.number(),
  foodCost: import_zod.z.number(),
  recipeIds: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeIdsInputSchema), import_zod.z.number().int().array()]).optional(),
  recipeServingsAmount: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema), import_zod.z.number().array()]).optional(),
  recipeServingsCost: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeServingsCostInputSchema), import_zod.z.number().array()]).optional(),
  allergens: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateallergensInputSchema), import_zod.z.string().array()]).optional(),
  nutritionalInfoId: import_zod.z.number().int().optional().nullable(),
  menuId: import_zod.z.number().int(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  categoryId: import_zod.z.number().int().optional().nullable(),
  recipes: import_zod.z.lazy(() => RecipeUncheckedCreateNestedManyWithoutMenuItemsInputSchema).optional(),
  menuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  nutritionalRecommendation: import_zod.z.lazy(() => NutritionalRecommendationUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  feedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedCreateNestedManyWithoutMenuItemInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutMenuItemsInputSchema).optional()
}).strict();
var MenuItemCreateOrConnectWithoutNutritionalInfoInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => MenuItemWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateWithoutNutritionalInfoInputSchema), import_zod.z.lazy(() => MenuItemUncheckedCreateWithoutNutritionalInfoInputSchema)])
}).strict();
var MenuItemUpsertWithoutNutritionalInfoInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateWithoutNutritionalInfoInputSchema), import_zod.z.lazy(() => MenuItemUncheckedUpdateWithoutNutritionalInfoInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateWithoutNutritionalInfoInputSchema), import_zod.z.lazy(() => MenuItemUncheckedCreateWithoutNutritionalInfoInputSchema)]),
  where: import_zod.z.lazy(() => MenuItemWhereInputSchema).optional()
}).strict();
var MenuItemUpdateToOneWithWhereWithoutNutritionalInfoInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => MenuItemWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateWithoutNutritionalInfoInputSchema), import_zod.z.lazy(() => MenuItemUncheckedUpdateWithoutNutritionalInfoInputSchema)])
}).strict();
var MenuItemUpdateWithoutNutritionalInfoInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIds: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeIdsInputSchema), import_zod.z.number().int().array()]).optional(),
  recipeServingsAmount: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema), import_zod.z.number().array()]).optional(),
  recipeServingsCost: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema), import_zod.z.number().array()]).optional(),
  allergens: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateallergensInputSchema), import_zod.z.string().array()]).optional(),
  nutritionalInfoId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  menu: import_zod.z.lazy(() => MenuUpdateOneRequiredWithoutMenuItemsNestedInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUpdateManyWithoutMenuItemsNestedInputSchema).optional(),
  menuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  nutritionalRecommendation: import_zod.z.lazy(() => NutritionalRecommendationUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  category: import_zod.z.lazy(() => MenuCategoryUpdateOneWithoutMenuItemsNestedInputSchema).optional(),
  feedback: import_zod.z.lazy(() => CustomerFeedbackUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUpdateManyWithoutMenuItemsNestedInputSchema).optional()
}).strict();
var MenuItemUncheckedUpdateWithoutNutritionalInfoInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIds: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeIdsInputSchema), import_zod.z.number().int().array()]).optional(),
  recipeServingsAmount: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema), import_zod.z.number().array()]).optional(),
  recipeServingsCost: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema), import_zod.z.number().array()]).optional(),
  allergens: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateallergensInputSchema), import_zod.z.string().array()]).optional(),
  nutritionalInfoId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  menuId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  categoryId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  recipes: import_zod.z.lazy(() => RecipeUncheckedUpdateManyWithoutMenuItemsNestedInputSchema).optional(),
  menuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  nutritionalRecommendation: import_zod.z.lazy(() => NutritionalRecommendationUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  feedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutMenuItemsNestedInputSchema).optional()
}).strict();
var RecipeCreateWithoutFoodCostHistoryInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.string().optional().nullable(),
  servings: import_zod.z.number().int(),
  cookTime: import_zod.z.number().int(),
  prepTime: import_zod.z.number().int(),
  frequency: import_zod.z.number().int().optional().nullable(),
  foodCost: import_zod.z.number().optional().nullable(),
  isDeleted: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  restaurant: import_zod.z.lazy(() => RestaurantCreateNestedOneWithoutRecipesInputSchema),
  cookBook: import_zod.z.lazy(() => CookBookCreateNestedOneWithoutRecipesInputSchema),
  ingredients: import_zod.z.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeCreateNestedManyWithoutRecipeInputSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionCreateNestedManyWithoutRecipesInputSchema).optional()
}).strict();
var RecipeUncheckedCreateWithoutFoodCostHistoryInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.string().optional().nullable(),
  servings: import_zod.z.number().int(),
  cookTime: import_zod.z.number().int(),
  prepTime: import_zod.z.number().int(),
  frequency: import_zod.z.number().int().optional().nullable(),
  restaurantId: import_zod.z.number().int(),
  cookBookId: import_zod.z.number().int(),
  foodCost: import_zod.z.number().optional().nullable(),
  isDeleted: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutRecipesInputSchema).optional()
}).strict();
var RecipeCreateOrConnectWithoutFoodCostHistoryInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutFoodCostHistoryInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutFoodCostHistoryInputSchema)])
}).strict();
var RecipeUpsertWithoutFoodCostHistoryInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateWithoutFoodCostHistoryInputSchema), import_zod.z.lazy(() => RecipeUncheckedUpdateWithoutFoodCostHistoryInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutFoodCostHistoryInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutFoodCostHistoryInputSchema)]),
  where: import_zod.z.lazy(() => RecipeWhereInputSchema).optional()
}).strict();
var RecipeUpdateToOneWithWhereWithoutFoodCostHistoryInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateWithoutFoodCostHistoryInputSchema), import_zod.z.lazy(() => RecipeUncheckedUpdateWithoutFoodCostHistoryInputSchema)])
}).strict();
var RecipeUpdateWithoutFoodCostHistoryInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  cookBook: import_zod.z.lazy(() => CookBookUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUpdateManyWithoutRecipeNestedInputSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUpdateManyWithoutRecipesNestedInputSchema).optional()
}).strict();
var RecipeUncheckedUpdateWithoutFoodCostHistoryInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookBookId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional()
}).strict();
var RecipeCreateWithoutPrepHistoryInputSchema = import_zod.z.object({
  name: import_zod.z.string(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.string().optional().nullable(),
  servings: import_zod.z.number().int(),
  cookTime: import_zod.z.number().int(),
  prepTime: import_zod.z.number().int(),
  frequency: import_zod.z.number().int().optional().nullable(),
  foodCost: import_zod.z.number().optional().nullable(),
  isDeleted: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  restaurant: import_zod.z.lazy(() => RestaurantCreateNestedOneWithoutRecipesInputSchema),
  cookBook: import_zod.z.lazy(() => CookBookCreateNestedOneWithoutRecipesInputSchema),
  ingredients: import_zod.z.lazy(() => RecipeIngredientCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeCreateNestedManyWithoutRecipeInputSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemCreateNestedManyWithoutRecipeInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionCreateNestedManyWithoutRecipesInputSchema).optional()
}).strict();
var RecipeUncheckedCreateWithoutPrepHistoryInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.string().optional().nullable(),
  servings: import_zod.z.number().int(),
  cookTime: import_zod.z.number().int(),
  prepTime: import_zod.z.number().int(),
  frequency: import_zod.z.number().int().optional().nullable(),
  restaurantId: import_zod.z.number().int(),
  cookBookId: import_zod.z.number().int(),
  foodCost: import_zod.z.number().optional().nullable(),
  isDeleted: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagUncheckedCreateNestedManyWithoutRecipesInputSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentUncheckedCreateNestedManyWithoutRecipeInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUncheckedCreateNestedManyWithoutRecipesInputSchema).optional()
}).strict();
var RecipeCreateOrConnectWithoutPrepHistoryInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeWhereUniqueInputSchema),
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutPrepHistoryInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutPrepHistoryInputSchema)])
}).strict();
var RecipeUpsertWithoutPrepHistoryInputSchema = import_zod.z.object({
  update: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateWithoutPrepHistoryInputSchema), import_zod.z.lazy(() => RecipeUncheckedUpdateWithoutPrepHistoryInputSchema)]),
  create: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateWithoutPrepHistoryInputSchema), import_zod.z.lazy(() => RecipeUncheckedCreateWithoutPrepHistoryInputSchema)]),
  where: import_zod.z.lazy(() => RecipeWhereInputSchema).optional()
}).strict();
var RecipeUpdateToOneWithWhereWithoutPrepHistoryInputSchema = import_zod.z.object({
  where: import_zod.z.lazy(() => RecipeWhereInputSchema).optional(),
  data: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateWithoutPrepHistoryInputSchema), import_zod.z.lazy(() => RecipeUncheckedUpdateWithoutPrepHistoryInputSchema)])
}).strict();
var RecipeUpdateWithoutPrepHistoryInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  cookBook: import_zod.z.lazy(() => CookBookUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUpdateManyWithoutRecipeNestedInputSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUpdateManyWithoutRecipesNestedInputSchema).optional()
}).strict();
var RecipeUncheckedUpdateWithoutPrepHistoryInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookBookId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional()
}).strict();
var MenuItemCreateManyCategoryInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  price: import_zod.z.number(),
  foodCost: import_zod.z.number(),
  recipeIds: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeIdsInputSchema), import_zod.z.number().int().array()]).optional(),
  recipeServingsAmount: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema), import_zod.z.number().array()]).optional(),
  recipeServingsCost: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeServingsCostInputSchema), import_zod.z.number().array()]).optional(),
  allergens: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateallergensInputSchema), import_zod.z.string().array()]).optional(),
  nutritionalInfoId: import_zod.z.number().int().optional().nullable(),
  menuId: import_zod.z.number().int(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var MenuItemUpdateWithoutCategoryInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIds: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeIdsInputSchema), import_zod.z.number().int().array()]).optional(),
  recipeServingsAmount: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema), import_zod.z.number().array()]).optional(),
  recipeServingsCost: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema), import_zod.z.number().array()]).optional(),
  allergens: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateallergensInputSchema), import_zod.z.string().array()]).optional(),
  nutritionalInfoId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  nutritionalInfo: import_zod.z.lazy(() => NutritionalInfoUpdateOneWithoutMenuItemNestedInputSchema).optional(),
  menu: import_zod.z.lazy(() => MenuUpdateOneRequiredWithoutMenuItemsNestedInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUpdateManyWithoutMenuItemsNestedInputSchema).optional(),
  menuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  nutritionalRecommendation: import_zod.z.lazy(() => NutritionalRecommendationUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  feedback: import_zod.z.lazy(() => CustomerFeedbackUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUpdateManyWithoutMenuItemsNestedInputSchema).optional()
}).strict();
var MenuItemUncheckedUpdateWithoutCategoryInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIds: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeIdsInputSchema), import_zod.z.number().int().array()]).optional(),
  recipeServingsAmount: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema), import_zod.z.number().array()]).optional(),
  recipeServingsCost: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema), import_zod.z.number().array()]).optional(),
  allergens: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateallergensInputSchema), import_zod.z.string().array()]).optional(),
  nutritionalInfoId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  menuId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  nutritionalInfo: import_zod.z.lazy(() => NutritionalInfoUncheckedUpdateOneWithoutMenuItemNestedInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUncheckedUpdateManyWithoutMenuItemsNestedInputSchema).optional(),
  menuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  nutritionalRecommendation: import_zod.z.lazy(() => NutritionalRecommendationUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  feedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutMenuItemsNestedInputSchema).optional()
}).strict();
var MenuItemUncheckedUpdateManyWithoutCategoryInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIds: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeIdsInputSchema), import_zod.z.number().int().array()]).optional(),
  recipeServingsAmount: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema), import_zod.z.number().array()]).optional(),
  recipeServingsCost: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema), import_zod.z.number().array()]).optional(),
  allergens: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateallergensInputSchema), import_zod.z.string().array()]).optional(),
  nutritionalInfoId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  menuId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var RecipeIngredientCreateManyRecipeVersionInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  recipeId: import_zod.z.number().int(),
  ingredientId: import_zod.z.number().int(),
  quantity: import_zod.z.number(),
  unit: import_zod.z.string(),
  joinAt: import_zod.z.coerce.date().optional()
}).strict();
var RecipeInstructionCreateManyRecipeVersionInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  recipeId: import_zod.z.number().int(),
  stepNumber: import_zod.z.number().int(),
  instruction: import_zod.z.string(),
  imageUrl: import_zod.z.string().optional().nullable()
}).strict();
var RecipeIngredientUpdateWithoutRecipeVersionInputSchema = import_zod.z.object({
  quantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  joinAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  recipe: import_zod.z.lazy(() => RecipeUpdateOneRequiredWithoutIngredientsNestedInputSchema).optional(),
  ingredient: import_zod.z.lazy(() => IngredientUpdateOneRequiredWithoutRecipeIngredientsNestedInputSchema).optional()
}).strict();
var RecipeIngredientUncheckedUpdateWithoutRecipeVersionInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  ingredientId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  joinAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var RecipeIngredientUncheckedUpdateManyWithoutRecipeVersionInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  ingredientId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  joinAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var RecipeInstructionUpdateWithoutRecipeVersionInputSchema = import_zod.z.object({
  stepNumber: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  instruction: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  recipe: import_zod.z.lazy(() => RecipeUpdateOneRequiredWithoutInstructionsNestedInputSchema).optional()
}).strict();
var RecipeInstructionUncheckedUpdateWithoutRecipeVersionInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  stepNumber: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  instruction: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var RecipeInstructionUncheckedUpdateManyWithoutRecipeVersionInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  stepNumber: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  instruction: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var RecipeEquipmentCreateManyEquipmentInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  recipeId: import_zod.z.number().int(),
  notes: import_zod.z.string().optional().nullable()
}).strict();
var MaintenanceLogCreateManyEquipmentInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  date: import_zod.z.coerce.date(),
  type: import_zod.z.lazy(() => MaintenanceTypeSchema),
  description: import_zod.z.string(),
  cost: import_zod.z.number().optional().nullable(),
  performedBy: import_zod.z.string(),
  notes: import_zod.z.string().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var RecipeEquipmentUpdateWithoutEquipmentInputSchema = import_zod.z.object({
  notes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  recipe: import_zod.z.lazy(() => RecipeUpdateOneRequiredWithoutEquipmentNestedInputSchema).optional()
}).strict();
var RecipeEquipmentUncheckedUpdateWithoutEquipmentInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  notes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var RecipeEquipmentUncheckedUpdateManyWithoutEquipmentInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  notes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var MaintenanceLogUpdateWithoutEquipmentInputSchema = import_zod.z.object({
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  type: import_zod.z.union([import_zod.z.lazy(() => MaintenanceTypeSchema), import_zod.z.lazy(() => EnumMaintenanceTypeFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  cost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  performedBy: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  notes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var MaintenanceLogUncheckedUpdateWithoutEquipmentInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  type: import_zod.z.union([import_zod.z.lazy(() => MaintenanceTypeSchema), import_zod.z.lazy(() => EnumMaintenanceTypeFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  cost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  performedBy: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  notes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var MaintenanceLogUncheckedUpdateManyWithoutEquipmentInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  type: import_zod.z.union([import_zod.z.lazy(() => MaintenanceTypeSchema), import_zod.z.lazy(() => EnumMaintenanceTypeFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  cost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  performedBy: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  notes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ChecklistItemCreateManyChecklistInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  description: import_zod.z.string(),
  order: import_zod.z.number().int(),
  type: import_zod.z.lazy(() => ChecklistItemTypeSchema),
  requiredPhotos: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var ChecklistCompleteCreateManyChecklistInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  completedById: import_zod.z.number().int(),
  date: import_zod.z.coerce.date(),
  notes: import_zod.z.string().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var ChecklistItemUpdateWithoutChecklistInputSchema = import_zod.z.object({
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  order: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  type: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemTypeSchema), import_zod.z.lazy(() => EnumChecklistItemTypeFieldUpdateOperationsInputSchema)]).optional(),
  requiredPhotos: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  completions: import_zod.z.lazy(() => ChecklistItemCompleteUpdateManyWithoutChecklistItemNestedInputSchema).optional()
}).strict();
var ChecklistItemUncheckedUpdateWithoutChecklistInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  order: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  type: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemTypeSchema), import_zod.z.lazy(() => EnumChecklistItemTypeFieldUpdateOperationsInputSchema)]).optional(),
  requiredPhotos: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  completions: import_zod.z.lazy(() => ChecklistItemCompleteUncheckedUpdateManyWithoutChecklistItemNestedInputSchema).optional()
}).strict();
var ChecklistItemUncheckedUpdateManyWithoutChecklistInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  order: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  type: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemTypeSchema), import_zod.z.lazy(() => EnumChecklistItemTypeFieldUpdateOperationsInputSchema)]).optional(),
  requiredPhotos: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ChecklistCompleteUpdateWithoutChecklistInputSchema = import_zod.z.object({
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  notes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  completedBy: import_zod.z.lazy(() => UserUpdateOneRequiredWithoutChecklistCompleteNestedInputSchema).optional(),
  items: import_zod.z.lazy(() => ChecklistItemCompleteUpdateManyWithoutChecklistCompleteNestedInputSchema).optional()
}).strict();
var ChecklistCompleteUncheckedUpdateWithoutChecklistInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  completedById: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  notes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  items: import_zod.z.lazy(() => ChecklistItemCompleteUncheckedUpdateManyWithoutChecklistCompleteNestedInputSchema).optional()
}).strict();
var ChecklistCompleteUncheckedUpdateManyWithoutChecklistInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  completedById: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  notes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ChecklistItemCompleteCreateManyChecklistItemInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  checklistCompleteId: import_zod.z.number().int(),
  status: import_zod.z.lazy(() => ChecklistStatusSchema),
  notes: import_zod.z.string().optional().nullable(),
  photoUrls: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteCreatephotoUrlsInputSchema), import_zod.z.string().array()]).optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var ChecklistItemCompleteUpdateWithoutChecklistItemInputSchema = import_zod.z.object({
  status: import_zod.z.union([import_zod.z.lazy(() => ChecklistStatusSchema), import_zod.z.lazy(() => EnumChecklistStatusFieldUpdateOperationsInputSchema)]).optional(),
  notes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  photoUrls: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteUpdatephotoUrlsInputSchema), import_zod.z.string().array()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteUpdateOneRequiredWithoutItemsNestedInputSchema).optional()
}).strict();
var ChecklistItemCompleteUncheckedUpdateWithoutChecklistItemInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  checklistCompleteId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => ChecklistStatusSchema), import_zod.z.lazy(() => EnumChecklistStatusFieldUpdateOperationsInputSchema)]).optional(),
  notes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  photoUrls: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteUpdatephotoUrlsInputSchema), import_zod.z.string().array()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ChecklistItemCompleteUncheckedUpdateManyWithoutChecklistItemInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  checklistCompleteId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => ChecklistStatusSchema), import_zod.z.lazy(() => EnumChecklistStatusFieldUpdateOperationsInputSchema)]).optional(),
  notes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  photoUrls: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteUpdatephotoUrlsInputSchema), import_zod.z.string().array()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ChecklistItemCompleteCreateManyChecklistCompleteInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  checklistItemId: import_zod.z.number().int(),
  status: import_zod.z.lazy(() => ChecklistStatusSchema),
  notes: import_zod.z.string().optional().nullable(),
  photoUrls: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteCreatephotoUrlsInputSchema), import_zod.z.string().array()]).optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var ChecklistItemCompleteUpdateWithoutChecklistCompleteInputSchema = import_zod.z.object({
  status: import_zod.z.union([import_zod.z.lazy(() => ChecklistStatusSchema), import_zod.z.lazy(() => EnumChecklistStatusFieldUpdateOperationsInputSchema)]).optional(),
  notes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  photoUrls: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteUpdatephotoUrlsInputSchema), import_zod.z.string().array()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  checklistItem: import_zod.z.lazy(() => ChecklistItemUpdateOneRequiredWithoutCompletionsNestedInputSchema).optional()
}).strict();
var ChecklistItemCompleteUncheckedUpdateWithoutChecklistCompleteInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  checklistItemId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => ChecklistStatusSchema), import_zod.z.lazy(() => EnumChecklistStatusFieldUpdateOperationsInputSchema)]).optional(),
  notes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  photoUrls: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteUpdatephotoUrlsInputSchema), import_zod.z.string().array()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ChecklistItemCompleteUncheckedUpdateManyWithoutChecklistCompleteInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  checklistItemId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => ChecklistStatusSchema), import_zod.z.lazy(() => EnumChecklistStatusFieldUpdateOperationsInputSchema)]).optional(),
  notes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  photoUrls: import_zod.z.union([import_zod.z.lazy(() => ChecklistItemCompleteUpdatephotoUrlsInputSchema), import_zod.z.string().array()]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var IngredientCreateManyDietaryRestrictionInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  category: import_zod.z.string(),
  price: import_zod.z.number()
}).strict();
var MenuItemUpdateWithoutDietaryRestrictionsInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIds: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeIdsInputSchema), import_zod.z.number().int().array()]).optional(),
  recipeServingsAmount: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema), import_zod.z.number().array()]).optional(),
  recipeServingsCost: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema), import_zod.z.number().array()]).optional(),
  allergens: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateallergensInputSchema), import_zod.z.string().array()]).optional(),
  nutritionalInfoId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  nutritionalInfo: import_zod.z.lazy(() => NutritionalInfoUpdateOneWithoutMenuItemNestedInputSchema).optional(),
  menu: import_zod.z.lazy(() => MenuUpdateOneRequiredWithoutMenuItemsNestedInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUpdateManyWithoutMenuItemsNestedInputSchema).optional(),
  menuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  nutritionalRecommendation: import_zod.z.lazy(() => NutritionalRecommendationUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  category: import_zod.z.lazy(() => MenuCategoryUpdateOneWithoutMenuItemsNestedInputSchema).optional(),
  feedback: import_zod.z.lazy(() => CustomerFeedbackUpdateManyWithoutMenuItemNestedInputSchema).optional()
}).strict();
var MenuItemUncheckedUpdateWithoutDietaryRestrictionsInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIds: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeIdsInputSchema), import_zod.z.number().int().array()]).optional(),
  recipeServingsAmount: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema), import_zod.z.number().array()]).optional(),
  recipeServingsCost: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema), import_zod.z.number().array()]).optional(),
  allergens: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateallergensInputSchema), import_zod.z.string().array()]).optional(),
  nutritionalInfoId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  menuId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  categoryId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  nutritionalInfo: import_zod.z.lazy(() => NutritionalInfoUncheckedUpdateOneWithoutMenuItemNestedInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUncheckedUpdateManyWithoutMenuItemsNestedInputSchema).optional(),
  menuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  nutritionalRecommendation: import_zod.z.lazy(() => NutritionalRecommendationUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  feedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional()
}).strict();
var MenuItemUncheckedUpdateManyWithoutDietaryRestrictionsInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIds: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeIdsInputSchema), import_zod.z.number().int().array()]).optional(),
  recipeServingsAmount: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema), import_zod.z.number().array()]).optional(),
  recipeServingsCost: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema), import_zod.z.number().array()]).optional(),
  allergens: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateallergensInputSchema), import_zod.z.string().array()]).optional(),
  nutritionalInfoId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  menuId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  categoryId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var RecipeUpdateWithoutDietaryRestrictionsInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  cookBook: import_zod.z.lazy(() => CookBookUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUpdateManyWithoutRecipeNestedInputSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentUpdateManyWithoutRecipeNestedInputSchema).optional()
}).strict();
var RecipeUncheckedUpdateWithoutDietaryRestrictionsInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookBookId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional()
}).strict();
var RecipeUncheckedUpdateManyWithoutDietaryRestrictionsInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookBookId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var IngredientUpdateWithoutDietaryRestrictionInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  category: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIngredients: import_zod.z.lazy(() => RecipeIngredientUpdateManyWithoutIngredientNestedInputSchema).optional(),
  inventoryItems: import_zod.z.lazy(() => InventoryItemUpdateManyWithoutIngredientNestedInputSchema).optional(),
  orderItems: import_zod.z.lazy(() => OrderItemUpdateManyWithoutIngredientNestedInputSchema).optional(),
  vendors: import_zod.z.lazy(() => VendorUpdateManyWithoutIngredientsNestedInputSchema).optional(),
  WasteRecord: import_zod.z.lazy(() => WasteRecordUpdateManyWithoutIngredienteNestedInputSchema).optional(),
  IngredientAllergen: import_zod.z.lazy(() => IngredientAllergenUpdateManyWithoutIngredientNestedInputSchema).optional(),
  SupplierPriceHistory: import_zod.z.lazy(() => SupplierPriceHistoryUpdateManyWithoutIngredientNestedInputSchema).optional()
}).strict();
var IngredientUncheckedUpdateWithoutDietaryRestrictionInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  category: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIngredients: import_zod.z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  inventoryItems: import_zod.z.lazy(() => InventoryItemUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  orderItems: import_zod.z.lazy(() => OrderItemUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  vendors: import_zod.z.lazy(() => VendorUncheckedUpdateManyWithoutIngredientsNestedInputSchema).optional(),
  WasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedUpdateManyWithoutIngredienteNestedInputSchema).optional(),
  IngredientAllergen: import_zod.z.lazy(() => IngredientAllergenUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  SupplierPriceHistory: import_zod.z.lazy(() => SupplierPriceHistoryUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional()
}).strict();
var IngredientUncheckedUpdateManyWithoutDietaryRestrictionInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  category: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var RecipeUpdateWithoutTagsInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  cookBook: import_zod.z.lazy(() => CookBookUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUpdateManyWithoutRecipeNestedInputSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUpdateManyWithoutRecipeNestedInputSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUpdateManyWithoutRecipesNestedInputSchema).optional()
}).strict();
var RecipeUncheckedUpdateWithoutTagsInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookBookId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional()
}).strict();
var RecipeUncheckedUpdateManyWithoutTagsInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookBookId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ProductionPlanItemCreateManyProductionPlanInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  recipeId: import_zod.z.number().int(),
  quantity: import_zod.z.number().int(),
  unit: import_zod.z.string(),
  assignedToId: import_zod.z.number().int().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var ProductionPlanItemUpdateWithoutProductionPlanInputSchema = import_zod.z.object({
  quantity: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  recipe: import_zod.z.lazy(() => RecipeUpdateOneRequiredWithoutProductionPlanItemNestedInputSchema).optional(),
  assignedTo: import_zod.z.lazy(() => UserUpdateOneWithoutProductionPlanItemNestedInputSchema).optional()
}).strict();
var ProductionPlanItemUncheckedUpdateWithoutProductionPlanInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  assignedToId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ProductionPlanItemUncheckedUpdateManyWithoutProductionPlanInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  assignedToId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var IngredientAllergenCreateManyAllergenInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  ingredientId: import_zod.z.number().int()
}).strict();
var IngredientAllergenUpdateWithoutAllergenInputSchema = import_zod.z.object({
  ingredient: import_zod.z.lazy(() => IngredientUpdateOneRequiredWithoutIngredientAllergenNestedInputSchema).optional()
}).strict();
var IngredientAllergenUncheckedUpdateWithoutAllergenInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  ingredientId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var IngredientAllergenUncheckedUpdateManyWithoutAllergenInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  ingredientId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var RestaurantCreateManyOrganizationInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  imageUrl: import_zod.z.string().optional().nullable(),
  address: import_zod.z.string(),
  city: import_zod.z.string(),
  zipCode: import_zod.z.string(),
  state: import_zod.z.string(),
  owner: import_zod.z.string(),
  foodCost: import_zod.z.number().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  isDeleted: import_zod.z.boolean().optional(),
  deleted: import_zod.z.coerce.date().optional().nullable()
}).strict();
var UserCreateManyOrganizationInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  email: import_zod.z.string(),
  sub: import_zod.z.number().int().optional().nullable(),
  passwordHash: import_zod.z.string(),
  firstName: import_zod.z.string(),
  lastName: import_zod.z.string(),
  profileImage: import_zod.z.string().optional().nullable(),
  verified: import_zod.z.boolean().optional(),
  role: import_zod.z.lazy(() => UserRoleSchema),
  restaurantId: import_zod.z.number().int().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var RestaurantUpdateWithoutOrganizationInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  address: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  city: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  zipCode: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  state: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  owner: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  deleted: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  users: import_zod.z.lazy(() => UserUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: import_zod.z.lazy(() => CookBookUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: import_zod.z.lazy(() => InventoryUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: import_zod.z.lazy(() => OrderUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: import_zod.z.lazy(() => MenuUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipment: import_zod.z.lazy(() => EquipmentUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklist: import_zod.z.lazy(() => QualityChecklistUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qustomerFeedback: import_zod.z.lazy(() => CustomerFeedbackUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();
var RestaurantUncheckedUpdateWithoutOrganizationInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  address: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  city: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  zipCode: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  state: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  owner: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  deleted: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  users: import_zod.z.lazy(() => UserUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  cookbooks: import_zod.z.lazy(() => CookBookUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  inventory: import_zod.z.lazy(() => InventoryUncheckedUpdateOneWithoutRestaurantNestedInputSchema).optional(),
  orders: import_zod.z.lazy(() => OrderUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  menus: import_zod.z.lazy(() => MenuUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  equipment: import_zod.z.lazy(() => EquipmentUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qualityChecklist: import_zod.z.lazy(() => QualityChecklistUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional(),
  qustomerFeedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRestaurantNestedInputSchema).optional()
}).strict();
var RestaurantUncheckedUpdateManyWithoutOrganizationInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  address: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  city: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  zipCode: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  state: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  owner: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  deleted: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var UserUpdateWithoutOrganizationInputSchema = import_zod.z.object({
  email: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: import_zod.z.union([import_zod.z.lazy(() => UserRoleSchema), import_zod.z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantUpdateOneWithoutUsersNestedInputSchema).optional(),
  shifts: import_zod.z.lazy(() => ShiftUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var UserUncheckedUpdateWithoutOrganizationInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  email: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: import_zod.z.union([import_zod.z.lazy(() => UserRoleSchema), import_zod.z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  shifts: import_zod.z.lazy(() => ShiftUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemUncheckedUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var UserUncheckedUpdateManyWithoutOrganizationInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  email: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: import_zod.z.union([import_zod.z.lazy(() => UserRoleSchema), import_zod.z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var UserCreateManyRestaurantInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  email: import_zod.z.string(),
  sub: import_zod.z.number().int().optional().nullable(),
  passwordHash: import_zod.z.string(),
  firstName: import_zod.z.string(),
  lastName: import_zod.z.string(),
  profileImage: import_zod.z.string().optional().nullable(),
  verified: import_zod.z.boolean().optional(),
  role: import_zod.z.lazy(() => UserRoleSchema),
  organizationId: import_zod.z.number().int().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var CookBookCreateManyRestaurantInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  imageUrl: import_zod.z.string().optional().nullable(),
  category: import_zod.z.string()
}).strict();
var OrderCreateManyRestaurantInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  vendorId: import_zod.z.number().int(),
  status: import_zod.z.lazy(() => OrderStatusSchema),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var RecipeCreateManyRestaurantInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.string().optional().nullable(),
  servings: import_zod.z.number().int(),
  cookTime: import_zod.z.number().int(),
  prepTime: import_zod.z.number().int(),
  frequency: import_zod.z.number().int().optional().nullable(),
  cookBookId: import_zod.z.number().int(),
  foodCost: import_zod.z.number().optional().nullable(),
  isDeleted: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var MenuCreateManyRestaurantInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var SalesTransactionsCreateManyRestaurantInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  posTransactionID: import_zod.z.string().optional().nullable(),
  menuItemId: import_zod.z.number().int(),
  price: import_zod.z.number(),
  total: import_zod.z.number(),
  transactionDate: import_zod.z.coerce.date(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var LeftoverItemCreateManyRestaurantInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  date: import_zod.z.coerce.date(),
  menuItemId: import_zod.z.number().int(),
  quantity: import_zod.z.number().int(),
  reason: import_zod.z.string(),
  recordedById: import_zod.z.number().int(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var WasteRecordCreateManyRestaurantInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  date: import_zod.z.coerce.date(),
  ingredientId: import_zod.z.number().int(),
  quantity: import_zod.z.number(),
  unit: import_zod.z.string(),
  reason: import_zod.z.string(),
  recordedById: import_zod.z.number().int(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var ProductionPlanCreateManyRestaurantInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  date: import_zod.z.coerce.date(),
  createdById: import_zod.z.number().int(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var EquipmentCreateManyRestaurantInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  model: import_zod.z.string().optional().nullable(),
  serialNumber: import_zod.z.string().optional().nullable(),
  purchaseDate: import_zod.z.coerce.date().optional().nullable(),
  lastMaintenance: import_zod.z.coerce.date().optional().nullable(),
  nextMaintenance: import_zod.z.coerce.date().optional().nullable(),
  status: import_zod.z.lazy(() => EquipmentStatusSchema).optional(),
  location: import_zod.z.string().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var QualityChecklistCreateManyRestaurantInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  frequency: import_zod.z.lazy(() => ChecklistFrequencySchema).optional(),
  isActive: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var CustomerFeedbackCreateManyRestaurantInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  menuItemId: import_zod.z.number().int().optional().nullable(),
  rating: import_zod.z.number().int(),
  comment: import_zod.z.string().optional().nullable(),
  source: import_zod.z.lazy(() => FeedbackSourceSchema),
  tags: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackCreatetagsInputSchema), import_zod.z.string().array()]).optional(),
  status: import_zod.z.lazy(() => FeedbackStatusSchema).optional(),
  responseText: import_zod.z.string().optional().nullable(),
  respondedAt: import_zod.z.coerce.date().optional().nullable(),
  respondedById: import_zod.z.number().int().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var UserUpdateWithoutRestaurantInputSchema = import_zod.z.object({
  email: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: import_zod.z.union([import_zod.z.lazy(() => UserRoleSchema), import_zod.z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  organization: import_zod.z.lazy(() => OrganizationUpdateOneWithoutUsersNestedInputSchema).optional(),
  shifts: import_zod.z.lazy(() => ShiftUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var UserUncheckedUpdateWithoutRestaurantInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  email: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: import_zod.z.union([import_zod.z.lazy(() => UserRoleSchema), import_zod.z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  shifts: import_zod.z.lazy(() => ShiftUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  inventoryUpdates: import_zod.z.lazy(() => InventoryItemUncheckedUpdateManyWithoutLastUpdatedByNestedInputSchema).optional(),
  sessions: import_zod.z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  passwordResets: import_zod.z.lazy(() => PasswordResetUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  wasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedUpdateManyWithoutRecordedByNestedInputSchema).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  productionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutAssignedToNestedInputSchema).optional(),
  availability: import_zod.z.lazy(() => AvailabilityUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  schedulingConstraint: import_zod.z.lazy(() => SchedulingConstraintUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  inventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  checklistComplete: import_zod.z.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutCompletedByNestedInputSchema).optional(),
  customerFeedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutRespondedByNestedInputSchema).optional(),
  recipeVersionsCreated: import_zod.z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutCreatedByNestedInputSchema).optional(),
  recipeVersionsApproved: import_zod.z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutApprovedByNestedInputSchema).optional()
}).strict();
var UserUncheckedUpdateManyWithoutRestaurantInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  email: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  sub: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  passwordHash: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  firstName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  lastName: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  profileImage: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  verified: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  role: import_zod.z.union([import_zod.z.lazy(() => UserRoleSchema), import_zod.z.lazy(() => EnumUserRoleFieldUpdateOperationsInputSchema)]).optional(),
  organizationId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var CookBookUpdateWithoutRestaurantInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  category: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recipes: import_zod.z.lazy(() => RecipeUpdateManyWithoutCookBookNestedInputSchema).optional()
}).strict();
var CookBookUncheckedUpdateWithoutRestaurantInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  category: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recipes: import_zod.z.lazy(() => RecipeUncheckedUpdateManyWithoutCookBookNestedInputSchema).optional()
}).strict();
var CookBookUncheckedUpdateManyWithoutRestaurantInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  category: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var OrderUpdateWithoutRestaurantInputSchema = import_zod.z.object({
  status: import_zod.z.union([import_zod.z.lazy(() => OrderStatusSchema), import_zod.z.lazy(() => EnumOrderStatusFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  vendor: import_zod.z.lazy(() => VendorUpdateOneRequiredWithoutOrdersNestedInputSchema).optional(),
  items: import_zod.z.lazy(() => OrderItemUpdateManyWithoutOrderNestedInputSchema).optional()
}).strict();
var OrderUncheckedUpdateWithoutRestaurantInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  vendorId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => OrderStatusSchema), import_zod.z.lazy(() => EnumOrderStatusFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  items: import_zod.z.lazy(() => OrderItemUncheckedUpdateManyWithoutOrderNestedInputSchema).optional()
}).strict();
var OrderUncheckedUpdateManyWithoutRestaurantInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  vendorId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => OrderStatusSchema), import_zod.z.lazy(() => EnumOrderStatusFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var RecipeUpdateWithoutRestaurantInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  cookBook: import_zod.z.lazy(() => CookBookUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUpdateManyWithoutRecipeNestedInputSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUpdateManyWithoutRecipesNestedInputSchema).optional()
}).strict();
var RecipeUncheckedUpdateWithoutRestaurantInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  cookBookId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional()
}).strict();
var RecipeUncheckedUpdateManyWithoutRestaurantInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  cookBookId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var MenuUpdateWithoutRestaurantInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUpdateManyWithoutMenuNestedInputSchema).optional(),
  MenuCategory: import_zod.z.lazy(() => MenuCategoryUpdateManyWithoutMenuNestedInputSchema).optional()
}).strict();
var MenuUncheckedUpdateWithoutRestaurantInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUncheckedUpdateManyWithoutMenuNestedInputSchema).optional(),
  MenuCategory: import_zod.z.lazy(() => MenuCategoryUncheckedUpdateManyWithoutMenuNestedInputSchema).optional()
}).strict();
var MenuUncheckedUpdateManyWithoutRestaurantInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var SalesTransactionsUpdateWithoutRestaurantInputSchema = import_zod.z.object({
  posTransactionID: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  total: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  transactionDate: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  menuItem: import_zod.z.lazy(() => MenuItemUpdateOneRequiredWithoutSalesTransactionsNestedInputSchema).optional()
}).strict();
var SalesTransactionsUncheckedUpdateWithoutRestaurantInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  posTransactionID: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  menuItemId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  total: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  transactionDate: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var SalesTransactionsUncheckedUpdateManyWithoutRestaurantInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  posTransactionID: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  menuItemId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  total: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  transactionDate: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var LeftoverItemUpdateWithoutRestaurantInputSchema = import_zod.z.object({
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  reason: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  menuItem: import_zod.z.lazy(() => MenuItemUpdateOneRequiredWithoutLeftoverItemNestedInputSchema).optional(),
  recordedBy: import_zod.z.lazy(() => UserUpdateOneRequiredWithoutLeftoverItemNestedInputSchema).optional()
}).strict();
var LeftoverItemUncheckedUpdateWithoutRestaurantInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  menuItemId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  reason: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recordedById: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var LeftoverItemUncheckedUpdateManyWithoutRestaurantInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  menuItemId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  reason: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recordedById: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var WasteRecordUpdateWithoutRestaurantInputSchema = import_zod.z.object({
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  reason: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingrediente: import_zod.z.lazy(() => IngredientUpdateOneRequiredWithoutWasteRecordNestedInputSchema).optional(),
  recordedBy: import_zod.z.lazy(() => UserUpdateOneRequiredWithoutWasteRecordNestedInputSchema).optional()
}).strict();
var WasteRecordUncheckedUpdateWithoutRestaurantInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingredientId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  reason: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recordedById: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var WasteRecordUncheckedUpdateManyWithoutRestaurantInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingredientId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  reason: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recordedById: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ProductionPlanUpdateWithoutRestaurantInputSchema = import_zod.z.object({
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdBy: import_zod.z.lazy(() => UserUpdateOneRequiredWithoutProductionPlanNestedInputSchema).optional(),
  items: import_zod.z.lazy(() => ProductionPlanItemUpdateManyWithoutProductionPlanNestedInputSchema).optional()
}).strict();
var ProductionPlanUncheckedUpdateWithoutRestaurantInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdById: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  items: import_zod.z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutProductionPlanNestedInputSchema).optional()
}).strict();
var ProductionPlanUncheckedUpdateManyWithoutRestaurantInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdById: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var EquipmentUpdateWithoutRestaurantInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  model: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  serialNumber: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  purchaseDate: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastMaintenance: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  nextMaintenance: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  status: import_zod.z.union([import_zod.z.lazy(() => EquipmentStatusSchema), import_zod.z.lazy(() => EnumEquipmentStatusFieldUpdateOperationsInputSchema)]).optional(),
  location: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  recipes: import_zod.z.lazy(() => RecipeEquipmentUpdateManyWithoutEquipmentNestedInputSchema).optional(),
  maintenanceLogs: import_zod.z.lazy(() => MaintenanceLogUpdateManyWithoutEquipmentNestedInputSchema).optional()
}).strict();
var EquipmentUncheckedUpdateWithoutRestaurantInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  model: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  serialNumber: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  purchaseDate: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastMaintenance: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  nextMaintenance: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  status: import_zod.z.union([import_zod.z.lazy(() => EquipmentStatusSchema), import_zod.z.lazy(() => EnumEquipmentStatusFieldUpdateOperationsInputSchema)]).optional(),
  location: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  recipes: import_zod.z.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutEquipmentNestedInputSchema).optional(),
  maintenanceLogs: import_zod.z.lazy(() => MaintenanceLogUncheckedUpdateManyWithoutEquipmentNestedInputSchema).optional()
}).strict();
var EquipmentUncheckedUpdateManyWithoutRestaurantInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  model: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  serialNumber: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  purchaseDate: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastMaintenance: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  nextMaintenance: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  status: import_zod.z.union([import_zod.z.lazy(() => EquipmentStatusSchema), import_zod.z.lazy(() => EnumEquipmentStatusFieldUpdateOperationsInputSchema)]).optional(),
  location: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var QualityChecklistUpdateWithoutRestaurantInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  frequency: import_zod.z.union([import_zod.z.lazy(() => ChecklistFrequencySchema), import_zod.z.lazy(() => EnumChecklistFrequencyFieldUpdateOperationsInputSchema)]).optional(),
  isActive: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  items: import_zod.z.lazy(() => ChecklistItemUpdateManyWithoutChecklistNestedInputSchema).optional(),
  completions: import_zod.z.lazy(() => ChecklistCompleteUpdateManyWithoutChecklistNestedInputSchema).optional()
}).strict();
var QualityChecklistUncheckedUpdateWithoutRestaurantInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  frequency: import_zod.z.union([import_zod.z.lazy(() => ChecklistFrequencySchema), import_zod.z.lazy(() => EnumChecklistFrequencyFieldUpdateOperationsInputSchema)]).optional(),
  isActive: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  items: import_zod.z.lazy(() => ChecklistItemUncheckedUpdateManyWithoutChecklistNestedInputSchema).optional(),
  completions: import_zod.z.lazy(() => ChecklistCompleteUncheckedUpdateManyWithoutChecklistNestedInputSchema).optional()
}).strict();
var QualityChecklistUncheckedUpdateManyWithoutRestaurantInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  frequency: import_zod.z.union([import_zod.z.lazy(() => ChecklistFrequencySchema), import_zod.z.lazy(() => EnumChecklistFrequencyFieldUpdateOperationsInputSchema)]).optional(),
  isActive: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var CustomerFeedbackUpdateWithoutRestaurantInputSchema = import_zod.z.object({
  rating: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  comment: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  source: import_zod.z.union([import_zod.z.lazy(() => FeedbackSourceSchema), import_zod.z.lazy(() => EnumFeedbackSourceFieldUpdateOperationsInputSchema)]).optional(),
  tags: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackUpdatetagsInputSchema), import_zod.z.string().array()]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => FeedbackStatusSchema), import_zod.z.lazy(() => EnumFeedbackStatusFieldUpdateOperationsInputSchema)]).optional(),
  responseText: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  respondedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  menuItem: import_zod.z.lazy(() => MenuItemUpdateOneWithoutFeedbackNestedInputSchema).optional(),
  respondedBy: import_zod.z.lazy(() => UserUpdateOneWithoutCustomerFeedbackNestedInputSchema).optional()
}).strict();
var CustomerFeedbackUncheckedUpdateWithoutRestaurantInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  menuItemId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  rating: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  comment: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  source: import_zod.z.union([import_zod.z.lazy(() => FeedbackSourceSchema), import_zod.z.lazy(() => EnumFeedbackSourceFieldUpdateOperationsInputSchema)]).optional(),
  tags: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackUpdatetagsInputSchema), import_zod.z.string().array()]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => FeedbackStatusSchema), import_zod.z.lazy(() => EnumFeedbackStatusFieldUpdateOperationsInputSchema)]).optional(),
  responseText: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  respondedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  respondedById: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var CustomerFeedbackUncheckedUpdateManyWithoutRestaurantInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  menuItemId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  rating: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  comment: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  source: import_zod.z.union([import_zod.z.lazy(() => FeedbackSourceSchema), import_zod.z.lazy(() => EnumFeedbackSourceFieldUpdateOperationsInputSchema)]).optional(),
  tags: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackUpdatetagsInputSchema), import_zod.z.string().array()]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => FeedbackStatusSchema), import_zod.z.lazy(() => EnumFeedbackStatusFieldUpdateOperationsInputSchema)]).optional(),
  responseText: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  respondedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  respondedById: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ShiftCreateManyUserInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  startTime: import_zod.z.coerce.date(),
  endTime: import_zod.z.coerce.date(),
  status: import_zod.z.lazy(() => ShiftStatusSchema)
}).strict();
var PrepItemCreateManyAssignedToInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  prepBoardId: import_zod.z.number().int(),
  recipeId: import_zod.z.number().int(),
  quantity: import_zod.z.number().int(),
  status: import_zod.z.lazy(() => PrepStatusSchema)
}).strict();
var InventoryItemCreateManyLastUpdatedByInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  inventoryId: import_zod.z.number().int(),
  ingredientId: import_zod.z.number().int(),
  quantity: import_zod.z.number(),
  unit: import_zod.z.string(),
  minQuantity: import_zod.z.number(),
  restockThreshold: import_zod.z.number(),
  lastUpdated: import_zod.z.coerce.date().optional()
}).strict();
var SessionCreateManyUserInputSchema = import_zod.z.object({
  id: import_zod.z.string().optional(),
  code: import_zod.z.string(),
  token: import_zod.z.string(),
  expiresAt: import_zod.z.coerce.date(),
  createdAt: import_zod.z.coerce.date().optional()
}).strict();
var PasswordResetCreateManyUserInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  token: import_zod.z.string(),
  expiresAt: import_zod.z.coerce.date(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var LeftoverItemCreateManyRecordedByInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  restaurantId: import_zod.z.number().int(),
  date: import_zod.z.coerce.date(),
  menuItemId: import_zod.z.number().int(),
  quantity: import_zod.z.number().int(),
  reason: import_zod.z.string(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var WasteRecordCreateManyRecordedByInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  restaurantId: import_zod.z.number().int(),
  date: import_zod.z.coerce.date(),
  ingredientId: import_zod.z.number().int(),
  quantity: import_zod.z.number(),
  unit: import_zod.z.string(),
  reason: import_zod.z.string(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var ProductionPlanCreateManyCreatedByInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  restaurantId: import_zod.z.number().int(),
  date: import_zod.z.coerce.date(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var ProductionPlanItemCreateManyAssignedToInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  productionPlanId: import_zod.z.number().int(),
  recipeId: import_zod.z.number().int(),
  quantity: import_zod.z.number().int(),
  unit: import_zod.z.string(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var AvailabilityCreateManyUserInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  dayOfWeek: import_zod.z.lazy(() => DayOfWeekSchema),
  startTime: import_zod.z.coerce.date(),
  endTime: import_zod.z.coerce.date(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var SchedulingConstraintCreateManyUserInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  date: import_zod.z.coerce.date(),
  constraintsType: import_zod.z.lazy(() => ConstraintTypeSchema),
  startTime: import_zod.z.coerce.date(),
  endTime: import_zod.z.coerce.date(),
  notes: import_zod.z.string().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var InventoryWithdrawalCreateManyCreatedByInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  inventoryItemId: import_zod.z.number().int(),
  dateTime: import_zod.z.coerce.date(),
  quantity: import_zod.z.number(),
  unit: import_zod.z.string(),
  recipeId: import_zod.z.number().int().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var ChecklistCompleteCreateManyCompletedByInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  checklistId: import_zod.z.number().int(),
  date: import_zod.z.coerce.date(),
  notes: import_zod.z.string().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var CustomerFeedbackCreateManyRespondedByInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  restaurantId: import_zod.z.number().int(),
  menuItemId: import_zod.z.number().int().optional().nullable(),
  rating: import_zod.z.number().int(),
  comment: import_zod.z.string().optional().nullable(),
  source: import_zod.z.lazy(() => FeedbackSourceSchema),
  tags: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackCreatetagsInputSchema), import_zod.z.string().array()]).optional(),
  status: import_zod.z.lazy(() => FeedbackStatusSchema).optional(),
  responseText: import_zod.z.string().optional().nullable(),
  respondedAt: import_zod.z.coerce.date().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var RecipeVersionCreateManyCreatedByInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  recipeId: import_zod.z.number().int(),
  versionNumber: import_zod.z.number().int(),
  description: import_zod.z.string().optional().nullable(),
  changes: import_zod.z.string().optional().nullable(),
  isActive: import_zod.z.boolean().optional(),
  approvedById: import_zod.z.number().int().optional().nullable(),
  approvedAt: import_zod.z.coerce.date().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var RecipeVersionCreateManyApprovedByInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  recipeId: import_zod.z.number().int(),
  versionNumber: import_zod.z.number().int(),
  description: import_zod.z.string().optional().nullable(),
  changes: import_zod.z.string().optional().nullable(),
  isActive: import_zod.z.boolean().optional(),
  createdById: import_zod.z.number().int(),
  approvedAt: import_zod.z.coerce.date().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var ShiftUpdateWithoutUserInputSchema = import_zod.z.object({
  startTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => ShiftStatusSchema), import_zod.z.lazy(() => EnumShiftStatusFieldUpdateOperationsInputSchema)]).optional(),
  ShiftTask: import_zod.z.lazy(() => ShiftTaskUpdateManyWithoutShiftNestedInputSchema).optional()
}).strict();
var ShiftUncheckedUpdateWithoutUserInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  startTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => ShiftStatusSchema), import_zod.z.lazy(() => EnumShiftStatusFieldUpdateOperationsInputSchema)]).optional(),
  ShiftTask: import_zod.z.lazy(() => ShiftTaskUncheckedUpdateManyWithoutShiftNestedInputSchema).optional()
}).strict();
var ShiftUncheckedUpdateManyWithoutUserInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  startTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => ShiftStatusSchema), import_zod.z.lazy(() => EnumShiftStatusFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var PrepItemUpdateWithoutAssignedToInputSchema = import_zod.z.object({
  quantity: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => PrepStatusSchema), import_zod.z.lazy(() => EnumPrepStatusFieldUpdateOperationsInputSchema)]).optional(),
  prepBoard: import_zod.z.lazy(() => PrepBoardUpdateOneRequiredWithoutPrepItemsNestedInputSchema).optional(),
  recipe: import_zod.z.lazy(() => RecipeUpdateOneRequiredWithoutPrepItemsNestedInputSchema).optional()
}).strict();
var PrepItemUncheckedUpdateWithoutAssignedToInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepBoardId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => PrepStatusSchema), import_zod.z.lazy(() => EnumPrepStatusFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var PrepItemUncheckedUpdateManyWithoutAssignedToInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepBoardId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => PrepStatusSchema), import_zod.z.lazy(() => EnumPrepStatusFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var InventoryItemUpdateWithoutLastUpdatedByInputSchema = import_zod.z.object({
  quantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  minQuantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  restockThreshold: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  lastUpdated: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  inventory: import_zod.z.lazy(() => InventoryUpdateOneRequiredWithoutItemsNestedInputSchema).optional(),
  ingredient: import_zod.z.lazy(() => IngredientUpdateOneRequiredWithoutInventoryItemsNestedInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUpdateManyWithoutInventoryItemNestedInputSchema).optional()
}).strict();
var InventoryItemUncheckedUpdateWithoutLastUpdatedByInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  inventoryId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  ingredientId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  minQuantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  restockThreshold: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  lastUpdated: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutInventoryItemNestedInputSchema).optional()
}).strict();
var InventoryItemUncheckedUpdateManyWithoutLastUpdatedByInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  inventoryId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  ingredientId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  minQuantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  restockThreshold: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  lastUpdated: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var SessionUpdateWithoutUserInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  code: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  token: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  expiresAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var SessionUncheckedUpdateWithoutUserInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  code: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  token: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  expiresAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var SessionUncheckedUpdateManyWithoutUserInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  code: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  token: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  expiresAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var PasswordResetUpdateWithoutUserInputSchema = import_zod.z.object({
  token: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  expiresAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var PasswordResetUncheckedUpdateWithoutUserInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  token: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  expiresAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var PasswordResetUncheckedUpdateManyWithoutUserInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  token: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  expiresAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var LeftoverItemUpdateWithoutRecordedByInputSchema = import_zod.z.object({
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  reason: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantUpdateOneRequiredWithoutLeftoverItemNestedInputSchema).optional(),
  menuItem: import_zod.z.lazy(() => MenuItemUpdateOneRequiredWithoutLeftoverItemNestedInputSchema).optional()
}).strict();
var LeftoverItemUncheckedUpdateWithoutRecordedByInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  menuItemId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  reason: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var LeftoverItemUncheckedUpdateManyWithoutRecordedByInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  menuItemId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  reason: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var WasteRecordUpdateWithoutRecordedByInputSchema = import_zod.z.object({
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  reason: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantUpdateOneRequiredWithoutWasteRecordNestedInputSchema).optional(),
  ingrediente: import_zod.z.lazy(() => IngredientUpdateOneRequiredWithoutWasteRecordNestedInputSchema).optional()
}).strict();
var WasteRecordUncheckedUpdateWithoutRecordedByInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingredientId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  reason: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var WasteRecordUncheckedUpdateManyWithoutRecordedByInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingredientId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  reason: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ProductionPlanUpdateWithoutCreatedByInputSchema = import_zod.z.object({
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantUpdateOneRequiredWithoutProductionPlanNestedInputSchema).optional(),
  items: import_zod.z.lazy(() => ProductionPlanItemUpdateManyWithoutProductionPlanNestedInputSchema).optional()
}).strict();
var ProductionPlanUncheckedUpdateWithoutCreatedByInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  items: import_zod.z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutProductionPlanNestedInputSchema).optional()
}).strict();
var ProductionPlanUncheckedUpdateManyWithoutCreatedByInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ProductionPlanItemUpdateWithoutAssignedToInputSchema = import_zod.z.object({
  quantity: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUpdateOneRequiredWithoutItemsNestedInputSchema).optional(),
  recipe: import_zod.z.lazy(() => RecipeUpdateOneRequiredWithoutProductionPlanItemNestedInputSchema).optional()
}).strict();
var ProductionPlanItemUncheckedUpdateWithoutAssignedToInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  productionPlanId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ProductionPlanItemUncheckedUpdateManyWithoutAssignedToInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  productionPlanId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var AvailabilityUpdateWithoutUserInputSchema = import_zod.z.object({
  dayOfWeek: import_zod.z.union([import_zod.z.lazy(() => DayOfWeekSchema), import_zod.z.lazy(() => EnumDayOfWeekFieldUpdateOperationsInputSchema)]).optional(),
  startTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var AvailabilityUncheckedUpdateWithoutUserInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  dayOfWeek: import_zod.z.union([import_zod.z.lazy(() => DayOfWeekSchema), import_zod.z.lazy(() => EnumDayOfWeekFieldUpdateOperationsInputSchema)]).optional(),
  startTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var AvailabilityUncheckedUpdateManyWithoutUserInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  dayOfWeek: import_zod.z.union([import_zod.z.lazy(() => DayOfWeekSchema), import_zod.z.lazy(() => EnumDayOfWeekFieldUpdateOperationsInputSchema)]).optional(),
  startTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var SchedulingConstraintUpdateWithoutUserInputSchema = import_zod.z.object({
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  constraintsType: import_zod.z.union([import_zod.z.lazy(() => ConstraintTypeSchema), import_zod.z.lazy(() => EnumConstraintTypeFieldUpdateOperationsInputSchema)]).optional(),
  startTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  notes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var SchedulingConstraintUncheckedUpdateWithoutUserInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  constraintsType: import_zod.z.union([import_zod.z.lazy(() => ConstraintTypeSchema), import_zod.z.lazy(() => EnumConstraintTypeFieldUpdateOperationsInputSchema)]).optional(),
  startTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  notes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var SchedulingConstraintUncheckedUpdateManyWithoutUserInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  constraintsType: import_zod.z.union([import_zod.z.lazy(() => ConstraintTypeSchema), import_zod.z.lazy(() => EnumConstraintTypeFieldUpdateOperationsInputSchema)]).optional(),
  startTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  notes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var InventoryWithdrawalUpdateWithoutCreatedByInputSchema = import_zod.z.object({
  dateTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  inventoryItem: import_zod.z.lazy(() => InventoryItemUpdateOneRequiredWithoutInventoryWithdrawalNestedInputSchema).optional(),
  recipe: import_zod.z.lazy(() => RecipeUpdateOneWithoutInventoryWithdrawalNestedInputSchema).optional()
}).strict();
var InventoryWithdrawalUncheckedUpdateWithoutCreatedByInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  inventoryItemId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  dateTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var InventoryWithdrawalUncheckedUpdateManyWithoutCreatedByInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  inventoryItemId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  dateTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ChecklistCompleteUpdateWithoutCompletedByInputSchema = import_zod.z.object({
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  notes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  checklist: import_zod.z.lazy(() => QualityChecklistUpdateOneRequiredWithoutCompletionsNestedInputSchema).optional(),
  items: import_zod.z.lazy(() => ChecklistItemCompleteUpdateManyWithoutChecklistCompleteNestedInputSchema).optional()
}).strict();
var ChecklistCompleteUncheckedUpdateWithoutCompletedByInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  checklistId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  notes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  items: import_zod.z.lazy(() => ChecklistItemCompleteUncheckedUpdateManyWithoutChecklistCompleteNestedInputSchema).optional()
}).strict();
var ChecklistCompleteUncheckedUpdateManyWithoutCompletedByInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  checklistId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  notes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var CustomerFeedbackUpdateWithoutRespondedByInputSchema = import_zod.z.object({
  rating: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  comment: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  source: import_zod.z.union([import_zod.z.lazy(() => FeedbackSourceSchema), import_zod.z.lazy(() => EnumFeedbackSourceFieldUpdateOperationsInputSchema)]).optional(),
  tags: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackUpdatetagsInputSchema), import_zod.z.string().array()]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => FeedbackStatusSchema), import_zod.z.lazy(() => EnumFeedbackStatusFieldUpdateOperationsInputSchema)]).optional(),
  responseText: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  respondedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantUpdateOneRequiredWithoutQustomerFeedbackNestedInputSchema).optional(),
  menuItem: import_zod.z.lazy(() => MenuItemUpdateOneWithoutFeedbackNestedInputSchema).optional()
}).strict();
var CustomerFeedbackUncheckedUpdateWithoutRespondedByInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  menuItemId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  rating: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  comment: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  source: import_zod.z.union([import_zod.z.lazy(() => FeedbackSourceSchema), import_zod.z.lazy(() => EnumFeedbackSourceFieldUpdateOperationsInputSchema)]).optional(),
  tags: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackUpdatetagsInputSchema), import_zod.z.string().array()]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => FeedbackStatusSchema), import_zod.z.lazy(() => EnumFeedbackStatusFieldUpdateOperationsInputSchema)]).optional(),
  responseText: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  respondedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var CustomerFeedbackUncheckedUpdateManyWithoutRespondedByInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  menuItemId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  rating: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  comment: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  source: import_zod.z.union([import_zod.z.lazy(() => FeedbackSourceSchema), import_zod.z.lazy(() => EnumFeedbackSourceFieldUpdateOperationsInputSchema)]).optional(),
  tags: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackUpdatetagsInputSchema), import_zod.z.string().array()]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => FeedbackStatusSchema), import_zod.z.lazy(() => EnumFeedbackStatusFieldUpdateOperationsInputSchema)]).optional(),
  responseText: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  respondedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var RecipeVersionUpdateWithoutCreatedByInputSchema = import_zod.z.object({
  versionNumber: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  changes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isActive: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  approvedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  recipe: import_zod.z.lazy(() => RecipeUpdateOneRequiredWithoutVersionsNestedInputSchema).optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientUpdateManyWithoutRecipeVersionNestedInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionUpdateManyWithoutRecipeVersionNestedInputSchema).optional(),
  approvedBy: import_zod.z.lazy(() => UserUpdateOneWithoutRecipeVersionsApprovedNestedInputSchema).optional()
}).strict();
var RecipeVersionUncheckedUpdateWithoutCreatedByInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  versionNumber: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  changes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isActive: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  approvedById: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  approvedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeVersionNestedInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeVersionNestedInputSchema).optional()
}).strict();
var RecipeVersionUncheckedUpdateManyWithoutCreatedByInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  versionNumber: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  changes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isActive: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  approvedById: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  approvedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var RecipeVersionUpdateWithoutApprovedByInputSchema = import_zod.z.object({
  versionNumber: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  changes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isActive: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  approvedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  recipe: import_zod.z.lazy(() => RecipeUpdateOneRequiredWithoutVersionsNestedInputSchema).optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientUpdateManyWithoutRecipeVersionNestedInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionUpdateManyWithoutRecipeVersionNestedInputSchema).optional(),
  createdBy: import_zod.z.lazy(() => UserUpdateOneRequiredWithoutRecipeVersionsCreatedNestedInputSchema).optional()
}).strict();
var RecipeVersionUncheckedUpdateWithoutApprovedByInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  versionNumber: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  changes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isActive: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdById: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  approvedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeVersionNestedInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeVersionNestedInputSchema).optional()
}).strict();
var RecipeVersionUncheckedUpdateManyWithoutApprovedByInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  versionNumber: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  changes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isActive: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdById: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  approvedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var RecipeCreateManyCookBookInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeCreateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.string().optional().nullable(),
  servings: import_zod.z.number().int(),
  cookTime: import_zod.z.number().int(),
  prepTime: import_zod.z.number().int(),
  frequency: import_zod.z.number().int().optional().nullable(),
  restaurantId: import_zod.z.number().int(),
  foodCost: import_zod.z.number().optional().nullable(),
  isDeleted: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var RecipeUpdateWithoutCookBookInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUpdateManyWithoutRecipeNestedInputSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUpdateManyWithoutRecipesNestedInputSchema).optional()
}).strict();
var RecipeUncheckedUpdateWithoutCookBookInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional()
}).strict();
var RecipeUncheckedUpdateManyWithoutCookBookInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var RecipeIngredientCreateManyRecipeInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  ingredientId: import_zod.z.number().int(),
  quantity: import_zod.z.number(),
  unit: import_zod.z.string(),
  joinAt: import_zod.z.coerce.date().optional(),
  recipeVersionId: import_zod.z.number().int().optional().nullable()
}).strict();
var RecipeInstructionCreateManyRecipeInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  stepNumber: import_zod.z.number().int(),
  instruction: import_zod.z.string(),
  imageUrl: import_zod.z.string().optional().nullable(),
  recipeVersionId: import_zod.z.number().int().optional().nullable()
}).strict();
var FoodCostHistoryCreateManyRecipeInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  cost: import_zod.z.number(),
  date: import_zod.z.coerce.date(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var PrepHistoryCreateManyRecipeInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  quantity: import_zod.z.number().int(),
  date: import_zod.z.coerce.date(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var PrepItemCreateManyRecipeInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  prepBoardId: import_zod.z.number().int(),
  quantity: import_zod.z.number().int(),
  status: import_zod.z.lazy(() => PrepStatusSchema),
  assignedToId: import_zod.z.number().int()
}).strict();
var MenuItemRecipeCreateManyRecipeInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  menuItemId: import_zod.z.number().int(),
  joinAt: import_zod.z.coerce.date().optional()
}).strict();
var ProductionPlanItemCreateManyRecipeInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  productionPlanId: import_zod.z.number().int(),
  quantity: import_zod.z.number().int(),
  unit: import_zod.z.string(),
  assignedToId: import_zod.z.number().int().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var InventoryWithdrawalCreateManyRecipeInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  inventoryItemId: import_zod.z.number().int(),
  dateTime: import_zod.z.coerce.date(),
  quantity: import_zod.z.number(),
  unit: import_zod.z.string(),
  createdById: import_zod.z.number().int(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var RecipeVersionCreateManyRecipeInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  versionNumber: import_zod.z.number().int(),
  description: import_zod.z.string().optional().nullable(),
  changes: import_zod.z.string().optional().nullable(),
  isActive: import_zod.z.boolean().optional(),
  createdById: import_zod.z.number().int(),
  approvedById: import_zod.z.number().int().optional().nullable(),
  approvedAt: import_zod.z.coerce.date().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var RecipeEquipmentCreateManyRecipeInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  equipmentId: import_zod.z.number().int(),
  notes: import_zod.z.string().optional().nullable()
}).strict();
var RecipeIngredientUpdateWithoutRecipeInputSchema = import_zod.z.object({
  quantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  joinAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingredient: import_zod.z.lazy(() => IngredientUpdateOneRequiredWithoutRecipeIngredientsNestedInputSchema).optional(),
  RecipeVersion: import_zod.z.lazy(() => RecipeVersionUpdateOneWithoutIngredientsNestedInputSchema).optional()
}).strict();
var RecipeIngredientUncheckedUpdateWithoutRecipeInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  ingredientId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  joinAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  recipeVersionId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var RecipeIngredientUncheckedUpdateManyWithoutRecipeInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  ingredientId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  joinAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  recipeVersionId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var RecipeInstructionUpdateWithoutRecipeInputSchema = import_zod.z.object({
  stepNumber: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  instruction: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  RecipeVersion: import_zod.z.lazy(() => RecipeVersionUpdateOneWithoutInstructionsNestedInputSchema).optional()
}).strict();
var RecipeInstructionUncheckedUpdateWithoutRecipeInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  stepNumber: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  instruction: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  recipeVersionId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var RecipeInstructionUncheckedUpdateManyWithoutRecipeInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  stepNumber: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  instruction: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  recipeVersionId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var MenuItemUpdateWithoutRecipesInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIds: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeIdsInputSchema), import_zod.z.number().int().array()]).optional(),
  recipeServingsAmount: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema), import_zod.z.number().array()]).optional(),
  recipeServingsCost: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema), import_zod.z.number().array()]).optional(),
  allergens: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateallergensInputSchema), import_zod.z.string().array()]).optional(),
  nutritionalInfoId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  nutritionalInfo: import_zod.z.lazy(() => NutritionalInfoUpdateOneWithoutMenuItemNestedInputSchema).optional(),
  menu: import_zod.z.lazy(() => MenuUpdateOneRequiredWithoutMenuItemsNestedInputSchema).optional(),
  menuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  nutritionalRecommendation: import_zod.z.lazy(() => NutritionalRecommendationUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  category: import_zod.z.lazy(() => MenuCategoryUpdateOneWithoutMenuItemsNestedInputSchema).optional(),
  feedback: import_zod.z.lazy(() => CustomerFeedbackUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUpdateManyWithoutMenuItemsNestedInputSchema).optional()
}).strict();
var MenuItemUncheckedUpdateWithoutRecipesInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIds: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeIdsInputSchema), import_zod.z.number().int().array()]).optional(),
  recipeServingsAmount: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema), import_zod.z.number().array()]).optional(),
  recipeServingsCost: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema), import_zod.z.number().array()]).optional(),
  allergens: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateallergensInputSchema), import_zod.z.string().array()]).optional(),
  nutritionalInfoId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  menuId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  categoryId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  nutritionalInfo: import_zod.z.lazy(() => NutritionalInfoUncheckedUpdateOneWithoutMenuItemNestedInputSchema).optional(),
  menuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  nutritionalRecommendation: import_zod.z.lazy(() => NutritionalRecommendationUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  feedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutMenuItemsNestedInputSchema).optional()
}).strict();
var MenuItemUncheckedUpdateManyWithoutRecipesInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIds: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeIdsInputSchema), import_zod.z.number().int().array()]).optional(),
  recipeServingsAmount: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema), import_zod.z.number().array()]).optional(),
  recipeServingsCost: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema), import_zod.z.number().array()]).optional(),
  allergens: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateallergensInputSchema), import_zod.z.string().array()]).optional(),
  nutritionalInfoId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  menuId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  categoryId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var FoodCostHistoryUpdateWithoutRecipeInputSchema = import_zod.z.object({
  cost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var FoodCostHistoryUncheckedUpdateWithoutRecipeInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var FoodCostHistoryUncheckedUpdateManyWithoutRecipeInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var PrepHistoryUpdateWithoutRecipeInputSchema = import_zod.z.object({
  quantity: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var PrepHistoryUncheckedUpdateWithoutRecipeInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var PrepHistoryUncheckedUpdateManyWithoutRecipeInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var PrepBoardUpdateWithoutRecipesInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => PrepStatusSchema), import_zod.z.lazy(() => EnumPrepStatusFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUpdateManyWithoutPrepBoardNestedInputSchema).optional()
}).strict();
var PrepBoardUncheckedUpdateWithoutRecipesInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => PrepStatusSchema), import_zod.z.lazy(() => EnumPrepStatusFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedUpdateManyWithoutPrepBoardNestedInputSchema).optional()
}).strict();
var PrepBoardUncheckedUpdateManyWithoutRecipesInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => PrepStatusSchema), import_zod.z.lazy(() => EnumPrepStatusFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var PrepItemUpdateWithoutRecipeInputSchema = import_zod.z.object({
  quantity: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => PrepStatusSchema), import_zod.z.lazy(() => EnumPrepStatusFieldUpdateOperationsInputSchema)]).optional(),
  prepBoard: import_zod.z.lazy(() => PrepBoardUpdateOneRequiredWithoutPrepItemsNestedInputSchema).optional(),
  assignedTo: import_zod.z.lazy(() => UserUpdateOneRequiredWithoutPrepItemsNestedInputSchema).optional()
}).strict();
var PrepItemUncheckedUpdateWithoutRecipeInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepBoardId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => PrepStatusSchema), import_zod.z.lazy(() => EnumPrepStatusFieldUpdateOperationsInputSchema)]).optional(),
  assignedToId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var PrepItemUncheckedUpdateManyWithoutRecipeInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepBoardId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => PrepStatusSchema), import_zod.z.lazy(() => EnumPrepStatusFieldUpdateOperationsInputSchema)]).optional(),
  assignedToId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var MenuItemRecipeUpdateWithoutRecipeInputSchema = import_zod.z.object({
  joinAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  menuItem: import_zod.z.lazy(() => MenuItemUpdateOneRequiredWithoutMenuItemRecipeNestedInputSchema).optional()
}).strict();
var MenuItemRecipeUncheckedUpdateWithoutRecipeInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  menuItemId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  joinAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var MenuItemRecipeUncheckedUpdateManyWithoutRecipeInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  menuItemId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  joinAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ProductionPlanItemUpdateWithoutRecipeInputSchema = import_zod.z.object({
  quantity: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  productionPlan: import_zod.z.lazy(() => ProductionPlanUpdateOneRequiredWithoutItemsNestedInputSchema).optional(),
  assignedTo: import_zod.z.lazy(() => UserUpdateOneWithoutProductionPlanItemNestedInputSchema).optional()
}).strict();
var ProductionPlanItemUncheckedUpdateWithoutRecipeInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  productionPlanId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  assignedToId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ProductionPlanItemUncheckedUpdateManyWithoutRecipeInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  productionPlanId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  assignedToId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var InventoryWithdrawalUpdateWithoutRecipeInputSchema = import_zod.z.object({
  dateTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  inventoryItem: import_zod.z.lazy(() => InventoryItemUpdateOneRequiredWithoutInventoryWithdrawalNestedInputSchema).optional(),
  createdBy: import_zod.z.lazy(() => UserUpdateOneRequiredWithoutInventoryWithdrawalNestedInputSchema).optional()
}).strict();
var InventoryWithdrawalUncheckedUpdateWithoutRecipeInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  inventoryItemId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  dateTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdById: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var InventoryWithdrawalUncheckedUpdateManyWithoutRecipeInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  inventoryItemId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  dateTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdById: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var RecipeTagUpdateWithoutRecipesInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var RecipeTagUncheckedUpdateWithoutRecipesInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var RecipeTagUncheckedUpdateManyWithoutRecipesInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var RecipeVersionUpdateWithoutRecipeInputSchema = import_zod.z.object({
  versionNumber: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  changes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isActive: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  approvedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientUpdateManyWithoutRecipeVersionNestedInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionUpdateManyWithoutRecipeVersionNestedInputSchema).optional(),
  createdBy: import_zod.z.lazy(() => UserUpdateOneRequiredWithoutRecipeVersionsCreatedNestedInputSchema).optional(),
  approvedBy: import_zod.z.lazy(() => UserUpdateOneWithoutRecipeVersionsApprovedNestedInputSchema).optional()
}).strict();
var RecipeVersionUncheckedUpdateWithoutRecipeInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  versionNumber: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  changes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isActive: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdById: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  approvedById: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  approvedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeVersionNestedInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeVersionNestedInputSchema).optional()
}).strict();
var RecipeVersionUncheckedUpdateManyWithoutRecipeInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  versionNumber: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  changes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isActive: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdById: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  approvedById: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  approvedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var RecipeEquipmentUpdateWithoutRecipeInputSchema = import_zod.z.object({
  notes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  equipment: import_zod.z.lazy(() => EquipmentUpdateOneRequiredWithoutRecipesNestedInputSchema).optional()
}).strict();
var RecipeEquipmentUncheckedUpdateWithoutRecipeInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  equipmentId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  notes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var RecipeEquipmentUncheckedUpdateManyWithoutRecipeInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  equipmentId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  notes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var DietaryRestrictionUpdateWithoutRecipesInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  icon: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUpdateManyWithoutDietaryRestrictionsNestedInputSchema).optional(),
  ingredients: import_zod.z.lazy(() => IngredientUpdateManyWithoutDietaryRestrictionNestedInputSchema).optional()
}).strict();
var DietaryRestrictionUncheckedUpdateWithoutRecipesInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  icon: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUncheckedUpdateManyWithoutDietaryRestrictionsNestedInputSchema).optional(),
  ingredients: import_zod.z.lazy(() => IngredientUncheckedUpdateManyWithoutDietaryRestrictionNestedInputSchema).optional()
}).strict();
var DietaryRestrictionUncheckedUpdateManyWithoutRecipesInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  icon: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var RecipeIngredientCreateManyIngredientInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  recipeId: import_zod.z.number().int(),
  quantity: import_zod.z.number(),
  unit: import_zod.z.string(),
  joinAt: import_zod.z.coerce.date().optional(),
  recipeVersionId: import_zod.z.number().int().optional().nullable()
}).strict();
var InventoryItemCreateManyIngredientInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  inventoryId: import_zod.z.number().int(),
  quantity: import_zod.z.number(),
  unit: import_zod.z.string(),
  minQuantity: import_zod.z.number(),
  restockThreshold: import_zod.z.number(),
  lastUpdatedById: import_zod.z.number().int().optional().nullable(),
  lastUpdated: import_zod.z.coerce.date().optional()
}).strict();
var OrderItemCreateManyIngredientInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  orderId: import_zod.z.number().int(),
  quantity: import_zod.z.number(),
  unit: import_zod.z.string(),
  price: import_zod.z.number()
}).strict();
var WasteRecordCreateManyIngredienteInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  restaurantId: import_zod.z.number().int(),
  date: import_zod.z.coerce.date(),
  quantity: import_zod.z.number(),
  unit: import_zod.z.string(),
  reason: import_zod.z.string(),
  recordedById: import_zod.z.number().int(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var IngredientAllergenCreateManyIngredientInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  allergenId: import_zod.z.number().int()
}).strict();
var SupplierPriceHistoryCreateManyIngredientInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  vendorId: import_zod.z.number().int(),
  price: import_zod.z.number(),
  unit: import_zod.z.string(),
  startDate: import_zod.z.coerce.date(),
  endDate: import_zod.z.coerce.date().optional().nullable(),
  notes: import_zod.z.string().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var RecipeIngredientUpdateWithoutIngredientInputSchema = import_zod.z.object({
  quantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  joinAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  recipe: import_zod.z.lazy(() => RecipeUpdateOneRequiredWithoutIngredientsNestedInputSchema).optional(),
  RecipeVersion: import_zod.z.lazy(() => RecipeVersionUpdateOneWithoutIngredientsNestedInputSchema).optional()
}).strict();
var RecipeIngredientUncheckedUpdateWithoutIngredientInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  joinAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  recipeVersionId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var RecipeIngredientUncheckedUpdateManyWithoutIngredientInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  joinAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  recipeVersionId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var InventoryItemUpdateWithoutIngredientInputSchema = import_zod.z.object({
  quantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  minQuantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  restockThreshold: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  lastUpdated: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  inventory: import_zod.z.lazy(() => InventoryUpdateOneRequiredWithoutItemsNestedInputSchema).optional(),
  lastUpdatedBy: import_zod.z.lazy(() => UserUpdateOneWithoutInventoryUpdatesNestedInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUpdateManyWithoutInventoryItemNestedInputSchema).optional()
}).strict();
var InventoryItemUncheckedUpdateWithoutIngredientInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  inventoryId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  minQuantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  restockThreshold: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  lastUpdatedById: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastUpdated: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutInventoryItemNestedInputSchema).optional()
}).strict();
var InventoryItemUncheckedUpdateManyWithoutIngredientInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  inventoryId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  minQuantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  restockThreshold: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  lastUpdatedById: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastUpdated: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var OrderItemUpdateWithoutIngredientInputSchema = import_zod.z.object({
  quantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  order: import_zod.z.lazy(() => OrderUpdateOneRequiredWithoutItemsNestedInputSchema).optional()
}).strict();
var OrderItemUncheckedUpdateWithoutIngredientInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  orderId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var OrderItemUncheckedUpdateManyWithoutIngredientInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  orderId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var VendorUpdateWithoutIngredientsInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  contact: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  email: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  phone: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  orders: import_zod.z.lazy(() => OrderUpdateManyWithoutVendorNestedInputSchema).optional(),
  supplierPriceHistory: import_zod.z.lazy(() => SupplierPriceHistoryUpdateManyWithoutVendorNestedInputSchema).optional()
}).strict();
var VendorUncheckedUpdateWithoutIngredientsInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  contact: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  email: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  phone: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  orders: import_zod.z.lazy(() => OrderUncheckedUpdateManyWithoutVendorNestedInputSchema).optional(),
  supplierPriceHistory: import_zod.z.lazy(() => SupplierPriceHistoryUncheckedUpdateManyWithoutVendorNestedInputSchema).optional()
}).strict();
var VendorUncheckedUpdateManyWithoutIngredientsInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  contact: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  email: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  phone: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var WasteRecordUpdateWithoutIngredienteInputSchema = import_zod.z.object({
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  reason: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantUpdateOneRequiredWithoutWasteRecordNestedInputSchema).optional(),
  recordedBy: import_zod.z.lazy(() => UserUpdateOneRequiredWithoutWasteRecordNestedInputSchema).optional()
}).strict();
var WasteRecordUncheckedUpdateWithoutIngredienteInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  reason: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recordedById: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var WasteRecordUncheckedUpdateManyWithoutIngredienteInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  reason: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recordedById: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var IngredientAllergenUpdateWithoutIngredientInputSchema = import_zod.z.object({
  allergen: import_zod.z.lazy(() => AllergenUpdateOneRequiredWithoutIngredientsNestedInputSchema).optional()
}).strict();
var IngredientAllergenUncheckedUpdateWithoutIngredientInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  allergenId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var IngredientAllergenUncheckedUpdateManyWithoutIngredientInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  allergenId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var SupplierPriceHistoryUpdateWithoutIngredientInputSchema = import_zod.z.object({
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  startDate: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endDate: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  notes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  vendor: import_zod.z.lazy(() => VendorUpdateOneRequiredWithoutSupplierPriceHistoryNestedInputSchema).optional()
}).strict();
var SupplierPriceHistoryUncheckedUpdateWithoutIngredientInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  vendorId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  startDate: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endDate: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  notes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var SupplierPriceHistoryUncheckedUpdateManyWithoutIngredientInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  vendorId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  startDate: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endDate: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  notes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var InventoryItemCreateManyInventoryInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  ingredientId: import_zod.z.number().int(),
  quantity: import_zod.z.number(),
  unit: import_zod.z.string(),
  minQuantity: import_zod.z.number(),
  restockThreshold: import_zod.z.number(),
  lastUpdatedById: import_zod.z.number().int().optional().nullable(),
  lastUpdated: import_zod.z.coerce.date().optional()
}).strict();
var InventoryItemUpdateWithoutInventoryInputSchema = import_zod.z.object({
  quantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  minQuantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  restockThreshold: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  lastUpdated: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingredient: import_zod.z.lazy(() => IngredientUpdateOneRequiredWithoutInventoryItemsNestedInputSchema).optional(),
  lastUpdatedBy: import_zod.z.lazy(() => UserUpdateOneWithoutInventoryUpdatesNestedInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUpdateManyWithoutInventoryItemNestedInputSchema).optional()
}).strict();
var InventoryItemUncheckedUpdateWithoutInventoryInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  ingredientId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  minQuantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  restockThreshold: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  lastUpdatedById: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastUpdated: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutInventoryItemNestedInputSchema).optional()
}).strict();
var InventoryItemUncheckedUpdateManyWithoutInventoryInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  ingredientId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  minQuantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  restockThreshold: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  lastUpdatedById: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  lastUpdated: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var InventoryWithdrawalCreateManyInventoryItemInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  dateTime: import_zod.z.coerce.date(),
  quantity: import_zod.z.number(),
  unit: import_zod.z.string(),
  recipeId: import_zod.z.number().int().optional().nullable(),
  createdById: import_zod.z.number().int(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var InventoryWithdrawalUpdateWithoutInventoryItemInputSchema = import_zod.z.object({
  dateTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  recipe: import_zod.z.lazy(() => RecipeUpdateOneWithoutInventoryWithdrawalNestedInputSchema).optional(),
  createdBy: import_zod.z.lazy(() => UserUpdateOneRequiredWithoutInventoryWithdrawalNestedInputSchema).optional()
}).strict();
var InventoryWithdrawalUncheckedUpdateWithoutInventoryItemInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  dateTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdById: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var InventoryWithdrawalUncheckedUpdateManyWithoutInventoryItemInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  dateTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdById: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var OrderItemCreateManyOrderInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  ingredientId: import_zod.z.number().int(),
  quantity: import_zod.z.number(),
  unit: import_zod.z.string(),
  price: import_zod.z.number()
}).strict();
var OrderItemUpdateWithoutOrderInputSchema = import_zod.z.object({
  quantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  ingredient: import_zod.z.lazy(() => IngredientUpdateOneRequiredWithoutOrderItemsNestedInputSchema).optional()
}).strict();
var OrderItemUncheckedUpdateWithoutOrderInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  ingredientId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var OrderItemUncheckedUpdateManyWithoutOrderInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  ingredientId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var OrderCreateManyVendorInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  restaurantId: import_zod.z.number().int(),
  status: import_zod.z.lazy(() => OrderStatusSchema),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var SupplierPriceHistoryCreateManyVendorInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  ingredientId: import_zod.z.number().int(),
  price: import_zod.z.number(),
  unit: import_zod.z.string(),
  startDate: import_zod.z.coerce.date(),
  endDate: import_zod.z.coerce.date().optional().nullable(),
  notes: import_zod.z.string().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var OrderUpdateWithoutVendorInputSchema = import_zod.z.object({
  status: import_zod.z.union([import_zod.z.lazy(() => OrderStatusSchema), import_zod.z.lazy(() => EnumOrderStatusFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantUpdateOneRequiredWithoutOrdersNestedInputSchema).optional(),
  items: import_zod.z.lazy(() => OrderItemUpdateManyWithoutOrderNestedInputSchema).optional()
}).strict();
var OrderUncheckedUpdateWithoutVendorInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => OrderStatusSchema), import_zod.z.lazy(() => EnumOrderStatusFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  items: import_zod.z.lazy(() => OrderItemUncheckedUpdateManyWithoutOrderNestedInputSchema).optional()
}).strict();
var OrderUncheckedUpdateManyWithoutVendorInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => OrderStatusSchema), import_zod.z.lazy(() => EnumOrderStatusFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var IngredientUpdateWithoutVendorsInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  category: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIngredients: import_zod.z.lazy(() => RecipeIngredientUpdateManyWithoutIngredientNestedInputSchema).optional(),
  inventoryItems: import_zod.z.lazy(() => InventoryItemUpdateManyWithoutIngredientNestedInputSchema).optional(),
  orderItems: import_zod.z.lazy(() => OrderItemUpdateManyWithoutIngredientNestedInputSchema).optional(),
  WasteRecord: import_zod.z.lazy(() => WasteRecordUpdateManyWithoutIngredienteNestedInputSchema).optional(),
  IngredientAllergen: import_zod.z.lazy(() => IngredientAllergenUpdateManyWithoutIngredientNestedInputSchema).optional(),
  SupplierPriceHistory: import_zod.z.lazy(() => SupplierPriceHistoryUpdateManyWithoutIngredientNestedInputSchema).optional(),
  DietaryRestriction: import_zod.z.lazy(() => DietaryRestrictionUpdateOneWithoutIngredientsNestedInputSchema).optional()
}).strict();
var IngredientUncheckedUpdateWithoutVendorsInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  category: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  dietaryRestrictionId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  recipeIngredients: import_zod.z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  inventoryItems: import_zod.z.lazy(() => InventoryItemUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  orderItems: import_zod.z.lazy(() => OrderItemUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  WasteRecord: import_zod.z.lazy(() => WasteRecordUncheckedUpdateManyWithoutIngredienteNestedInputSchema).optional(),
  IngredientAllergen: import_zod.z.lazy(() => IngredientAllergenUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional(),
  SupplierPriceHistory: import_zod.z.lazy(() => SupplierPriceHistoryUncheckedUpdateManyWithoutIngredientNestedInputSchema).optional()
}).strict();
var IngredientUncheckedUpdateManyWithoutVendorsInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  category: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  dietaryRestrictionId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var SupplierPriceHistoryUpdateWithoutVendorInputSchema = import_zod.z.object({
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  startDate: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endDate: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  notes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingredient: import_zod.z.lazy(() => IngredientUpdateOneRequiredWithoutSupplierPriceHistoryNestedInputSchema).optional()
}).strict();
var SupplierPriceHistoryUncheckedUpdateWithoutVendorInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  ingredientId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  startDate: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endDate: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  notes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var SupplierPriceHistoryUncheckedUpdateManyWithoutVendorInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  ingredientId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  unit: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  startDate: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endDate: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  notes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ShiftTaskCreateManyShiftInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  taskType: import_zod.z.lazy(() => TaskTypeSchema),
  startTime: import_zod.z.coerce.date(),
  endTime: import_zod.z.coerce.date(),
  duration: import_zod.z.number().int(),
  notes: import_zod.z.string().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var ShiftTaskUpdateWithoutShiftInputSchema = import_zod.z.object({
  taskType: import_zod.z.union([import_zod.z.lazy(() => TaskTypeSchema), import_zod.z.lazy(() => EnumTaskTypeFieldUpdateOperationsInputSchema)]).optional(),
  startTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  duration: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  notes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ShiftTaskUncheckedUpdateWithoutShiftInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  taskType: import_zod.z.union([import_zod.z.lazy(() => TaskTypeSchema), import_zod.z.lazy(() => EnumTaskTypeFieldUpdateOperationsInputSchema)]).optional(),
  startTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  duration: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  notes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var ShiftTaskUncheckedUpdateManyWithoutShiftInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  taskType: import_zod.z.union([import_zod.z.lazy(() => TaskTypeSchema), import_zod.z.lazy(() => EnumTaskTypeFieldUpdateOperationsInputSchema)]).optional(),
  startTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  endTime: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  duration: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  notes: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var PrepItemCreateManyPrepBoardInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  recipeId: import_zod.z.number().int(),
  quantity: import_zod.z.number().int(),
  status: import_zod.z.lazy(() => PrepStatusSchema),
  assignedToId: import_zod.z.number().int()
}).strict();
var RecipeUpdateWithoutPrepBoardsInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  cookBook: import_zod.z.lazy(() => CookBookUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUpdateManyWithoutRecipeNestedInputSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUpdateManyWithoutRecipesNestedInputSchema).optional()
}).strict();
var RecipeUncheckedUpdateWithoutPrepBoardsInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookBookId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional()
}).strict();
var RecipeUncheckedUpdateManyWithoutPrepBoardsInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookBookId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var PrepItemUpdateWithoutPrepBoardInputSchema = import_zod.z.object({
  quantity: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => PrepStatusSchema), import_zod.z.lazy(() => EnumPrepStatusFieldUpdateOperationsInputSchema)]).optional(),
  recipe: import_zod.z.lazy(() => RecipeUpdateOneRequiredWithoutPrepItemsNestedInputSchema).optional(),
  assignedTo: import_zod.z.lazy(() => UserUpdateOneRequiredWithoutPrepItemsNestedInputSchema).optional()
}).strict();
var PrepItemUncheckedUpdateWithoutPrepBoardInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => PrepStatusSchema), import_zod.z.lazy(() => EnumPrepStatusFieldUpdateOperationsInputSchema)]).optional(),
  assignedToId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var PrepItemUncheckedUpdateManyWithoutPrepBoardInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => PrepStatusSchema), import_zod.z.lazy(() => EnumPrepStatusFieldUpdateOperationsInputSchema)]).optional(),
  assignedToId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var MenuItemCreateManyMenuInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  price: import_zod.z.number(),
  foodCost: import_zod.z.number(),
  recipeIds: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeIdsInputSchema), import_zod.z.number().int().array()]).optional(),
  recipeServingsAmount: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeServingsAmountInputSchema), import_zod.z.number().array()]).optional(),
  recipeServingsCost: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreaterecipeServingsCostInputSchema), import_zod.z.number().array()]).optional(),
  allergens: import_zod.z.union([import_zod.z.lazy(() => MenuItemCreateallergensInputSchema), import_zod.z.string().array()]).optional(),
  nutritionalInfoId: import_zod.z.number().int().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional(),
  categoryId: import_zod.z.number().int().optional().nullable()
}).strict();
var MenuCategoryCreateManyMenuInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  name: import_zod.z.string(),
  description: import_zod.z.string().optional().nullable(),
  displayOrder: import_zod.z.number().int(),
  isActive: import_zod.z.boolean().optional(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var MenuItemUpdateWithoutMenuInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIds: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeIdsInputSchema), import_zod.z.number().int().array()]).optional(),
  recipeServingsAmount: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema), import_zod.z.number().array()]).optional(),
  recipeServingsCost: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema), import_zod.z.number().array()]).optional(),
  allergens: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateallergensInputSchema), import_zod.z.string().array()]).optional(),
  nutritionalInfoId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  nutritionalInfo: import_zod.z.lazy(() => NutritionalInfoUpdateOneWithoutMenuItemNestedInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUpdateManyWithoutMenuItemsNestedInputSchema).optional(),
  menuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  nutritionalRecommendation: import_zod.z.lazy(() => NutritionalRecommendationUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  category: import_zod.z.lazy(() => MenuCategoryUpdateOneWithoutMenuItemsNestedInputSchema).optional(),
  feedback: import_zod.z.lazy(() => CustomerFeedbackUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUpdateManyWithoutMenuItemsNestedInputSchema).optional()
}).strict();
var MenuItemUncheckedUpdateWithoutMenuInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIds: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeIdsInputSchema), import_zod.z.number().int().array()]).optional(),
  recipeServingsAmount: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema), import_zod.z.number().array()]).optional(),
  recipeServingsCost: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema), import_zod.z.number().array()]).optional(),
  allergens: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateallergensInputSchema), import_zod.z.string().array()]).optional(),
  nutritionalInfoId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  categoryId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  nutritionalInfo: import_zod.z.lazy(() => NutritionalInfoUncheckedUpdateOneWithoutMenuItemNestedInputSchema).optional(),
  recipes: import_zod.z.lazy(() => RecipeUncheckedUpdateManyWithoutMenuItemsNestedInputSchema).optional(),
  menuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  salesTransactions: import_zod.z.lazy(() => SalesTransactionsUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  leftoverItem: import_zod.z.lazy(() => LeftoverItemUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  nutritionalRecommendation: import_zod.z.lazy(() => NutritionalRecommendationUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  feedback: import_zod.z.lazy(() => CustomerFeedbackUncheckedUpdateManyWithoutMenuItemNestedInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutMenuItemsNestedInputSchema).optional()
}).strict();
var MenuItemUncheckedUpdateManyWithoutMenuInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  recipeIds: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeIdsInputSchema), import_zod.z.number().int().array()]).optional(),
  recipeServingsAmount: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeServingsAmountInputSchema), import_zod.z.number().array()]).optional(),
  recipeServingsCost: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdaterecipeServingsCostInputSchema), import_zod.z.number().array()]).optional(),
  allergens: import_zod.z.union([import_zod.z.lazy(() => MenuItemUpdateallergensInputSchema), import_zod.z.string().array()]).optional(),
  nutritionalInfoId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  categoryId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable()
}).strict();
var MenuCategoryUpdateWithoutMenuInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  displayOrder: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  isActive: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUpdateManyWithoutCategoryNestedInputSchema).optional()
}).strict();
var MenuCategoryUncheckedUpdateWithoutMenuInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  displayOrder: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  isActive: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  menuItems: import_zod.z.lazy(() => MenuItemUncheckedUpdateManyWithoutCategoryNestedInputSchema).optional()
}).strict();
var MenuCategoryUncheckedUpdateManyWithoutMenuInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  displayOrder: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  isActive: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var MenuItemRecipeCreateManyMenuItemInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  recipeId: import_zod.z.number().int(),
  joinAt: import_zod.z.coerce.date().optional()
}).strict();
var SalesTransactionsCreateManyMenuItemInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  posTransactionID: import_zod.z.string().optional().nullable(),
  restaurantId: import_zod.z.number().int(),
  price: import_zod.z.number(),
  total: import_zod.z.number(),
  transactionDate: import_zod.z.coerce.date(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var LeftoverItemCreateManyMenuItemInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  restaurantId: import_zod.z.number().int(),
  date: import_zod.z.coerce.date(),
  quantity: import_zod.z.number().int(),
  reason: import_zod.z.string(),
  recordedById: import_zod.z.number().int(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var NutritionalRecommendationCreateManyMenuItemInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  recommendation: import_zod.z.string(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var CustomerFeedbackCreateManyMenuItemInputSchema = import_zod.z.object({
  id: import_zod.z.number().int().optional(),
  restaurantId: import_zod.z.number().int(),
  rating: import_zod.z.number().int(),
  comment: import_zod.z.string().optional().nullable(),
  source: import_zod.z.lazy(() => FeedbackSourceSchema),
  tags: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackCreatetagsInputSchema), import_zod.z.string().array()]).optional(),
  status: import_zod.z.lazy(() => FeedbackStatusSchema).optional(),
  responseText: import_zod.z.string().optional().nullable(),
  respondedAt: import_zod.z.coerce.date().optional().nullable(),
  respondedById: import_zod.z.number().int().optional().nullable(),
  createdAt: import_zod.z.coerce.date().optional(),
  updatedAt: import_zod.z.coerce.date().optional()
}).strict();
var RecipeUpdateWithoutMenuItemsInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  cookBook: import_zod.z.lazy(() => CookBookUpdateOneRequiredWithoutRecipesNestedInputSchema).optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUpdateManyWithoutRecipeNestedInputSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUpdateManyWithoutRecipeNestedInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUpdateManyWithoutRecipesNestedInputSchema).optional()
}).strict();
var RecipeUncheckedUpdateWithoutMenuItemsInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookBookId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  ingredients: import_zod.z.lazy(() => RecipeIngredientUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  instructions: import_zod.z.lazy(() => RecipeInstructionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  foodCostHistory: import_zod.z.lazy(() => FoodCostHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepHistory: import_zod.z.lazy(() => PrepHistoryUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  prepBoards: import_zod.z.lazy(() => PrepBoardUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  prepItems: import_zod.z.lazy(() => PrepItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  MenuItemRecipe: import_zod.z.lazy(() => MenuItemRecipeUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  ProductionPlanItem: import_zod.z.lazy(() => ProductionPlanItemUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  InventoryWithdrawal: import_zod.z.lazy(() => InventoryWithdrawalUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  tags: import_zod.z.lazy(() => RecipeTagUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional(),
  versions: import_zod.z.lazy(() => RecipeVersionUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  equipment: import_zod.z.lazy(() => RecipeEquipmentUncheckedUpdateManyWithoutRecipeNestedInputSchema).optional(),
  dietaryRestrictions: import_zod.z.lazy(() => DietaryRestrictionUncheckedUpdateManyWithoutRecipesNestedInputSchema).optional()
}).strict();
var RecipeUncheckedUpdateManyWithoutMenuItemsInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  imageUrl: import_zod.z.union([import_zod.z.lazy(() => RecipeUpdateimageUrlInputSchema), import_zod.z.string().array()]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  servings: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  prepTime: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  frequency: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  cookBookId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  foodCost: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema)]).optional().nullable(),
  isDeleted: import_zod.z.union([import_zod.z.boolean(), import_zod.z.lazy(() => BoolFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var MenuItemRecipeUpdateWithoutMenuItemInputSchema = import_zod.z.object({
  joinAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  recipe: import_zod.z.lazy(() => RecipeUpdateOneRequiredWithoutMenuItemRecipeNestedInputSchema).optional()
}).strict();
var MenuItemRecipeUncheckedUpdateWithoutMenuItemInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  joinAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var MenuItemRecipeUncheckedUpdateManyWithoutMenuItemInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recipeId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  joinAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var SalesTransactionsUpdateWithoutMenuItemInputSchema = import_zod.z.object({
  posTransactionID: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  total: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  transactionDate: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantUpdateOneRequiredWithoutSalesTransactionsNestedInputSchema).optional()
}).strict();
var SalesTransactionsUncheckedUpdateWithoutMenuItemInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  posTransactionID: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  total: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  transactionDate: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var SalesTransactionsUncheckedUpdateManyWithoutMenuItemInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  posTransactionID: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  price: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  total: import_zod.z.union([import_zod.z.number(), import_zod.z.lazy(() => FloatFieldUpdateOperationsInputSchema)]).optional(),
  transactionDate: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var LeftoverItemUpdateWithoutMenuItemInputSchema = import_zod.z.object({
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  reason: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantUpdateOneRequiredWithoutLeftoverItemNestedInputSchema).optional(),
  recordedBy: import_zod.z.lazy(() => UserUpdateOneRequiredWithoutLeftoverItemNestedInputSchema).optional()
}).strict();
var LeftoverItemUncheckedUpdateWithoutMenuItemInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  reason: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recordedById: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var LeftoverItemUncheckedUpdateManyWithoutMenuItemInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  date: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  quantity: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  reason: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  recordedById: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var NutritionalRecommendationUpdateWithoutMenuItemInputSchema = import_zod.z.object({
  recommendation: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var NutritionalRecommendationUncheckedUpdateWithoutMenuItemInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recommendation: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var NutritionalRecommendationUncheckedUpdateManyWithoutMenuItemInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  recommendation: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var CustomerFeedbackUpdateWithoutMenuItemInputSchema = import_zod.z.object({
  rating: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  comment: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  source: import_zod.z.union([import_zod.z.lazy(() => FeedbackSourceSchema), import_zod.z.lazy(() => EnumFeedbackSourceFieldUpdateOperationsInputSchema)]).optional(),
  tags: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackUpdatetagsInputSchema), import_zod.z.string().array()]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => FeedbackStatusSchema), import_zod.z.lazy(() => EnumFeedbackStatusFieldUpdateOperationsInputSchema)]).optional(),
  responseText: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  respondedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  restaurant: import_zod.z.lazy(() => RestaurantUpdateOneRequiredWithoutQustomerFeedbackNestedInputSchema).optional(),
  respondedBy: import_zod.z.lazy(() => UserUpdateOneWithoutCustomerFeedbackNestedInputSchema).optional()
}).strict();
var CustomerFeedbackUncheckedUpdateWithoutMenuItemInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  rating: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  comment: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  source: import_zod.z.union([import_zod.z.lazy(() => FeedbackSourceSchema), import_zod.z.lazy(() => EnumFeedbackSourceFieldUpdateOperationsInputSchema)]).optional(),
  tags: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackUpdatetagsInputSchema), import_zod.z.string().array()]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => FeedbackStatusSchema), import_zod.z.lazy(() => EnumFeedbackStatusFieldUpdateOperationsInputSchema)]).optional(),
  responseText: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  respondedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  respondedById: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var CustomerFeedbackUncheckedUpdateManyWithoutMenuItemInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  restaurantId: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  rating: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  comment: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  source: import_zod.z.union([import_zod.z.lazy(() => FeedbackSourceSchema), import_zod.z.lazy(() => EnumFeedbackSourceFieldUpdateOperationsInputSchema)]).optional(),
  tags: import_zod.z.union([import_zod.z.lazy(() => CustomerFeedbackUpdatetagsInputSchema), import_zod.z.string().array()]).optional(),
  status: import_zod.z.union([import_zod.z.lazy(() => FeedbackStatusSchema), import_zod.z.lazy(() => EnumFeedbackStatusFieldUpdateOperationsInputSchema)]).optional(),
  responseText: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  respondedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema)]).optional().nullable(),
  respondedById: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => NullableIntFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var DietaryRestrictionUpdateWithoutMenuItemsInputSchema = import_zod.z.object({
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  icon: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  recipes: import_zod.z.lazy(() => RecipeUpdateManyWithoutDietaryRestrictionsNestedInputSchema).optional(),
  ingredients: import_zod.z.lazy(() => IngredientUpdateManyWithoutDietaryRestrictionNestedInputSchema).optional()
}).strict();
var DietaryRestrictionUncheckedUpdateWithoutMenuItemsInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  icon: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  recipes: import_zod.z.lazy(() => RecipeUncheckedUpdateManyWithoutDietaryRestrictionsNestedInputSchema).optional(),
  ingredients: import_zod.z.lazy(() => IngredientUncheckedUpdateManyWithoutDietaryRestrictionNestedInputSchema).optional()
}).strict();
var DietaryRestrictionUncheckedUpdateManyWithoutMenuItemsInputSchema = import_zod.z.object({
  id: import_zod.z.union([import_zod.z.number().int(), import_zod.z.lazy(() => IntFieldUpdateOperationsInputSchema)]).optional(),
  name: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => StringFieldUpdateOperationsInputSchema)]).optional(),
  description: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  icon: import_zod.z.union([import_zod.z.string(), import_zod.z.lazy(() => NullableStringFieldUpdateOperationsInputSchema)]).optional().nullable(),
  createdAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional(),
  updatedAt: import_zod.z.union([import_zod.z.coerce.date(), import_zod.z.lazy(() => DateTimeFieldUpdateOperationsInputSchema)]).optional()
}).strict();
var SalesTransactionsFindFirstArgsSchema = import_zod.z.object({
  select: SalesTransactionsSelectSchema.optional(),
  include: SalesTransactionsIncludeSchema.optional(),
  where: SalesTransactionsWhereInputSchema.optional(),
  orderBy: import_zod.z.union([SalesTransactionsOrderByWithRelationInputSchema.array(), SalesTransactionsOrderByWithRelationInputSchema]).optional(),
  cursor: SalesTransactionsWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([SalesTransactionsScalarFieldEnumSchema, SalesTransactionsScalarFieldEnumSchema.array()]).optional()
}).strict();
var SalesTransactionsFindFirstOrThrowArgsSchema = import_zod.z.object({
  select: SalesTransactionsSelectSchema.optional(),
  include: SalesTransactionsIncludeSchema.optional(),
  where: SalesTransactionsWhereInputSchema.optional(),
  orderBy: import_zod.z.union([SalesTransactionsOrderByWithRelationInputSchema.array(), SalesTransactionsOrderByWithRelationInputSchema]).optional(),
  cursor: SalesTransactionsWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([SalesTransactionsScalarFieldEnumSchema, SalesTransactionsScalarFieldEnumSchema.array()]).optional()
}).strict();
var SalesTransactionsFindManyArgsSchema = import_zod.z.object({
  select: SalesTransactionsSelectSchema.optional(),
  include: SalesTransactionsIncludeSchema.optional(),
  where: SalesTransactionsWhereInputSchema.optional(),
  orderBy: import_zod.z.union([SalesTransactionsOrderByWithRelationInputSchema.array(), SalesTransactionsOrderByWithRelationInputSchema]).optional(),
  cursor: SalesTransactionsWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([SalesTransactionsScalarFieldEnumSchema, SalesTransactionsScalarFieldEnumSchema.array()]).optional()
}).strict();
var SalesTransactionsAggregateArgsSchema = import_zod.z.object({
  where: SalesTransactionsWhereInputSchema.optional(),
  orderBy: import_zod.z.union([SalesTransactionsOrderByWithRelationInputSchema.array(), SalesTransactionsOrderByWithRelationInputSchema]).optional(),
  cursor: SalesTransactionsWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var SalesTransactionsGroupByArgsSchema = import_zod.z.object({
  where: SalesTransactionsWhereInputSchema.optional(),
  orderBy: import_zod.z.union([SalesTransactionsOrderByWithAggregationInputSchema.array(), SalesTransactionsOrderByWithAggregationInputSchema]).optional(),
  by: SalesTransactionsScalarFieldEnumSchema.array(),
  having: SalesTransactionsScalarWhereWithAggregatesInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var SalesTransactionsFindUniqueArgsSchema = import_zod.z.object({
  select: SalesTransactionsSelectSchema.optional(),
  include: SalesTransactionsIncludeSchema.optional(),
  where: SalesTransactionsWhereUniqueInputSchema
}).strict();
var SalesTransactionsFindUniqueOrThrowArgsSchema = import_zod.z.object({
  select: SalesTransactionsSelectSchema.optional(),
  include: SalesTransactionsIncludeSchema.optional(),
  where: SalesTransactionsWhereUniqueInputSchema
}).strict();
var MenuCategoryFindFirstArgsSchema = import_zod.z.object({
  select: MenuCategorySelectSchema.optional(),
  include: MenuCategoryIncludeSchema.optional(),
  where: MenuCategoryWhereInputSchema.optional(),
  orderBy: import_zod.z.union([MenuCategoryOrderByWithRelationInputSchema.array(), MenuCategoryOrderByWithRelationInputSchema]).optional(),
  cursor: MenuCategoryWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([MenuCategoryScalarFieldEnumSchema, MenuCategoryScalarFieldEnumSchema.array()]).optional()
}).strict();
var MenuCategoryFindFirstOrThrowArgsSchema = import_zod.z.object({
  select: MenuCategorySelectSchema.optional(),
  include: MenuCategoryIncludeSchema.optional(),
  where: MenuCategoryWhereInputSchema.optional(),
  orderBy: import_zod.z.union([MenuCategoryOrderByWithRelationInputSchema.array(), MenuCategoryOrderByWithRelationInputSchema]).optional(),
  cursor: MenuCategoryWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([MenuCategoryScalarFieldEnumSchema, MenuCategoryScalarFieldEnumSchema.array()]).optional()
}).strict();
var MenuCategoryFindManyArgsSchema = import_zod.z.object({
  select: MenuCategorySelectSchema.optional(),
  include: MenuCategoryIncludeSchema.optional(),
  where: MenuCategoryWhereInputSchema.optional(),
  orderBy: import_zod.z.union([MenuCategoryOrderByWithRelationInputSchema.array(), MenuCategoryOrderByWithRelationInputSchema]).optional(),
  cursor: MenuCategoryWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([MenuCategoryScalarFieldEnumSchema, MenuCategoryScalarFieldEnumSchema.array()]).optional()
}).strict();
var MenuCategoryAggregateArgsSchema = import_zod.z.object({
  where: MenuCategoryWhereInputSchema.optional(),
  orderBy: import_zod.z.union([MenuCategoryOrderByWithRelationInputSchema.array(), MenuCategoryOrderByWithRelationInputSchema]).optional(),
  cursor: MenuCategoryWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var MenuCategoryGroupByArgsSchema = import_zod.z.object({
  where: MenuCategoryWhereInputSchema.optional(),
  orderBy: import_zod.z.union([MenuCategoryOrderByWithAggregationInputSchema.array(), MenuCategoryOrderByWithAggregationInputSchema]).optional(),
  by: MenuCategoryScalarFieldEnumSchema.array(),
  having: MenuCategoryScalarWhereWithAggregatesInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var MenuCategoryFindUniqueArgsSchema = import_zod.z.object({
  select: MenuCategorySelectSchema.optional(),
  include: MenuCategoryIncludeSchema.optional(),
  where: MenuCategoryWhereUniqueInputSchema
}).strict();
var MenuCategoryFindUniqueOrThrowArgsSchema = import_zod.z.object({
  select: MenuCategorySelectSchema.optional(),
  include: MenuCategoryIncludeSchema.optional(),
  where: MenuCategoryWhereUniqueInputSchema
}).strict();
var RecipeVersionFindFirstArgsSchema = import_zod.z.object({
  select: RecipeVersionSelectSchema.optional(),
  include: RecipeVersionIncludeSchema.optional(),
  where: RecipeVersionWhereInputSchema.optional(),
  orderBy: import_zod.z.union([RecipeVersionOrderByWithRelationInputSchema.array(), RecipeVersionOrderByWithRelationInputSchema]).optional(),
  cursor: RecipeVersionWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([RecipeVersionScalarFieldEnumSchema, RecipeVersionScalarFieldEnumSchema.array()]).optional()
}).strict();
var RecipeVersionFindFirstOrThrowArgsSchema = import_zod.z.object({
  select: RecipeVersionSelectSchema.optional(),
  include: RecipeVersionIncludeSchema.optional(),
  where: RecipeVersionWhereInputSchema.optional(),
  orderBy: import_zod.z.union([RecipeVersionOrderByWithRelationInputSchema.array(), RecipeVersionOrderByWithRelationInputSchema]).optional(),
  cursor: RecipeVersionWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([RecipeVersionScalarFieldEnumSchema, RecipeVersionScalarFieldEnumSchema.array()]).optional()
}).strict();
var RecipeVersionFindManyArgsSchema = import_zod.z.object({
  select: RecipeVersionSelectSchema.optional(),
  include: RecipeVersionIncludeSchema.optional(),
  where: RecipeVersionWhereInputSchema.optional(),
  orderBy: import_zod.z.union([RecipeVersionOrderByWithRelationInputSchema.array(), RecipeVersionOrderByWithRelationInputSchema]).optional(),
  cursor: RecipeVersionWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([RecipeVersionScalarFieldEnumSchema, RecipeVersionScalarFieldEnumSchema.array()]).optional()
}).strict();
var RecipeVersionAggregateArgsSchema = import_zod.z.object({
  where: RecipeVersionWhereInputSchema.optional(),
  orderBy: import_zod.z.union([RecipeVersionOrderByWithRelationInputSchema.array(), RecipeVersionOrderByWithRelationInputSchema]).optional(),
  cursor: RecipeVersionWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var RecipeVersionGroupByArgsSchema = import_zod.z.object({
  where: RecipeVersionWhereInputSchema.optional(),
  orderBy: import_zod.z.union([RecipeVersionOrderByWithAggregationInputSchema.array(), RecipeVersionOrderByWithAggregationInputSchema]).optional(),
  by: RecipeVersionScalarFieldEnumSchema.array(),
  having: RecipeVersionScalarWhereWithAggregatesInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var RecipeVersionFindUniqueArgsSchema = import_zod.z.object({
  select: RecipeVersionSelectSchema.optional(),
  include: RecipeVersionIncludeSchema.optional(),
  where: RecipeVersionWhereUniqueInputSchema
}).strict();
var RecipeVersionFindUniqueOrThrowArgsSchema = import_zod.z.object({
  select: RecipeVersionSelectSchema.optional(),
  include: RecipeVersionIncludeSchema.optional(),
  where: RecipeVersionWhereUniqueInputSchema
}).strict();
var EquipmentFindFirstArgsSchema = import_zod.z.object({
  select: EquipmentSelectSchema.optional(),
  include: EquipmentIncludeSchema.optional(),
  where: EquipmentWhereInputSchema.optional(),
  orderBy: import_zod.z.union([EquipmentOrderByWithRelationInputSchema.array(), EquipmentOrderByWithRelationInputSchema]).optional(),
  cursor: EquipmentWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([EquipmentScalarFieldEnumSchema, EquipmentScalarFieldEnumSchema.array()]).optional()
}).strict();
var EquipmentFindFirstOrThrowArgsSchema = import_zod.z.object({
  select: EquipmentSelectSchema.optional(),
  include: EquipmentIncludeSchema.optional(),
  where: EquipmentWhereInputSchema.optional(),
  orderBy: import_zod.z.union([EquipmentOrderByWithRelationInputSchema.array(), EquipmentOrderByWithRelationInputSchema]).optional(),
  cursor: EquipmentWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([EquipmentScalarFieldEnumSchema, EquipmentScalarFieldEnumSchema.array()]).optional()
}).strict();
var EquipmentFindManyArgsSchema = import_zod.z.object({
  select: EquipmentSelectSchema.optional(),
  include: EquipmentIncludeSchema.optional(),
  where: EquipmentWhereInputSchema.optional(),
  orderBy: import_zod.z.union([EquipmentOrderByWithRelationInputSchema.array(), EquipmentOrderByWithRelationInputSchema]).optional(),
  cursor: EquipmentWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([EquipmentScalarFieldEnumSchema, EquipmentScalarFieldEnumSchema.array()]).optional()
}).strict();
var EquipmentAggregateArgsSchema = import_zod.z.object({
  where: EquipmentWhereInputSchema.optional(),
  orderBy: import_zod.z.union([EquipmentOrderByWithRelationInputSchema.array(), EquipmentOrderByWithRelationInputSchema]).optional(),
  cursor: EquipmentWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var EquipmentGroupByArgsSchema = import_zod.z.object({
  where: EquipmentWhereInputSchema.optional(),
  orderBy: import_zod.z.union([EquipmentOrderByWithAggregationInputSchema.array(), EquipmentOrderByWithAggregationInputSchema]).optional(),
  by: EquipmentScalarFieldEnumSchema.array(),
  having: EquipmentScalarWhereWithAggregatesInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var EquipmentFindUniqueArgsSchema = import_zod.z.object({
  select: EquipmentSelectSchema.optional(),
  include: EquipmentIncludeSchema.optional(),
  where: EquipmentWhereUniqueInputSchema
}).strict();
var EquipmentFindUniqueOrThrowArgsSchema = import_zod.z.object({
  select: EquipmentSelectSchema.optional(),
  include: EquipmentIncludeSchema.optional(),
  where: EquipmentWhereUniqueInputSchema
}).strict();
var RecipeEquipmentFindFirstArgsSchema = import_zod.z.object({
  select: RecipeEquipmentSelectSchema.optional(),
  include: RecipeEquipmentIncludeSchema.optional(),
  where: RecipeEquipmentWhereInputSchema.optional(),
  orderBy: import_zod.z.union([RecipeEquipmentOrderByWithRelationInputSchema.array(), RecipeEquipmentOrderByWithRelationInputSchema]).optional(),
  cursor: RecipeEquipmentWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([RecipeEquipmentScalarFieldEnumSchema, RecipeEquipmentScalarFieldEnumSchema.array()]).optional()
}).strict();
var RecipeEquipmentFindFirstOrThrowArgsSchema = import_zod.z.object({
  select: RecipeEquipmentSelectSchema.optional(),
  include: RecipeEquipmentIncludeSchema.optional(),
  where: RecipeEquipmentWhereInputSchema.optional(),
  orderBy: import_zod.z.union([RecipeEquipmentOrderByWithRelationInputSchema.array(), RecipeEquipmentOrderByWithRelationInputSchema]).optional(),
  cursor: RecipeEquipmentWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([RecipeEquipmentScalarFieldEnumSchema, RecipeEquipmentScalarFieldEnumSchema.array()]).optional()
}).strict();
var RecipeEquipmentFindManyArgsSchema = import_zod.z.object({
  select: RecipeEquipmentSelectSchema.optional(),
  include: RecipeEquipmentIncludeSchema.optional(),
  where: RecipeEquipmentWhereInputSchema.optional(),
  orderBy: import_zod.z.union([RecipeEquipmentOrderByWithRelationInputSchema.array(), RecipeEquipmentOrderByWithRelationInputSchema]).optional(),
  cursor: RecipeEquipmentWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([RecipeEquipmentScalarFieldEnumSchema, RecipeEquipmentScalarFieldEnumSchema.array()]).optional()
}).strict();
var RecipeEquipmentAggregateArgsSchema = import_zod.z.object({
  where: RecipeEquipmentWhereInputSchema.optional(),
  orderBy: import_zod.z.union([RecipeEquipmentOrderByWithRelationInputSchema.array(), RecipeEquipmentOrderByWithRelationInputSchema]).optional(),
  cursor: RecipeEquipmentWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var RecipeEquipmentGroupByArgsSchema = import_zod.z.object({
  where: RecipeEquipmentWhereInputSchema.optional(),
  orderBy: import_zod.z.union([RecipeEquipmentOrderByWithAggregationInputSchema.array(), RecipeEquipmentOrderByWithAggregationInputSchema]).optional(),
  by: RecipeEquipmentScalarFieldEnumSchema.array(),
  having: RecipeEquipmentScalarWhereWithAggregatesInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var RecipeEquipmentFindUniqueArgsSchema = import_zod.z.object({
  select: RecipeEquipmentSelectSchema.optional(),
  include: RecipeEquipmentIncludeSchema.optional(),
  where: RecipeEquipmentWhereUniqueInputSchema
}).strict();
var RecipeEquipmentFindUniqueOrThrowArgsSchema = import_zod.z.object({
  select: RecipeEquipmentSelectSchema.optional(),
  include: RecipeEquipmentIncludeSchema.optional(),
  where: RecipeEquipmentWhereUniqueInputSchema
}).strict();
var MaintenanceLogFindFirstArgsSchema = import_zod.z.object({
  select: MaintenanceLogSelectSchema.optional(),
  include: MaintenanceLogIncludeSchema.optional(),
  where: MaintenanceLogWhereInputSchema.optional(),
  orderBy: import_zod.z.union([MaintenanceLogOrderByWithRelationInputSchema.array(), MaintenanceLogOrderByWithRelationInputSchema]).optional(),
  cursor: MaintenanceLogWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([MaintenanceLogScalarFieldEnumSchema, MaintenanceLogScalarFieldEnumSchema.array()]).optional()
}).strict();
var MaintenanceLogFindFirstOrThrowArgsSchema = import_zod.z.object({
  select: MaintenanceLogSelectSchema.optional(),
  include: MaintenanceLogIncludeSchema.optional(),
  where: MaintenanceLogWhereInputSchema.optional(),
  orderBy: import_zod.z.union([MaintenanceLogOrderByWithRelationInputSchema.array(), MaintenanceLogOrderByWithRelationInputSchema]).optional(),
  cursor: MaintenanceLogWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([MaintenanceLogScalarFieldEnumSchema, MaintenanceLogScalarFieldEnumSchema.array()]).optional()
}).strict();
var MaintenanceLogFindManyArgsSchema = import_zod.z.object({
  select: MaintenanceLogSelectSchema.optional(),
  include: MaintenanceLogIncludeSchema.optional(),
  where: MaintenanceLogWhereInputSchema.optional(),
  orderBy: import_zod.z.union([MaintenanceLogOrderByWithRelationInputSchema.array(), MaintenanceLogOrderByWithRelationInputSchema]).optional(),
  cursor: MaintenanceLogWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([MaintenanceLogScalarFieldEnumSchema, MaintenanceLogScalarFieldEnumSchema.array()]).optional()
}).strict();
var MaintenanceLogAggregateArgsSchema = import_zod.z.object({
  where: MaintenanceLogWhereInputSchema.optional(),
  orderBy: import_zod.z.union([MaintenanceLogOrderByWithRelationInputSchema.array(), MaintenanceLogOrderByWithRelationInputSchema]).optional(),
  cursor: MaintenanceLogWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var MaintenanceLogGroupByArgsSchema = import_zod.z.object({
  where: MaintenanceLogWhereInputSchema.optional(),
  orderBy: import_zod.z.union([MaintenanceLogOrderByWithAggregationInputSchema.array(), MaintenanceLogOrderByWithAggregationInputSchema]).optional(),
  by: MaintenanceLogScalarFieldEnumSchema.array(),
  having: MaintenanceLogScalarWhereWithAggregatesInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var MaintenanceLogFindUniqueArgsSchema = import_zod.z.object({
  select: MaintenanceLogSelectSchema.optional(),
  include: MaintenanceLogIncludeSchema.optional(),
  where: MaintenanceLogWhereUniqueInputSchema
}).strict();
var MaintenanceLogFindUniqueOrThrowArgsSchema = import_zod.z.object({
  select: MaintenanceLogSelectSchema.optional(),
  include: MaintenanceLogIncludeSchema.optional(),
  where: MaintenanceLogWhereUniqueInputSchema
}).strict();
var QualityChecklistFindFirstArgsSchema = import_zod.z.object({
  select: QualityChecklistSelectSchema.optional(),
  include: QualityChecklistIncludeSchema.optional(),
  where: QualityChecklistWhereInputSchema.optional(),
  orderBy: import_zod.z.union([QualityChecklistOrderByWithRelationInputSchema.array(), QualityChecklistOrderByWithRelationInputSchema]).optional(),
  cursor: QualityChecklistWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([QualityChecklistScalarFieldEnumSchema, QualityChecklistScalarFieldEnumSchema.array()]).optional()
}).strict();
var QualityChecklistFindFirstOrThrowArgsSchema = import_zod.z.object({
  select: QualityChecklistSelectSchema.optional(),
  include: QualityChecklistIncludeSchema.optional(),
  where: QualityChecklistWhereInputSchema.optional(),
  orderBy: import_zod.z.union([QualityChecklistOrderByWithRelationInputSchema.array(), QualityChecklistOrderByWithRelationInputSchema]).optional(),
  cursor: QualityChecklistWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([QualityChecklistScalarFieldEnumSchema, QualityChecklistScalarFieldEnumSchema.array()]).optional()
}).strict();
var QualityChecklistFindManyArgsSchema = import_zod.z.object({
  select: QualityChecklistSelectSchema.optional(),
  include: QualityChecklistIncludeSchema.optional(),
  where: QualityChecklistWhereInputSchema.optional(),
  orderBy: import_zod.z.union([QualityChecklistOrderByWithRelationInputSchema.array(), QualityChecklistOrderByWithRelationInputSchema]).optional(),
  cursor: QualityChecklistWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([QualityChecklistScalarFieldEnumSchema, QualityChecklistScalarFieldEnumSchema.array()]).optional()
}).strict();
var QualityChecklistAggregateArgsSchema = import_zod.z.object({
  where: QualityChecklistWhereInputSchema.optional(),
  orderBy: import_zod.z.union([QualityChecklistOrderByWithRelationInputSchema.array(), QualityChecklistOrderByWithRelationInputSchema]).optional(),
  cursor: QualityChecklistWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var QualityChecklistGroupByArgsSchema = import_zod.z.object({
  where: QualityChecklistWhereInputSchema.optional(),
  orderBy: import_zod.z.union([QualityChecklistOrderByWithAggregationInputSchema.array(), QualityChecklistOrderByWithAggregationInputSchema]).optional(),
  by: QualityChecklistScalarFieldEnumSchema.array(),
  having: QualityChecklistScalarWhereWithAggregatesInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var QualityChecklistFindUniqueArgsSchema = import_zod.z.object({
  select: QualityChecklistSelectSchema.optional(),
  include: QualityChecklistIncludeSchema.optional(),
  where: QualityChecklistWhereUniqueInputSchema
}).strict();
var QualityChecklistFindUniqueOrThrowArgsSchema = import_zod.z.object({
  select: QualityChecklistSelectSchema.optional(),
  include: QualityChecklistIncludeSchema.optional(),
  where: QualityChecklistWhereUniqueInputSchema
}).strict();
var ChecklistItemFindFirstArgsSchema = import_zod.z.object({
  select: ChecklistItemSelectSchema.optional(),
  include: ChecklistItemIncludeSchema.optional(),
  where: ChecklistItemWhereInputSchema.optional(),
  orderBy: import_zod.z.union([ChecklistItemOrderByWithRelationInputSchema.array(), ChecklistItemOrderByWithRelationInputSchema]).optional(),
  cursor: ChecklistItemWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([ChecklistItemScalarFieldEnumSchema, ChecklistItemScalarFieldEnumSchema.array()]).optional()
}).strict();
var ChecklistItemFindFirstOrThrowArgsSchema = import_zod.z.object({
  select: ChecklistItemSelectSchema.optional(),
  include: ChecklistItemIncludeSchema.optional(),
  where: ChecklistItemWhereInputSchema.optional(),
  orderBy: import_zod.z.union([ChecklistItemOrderByWithRelationInputSchema.array(), ChecklistItemOrderByWithRelationInputSchema]).optional(),
  cursor: ChecklistItemWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([ChecklistItemScalarFieldEnumSchema, ChecklistItemScalarFieldEnumSchema.array()]).optional()
}).strict();
var ChecklistItemFindManyArgsSchema = import_zod.z.object({
  select: ChecklistItemSelectSchema.optional(),
  include: ChecklistItemIncludeSchema.optional(),
  where: ChecklistItemWhereInputSchema.optional(),
  orderBy: import_zod.z.union([ChecklistItemOrderByWithRelationInputSchema.array(), ChecklistItemOrderByWithRelationInputSchema]).optional(),
  cursor: ChecklistItemWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([ChecklistItemScalarFieldEnumSchema, ChecklistItemScalarFieldEnumSchema.array()]).optional()
}).strict();
var ChecklistItemAggregateArgsSchema = import_zod.z.object({
  where: ChecklistItemWhereInputSchema.optional(),
  orderBy: import_zod.z.union([ChecklistItemOrderByWithRelationInputSchema.array(), ChecklistItemOrderByWithRelationInputSchema]).optional(),
  cursor: ChecklistItemWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var ChecklistItemGroupByArgsSchema = import_zod.z.object({
  where: ChecklistItemWhereInputSchema.optional(),
  orderBy: import_zod.z.union([ChecklistItemOrderByWithAggregationInputSchema.array(), ChecklistItemOrderByWithAggregationInputSchema]).optional(),
  by: ChecklistItemScalarFieldEnumSchema.array(),
  having: ChecklistItemScalarWhereWithAggregatesInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var ChecklistItemFindUniqueArgsSchema = import_zod.z.object({
  select: ChecklistItemSelectSchema.optional(),
  include: ChecklistItemIncludeSchema.optional(),
  where: ChecklistItemWhereUniqueInputSchema
}).strict();
var ChecklistItemFindUniqueOrThrowArgsSchema = import_zod.z.object({
  select: ChecklistItemSelectSchema.optional(),
  include: ChecklistItemIncludeSchema.optional(),
  where: ChecklistItemWhereUniqueInputSchema
}).strict();
var ChecklistCompleteFindFirstArgsSchema = import_zod.z.object({
  select: ChecklistCompleteSelectSchema.optional(),
  include: ChecklistCompleteIncludeSchema.optional(),
  where: ChecklistCompleteWhereInputSchema.optional(),
  orderBy: import_zod.z.union([ChecklistCompleteOrderByWithRelationInputSchema.array(), ChecklistCompleteOrderByWithRelationInputSchema]).optional(),
  cursor: ChecklistCompleteWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([ChecklistCompleteScalarFieldEnumSchema, ChecklistCompleteScalarFieldEnumSchema.array()]).optional()
}).strict();
var ChecklistCompleteFindFirstOrThrowArgsSchema = import_zod.z.object({
  select: ChecklistCompleteSelectSchema.optional(),
  include: ChecklistCompleteIncludeSchema.optional(),
  where: ChecklistCompleteWhereInputSchema.optional(),
  orderBy: import_zod.z.union([ChecklistCompleteOrderByWithRelationInputSchema.array(), ChecklistCompleteOrderByWithRelationInputSchema]).optional(),
  cursor: ChecklistCompleteWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([ChecklistCompleteScalarFieldEnumSchema, ChecklistCompleteScalarFieldEnumSchema.array()]).optional()
}).strict();
var ChecklistCompleteFindManyArgsSchema = import_zod.z.object({
  select: ChecklistCompleteSelectSchema.optional(),
  include: ChecklistCompleteIncludeSchema.optional(),
  where: ChecklistCompleteWhereInputSchema.optional(),
  orderBy: import_zod.z.union([ChecklistCompleteOrderByWithRelationInputSchema.array(), ChecklistCompleteOrderByWithRelationInputSchema]).optional(),
  cursor: ChecklistCompleteWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([ChecklistCompleteScalarFieldEnumSchema, ChecklistCompleteScalarFieldEnumSchema.array()]).optional()
}).strict();
var ChecklistCompleteAggregateArgsSchema = import_zod.z.object({
  where: ChecklistCompleteWhereInputSchema.optional(),
  orderBy: import_zod.z.union([ChecklistCompleteOrderByWithRelationInputSchema.array(), ChecklistCompleteOrderByWithRelationInputSchema]).optional(),
  cursor: ChecklistCompleteWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var ChecklistCompleteGroupByArgsSchema = import_zod.z.object({
  where: ChecklistCompleteWhereInputSchema.optional(),
  orderBy: import_zod.z.union([ChecklistCompleteOrderByWithAggregationInputSchema.array(), ChecklistCompleteOrderByWithAggregationInputSchema]).optional(),
  by: ChecklistCompleteScalarFieldEnumSchema.array(),
  having: ChecklistCompleteScalarWhereWithAggregatesInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var ChecklistCompleteFindUniqueArgsSchema = import_zod.z.object({
  select: ChecklistCompleteSelectSchema.optional(),
  include: ChecklistCompleteIncludeSchema.optional(),
  where: ChecklistCompleteWhereUniqueInputSchema
}).strict();
var ChecklistCompleteFindUniqueOrThrowArgsSchema = import_zod.z.object({
  select: ChecklistCompleteSelectSchema.optional(),
  include: ChecklistCompleteIncludeSchema.optional(),
  where: ChecklistCompleteWhereUniqueInputSchema
}).strict();
var ChecklistItemCompleteFindFirstArgsSchema = import_zod.z.object({
  select: ChecklistItemCompleteSelectSchema.optional(),
  include: ChecklistItemCompleteIncludeSchema.optional(),
  where: ChecklistItemCompleteWhereInputSchema.optional(),
  orderBy: import_zod.z.union([ChecklistItemCompleteOrderByWithRelationInputSchema.array(), ChecklistItemCompleteOrderByWithRelationInputSchema]).optional(),
  cursor: ChecklistItemCompleteWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([ChecklistItemCompleteScalarFieldEnumSchema, ChecklistItemCompleteScalarFieldEnumSchema.array()]).optional()
}).strict();
var ChecklistItemCompleteFindFirstOrThrowArgsSchema = import_zod.z.object({
  select: ChecklistItemCompleteSelectSchema.optional(),
  include: ChecklistItemCompleteIncludeSchema.optional(),
  where: ChecklistItemCompleteWhereInputSchema.optional(),
  orderBy: import_zod.z.union([ChecklistItemCompleteOrderByWithRelationInputSchema.array(), ChecklistItemCompleteOrderByWithRelationInputSchema]).optional(),
  cursor: ChecklistItemCompleteWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([ChecklistItemCompleteScalarFieldEnumSchema, ChecklistItemCompleteScalarFieldEnumSchema.array()]).optional()
}).strict();
var ChecklistItemCompleteFindManyArgsSchema = import_zod.z.object({
  select: ChecklistItemCompleteSelectSchema.optional(),
  include: ChecklistItemCompleteIncludeSchema.optional(),
  where: ChecklistItemCompleteWhereInputSchema.optional(),
  orderBy: import_zod.z.union([ChecklistItemCompleteOrderByWithRelationInputSchema.array(), ChecklistItemCompleteOrderByWithRelationInputSchema]).optional(),
  cursor: ChecklistItemCompleteWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([ChecklistItemCompleteScalarFieldEnumSchema, ChecklistItemCompleteScalarFieldEnumSchema.array()]).optional()
}).strict();
var ChecklistItemCompleteAggregateArgsSchema = import_zod.z.object({
  where: ChecklistItemCompleteWhereInputSchema.optional(),
  orderBy: import_zod.z.union([ChecklistItemCompleteOrderByWithRelationInputSchema.array(), ChecklistItemCompleteOrderByWithRelationInputSchema]).optional(),
  cursor: ChecklistItemCompleteWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var ChecklistItemCompleteGroupByArgsSchema = import_zod.z.object({
  where: ChecklistItemCompleteWhereInputSchema.optional(),
  orderBy: import_zod.z.union([ChecklistItemCompleteOrderByWithAggregationInputSchema.array(), ChecklistItemCompleteOrderByWithAggregationInputSchema]).optional(),
  by: ChecklistItemCompleteScalarFieldEnumSchema.array(),
  having: ChecklistItemCompleteScalarWhereWithAggregatesInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var ChecklistItemCompleteFindUniqueArgsSchema = import_zod.z.object({
  select: ChecklistItemCompleteSelectSchema.optional(),
  include: ChecklistItemCompleteIncludeSchema.optional(),
  where: ChecklistItemCompleteWhereUniqueInputSchema
}).strict();
var ChecklistItemCompleteFindUniqueOrThrowArgsSchema = import_zod.z.object({
  select: ChecklistItemCompleteSelectSchema.optional(),
  include: ChecklistItemCompleteIncludeSchema.optional(),
  where: ChecklistItemCompleteWhereUniqueInputSchema
}).strict();
var SupplierPriceHistoryFindFirstArgsSchema = import_zod.z.object({
  select: SupplierPriceHistorySelectSchema.optional(),
  include: SupplierPriceHistoryIncludeSchema.optional(),
  where: SupplierPriceHistoryWhereInputSchema.optional(),
  orderBy: import_zod.z.union([SupplierPriceHistoryOrderByWithRelationInputSchema.array(), SupplierPriceHistoryOrderByWithRelationInputSchema]).optional(),
  cursor: SupplierPriceHistoryWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([SupplierPriceHistoryScalarFieldEnumSchema, SupplierPriceHistoryScalarFieldEnumSchema.array()]).optional()
}).strict();
var SupplierPriceHistoryFindFirstOrThrowArgsSchema = import_zod.z.object({
  select: SupplierPriceHistorySelectSchema.optional(),
  include: SupplierPriceHistoryIncludeSchema.optional(),
  where: SupplierPriceHistoryWhereInputSchema.optional(),
  orderBy: import_zod.z.union([SupplierPriceHistoryOrderByWithRelationInputSchema.array(), SupplierPriceHistoryOrderByWithRelationInputSchema]).optional(),
  cursor: SupplierPriceHistoryWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([SupplierPriceHistoryScalarFieldEnumSchema, SupplierPriceHistoryScalarFieldEnumSchema.array()]).optional()
}).strict();
var SupplierPriceHistoryFindManyArgsSchema = import_zod.z.object({
  select: SupplierPriceHistorySelectSchema.optional(),
  include: SupplierPriceHistoryIncludeSchema.optional(),
  where: SupplierPriceHistoryWhereInputSchema.optional(),
  orderBy: import_zod.z.union([SupplierPriceHistoryOrderByWithRelationInputSchema.array(), SupplierPriceHistoryOrderByWithRelationInputSchema]).optional(),
  cursor: SupplierPriceHistoryWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([SupplierPriceHistoryScalarFieldEnumSchema, SupplierPriceHistoryScalarFieldEnumSchema.array()]).optional()
}).strict();
var SupplierPriceHistoryAggregateArgsSchema = import_zod.z.object({
  where: SupplierPriceHistoryWhereInputSchema.optional(),
  orderBy: import_zod.z.union([SupplierPriceHistoryOrderByWithRelationInputSchema.array(), SupplierPriceHistoryOrderByWithRelationInputSchema]).optional(),
  cursor: SupplierPriceHistoryWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var SupplierPriceHistoryGroupByArgsSchema = import_zod.z.object({
  where: SupplierPriceHistoryWhereInputSchema.optional(),
  orderBy: import_zod.z.union([SupplierPriceHistoryOrderByWithAggregationInputSchema.array(), SupplierPriceHistoryOrderByWithAggregationInputSchema]).optional(),
  by: SupplierPriceHistoryScalarFieldEnumSchema.array(),
  having: SupplierPriceHistoryScalarWhereWithAggregatesInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var SupplierPriceHistoryFindUniqueArgsSchema = import_zod.z.object({
  select: SupplierPriceHistorySelectSchema.optional(),
  include: SupplierPriceHistoryIncludeSchema.optional(),
  where: SupplierPriceHistoryWhereUniqueInputSchema
}).strict();
var SupplierPriceHistoryFindUniqueOrThrowArgsSchema = import_zod.z.object({
  select: SupplierPriceHistorySelectSchema.optional(),
  include: SupplierPriceHistoryIncludeSchema.optional(),
  where: SupplierPriceHistoryWhereUniqueInputSchema
}).strict();
var CustomerFeedbackFindFirstArgsSchema = import_zod.z.object({
  select: CustomerFeedbackSelectSchema.optional(),
  include: CustomerFeedbackIncludeSchema.optional(),
  where: CustomerFeedbackWhereInputSchema.optional(),
  orderBy: import_zod.z.union([CustomerFeedbackOrderByWithRelationInputSchema.array(), CustomerFeedbackOrderByWithRelationInputSchema]).optional(),
  cursor: CustomerFeedbackWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([CustomerFeedbackScalarFieldEnumSchema, CustomerFeedbackScalarFieldEnumSchema.array()]).optional()
}).strict();
var CustomerFeedbackFindFirstOrThrowArgsSchema = import_zod.z.object({
  select: CustomerFeedbackSelectSchema.optional(),
  include: CustomerFeedbackIncludeSchema.optional(),
  where: CustomerFeedbackWhereInputSchema.optional(),
  orderBy: import_zod.z.union([CustomerFeedbackOrderByWithRelationInputSchema.array(), CustomerFeedbackOrderByWithRelationInputSchema]).optional(),
  cursor: CustomerFeedbackWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([CustomerFeedbackScalarFieldEnumSchema, CustomerFeedbackScalarFieldEnumSchema.array()]).optional()
}).strict();
var CustomerFeedbackFindManyArgsSchema = import_zod.z.object({
  select: CustomerFeedbackSelectSchema.optional(),
  include: CustomerFeedbackIncludeSchema.optional(),
  where: CustomerFeedbackWhereInputSchema.optional(),
  orderBy: import_zod.z.union([CustomerFeedbackOrderByWithRelationInputSchema.array(), CustomerFeedbackOrderByWithRelationInputSchema]).optional(),
  cursor: CustomerFeedbackWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([CustomerFeedbackScalarFieldEnumSchema, CustomerFeedbackScalarFieldEnumSchema.array()]).optional()
}).strict();
var CustomerFeedbackAggregateArgsSchema = import_zod.z.object({
  where: CustomerFeedbackWhereInputSchema.optional(),
  orderBy: import_zod.z.union([CustomerFeedbackOrderByWithRelationInputSchema.array(), CustomerFeedbackOrderByWithRelationInputSchema]).optional(),
  cursor: CustomerFeedbackWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var CustomerFeedbackGroupByArgsSchema = import_zod.z.object({
  where: CustomerFeedbackWhereInputSchema.optional(),
  orderBy: import_zod.z.union([CustomerFeedbackOrderByWithAggregationInputSchema.array(), CustomerFeedbackOrderByWithAggregationInputSchema]).optional(),
  by: CustomerFeedbackScalarFieldEnumSchema.array(),
  having: CustomerFeedbackScalarWhereWithAggregatesInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var CustomerFeedbackFindUniqueArgsSchema = import_zod.z.object({
  select: CustomerFeedbackSelectSchema.optional(),
  include: CustomerFeedbackIncludeSchema.optional(),
  where: CustomerFeedbackWhereUniqueInputSchema
}).strict();
var CustomerFeedbackFindUniqueOrThrowArgsSchema = import_zod.z.object({
  select: CustomerFeedbackSelectSchema.optional(),
  include: CustomerFeedbackIncludeSchema.optional(),
  where: CustomerFeedbackWhereUniqueInputSchema
}).strict();
var DietaryRestrictionFindFirstArgsSchema = import_zod.z.object({
  select: DietaryRestrictionSelectSchema.optional(),
  include: DietaryRestrictionIncludeSchema.optional(),
  where: DietaryRestrictionWhereInputSchema.optional(),
  orderBy: import_zod.z.union([DietaryRestrictionOrderByWithRelationInputSchema.array(), DietaryRestrictionOrderByWithRelationInputSchema]).optional(),
  cursor: DietaryRestrictionWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([DietaryRestrictionScalarFieldEnumSchema, DietaryRestrictionScalarFieldEnumSchema.array()]).optional()
}).strict();
var DietaryRestrictionFindFirstOrThrowArgsSchema = import_zod.z.object({
  select: DietaryRestrictionSelectSchema.optional(),
  include: DietaryRestrictionIncludeSchema.optional(),
  where: DietaryRestrictionWhereInputSchema.optional(),
  orderBy: import_zod.z.union([DietaryRestrictionOrderByWithRelationInputSchema.array(), DietaryRestrictionOrderByWithRelationInputSchema]).optional(),
  cursor: DietaryRestrictionWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([DietaryRestrictionScalarFieldEnumSchema, DietaryRestrictionScalarFieldEnumSchema.array()]).optional()
}).strict();
var DietaryRestrictionFindManyArgsSchema = import_zod.z.object({
  select: DietaryRestrictionSelectSchema.optional(),
  include: DietaryRestrictionIncludeSchema.optional(),
  where: DietaryRestrictionWhereInputSchema.optional(),
  orderBy: import_zod.z.union([DietaryRestrictionOrderByWithRelationInputSchema.array(), DietaryRestrictionOrderByWithRelationInputSchema]).optional(),
  cursor: DietaryRestrictionWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([DietaryRestrictionScalarFieldEnumSchema, DietaryRestrictionScalarFieldEnumSchema.array()]).optional()
}).strict();
var DietaryRestrictionAggregateArgsSchema = import_zod.z.object({
  where: DietaryRestrictionWhereInputSchema.optional(),
  orderBy: import_zod.z.union([DietaryRestrictionOrderByWithRelationInputSchema.array(), DietaryRestrictionOrderByWithRelationInputSchema]).optional(),
  cursor: DietaryRestrictionWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var DietaryRestrictionGroupByArgsSchema = import_zod.z.object({
  where: DietaryRestrictionWhereInputSchema.optional(),
  orderBy: import_zod.z.union([DietaryRestrictionOrderByWithAggregationInputSchema.array(), DietaryRestrictionOrderByWithAggregationInputSchema]).optional(),
  by: DietaryRestrictionScalarFieldEnumSchema.array(),
  having: DietaryRestrictionScalarWhereWithAggregatesInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var DietaryRestrictionFindUniqueArgsSchema = import_zod.z.object({
  select: DietaryRestrictionSelectSchema.optional(),
  include: DietaryRestrictionIncludeSchema.optional(),
  where: DietaryRestrictionWhereUniqueInputSchema
}).strict();
var DietaryRestrictionFindUniqueOrThrowArgsSchema = import_zod.z.object({
  select: DietaryRestrictionSelectSchema.optional(),
  include: DietaryRestrictionIncludeSchema.optional(),
  where: DietaryRestrictionWhereUniqueInputSchema
}).strict();
var RecipeTagFindFirstArgsSchema = import_zod.z.object({
  select: RecipeTagSelectSchema.optional(),
  include: RecipeTagIncludeSchema.optional(),
  where: RecipeTagWhereInputSchema.optional(),
  orderBy: import_zod.z.union([RecipeTagOrderByWithRelationInputSchema.array(), RecipeTagOrderByWithRelationInputSchema]).optional(),
  cursor: RecipeTagWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([RecipeTagScalarFieldEnumSchema, RecipeTagScalarFieldEnumSchema.array()]).optional()
}).strict();
var RecipeTagFindFirstOrThrowArgsSchema = import_zod.z.object({
  select: RecipeTagSelectSchema.optional(),
  include: RecipeTagIncludeSchema.optional(),
  where: RecipeTagWhereInputSchema.optional(),
  orderBy: import_zod.z.union([RecipeTagOrderByWithRelationInputSchema.array(), RecipeTagOrderByWithRelationInputSchema]).optional(),
  cursor: RecipeTagWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([RecipeTagScalarFieldEnumSchema, RecipeTagScalarFieldEnumSchema.array()]).optional()
}).strict();
var RecipeTagFindManyArgsSchema = import_zod.z.object({
  select: RecipeTagSelectSchema.optional(),
  include: RecipeTagIncludeSchema.optional(),
  where: RecipeTagWhereInputSchema.optional(),
  orderBy: import_zod.z.union([RecipeTagOrderByWithRelationInputSchema.array(), RecipeTagOrderByWithRelationInputSchema]).optional(),
  cursor: RecipeTagWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([RecipeTagScalarFieldEnumSchema, RecipeTagScalarFieldEnumSchema.array()]).optional()
}).strict();
var RecipeTagAggregateArgsSchema = import_zod.z.object({
  where: RecipeTagWhereInputSchema.optional(),
  orderBy: import_zod.z.union([RecipeTagOrderByWithRelationInputSchema.array(), RecipeTagOrderByWithRelationInputSchema]).optional(),
  cursor: RecipeTagWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var RecipeTagGroupByArgsSchema = import_zod.z.object({
  where: RecipeTagWhereInputSchema.optional(),
  orderBy: import_zod.z.union([RecipeTagOrderByWithAggregationInputSchema.array(), RecipeTagOrderByWithAggregationInputSchema]).optional(),
  by: RecipeTagScalarFieldEnumSchema.array(),
  having: RecipeTagScalarWhereWithAggregatesInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var RecipeTagFindUniqueArgsSchema = import_zod.z.object({
  select: RecipeTagSelectSchema.optional(),
  include: RecipeTagIncludeSchema.optional(),
  where: RecipeTagWhereUniqueInputSchema
}).strict();
var RecipeTagFindUniqueOrThrowArgsSchema = import_zod.z.object({
  select: RecipeTagSelectSchema.optional(),
  include: RecipeTagIncludeSchema.optional(),
  where: RecipeTagWhereUniqueInputSchema
}).strict();
var LeftoverItemFindFirstArgsSchema = import_zod.z.object({
  select: LeftoverItemSelectSchema.optional(),
  include: LeftoverItemIncludeSchema.optional(),
  where: LeftoverItemWhereInputSchema.optional(),
  orderBy: import_zod.z.union([LeftoverItemOrderByWithRelationInputSchema.array(), LeftoverItemOrderByWithRelationInputSchema]).optional(),
  cursor: LeftoverItemWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([LeftoverItemScalarFieldEnumSchema, LeftoverItemScalarFieldEnumSchema.array()]).optional()
}).strict();
var LeftoverItemFindFirstOrThrowArgsSchema = import_zod.z.object({
  select: LeftoverItemSelectSchema.optional(),
  include: LeftoverItemIncludeSchema.optional(),
  where: LeftoverItemWhereInputSchema.optional(),
  orderBy: import_zod.z.union([LeftoverItemOrderByWithRelationInputSchema.array(), LeftoverItemOrderByWithRelationInputSchema]).optional(),
  cursor: LeftoverItemWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([LeftoverItemScalarFieldEnumSchema, LeftoverItemScalarFieldEnumSchema.array()]).optional()
}).strict();
var LeftoverItemFindManyArgsSchema = import_zod.z.object({
  select: LeftoverItemSelectSchema.optional(),
  include: LeftoverItemIncludeSchema.optional(),
  where: LeftoverItemWhereInputSchema.optional(),
  orderBy: import_zod.z.union([LeftoverItemOrderByWithRelationInputSchema.array(), LeftoverItemOrderByWithRelationInputSchema]).optional(),
  cursor: LeftoverItemWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([LeftoverItemScalarFieldEnumSchema, LeftoverItemScalarFieldEnumSchema.array()]).optional()
}).strict();
var LeftoverItemAggregateArgsSchema = import_zod.z.object({
  where: LeftoverItemWhereInputSchema.optional(),
  orderBy: import_zod.z.union([LeftoverItemOrderByWithRelationInputSchema.array(), LeftoverItemOrderByWithRelationInputSchema]).optional(),
  cursor: LeftoverItemWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var LeftoverItemGroupByArgsSchema = import_zod.z.object({
  where: LeftoverItemWhereInputSchema.optional(),
  orderBy: import_zod.z.union([LeftoverItemOrderByWithAggregationInputSchema.array(), LeftoverItemOrderByWithAggregationInputSchema]).optional(),
  by: LeftoverItemScalarFieldEnumSchema.array(),
  having: LeftoverItemScalarWhereWithAggregatesInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var LeftoverItemFindUniqueArgsSchema = import_zod.z.object({
  select: LeftoverItemSelectSchema.optional(),
  include: LeftoverItemIncludeSchema.optional(),
  where: LeftoverItemWhereUniqueInputSchema
}).strict();
var LeftoverItemFindUniqueOrThrowArgsSchema = import_zod.z.object({
  select: LeftoverItemSelectSchema.optional(),
  include: LeftoverItemIncludeSchema.optional(),
  where: LeftoverItemWhereUniqueInputSchema
}).strict();
var WasteRecordFindFirstArgsSchema = import_zod.z.object({
  select: WasteRecordSelectSchema.optional(),
  include: WasteRecordIncludeSchema.optional(),
  where: WasteRecordWhereInputSchema.optional(),
  orderBy: import_zod.z.union([WasteRecordOrderByWithRelationInputSchema.array(), WasteRecordOrderByWithRelationInputSchema]).optional(),
  cursor: WasteRecordWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([WasteRecordScalarFieldEnumSchema, WasteRecordScalarFieldEnumSchema.array()]).optional()
}).strict();
var WasteRecordFindFirstOrThrowArgsSchema = import_zod.z.object({
  select: WasteRecordSelectSchema.optional(),
  include: WasteRecordIncludeSchema.optional(),
  where: WasteRecordWhereInputSchema.optional(),
  orderBy: import_zod.z.union([WasteRecordOrderByWithRelationInputSchema.array(), WasteRecordOrderByWithRelationInputSchema]).optional(),
  cursor: WasteRecordWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([WasteRecordScalarFieldEnumSchema, WasteRecordScalarFieldEnumSchema.array()]).optional()
}).strict();
var WasteRecordFindManyArgsSchema = import_zod.z.object({
  select: WasteRecordSelectSchema.optional(),
  include: WasteRecordIncludeSchema.optional(),
  where: WasteRecordWhereInputSchema.optional(),
  orderBy: import_zod.z.union([WasteRecordOrderByWithRelationInputSchema.array(), WasteRecordOrderByWithRelationInputSchema]).optional(),
  cursor: WasteRecordWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([WasteRecordScalarFieldEnumSchema, WasteRecordScalarFieldEnumSchema.array()]).optional()
}).strict();
var WasteRecordAggregateArgsSchema = import_zod.z.object({
  where: WasteRecordWhereInputSchema.optional(),
  orderBy: import_zod.z.union([WasteRecordOrderByWithRelationInputSchema.array(), WasteRecordOrderByWithRelationInputSchema]).optional(),
  cursor: WasteRecordWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var WasteRecordGroupByArgsSchema = import_zod.z.object({
  where: WasteRecordWhereInputSchema.optional(),
  orderBy: import_zod.z.union([WasteRecordOrderByWithAggregationInputSchema.array(), WasteRecordOrderByWithAggregationInputSchema]).optional(),
  by: WasteRecordScalarFieldEnumSchema.array(),
  having: WasteRecordScalarWhereWithAggregatesInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var WasteRecordFindUniqueArgsSchema = import_zod.z.object({
  select: WasteRecordSelectSchema.optional(),
  include: WasteRecordIncludeSchema.optional(),
  where: WasteRecordWhereUniqueInputSchema
}).strict();
var WasteRecordFindUniqueOrThrowArgsSchema = import_zod.z.object({
  select: WasteRecordSelectSchema.optional(),
  include: WasteRecordIncludeSchema.optional(),
  where: WasteRecordWhereUniqueInputSchema
}).strict();
var ProductionPlanFindFirstArgsSchema = import_zod.z.object({
  select: ProductionPlanSelectSchema.optional(),
  include: ProductionPlanIncludeSchema.optional(),
  where: ProductionPlanWhereInputSchema.optional(),
  orderBy: import_zod.z.union([ProductionPlanOrderByWithRelationInputSchema.array(), ProductionPlanOrderByWithRelationInputSchema]).optional(),
  cursor: ProductionPlanWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([ProductionPlanScalarFieldEnumSchema, ProductionPlanScalarFieldEnumSchema.array()]).optional()
}).strict();
var ProductionPlanFindFirstOrThrowArgsSchema = import_zod.z.object({
  select: ProductionPlanSelectSchema.optional(),
  include: ProductionPlanIncludeSchema.optional(),
  where: ProductionPlanWhereInputSchema.optional(),
  orderBy: import_zod.z.union([ProductionPlanOrderByWithRelationInputSchema.array(), ProductionPlanOrderByWithRelationInputSchema]).optional(),
  cursor: ProductionPlanWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([ProductionPlanScalarFieldEnumSchema, ProductionPlanScalarFieldEnumSchema.array()]).optional()
}).strict();
var ProductionPlanFindManyArgsSchema = import_zod.z.object({
  select: ProductionPlanSelectSchema.optional(),
  include: ProductionPlanIncludeSchema.optional(),
  where: ProductionPlanWhereInputSchema.optional(),
  orderBy: import_zod.z.union([ProductionPlanOrderByWithRelationInputSchema.array(), ProductionPlanOrderByWithRelationInputSchema]).optional(),
  cursor: ProductionPlanWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([ProductionPlanScalarFieldEnumSchema, ProductionPlanScalarFieldEnumSchema.array()]).optional()
}).strict();
var ProductionPlanAggregateArgsSchema = import_zod.z.object({
  where: ProductionPlanWhereInputSchema.optional(),
  orderBy: import_zod.z.union([ProductionPlanOrderByWithRelationInputSchema.array(), ProductionPlanOrderByWithRelationInputSchema]).optional(),
  cursor: ProductionPlanWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var ProductionPlanGroupByArgsSchema = import_zod.z.object({
  where: ProductionPlanWhereInputSchema.optional(),
  orderBy: import_zod.z.union([ProductionPlanOrderByWithAggregationInputSchema.array(), ProductionPlanOrderByWithAggregationInputSchema]).optional(),
  by: ProductionPlanScalarFieldEnumSchema.array(),
  having: ProductionPlanScalarWhereWithAggregatesInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var ProductionPlanFindUniqueArgsSchema = import_zod.z.object({
  select: ProductionPlanSelectSchema.optional(),
  include: ProductionPlanIncludeSchema.optional(),
  where: ProductionPlanWhereUniqueInputSchema
}).strict();
var ProductionPlanFindUniqueOrThrowArgsSchema = import_zod.z.object({
  select: ProductionPlanSelectSchema.optional(),
  include: ProductionPlanIncludeSchema.optional(),
  where: ProductionPlanWhereUniqueInputSchema
}).strict();
var ProductionPlanItemFindFirstArgsSchema = import_zod.z.object({
  select: ProductionPlanItemSelectSchema.optional(),
  include: ProductionPlanItemIncludeSchema.optional(),
  where: ProductionPlanItemWhereInputSchema.optional(),
  orderBy: import_zod.z.union([ProductionPlanItemOrderByWithRelationInputSchema.array(), ProductionPlanItemOrderByWithRelationInputSchema]).optional(),
  cursor: ProductionPlanItemWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([ProductionPlanItemScalarFieldEnumSchema, ProductionPlanItemScalarFieldEnumSchema.array()]).optional()
}).strict();
var ProductionPlanItemFindFirstOrThrowArgsSchema = import_zod.z.object({
  select: ProductionPlanItemSelectSchema.optional(),
  include: ProductionPlanItemIncludeSchema.optional(),
  where: ProductionPlanItemWhereInputSchema.optional(),
  orderBy: import_zod.z.union([ProductionPlanItemOrderByWithRelationInputSchema.array(), ProductionPlanItemOrderByWithRelationInputSchema]).optional(),
  cursor: ProductionPlanItemWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([ProductionPlanItemScalarFieldEnumSchema, ProductionPlanItemScalarFieldEnumSchema.array()]).optional()
}).strict();
var ProductionPlanItemFindManyArgsSchema = import_zod.z.object({
  select: ProductionPlanItemSelectSchema.optional(),
  include: ProductionPlanItemIncludeSchema.optional(),
  where: ProductionPlanItemWhereInputSchema.optional(),
  orderBy: import_zod.z.union([ProductionPlanItemOrderByWithRelationInputSchema.array(), ProductionPlanItemOrderByWithRelationInputSchema]).optional(),
  cursor: ProductionPlanItemWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([ProductionPlanItemScalarFieldEnumSchema, ProductionPlanItemScalarFieldEnumSchema.array()]).optional()
}).strict();
var ProductionPlanItemAggregateArgsSchema = import_zod.z.object({
  where: ProductionPlanItemWhereInputSchema.optional(),
  orderBy: import_zod.z.union([ProductionPlanItemOrderByWithRelationInputSchema.array(), ProductionPlanItemOrderByWithRelationInputSchema]).optional(),
  cursor: ProductionPlanItemWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var ProductionPlanItemGroupByArgsSchema = import_zod.z.object({
  where: ProductionPlanItemWhereInputSchema.optional(),
  orderBy: import_zod.z.union([ProductionPlanItemOrderByWithAggregationInputSchema.array(), ProductionPlanItemOrderByWithAggregationInputSchema]).optional(),
  by: ProductionPlanItemScalarFieldEnumSchema.array(),
  having: ProductionPlanItemScalarWhereWithAggregatesInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var ProductionPlanItemFindUniqueArgsSchema = import_zod.z.object({
  select: ProductionPlanItemSelectSchema.optional(),
  include: ProductionPlanItemIncludeSchema.optional(),
  where: ProductionPlanItemWhereUniqueInputSchema
}).strict();
var ProductionPlanItemFindUniqueOrThrowArgsSchema = import_zod.z.object({
  select: ProductionPlanItemSelectSchema.optional(),
  include: ProductionPlanItemIncludeSchema.optional(),
  where: ProductionPlanItemWhereUniqueInputSchema
}).strict();
var ShiftTaskFindFirstArgsSchema = import_zod.z.object({
  select: ShiftTaskSelectSchema.optional(),
  include: ShiftTaskIncludeSchema.optional(),
  where: ShiftTaskWhereInputSchema.optional(),
  orderBy: import_zod.z.union([ShiftTaskOrderByWithRelationInputSchema.array(), ShiftTaskOrderByWithRelationInputSchema]).optional(),
  cursor: ShiftTaskWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([ShiftTaskScalarFieldEnumSchema, ShiftTaskScalarFieldEnumSchema.array()]).optional()
}).strict();
var ShiftTaskFindFirstOrThrowArgsSchema = import_zod.z.object({
  select: ShiftTaskSelectSchema.optional(),
  include: ShiftTaskIncludeSchema.optional(),
  where: ShiftTaskWhereInputSchema.optional(),
  orderBy: import_zod.z.union([ShiftTaskOrderByWithRelationInputSchema.array(), ShiftTaskOrderByWithRelationInputSchema]).optional(),
  cursor: ShiftTaskWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([ShiftTaskScalarFieldEnumSchema, ShiftTaskScalarFieldEnumSchema.array()]).optional()
}).strict();
var ShiftTaskFindManyArgsSchema = import_zod.z.object({
  select: ShiftTaskSelectSchema.optional(),
  include: ShiftTaskIncludeSchema.optional(),
  where: ShiftTaskWhereInputSchema.optional(),
  orderBy: import_zod.z.union([ShiftTaskOrderByWithRelationInputSchema.array(), ShiftTaskOrderByWithRelationInputSchema]).optional(),
  cursor: ShiftTaskWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([ShiftTaskScalarFieldEnumSchema, ShiftTaskScalarFieldEnumSchema.array()]).optional()
}).strict();
var ShiftTaskAggregateArgsSchema = import_zod.z.object({
  where: ShiftTaskWhereInputSchema.optional(),
  orderBy: import_zod.z.union([ShiftTaskOrderByWithRelationInputSchema.array(), ShiftTaskOrderByWithRelationInputSchema]).optional(),
  cursor: ShiftTaskWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var ShiftTaskGroupByArgsSchema = import_zod.z.object({
  where: ShiftTaskWhereInputSchema.optional(),
  orderBy: import_zod.z.union([ShiftTaskOrderByWithAggregationInputSchema.array(), ShiftTaskOrderByWithAggregationInputSchema]).optional(),
  by: ShiftTaskScalarFieldEnumSchema.array(),
  having: ShiftTaskScalarWhereWithAggregatesInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var ShiftTaskFindUniqueArgsSchema = import_zod.z.object({
  select: ShiftTaskSelectSchema.optional(),
  include: ShiftTaskIncludeSchema.optional(),
  where: ShiftTaskWhereUniqueInputSchema
}).strict();
var ShiftTaskFindUniqueOrThrowArgsSchema = import_zod.z.object({
  select: ShiftTaskSelectSchema.optional(),
  include: ShiftTaskIncludeSchema.optional(),
  where: ShiftTaskWhereUniqueInputSchema
}).strict();
var AvailabilityFindFirstArgsSchema = import_zod.z.object({
  select: AvailabilitySelectSchema.optional(),
  include: AvailabilityIncludeSchema.optional(),
  where: AvailabilityWhereInputSchema.optional(),
  orderBy: import_zod.z.union([AvailabilityOrderByWithRelationInputSchema.array(), AvailabilityOrderByWithRelationInputSchema]).optional(),
  cursor: AvailabilityWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([AvailabilityScalarFieldEnumSchema, AvailabilityScalarFieldEnumSchema.array()]).optional()
}).strict();
var AvailabilityFindFirstOrThrowArgsSchema = import_zod.z.object({
  select: AvailabilitySelectSchema.optional(),
  include: AvailabilityIncludeSchema.optional(),
  where: AvailabilityWhereInputSchema.optional(),
  orderBy: import_zod.z.union([AvailabilityOrderByWithRelationInputSchema.array(), AvailabilityOrderByWithRelationInputSchema]).optional(),
  cursor: AvailabilityWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([AvailabilityScalarFieldEnumSchema, AvailabilityScalarFieldEnumSchema.array()]).optional()
}).strict();
var AvailabilityFindManyArgsSchema = import_zod.z.object({
  select: AvailabilitySelectSchema.optional(),
  include: AvailabilityIncludeSchema.optional(),
  where: AvailabilityWhereInputSchema.optional(),
  orderBy: import_zod.z.union([AvailabilityOrderByWithRelationInputSchema.array(), AvailabilityOrderByWithRelationInputSchema]).optional(),
  cursor: AvailabilityWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([AvailabilityScalarFieldEnumSchema, AvailabilityScalarFieldEnumSchema.array()]).optional()
}).strict();
var AvailabilityAggregateArgsSchema = import_zod.z.object({
  where: AvailabilityWhereInputSchema.optional(),
  orderBy: import_zod.z.union([AvailabilityOrderByWithRelationInputSchema.array(), AvailabilityOrderByWithRelationInputSchema]).optional(),
  cursor: AvailabilityWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var AvailabilityGroupByArgsSchema = import_zod.z.object({
  where: AvailabilityWhereInputSchema.optional(),
  orderBy: import_zod.z.union([AvailabilityOrderByWithAggregationInputSchema.array(), AvailabilityOrderByWithAggregationInputSchema]).optional(),
  by: AvailabilityScalarFieldEnumSchema.array(),
  having: AvailabilityScalarWhereWithAggregatesInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var AvailabilityFindUniqueArgsSchema = import_zod.z.object({
  select: AvailabilitySelectSchema.optional(),
  include: AvailabilityIncludeSchema.optional(),
  where: AvailabilityWhereUniqueInputSchema
}).strict();
var AvailabilityFindUniqueOrThrowArgsSchema = import_zod.z.object({
  select: AvailabilitySelectSchema.optional(),
  include: AvailabilityIncludeSchema.optional(),
  where: AvailabilityWhereUniqueInputSchema
}).strict();
var SchedulingConstraintFindFirstArgsSchema = import_zod.z.object({
  select: SchedulingConstraintSelectSchema.optional(),
  include: SchedulingConstraintIncludeSchema.optional(),
  where: SchedulingConstraintWhereInputSchema.optional(),
  orderBy: import_zod.z.union([SchedulingConstraintOrderByWithRelationInputSchema.array(), SchedulingConstraintOrderByWithRelationInputSchema]).optional(),
  cursor: SchedulingConstraintWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([SchedulingConstraintScalarFieldEnumSchema, SchedulingConstraintScalarFieldEnumSchema.array()]).optional()
}).strict();
var SchedulingConstraintFindFirstOrThrowArgsSchema = import_zod.z.object({
  select: SchedulingConstraintSelectSchema.optional(),
  include: SchedulingConstraintIncludeSchema.optional(),
  where: SchedulingConstraintWhereInputSchema.optional(),
  orderBy: import_zod.z.union([SchedulingConstraintOrderByWithRelationInputSchema.array(), SchedulingConstraintOrderByWithRelationInputSchema]).optional(),
  cursor: SchedulingConstraintWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([SchedulingConstraintScalarFieldEnumSchema, SchedulingConstraintScalarFieldEnumSchema.array()]).optional()
}).strict();
var SchedulingConstraintFindManyArgsSchema = import_zod.z.object({
  select: SchedulingConstraintSelectSchema.optional(),
  include: SchedulingConstraintIncludeSchema.optional(),
  where: SchedulingConstraintWhereInputSchema.optional(),
  orderBy: import_zod.z.union([SchedulingConstraintOrderByWithRelationInputSchema.array(), SchedulingConstraintOrderByWithRelationInputSchema]).optional(),
  cursor: SchedulingConstraintWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([SchedulingConstraintScalarFieldEnumSchema, SchedulingConstraintScalarFieldEnumSchema.array()]).optional()
}).strict();
var SchedulingConstraintAggregateArgsSchema = import_zod.z.object({
  where: SchedulingConstraintWhereInputSchema.optional(),
  orderBy: import_zod.z.union([SchedulingConstraintOrderByWithRelationInputSchema.array(), SchedulingConstraintOrderByWithRelationInputSchema]).optional(),
  cursor: SchedulingConstraintWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var SchedulingConstraintGroupByArgsSchema = import_zod.z.object({
  where: SchedulingConstraintWhereInputSchema.optional(),
  orderBy: import_zod.z.union([SchedulingConstraintOrderByWithAggregationInputSchema.array(), SchedulingConstraintOrderByWithAggregationInputSchema]).optional(),
  by: SchedulingConstraintScalarFieldEnumSchema.array(),
  having: SchedulingConstraintScalarWhereWithAggregatesInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var SchedulingConstraintFindUniqueArgsSchema = import_zod.z.object({
  select: SchedulingConstraintSelectSchema.optional(),
  include: SchedulingConstraintIncludeSchema.optional(),
  where: SchedulingConstraintWhereUniqueInputSchema
}).strict();
var SchedulingConstraintFindUniqueOrThrowArgsSchema = import_zod.z.object({
  select: SchedulingConstraintSelectSchema.optional(),
  include: SchedulingConstraintIncludeSchema.optional(),
  where: SchedulingConstraintWhereUniqueInputSchema
}).strict();
var InventoryWithdrawalFindFirstArgsSchema = import_zod.z.object({
  select: InventoryWithdrawalSelectSchema.optional(),
  include: InventoryWithdrawalIncludeSchema.optional(),
  where: InventoryWithdrawalWhereInputSchema.optional(),
  orderBy: import_zod.z.union([InventoryWithdrawalOrderByWithRelationInputSchema.array(), InventoryWithdrawalOrderByWithRelationInputSchema]).optional(),
  cursor: InventoryWithdrawalWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([InventoryWithdrawalScalarFieldEnumSchema, InventoryWithdrawalScalarFieldEnumSchema.array()]).optional()
}).strict();
var InventoryWithdrawalFindFirstOrThrowArgsSchema = import_zod.z.object({
  select: InventoryWithdrawalSelectSchema.optional(),
  include: InventoryWithdrawalIncludeSchema.optional(),
  where: InventoryWithdrawalWhereInputSchema.optional(),
  orderBy: import_zod.z.union([InventoryWithdrawalOrderByWithRelationInputSchema.array(), InventoryWithdrawalOrderByWithRelationInputSchema]).optional(),
  cursor: InventoryWithdrawalWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([InventoryWithdrawalScalarFieldEnumSchema, InventoryWithdrawalScalarFieldEnumSchema.array()]).optional()
}).strict();
var InventoryWithdrawalFindManyArgsSchema = import_zod.z.object({
  select: InventoryWithdrawalSelectSchema.optional(),
  include: InventoryWithdrawalIncludeSchema.optional(),
  where: InventoryWithdrawalWhereInputSchema.optional(),
  orderBy: import_zod.z.union([InventoryWithdrawalOrderByWithRelationInputSchema.array(), InventoryWithdrawalOrderByWithRelationInputSchema]).optional(),
  cursor: InventoryWithdrawalWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([InventoryWithdrawalScalarFieldEnumSchema, InventoryWithdrawalScalarFieldEnumSchema.array()]).optional()
}).strict();
var InventoryWithdrawalAggregateArgsSchema = import_zod.z.object({
  where: InventoryWithdrawalWhereInputSchema.optional(),
  orderBy: import_zod.z.union([InventoryWithdrawalOrderByWithRelationInputSchema.array(), InventoryWithdrawalOrderByWithRelationInputSchema]).optional(),
  cursor: InventoryWithdrawalWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var InventoryWithdrawalGroupByArgsSchema = import_zod.z.object({
  where: InventoryWithdrawalWhereInputSchema.optional(),
  orderBy: import_zod.z.union([InventoryWithdrawalOrderByWithAggregationInputSchema.array(), InventoryWithdrawalOrderByWithAggregationInputSchema]).optional(),
  by: InventoryWithdrawalScalarFieldEnumSchema.array(),
  having: InventoryWithdrawalScalarWhereWithAggregatesInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var InventoryWithdrawalFindUniqueArgsSchema = import_zod.z.object({
  select: InventoryWithdrawalSelectSchema.optional(),
  include: InventoryWithdrawalIncludeSchema.optional(),
  where: InventoryWithdrawalWhereUniqueInputSchema
}).strict();
var InventoryWithdrawalFindUniqueOrThrowArgsSchema = import_zod.z.object({
  select: InventoryWithdrawalSelectSchema.optional(),
  include: InventoryWithdrawalIncludeSchema.optional(),
  where: InventoryWithdrawalWhereUniqueInputSchema
}).strict();
var AllergenFindFirstArgsSchema = import_zod.z.object({
  select: AllergenSelectSchema.optional(),
  include: AllergenIncludeSchema.optional(),
  where: AllergenWhereInputSchema.optional(),
  orderBy: import_zod.z.union([AllergenOrderByWithRelationInputSchema.array(), AllergenOrderByWithRelationInputSchema]).optional(),
  cursor: AllergenWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([AllergenScalarFieldEnumSchema, AllergenScalarFieldEnumSchema.array()]).optional()
}).strict();
var AllergenFindFirstOrThrowArgsSchema = import_zod.z.object({
  select: AllergenSelectSchema.optional(),
  include: AllergenIncludeSchema.optional(),
  where: AllergenWhereInputSchema.optional(),
  orderBy: import_zod.z.union([AllergenOrderByWithRelationInputSchema.array(), AllergenOrderByWithRelationInputSchema]).optional(),
  cursor: AllergenWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([AllergenScalarFieldEnumSchema, AllergenScalarFieldEnumSchema.array()]).optional()
}).strict();
var AllergenFindManyArgsSchema = import_zod.z.object({
  select: AllergenSelectSchema.optional(),
  include: AllergenIncludeSchema.optional(),
  where: AllergenWhereInputSchema.optional(),
  orderBy: import_zod.z.union([AllergenOrderByWithRelationInputSchema.array(), AllergenOrderByWithRelationInputSchema]).optional(),
  cursor: AllergenWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([AllergenScalarFieldEnumSchema, AllergenScalarFieldEnumSchema.array()]).optional()
}).strict();
var AllergenAggregateArgsSchema = import_zod.z.object({
  where: AllergenWhereInputSchema.optional(),
  orderBy: import_zod.z.union([AllergenOrderByWithRelationInputSchema.array(), AllergenOrderByWithRelationInputSchema]).optional(),
  cursor: AllergenWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var AllergenGroupByArgsSchema = import_zod.z.object({
  where: AllergenWhereInputSchema.optional(),
  orderBy: import_zod.z.union([AllergenOrderByWithAggregationInputSchema.array(), AllergenOrderByWithAggregationInputSchema]).optional(),
  by: AllergenScalarFieldEnumSchema.array(),
  having: AllergenScalarWhereWithAggregatesInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var AllergenFindUniqueArgsSchema = import_zod.z.object({
  select: AllergenSelectSchema.optional(),
  include: AllergenIncludeSchema.optional(),
  where: AllergenWhereUniqueInputSchema
}).strict();
var AllergenFindUniqueOrThrowArgsSchema = import_zod.z.object({
  select: AllergenSelectSchema.optional(),
  include: AllergenIncludeSchema.optional(),
  where: AllergenWhereUniqueInputSchema
}).strict();
var IngredientAllergenFindFirstArgsSchema = import_zod.z.object({
  select: IngredientAllergenSelectSchema.optional(),
  include: IngredientAllergenIncludeSchema.optional(),
  where: IngredientAllergenWhereInputSchema.optional(),
  orderBy: import_zod.z.union([IngredientAllergenOrderByWithRelationInputSchema.array(), IngredientAllergenOrderByWithRelationInputSchema]).optional(),
  cursor: IngredientAllergenWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([IngredientAllergenScalarFieldEnumSchema, IngredientAllergenScalarFieldEnumSchema.array()]).optional()
}).strict();
var IngredientAllergenFindFirstOrThrowArgsSchema = import_zod.z.object({
  select: IngredientAllergenSelectSchema.optional(),
  include: IngredientAllergenIncludeSchema.optional(),
  where: IngredientAllergenWhereInputSchema.optional(),
  orderBy: import_zod.z.union([IngredientAllergenOrderByWithRelationInputSchema.array(), IngredientAllergenOrderByWithRelationInputSchema]).optional(),
  cursor: IngredientAllergenWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([IngredientAllergenScalarFieldEnumSchema, IngredientAllergenScalarFieldEnumSchema.array()]).optional()
}).strict();
var IngredientAllergenFindManyArgsSchema = import_zod.z.object({
  select: IngredientAllergenSelectSchema.optional(),
  include: IngredientAllergenIncludeSchema.optional(),
  where: IngredientAllergenWhereInputSchema.optional(),
  orderBy: import_zod.z.union([IngredientAllergenOrderByWithRelationInputSchema.array(), IngredientAllergenOrderByWithRelationInputSchema]).optional(),
  cursor: IngredientAllergenWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([IngredientAllergenScalarFieldEnumSchema, IngredientAllergenScalarFieldEnumSchema.array()]).optional()
}).strict();
var IngredientAllergenAggregateArgsSchema = import_zod.z.object({
  where: IngredientAllergenWhereInputSchema.optional(),
  orderBy: import_zod.z.union([IngredientAllergenOrderByWithRelationInputSchema.array(), IngredientAllergenOrderByWithRelationInputSchema]).optional(),
  cursor: IngredientAllergenWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var IngredientAllergenGroupByArgsSchema = import_zod.z.object({
  where: IngredientAllergenWhereInputSchema.optional(),
  orderBy: import_zod.z.union([IngredientAllergenOrderByWithAggregationInputSchema.array(), IngredientAllergenOrderByWithAggregationInputSchema]).optional(),
  by: IngredientAllergenScalarFieldEnumSchema.array(),
  having: IngredientAllergenScalarWhereWithAggregatesInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var IngredientAllergenFindUniqueArgsSchema = import_zod.z.object({
  select: IngredientAllergenSelectSchema.optional(),
  include: IngredientAllergenIncludeSchema.optional(),
  where: IngredientAllergenWhereUniqueInputSchema
}).strict();
var IngredientAllergenFindUniqueOrThrowArgsSchema = import_zod.z.object({
  select: IngredientAllergenSelectSchema.optional(),
  include: IngredientAllergenIncludeSchema.optional(),
  where: IngredientAllergenWhereUniqueInputSchema
}).strict();
var NutritionalRecommendationFindFirstArgsSchema = import_zod.z.object({
  select: NutritionalRecommendationSelectSchema.optional(),
  include: NutritionalRecommendationIncludeSchema.optional(),
  where: NutritionalRecommendationWhereInputSchema.optional(),
  orderBy: import_zod.z.union([NutritionalRecommendationOrderByWithRelationInputSchema.array(), NutritionalRecommendationOrderByWithRelationInputSchema]).optional(),
  cursor: NutritionalRecommendationWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([NutritionalRecommendationScalarFieldEnumSchema, NutritionalRecommendationScalarFieldEnumSchema.array()]).optional()
}).strict();
var NutritionalRecommendationFindFirstOrThrowArgsSchema = import_zod.z.object({
  select: NutritionalRecommendationSelectSchema.optional(),
  include: NutritionalRecommendationIncludeSchema.optional(),
  where: NutritionalRecommendationWhereInputSchema.optional(),
  orderBy: import_zod.z.union([NutritionalRecommendationOrderByWithRelationInputSchema.array(), NutritionalRecommendationOrderByWithRelationInputSchema]).optional(),
  cursor: NutritionalRecommendationWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([NutritionalRecommendationScalarFieldEnumSchema, NutritionalRecommendationScalarFieldEnumSchema.array()]).optional()
}).strict();
var NutritionalRecommendationFindManyArgsSchema = import_zod.z.object({
  select: NutritionalRecommendationSelectSchema.optional(),
  include: NutritionalRecommendationIncludeSchema.optional(),
  where: NutritionalRecommendationWhereInputSchema.optional(),
  orderBy: import_zod.z.union([NutritionalRecommendationOrderByWithRelationInputSchema.array(), NutritionalRecommendationOrderByWithRelationInputSchema]).optional(),
  cursor: NutritionalRecommendationWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([NutritionalRecommendationScalarFieldEnumSchema, NutritionalRecommendationScalarFieldEnumSchema.array()]).optional()
}).strict();
var NutritionalRecommendationAggregateArgsSchema = import_zod.z.object({
  where: NutritionalRecommendationWhereInputSchema.optional(),
  orderBy: import_zod.z.union([NutritionalRecommendationOrderByWithRelationInputSchema.array(), NutritionalRecommendationOrderByWithRelationInputSchema]).optional(),
  cursor: NutritionalRecommendationWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var NutritionalRecommendationGroupByArgsSchema = import_zod.z.object({
  where: NutritionalRecommendationWhereInputSchema.optional(),
  orderBy: import_zod.z.union([NutritionalRecommendationOrderByWithAggregationInputSchema.array(), NutritionalRecommendationOrderByWithAggregationInputSchema]).optional(),
  by: NutritionalRecommendationScalarFieldEnumSchema.array(),
  having: NutritionalRecommendationScalarWhereWithAggregatesInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var NutritionalRecommendationFindUniqueArgsSchema = import_zod.z.object({
  select: NutritionalRecommendationSelectSchema.optional(),
  include: NutritionalRecommendationIncludeSchema.optional(),
  where: NutritionalRecommendationWhereUniqueInputSchema
}).strict();
var NutritionalRecommendationFindUniqueOrThrowArgsSchema = import_zod.z.object({
  select: NutritionalRecommendationSelectSchema.optional(),
  include: NutritionalRecommendationIncludeSchema.optional(),
  where: NutritionalRecommendationWhereUniqueInputSchema
}).strict();
var EarlyAccessFindFirstArgsSchema = import_zod.z.object({
  select: EarlyAccessSelectSchema.optional(),
  where: EarlyAccessWhereInputSchema.optional(),
  orderBy: import_zod.z.union([EarlyAccessOrderByWithRelationInputSchema.array(), EarlyAccessOrderByWithRelationInputSchema]).optional(),
  cursor: EarlyAccessWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([EarlyAccessScalarFieldEnumSchema, EarlyAccessScalarFieldEnumSchema.array()]).optional()
}).strict();
var EarlyAccessFindFirstOrThrowArgsSchema = import_zod.z.object({
  select: EarlyAccessSelectSchema.optional(),
  where: EarlyAccessWhereInputSchema.optional(),
  orderBy: import_zod.z.union([EarlyAccessOrderByWithRelationInputSchema.array(), EarlyAccessOrderByWithRelationInputSchema]).optional(),
  cursor: EarlyAccessWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([EarlyAccessScalarFieldEnumSchema, EarlyAccessScalarFieldEnumSchema.array()]).optional()
}).strict();
var EarlyAccessFindManyArgsSchema = import_zod.z.object({
  select: EarlyAccessSelectSchema.optional(),
  where: EarlyAccessWhereInputSchema.optional(),
  orderBy: import_zod.z.union([EarlyAccessOrderByWithRelationInputSchema.array(), EarlyAccessOrderByWithRelationInputSchema]).optional(),
  cursor: EarlyAccessWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([EarlyAccessScalarFieldEnumSchema, EarlyAccessScalarFieldEnumSchema.array()]).optional()
}).strict();
var EarlyAccessAggregateArgsSchema = import_zod.z.object({
  where: EarlyAccessWhereInputSchema.optional(),
  orderBy: import_zod.z.union([EarlyAccessOrderByWithRelationInputSchema.array(), EarlyAccessOrderByWithRelationInputSchema]).optional(),
  cursor: EarlyAccessWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var EarlyAccessGroupByArgsSchema = import_zod.z.object({
  where: EarlyAccessWhereInputSchema.optional(),
  orderBy: import_zod.z.union([EarlyAccessOrderByWithAggregationInputSchema.array(), EarlyAccessOrderByWithAggregationInputSchema]).optional(),
  by: EarlyAccessScalarFieldEnumSchema.array(),
  having: EarlyAccessScalarWhereWithAggregatesInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var EarlyAccessFindUniqueArgsSchema = import_zod.z.object({
  select: EarlyAccessSelectSchema.optional(),
  where: EarlyAccessWhereUniqueInputSchema
}).strict();
var EarlyAccessFindUniqueOrThrowArgsSchema = import_zod.z.object({
  select: EarlyAccessSelectSchema.optional(),
  where: EarlyAccessWhereUniqueInputSchema
}).strict();
var OrganizationFindFirstArgsSchema = import_zod.z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereInputSchema.optional(),
  orderBy: import_zod.z.union([OrganizationOrderByWithRelationInputSchema.array(), OrganizationOrderByWithRelationInputSchema]).optional(),
  cursor: OrganizationWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([OrganizationScalarFieldEnumSchema, OrganizationScalarFieldEnumSchema.array()]).optional()
}).strict();
var OrganizationFindFirstOrThrowArgsSchema = import_zod.z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereInputSchema.optional(),
  orderBy: import_zod.z.union([OrganizationOrderByWithRelationInputSchema.array(), OrganizationOrderByWithRelationInputSchema]).optional(),
  cursor: OrganizationWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([OrganizationScalarFieldEnumSchema, OrganizationScalarFieldEnumSchema.array()]).optional()
}).strict();
var OrganizationFindManyArgsSchema = import_zod.z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereInputSchema.optional(),
  orderBy: import_zod.z.union([OrganizationOrderByWithRelationInputSchema.array(), OrganizationOrderByWithRelationInputSchema]).optional(),
  cursor: OrganizationWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([OrganizationScalarFieldEnumSchema, OrganizationScalarFieldEnumSchema.array()]).optional()
}).strict();
var OrganizationAggregateArgsSchema = import_zod.z.object({
  where: OrganizationWhereInputSchema.optional(),
  orderBy: import_zod.z.union([OrganizationOrderByWithRelationInputSchema.array(), OrganizationOrderByWithRelationInputSchema]).optional(),
  cursor: OrganizationWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var OrganizationGroupByArgsSchema = import_zod.z.object({
  where: OrganizationWhereInputSchema.optional(),
  orderBy: import_zod.z.union([OrganizationOrderByWithAggregationInputSchema.array(), OrganizationOrderByWithAggregationInputSchema]).optional(),
  by: OrganizationScalarFieldEnumSchema.array(),
  having: OrganizationScalarWhereWithAggregatesInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var OrganizationFindUniqueArgsSchema = import_zod.z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereUniqueInputSchema
}).strict();
var OrganizationFindUniqueOrThrowArgsSchema = import_zod.z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereUniqueInputSchema
}).strict();
var RestaurantFindFirstArgsSchema = import_zod.z.object({
  select: RestaurantSelectSchema.optional(),
  include: RestaurantIncludeSchema.optional(),
  where: RestaurantWhereInputSchema.optional(),
  orderBy: import_zod.z.union([RestaurantOrderByWithRelationInputSchema.array(), RestaurantOrderByWithRelationInputSchema]).optional(),
  cursor: RestaurantWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([RestaurantScalarFieldEnumSchema, RestaurantScalarFieldEnumSchema.array()]).optional()
}).strict();
var RestaurantFindFirstOrThrowArgsSchema = import_zod.z.object({
  select: RestaurantSelectSchema.optional(),
  include: RestaurantIncludeSchema.optional(),
  where: RestaurantWhereInputSchema.optional(),
  orderBy: import_zod.z.union([RestaurantOrderByWithRelationInputSchema.array(), RestaurantOrderByWithRelationInputSchema]).optional(),
  cursor: RestaurantWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([RestaurantScalarFieldEnumSchema, RestaurantScalarFieldEnumSchema.array()]).optional()
}).strict();
var RestaurantFindManyArgsSchema = import_zod.z.object({
  select: RestaurantSelectSchema.optional(),
  include: RestaurantIncludeSchema.optional(),
  where: RestaurantWhereInputSchema.optional(),
  orderBy: import_zod.z.union([RestaurantOrderByWithRelationInputSchema.array(), RestaurantOrderByWithRelationInputSchema]).optional(),
  cursor: RestaurantWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([RestaurantScalarFieldEnumSchema, RestaurantScalarFieldEnumSchema.array()]).optional()
}).strict();
var RestaurantAggregateArgsSchema = import_zod.z.object({
  where: RestaurantWhereInputSchema.optional(),
  orderBy: import_zod.z.union([RestaurantOrderByWithRelationInputSchema.array(), RestaurantOrderByWithRelationInputSchema]).optional(),
  cursor: RestaurantWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var RestaurantGroupByArgsSchema = import_zod.z.object({
  where: RestaurantWhereInputSchema.optional(),
  orderBy: import_zod.z.union([RestaurantOrderByWithAggregationInputSchema.array(), RestaurantOrderByWithAggregationInputSchema]).optional(),
  by: RestaurantScalarFieldEnumSchema.array(),
  having: RestaurantScalarWhereWithAggregatesInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var RestaurantFindUniqueArgsSchema = import_zod.z.object({
  select: RestaurantSelectSchema.optional(),
  include: RestaurantIncludeSchema.optional(),
  where: RestaurantWhereUniqueInputSchema
}).strict();
var RestaurantFindUniqueOrThrowArgsSchema = import_zod.z.object({
  select: RestaurantSelectSchema.optional(),
  include: RestaurantIncludeSchema.optional(),
  where: RestaurantWhereUniqueInputSchema
}).strict();
var UserFindFirstArgsSchema = import_zod.z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereInputSchema.optional(),
  orderBy: import_zod.z.union([UserOrderByWithRelationInputSchema.array(), UserOrderByWithRelationInputSchema]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([UserScalarFieldEnumSchema, UserScalarFieldEnumSchema.array()]).optional()
}).strict();
var UserFindFirstOrThrowArgsSchema = import_zod.z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereInputSchema.optional(),
  orderBy: import_zod.z.union([UserOrderByWithRelationInputSchema.array(), UserOrderByWithRelationInputSchema]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([UserScalarFieldEnumSchema, UserScalarFieldEnumSchema.array()]).optional()
}).strict();
var UserFindManyArgsSchema = import_zod.z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereInputSchema.optional(),
  orderBy: import_zod.z.union([UserOrderByWithRelationInputSchema.array(), UserOrderByWithRelationInputSchema]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([UserScalarFieldEnumSchema, UserScalarFieldEnumSchema.array()]).optional()
}).strict();
var UserAggregateArgsSchema = import_zod.z.object({
  where: UserWhereInputSchema.optional(),
  orderBy: import_zod.z.union([UserOrderByWithRelationInputSchema.array(), UserOrderByWithRelationInputSchema]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var UserGroupByArgsSchema = import_zod.z.object({
  where: UserWhereInputSchema.optional(),
  orderBy: import_zod.z.union([UserOrderByWithAggregationInputSchema.array(), UserOrderByWithAggregationInputSchema]).optional(),
  by: UserScalarFieldEnumSchema.array(),
  having: UserScalarWhereWithAggregatesInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var UserFindUniqueArgsSchema = import_zod.z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema
}).strict();
var UserFindUniqueOrThrowArgsSchema = import_zod.z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema
}).strict();
var SessionFindFirstArgsSchema = import_zod.z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereInputSchema.optional(),
  orderBy: import_zod.z.union([SessionOrderByWithRelationInputSchema.array(), SessionOrderByWithRelationInputSchema]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([SessionScalarFieldEnumSchema, SessionScalarFieldEnumSchema.array()]).optional()
}).strict();
var SessionFindFirstOrThrowArgsSchema = import_zod.z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereInputSchema.optional(),
  orderBy: import_zod.z.union([SessionOrderByWithRelationInputSchema.array(), SessionOrderByWithRelationInputSchema]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([SessionScalarFieldEnumSchema, SessionScalarFieldEnumSchema.array()]).optional()
}).strict();
var SessionFindManyArgsSchema = import_zod.z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereInputSchema.optional(),
  orderBy: import_zod.z.union([SessionOrderByWithRelationInputSchema.array(), SessionOrderByWithRelationInputSchema]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([SessionScalarFieldEnumSchema, SessionScalarFieldEnumSchema.array()]).optional()
}).strict();
var SessionAggregateArgsSchema = import_zod.z.object({
  where: SessionWhereInputSchema.optional(),
  orderBy: import_zod.z.union([SessionOrderByWithRelationInputSchema.array(), SessionOrderByWithRelationInputSchema]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var SessionGroupByArgsSchema = import_zod.z.object({
  where: SessionWhereInputSchema.optional(),
  orderBy: import_zod.z.union([SessionOrderByWithAggregationInputSchema.array(), SessionOrderByWithAggregationInputSchema]).optional(),
  by: SessionScalarFieldEnumSchema.array(),
  having: SessionScalarWhereWithAggregatesInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var SessionFindUniqueArgsSchema = import_zod.z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereUniqueInputSchema
}).strict();
var SessionFindUniqueOrThrowArgsSchema = import_zod.z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereUniqueInputSchema
}).strict();
var CookBookFindFirstArgsSchema = import_zod.z.object({
  select: CookBookSelectSchema.optional(),
  include: CookBookIncludeSchema.optional(),
  where: CookBookWhereInputSchema.optional(),
  orderBy: import_zod.z.union([CookBookOrderByWithRelationInputSchema.array(), CookBookOrderByWithRelationInputSchema]).optional(),
  cursor: CookBookWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([CookBookScalarFieldEnumSchema, CookBookScalarFieldEnumSchema.array()]).optional()
}).strict();
var CookBookFindFirstOrThrowArgsSchema = import_zod.z.object({
  select: CookBookSelectSchema.optional(),
  include: CookBookIncludeSchema.optional(),
  where: CookBookWhereInputSchema.optional(),
  orderBy: import_zod.z.union([CookBookOrderByWithRelationInputSchema.array(), CookBookOrderByWithRelationInputSchema]).optional(),
  cursor: CookBookWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([CookBookScalarFieldEnumSchema, CookBookScalarFieldEnumSchema.array()]).optional()
}).strict();
var CookBookFindManyArgsSchema = import_zod.z.object({
  select: CookBookSelectSchema.optional(),
  include: CookBookIncludeSchema.optional(),
  where: CookBookWhereInputSchema.optional(),
  orderBy: import_zod.z.union([CookBookOrderByWithRelationInputSchema.array(), CookBookOrderByWithRelationInputSchema]).optional(),
  cursor: CookBookWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([CookBookScalarFieldEnumSchema, CookBookScalarFieldEnumSchema.array()]).optional()
}).strict();
var CookBookAggregateArgsSchema = import_zod.z.object({
  where: CookBookWhereInputSchema.optional(),
  orderBy: import_zod.z.union([CookBookOrderByWithRelationInputSchema.array(), CookBookOrderByWithRelationInputSchema]).optional(),
  cursor: CookBookWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var CookBookGroupByArgsSchema = import_zod.z.object({
  where: CookBookWhereInputSchema.optional(),
  orderBy: import_zod.z.union([CookBookOrderByWithAggregationInputSchema.array(), CookBookOrderByWithAggregationInputSchema]).optional(),
  by: CookBookScalarFieldEnumSchema.array(),
  having: CookBookScalarWhereWithAggregatesInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var CookBookFindUniqueArgsSchema = import_zod.z.object({
  select: CookBookSelectSchema.optional(),
  include: CookBookIncludeSchema.optional(),
  where: CookBookWhereUniqueInputSchema
}).strict();
var CookBookFindUniqueOrThrowArgsSchema = import_zod.z.object({
  select: CookBookSelectSchema.optional(),
  include: CookBookIncludeSchema.optional(),
  where: CookBookWhereUniqueInputSchema
}).strict();
var RecipeFindFirstArgsSchema = import_zod.z.object({
  select: RecipeSelectSchema.optional(),
  include: RecipeIncludeSchema.optional(),
  where: RecipeWhereInputSchema.optional(),
  orderBy: import_zod.z.union([RecipeOrderByWithRelationInputSchema.array(), RecipeOrderByWithRelationInputSchema]).optional(),
  cursor: RecipeWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([RecipeScalarFieldEnumSchema, RecipeScalarFieldEnumSchema.array()]).optional()
}).strict();
var RecipeFindFirstOrThrowArgsSchema = import_zod.z.object({
  select: RecipeSelectSchema.optional(),
  include: RecipeIncludeSchema.optional(),
  where: RecipeWhereInputSchema.optional(),
  orderBy: import_zod.z.union([RecipeOrderByWithRelationInputSchema.array(), RecipeOrderByWithRelationInputSchema]).optional(),
  cursor: RecipeWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([RecipeScalarFieldEnumSchema, RecipeScalarFieldEnumSchema.array()]).optional()
}).strict();
var RecipeFindManyArgsSchema = import_zod.z.object({
  select: RecipeSelectSchema.optional(),
  include: RecipeIncludeSchema.optional(),
  where: RecipeWhereInputSchema.optional(),
  orderBy: import_zod.z.union([RecipeOrderByWithRelationInputSchema.array(), RecipeOrderByWithRelationInputSchema]).optional(),
  cursor: RecipeWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([RecipeScalarFieldEnumSchema, RecipeScalarFieldEnumSchema.array()]).optional()
}).strict();
var RecipeAggregateArgsSchema = import_zod.z.object({
  where: RecipeWhereInputSchema.optional(),
  orderBy: import_zod.z.union([RecipeOrderByWithRelationInputSchema.array(), RecipeOrderByWithRelationInputSchema]).optional(),
  cursor: RecipeWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var RecipeGroupByArgsSchema = import_zod.z.object({
  where: RecipeWhereInputSchema.optional(),
  orderBy: import_zod.z.union([RecipeOrderByWithAggregationInputSchema.array(), RecipeOrderByWithAggregationInputSchema]).optional(),
  by: RecipeScalarFieldEnumSchema.array(),
  having: RecipeScalarWhereWithAggregatesInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var RecipeFindUniqueArgsSchema = import_zod.z.object({
  select: RecipeSelectSchema.optional(),
  include: RecipeIncludeSchema.optional(),
  where: RecipeWhereUniqueInputSchema
}).strict();
var RecipeFindUniqueOrThrowArgsSchema = import_zod.z.object({
  select: RecipeSelectSchema.optional(),
  include: RecipeIncludeSchema.optional(),
  where: RecipeWhereUniqueInputSchema
}).strict();
var IngredientFindFirstArgsSchema = import_zod.z.object({
  select: IngredientSelectSchema.optional(),
  include: IngredientIncludeSchema.optional(),
  where: IngredientWhereInputSchema.optional(),
  orderBy: import_zod.z.union([IngredientOrderByWithRelationInputSchema.array(), IngredientOrderByWithRelationInputSchema]).optional(),
  cursor: IngredientWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([IngredientScalarFieldEnumSchema, IngredientScalarFieldEnumSchema.array()]).optional()
}).strict();
var IngredientFindFirstOrThrowArgsSchema = import_zod.z.object({
  select: IngredientSelectSchema.optional(),
  include: IngredientIncludeSchema.optional(),
  where: IngredientWhereInputSchema.optional(),
  orderBy: import_zod.z.union([IngredientOrderByWithRelationInputSchema.array(), IngredientOrderByWithRelationInputSchema]).optional(),
  cursor: IngredientWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([IngredientScalarFieldEnumSchema, IngredientScalarFieldEnumSchema.array()]).optional()
}).strict();
var IngredientFindManyArgsSchema = import_zod.z.object({
  select: IngredientSelectSchema.optional(),
  include: IngredientIncludeSchema.optional(),
  where: IngredientWhereInputSchema.optional(),
  orderBy: import_zod.z.union([IngredientOrderByWithRelationInputSchema.array(), IngredientOrderByWithRelationInputSchema]).optional(),
  cursor: IngredientWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([IngredientScalarFieldEnumSchema, IngredientScalarFieldEnumSchema.array()]).optional()
}).strict();
var IngredientAggregateArgsSchema = import_zod.z.object({
  where: IngredientWhereInputSchema.optional(),
  orderBy: import_zod.z.union([IngredientOrderByWithRelationInputSchema.array(), IngredientOrderByWithRelationInputSchema]).optional(),
  cursor: IngredientWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var IngredientGroupByArgsSchema = import_zod.z.object({
  where: IngredientWhereInputSchema.optional(),
  orderBy: import_zod.z.union([IngredientOrderByWithAggregationInputSchema.array(), IngredientOrderByWithAggregationInputSchema]).optional(),
  by: IngredientScalarFieldEnumSchema.array(),
  having: IngredientScalarWhereWithAggregatesInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var IngredientFindUniqueArgsSchema = import_zod.z.object({
  select: IngredientSelectSchema.optional(),
  include: IngredientIncludeSchema.optional(),
  where: IngredientWhereUniqueInputSchema
}).strict();
var IngredientFindUniqueOrThrowArgsSchema = import_zod.z.object({
  select: IngredientSelectSchema.optional(),
  include: IngredientIncludeSchema.optional(),
  where: IngredientWhereUniqueInputSchema
}).strict();
var RecipeIngredientFindFirstArgsSchema = import_zod.z.object({
  select: RecipeIngredientSelectSchema.optional(),
  include: RecipeIngredientIncludeSchema.optional(),
  where: RecipeIngredientWhereInputSchema.optional(),
  orderBy: import_zod.z.union([RecipeIngredientOrderByWithRelationInputSchema.array(), RecipeIngredientOrderByWithRelationInputSchema]).optional(),
  cursor: RecipeIngredientWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([RecipeIngredientScalarFieldEnumSchema, RecipeIngredientScalarFieldEnumSchema.array()]).optional()
}).strict();
var RecipeIngredientFindFirstOrThrowArgsSchema = import_zod.z.object({
  select: RecipeIngredientSelectSchema.optional(),
  include: RecipeIngredientIncludeSchema.optional(),
  where: RecipeIngredientWhereInputSchema.optional(),
  orderBy: import_zod.z.union([RecipeIngredientOrderByWithRelationInputSchema.array(), RecipeIngredientOrderByWithRelationInputSchema]).optional(),
  cursor: RecipeIngredientWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([RecipeIngredientScalarFieldEnumSchema, RecipeIngredientScalarFieldEnumSchema.array()]).optional()
}).strict();
var RecipeIngredientFindManyArgsSchema = import_zod.z.object({
  select: RecipeIngredientSelectSchema.optional(),
  include: RecipeIngredientIncludeSchema.optional(),
  where: RecipeIngredientWhereInputSchema.optional(),
  orderBy: import_zod.z.union([RecipeIngredientOrderByWithRelationInputSchema.array(), RecipeIngredientOrderByWithRelationInputSchema]).optional(),
  cursor: RecipeIngredientWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([RecipeIngredientScalarFieldEnumSchema, RecipeIngredientScalarFieldEnumSchema.array()]).optional()
}).strict();
var RecipeIngredientAggregateArgsSchema = import_zod.z.object({
  where: RecipeIngredientWhereInputSchema.optional(),
  orderBy: import_zod.z.union([RecipeIngredientOrderByWithRelationInputSchema.array(), RecipeIngredientOrderByWithRelationInputSchema]).optional(),
  cursor: RecipeIngredientWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var RecipeIngredientGroupByArgsSchema = import_zod.z.object({
  where: RecipeIngredientWhereInputSchema.optional(),
  orderBy: import_zod.z.union([RecipeIngredientOrderByWithAggregationInputSchema.array(), RecipeIngredientOrderByWithAggregationInputSchema]).optional(),
  by: RecipeIngredientScalarFieldEnumSchema.array(),
  having: RecipeIngredientScalarWhereWithAggregatesInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var RecipeIngredientFindUniqueArgsSchema = import_zod.z.object({
  select: RecipeIngredientSelectSchema.optional(),
  include: RecipeIngredientIncludeSchema.optional(),
  where: RecipeIngredientWhereUniqueInputSchema
}).strict();
var RecipeIngredientFindUniqueOrThrowArgsSchema = import_zod.z.object({
  select: RecipeIngredientSelectSchema.optional(),
  include: RecipeIngredientIncludeSchema.optional(),
  where: RecipeIngredientWhereUniqueInputSchema
}).strict();
var RecipeInstructionFindFirstArgsSchema = import_zod.z.object({
  select: RecipeInstructionSelectSchema.optional(),
  include: RecipeInstructionIncludeSchema.optional(),
  where: RecipeInstructionWhereInputSchema.optional(),
  orderBy: import_zod.z.union([RecipeInstructionOrderByWithRelationInputSchema.array(), RecipeInstructionOrderByWithRelationInputSchema]).optional(),
  cursor: RecipeInstructionWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([RecipeInstructionScalarFieldEnumSchema, RecipeInstructionScalarFieldEnumSchema.array()]).optional()
}).strict();
var RecipeInstructionFindFirstOrThrowArgsSchema = import_zod.z.object({
  select: RecipeInstructionSelectSchema.optional(),
  include: RecipeInstructionIncludeSchema.optional(),
  where: RecipeInstructionWhereInputSchema.optional(),
  orderBy: import_zod.z.union([RecipeInstructionOrderByWithRelationInputSchema.array(), RecipeInstructionOrderByWithRelationInputSchema]).optional(),
  cursor: RecipeInstructionWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([RecipeInstructionScalarFieldEnumSchema, RecipeInstructionScalarFieldEnumSchema.array()]).optional()
}).strict();
var RecipeInstructionFindManyArgsSchema = import_zod.z.object({
  select: RecipeInstructionSelectSchema.optional(),
  include: RecipeInstructionIncludeSchema.optional(),
  where: RecipeInstructionWhereInputSchema.optional(),
  orderBy: import_zod.z.union([RecipeInstructionOrderByWithRelationInputSchema.array(), RecipeInstructionOrderByWithRelationInputSchema]).optional(),
  cursor: RecipeInstructionWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([RecipeInstructionScalarFieldEnumSchema, RecipeInstructionScalarFieldEnumSchema.array()]).optional()
}).strict();
var RecipeInstructionAggregateArgsSchema = import_zod.z.object({
  where: RecipeInstructionWhereInputSchema.optional(),
  orderBy: import_zod.z.union([RecipeInstructionOrderByWithRelationInputSchema.array(), RecipeInstructionOrderByWithRelationInputSchema]).optional(),
  cursor: RecipeInstructionWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var RecipeInstructionGroupByArgsSchema = import_zod.z.object({
  where: RecipeInstructionWhereInputSchema.optional(),
  orderBy: import_zod.z.union([RecipeInstructionOrderByWithAggregationInputSchema.array(), RecipeInstructionOrderByWithAggregationInputSchema]).optional(),
  by: RecipeInstructionScalarFieldEnumSchema.array(),
  having: RecipeInstructionScalarWhereWithAggregatesInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var RecipeInstructionFindUniqueArgsSchema = import_zod.z.object({
  select: RecipeInstructionSelectSchema.optional(),
  include: RecipeInstructionIncludeSchema.optional(),
  where: RecipeInstructionWhereUniqueInputSchema
}).strict();
var RecipeInstructionFindUniqueOrThrowArgsSchema = import_zod.z.object({
  select: RecipeInstructionSelectSchema.optional(),
  include: RecipeInstructionIncludeSchema.optional(),
  where: RecipeInstructionWhereUniqueInputSchema
}).strict();
var InventoryFindFirstArgsSchema = import_zod.z.object({
  select: InventorySelectSchema.optional(),
  include: InventoryIncludeSchema.optional(),
  where: InventoryWhereInputSchema.optional(),
  orderBy: import_zod.z.union([InventoryOrderByWithRelationInputSchema.array(), InventoryOrderByWithRelationInputSchema]).optional(),
  cursor: InventoryWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([InventoryScalarFieldEnumSchema, InventoryScalarFieldEnumSchema.array()]).optional()
}).strict();
var InventoryFindFirstOrThrowArgsSchema = import_zod.z.object({
  select: InventorySelectSchema.optional(),
  include: InventoryIncludeSchema.optional(),
  where: InventoryWhereInputSchema.optional(),
  orderBy: import_zod.z.union([InventoryOrderByWithRelationInputSchema.array(), InventoryOrderByWithRelationInputSchema]).optional(),
  cursor: InventoryWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([InventoryScalarFieldEnumSchema, InventoryScalarFieldEnumSchema.array()]).optional()
}).strict();
var InventoryFindManyArgsSchema = import_zod.z.object({
  select: InventorySelectSchema.optional(),
  include: InventoryIncludeSchema.optional(),
  where: InventoryWhereInputSchema.optional(),
  orderBy: import_zod.z.union([InventoryOrderByWithRelationInputSchema.array(), InventoryOrderByWithRelationInputSchema]).optional(),
  cursor: InventoryWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([InventoryScalarFieldEnumSchema, InventoryScalarFieldEnumSchema.array()]).optional()
}).strict();
var InventoryAggregateArgsSchema = import_zod.z.object({
  where: InventoryWhereInputSchema.optional(),
  orderBy: import_zod.z.union([InventoryOrderByWithRelationInputSchema.array(), InventoryOrderByWithRelationInputSchema]).optional(),
  cursor: InventoryWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var InventoryGroupByArgsSchema = import_zod.z.object({
  where: InventoryWhereInputSchema.optional(),
  orderBy: import_zod.z.union([InventoryOrderByWithAggregationInputSchema.array(), InventoryOrderByWithAggregationInputSchema]).optional(),
  by: InventoryScalarFieldEnumSchema.array(),
  having: InventoryScalarWhereWithAggregatesInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var InventoryFindUniqueArgsSchema = import_zod.z.object({
  select: InventorySelectSchema.optional(),
  include: InventoryIncludeSchema.optional(),
  where: InventoryWhereUniqueInputSchema
}).strict();
var InventoryFindUniqueOrThrowArgsSchema = import_zod.z.object({
  select: InventorySelectSchema.optional(),
  include: InventoryIncludeSchema.optional(),
  where: InventoryWhereUniqueInputSchema
}).strict();
var InventoryItemFindFirstArgsSchema = import_zod.z.object({
  select: InventoryItemSelectSchema.optional(),
  include: InventoryItemIncludeSchema.optional(),
  where: InventoryItemWhereInputSchema.optional(),
  orderBy: import_zod.z.union([InventoryItemOrderByWithRelationInputSchema.array(), InventoryItemOrderByWithRelationInputSchema]).optional(),
  cursor: InventoryItemWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([InventoryItemScalarFieldEnumSchema, InventoryItemScalarFieldEnumSchema.array()]).optional()
}).strict();
var InventoryItemFindFirstOrThrowArgsSchema = import_zod.z.object({
  select: InventoryItemSelectSchema.optional(),
  include: InventoryItemIncludeSchema.optional(),
  where: InventoryItemWhereInputSchema.optional(),
  orderBy: import_zod.z.union([InventoryItemOrderByWithRelationInputSchema.array(), InventoryItemOrderByWithRelationInputSchema]).optional(),
  cursor: InventoryItemWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([InventoryItemScalarFieldEnumSchema, InventoryItemScalarFieldEnumSchema.array()]).optional()
}).strict();
var InventoryItemFindManyArgsSchema = import_zod.z.object({
  select: InventoryItemSelectSchema.optional(),
  include: InventoryItemIncludeSchema.optional(),
  where: InventoryItemWhereInputSchema.optional(),
  orderBy: import_zod.z.union([InventoryItemOrderByWithRelationInputSchema.array(), InventoryItemOrderByWithRelationInputSchema]).optional(),
  cursor: InventoryItemWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([InventoryItemScalarFieldEnumSchema, InventoryItemScalarFieldEnumSchema.array()]).optional()
}).strict();
var InventoryItemAggregateArgsSchema = import_zod.z.object({
  where: InventoryItemWhereInputSchema.optional(),
  orderBy: import_zod.z.union([InventoryItemOrderByWithRelationInputSchema.array(), InventoryItemOrderByWithRelationInputSchema]).optional(),
  cursor: InventoryItemWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var InventoryItemGroupByArgsSchema = import_zod.z.object({
  where: InventoryItemWhereInputSchema.optional(),
  orderBy: import_zod.z.union([InventoryItemOrderByWithAggregationInputSchema.array(), InventoryItemOrderByWithAggregationInputSchema]).optional(),
  by: InventoryItemScalarFieldEnumSchema.array(),
  having: InventoryItemScalarWhereWithAggregatesInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var InventoryItemFindUniqueArgsSchema = import_zod.z.object({
  select: InventoryItemSelectSchema.optional(),
  include: InventoryItemIncludeSchema.optional(),
  where: InventoryItemWhereUniqueInputSchema
}).strict();
var InventoryItemFindUniqueOrThrowArgsSchema = import_zod.z.object({
  select: InventoryItemSelectSchema.optional(),
  include: InventoryItemIncludeSchema.optional(),
  where: InventoryItemWhereUniqueInputSchema
}).strict();
var OrderFindFirstArgsSchema = import_zod.z.object({
  select: OrderSelectSchema.optional(),
  include: OrderIncludeSchema.optional(),
  where: OrderWhereInputSchema.optional(),
  orderBy: import_zod.z.union([OrderOrderByWithRelationInputSchema.array(), OrderOrderByWithRelationInputSchema]).optional(),
  cursor: OrderWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([OrderScalarFieldEnumSchema, OrderScalarFieldEnumSchema.array()]).optional()
}).strict();
var OrderFindFirstOrThrowArgsSchema = import_zod.z.object({
  select: OrderSelectSchema.optional(),
  include: OrderIncludeSchema.optional(),
  where: OrderWhereInputSchema.optional(),
  orderBy: import_zod.z.union([OrderOrderByWithRelationInputSchema.array(), OrderOrderByWithRelationInputSchema]).optional(),
  cursor: OrderWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([OrderScalarFieldEnumSchema, OrderScalarFieldEnumSchema.array()]).optional()
}).strict();
var OrderFindManyArgsSchema = import_zod.z.object({
  select: OrderSelectSchema.optional(),
  include: OrderIncludeSchema.optional(),
  where: OrderWhereInputSchema.optional(),
  orderBy: import_zod.z.union([OrderOrderByWithRelationInputSchema.array(), OrderOrderByWithRelationInputSchema]).optional(),
  cursor: OrderWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([OrderScalarFieldEnumSchema, OrderScalarFieldEnumSchema.array()]).optional()
}).strict();
var OrderAggregateArgsSchema = import_zod.z.object({
  where: OrderWhereInputSchema.optional(),
  orderBy: import_zod.z.union([OrderOrderByWithRelationInputSchema.array(), OrderOrderByWithRelationInputSchema]).optional(),
  cursor: OrderWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var OrderGroupByArgsSchema = import_zod.z.object({
  where: OrderWhereInputSchema.optional(),
  orderBy: import_zod.z.union([OrderOrderByWithAggregationInputSchema.array(), OrderOrderByWithAggregationInputSchema]).optional(),
  by: OrderScalarFieldEnumSchema.array(),
  having: OrderScalarWhereWithAggregatesInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var OrderFindUniqueArgsSchema = import_zod.z.object({
  select: OrderSelectSchema.optional(),
  include: OrderIncludeSchema.optional(),
  where: OrderWhereUniqueInputSchema
}).strict();
var OrderFindUniqueOrThrowArgsSchema = import_zod.z.object({
  select: OrderSelectSchema.optional(),
  include: OrderIncludeSchema.optional(),
  where: OrderWhereUniqueInputSchema
}).strict();
var OrderItemFindFirstArgsSchema = import_zod.z.object({
  select: OrderItemSelectSchema.optional(),
  include: OrderItemIncludeSchema.optional(),
  where: OrderItemWhereInputSchema.optional(),
  orderBy: import_zod.z.union([OrderItemOrderByWithRelationInputSchema.array(), OrderItemOrderByWithRelationInputSchema]).optional(),
  cursor: OrderItemWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([OrderItemScalarFieldEnumSchema, OrderItemScalarFieldEnumSchema.array()]).optional()
}).strict();
var OrderItemFindFirstOrThrowArgsSchema = import_zod.z.object({
  select: OrderItemSelectSchema.optional(),
  include: OrderItemIncludeSchema.optional(),
  where: OrderItemWhereInputSchema.optional(),
  orderBy: import_zod.z.union([OrderItemOrderByWithRelationInputSchema.array(), OrderItemOrderByWithRelationInputSchema]).optional(),
  cursor: OrderItemWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([OrderItemScalarFieldEnumSchema, OrderItemScalarFieldEnumSchema.array()]).optional()
}).strict();
var OrderItemFindManyArgsSchema = import_zod.z.object({
  select: OrderItemSelectSchema.optional(),
  include: OrderItemIncludeSchema.optional(),
  where: OrderItemWhereInputSchema.optional(),
  orderBy: import_zod.z.union([OrderItemOrderByWithRelationInputSchema.array(), OrderItemOrderByWithRelationInputSchema]).optional(),
  cursor: OrderItemWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([OrderItemScalarFieldEnumSchema, OrderItemScalarFieldEnumSchema.array()]).optional()
}).strict();
var OrderItemAggregateArgsSchema = import_zod.z.object({
  where: OrderItemWhereInputSchema.optional(),
  orderBy: import_zod.z.union([OrderItemOrderByWithRelationInputSchema.array(), OrderItemOrderByWithRelationInputSchema]).optional(),
  cursor: OrderItemWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var OrderItemGroupByArgsSchema = import_zod.z.object({
  where: OrderItemWhereInputSchema.optional(),
  orderBy: import_zod.z.union([OrderItemOrderByWithAggregationInputSchema.array(), OrderItemOrderByWithAggregationInputSchema]).optional(),
  by: OrderItemScalarFieldEnumSchema.array(),
  having: OrderItemScalarWhereWithAggregatesInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var OrderItemFindUniqueArgsSchema = import_zod.z.object({
  select: OrderItemSelectSchema.optional(),
  include: OrderItemIncludeSchema.optional(),
  where: OrderItemWhereUniqueInputSchema
}).strict();
var OrderItemFindUniqueOrThrowArgsSchema = import_zod.z.object({
  select: OrderItemSelectSchema.optional(),
  include: OrderItemIncludeSchema.optional(),
  where: OrderItemWhereUniqueInputSchema
}).strict();
var VendorFindFirstArgsSchema = import_zod.z.object({
  select: VendorSelectSchema.optional(),
  include: VendorIncludeSchema.optional(),
  where: VendorWhereInputSchema.optional(),
  orderBy: import_zod.z.union([VendorOrderByWithRelationInputSchema.array(), VendorOrderByWithRelationInputSchema]).optional(),
  cursor: VendorWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([VendorScalarFieldEnumSchema, VendorScalarFieldEnumSchema.array()]).optional()
}).strict();
var VendorFindFirstOrThrowArgsSchema = import_zod.z.object({
  select: VendorSelectSchema.optional(),
  include: VendorIncludeSchema.optional(),
  where: VendorWhereInputSchema.optional(),
  orderBy: import_zod.z.union([VendorOrderByWithRelationInputSchema.array(), VendorOrderByWithRelationInputSchema]).optional(),
  cursor: VendorWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([VendorScalarFieldEnumSchema, VendorScalarFieldEnumSchema.array()]).optional()
}).strict();
var VendorFindManyArgsSchema = import_zod.z.object({
  select: VendorSelectSchema.optional(),
  include: VendorIncludeSchema.optional(),
  where: VendorWhereInputSchema.optional(),
  orderBy: import_zod.z.union([VendorOrderByWithRelationInputSchema.array(), VendorOrderByWithRelationInputSchema]).optional(),
  cursor: VendorWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([VendorScalarFieldEnumSchema, VendorScalarFieldEnumSchema.array()]).optional()
}).strict();
var VendorAggregateArgsSchema = import_zod.z.object({
  where: VendorWhereInputSchema.optional(),
  orderBy: import_zod.z.union([VendorOrderByWithRelationInputSchema.array(), VendorOrderByWithRelationInputSchema]).optional(),
  cursor: VendorWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var VendorGroupByArgsSchema = import_zod.z.object({
  where: VendorWhereInputSchema.optional(),
  orderBy: import_zod.z.union([VendorOrderByWithAggregationInputSchema.array(), VendorOrderByWithAggregationInputSchema]).optional(),
  by: VendorScalarFieldEnumSchema.array(),
  having: VendorScalarWhereWithAggregatesInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var VendorFindUniqueArgsSchema = import_zod.z.object({
  select: VendorSelectSchema.optional(),
  include: VendorIncludeSchema.optional(),
  where: VendorWhereUniqueInputSchema
}).strict();
var VendorFindUniqueOrThrowArgsSchema = import_zod.z.object({
  select: VendorSelectSchema.optional(),
  include: VendorIncludeSchema.optional(),
  where: VendorWhereUniqueInputSchema
}).strict();
var ShiftFindFirstArgsSchema = import_zod.z.object({
  select: ShiftSelectSchema.optional(),
  include: ShiftIncludeSchema.optional(),
  where: ShiftWhereInputSchema.optional(),
  orderBy: import_zod.z.union([ShiftOrderByWithRelationInputSchema.array(), ShiftOrderByWithRelationInputSchema]).optional(),
  cursor: ShiftWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([ShiftScalarFieldEnumSchema, ShiftScalarFieldEnumSchema.array()]).optional()
}).strict();
var ShiftFindFirstOrThrowArgsSchema = import_zod.z.object({
  select: ShiftSelectSchema.optional(),
  include: ShiftIncludeSchema.optional(),
  where: ShiftWhereInputSchema.optional(),
  orderBy: import_zod.z.union([ShiftOrderByWithRelationInputSchema.array(), ShiftOrderByWithRelationInputSchema]).optional(),
  cursor: ShiftWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([ShiftScalarFieldEnumSchema, ShiftScalarFieldEnumSchema.array()]).optional()
}).strict();
var ShiftFindManyArgsSchema = import_zod.z.object({
  select: ShiftSelectSchema.optional(),
  include: ShiftIncludeSchema.optional(),
  where: ShiftWhereInputSchema.optional(),
  orderBy: import_zod.z.union([ShiftOrderByWithRelationInputSchema.array(), ShiftOrderByWithRelationInputSchema]).optional(),
  cursor: ShiftWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([ShiftScalarFieldEnumSchema, ShiftScalarFieldEnumSchema.array()]).optional()
}).strict();
var ShiftAggregateArgsSchema = import_zod.z.object({
  where: ShiftWhereInputSchema.optional(),
  orderBy: import_zod.z.union([ShiftOrderByWithRelationInputSchema.array(), ShiftOrderByWithRelationInputSchema]).optional(),
  cursor: ShiftWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var ShiftGroupByArgsSchema = import_zod.z.object({
  where: ShiftWhereInputSchema.optional(),
  orderBy: import_zod.z.union([ShiftOrderByWithAggregationInputSchema.array(), ShiftOrderByWithAggregationInputSchema]).optional(),
  by: ShiftScalarFieldEnumSchema.array(),
  having: ShiftScalarWhereWithAggregatesInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var ShiftFindUniqueArgsSchema = import_zod.z.object({
  select: ShiftSelectSchema.optional(),
  include: ShiftIncludeSchema.optional(),
  where: ShiftWhereUniqueInputSchema
}).strict();
var ShiftFindUniqueOrThrowArgsSchema = import_zod.z.object({
  select: ShiftSelectSchema.optional(),
  include: ShiftIncludeSchema.optional(),
  where: ShiftWhereUniqueInputSchema
}).strict();
var PrepBoardFindFirstArgsSchema = import_zod.z.object({
  select: PrepBoardSelectSchema.optional(),
  include: PrepBoardIncludeSchema.optional(),
  where: PrepBoardWhereInputSchema.optional(),
  orderBy: import_zod.z.union([PrepBoardOrderByWithRelationInputSchema.array(), PrepBoardOrderByWithRelationInputSchema]).optional(),
  cursor: PrepBoardWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([PrepBoardScalarFieldEnumSchema, PrepBoardScalarFieldEnumSchema.array()]).optional()
}).strict();
var PrepBoardFindFirstOrThrowArgsSchema = import_zod.z.object({
  select: PrepBoardSelectSchema.optional(),
  include: PrepBoardIncludeSchema.optional(),
  where: PrepBoardWhereInputSchema.optional(),
  orderBy: import_zod.z.union([PrepBoardOrderByWithRelationInputSchema.array(), PrepBoardOrderByWithRelationInputSchema]).optional(),
  cursor: PrepBoardWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([PrepBoardScalarFieldEnumSchema, PrepBoardScalarFieldEnumSchema.array()]).optional()
}).strict();
var PrepBoardFindManyArgsSchema = import_zod.z.object({
  select: PrepBoardSelectSchema.optional(),
  include: PrepBoardIncludeSchema.optional(),
  where: PrepBoardWhereInputSchema.optional(),
  orderBy: import_zod.z.union([PrepBoardOrderByWithRelationInputSchema.array(), PrepBoardOrderByWithRelationInputSchema]).optional(),
  cursor: PrepBoardWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([PrepBoardScalarFieldEnumSchema, PrepBoardScalarFieldEnumSchema.array()]).optional()
}).strict();
var PrepBoardAggregateArgsSchema = import_zod.z.object({
  where: PrepBoardWhereInputSchema.optional(),
  orderBy: import_zod.z.union([PrepBoardOrderByWithRelationInputSchema.array(), PrepBoardOrderByWithRelationInputSchema]).optional(),
  cursor: PrepBoardWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var PrepBoardGroupByArgsSchema = import_zod.z.object({
  where: PrepBoardWhereInputSchema.optional(),
  orderBy: import_zod.z.union([PrepBoardOrderByWithAggregationInputSchema.array(), PrepBoardOrderByWithAggregationInputSchema]).optional(),
  by: PrepBoardScalarFieldEnumSchema.array(),
  having: PrepBoardScalarWhereWithAggregatesInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var PrepBoardFindUniqueArgsSchema = import_zod.z.object({
  select: PrepBoardSelectSchema.optional(),
  include: PrepBoardIncludeSchema.optional(),
  where: PrepBoardWhereUniqueInputSchema
}).strict();
var PrepBoardFindUniqueOrThrowArgsSchema = import_zod.z.object({
  select: PrepBoardSelectSchema.optional(),
  include: PrepBoardIncludeSchema.optional(),
  where: PrepBoardWhereUniqueInputSchema
}).strict();
var PrepItemFindFirstArgsSchema = import_zod.z.object({
  select: PrepItemSelectSchema.optional(),
  include: PrepItemIncludeSchema.optional(),
  where: PrepItemWhereInputSchema.optional(),
  orderBy: import_zod.z.union([PrepItemOrderByWithRelationInputSchema.array(), PrepItemOrderByWithRelationInputSchema]).optional(),
  cursor: PrepItemWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([PrepItemScalarFieldEnumSchema, PrepItemScalarFieldEnumSchema.array()]).optional()
}).strict();
var PrepItemFindFirstOrThrowArgsSchema = import_zod.z.object({
  select: PrepItemSelectSchema.optional(),
  include: PrepItemIncludeSchema.optional(),
  where: PrepItemWhereInputSchema.optional(),
  orderBy: import_zod.z.union([PrepItemOrderByWithRelationInputSchema.array(), PrepItemOrderByWithRelationInputSchema]).optional(),
  cursor: PrepItemWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([PrepItemScalarFieldEnumSchema, PrepItemScalarFieldEnumSchema.array()]).optional()
}).strict();
var PrepItemFindManyArgsSchema = import_zod.z.object({
  select: PrepItemSelectSchema.optional(),
  include: PrepItemIncludeSchema.optional(),
  where: PrepItemWhereInputSchema.optional(),
  orderBy: import_zod.z.union([PrepItemOrderByWithRelationInputSchema.array(), PrepItemOrderByWithRelationInputSchema]).optional(),
  cursor: PrepItemWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([PrepItemScalarFieldEnumSchema, PrepItemScalarFieldEnumSchema.array()]).optional()
}).strict();
var PrepItemAggregateArgsSchema = import_zod.z.object({
  where: PrepItemWhereInputSchema.optional(),
  orderBy: import_zod.z.union([PrepItemOrderByWithRelationInputSchema.array(), PrepItemOrderByWithRelationInputSchema]).optional(),
  cursor: PrepItemWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var PrepItemGroupByArgsSchema = import_zod.z.object({
  where: PrepItemWhereInputSchema.optional(),
  orderBy: import_zod.z.union([PrepItemOrderByWithAggregationInputSchema.array(), PrepItemOrderByWithAggregationInputSchema]).optional(),
  by: PrepItemScalarFieldEnumSchema.array(),
  having: PrepItemScalarWhereWithAggregatesInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var PrepItemFindUniqueArgsSchema = import_zod.z.object({
  select: PrepItemSelectSchema.optional(),
  include: PrepItemIncludeSchema.optional(),
  where: PrepItemWhereUniqueInputSchema
}).strict();
var PrepItemFindUniqueOrThrowArgsSchema = import_zod.z.object({
  select: PrepItemSelectSchema.optional(),
  include: PrepItemIncludeSchema.optional(),
  where: PrepItemWhereUniqueInputSchema
}).strict();
var PasswordResetFindFirstArgsSchema = import_zod.z.object({
  select: PasswordResetSelectSchema.optional(),
  include: PasswordResetIncludeSchema.optional(),
  where: PasswordResetWhereInputSchema.optional(),
  orderBy: import_zod.z.union([PasswordResetOrderByWithRelationInputSchema.array(), PasswordResetOrderByWithRelationInputSchema]).optional(),
  cursor: PasswordResetWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([PasswordResetScalarFieldEnumSchema, PasswordResetScalarFieldEnumSchema.array()]).optional()
}).strict();
var PasswordResetFindFirstOrThrowArgsSchema = import_zod.z.object({
  select: PasswordResetSelectSchema.optional(),
  include: PasswordResetIncludeSchema.optional(),
  where: PasswordResetWhereInputSchema.optional(),
  orderBy: import_zod.z.union([PasswordResetOrderByWithRelationInputSchema.array(), PasswordResetOrderByWithRelationInputSchema]).optional(),
  cursor: PasswordResetWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([PasswordResetScalarFieldEnumSchema, PasswordResetScalarFieldEnumSchema.array()]).optional()
}).strict();
var PasswordResetFindManyArgsSchema = import_zod.z.object({
  select: PasswordResetSelectSchema.optional(),
  include: PasswordResetIncludeSchema.optional(),
  where: PasswordResetWhereInputSchema.optional(),
  orderBy: import_zod.z.union([PasswordResetOrderByWithRelationInputSchema.array(), PasswordResetOrderByWithRelationInputSchema]).optional(),
  cursor: PasswordResetWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([PasswordResetScalarFieldEnumSchema, PasswordResetScalarFieldEnumSchema.array()]).optional()
}).strict();
var PasswordResetAggregateArgsSchema = import_zod.z.object({
  where: PasswordResetWhereInputSchema.optional(),
  orderBy: import_zod.z.union([PasswordResetOrderByWithRelationInputSchema.array(), PasswordResetOrderByWithRelationInputSchema]).optional(),
  cursor: PasswordResetWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var PasswordResetGroupByArgsSchema = import_zod.z.object({
  where: PasswordResetWhereInputSchema.optional(),
  orderBy: import_zod.z.union([PasswordResetOrderByWithAggregationInputSchema.array(), PasswordResetOrderByWithAggregationInputSchema]).optional(),
  by: PasswordResetScalarFieldEnumSchema.array(),
  having: PasswordResetScalarWhereWithAggregatesInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var PasswordResetFindUniqueArgsSchema = import_zod.z.object({
  select: PasswordResetSelectSchema.optional(),
  include: PasswordResetIncludeSchema.optional(),
  where: PasswordResetWhereUniqueInputSchema
}).strict();
var PasswordResetFindUniqueOrThrowArgsSchema = import_zod.z.object({
  select: PasswordResetSelectSchema.optional(),
  include: PasswordResetIncludeSchema.optional(),
  where: PasswordResetWhereUniqueInputSchema
}).strict();
var MenuFindFirstArgsSchema = import_zod.z.object({
  select: MenuSelectSchema.optional(),
  include: MenuIncludeSchema.optional(),
  where: MenuWhereInputSchema.optional(),
  orderBy: import_zod.z.union([MenuOrderByWithRelationInputSchema.array(), MenuOrderByWithRelationInputSchema]).optional(),
  cursor: MenuWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([MenuScalarFieldEnumSchema, MenuScalarFieldEnumSchema.array()]).optional()
}).strict();
var MenuFindFirstOrThrowArgsSchema = import_zod.z.object({
  select: MenuSelectSchema.optional(),
  include: MenuIncludeSchema.optional(),
  where: MenuWhereInputSchema.optional(),
  orderBy: import_zod.z.union([MenuOrderByWithRelationInputSchema.array(), MenuOrderByWithRelationInputSchema]).optional(),
  cursor: MenuWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([MenuScalarFieldEnumSchema, MenuScalarFieldEnumSchema.array()]).optional()
}).strict();
var MenuFindManyArgsSchema = import_zod.z.object({
  select: MenuSelectSchema.optional(),
  include: MenuIncludeSchema.optional(),
  where: MenuWhereInputSchema.optional(),
  orderBy: import_zod.z.union([MenuOrderByWithRelationInputSchema.array(), MenuOrderByWithRelationInputSchema]).optional(),
  cursor: MenuWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([MenuScalarFieldEnumSchema, MenuScalarFieldEnumSchema.array()]).optional()
}).strict();
var MenuAggregateArgsSchema = import_zod.z.object({
  where: MenuWhereInputSchema.optional(),
  orderBy: import_zod.z.union([MenuOrderByWithRelationInputSchema.array(), MenuOrderByWithRelationInputSchema]).optional(),
  cursor: MenuWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var MenuGroupByArgsSchema = import_zod.z.object({
  where: MenuWhereInputSchema.optional(),
  orderBy: import_zod.z.union([MenuOrderByWithAggregationInputSchema.array(), MenuOrderByWithAggregationInputSchema]).optional(),
  by: MenuScalarFieldEnumSchema.array(),
  having: MenuScalarWhereWithAggregatesInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var MenuFindUniqueArgsSchema = import_zod.z.object({
  select: MenuSelectSchema.optional(),
  include: MenuIncludeSchema.optional(),
  where: MenuWhereUniqueInputSchema
}).strict();
var MenuFindUniqueOrThrowArgsSchema = import_zod.z.object({
  select: MenuSelectSchema.optional(),
  include: MenuIncludeSchema.optional(),
  where: MenuWhereUniqueInputSchema
}).strict();
var MenuItemRecipeFindFirstArgsSchema = import_zod.z.object({
  select: MenuItemRecipeSelectSchema.optional(),
  include: MenuItemRecipeIncludeSchema.optional(),
  where: MenuItemRecipeWhereInputSchema.optional(),
  orderBy: import_zod.z.union([MenuItemRecipeOrderByWithRelationInputSchema.array(), MenuItemRecipeOrderByWithRelationInputSchema]).optional(),
  cursor: MenuItemRecipeWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([MenuItemRecipeScalarFieldEnumSchema, MenuItemRecipeScalarFieldEnumSchema.array()]).optional()
}).strict();
var MenuItemRecipeFindFirstOrThrowArgsSchema = import_zod.z.object({
  select: MenuItemRecipeSelectSchema.optional(),
  include: MenuItemRecipeIncludeSchema.optional(),
  where: MenuItemRecipeWhereInputSchema.optional(),
  orderBy: import_zod.z.union([MenuItemRecipeOrderByWithRelationInputSchema.array(), MenuItemRecipeOrderByWithRelationInputSchema]).optional(),
  cursor: MenuItemRecipeWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([MenuItemRecipeScalarFieldEnumSchema, MenuItemRecipeScalarFieldEnumSchema.array()]).optional()
}).strict();
var MenuItemRecipeFindManyArgsSchema = import_zod.z.object({
  select: MenuItemRecipeSelectSchema.optional(),
  include: MenuItemRecipeIncludeSchema.optional(),
  where: MenuItemRecipeWhereInputSchema.optional(),
  orderBy: import_zod.z.union([MenuItemRecipeOrderByWithRelationInputSchema.array(), MenuItemRecipeOrderByWithRelationInputSchema]).optional(),
  cursor: MenuItemRecipeWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([MenuItemRecipeScalarFieldEnumSchema, MenuItemRecipeScalarFieldEnumSchema.array()]).optional()
}).strict();
var MenuItemRecipeAggregateArgsSchema = import_zod.z.object({
  where: MenuItemRecipeWhereInputSchema.optional(),
  orderBy: import_zod.z.union([MenuItemRecipeOrderByWithRelationInputSchema.array(), MenuItemRecipeOrderByWithRelationInputSchema]).optional(),
  cursor: MenuItemRecipeWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var MenuItemRecipeGroupByArgsSchema = import_zod.z.object({
  where: MenuItemRecipeWhereInputSchema.optional(),
  orderBy: import_zod.z.union([MenuItemRecipeOrderByWithAggregationInputSchema.array(), MenuItemRecipeOrderByWithAggregationInputSchema]).optional(),
  by: MenuItemRecipeScalarFieldEnumSchema.array(),
  having: MenuItemRecipeScalarWhereWithAggregatesInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var MenuItemRecipeFindUniqueArgsSchema = import_zod.z.object({
  select: MenuItemRecipeSelectSchema.optional(),
  include: MenuItemRecipeIncludeSchema.optional(),
  where: MenuItemRecipeWhereUniqueInputSchema
}).strict();
var MenuItemRecipeFindUniqueOrThrowArgsSchema = import_zod.z.object({
  select: MenuItemRecipeSelectSchema.optional(),
  include: MenuItemRecipeIncludeSchema.optional(),
  where: MenuItemRecipeWhereUniqueInputSchema
}).strict();
var MenuItemFindFirstArgsSchema = import_zod.z.object({
  select: MenuItemSelectSchema.optional(),
  include: MenuItemIncludeSchema.optional(),
  where: MenuItemWhereInputSchema.optional(),
  orderBy: import_zod.z.union([MenuItemOrderByWithRelationInputSchema.array(), MenuItemOrderByWithRelationInputSchema]).optional(),
  cursor: MenuItemWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([MenuItemScalarFieldEnumSchema, MenuItemScalarFieldEnumSchema.array()]).optional()
}).strict();
var MenuItemFindFirstOrThrowArgsSchema = import_zod.z.object({
  select: MenuItemSelectSchema.optional(),
  include: MenuItemIncludeSchema.optional(),
  where: MenuItemWhereInputSchema.optional(),
  orderBy: import_zod.z.union([MenuItemOrderByWithRelationInputSchema.array(), MenuItemOrderByWithRelationInputSchema]).optional(),
  cursor: MenuItemWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([MenuItemScalarFieldEnumSchema, MenuItemScalarFieldEnumSchema.array()]).optional()
}).strict();
var MenuItemFindManyArgsSchema = import_zod.z.object({
  select: MenuItemSelectSchema.optional(),
  include: MenuItemIncludeSchema.optional(),
  where: MenuItemWhereInputSchema.optional(),
  orderBy: import_zod.z.union([MenuItemOrderByWithRelationInputSchema.array(), MenuItemOrderByWithRelationInputSchema]).optional(),
  cursor: MenuItemWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([MenuItemScalarFieldEnumSchema, MenuItemScalarFieldEnumSchema.array()]).optional()
}).strict();
var MenuItemAggregateArgsSchema = import_zod.z.object({
  where: MenuItemWhereInputSchema.optional(),
  orderBy: import_zod.z.union([MenuItemOrderByWithRelationInputSchema.array(), MenuItemOrderByWithRelationInputSchema]).optional(),
  cursor: MenuItemWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var MenuItemGroupByArgsSchema = import_zod.z.object({
  where: MenuItemWhereInputSchema.optional(),
  orderBy: import_zod.z.union([MenuItemOrderByWithAggregationInputSchema.array(), MenuItemOrderByWithAggregationInputSchema]).optional(),
  by: MenuItemScalarFieldEnumSchema.array(),
  having: MenuItemScalarWhereWithAggregatesInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var MenuItemFindUniqueArgsSchema = import_zod.z.object({
  select: MenuItemSelectSchema.optional(),
  include: MenuItemIncludeSchema.optional(),
  where: MenuItemWhereUniqueInputSchema
}).strict();
var MenuItemFindUniqueOrThrowArgsSchema = import_zod.z.object({
  select: MenuItemSelectSchema.optional(),
  include: MenuItemIncludeSchema.optional(),
  where: MenuItemWhereUniqueInputSchema
}).strict();
var NutritionalInfoFindFirstArgsSchema = import_zod.z.object({
  select: NutritionalInfoSelectSchema.optional(),
  include: NutritionalInfoIncludeSchema.optional(),
  where: NutritionalInfoWhereInputSchema.optional(),
  orderBy: import_zod.z.union([NutritionalInfoOrderByWithRelationInputSchema.array(), NutritionalInfoOrderByWithRelationInputSchema]).optional(),
  cursor: NutritionalInfoWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([NutritionalInfoScalarFieldEnumSchema, NutritionalInfoScalarFieldEnumSchema.array()]).optional()
}).strict();
var NutritionalInfoFindFirstOrThrowArgsSchema = import_zod.z.object({
  select: NutritionalInfoSelectSchema.optional(),
  include: NutritionalInfoIncludeSchema.optional(),
  where: NutritionalInfoWhereInputSchema.optional(),
  orderBy: import_zod.z.union([NutritionalInfoOrderByWithRelationInputSchema.array(), NutritionalInfoOrderByWithRelationInputSchema]).optional(),
  cursor: NutritionalInfoWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([NutritionalInfoScalarFieldEnumSchema, NutritionalInfoScalarFieldEnumSchema.array()]).optional()
}).strict();
var NutritionalInfoFindManyArgsSchema = import_zod.z.object({
  select: NutritionalInfoSelectSchema.optional(),
  include: NutritionalInfoIncludeSchema.optional(),
  where: NutritionalInfoWhereInputSchema.optional(),
  orderBy: import_zod.z.union([NutritionalInfoOrderByWithRelationInputSchema.array(), NutritionalInfoOrderByWithRelationInputSchema]).optional(),
  cursor: NutritionalInfoWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([NutritionalInfoScalarFieldEnumSchema, NutritionalInfoScalarFieldEnumSchema.array()]).optional()
}).strict();
var NutritionalInfoAggregateArgsSchema = import_zod.z.object({
  where: NutritionalInfoWhereInputSchema.optional(),
  orderBy: import_zod.z.union([NutritionalInfoOrderByWithRelationInputSchema.array(), NutritionalInfoOrderByWithRelationInputSchema]).optional(),
  cursor: NutritionalInfoWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var NutritionalInfoGroupByArgsSchema = import_zod.z.object({
  where: NutritionalInfoWhereInputSchema.optional(),
  orderBy: import_zod.z.union([NutritionalInfoOrderByWithAggregationInputSchema.array(), NutritionalInfoOrderByWithAggregationInputSchema]).optional(),
  by: NutritionalInfoScalarFieldEnumSchema.array(),
  having: NutritionalInfoScalarWhereWithAggregatesInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var NutritionalInfoFindUniqueArgsSchema = import_zod.z.object({
  select: NutritionalInfoSelectSchema.optional(),
  include: NutritionalInfoIncludeSchema.optional(),
  where: NutritionalInfoWhereUniqueInputSchema
}).strict();
var NutritionalInfoFindUniqueOrThrowArgsSchema = import_zod.z.object({
  select: NutritionalInfoSelectSchema.optional(),
  include: NutritionalInfoIncludeSchema.optional(),
  where: NutritionalInfoWhereUniqueInputSchema
}).strict();
var FoodCostHistoryFindFirstArgsSchema = import_zod.z.object({
  select: FoodCostHistorySelectSchema.optional(),
  include: FoodCostHistoryIncludeSchema.optional(),
  where: FoodCostHistoryWhereInputSchema.optional(),
  orderBy: import_zod.z.union([FoodCostHistoryOrderByWithRelationInputSchema.array(), FoodCostHistoryOrderByWithRelationInputSchema]).optional(),
  cursor: FoodCostHistoryWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([FoodCostHistoryScalarFieldEnumSchema, FoodCostHistoryScalarFieldEnumSchema.array()]).optional()
}).strict();
var FoodCostHistoryFindFirstOrThrowArgsSchema = import_zod.z.object({
  select: FoodCostHistorySelectSchema.optional(),
  include: FoodCostHistoryIncludeSchema.optional(),
  where: FoodCostHistoryWhereInputSchema.optional(),
  orderBy: import_zod.z.union([FoodCostHistoryOrderByWithRelationInputSchema.array(), FoodCostHistoryOrderByWithRelationInputSchema]).optional(),
  cursor: FoodCostHistoryWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([FoodCostHistoryScalarFieldEnumSchema, FoodCostHistoryScalarFieldEnumSchema.array()]).optional()
}).strict();
var FoodCostHistoryFindManyArgsSchema = import_zod.z.object({
  select: FoodCostHistorySelectSchema.optional(),
  include: FoodCostHistoryIncludeSchema.optional(),
  where: FoodCostHistoryWhereInputSchema.optional(),
  orderBy: import_zod.z.union([FoodCostHistoryOrderByWithRelationInputSchema.array(), FoodCostHistoryOrderByWithRelationInputSchema]).optional(),
  cursor: FoodCostHistoryWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([FoodCostHistoryScalarFieldEnumSchema, FoodCostHistoryScalarFieldEnumSchema.array()]).optional()
}).strict();
var FoodCostHistoryAggregateArgsSchema = import_zod.z.object({
  where: FoodCostHistoryWhereInputSchema.optional(),
  orderBy: import_zod.z.union([FoodCostHistoryOrderByWithRelationInputSchema.array(), FoodCostHistoryOrderByWithRelationInputSchema]).optional(),
  cursor: FoodCostHistoryWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var FoodCostHistoryGroupByArgsSchema = import_zod.z.object({
  where: FoodCostHistoryWhereInputSchema.optional(),
  orderBy: import_zod.z.union([FoodCostHistoryOrderByWithAggregationInputSchema.array(), FoodCostHistoryOrderByWithAggregationInputSchema]).optional(),
  by: FoodCostHistoryScalarFieldEnumSchema.array(),
  having: FoodCostHistoryScalarWhereWithAggregatesInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var FoodCostHistoryFindUniqueArgsSchema = import_zod.z.object({
  select: FoodCostHistorySelectSchema.optional(),
  include: FoodCostHistoryIncludeSchema.optional(),
  where: FoodCostHistoryWhereUniqueInputSchema
}).strict();
var FoodCostHistoryFindUniqueOrThrowArgsSchema = import_zod.z.object({
  select: FoodCostHistorySelectSchema.optional(),
  include: FoodCostHistoryIncludeSchema.optional(),
  where: FoodCostHistoryWhereUniqueInputSchema
}).strict();
var PrepHistoryFindFirstArgsSchema = import_zod.z.object({
  select: PrepHistorySelectSchema.optional(),
  include: PrepHistoryIncludeSchema.optional(),
  where: PrepHistoryWhereInputSchema.optional(),
  orderBy: import_zod.z.union([PrepHistoryOrderByWithRelationInputSchema.array(), PrepHistoryOrderByWithRelationInputSchema]).optional(),
  cursor: PrepHistoryWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([PrepHistoryScalarFieldEnumSchema, PrepHistoryScalarFieldEnumSchema.array()]).optional()
}).strict();
var PrepHistoryFindFirstOrThrowArgsSchema = import_zod.z.object({
  select: PrepHistorySelectSchema.optional(),
  include: PrepHistoryIncludeSchema.optional(),
  where: PrepHistoryWhereInputSchema.optional(),
  orderBy: import_zod.z.union([PrepHistoryOrderByWithRelationInputSchema.array(), PrepHistoryOrderByWithRelationInputSchema]).optional(),
  cursor: PrepHistoryWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([PrepHistoryScalarFieldEnumSchema, PrepHistoryScalarFieldEnumSchema.array()]).optional()
}).strict();
var PrepHistoryFindManyArgsSchema = import_zod.z.object({
  select: PrepHistorySelectSchema.optional(),
  include: PrepHistoryIncludeSchema.optional(),
  where: PrepHistoryWhereInputSchema.optional(),
  orderBy: import_zod.z.union([PrepHistoryOrderByWithRelationInputSchema.array(), PrepHistoryOrderByWithRelationInputSchema]).optional(),
  cursor: PrepHistoryWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional(),
  distinct: import_zod.z.union([PrepHistoryScalarFieldEnumSchema, PrepHistoryScalarFieldEnumSchema.array()]).optional()
}).strict();
var PrepHistoryAggregateArgsSchema = import_zod.z.object({
  where: PrepHistoryWhereInputSchema.optional(),
  orderBy: import_zod.z.union([PrepHistoryOrderByWithRelationInputSchema.array(), PrepHistoryOrderByWithRelationInputSchema]).optional(),
  cursor: PrepHistoryWhereUniqueInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var PrepHistoryGroupByArgsSchema = import_zod.z.object({
  where: PrepHistoryWhereInputSchema.optional(),
  orderBy: import_zod.z.union([PrepHistoryOrderByWithAggregationInputSchema.array(), PrepHistoryOrderByWithAggregationInputSchema]).optional(),
  by: PrepHistoryScalarFieldEnumSchema.array(),
  having: PrepHistoryScalarWhereWithAggregatesInputSchema.optional(),
  take: import_zod.z.number().optional(),
  skip: import_zod.z.number().optional()
}).strict();
var PrepHistoryFindUniqueArgsSchema = import_zod.z.object({
  select: PrepHistorySelectSchema.optional(),
  include: PrepHistoryIncludeSchema.optional(),
  where: PrepHistoryWhereUniqueInputSchema
}).strict();
var PrepHistoryFindUniqueOrThrowArgsSchema = import_zod.z.object({
  select: PrepHistorySelectSchema.optional(),
  include: PrepHistoryIncludeSchema.optional(),
  where: PrepHistoryWhereUniqueInputSchema
}).strict();
var SalesTransactionsCreateArgsSchema = import_zod.z.object({
  select: SalesTransactionsSelectSchema.optional(),
  include: SalesTransactionsIncludeSchema.optional(),
  data: import_zod.z.union([SalesTransactionsCreateInputSchema, SalesTransactionsUncheckedCreateInputSchema])
}).strict();
var SalesTransactionsUpsertArgsSchema = import_zod.z.object({
  select: SalesTransactionsSelectSchema.optional(),
  include: SalesTransactionsIncludeSchema.optional(),
  where: SalesTransactionsWhereUniqueInputSchema,
  create: import_zod.z.union([SalesTransactionsCreateInputSchema, SalesTransactionsUncheckedCreateInputSchema]),
  update: import_zod.z.union([SalesTransactionsUpdateInputSchema, SalesTransactionsUncheckedUpdateInputSchema])
}).strict();
var SalesTransactionsCreateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([SalesTransactionsCreateManyInputSchema, SalesTransactionsCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var SalesTransactionsCreateManyAndReturnArgsSchema = import_zod.z.object({
  data: import_zod.z.union([SalesTransactionsCreateManyInputSchema, SalesTransactionsCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var SalesTransactionsDeleteArgsSchema = import_zod.z.object({
  select: SalesTransactionsSelectSchema.optional(),
  include: SalesTransactionsIncludeSchema.optional(),
  where: SalesTransactionsWhereUniqueInputSchema
}).strict();
var SalesTransactionsUpdateArgsSchema = import_zod.z.object({
  select: SalesTransactionsSelectSchema.optional(),
  include: SalesTransactionsIncludeSchema.optional(),
  data: import_zod.z.union([SalesTransactionsUpdateInputSchema, SalesTransactionsUncheckedUpdateInputSchema]),
  where: SalesTransactionsWhereUniqueInputSchema
}).strict();
var SalesTransactionsUpdateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([SalesTransactionsUpdateManyMutationInputSchema, SalesTransactionsUncheckedUpdateManyInputSchema]),
  where: SalesTransactionsWhereInputSchema.optional()
}).strict();
var SalesTransactionsDeleteManyArgsSchema = import_zod.z.object({
  where: SalesTransactionsWhereInputSchema.optional()
}).strict();
var MenuCategoryCreateArgsSchema = import_zod.z.object({
  select: MenuCategorySelectSchema.optional(),
  include: MenuCategoryIncludeSchema.optional(),
  data: import_zod.z.union([MenuCategoryCreateInputSchema, MenuCategoryUncheckedCreateInputSchema])
}).strict();
var MenuCategoryUpsertArgsSchema = import_zod.z.object({
  select: MenuCategorySelectSchema.optional(),
  include: MenuCategoryIncludeSchema.optional(),
  where: MenuCategoryWhereUniqueInputSchema,
  create: import_zod.z.union([MenuCategoryCreateInputSchema, MenuCategoryUncheckedCreateInputSchema]),
  update: import_zod.z.union([MenuCategoryUpdateInputSchema, MenuCategoryUncheckedUpdateInputSchema])
}).strict();
var MenuCategoryCreateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([MenuCategoryCreateManyInputSchema, MenuCategoryCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var MenuCategoryCreateManyAndReturnArgsSchema = import_zod.z.object({
  data: import_zod.z.union([MenuCategoryCreateManyInputSchema, MenuCategoryCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var MenuCategoryDeleteArgsSchema = import_zod.z.object({
  select: MenuCategorySelectSchema.optional(),
  include: MenuCategoryIncludeSchema.optional(),
  where: MenuCategoryWhereUniqueInputSchema
}).strict();
var MenuCategoryUpdateArgsSchema = import_zod.z.object({
  select: MenuCategorySelectSchema.optional(),
  include: MenuCategoryIncludeSchema.optional(),
  data: import_zod.z.union([MenuCategoryUpdateInputSchema, MenuCategoryUncheckedUpdateInputSchema]),
  where: MenuCategoryWhereUniqueInputSchema
}).strict();
var MenuCategoryUpdateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([MenuCategoryUpdateManyMutationInputSchema, MenuCategoryUncheckedUpdateManyInputSchema]),
  where: MenuCategoryWhereInputSchema.optional()
}).strict();
var MenuCategoryDeleteManyArgsSchema = import_zod.z.object({
  where: MenuCategoryWhereInputSchema.optional()
}).strict();
var RecipeVersionCreateArgsSchema = import_zod.z.object({
  select: RecipeVersionSelectSchema.optional(),
  include: RecipeVersionIncludeSchema.optional(),
  data: import_zod.z.union([RecipeVersionCreateInputSchema, RecipeVersionUncheckedCreateInputSchema])
}).strict();
var RecipeVersionUpsertArgsSchema = import_zod.z.object({
  select: RecipeVersionSelectSchema.optional(),
  include: RecipeVersionIncludeSchema.optional(),
  where: RecipeVersionWhereUniqueInputSchema,
  create: import_zod.z.union([RecipeVersionCreateInputSchema, RecipeVersionUncheckedCreateInputSchema]),
  update: import_zod.z.union([RecipeVersionUpdateInputSchema, RecipeVersionUncheckedUpdateInputSchema])
}).strict();
var RecipeVersionCreateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([RecipeVersionCreateManyInputSchema, RecipeVersionCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var RecipeVersionCreateManyAndReturnArgsSchema = import_zod.z.object({
  data: import_zod.z.union([RecipeVersionCreateManyInputSchema, RecipeVersionCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var RecipeVersionDeleteArgsSchema = import_zod.z.object({
  select: RecipeVersionSelectSchema.optional(),
  include: RecipeVersionIncludeSchema.optional(),
  where: RecipeVersionWhereUniqueInputSchema
}).strict();
var RecipeVersionUpdateArgsSchema = import_zod.z.object({
  select: RecipeVersionSelectSchema.optional(),
  include: RecipeVersionIncludeSchema.optional(),
  data: import_zod.z.union([RecipeVersionUpdateInputSchema, RecipeVersionUncheckedUpdateInputSchema]),
  where: RecipeVersionWhereUniqueInputSchema
}).strict();
var RecipeVersionUpdateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([RecipeVersionUpdateManyMutationInputSchema, RecipeVersionUncheckedUpdateManyInputSchema]),
  where: RecipeVersionWhereInputSchema.optional()
}).strict();
var RecipeVersionDeleteManyArgsSchema = import_zod.z.object({
  where: RecipeVersionWhereInputSchema.optional()
}).strict();
var EquipmentCreateArgsSchema = import_zod.z.object({
  select: EquipmentSelectSchema.optional(),
  include: EquipmentIncludeSchema.optional(),
  data: import_zod.z.union([EquipmentCreateInputSchema, EquipmentUncheckedCreateInputSchema])
}).strict();
var EquipmentUpsertArgsSchema = import_zod.z.object({
  select: EquipmentSelectSchema.optional(),
  include: EquipmentIncludeSchema.optional(),
  where: EquipmentWhereUniqueInputSchema,
  create: import_zod.z.union([EquipmentCreateInputSchema, EquipmentUncheckedCreateInputSchema]),
  update: import_zod.z.union([EquipmentUpdateInputSchema, EquipmentUncheckedUpdateInputSchema])
}).strict();
var EquipmentCreateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([EquipmentCreateManyInputSchema, EquipmentCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var EquipmentCreateManyAndReturnArgsSchema = import_zod.z.object({
  data: import_zod.z.union([EquipmentCreateManyInputSchema, EquipmentCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var EquipmentDeleteArgsSchema = import_zod.z.object({
  select: EquipmentSelectSchema.optional(),
  include: EquipmentIncludeSchema.optional(),
  where: EquipmentWhereUniqueInputSchema
}).strict();
var EquipmentUpdateArgsSchema = import_zod.z.object({
  select: EquipmentSelectSchema.optional(),
  include: EquipmentIncludeSchema.optional(),
  data: import_zod.z.union([EquipmentUpdateInputSchema, EquipmentUncheckedUpdateInputSchema]),
  where: EquipmentWhereUniqueInputSchema
}).strict();
var EquipmentUpdateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([EquipmentUpdateManyMutationInputSchema, EquipmentUncheckedUpdateManyInputSchema]),
  where: EquipmentWhereInputSchema.optional()
}).strict();
var EquipmentDeleteManyArgsSchema = import_zod.z.object({
  where: EquipmentWhereInputSchema.optional()
}).strict();
var RecipeEquipmentCreateArgsSchema = import_zod.z.object({
  select: RecipeEquipmentSelectSchema.optional(),
  include: RecipeEquipmentIncludeSchema.optional(),
  data: import_zod.z.union([RecipeEquipmentCreateInputSchema, RecipeEquipmentUncheckedCreateInputSchema])
}).strict();
var RecipeEquipmentUpsertArgsSchema = import_zod.z.object({
  select: RecipeEquipmentSelectSchema.optional(),
  include: RecipeEquipmentIncludeSchema.optional(),
  where: RecipeEquipmentWhereUniqueInputSchema,
  create: import_zod.z.union([RecipeEquipmentCreateInputSchema, RecipeEquipmentUncheckedCreateInputSchema]),
  update: import_zod.z.union([RecipeEquipmentUpdateInputSchema, RecipeEquipmentUncheckedUpdateInputSchema])
}).strict();
var RecipeEquipmentCreateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([RecipeEquipmentCreateManyInputSchema, RecipeEquipmentCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var RecipeEquipmentCreateManyAndReturnArgsSchema = import_zod.z.object({
  data: import_zod.z.union([RecipeEquipmentCreateManyInputSchema, RecipeEquipmentCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var RecipeEquipmentDeleteArgsSchema = import_zod.z.object({
  select: RecipeEquipmentSelectSchema.optional(),
  include: RecipeEquipmentIncludeSchema.optional(),
  where: RecipeEquipmentWhereUniqueInputSchema
}).strict();
var RecipeEquipmentUpdateArgsSchema = import_zod.z.object({
  select: RecipeEquipmentSelectSchema.optional(),
  include: RecipeEquipmentIncludeSchema.optional(),
  data: import_zod.z.union([RecipeEquipmentUpdateInputSchema, RecipeEquipmentUncheckedUpdateInputSchema]),
  where: RecipeEquipmentWhereUniqueInputSchema
}).strict();
var RecipeEquipmentUpdateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([RecipeEquipmentUpdateManyMutationInputSchema, RecipeEquipmentUncheckedUpdateManyInputSchema]),
  where: RecipeEquipmentWhereInputSchema.optional()
}).strict();
var RecipeEquipmentDeleteManyArgsSchema = import_zod.z.object({
  where: RecipeEquipmentWhereInputSchema.optional()
}).strict();
var MaintenanceLogCreateArgsSchema = import_zod.z.object({
  select: MaintenanceLogSelectSchema.optional(),
  include: MaintenanceLogIncludeSchema.optional(),
  data: import_zod.z.union([MaintenanceLogCreateInputSchema, MaintenanceLogUncheckedCreateInputSchema])
}).strict();
var MaintenanceLogUpsertArgsSchema = import_zod.z.object({
  select: MaintenanceLogSelectSchema.optional(),
  include: MaintenanceLogIncludeSchema.optional(),
  where: MaintenanceLogWhereUniqueInputSchema,
  create: import_zod.z.union([MaintenanceLogCreateInputSchema, MaintenanceLogUncheckedCreateInputSchema]),
  update: import_zod.z.union([MaintenanceLogUpdateInputSchema, MaintenanceLogUncheckedUpdateInputSchema])
}).strict();
var MaintenanceLogCreateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([MaintenanceLogCreateManyInputSchema, MaintenanceLogCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var MaintenanceLogCreateManyAndReturnArgsSchema = import_zod.z.object({
  data: import_zod.z.union([MaintenanceLogCreateManyInputSchema, MaintenanceLogCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var MaintenanceLogDeleteArgsSchema = import_zod.z.object({
  select: MaintenanceLogSelectSchema.optional(),
  include: MaintenanceLogIncludeSchema.optional(),
  where: MaintenanceLogWhereUniqueInputSchema
}).strict();
var MaintenanceLogUpdateArgsSchema = import_zod.z.object({
  select: MaintenanceLogSelectSchema.optional(),
  include: MaintenanceLogIncludeSchema.optional(),
  data: import_zod.z.union([MaintenanceLogUpdateInputSchema, MaintenanceLogUncheckedUpdateInputSchema]),
  where: MaintenanceLogWhereUniqueInputSchema
}).strict();
var MaintenanceLogUpdateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([MaintenanceLogUpdateManyMutationInputSchema, MaintenanceLogUncheckedUpdateManyInputSchema]),
  where: MaintenanceLogWhereInputSchema.optional()
}).strict();
var MaintenanceLogDeleteManyArgsSchema = import_zod.z.object({
  where: MaintenanceLogWhereInputSchema.optional()
}).strict();
var QualityChecklistCreateArgsSchema = import_zod.z.object({
  select: QualityChecklistSelectSchema.optional(),
  include: QualityChecklistIncludeSchema.optional(),
  data: import_zod.z.union([QualityChecklistCreateInputSchema, QualityChecklistUncheckedCreateInputSchema])
}).strict();
var QualityChecklistUpsertArgsSchema = import_zod.z.object({
  select: QualityChecklistSelectSchema.optional(),
  include: QualityChecklistIncludeSchema.optional(),
  where: QualityChecklistWhereUniqueInputSchema,
  create: import_zod.z.union([QualityChecklistCreateInputSchema, QualityChecklistUncheckedCreateInputSchema]),
  update: import_zod.z.union([QualityChecklistUpdateInputSchema, QualityChecklistUncheckedUpdateInputSchema])
}).strict();
var QualityChecklistCreateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([QualityChecklistCreateManyInputSchema, QualityChecklistCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var QualityChecklistCreateManyAndReturnArgsSchema = import_zod.z.object({
  data: import_zod.z.union([QualityChecklistCreateManyInputSchema, QualityChecklistCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var QualityChecklistDeleteArgsSchema = import_zod.z.object({
  select: QualityChecklistSelectSchema.optional(),
  include: QualityChecklistIncludeSchema.optional(),
  where: QualityChecklistWhereUniqueInputSchema
}).strict();
var QualityChecklistUpdateArgsSchema = import_zod.z.object({
  select: QualityChecklistSelectSchema.optional(),
  include: QualityChecklistIncludeSchema.optional(),
  data: import_zod.z.union([QualityChecklistUpdateInputSchema, QualityChecklistUncheckedUpdateInputSchema]),
  where: QualityChecklistWhereUniqueInputSchema
}).strict();
var QualityChecklistUpdateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([QualityChecklistUpdateManyMutationInputSchema, QualityChecklistUncheckedUpdateManyInputSchema]),
  where: QualityChecklistWhereInputSchema.optional()
}).strict();
var QualityChecklistDeleteManyArgsSchema = import_zod.z.object({
  where: QualityChecklistWhereInputSchema.optional()
}).strict();
var ChecklistItemCreateArgsSchema = import_zod.z.object({
  select: ChecklistItemSelectSchema.optional(),
  include: ChecklistItemIncludeSchema.optional(),
  data: import_zod.z.union([ChecklistItemCreateInputSchema, ChecklistItemUncheckedCreateInputSchema])
}).strict();
var ChecklistItemUpsertArgsSchema = import_zod.z.object({
  select: ChecklistItemSelectSchema.optional(),
  include: ChecklistItemIncludeSchema.optional(),
  where: ChecklistItemWhereUniqueInputSchema,
  create: import_zod.z.union([ChecklistItemCreateInputSchema, ChecklistItemUncheckedCreateInputSchema]),
  update: import_zod.z.union([ChecklistItemUpdateInputSchema, ChecklistItemUncheckedUpdateInputSchema])
}).strict();
var ChecklistItemCreateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([ChecklistItemCreateManyInputSchema, ChecklistItemCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var ChecklistItemCreateManyAndReturnArgsSchema = import_zod.z.object({
  data: import_zod.z.union([ChecklistItemCreateManyInputSchema, ChecklistItemCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var ChecklistItemDeleteArgsSchema = import_zod.z.object({
  select: ChecklistItemSelectSchema.optional(),
  include: ChecklistItemIncludeSchema.optional(),
  where: ChecklistItemWhereUniqueInputSchema
}).strict();
var ChecklistItemUpdateArgsSchema = import_zod.z.object({
  select: ChecklistItemSelectSchema.optional(),
  include: ChecklistItemIncludeSchema.optional(),
  data: import_zod.z.union([ChecklistItemUpdateInputSchema, ChecklistItemUncheckedUpdateInputSchema]),
  where: ChecklistItemWhereUniqueInputSchema
}).strict();
var ChecklistItemUpdateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([ChecklistItemUpdateManyMutationInputSchema, ChecklistItemUncheckedUpdateManyInputSchema]),
  where: ChecklistItemWhereInputSchema.optional()
}).strict();
var ChecklistItemDeleteManyArgsSchema = import_zod.z.object({
  where: ChecklistItemWhereInputSchema.optional()
}).strict();
var ChecklistCompleteCreateArgsSchema = import_zod.z.object({
  select: ChecklistCompleteSelectSchema.optional(),
  include: ChecklistCompleteIncludeSchema.optional(),
  data: import_zod.z.union([ChecklistCompleteCreateInputSchema, ChecklistCompleteUncheckedCreateInputSchema])
}).strict();
var ChecklistCompleteUpsertArgsSchema = import_zod.z.object({
  select: ChecklistCompleteSelectSchema.optional(),
  include: ChecklistCompleteIncludeSchema.optional(),
  where: ChecklistCompleteWhereUniqueInputSchema,
  create: import_zod.z.union([ChecklistCompleteCreateInputSchema, ChecklistCompleteUncheckedCreateInputSchema]),
  update: import_zod.z.union([ChecklistCompleteUpdateInputSchema, ChecklistCompleteUncheckedUpdateInputSchema])
}).strict();
var ChecklistCompleteCreateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([ChecklistCompleteCreateManyInputSchema, ChecklistCompleteCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var ChecklistCompleteCreateManyAndReturnArgsSchema = import_zod.z.object({
  data: import_zod.z.union([ChecklistCompleteCreateManyInputSchema, ChecklistCompleteCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var ChecklistCompleteDeleteArgsSchema = import_zod.z.object({
  select: ChecklistCompleteSelectSchema.optional(),
  include: ChecklistCompleteIncludeSchema.optional(),
  where: ChecklistCompleteWhereUniqueInputSchema
}).strict();
var ChecklistCompleteUpdateArgsSchema = import_zod.z.object({
  select: ChecklistCompleteSelectSchema.optional(),
  include: ChecklistCompleteIncludeSchema.optional(),
  data: import_zod.z.union([ChecklistCompleteUpdateInputSchema, ChecklistCompleteUncheckedUpdateInputSchema]),
  where: ChecklistCompleteWhereUniqueInputSchema
}).strict();
var ChecklistCompleteUpdateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([ChecklistCompleteUpdateManyMutationInputSchema, ChecklistCompleteUncheckedUpdateManyInputSchema]),
  where: ChecklistCompleteWhereInputSchema.optional()
}).strict();
var ChecklistCompleteDeleteManyArgsSchema = import_zod.z.object({
  where: ChecklistCompleteWhereInputSchema.optional()
}).strict();
var ChecklistItemCompleteCreateArgsSchema = import_zod.z.object({
  select: ChecklistItemCompleteSelectSchema.optional(),
  include: ChecklistItemCompleteIncludeSchema.optional(),
  data: import_zod.z.union([ChecklistItemCompleteCreateInputSchema, ChecklistItemCompleteUncheckedCreateInputSchema])
}).strict();
var ChecklistItemCompleteUpsertArgsSchema = import_zod.z.object({
  select: ChecklistItemCompleteSelectSchema.optional(),
  include: ChecklistItemCompleteIncludeSchema.optional(),
  where: ChecklistItemCompleteWhereUniqueInputSchema,
  create: import_zod.z.union([ChecklistItemCompleteCreateInputSchema, ChecklistItemCompleteUncheckedCreateInputSchema]),
  update: import_zod.z.union([ChecklistItemCompleteUpdateInputSchema, ChecklistItemCompleteUncheckedUpdateInputSchema])
}).strict();
var ChecklistItemCompleteCreateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([ChecklistItemCompleteCreateManyInputSchema, ChecklistItemCompleteCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var ChecklistItemCompleteCreateManyAndReturnArgsSchema = import_zod.z.object({
  data: import_zod.z.union([ChecklistItemCompleteCreateManyInputSchema, ChecklistItemCompleteCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var ChecklistItemCompleteDeleteArgsSchema = import_zod.z.object({
  select: ChecklistItemCompleteSelectSchema.optional(),
  include: ChecklistItemCompleteIncludeSchema.optional(),
  where: ChecklistItemCompleteWhereUniqueInputSchema
}).strict();
var ChecklistItemCompleteUpdateArgsSchema = import_zod.z.object({
  select: ChecklistItemCompleteSelectSchema.optional(),
  include: ChecklistItemCompleteIncludeSchema.optional(),
  data: import_zod.z.union([ChecklistItemCompleteUpdateInputSchema, ChecklistItemCompleteUncheckedUpdateInputSchema]),
  where: ChecklistItemCompleteWhereUniqueInputSchema
}).strict();
var ChecklistItemCompleteUpdateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([ChecklistItemCompleteUpdateManyMutationInputSchema, ChecklistItemCompleteUncheckedUpdateManyInputSchema]),
  where: ChecklistItemCompleteWhereInputSchema.optional()
}).strict();
var ChecklistItemCompleteDeleteManyArgsSchema = import_zod.z.object({
  where: ChecklistItemCompleteWhereInputSchema.optional()
}).strict();
var SupplierPriceHistoryCreateArgsSchema = import_zod.z.object({
  select: SupplierPriceHistorySelectSchema.optional(),
  include: SupplierPriceHistoryIncludeSchema.optional(),
  data: import_zod.z.union([SupplierPriceHistoryCreateInputSchema, SupplierPriceHistoryUncheckedCreateInputSchema])
}).strict();
var SupplierPriceHistoryUpsertArgsSchema = import_zod.z.object({
  select: SupplierPriceHistorySelectSchema.optional(),
  include: SupplierPriceHistoryIncludeSchema.optional(),
  where: SupplierPriceHistoryWhereUniqueInputSchema,
  create: import_zod.z.union([SupplierPriceHistoryCreateInputSchema, SupplierPriceHistoryUncheckedCreateInputSchema]),
  update: import_zod.z.union([SupplierPriceHistoryUpdateInputSchema, SupplierPriceHistoryUncheckedUpdateInputSchema])
}).strict();
var SupplierPriceHistoryCreateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([SupplierPriceHistoryCreateManyInputSchema, SupplierPriceHistoryCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var SupplierPriceHistoryCreateManyAndReturnArgsSchema = import_zod.z.object({
  data: import_zod.z.union([SupplierPriceHistoryCreateManyInputSchema, SupplierPriceHistoryCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var SupplierPriceHistoryDeleteArgsSchema = import_zod.z.object({
  select: SupplierPriceHistorySelectSchema.optional(),
  include: SupplierPriceHistoryIncludeSchema.optional(),
  where: SupplierPriceHistoryWhereUniqueInputSchema
}).strict();
var SupplierPriceHistoryUpdateArgsSchema = import_zod.z.object({
  select: SupplierPriceHistorySelectSchema.optional(),
  include: SupplierPriceHistoryIncludeSchema.optional(),
  data: import_zod.z.union([SupplierPriceHistoryUpdateInputSchema, SupplierPriceHistoryUncheckedUpdateInputSchema]),
  where: SupplierPriceHistoryWhereUniqueInputSchema
}).strict();
var SupplierPriceHistoryUpdateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([SupplierPriceHistoryUpdateManyMutationInputSchema, SupplierPriceHistoryUncheckedUpdateManyInputSchema]),
  where: SupplierPriceHistoryWhereInputSchema.optional()
}).strict();
var SupplierPriceHistoryDeleteManyArgsSchema = import_zod.z.object({
  where: SupplierPriceHistoryWhereInputSchema.optional()
}).strict();
var CustomerFeedbackCreateArgsSchema = import_zod.z.object({
  select: CustomerFeedbackSelectSchema.optional(),
  include: CustomerFeedbackIncludeSchema.optional(),
  data: import_zod.z.union([CustomerFeedbackCreateInputSchema, CustomerFeedbackUncheckedCreateInputSchema])
}).strict();
var CustomerFeedbackUpsertArgsSchema = import_zod.z.object({
  select: CustomerFeedbackSelectSchema.optional(),
  include: CustomerFeedbackIncludeSchema.optional(),
  where: CustomerFeedbackWhereUniqueInputSchema,
  create: import_zod.z.union([CustomerFeedbackCreateInputSchema, CustomerFeedbackUncheckedCreateInputSchema]),
  update: import_zod.z.union([CustomerFeedbackUpdateInputSchema, CustomerFeedbackUncheckedUpdateInputSchema])
}).strict();
var CustomerFeedbackCreateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([CustomerFeedbackCreateManyInputSchema, CustomerFeedbackCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var CustomerFeedbackCreateManyAndReturnArgsSchema = import_zod.z.object({
  data: import_zod.z.union([CustomerFeedbackCreateManyInputSchema, CustomerFeedbackCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var CustomerFeedbackDeleteArgsSchema = import_zod.z.object({
  select: CustomerFeedbackSelectSchema.optional(),
  include: CustomerFeedbackIncludeSchema.optional(),
  where: CustomerFeedbackWhereUniqueInputSchema
}).strict();
var CustomerFeedbackUpdateArgsSchema = import_zod.z.object({
  select: CustomerFeedbackSelectSchema.optional(),
  include: CustomerFeedbackIncludeSchema.optional(),
  data: import_zod.z.union([CustomerFeedbackUpdateInputSchema, CustomerFeedbackUncheckedUpdateInputSchema]),
  where: CustomerFeedbackWhereUniqueInputSchema
}).strict();
var CustomerFeedbackUpdateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([CustomerFeedbackUpdateManyMutationInputSchema, CustomerFeedbackUncheckedUpdateManyInputSchema]),
  where: CustomerFeedbackWhereInputSchema.optional()
}).strict();
var CustomerFeedbackDeleteManyArgsSchema = import_zod.z.object({
  where: CustomerFeedbackWhereInputSchema.optional()
}).strict();
var DietaryRestrictionCreateArgsSchema = import_zod.z.object({
  select: DietaryRestrictionSelectSchema.optional(),
  include: DietaryRestrictionIncludeSchema.optional(),
  data: import_zod.z.union([DietaryRestrictionCreateInputSchema, DietaryRestrictionUncheckedCreateInputSchema])
}).strict();
var DietaryRestrictionUpsertArgsSchema = import_zod.z.object({
  select: DietaryRestrictionSelectSchema.optional(),
  include: DietaryRestrictionIncludeSchema.optional(),
  where: DietaryRestrictionWhereUniqueInputSchema,
  create: import_zod.z.union([DietaryRestrictionCreateInputSchema, DietaryRestrictionUncheckedCreateInputSchema]),
  update: import_zod.z.union([DietaryRestrictionUpdateInputSchema, DietaryRestrictionUncheckedUpdateInputSchema])
}).strict();
var DietaryRestrictionCreateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([DietaryRestrictionCreateManyInputSchema, DietaryRestrictionCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var DietaryRestrictionCreateManyAndReturnArgsSchema = import_zod.z.object({
  data: import_zod.z.union([DietaryRestrictionCreateManyInputSchema, DietaryRestrictionCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var DietaryRestrictionDeleteArgsSchema = import_zod.z.object({
  select: DietaryRestrictionSelectSchema.optional(),
  include: DietaryRestrictionIncludeSchema.optional(),
  where: DietaryRestrictionWhereUniqueInputSchema
}).strict();
var DietaryRestrictionUpdateArgsSchema = import_zod.z.object({
  select: DietaryRestrictionSelectSchema.optional(),
  include: DietaryRestrictionIncludeSchema.optional(),
  data: import_zod.z.union([DietaryRestrictionUpdateInputSchema, DietaryRestrictionUncheckedUpdateInputSchema]),
  where: DietaryRestrictionWhereUniqueInputSchema
}).strict();
var DietaryRestrictionUpdateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([DietaryRestrictionUpdateManyMutationInputSchema, DietaryRestrictionUncheckedUpdateManyInputSchema]),
  where: DietaryRestrictionWhereInputSchema.optional()
}).strict();
var DietaryRestrictionDeleteManyArgsSchema = import_zod.z.object({
  where: DietaryRestrictionWhereInputSchema.optional()
}).strict();
var RecipeTagCreateArgsSchema = import_zod.z.object({
  select: RecipeTagSelectSchema.optional(),
  include: RecipeTagIncludeSchema.optional(),
  data: import_zod.z.union([RecipeTagCreateInputSchema, RecipeTagUncheckedCreateInputSchema])
}).strict();
var RecipeTagUpsertArgsSchema = import_zod.z.object({
  select: RecipeTagSelectSchema.optional(),
  include: RecipeTagIncludeSchema.optional(),
  where: RecipeTagWhereUniqueInputSchema,
  create: import_zod.z.union([RecipeTagCreateInputSchema, RecipeTagUncheckedCreateInputSchema]),
  update: import_zod.z.union([RecipeTagUpdateInputSchema, RecipeTagUncheckedUpdateInputSchema])
}).strict();
var RecipeTagCreateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([RecipeTagCreateManyInputSchema, RecipeTagCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var RecipeTagCreateManyAndReturnArgsSchema = import_zod.z.object({
  data: import_zod.z.union([RecipeTagCreateManyInputSchema, RecipeTagCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var RecipeTagDeleteArgsSchema = import_zod.z.object({
  select: RecipeTagSelectSchema.optional(),
  include: RecipeTagIncludeSchema.optional(),
  where: RecipeTagWhereUniqueInputSchema
}).strict();
var RecipeTagUpdateArgsSchema = import_zod.z.object({
  select: RecipeTagSelectSchema.optional(),
  include: RecipeTagIncludeSchema.optional(),
  data: import_zod.z.union([RecipeTagUpdateInputSchema, RecipeTagUncheckedUpdateInputSchema]),
  where: RecipeTagWhereUniqueInputSchema
}).strict();
var RecipeTagUpdateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([RecipeTagUpdateManyMutationInputSchema, RecipeTagUncheckedUpdateManyInputSchema]),
  where: RecipeTagWhereInputSchema.optional()
}).strict();
var RecipeTagDeleteManyArgsSchema = import_zod.z.object({
  where: RecipeTagWhereInputSchema.optional()
}).strict();
var LeftoverItemCreateArgsSchema = import_zod.z.object({
  select: LeftoverItemSelectSchema.optional(),
  include: LeftoverItemIncludeSchema.optional(),
  data: import_zod.z.union([LeftoverItemCreateInputSchema, LeftoverItemUncheckedCreateInputSchema])
}).strict();
var LeftoverItemUpsertArgsSchema = import_zod.z.object({
  select: LeftoverItemSelectSchema.optional(),
  include: LeftoverItemIncludeSchema.optional(),
  where: LeftoverItemWhereUniqueInputSchema,
  create: import_zod.z.union([LeftoverItemCreateInputSchema, LeftoverItemUncheckedCreateInputSchema]),
  update: import_zod.z.union([LeftoverItemUpdateInputSchema, LeftoverItemUncheckedUpdateInputSchema])
}).strict();
var LeftoverItemCreateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([LeftoverItemCreateManyInputSchema, LeftoverItemCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var LeftoverItemCreateManyAndReturnArgsSchema = import_zod.z.object({
  data: import_zod.z.union([LeftoverItemCreateManyInputSchema, LeftoverItemCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var LeftoverItemDeleteArgsSchema = import_zod.z.object({
  select: LeftoverItemSelectSchema.optional(),
  include: LeftoverItemIncludeSchema.optional(),
  where: LeftoverItemWhereUniqueInputSchema
}).strict();
var LeftoverItemUpdateArgsSchema = import_zod.z.object({
  select: LeftoverItemSelectSchema.optional(),
  include: LeftoverItemIncludeSchema.optional(),
  data: import_zod.z.union([LeftoverItemUpdateInputSchema, LeftoverItemUncheckedUpdateInputSchema]),
  where: LeftoverItemWhereUniqueInputSchema
}).strict();
var LeftoverItemUpdateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([LeftoverItemUpdateManyMutationInputSchema, LeftoverItemUncheckedUpdateManyInputSchema]),
  where: LeftoverItemWhereInputSchema.optional()
}).strict();
var LeftoverItemDeleteManyArgsSchema = import_zod.z.object({
  where: LeftoverItemWhereInputSchema.optional()
}).strict();
var WasteRecordCreateArgsSchema = import_zod.z.object({
  select: WasteRecordSelectSchema.optional(),
  include: WasteRecordIncludeSchema.optional(),
  data: import_zod.z.union([WasteRecordCreateInputSchema, WasteRecordUncheckedCreateInputSchema])
}).strict();
var WasteRecordUpsertArgsSchema = import_zod.z.object({
  select: WasteRecordSelectSchema.optional(),
  include: WasteRecordIncludeSchema.optional(),
  where: WasteRecordWhereUniqueInputSchema,
  create: import_zod.z.union([WasteRecordCreateInputSchema, WasteRecordUncheckedCreateInputSchema]),
  update: import_zod.z.union([WasteRecordUpdateInputSchema, WasteRecordUncheckedUpdateInputSchema])
}).strict();
var WasteRecordCreateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([WasteRecordCreateManyInputSchema, WasteRecordCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var WasteRecordCreateManyAndReturnArgsSchema = import_zod.z.object({
  data: import_zod.z.union([WasteRecordCreateManyInputSchema, WasteRecordCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var WasteRecordDeleteArgsSchema = import_zod.z.object({
  select: WasteRecordSelectSchema.optional(),
  include: WasteRecordIncludeSchema.optional(),
  where: WasteRecordWhereUniqueInputSchema
}).strict();
var WasteRecordUpdateArgsSchema = import_zod.z.object({
  select: WasteRecordSelectSchema.optional(),
  include: WasteRecordIncludeSchema.optional(),
  data: import_zod.z.union([WasteRecordUpdateInputSchema, WasteRecordUncheckedUpdateInputSchema]),
  where: WasteRecordWhereUniqueInputSchema
}).strict();
var WasteRecordUpdateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([WasteRecordUpdateManyMutationInputSchema, WasteRecordUncheckedUpdateManyInputSchema]),
  where: WasteRecordWhereInputSchema.optional()
}).strict();
var WasteRecordDeleteManyArgsSchema = import_zod.z.object({
  where: WasteRecordWhereInputSchema.optional()
}).strict();
var ProductionPlanCreateArgsSchema = import_zod.z.object({
  select: ProductionPlanSelectSchema.optional(),
  include: ProductionPlanIncludeSchema.optional(),
  data: import_zod.z.union([ProductionPlanCreateInputSchema, ProductionPlanUncheckedCreateInputSchema])
}).strict();
var ProductionPlanUpsertArgsSchema = import_zod.z.object({
  select: ProductionPlanSelectSchema.optional(),
  include: ProductionPlanIncludeSchema.optional(),
  where: ProductionPlanWhereUniqueInputSchema,
  create: import_zod.z.union([ProductionPlanCreateInputSchema, ProductionPlanUncheckedCreateInputSchema]),
  update: import_zod.z.union([ProductionPlanUpdateInputSchema, ProductionPlanUncheckedUpdateInputSchema])
}).strict();
var ProductionPlanCreateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([ProductionPlanCreateManyInputSchema, ProductionPlanCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var ProductionPlanCreateManyAndReturnArgsSchema = import_zod.z.object({
  data: import_zod.z.union([ProductionPlanCreateManyInputSchema, ProductionPlanCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var ProductionPlanDeleteArgsSchema = import_zod.z.object({
  select: ProductionPlanSelectSchema.optional(),
  include: ProductionPlanIncludeSchema.optional(),
  where: ProductionPlanWhereUniqueInputSchema
}).strict();
var ProductionPlanUpdateArgsSchema = import_zod.z.object({
  select: ProductionPlanSelectSchema.optional(),
  include: ProductionPlanIncludeSchema.optional(),
  data: import_zod.z.union([ProductionPlanUpdateInputSchema, ProductionPlanUncheckedUpdateInputSchema]),
  where: ProductionPlanWhereUniqueInputSchema
}).strict();
var ProductionPlanUpdateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([ProductionPlanUpdateManyMutationInputSchema, ProductionPlanUncheckedUpdateManyInputSchema]),
  where: ProductionPlanWhereInputSchema.optional()
}).strict();
var ProductionPlanDeleteManyArgsSchema = import_zod.z.object({
  where: ProductionPlanWhereInputSchema.optional()
}).strict();
var ProductionPlanItemCreateArgsSchema = import_zod.z.object({
  select: ProductionPlanItemSelectSchema.optional(),
  include: ProductionPlanItemIncludeSchema.optional(),
  data: import_zod.z.union([ProductionPlanItemCreateInputSchema, ProductionPlanItemUncheckedCreateInputSchema])
}).strict();
var ProductionPlanItemUpsertArgsSchema = import_zod.z.object({
  select: ProductionPlanItemSelectSchema.optional(),
  include: ProductionPlanItemIncludeSchema.optional(),
  where: ProductionPlanItemWhereUniqueInputSchema,
  create: import_zod.z.union([ProductionPlanItemCreateInputSchema, ProductionPlanItemUncheckedCreateInputSchema]),
  update: import_zod.z.union([ProductionPlanItemUpdateInputSchema, ProductionPlanItemUncheckedUpdateInputSchema])
}).strict();
var ProductionPlanItemCreateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([ProductionPlanItemCreateManyInputSchema, ProductionPlanItemCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var ProductionPlanItemCreateManyAndReturnArgsSchema = import_zod.z.object({
  data: import_zod.z.union([ProductionPlanItemCreateManyInputSchema, ProductionPlanItemCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var ProductionPlanItemDeleteArgsSchema = import_zod.z.object({
  select: ProductionPlanItemSelectSchema.optional(),
  include: ProductionPlanItemIncludeSchema.optional(),
  where: ProductionPlanItemWhereUniqueInputSchema
}).strict();
var ProductionPlanItemUpdateArgsSchema = import_zod.z.object({
  select: ProductionPlanItemSelectSchema.optional(),
  include: ProductionPlanItemIncludeSchema.optional(),
  data: import_zod.z.union([ProductionPlanItemUpdateInputSchema, ProductionPlanItemUncheckedUpdateInputSchema]),
  where: ProductionPlanItemWhereUniqueInputSchema
}).strict();
var ProductionPlanItemUpdateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([ProductionPlanItemUpdateManyMutationInputSchema, ProductionPlanItemUncheckedUpdateManyInputSchema]),
  where: ProductionPlanItemWhereInputSchema.optional()
}).strict();
var ProductionPlanItemDeleteManyArgsSchema = import_zod.z.object({
  where: ProductionPlanItemWhereInputSchema.optional()
}).strict();
var ShiftTaskCreateArgsSchema = import_zod.z.object({
  select: ShiftTaskSelectSchema.optional(),
  include: ShiftTaskIncludeSchema.optional(),
  data: import_zod.z.union([ShiftTaskCreateInputSchema, ShiftTaskUncheckedCreateInputSchema])
}).strict();
var ShiftTaskUpsertArgsSchema = import_zod.z.object({
  select: ShiftTaskSelectSchema.optional(),
  include: ShiftTaskIncludeSchema.optional(),
  where: ShiftTaskWhereUniqueInputSchema,
  create: import_zod.z.union([ShiftTaskCreateInputSchema, ShiftTaskUncheckedCreateInputSchema]),
  update: import_zod.z.union([ShiftTaskUpdateInputSchema, ShiftTaskUncheckedUpdateInputSchema])
}).strict();
var ShiftTaskCreateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([ShiftTaskCreateManyInputSchema, ShiftTaskCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var ShiftTaskCreateManyAndReturnArgsSchema = import_zod.z.object({
  data: import_zod.z.union([ShiftTaskCreateManyInputSchema, ShiftTaskCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var ShiftTaskDeleteArgsSchema = import_zod.z.object({
  select: ShiftTaskSelectSchema.optional(),
  include: ShiftTaskIncludeSchema.optional(),
  where: ShiftTaskWhereUniqueInputSchema
}).strict();
var ShiftTaskUpdateArgsSchema = import_zod.z.object({
  select: ShiftTaskSelectSchema.optional(),
  include: ShiftTaskIncludeSchema.optional(),
  data: import_zod.z.union([ShiftTaskUpdateInputSchema, ShiftTaskUncheckedUpdateInputSchema]),
  where: ShiftTaskWhereUniqueInputSchema
}).strict();
var ShiftTaskUpdateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([ShiftTaskUpdateManyMutationInputSchema, ShiftTaskUncheckedUpdateManyInputSchema]),
  where: ShiftTaskWhereInputSchema.optional()
}).strict();
var ShiftTaskDeleteManyArgsSchema = import_zod.z.object({
  where: ShiftTaskWhereInputSchema.optional()
}).strict();
var AvailabilityCreateArgsSchema = import_zod.z.object({
  select: AvailabilitySelectSchema.optional(),
  include: AvailabilityIncludeSchema.optional(),
  data: import_zod.z.union([AvailabilityCreateInputSchema, AvailabilityUncheckedCreateInputSchema])
}).strict();
var AvailabilityUpsertArgsSchema = import_zod.z.object({
  select: AvailabilitySelectSchema.optional(),
  include: AvailabilityIncludeSchema.optional(),
  where: AvailabilityWhereUniqueInputSchema,
  create: import_zod.z.union([AvailabilityCreateInputSchema, AvailabilityUncheckedCreateInputSchema]),
  update: import_zod.z.union([AvailabilityUpdateInputSchema, AvailabilityUncheckedUpdateInputSchema])
}).strict();
var AvailabilityCreateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([AvailabilityCreateManyInputSchema, AvailabilityCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var AvailabilityCreateManyAndReturnArgsSchema = import_zod.z.object({
  data: import_zod.z.union([AvailabilityCreateManyInputSchema, AvailabilityCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var AvailabilityDeleteArgsSchema = import_zod.z.object({
  select: AvailabilitySelectSchema.optional(),
  include: AvailabilityIncludeSchema.optional(),
  where: AvailabilityWhereUniqueInputSchema
}).strict();
var AvailabilityUpdateArgsSchema = import_zod.z.object({
  select: AvailabilitySelectSchema.optional(),
  include: AvailabilityIncludeSchema.optional(),
  data: import_zod.z.union([AvailabilityUpdateInputSchema, AvailabilityUncheckedUpdateInputSchema]),
  where: AvailabilityWhereUniqueInputSchema
}).strict();
var AvailabilityUpdateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([AvailabilityUpdateManyMutationInputSchema, AvailabilityUncheckedUpdateManyInputSchema]),
  where: AvailabilityWhereInputSchema.optional()
}).strict();
var AvailabilityDeleteManyArgsSchema = import_zod.z.object({
  where: AvailabilityWhereInputSchema.optional()
}).strict();
var SchedulingConstraintCreateArgsSchema = import_zod.z.object({
  select: SchedulingConstraintSelectSchema.optional(),
  include: SchedulingConstraintIncludeSchema.optional(),
  data: import_zod.z.union([SchedulingConstraintCreateInputSchema, SchedulingConstraintUncheckedCreateInputSchema])
}).strict();
var SchedulingConstraintUpsertArgsSchema = import_zod.z.object({
  select: SchedulingConstraintSelectSchema.optional(),
  include: SchedulingConstraintIncludeSchema.optional(),
  where: SchedulingConstraintWhereUniqueInputSchema,
  create: import_zod.z.union([SchedulingConstraintCreateInputSchema, SchedulingConstraintUncheckedCreateInputSchema]),
  update: import_zod.z.union([SchedulingConstraintUpdateInputSchema, SchedulingConstraintUncheckedUpdateInputSchema])
}).strict();
var SchedulingConstraintCreateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([SchedulingConstraintCreateManyInputSchema, SchedulingConstraintCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var SchedulingConstraintCreateManyAndReturnArgsSchema = import_zod.z.object({
  data: import_zod.z.union([SchedulingConstraintCreateManyInputSchema, SchedulingConstraintCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var SchedulingConstraintDeleteArgsSchema = import_zod.z.object({
  select: SchedulingConstraintSelectSchema.optional(),
  include: SchedulingConstraintIncludeSchema.optional(),
  where: SchedulingConstraintWhereUniqueInputSchema
}).strict();
var SchedulingConstraintUpdateArgsSchema = import_zod.z.object({
  select: SchedulingConstraintSelectSchema.optional(),
  include: SchedulingConstraintIncludeSchema.optional(),
  data: import_zod.z.union([SchedulingConstraintUpdateInputSchema, SchedulingConstraintUncheckedUpdateInputSchema]),
  where: SchedulingConstraintWhereUniqueInputSchema
}).strict();
var SchedulingConstraintUpdateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([SchedulingConstraintUpdateManyMutationInputSchema, SchedulingConstraintUncheckedUpdateManyInputSchema]),
  where: SchedulingConstraintWhereInputSchema.optional()
}).strict();
var SchedulingConstraintDeleteManyArgsSchema = import_zod.z.object({
  where: SchedulingConstraintWhereInputSchema.optional()
}).strict();
var InventoryWithdrawalCreateArgsSchema = import_zod.z.object({
  select: InventoryWithdrawalSelectSchema.optional(),
  include: InventoryWithdrawalIncludeSchema.optional(),
  data: import_zod.z.union([InventoryWithdrawalCreateInputSchema, InventoryWithdrawalUncheckedCreateInputSchema])
}).strict();
var InventoryWithdrawalUpsertArgsSchema = import_zod.z.object({
  select: InventoryWithdrawalSelectSchema.optional(),
  include: InventoryWithdrawalIncludeSchema.optional(),
  where: InventoryWithdrawalWhereUniqueInputSchema,
  create: import_zod.z.union([InventoryWithdrawalCreateInputSchema, InventoryWithdrawalUncheckedCreateInputSchema]),
  update: import_zod.z.union([InventoryWithdrawalUpdateInputSchema, InventoryWithdrawalUncheckedUpdateInputSchema])
}).strict();
var InventoryWithdrawalCreateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([InventoryWithdrawalCreateManyInputSchema, InventoryWithdrawalCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var InventoryWithdrawalCreateManyAndReturnArgsSchema = import_zod.z.object({
  data: import_zod.z.union([InventoryWithdrawalCreateManyInputSchema, InventoryWithdrawalCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var InventoryWithdrawalDeleteArgsSchema = import_zod.z.object({
  select: InventoryWithdrawalSelectSchema.optional(),
  include: InventoryWithdrawalIncludeSchema.optional(),
  where: InventoryWithdrawalWhereUniqueInputSchema
}).strict();
var InventoryWithdrawalUpdateArgsSchema = import_zod.z.object({
  select: InventoryWithdrawalSelectSchema.optional(),
  include: InventoryWithdrawalIncludeSchema.optional(),
  data: import_zod.z.union([InventoryWithdrawalUpdateInputSchema, InventoryWithdrawalUncheckedUpdateInputSchema]),
  where: InventoryWithdrawalWhereUniqueInputSchema
}).strict();
var InventoryWithdrawalUpdateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([InventoryWithdrawalUpdateManyMutationInputSchema, InventoryWithdrawalUncheckedUpdateManyInputSchema]),
  where: InventoryWithdrawalWhereInputSchema.optional()
}).strict();
var InventoryWithdrawalDeleteManyArgsSchema = import_zod.z.object({
  where: InventoryWithdrawalWhereInputSchema.optional()
}).strict();
var AllergenCreateArgsSchema = import_zod.z.object({
  select: AllergenSelectSchema.optional(),
  include: AllergenIncludeSchema.optional(),
  data: import_zod.z.union([AllergenCreateInputSchema, AllergenUncheckedCreateInputSchema])
}).strict();
var AllergenUpsertArgsSchema = import_zod.z.object({
  select: AllergenSelectSchema.optional(),
  include: AllergenIncludeSchema.optional(),
  where: AllergenWhereUniqueInputSchema,
  create: import_zod.z.union([AllergenCreateInputSchema, AllergenUncheckedCreateInputSchema]),
  update: import_zod.z.union([AllergenUpdateInputSchema, AllergenUncheckedUpdateInputSchema])
}).strict();
var AllergenCreateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([AllergenCreateManyInputSchema, AllergenCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var AllergenCreateManyAndReturnArgsSchema = import_zod.z.object({
  data: import_zod.z.union([AllergenCreateManyInputSchema, AllergenCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var AllergenDeleteArgsSchema = import_zod.z.object({
  select: AllergenSelectSchema.optional(),
  include: AllergenIncludeSchema.optional(),
  where: AllergenWhereUniqueInputSchema
}).strict();
var AllergenUpdateArgsSchema = import_zod.z.object({
  select: AllergenSelectSchema.optional(),
  include: AllergenIncludeSchema.optional(),
  data: import_zod.z.union([AllergenUpdateInputSchema, AllergenUncheckedUpdateInputSchema]),
  where: AllergenWhereUniqueInputSchema
}).strict();
var AllergenUpdateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([AllergenUpdateManyMutationInputSchema, AllergenUncheckedUpdateManyInputSchema]),
  where: AllergenWhereInputSchema.optional()
}).strict();
var AllergenDeleteManyArgsSchema = import_zod.z.object({
  where: AllergenWhereInputSchema.optional()
}).strict();
var IngredientAllergenCreateArgsSchema = import_zod.z.object({
  select: IngredientAllergenSelectSchema.optional(),
  include: IngredientAllergenIncludeSchema.optional(),
  data: import_zod.z.union([IngredientAllergenCreateInputSchema, IngredientAllergenUncheckedCreateInputSchema])
}).strict();
var IngredientAllergenUpsertArgsSchema = import_zod.z.object({
  select: IngredientAllergenSelectSchema.optional(),
  include: IngredientAllergenIncludeSchema.optional(),
  where: IngredientAllergenWhereUniqueInputSchema,
  create: import_zod.z.union([IngredientAllergenCreateInputSchema, IngredientAllergenUncheckedCreateInputSchema]),
  update: import_zod.z.union([IngredientAllergenUpdateInputSchema, IngredientAllergenUncheckedUpdateInputSchema])
}).strict();
var IngredientAllergenCreateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([IngredientAllergenCreateManyInputSchema, IngredientAllergenCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var IngredientAllergenCreateManyAndReturnArgsSchema = import_zod.z.object({
  data: import_zod.z.union([IngredientAllergenCreateManyInputSchema, IngredientAllergenCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var IngredientAllergenDeleteArgsSchema = import_zod.z.object({
  select: IngredientAllergenSelectSchema.optional(),
  include: IngredientAllergenIncludeSchema.optional(),
  where: IngredientAllergenWhereUniqueInputSchema
}).strict();
var IngredientAllergenUpdateArgsSchema = import_zod.z.object({
  select: IngredientAllergenSelectSchema.optional(),
  include: IngredientAllergenIncludeSchema.optional(),
  data: import_zod.z.union([IngredientAllergenUpdateInputSchema, IngredientAllergenUncheckedUpdateInputSchema]),
  where: IngredientAllergenWhereUniqueInputSchema
}).strict();
var IngredientAllergenUpdateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([IngredientAllergenUpdateManyMutationInputSchema, IngredientAllergenUncheckedUpdateManyInputSchema]),
  where: IngredientAllergenWhereInputSchema.optional()
}).strict();
var IngredientAllergenDeleteManyArgsSchema = import_zod.z.object({
  where: IngredientAllergenWhereInputSchema.optional()
}).strict();
var NutritionalRecommendationCreateArgsSchema = import_zod.z.object({
  select: NutritionalRecommendationSelectSchema.optional(),
  include: NutritionalRecommendationIncludeSchema.optional(),
  data: import_zod.z.union([NutritionalRecommendationCreateInputSchema, NutritionalRecommendationUncheckedCreateInputSchema])
}).strict();
var NutritionalRecommendationUpsertArgsSchema = import_zod.z.object({
  select: NutritionalRecommendationSelectSchema.optional(),
  include: NutritionalRecommendationIncludeSchema.optional(),
  where: NutritionalRecommendationWhereUniqueInputSchema,
  create: import_zod.z.union([NutritionalRecommendationCreateInputSchema, NutritionalRecommendationUncheckedCreateInputSchema]),
  update: import_zod.z.union([NutritionalRecommendationUpdateInputSchema, NutritionalRecommendationUncheckedUpdateInputSchema])
}).strict();
var NutritionalRecommendationCreateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([NutritionalRecommendationCreateManyInputSchema, NutritionalRecommendationCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var NutritionalRecommendationCreateManyAndReturnArgsSchema = import_zod.z.object({
  data: import_zod.z.union([NutritionalRecommendationCreateManyInputSchema, NutritionalRecommendationCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var NutritionalRecommendationDeleteArgsSchema = import_zod.z.object({
  select: NutritionalRecommendationSelectSchema.optional(),
  include: NutritionalRecommendationIncludeSchema.optional(),
  where: NutritionalRecommendationWhereUniqueInputSchema
}).strict();
var NutritionalRecommendationUpdateArgsSchema = import_zod.z.object({
  select: NutritionalRecommendationSelectSchema.optional(),
  include: NutritionalRecommendationIncludeSchema.optional(),
  data: import_zod.z.union([NutritionalRecommendationUpdateInputSchema, NutritionalRecommendationUncheckedUpdateInputSchema]),
  where: NutritionalRecommendationWhereUniqueInputSchema
}).strict();
var NutritionalRecommendationUpdateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([NutritionalRecommendationUpdateManyMutationInputSchema, NutritionalRecommendationUncheckedUpdateManyInputSchema]),
  where: NutritionalRecommendationWhereInputSchema.optional()
}).strict();
var NutritionalRecommendationDeleteManyArgsSchema = import_zod.z.object({
  where: NutritionalRecommendationWhereInputSchema.optional()
}).strict();
var EarlyAccessCreateArgsSchema = import_zod.z.object({
  select: EarlyAccessSelectSchema.optional(),
  data: import_zod.z.union([EarlyAccessCreateInputSchema, EarlyAccessUncheckedCreateInputSchema])
}).strict();
var EarlyAccessUpsertArgsSchema = import_zod.z.object({
  select: EarlyAccessSelectSchema.optional(),
  where: EarlyAccessWhereUniqueInputSchema,
  create: import_zod.z.union([EarlyAccessCreateInputSchema, EarlyAccessUncheckedCreateInputSchema]),
  update: import_zod.z.union([EarlyAccessUpdateInputSchema, EarlyAccessUncheckedUpdateInputSchema])
}).strict();
var EarlyAccessCreateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([EarlyAccessCreateManyInputSchema, EarlyAccessCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var EarlyAccessCreateManyAndReturnArgsSchema = import_zod.z.object({
  data: import_zod.z.union([EarlyAccessCreateManyInputSchema, EarlyAccessCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var EarlyAccessDeleteArgsSchema = import_zod.z.object({
  select: EarlyAccessSelectSchema.optional(),
  where: EarlyAccessWhereUniqueInputSchema
}).strict();
var EarlyAccessUpdateArgsSchema = import_zod.z.object({
  select: EarlyAccessSelectSchema.optional(),
  data: import_zod.z.union([EarlyAccessUpdateInputSchema, EarlyAccessUncheckedUpdateInputSchema]),
  where: EarlyAccessWhereUniqueInputSchema
}).strict();
var EarlyAccessUpdateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([EarlyAccessUpdateManyMutationInputSchema, EarlyAccessUncheckedUpdateManyInputSchema]),
  where: EarlyAccessWhereInputSchema.optional()
}).strict();
var EarlyAccessDeleteManyArgsSchema = import_zod.z.object({
  where: EarlyAccessWhereInputSchema.optional()
}).strict();
var OrganizationCreateArgsSchema = import_zod.z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  data: import_zod.z.union([OrganizationCreateInputSchema, OrganizationUncheckedCreateInputSchema])
}).strict();
var OrganizationUpsertArgsSchema = import_zod.z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereUniqueInputSchema,
  create: import_zod.z.union([OrganizationCreateInputSchema, OrganizationUncheckedCreateInputSchema]),
  update: import_zod.z.union([OrganizationUpdateInputSchema, OrganizationUncheckedUpdateInputSchema])
}).strict();
var OrganizationCreateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([OrganizationCreateManyInputSchema, OrganizationCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var OrganizationCreateManyAndReturnArgsSchema = import_zod.z.object({
  data: import_zod.z.union([OrganizationCreateManyInputSchema, OrganizationCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var OrganizationDeleteArgsSchema = import_zod.z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereUniqueInputSchema
}).strict();
var OrganizationUpdateArgsSchema = import_zod.z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  data: import_zod.z.union([OrganizationUpdateInputSchema, OrganizationUncheckedUpdateInputSchema]),
  where: OrganizationWhereUniqueInputSchema
}).strict();
var OrganizationUpdateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([OrganizationUpdateManyMutationInputSchema, OrganizationUncheckedUpdateManyInputSchema]),
  where: OrganizationWhereInputSchema.optional()
}).strict();
var OrganizationDeleteManyArgsSchema = import_zod.z.object({
  where: OrganizationWhereInputSchema.optional()
}).strict();
var RestaurantCreateArgsSchema = import_zod.z.object({
  select: RestaurantSelectSchema.optional(),
  include: RestaurantIncludeSchema.optional(),
  data: import_zod.z.union([RestaurantCreateInputSchema, RestaurantUncheckedCreateInputSchema])
}).strict();
var RestaurantUpsertArgsSchema = import_zod.z.object({
  select: RestaurantSelectSchema.optional(),
  include: RestaurantIncludeSchema.optional(),
  where: RestaurantWhereUniqueInputSchema,
  create: import_zod.z.union([RestaurantCreateInputSchema, RestaurantUncheckedCreateInputSchema]),
  update: import_zod.z.union([RestaurantUpdateInputSchema, RestaurantUncheckedUpdateInputSchema])
}).strict();
var RestaurantCreateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([RestaurantCreateManyInputSchema, RestaurantCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var RestaurantCreateManyAndReturnArgsSchema = import_zod.z.object({
  data: import_zod.z.union([RestaurantCreateManyInputSchema, RestaurantCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var RestaurantDeleteArgsSchema = import_zod.z.object({
  select: RestaurantSelectSchema.optional(),
  include: RestaurantIncludeSchema.optional(),
  where: RestaurantWhereUniqueInputSchema
}).strict();
var RestaurantUpdateArgsSchema = import_zod.z.object({
  select: RestaurantSelectSchema.optional(),
  include: RestaurantIncludeSchema.optional(),
  data: import_zod.z.union([RestaurantUpdateInputSchema, RestaurantUncheckedUpdateInputSchema]),
  where: RestaurantWhereUniqueInputSchema
}).strict();
var RestaurantUpdateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([RestaurantUpdateManyMutationInputSchema, RestaurantUncheckedUpdateManyInputSchema]),
  where: RestaurantWhereInputSchema.optional()
}).strict();
var RestaurantDeleteManyArgsSchema = import_zod.z.object({
  where: RestaurantWhereInputSchema.optional()
}).strict();
var UserCreateArgsSchema = import_zod.z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  data: import_zod.z.union([UserCreateInputSchema, UserUncheckedCreateInputSchema])
}).strict();
var UserUpsertArgsSchema = import_zod.z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
  create: import_zod.z.union([UserCreateInputSchema, UserUncheckedCreateInputSchema]),
  update: import_zod.z.union([UserUpdateInputSchema, UserUncheckedUpdateInputSchema])
}).strict();
var UserCreateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([UserCreateManyInputSchema, UserCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var UserCreateManyAndReturnArgsSchema = import_zod.z.object({
  data: import_zod.z.union([UserCreateManyInputSchema, UserCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var UserDeleteArgsSchema = import_zod.z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema
}).strict();
var UserUpdateArgsSchema = import_zod.z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  data: import_zod.z.union([UserUpdateInputSchema, UserUncheckedUpdateInputSchema]),
  where: UserWhereUniqueInputSchema
}).strict();
var UserUpdateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([UserUpdateManyMutationInputSchema, UserUncheckedUpdateManyInputSchema]),
  where: UserWhereInputSchema.optional()
}).strict();
var UserDeleteManyArgsSchema = import_zod.z.object({
  where: UserWhereInputSchema.optional()
}).strict();
var SessionCreateArgsSchema = import_zod.z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  data: import_zod.z.union([SessionCreateInputSchema, SessionUncheckedCreateInputSchema])
}).strict();
var SessionUpsertArgsSchema = import_zod.z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereUniqueInputSchema,
  create: import_zod.z.union([SessionCreateInputSchema, SessionUncheckedCreateInputSchema]),
  update: import_zod.z.union([SessionUpdateInputSchema, SessionUncheckedUpdateInputSchema])
}).strict();
var SessionCreateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([SessionCreateManyInputSchema, SessionCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var SessionCreateManyAndReturnArgsSchema = import_zod.z.object({
  data: import_zod.z.union([SessionCreateManyInputSchema, SessionCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var SessionDeleteArgsSchema = import_zod.z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereUniqueInputSchema
}).strict();
var SessionUpdateArgsSchema = import_zod.z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  data: import_zod.z.union([SessionUpdateInputSchema, SessionUncheckedUpdateInputSchema]),
  where: SessionWhereUniqueInputSchema
}).strict();
var SessionUpdateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([SessionUpdateManyMutationInputSchema, SessionUncheckedUpdateManyInputSchema]),
  where: SessionWhereInputSchema.optional()
}).strict();
var SessionDeleteManyArgsSchema = import_zod.z.object({
  where: SessionWhereInputSchema.optional()
}).strict();
var CookBookCreateArgsSchema = import_zod.z.object({
  select: CookBookSelectSchema.optional(),
  include: CookBookIncludeSchema.optional(),
  data: import_zod.z.union([CookBookCreateInputSchema, CookBookUncheckedCreateInputSchema])
}).strict();
var CookBookUpsertArgsSchema = import_zod.z.object({
  select: CookBookSelectSchema.optional(),
  include: CookBookIncludeSchema.optional(),
  where: CookBookWhereUniqueInputSchema,
  create: import_zod.z.union([CookBookCreateInputSchema, CookBookUncheckedCreateInputSchema]),
  update: import_zod.z.union([CookBookUpdateInputSchema, CookBookUncheckedUpdateInputSchema])
}).strict();
var CookBookCreateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([CookBookCreateManyInputSchema, CookBookCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var CookBookCreateManyAndReturnArgsSchema = import_zod.z.object({
  data: import_zod.z.union([CookBookCreateManyInputSchema, CookBookCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var CookBookDeleteArgsSchema = import_zod.z.object({
  select: CookBookSelectSchema.optional(),
  include: CookBookIncludeSchema.optional(),
  where: CookBookWhereUniqueInputSchema
}).strict();
var CookBookUpdateArgsSchema = import_zod.z.object({
  select: CookBookSelectSchema.optional(),
  include: CookBookIncludeSchema.optional(),
  data: import_zod.z.union([CookBookUpdateInputSchema, CookBookUncheckedUpdateInputSchema]),
  where: CookBookWhereUniqueInputSchema
}).strict();
var CookBookUpdateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([CookBookUpdateManyMutationInputSchema, CookBookUncheckedUpdateManyInputSchema]),
  where: CookBookWhereInputSchema.optional()
}).strict();
var CookBookDeleteManyArgsSchema = import_zod.z.object({
  where: CookBookWhereInputSchema.optional()
}).strict();
var RecipeCreateArgsSchema = import_zod.z.object({
  select: RecipeSelectSchema.optional(),
  include: RecipeIncludeSchema.optional(),
  data: import_zod.z.union([RecipeCreateInputSchema, RecipeUncheckedCreateInputSchema])
}).strict();
var RecipeUpsertArgsSchema = import_zod.z.object({
  select: RecipeSelectSchema.optional(),
  include: RecipeIncludeSchema.optional(),
  where: RecipeWhereUniqueInputSchema,
  create: import_zod.z.union([RecipeCreateInputSchema, RecipeUncheckedCreateInputSchema]),
  update: import_zod.z.union([RecipeUpdateInputSchema, RecipeUncheckedUpdateInputSchema])
}).strict();
var RecipeCreateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([RecipeCreateManyInputSchema, RecipeCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var RecipeCreateManyAndReturnArgsSchema = import_zod.z.object({
  data: import_zod.z.union([RecipeCreateManyInputSchema, RecipeCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var RecipeDeleteArgsSchema = import_zod.z.object({
  select: RecipeSelectSchema.optional(),
  include: RecipeIncludeSchema.optional(),
  where: RecipeWhereUniqueInputSchema
}).strict();
var RecipeUpdateArgsSchema = import_zod.z.object({
  select: RecipeSelectSchema.optional(),
  include: RecipeIncludeSchema.optional(),
  data: import_zod.z.union([RecipeUpdateInputSchema, RecipeUncheckedUpdateInputSchema]),
  where: RecipeWhereUniqueInputSchema
}).strict();
var RecipeUpdateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([RecipeUpdateManyMutationInputSchema, RecipeUncheckedUpdateManyInputSchema]),
  where: RecipeWhereInputSchema.optional()
}).strict();
var RecipeDeleteManyArgsSchema = import_zod.z.object({
  where: RecipeWhereInputSchema.optional()
}).strict();
var IngredientCreateArgsSchema = import_zod.z.object({
  select: IngredientSelectSchema.optional(),
  include: IngredientIncludeSchema.optional(),
  data: import_zod.z.union([IngredientCreateInputSchema, IngredientUncheckedCreateInputSchema])
}).strict();
var IngredientUpsertArgsSchema = import_zod.z.object({
  select: IngredientSelectSchema.optional(),
  include: IngredientIncludeSchema.optional(),
  where: IngredientWhereUniqueInputSchema,
  create: import_zod.z.union([IngredientCreateInputSchema, IngredientUncheckedCreateInputSchema]),
  update: import_zod.z.union([IngredientUpdateInputSchema, IngredientUncheckedUpdateInputSchema])
}).strict();
var IngredientCreateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([IngredientCreateManyInputSchema, IngredientCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var IngredientCreateManyAndReturnArgsSchema = import_zod.z.object({
  data: import_zod.z.union([IngredientCreateManyInputSchema, IngredientCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var IngredientDeleteArgsSchema = import_zod.z.object({
  select: IngredientSelectSchema.optional(),
  include: IngredientIncludeSchema.optional(),
  where: IngredientWhereUniqueInputSchema
}).strict();
var IngredientUpdateArgsSchema = import_zod.z.object({
  select: IngredientSelectSchema.optional(),
  include: IngredientIncludeSchema.optional(),
  data: import_zod.z.union([IngredientUpdateInputSchema, IngredientUncheckedUpdateInputSchema]),
  where: IngredientWhereUniqueInputSchema
}).strict();
var IngredientUpdateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([IngredientUpdateManyMutationInputSchema, IngredientUncheckedUpdateManyInputSchema]),
  where: IngredientWhereInputSchema.optional()
}).strict();
var IngredientDeleteManyArgsSchema = import_zod.z.object({
  where: IngredientWhereInputSchema.optional()
}).strict();
var RecipeIngredientCreateArgsSchema = import_zod.z.object({
  select: RecipeIngredientSelectSchema.optional(),
  include: RecipeIngredientIncludeSchema.optional(),
  data: import_zod.z.union([RecipeIngredientCreateInputSchema, RecipeIngredientUncheckedCreateInputSchema])
}).strict();
var RecipeIngredientUpsertArgsSchema = import_zod.z.object({
  select: RecipeIngredientSelectSchema.optional(),
  include: RecipeIngredientIncludeSchema.optional(),
  where: RecipeIngredientWhereUniqueInputSchema,
  create: import_zod.z.union([RecipeIngredientCreateInputSchema, RecipeIngredientUncheckedCreateInputSchema]),
  update: import_zod.z.union([RecipeIngredientUpdateInputSchema, RecipeIngredientUncheckedUpdateInputSchema])
}).strict();
var RecipeIngredientCreateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([RecipeIngredientCreateManyInputSchema, RecipeIngredientCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var RecipeIngredientCreateManyAndReturnArgsSchema = import_zod.z.object({
  data: import_zod.z.union([RecipeIngredientCreateManyInputSchema, RecipeIngredientCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var RecipeIngredientDeleteArgsSchema = import_zod.z.object({
  select: RecipeIngredientSelectSchema.optional(),
  include: RecipeIngredientIncludeSchema.optional(),
  where: RecipeIngredientWhereUniqueInputSchema
}).strict();
var RecipeIngredientUpdateArgsSchema = import_zod.z.object({
  select: RecipeIngredientSelectSchema.optional(),
  include: RecipeIngredientIncludeSchema.optional(),
  data: import_zod.z.union([RecipeIngredientUpdateInputSchema, RecipeIngredientUncheckedUpdateInputSchema]),
  where: RecipeIngredientWhereUniqueInputSchema
}).strict();
var RecipeIngredientUpdateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([RecipeIngredientUpdateManyMutationInputSchema, RecipeIngredientUncheckedUpdateManyInputSchema]),
  where: RecipeIngredientWhereInputSchema.optional()
}).strict();
var RecipeIngredientDeleteManyArgsSchema = import_zod.z.object({
  where: RecipeIngredientWhereInputSchema.optional()
}).strict();
var RecipeInstructionCreateArgsSchema = import_zod.z.object({
  select: RecipeInstructionSelectSchema.optional(),
  include: RecipeInstructionIncludeSchema.optional(),
  data: import_zod.z.union([RecipeInstructionCreateInputSchema, RecipeInstructionUncheckedCreateInputSchema])
}).strict();
var RecipeInstructionUpsertArgsSchema = import_zod.z.object({
  select: RecipeInstructionSelectSchema.optional(),
  include: RecipeInstructionIncludeSchema.optional(),
  where: RecipeInstructionWhereUniqueInputSchema,
  create: import_zod.z.union([RecipeInstructionCreateInputSchema, RecipeInstructionUncheckedCreateInputSchema]),
  update: import_zod.z.union([RecipeInstructionUpdateInputSchema, RecipeInstructionUncheckedUpdateInputSchema])
}).strict();
var RecipeInstructionCreateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([RecipeInstructionCreateManyInputSchema, RecipeInstructionCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var RecipeInstructionCreateManyAndReturnArgsSchema = import_zod.z.object({
  data: import_zod.z.union([RecipeInstructionCreateManyInputSchema, RecipeInstructionCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var RecipeInstructionDeleteArgsSchema = import_zod.z.object({
  select: RecipeInstructionSelectSchema.optional(),
  include: RecipeInstructionIncludeSchema.optional(),
  where: RecipeInstructionWhereUniqueInputSchema
}).strict();
var RecipeInstructionUpdateArgsSchema = import_zod.z.object({
  select: RecipeInstructionSelectSchema.optional(),
  include: RecipeInstructionIncludeSchema.optional(),
  data: import_zod.z.union([RecipeInstructionUpdateInputSchema, RecipeInstructionUncheckedUpdateInputSchema]),
  where: RecipeInstructionWhereUniqueInputSchema
}).strict();
var RecipeInstructionUpdateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([RecipeInstructionUpdateManyMutationInputSchema, RecipeInstructionUncheckedUpdateManyInputSchema]),
  where: RecipeInstructionWhereInputSchema.optional()
}).strict();
var RecipeInstructionDeleteManyArgsSchema = import_zod.z.object({
  where: RecipeInstructionWhereInputSchema.optional()
}).strict();
var InventoryCreateArgsSchema = import_zod.z.object({
  select: InventorySelectSchema.optional(),
  include: InventoryIncludeSchema.optional(),
  data: import_zod.z.union([InventoryCreateInputSchema, InventoryUncheckedCreateInputSchema])
}).strict();
var InventoryUpsertArgsSchema = import_zod.z.object({
  select: InventorySelectSchema.optional(),
  include: InventoryIncludeSchema.optional(),
  where: InventoryWhereUniqueInputSchema,
  create: import_zod.z.union([InventoryCreateInputSchema, InventoryUncheckedCreateInputSchema]),
  update: import_zod.z.union([InventoryUpdateInputSchema, InventoryUncheckedUpdateInputSchema])
}).strict();
var InventoryCreateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([InventoryCreateManyInputSchema, InventoryCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var InventoryCreateManyAndReturnArgsSchema = import_zod.z.object({
  data: import_zod.z.union([InventoryCreateManyInputSchema, InventoryCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var InventoryDeleteArgsSchema = import_zod.z.object({
  select: InventorySelectSchema.optional(),
  include: InventoryIncludeSchema.optional(),
  where: InventoryWhereUniqueInputSchema
}).strict();
var InventoryUpdateArgsSchema = import_zod.z.object({
  select: InventorySelectSchema.optional(),
  include: InventoryIncludeSchema.optional(),
  data: import_zod.z.union([InventoryUpdateInputSchema, InventoryUncheckedUpdateInputSchema]),
  where: InventoryWhereUniqueInputSchema
}).strict();
var InventoryUpdateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([InventoryUpdateManyMutationInputSchema, InventoryUncheckedUpdateManyInputSchema]),
  where: InventoryWhereInputSchema.optional()
}).strict();
var InventoryDeleteManyArgsSchema = import_zod.z.object({
  where: InventoryWhereInputSchema.optional()
}).strict();
var InventoryItemCreateArgsSchema = import_zod.z.object({
  select: InventoryItemSelectSchema.optional(),
  include: InventoryItemIncludeSchema.optional(),
  data: import_zod.z.union([InventoryItemCreateInputSchema, InventoryItemUncheckedCreateInputSchema])
}).strict();
var InventoryItemUpsertArgsSchema = import_zod.z.object({
  select: InventoryItemSelectSchema.optional(),
  include: InventoryItemIncludeSchema.optional(),
  where: InventoryItemWhereUniqueInputSchema,
  create: import_zod.z.union([InventoryItemCreateInputSchema, InventoryItemUncheckedCreateInputSchema]),
  update: import_zod.z.union([InventoryItemUpdateInputSchema, InventoryItemUncheckedUpdateInputSchema])
}).strict();
var InventoryItemCreateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([InventoryItemCreateManyInputSchema, InventoryItemCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var InventoryItemCreateManyAndReturnArgsSchema = import_zod.z.object({
  data: import_zod.z.union([InventoryItemCreateManyInputSchema, InventoryItemCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var InventoryItemDeleteArgsSchema = import_zod.z.object({
  select: InventoryItemSelectSchema.optional(),
  include: InventoryItemIncludeSchema.optional(),
  where: InventoryItemWhereUniqueInputSchema
}).strict();
var InventoryItemUpdateArgsSchema = import_zod.z.object({
  select: InventoryItemSelectSchema.optional(),
  include: InventoryItemIncludeSchema.optional(),
  data: import_zod.z.union([InventoryItemUpdateInputSchema, InventoryItemUncheckedUpdateInputSchema]),
  where: InventoryItemWhereUniqueInputSchema
}).strict();
var InventoryItemUpdateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([InventoryItemUpdateManyMutationInputSchema, InventoryItemUncheckedUpdateManyInputSchema]),
  where: InventoryItemWhereInputSchema.optional()
}).strict();
var InventoryItemDeleteManyArgsSchema = import_zod.z.object({
  where: InventoryItemWhereInputSchema.optional()
}).strict();
var OrderCreateArgsSchema = import_zod.z.object({
  select: OrderSelectSchema.optional(),
  include: OrderIncludeSchema.optional(),
  data: import_zod.z.union([OrderCreateInputSchema, OrderUncheckedCreateInputSchema])
}).strict();
var OrderUpsertArgsSchema = import_zod.z.object({
  select: OrderSelectSchema.optional(),
  include: OrderIncludeSchema.optional(),
  where: OrderWhereUniqueInputSchema,
  create: import_zod.z.union([OrderCreateInputSchema, OrderUncheckedCreateInputSchema]),
  update: import_zod.z.union([OrderUpdateInputSchema, OrderUncheckedUpdateInputSchema])
}).strict();
var OrderCreateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([OrderCreateManyInputSchema, OrderCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var OrderCreateManyAndReturnArgsSchema = import_zod.z.object({
  data: import_zod.z.union([OrderCreateManyInputSchema, OrderCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var OrderDeleteArgsSchema = import_zod.z.object({
  select: OrderSelectSchema.optional(),
  include: OrderIncludeSchema.optional(),
  where: OrderWhereUniqueInputSchema
}).strict();
var OrderUpdateArgsSchema = import_zod.z.object({
  select: OrderSelectSchema.optional(),
  include: OrderIncludeSchema.optional(),
  data: import_zod.z.union([OrderUpdateInputSchema, OrderUncheckedUpdateInputSchema]),
  where: OrderWhereUniqueInputSchema
}).strict();
var OrderUpdateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([OrderUpdateManyMutationInputSchema, OrderUncheckedUpdateManyInputSchema]),
  where: OrderWhereInputSchema.optional()
}).strict();
var OrderDeleteManyArgsSchema = import_zod.z.object({
  where: OrderWhereInputSchema.optional()
}).strict();
var OrderItemCreateArgsSchema = import_zod.z.object({
  select: OrderItemSelectSchema.optional(),
  include: OrderItemIncludeSchema.optional(),
  data: import_zod.z.union([OrderItemCreateInputSchema, OrderItemUncheckedCreateInputSchema])
}).strict();
var OrderItemUpsertArgsSchema = import_zod.z.object({
  select: OrderItemSelectSchema.optional(),
  include: OrderItemIncludeSchema.optional(),
  where: OrderItemWhereUniqueInputSchema,
  create: import_zod.z.union([OrderItemCreateInputSchema, OrderItemUncheckedCreateInputSchema]),
  update: import_zod.z.union([OrderItemUpdateInputSchema, OrderItemUncheckedUpdateInputSchema])
}).strict();
var OrderItemCreateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([OrderItemCreateManyInputSchema, OrderItemCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var OrderItemCreateManyAndReturnArgsSchema = import_zod.z.object({
  data: import_zod.z.union([OrderItemCreateManyInputSchema, OrderItemCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var OrderItemDeleteArgsSchema = import_zod.z.object({
  select: OrderItemSelectSchema.optional(),
  include: OrderItemIncludeSchema.optional(),
  where: OrderItemWhereUniqueInputSchema
}).strict();
var OrderItemUpdateArgsSchema = import_zod.z.object({
  select: OrderItemSelectSchema.optional(),
  include: OrderItemIncludeSchema.optional(),
  data: import_zod.z.union([OrderItemUpdateInputSchema, OrderItemUncheckedUpdateInputSchema]),
  where: OrderItemWhereUniqueInputSchema
}).strict();
var OrderItemUpdateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([OrderItemUpdateManyMutationInputSchema, OrderItemUncheckedUpdateManyInputSchema]),
  where: OrderItemWhereInputSchema.optional()
}).strict();
var OrderItemDeleteManyArgsSchema = import_zod.z.object({
  where: OrderItemWhereInputSchema.optional()
}).strict();
var VendorCreateArgsSchema = import_zod.z.object({
  select: VendorSelectSchema.optional(),
  include: VendorIncludeSchema.optional(),
  data: import_zod.z.union([VendorCreateInputSchema, VendorUncheckedCreateInputSchema])
}).strict();
var VendorUpsertArgsSchema = import_zod.z.object({
  select: VendorSelectSchema.optional(),
  include: VendorIncludeSchema.optional(),
  where: VendorWhereUniqueInputSchema,
  create: import_zod.z.union([VendorCreateInputSchema, VendorUncheckedCreateInputSchema]),
  update: import_zod.z.union([VendorUpdateInputSchema, VendorUncheckedUpdateInputSchema])
}).strict();
var VendorCreateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([VendorCreateManyInputSchema, VendorCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var VendorCreateManyAndReturnArgsSchema = import_zod.z.object({
  data: import_zod.z.union([VendorCreateManyInputSchema, VendorCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var VendorDeleteArgsSchema = import_zod.z.object({
  select: VendorSelectSchema.optional(),
  include: VendorIncludeSchema.optional(),
  where: VendorWhereUniqueInputSchema
}).strict();
var VendorUpdateArgsSchema = import_zod.z.object({
  select: VendorSelectSchema.optional(),
  include: VendorIncludeSchema.optional(),
  data: import_zod.z.union([VendorUpdateInputSchema, VendorUncheckedUpdateInputSchema]),
  where: VendorWhereUniqueInputSchema
}).strict();
var VendorUpdateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([VendorUpdateManyMutationInputSchema, VendorUncheckedUpdateManyInputSchema]),
  where: VendorWhereInputSchema.optional()
}).strict();
var VendorDeleteManyArgsSchema = import_zod.z.object({
  where: VendorWhereInputSchema.optional()
}).strict();
var ShiftCreateArgsSchema = import_zod.z.object({
  select: ShiftSelectSchema.optional(),
  include: ShiftIncludeSchema.optional(),
  data: import_zod.z.union([ShiftCreateInputSchema, ShiftUncheckedCreateInputSchema])
}).strict();
var ShiftUpsertArgsSchema = import_zod.z.object({
  select: ShiftSelectSchema.optional(),
  include: ShiftIncludeSchema.optional(),
  where: ShiftWhereUniqueInputSchema,
  create: import_zod.z.union([ShiftCreateInputSchema, ShiftUncheckedCreateInputSchema]),
  update: import_zod.z.union([ShiftUpdateInputSchema, ShiftUncheckedUpdateInputSchema])
}).strict();
var ShiftCreateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([ShiftCreateManyInputSchema, ShiftCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var ShiftCreateManyAndReturnArgsSchema = import_zod.z.object({
  data: import_zod.z.union([ShiftCreateManyInputSchema, ShiftCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var ShiftDeleteArgsSchema = import_zod.z.object({
  select: ShiftSelectSchema.optional(),
  include: ShiftIncludeSchema.optional(),
  where: ShiftWhereUniqueInputSchema
}).strict();
var ShiftUpdateArgsSchema = import_zod.z.object({
  select: ShiftSelectSchema.optional(),
  include: ShiftIncludeSchema.optional(),
  data: import_zod.z.union([ShiftUpdateInputSchema, ShiftUncheckedUpdateInputSchema]),
  where: ShiftWhereUniqueInputSchema
}).strict();
var ShiftUpdateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([ShiftUpdateManyMutationInputSchema, ShiftUncheckedUpdateManyInputSchema]),
  where: ShiftWhereInputSchema.optional()
}).strict();
var ShiftDeleteManyArgsSchema = import_zod.z.object({
  where: ShiftWhereInputSchema.optional()
}).strict();
var PrepBoardCreateArgsSchema = import_zod.z.object({
  select: PrepBoardSelectSchema.optional(),
  include: PrepBoardIncludeSchema.optional(),
  data: import_zod.z.union([PrepBoardCreateInputSchema, PrepBoardUncheckedCreateInputSchema])
}).strict();
var PrepBoardUpsertArgsSchema = import_zod.z.object({
  select: PrepBoardSelectSchema.optional(),
  include: PrepBoardIncludeSchema.optional(),
  where: PrepBoardWhereUniqueInputSchema,
  create: import_zod.z.union([PrepBoardCreateInputSchema, PrepBoardUncheckedCreateInputSchema]),
  update: import_zod.z.union([PrepBoardUpdateInputSchema, PrepBoardUncheckedUpdateInputSchema])
}).strict();
var PrepBoardCreateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([PrepBoardCreateManyInputSchema, PrepBoardCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var PrepBoardCreateManyAndReturnArgsSchema = import_zod.z.object({
  data: import_zod.z.union([PrepBoardCreateManyInputSchema, PrepBoardCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var PrepBoardDeleteArgsSchema = import_zod.z.object({
  select: PrepBoardSelectSchema.optional(),
  include: PrepBoardIncludeSchema.optional(),
  where: PrepBoardWhereUniqueInputSchema
}).strict();
var PrepBoardUpdateArgsSchema = import_zod.z.object({
  select: PrepBoardSelectSchema.optional(),
  include: PrepBoardIncludeSchema.optional(),
  data: import_zod.z.union([PrepBoardUpdateInputSchema, PrepBoardUncheckedUpdateInputSchema]),
  where: PrepBoardWhereUniqueInputSchema
}).strict();
var PrepBoardUpdateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([PrepBoardUpdateManyMutationInputSchema, PrepBoardUncheckedUpdateManyInputSchema]),
  where: PrepBoardWhereInputSchema.optional()
}).strict();
var PrepBoardDeleteManyArgsSchema = import_zod.z.object({
  where: PrepBoardWhereInputSchema.optional()
}).strict();
var PrepItemCreateArgsSchema = import_zod.z.object({
  select: PrepItemSelectSchema.optional(),
  include: PrepItemIncludeSchema.optional(),
  data: import_zod.z.union([PrepItemCreateInputSchema, PrepItemUncheckedCreateInputSchema])
}).strict();
var PrepItemUpsertArgsSchema = import_zod.z.object({
  select: PrepItemSelectSchema.optional(),
  include: PrepItemIncludeSchema.optional(),
  where: PrepItemWhereUniqueInputSchema,
  create: import_zod.z.union([PrepItemCreateInputSchema, PrepItemUncheckedCreateInputSchema]),
  update: import_zod.z.union([PrepItemUpdateInputSchema, PrepItemUncheckedUpdateInputSchema])
}).strict();
var PrepItemCreateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([PrepItemCreateManyInputSchema, PrepItemCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var PrepItemCreateManyAndReturnArgsSchema = import_zod.z.object({
  data: import_zod.z.union([PrepItemCreateManyInputSchema, PrepItemCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var PrepItemDeleteArgsSchema = import_zod.z.object({
  select: PrepItemSelectSchema.optional(),
  include: PrepItemIncludeSchema.optional(),
  where: PrepItemWhereUniqueInputSchema
}).strict();
var PrepItemUpdateArgsSchema = import_zod.z.object({
  select: PrepItemSelectSchema.optional(),
  include: PrepItemIncludeSchema.optional(),
  data: import_zod.z.union([PrepItemUpdateInputSchema, PrepItemUncheckedUpdateInputSchema]),
  where: PrepItemWhereUniqueInputSchema
}).strict();
var PrepItemUpdateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([PrepItemUpdateManyMutationInputSchema, PrepItemUncheckedUpdateManyInputSchema]),
  where: PrepItemWhereInputSchema.optional()
}).strict();
var PrepItemDeleteManyArgsSchema = import_zod.z.object({
  where: PrepItemWhereInputSchema.optional()
}).strict();
var PasswordResetCreateArgsSchema = import_zod.z.object({
  select: PasswordResetSelectSchema.optional(),
  include: PasswordResetIncludeSchema.optional(),
  data: import_zod.z.union([PasswordResetCreateInputSchema, PasswordResetUncheckedCreateInputSchema])
}).strict();
var PasswordResetUpsertArgsSchema = import_zod.z.object({
  select: PasswordResetSelectSchema.optional(),
  include: PasswordResetIncludeSchema.optional(),
  where: PasswordResetWhereUniqueInputSchema,
  create: import_zod.z.union([PasswordResetCreateInputSchema, PasswordResetUncheckedCreateInputSchema]),
  update: import_zod.z.union([PasswordResetUpdateInputSchema, PasswordResetUncheckedUpdateInputSchema])
}).strict();
var PasswordResetCreateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([PasswordResetCreateManyInputSchema, PasswordResetCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var PasswordResetCreateManyAndReturnArgsSchema = import_zod.z.object({
  data: import_zod.z.union([PasswordResetCreateManyInputSchema, PasswordResetCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var PasswordResetDeleteArgsSchema = import_zod.z.object({
  select: PasswordResetSelectSchema.optional(),
  include: PasswordResetIncludeSchema.optional(),
  where: PasswordResetWhereUniqueInputSchema
}).strict();
var PasswordResetUpdateArgsSchema = import_zod.z.object({
  select: PasswordResetSelectSchema.optional(),
  include: PasswordResetIncludeSchema.optional(),
  data: import_zod.z.union([PasswordResetUpdateInputSchema, PasswordResetUncheckedUpdateInputSchema]),
  where: PasswordResetWhereUniqueInputSchema
}).strict();
var PasswordResetUpdateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([PasswordResetUpdateManyMutationInputSchema, PasswordResetUncheckedUpdateManyInputSchema]),
  where: PasswordResetWhereInputSchema.optional()
}).strict();
var PasswordResetDeleteManyArgsSchema = import_zod.z.object({
  where: PasswordResetWhereInputSchema.optional()
}).strict();
var MenuCreateArgsSchema = import_zod.z.object({
  select: MenuSelectSchema.optional(),
  include: MenuIncludeSchema.optional(),
  data: import_zod.z.union([MenuCreateInputSchema, MenuUncheckedCreateInputSchema])
}).strict();
var MenuUpsertArgsSchema = import_zod.z.object({
  select: MenuSelectSchema.optional(),
  include: MenuIncludeSchema.optional(),
  where: MenuWhereUniqueInputSchema,
  create: import_zod.z.union([MenuCreateInputSchema, MenuUncheckedCreateInputSchema]),
  update: import_zod.z.union([MenuUpdateInputSchema, MenuUncheckedUpdateInputSchema])
}).strict();
var MenuCreateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([MenuCreateManyInputSchema, MenuCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var MenuCreateManyAndReturnArgsSchema = import_zod.z.object({
  data: import_zod.z.union([MenuCreateManyInputSchema, MenuCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var MenuDeleteArgsSchema = import_zod.z.object({
  select: MenuSelectSchema.optional(),
  include: MenuIncludeSchema.optional(),
  where: MenuWhereUniqueInputSchema
}).strict();
var MenuUpdateArgsSchema = import_zod.z.object({
  select: MenuSelectSchema.optional(),
  include: MenuIncludeSchema.optional(),
  data: import_zod.z.union([MenuUpdateInputSchema, MenuUncheckedUpdateInputSchema]),
  where: MenuWhereUniqueInputSchema
}).strict();
var MenuUpdateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([MenuUpdateManyMutationInputSchema, MenuUncheckedUpdateManyInputSchema]),
  where: MenuWhereInputSchema.optional()
}).strict();
var MenuDeleteManyArgsSchema = import_zod.z.object({
  where: MenuWhereInputSchema.optional()
}).strict();
var MenuItemRecipeCreateArgsSchema = import_zod.z.object({
  select: MenuItemRecipeSelectSchema.optional(),
  include: MenuItemRecipeIncludeSchema.optional(),
  data: import_zod.z.union([MenuItemRecipeCreateInputSchema, MenuItemRecipeUncheckedCreateInputSchema])
}).strict();
var MenuItemRecipeUpsertArgsSchema = import_zod.z.object({
  select: MenuItemRecipeSelectSchema.optional(),
  include: MenuItemRecipeIncludeSchema.optional(),
  where: MenuItemRecipeWhereUniqueInputSchema,
  create: import_zod.z.union([MenuItemRecipeCreateInputSchema, MenuItemRecipeUncheckedCreateInputSchema]),
  update: import_zod.z.union([MenuItemRecipeUpdateInputSchema, MenuItemRecipeUncheckedUpdateInputSchema])
}).strict();
var MenuItemRecipeCreateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([MenuItemRecipeCreateManyInputSchema, MenuItemRecipeCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var MenuItemRecipeCreateManyAndReturnArgsSchema = import_zod.z.object({
  data: import_zod.z.union([MenuItemRecipeCreateManyInputSchema, MenuItemRecipeCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var MenuItemRecipeDeleteArgsSchema = import_zod.z.object({
  select: MenuItemRecipeSelectSchema.optional(),
  include: MenuItemRecipeIncludeSchema.optional(),
  where: MenuItemRecipeWhereUniqueInputSchema
}).strict();
var MenuItemRecipeUpdateArgsSchema = import_zod.z.object({
  select: MenuItemRecipeSelectSchema.optional(),
  include: MenuItemRecipeIncludeSchema.optional(),
  data: import_zod.z.union([MenuItemRecipeUpdateInputSchema, MenuItemRecipeUncheckedUpdateInputSchema]),
  where: MenuItemRecipeWhereUniqueInputSchema
}).strict();
var MenuItemRecipeUpdateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([MenuItemRecipeUpdateManyMutationInputSchema, MenuItemRecipeUncheckedUpdateManyInputSchema]),
  where: MenuItemRecipeWhereInputSchema.optional()
}).strict();
var MenuItemRecipeDeleteManyArgsSchema = import_zod.z.object({
  where: MenuItemRecipeWhereInputSchema.optional()
}).strict();
var MenuItemCreateArgsSchema = import_zod.z.object({
  select: MenuItemSelectSchema.optional(),
  include: MenuItemIncludeSchema.optional(),
  data: import_zod.z.union([MenuItemCreateInputSchema, MenuItemUncheckedCreateInputSchema])
}).strict();
var MenuItemUpsertArgsSchema = import_zod.z.object({
  select: MenuItemSelectSchema.optional(),
  include: MenuItemIncludeSchema.optional(),
  where: MenuItemWhereUniqueInputSchema,
  create: import_zod.z.union([MenuItemCreateInputSchema, MenuItemUncheckedCreateInputSchema]),
  update: import_zod.z.union([MenuItemUpdateInputSchema, MenuItemUncheckedUpdateInputSchema])
}).strict();
var MenuItemCreateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([MenuItemCreateManyInputSchema, MenuItemCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var MenuItemCreateManyAndReturnArgsSchema = import_zod.z.object({
  data: import_zod.z.union([MenuItemCreateManyInputSchema, MenuItemCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var MenuItemDeleteArgsSchema = import_zod.z.object({
  select: MenuItemSelectSchema.optional(),
  include: MenuItemIncludeSchema.optional(),
  where: MenuItemWhereUniqueInputSchema
}).strict();
var MenuItemUpdateArgsSchema = import_zod.z.object({
  select: MenuItemSelectSchema.optional(),
  include: MenuItemIncludeSchema.optional(),
  data: import_zod.z.union([MenuItemUpdateInputSchema, MenuItemUncheckedUpdateInputSchema]),
  where: MenuItemWhereUniqueInputSchema
}).strict();
var MenuItemUpdateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([MenuItemUpdateManyMutationInputSchema, MenuItemUncheckedUpdateManyInputSchema]),
  where: MenuItemWhereInputSchema.optional()
}).strict();
var MenuItemDeleteManyArgsSchema = import_zod.z.object({
  where: MenuItemWhereInputSchema.optional()
}).strict();
var NutritionalInfoCreateArgsSchema = import_zod.z.object({
  select: NutritionalInfoSelectSchema.optional(),
  include: NutritionalInfoIncludeSchema.optional(),
  data: import_zod.z.union([NutritionalInfoCreateInputSchema, NutritionalInfoUncheckedCreateInputSchema])
}).strict();
var NutritionalInfoUpsertArgsSchema = import_zod.z.object({
  select: NutritionalInfoSelectSchema.optional(),
  include: NutritionalInfoIncludeSchema.optional(),
  where: NutritionalInfoWhereUniqueInputSchema,
  create: import_zod.z.union([NutritionalInfoCreateInputSchema, NutritionalInfoUncheckedCreateInputSchema]),
  update: import_zod.z.union([NutritionalInfoUpdateInputSchema, NutritionalInfoUncheckedUpdateInputSchema])
}).strict();
var NutritionalInfoCreateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([NutritionalInfoCreateManyInputSchema, NutritionalInfoCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var NutritionalInfoCreateManyAndReturnArgsSchema = import_zod.z.object({
  data: import_zod.z.union([NutritionalInfoCreateManyInputSchema, NutritionalInfoCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var NutritionalInfoDeleteArgsSchema = import_zod.z.object({
  select: NutritionalInfoSelectSchema.optional(),
  include: NutritionalInfoIncludeSchema.optional(),
  where: NutritionalInfoWhereUniqueInputSchema
}).strict();
var NutritionalInfoUpdateArgsSchema = import_zod.z.object({
  select: NutritionalInfoSelectSchema.optional(),
  include: NutritionalInfoIncludeSchema.optional(),
  data: import_zod.z.union([NutritionalInfoUpdateInputSchema, NutritionalInfoUncheckedUpdateInputSchema]),
  where: NutritionalInfoWhereUniqueInputSchema
}).strict();
var NutritionalInfoUpdateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([NutritionalInfoUpdateManyMutationInputSchema, NutritionalInfoUncheckedUpdateManyInputSchema]),
  where: NutritionalInfoWhereInputSchema.optional()
}).strict();
var NutritionalInfoDeleteManyArgsSchema = import_zod.z.object({
  where: NutritionalInfoWhereInputSchema.optional()
}).strict();
var FoodCostHistoryCreateArgsSchema = import_zod.z.object({
  select: FoodCostHistorySelectSchema.optional(),
  include: FoodCostHistoryIncludeSchema.optional(),
  data: import_zod.z.union([FoodCostHistoryCreateInputSchema, FoodCostHistoryUncheckedCreateInputSchema])
}).strict();
var FoodCostHistoryUpsertArgsSchema = import_zod.z.object({
  select: FoodCostHistorySelectSchema.optional(),
  include: FoodCostHistoryIncludeSchema.optional(),
  where: FoodCostHistoryWhereUniqueInputSchema,
  create: import_zod.z.union([FoodCostHistoryCreateInputSchema, FoodCostHistoryUncheckedCreateInputSchema]),
  update: import_zod.z.union([FoodCostHistoryUpdateInputSchema, FoodCostHistoryUncheckedUpdateInputSchema])
}).strict();
var FoodCostHistoryCreateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([FoodCostHistoryCreateManyInputSchema, FoodCostHistoryCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var FoodCostHistoryCreateManyAndReturnArgsSchema = import_zod.z.object({
  data: import_zod.z.union([FoodCostHistoryCreateManyInputSchema, FoodCostHistoryCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var FoodCostHistoryDeleteArgsSchema = import_zod.z.object({
  select: FoodCostHistorySelectSchema.optional(),
  include: FoodCostHistoryIncludeSchema.optional(),
  where: FoodCostHistoryWhereUniqueInputSchema
}).strict();
var FoodCostHistoryUpdateArgsSchema = import_zod.z.object({
  select: FoodCostHistorySelectSchema.optional(),
  include: FoodCostHistoryIncludeSchema.optional(),
  data: import_zod.z.union([FoodCostHistoryUpdateInputSchema, FoodCostHistoryUncheckedUpdateInputSchema]),
  where: FoodCostHistoryWhereUniqueInputSchema
}).strict();
var FoodCostHistoryUpdateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([FoodCostHistoryUpdateManyMutationInputSchema, FoodCostHistoryUncheckedUpdateManyInputSchema]),
  where: FoodCostHistoryWhereInputSchema.optional()
}).strict();
var FoodCostHistoryDeleteManyArgsSchema = import_zod.z.object({
  where: FoodCostHistoryWhereInputSchema.optional()
}).strict();
var PrepHistoryCreateArgsSchema = import_zod.z.object({
  select: PrepHistorySelectSchema.optional(),
  include: PrepHistoryIncludeSchema.optional(),
  data: import_zod.z.union([PrepHistoryCreateInputSchema, PrepHistoryUncheckedCreateInputSchema])
}).strict();
var PrepHistoryUpsertArgsSchema = import_zod.z.object({
  select: PrepHistorySelectSchema.optional(),
  include: PrepHistoryIncludeSchema.optional(),
  where: PrepHistoryWhereUniqueInputSchema,
  create: import_zod.z.union([PrepHistoryCreateInputSchema, PrepHistoryUncheckedCreateInputSchema]),
  update: import_zod.z.union([PrepHistoryUpdateInputSchema, PrepHistoryUncheckedUpdateInputSchema])
}).strict();
var PrepHistoryCreateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([PrepHistoryCreateManyInputSchema, PrepHistoryCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var PrepHistoryCreateManyAndReturnArgsSchema = import_zod.z.object({
  data: import_zod.z.union([PrepHistoryCreateManyInputSchema, PrepHistoryCreateManyInputSchema.array()]),
  skipDuplicates: import_zod.z.boolean().optional()
}).strict();
var PrepHistoryDeleteArgsSchema = import_zod.z.object({
  select: PrepHistorySelectSchema.optional(),
  include: PrepHistoryIncludeSchema.optional(),
  where: PrepHistoryWhereUniqueInputSchema
}).strict();
var PrepHistoryUpdateArgsSchema = import_zod.z.object({
  select: PrepHistorySelectSchema.optional(),
  include: PrepHistoryIncludeSchema.optional(),
  data: import_zod.z.union([PrepHistoryUpdateInputSchema, PrepHistoryUncheckedUpdateInputSchema]),
  where: PrepHistoryWhereUniqueInputSchema
}).strict();
var PrepHistoryUpdateManyArgsSchema = import_zod.z.object({
  data: import_zod.z.union([PrepHistoryUpdateManyMutationInputSchema, PrepHistoryUncheckedUpdateManyInputSchema]),
  where: PrepHistoryWhereInputSchema.optional()
}).strict();
var PrepHistoryDeleteManyArgsSchema = import_zod.z.object({
  where: PrepHistoryWhereInputSchema.optional()
}).strict();
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  zodSchemas,
  ...require("@prisma/client")
});
//# sourceMappingURL=index.js.map