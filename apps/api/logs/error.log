{
  "context": "PrismaError",
  "error": "\nInvalid `this.prisma.cookBook.create()` invocation in\n/home/rayan147/ckm-turborepo/apps/api/src/cookbook/cookbook.service.ts:19:41\n\n  16   data: Prisma.CookBookUncheckedCreateInput,\n  17 ): Promise<CookBook> {\n  18   try {\n→ 19     return await this.prisma.cookBook.create(\nForeign key constraint violated: `cookbook_restaurantId_fkey (index)`",
  "level": "error",
  "message": "Failed to create cookbook: Prisma Error",
  "service": "LoggingService",
  "timestamp": "2024-11-07T19:13:21.537Z"
}
{
  "context": "PrismaError",
  "error": "\nInvalid `this.prisma.prepBoard.delete()` invocation in\n/home/rayan147/ckm-turborepo/apps/api/src/prep-board/prep-board.service.ts:84:48\n\n  81 \n  82 async deletePrepBoard(id: number): Promise<PrepBoard> {\n  83   try {\n→ 84     return await this.prisma.prepBoard.delete(\nForeign key constraint violated: `prepItem_prepBoardId_fkey (index)`",
  "level": "error",
  "message": "Failed to delete prep board with ID 1: Prisma Error",
  "service": "LoggingService",
  "timestamp": "2024-12-16T18:11:59.292Z"
}
{
  "context": "PrismaError",
  "error": "\nInvalid `this.prisma.prepBoard.delete()` invocation in\n/home/rayan147/ckm-turborepo/apps/api/src/prep-board/prep-board.service.ts:84:48\n\n  81 \n  82 async deletePrepBoard(id: number): Promise<PrepBoard> {\n  83   try {\n→ 84     return await this.prisma.prepBoard.delete(\nForeign key constraint violated: `prepItem_prepBoardId_fkey (index)`",
  "level": "error",
  "message": "Failed to delete prep board with ID 3: Prisma Error",
  "service": "LoggingService",
  "timestamp": "2025-01-08T12:25:29.356Z"
}
{
  "context": "PrismaError",
  "error": "\nInvalid `this.prisma.prepBoard.delete()` invocation in\n/home/rayan147/ckm-turborepo/apps/api/src/prep-board/prep-board.service.ts:84:48\n\n  81 \n  82 async deletePrepBoard(id: number): Promise<PrepBoard> {\n  83   try {\n→ 84     return await this.prisma.prepBoard.delete(\nForeign key constraint violated: `prepItem_prepBoardId_fkey (index)`",
  "level": "error",
  "message": "Failed to delete prep board with ID 1: Prisma Error",
  "service": "LoggingService",
  "timestamp": "2025-01-08T12:29:49.940Z"
}
{
  "context": "PrismaError",
  "error": "\nInvalid `this.prisma.prepBoard.delete()` invocation in\n/home/rayan147/ckm-turborepo/apps/api/src/prep-board/prep-board.service.ts:84:48\n\n  81 \n  82 async deletePrepBoard(id: number): Promise<PrepBoard> {\n  83   try {\n→ 84     return await this.prisma.prepBoard.delete(\nForeign key constraint violated: `prepItem_prepBoardId_fkey (index)`",
  "level": "error",
  "message": "Failed to delete prep board with ID 1: Prisma Error",
  "service": "LoggingService",
  "timestamp": "2025-01-08T12:30:30.270Z"
}
{
  "context": "PrismaError",
  "error": "\nInvalid `this.prisma.prepBoard.delete()` invocation in\n/home/rayan147/ckm-turborepo/apps/api/src/prep-board/prep-board.service.ts:84:48\n\n  81 \n  82 async deletePrepBoard(id: number): Promise<PrepBoard> {\n  83   try {\n→ 84     return await this.prisma.prepBoard.delete(\nForeign key constraint violated: `prepItem_prepBoardId_fkey (index)`",
  "level": "error",
  "message": "Failed to delete prep board with ID 1: Prisma Error",
  "service": "LoggingService",
  "timestamp": "2025-01-08T12:30:40.500Z"
}
{
  "context": "PrismaError",
  "error": "\nInvalid `this.prisma.prepBoard.delete()` invocation in\n/home/rayan147/ckm-turborepo/apps/api/src/prep-board/prep-board.service.ts:84:48\n\n  81 \n  82 async deletePrepBoard(id: number): Promise<PrepBoard> {\n  83   try {\n→ 84     return await this.prisma.prepBoard.delete(\nForeign key constraint violated: `prepItem_prepBoardId_fkey (index)`",
  "level": "error",
  "message": "Failed to delete prep board with ID 3: Prisma Error",
  "service": "LoggingService",
  "timestamp": "2025-01-08T12:30:56.411Z"
}
{
  "context": "PrismaError",
  "error": "\nInvalid `this.prisma.prepBoard.delete()` invocation in\n/home/rayan147/ckm-turborepo/apps/api/src/prep-board/prep-board.service.ts:84:48\n\n  81 \n  82 async deletePrepBoard(id: number): Promise<PrepBoard> {\n  83   try {\n→ 84     return await this.prisma.prepBoard.delete(\nForeign key constraint violated: `prepItem_prepBoardId_fkey (index)`",
  "level": "error",
  "message": "Failed to delete prep board with ID 3: Prisma Error",
  "service": "LoggingService",
  "timestamp": "2025-01-08T13:26:09.745Z"
}
{
  "context": "PrismaError",
  "error": "\nInvalid `this.prisma.prepBoard.delete()` invocation in\n/home/rayan147/ckm-turborepo/apps/api/src/prep-board/prep-board.service.ts:84:48\n\n  81 \n  82 async deletePrepBoard(id: number): Promise<PrepBoard> {\n  83   try {\n→ 84     return await this.prisma.prepBoard.delete(\nForeign key constraint violated: `prepItem_prepBoardId_fkey (index)`",
  "level": "error",
  "message": "Failed to delete prep board with ID 3: Prisma Error",
  "service": "LoggingService",
  "timestamp": "2025-01-08T13:26:51.016Z"
}
{
  "context": "PrismaError",
  "error": "\nInvalid `this.prisma.prepBoard.delete()` invocation in\n/home/rayan147/ckm-turborepo/apps/api/src/prep-board/prep-board.service.ts:84:48\n\n  81 \n  82 async deletePrepBoard(id: number): Promise<PrepBoard> {\n  83   try {\n→ 84     return await this.prisma.prepBoard.delete(\nForeign key constraint violated: `prepItem_prepBoardId_fkey (index)`",
  "level": "error",
  "message": "Failed to delete prep board with ID 3: Prisma Error",
  "service": "LoggingService",
  "timestamp": "2025-01-08T14:01:32.331Z"
}
{
  "context": "PrismaError",
  "error": "\nInvalid `this.prisma.prepBoard.delete()` invocation in\n/home/rayan147/ckm-turborepo/apps/api/src/prep-board/prep-board.service.ts:84:48\n\n  81 \n  82 async deletePrepBoard(id: number): Promise<PrepBoard> {\n  83   try {\n→ 84     return await this.prisma.prepBoard.delete(\nForeign key constraint violated: `prepItem_prepBoardId_fkey (index)`",
  "level": "error",
  "message": "Failed to delete prep board with ID 3: Prisma Error",
  "service": "LoggingService",
  "timestamp": "2025-01-08T14:14:15.127Z"
}
{
  "context": "PrismaError",
  "error": "\nInvalid `this.prisma.prepBoard.delete()` invocation in\n/home/rayan147/ckm-turborepo/apps/api/src/prep-board/prep-board.service.ts:84:48\n\n  81 \n  82 async deletePrepBoard(id: number): Promise<PrepBoard> {\n  83   try {\n→ 84     return await this.prisma.prepBoard.delete(\nForeign key constraint violated: `prepItem_prepBoardId_fkey (index)`",
  "level": "error",
  "message": "Failed to delete prep board with ID 1: Prisma Error",
  "service": "LoggingService",
  "timestamp": "2025-01-08T14:14:26.155Z"
}
{
  "context": "PrismaError",
  "error": "\nInvalid `this.prisma.prepBoard.delete()` invocation in\n/home/rayan147/ckm-turborepo/apps/api/src/prep-board/prep-board.service.ts:84:48\n\n  81 \n  82 async deletePrepBoard(id: number): Promise<PrepBoard> {\n  83   try {\n→ 84     return await this.prisma.prepBoard.delete(\nForeign key constraint violated: `prepItem_prepBoardId_fkey (index)`",
  "level": "error",
  "message": "Failed to delete prep board with ID 3: Prisma Error",
  "service": "LoggingService",
  "timestamp": "2025-01-08T14:15:44.053Z"
}
{
  "context": "PrismaError",
  "error": "\nInvalid `this.prisma.prepBoard.delete()` invocation in\n/home/rayan147/ckm-turborepo/apps/api/src/prep-board/prep-board.service.ts:84:48\n\n  81 \n  82 async deletePrepBoard(id: number): Promise<PrepBoard> {\n  83   try {\n→ 84     return await this.prisma.prepBoard.delete(\nForeign key constraint violated: `prepItem_prepBoardId_fkey (index)`",
  "level": "error",
  "message": "Failed to delete prep board with ID 3: Prisma Error",
  "service": "LoggingService",
  "timestamp": "2025-01-08T14:35:21.735Z"
}
{
  "context": "PrismaError",
  "error": "\nInvalid `this.prisma.prepBoard.delete()` invocation in\n/home/rayan147/ckm-turborepo/apps/api/src/prep-board/prep-board.service.ts:84:48\n\n  81 \n  82 async deletePrepBoard(id: number): Promise<PrepBoard> {\n  83   try {\n→ 84     return await this.prisma.prepBoard.delete(\nForeign key constraint violated: `prepItem_prepBoardId_fkey (index)`",
  "level": "error",
  "message": "Failed to delete prep board with ID 1: Prisma Error",
  "service": "LoggingService",
  "timestamp": "2025-01-08T14:35:30.678Z"
}
{
  "context": "PrismaError",
  "error": "\nInvalid `this.prisma.prepBoard.delete()` invocation in\n/home/rayan147/ckm-turborepo/apps/api/src/prep-board/prep-board.service.ts:84:48\n\n  81 \n  82 async deletePrepBoard(id: number): Promise<PrepBoard> {\n  83   try {\n→ 84     return await this.prisma.prepBoard.delete(\nForeign key constraint violated: `prepItem_prepBoardId_fkey (index)`",
  "level": "error",
  "message": "Failed to delete prep board with ID 3: Prisma Error",
  "service": "LoggingService",
  "timestamp": "2025-01-08T19:14:16.425Z"
}
{
  "context": "ApplicationError",
  "error": "Recipe with ID 23 not found or already deleted",
  "level": "error",
  "message": "Failed to delete recipe with ID 23: Application Error",
  "service": "LoggingService",
  "timestamp": "2025-02-22T20:31:30.588Z"
}
{
  "context": "PrismaError",
  "error": "\nInvalid `this.prisma.recipe.findMany()` invocation in\n/home/rayan147/ckm-turborepo/apps/api/src/recipe/recipe.service.ts:211:28\n\n  208 \n  209 const [totalCount, recipes] = await Promise.all([\n  210   this.prisma.recipe.count({ where }),\n→ 211   this.prisma.recipe.findMany(\nThe column `recipe.imageUrl` does not exist in the current database.",
  "level": "error",
  "message": "Failed to fetch recipes: Prisma Error",
  "service": "LoggingService",
  "timestamp": "2025-02-26T12:03:15.730Z"
}
{
  "context": "PrismaError",
  "error": "\nInvalid `this.prisma.recipe.findMany()` invocation in\n/home/rayan147/ckm-turborepo/apps/api/src/recipe/recipe.service.ts:211:28\n\n  208 \n  209 const [totalCount, recipes] = await Promise.all([\n  210   this.prisma.recipe.count({ where }),\n→ 211   this.prisma.recipe.findMany(\nThe column `recipe.imageUrl` does not exist in the current database.",
  "level": "error",
  "message": "Failed to fetch recipes: Prisma Error",
  "service": "LoggingService",
  "timestamp": "2025-02-26T12:03:25.280Z"
}
{
  "context": "PrismaError",
  "error": "\nInvalid `this.prisma.recipe.findMany()` invocation in\n/home/rayan147/ckm-turborepo/apps/api/src/recipe/recipe.service.ts:211:28\n\n  208 \n  209 const [totalCount, recipes] = await Promise.all([\n  210   this.prisma.recipe.count({ where }),\n→ 211   this.prisma.recipe.findMany(\nThe column `recipe.imageUrl` does not exist in the current database.",
  "level": "error",
  "message": "Failed to fetch recipes: Prisma Error",
  "service": "LoggingService",
  "timestamp": "2025-02-26T12:03:35.883Z"
}
{
  "context": "ApplicationError",
  "error": "Recipe with ID 187 not found",
  "level": "error",
  "message": "Failed to fetch recipe with ID 187: Application Error",
  "service": "LoggingService",
  "timestamp": "2025-02-28T20:48:27.130Z"
}
{
  "context": "ApplicationError",
  "error": "Recipe with ID 187 not found",
  "level": "error",
  "message": "Failed to fetch recipe with ID 187: Application Error",
  "service": "LoggingService",
  "timestamp": "2025-02-28T20:48:29.316Z"
}
{
  "context": "ApplicationError",
  "error": "Recipe with ID 187 not found",
  "level": "error",
  "message": "Failed to fetch recipe with ID 187: Application Error",
  "service": "LoggingService",
  "timestamp": "2025-02-28T20:48:30.329Z"
}
{
  "context": "ApplicationError",
  "error": "Recipe with ID 187 not found",
  "level": "error",
  "message": "Failed to fetch recipe with ID 187: Application Error",
  "service": "LoggingService",
  "timestamp": "2025-02-28T20:48:52.752Z"
}
{
  "context": "ApplicationError",
  "error": "Recipe with ID 220 not found",
  "level": "error",
  "message": "Failed to fetch recipe with ID 220: Application Error",
  "service": "LoggingService",
  "timestamp": "2025-03-01T04:35:31.216Z"
}
{
  "context": "ApplicationError",
  "error": "Recipe with ID 232 not found",
  "level": "error",
  "message": "Failed to fetch recipe with ID 232: Application Error",
  "service": "LoggingService",
  "timestamp": "2025-03-03T21:33:21.121Z"
}
{
  "context": "ApplicationError",
  "error": "Recipe with ID 232 not found",
  "level": "error",
  "message": "Failed to fetch recipe with ID 232: Application Error",
  "service": "LoggingService",
  "timestamp": "2025-03-03T21:33:23.705Z"
}
{
  "context": "ApplicationError",
  "error": "Recipe with ID 339 not found",
  "level": "error",
  "message": "Failed to fetch recipe with ID 339: Application Error",
  "service": "LoggingService",
  "timestamp": "2025-03-03T22:35:45.507Z"
}
{
  "context": "ApplicationError",
  "error": "Recipe with ID 373 not found",
  "level": "error",
  "message": "Failed to fetch recipe with ID 373: Application Error",
  "service": "LoggingService",
  "timestamp": "2025-03-03T22:47:28.361Z"
}
{
  "context": "ApplicationError",
  "error": "Recipe with ID 236 not found",
  "level": "error",
  "message": "Failed to fetch recipe with ID 236: Application Error",
  "service": "LoggingService",
  "timestamp": "2025-03-04T05:02:17.214Z"
}
{
  "context": "ApplicationError",
  "error": "Recipe with ID 236 not found",
  "level": "error",
  "message": "Failed to fetch recipe with ID 236: Application Error",
  "service": "LoggingService",
  "timestamp": "2025-03-04T05:03:42.163Z"
}
{
  "context": "ApplicationError",
  "error": "Recipe with ID 236 not found",
  "level": "error",
  "message": "Failed to fetch recipe with ID 236: Application Error",
  "service": "LoggingService",
  "timestamp": "2025-03-04T05:04:23.502Z"
}
{
  "context": "ApplicationError",
  "error": "Recipe with ID 236 not found",
  "level": "error",
  "message": "Failed to fetch recipe with ID 236: Application Error",
  "service": "LoggingService",
  "timestamp": "2025-03-04T05:07:37.489Z"
}
{
  "context": "ApplicationError",
  "error": "Recipe with ID 236 not found",
  "level": "error",
  "message": "Failed to fetch recipe with ID 236: Application Error",
  "service": "LoggingService",
  "timestamp": "2025-03-04T05:12:14.210Z"
}
{
  "context": "ApplicationError",
  "error": "Recipe with ID 236 not found",
  "level": "error",
  "message": "Failed to fetch recipe with ID 236: Application Error",
  "service": "LoggingService",
  "timestamp": "2025-03-04T05:13:03.940Z"
}
{
  "context": "ApplicationError",
  "error": "Recipe with ID 236 not found",
  "level": "error",
  "message": "Failed to fetch recipe with ID 236: Application Error",
  "service": "LoggingService",
  "timestamp": "2025-03-04T05:13:29.135Z"
}
{
  "context": "ApplicationError",
  "error": "Recipe with ID 236 not found",
  "level": "error",
  "message": "Failed to fetch recipe with ID 236: Application Error",
  "service": "LoggingService",
  "timestamp": "2025-03-04T05:15:59.512Z"
}
{
  "context": "ApplicationError",
  "error": "Recipe with ID 236 not found",
  "level": "error",
  "message": "Failed to fetch recipe with ID 236: Application Error",
  "service": "LoggingService",
  "timestamp": "2025-03-04T05:17:49.696Z"
}
{
  "context": "ApplicationError",
  "error": "Recipe with ID 236 not found",
  "level": "error",
  "message": "Failed to fetch recipe with ID 236: Application Error",
  "service": "LoggingService",
  "timestamp": "2025-03-04T05:18:25.785Z"
}
{
  "context": "ApplicationError",
  "error": "Recipe with ID 236 not found",
  "level": "error",
  "message": "Failed to fetch recipe with ID 236: Application Error",
  "service": "LoggingService",
  "timestamp": "2025-03-04T05:19:00.882Z"
}
{
  "context": "ApplicationError",
  "error": "Recipe with ID 236 not found",
  "level": "error",
  "message": "Failed to fetch recipe with ID 236: Application Error",
  "service": "LoggingService",
  "timestamp": "2025-03-04T05:19:44.723Z"
}
{
  "context": "ApplicationError",
  "error": "Recipe with ID 236 not found",
  "level": "error",
  "message": "Failed to fetch recipe with ID 236: Application Error",
  "service": "LoggingService",
  "timestamp": "2025-03-04T05:19:57.398Z"
}
{
  "context": "ApplicationError",
  "error": "Recipe with ID 236 not found",
  "level": "error",
  "message": "Failed to fetch recipe with ID 236: Application Error",
  "service": "LoggingService",
  "timestamp": "2025-03-04T05:20:30.976Z"
}
{
  "context": "ApplicationError",
  "error": "Recipe with ID 236 not found",
  "level": "error",
  "message": "Failed to fetch recipe with ID 236: Application Error",
  "service": "LoggingService",
  "timestamp": "2025-03-04T05:20:41.601Z"
}
{
  "context": "ApplicationError",
  "error": "Recipe with ID 236 not found",
  "level": "error",
  "message": "Failed to fetch recipe with ID 236: Application Error",
  "service": "LoggingService",
  "timestamp": "2025-03-04T05:20:54.903Z"
}
{
  "context": "ApplicationError",
  "error": "Recipe with ID 236 not found",
  "level": "error",
  "message": "Failed to fetch recipe with ID 236: Application Error",
  "service": "LoggingService",
  "timestamp": "2025-03-04T05:22:05.533Z"
}
{
  "context": "ApplicationError",
  "error": "Recipe with ID 236 not found",
  "level": "error",
  "message": "Failed to fetch recipe with ID 236: Application Error",
  "service": "LoggingService",
  "timestamp": "2025-03-04T05:22:40.393Z"
}
{
  "context": "ApplicationError",
  "error": "Recipe with ID 236 not found",
  "level": "error",
  "message": "Failed to fetch recipe with ID 236: Application Error",
  "service": "LoggingService",
  "timestamp": "2025-03-04T05:22:46.869Z"
}
{
  "context": "ApplicationError",
  "error": "Recipe with ID 410 not found",
  "level": "error",
  "message": "Failed to fetch recipe with ID 410: Application Error",
  "service": "LoggingService",
  "timestamp": "2025-03-12T20:17:24.997Z"
}
{
  "context": "ApplicationError",
  "error": "Recipe with ID 191 not found",
  "level": "error",
  "message": "Failed to fetch recipe with ID 191: Application Error",
  "service": "LoggingService",
  "timestamp": "2025-03-13T04:06:53.603Z"
}
{
  "context": "ApplicationError",
  "error": "Recipe with ID 410 not found",
  "level": "error",
  "message": "Failed to fetch recipe with ID 410: Application Error",
  "service": "LoggingService",
  "timestamp": "2025-03-13T16:22:23.547Z"
}
{
  "context": "ApplicationError",
  "error": "Recipe with ID 412 not found",
  "level": "error",
  "message": "Failed to fetch recipe with ID 412: Application Error",
  "service": "LoggingService",
  "timestamp": "2025-03-14T01:11:24.590Z"
}
{
  "context": "ApplicationError",
  "error": "Recipe with ID 1 not found",
  "level": "error",
  "message": "Failed to fetch recipe with ID 1: Application Error",
  "service": "LoggingService",
  "timestamp": "2025-03-14T23:06:35.070Z"
}
{
  "context": "ApplicationError",
  "error": "Recipe with ID 2 not found",
  "level": "error",
  "message": "Failed to fetch recipe with ID 2: Application Error",
  "service": "LoggingService",
  "timestamp": "2025-03-14T23:06:37.181Z"
}
{
  "context": "ApplicationError",
  "error": "Recipe with ID 3 not found",
  "level": "error",
  "message": "Failed to fetch recipe with ID 3: Application Error",
  "service": "LoggingService",
  "timestamp": "2025-03-14T23:06:39.278Z"
}
{
  "context": "ApplicationError",
  "error": "Recipe with ID 6 not found",
  "level": "error",
  "message": "Failed to fetch recipe with ID 6: Application Error",
  "service": "LoggingService",
  "timestamp": "2025-03-14T23:06:42.620Z"
}
{
  "context": "ApplicationError",
  "error": "Recipe with ID 1 not found",
  "level": "error",
  "message": "Failed to fetch recipe with ID 1: Application Error",
  "service": "LoggingService",
  "timestamp": "2025-03-14T23:24:51.999Z"
}
{
  "context": "PrismaError",
  "error": "\nInvalid `this.prisma.recipe.findUnique()` invocation in\n/home/rayan147/ckm-turborepo/apps/api/src/recipe/recipe.service.ts:239:47\n\n  236 async getRecipe(id: number): Promise<Recipe> {\n  237   this.logger.log(`Fetching recipe with ID ${id}`);\n  238   try {\n→ 239     const recipe = await this.prisma.recipe.findUnique(\nThe column `RecipeNutrition.containsGluten` does not exist in the current database.",
  "level": "error",
  "message": "Failed to fetch recipe with ID 501: Prisma Error",
  "service": "LoggingService",
  "timestamp": "2025-03-15T19:29:10.519Z"
}
{
  "context": "PrismaError",
  "error": "\nInvalid `this.prisma.recipe.findUnique()` invocation in\n/home/rayan147/ckm-turborepo/apps/api/src/recipe/recipe.service.ts:239:47\n\n  236 async getRecipe(id: number): Promise<Recipe> {\n  237   this.logger.log(`Fetching recipe with ID ${id}`);\n  238   try {\n→ 239     const recipe = await this.prisma.recipe.findUnique(\nThe column `RecipeNutrition.containsGluten` does not exist in the current database.",
  "level": "error",
  "message": "Failed to fetch recipe with ID 501: Prisma Error",
  "service": "LoggingService",
  "timestamp": "2025-03-15T19:29:10.815Z"
}
{
  "context": "PrismaError",
  "error": "\nInvalid `this.prisma.recipe.findUnique()` invocation in\n/home/rayan147/ckm-turborepo/apps/api/src/recipe/recipe.service.ts:239:47\n\n  236 async getRecipe(id: number): Promise<Recipe> {\n  237   this.logger.log(`Fetching recipe with ID ${id}`);\n  238   try {\n→ 239     const recipe = await this.prisma.recipe.findUnique(\nThe column `RecipeNutrition.containsGluten` does not exist in the current database.",
  "level": "error",
  "message": "Failed to fetch recipe with ID 501: Prisma Error",
  "service": "LoggingService",
  "timestamp": "2025-03-15T19:29:13.816Z"
}
{
  "context": "PrismaError",
  "error": "\nInvalid `this.prisma.recipe.findUnique()` invocation in\n/home/rayan147/ckm-turborepo/apps/api/src/recipe/recipe.service.ts:239:47\n\n  236 async getRecipe(id: number): Promise<Recipe> {\n  237   this.logger.log(`Fetching recipe with ID ${id}`);\n  238   try {\n→ 239     const recipe = await this.prisma.recipe.findUnique(\nThe column `RecipeNutrition.containsGluten` does not exist in the current database.",
  "level": "error",
  "message": "Failed to fetch recipe with ID 501: Prisma Error",
  "service": "LoggingService",
  "timestamp": "2025-03-15T19:29:44.021Z"
}
{
  "context": "ApplicationError",
  "error": "Recipe with ID 505 not found",
  "level": "error",
  "message": "Failed to fetch recipe with ID 505: Application Error",
  "service": "LoggingService",
  "timestamp": "2025-03-16T03:36:43.510Z"
}
{
  "context": "ApplicationError",
  "error": "Recipe with ID 505 not found",
  "level": "error",
  "message": "Failed to fetch recipe with ID 505: Application Error",
  "service": "LoggingService",
  "timestamp": "2025-03-16T03:36:50.741Z"
}
{
  "context": "ApplicationError",
  "error": "Recipe with ID 505 not found",
  "level": "error",
  "message": "Failed to fetch recipe with ID 505: Application Error",
  "service": "LoggingService",
  "timestamp": "2025-03-16T03:36:53.332Z"
}
{
  "context": "ApplicationError",
  "error": "Recipe with ID 901 not found",
  "level": "error",
  "message": "Failed to fetch recipe with ID 901: Application Error",
  "service": "LoggingService",
  "timestamp": "2025-03-17T12:44:57.419Z"
}
{
  "context": "ApplicationError",
  "error": "Recipe with ID 966 not found",
  "level": "error",
  "message": "Failed to fetch recipe with ID 966: Application Error",
  "service": "LoggingService",
  "timestamp": "2025-03-17T14:35:15.464Z"
}
{
  "context": "ApplicationError",
  "error": "Recipe with ID 966 not found",
  "level": "error",
  "message": "Failed to fetch recipe with ID 966: Application Error",
  "service": "LoggingService",
  "timestamp": "2025-03-17T14:35:18.296Z"
}
{
  "context": "ApplicationError",
  "error": "Recipe with ID 966 not found",
  "level": "error",
  "message": "Failed to fetch recipe with ID 966: Application Error",
  "service": "LoggingService",
  "timestamp": "2025-03-17T14:35:21.720Z"
}
{
  "context": "ApplicationError",
  "error": "Recipe with ID 966 not found",
  "level": "error",
  "message": "Failed to fetch recipe with ID 966: Application Error",
  "service": "LoggingService",
  "timestamp": "2025-03-17T14:35:34.717Z"
}
{
  "context": "ApplicationError",
  "error": "Recipe with ID 632 not found",
  "level": "error",
  "message": "Failed to fetch recipe with ID 632: Application Error",
  "service": "LoggingService",
  "timestamp": "2025-03-18T17:59:53.005Z"
}
{
  "context": "ApplicationError",
  "error": "Recipe with ID 632 not found",
  "level": "error",
  "message": "Failed to fetch recipe with ID 632: Application Error",
  "service": "LoggingService",
  "timestamp": "2025-03-18T17:59:53.025Z"
}
{
  "context": "ApplicationError",
  "error": "Recipe with ID 5 not found or already deleted",
  "level": "error",
  "message": "Failed to delete recipe with ID 5: Application Error",
  "service": "LoggingService",
  "timestamp": "2025-03-21T15:59:26.960Z"
}
{
  "context": "ApplicationError",
  "error": "User not found",
  "level": "error",
  "message": "Failed getUserByEmail: Application Error",
  "service": "LoggingService",
  "timestamp": "2025-04-01T16:24:37.257Z"
}
{
  "context": "ApplicationError",
  "error": "User not found",
  "level": "error",
  "message": "Failed getUserByEmail: Application Error",
  "service": "LoggingService",
  "timestamp": "2025-04-01T16:27:51.576Z"
}
{
  "context": "ApplicationError",
  "error": "User not found",
  "level": "error",
  "message": "Failed getUserByEmail: Application Error",
  "service": "LoggingService",
  "timestamp": "2025-04-01T16:31:19.092Z"
}
{
  "context": "PrismaError",
  "error": "\nInvalid `tx.organization.create()` invocation in\n/home/rayan147/ckm-turborepo/apps/api/src/users/users.service.ts:104:48\n\n  101 // Create organization first if applicable\n  102 let organization = null;\n  103 if (isOrganization && organizationInput) {\n→ 104   organization = await tx.organization.create(\nUnique constraint failed on the fields: (`name`)",
  "level": "error",
  "message": "Error creating user with organization and restaurants: Prisma Error",
  "service": "LoggingService",
  "timestamp": "2025-04-02T18:49:18.231Z"
}
{
  "context": "PrismaError",
  "error": "\nInvalid `this.prisma.session.update()` invocation in\n/home/rayan147/ckm-turborepo/apps/api/src/auth/utils/auth.sessions.service.ts:218:33\n\n  215   throw new UnauthorizedException('Invalid verification code');\n  216 }\n  217 \n→ 218 await this.prisma.session.update(\nUnique constraint failed on the fields: (`verificationCode`)",
  "level": "error",
  "message": "Failed to verifySession: Prisma Error",
  "service": "LoggingService",
  "timestamp": "2025-04-02T19:09:13.166Z"
}
{
  "context": "PrismaError",
  "error": "\nInvalid `this.prisma.session.update()` invocation in\n/home/rayan147/ckm-turborepo/apps/api/src/auth/utils/auth.sessions.service.ts:218:33\n\n  215   throw new UnauthorizedException('Invalid verification code');\n  216 }\n  217 \n→ 218 await this.prisma.session.update(\nUnique constraint failed on the fields: (`verificationCode`)",
  "level": "error",
  "message": "Failed to verifySession: Prisma Error",
  "service": "LoggingService",
  "timestamp": "2025-04-02T19:10:01.956Z"
}
{
  "context": "PrismaError",
  "error": "\nInvalid `this.prisma.session.update()` invocation in\n/home/rayan147/ckm-turborepo/apps/api/src/auth/utils/auth.sessions.service.ts:218:33\n\n  215   throw new UnauthorizedException('Invalid verification code');\n  216 }\n  217 \n→ 218 await this.prisma.session.update(\nUnique constraint failed on the fields: (`verificationCode`)",
  "level": "error",
  "message": "Failed to verifySession: Prisma Error",
  "service": "LoggingService",
  "timestamp": "2025-04-03T12:49:40.233Z"
}
{
  "context": "ApplicationError",
  "error": "Invalid verification code",
  "level": "error",
  "message": "Failed to verify session: Application Error",
  "service": "LoggingService",
  "timestamp": "2025-04-03T14:46:09.830Z"
}
{
  "context": "ApplicationError",
  "error": "Failed to verify session",
  "level": "error",
  "message": "Verification code validation failed: Application Error",
  "service": "LoggingService",
  "timestamp": "2025-04-03T14:46:09.831Z"
}
{
  "context": "ApplicationError",
  "error": "Invalid verification code",
  "level": "error",
  "message": "Failed to verify session: Application Error",
  "service": "LoggingService",
  "timestamp": "2025-04-03T14:46:21.321Z"
}
{
  "context": "ApplicationError",
  "error": "Failed to verify session",
  "level": "error",
  "message": "Verification code validation failed: Application Error",
  "service": "LoggingService",
  "timestamp": "2025-04-03T14:46:21.322Z"
}
{
  "context": "ApplicationError",
  "error": "Invalid verification code",
  "level": "error",
  "message": "Failed to verify session: Application Error",
  "service": "LoggingService",
  "timestamp": "2025-04-03T14:46:23.640Z"
}
{
  "context": "ApplicationError",
  "error": "Failed to verify session",
  "level": "error",
  "message": "Verification code validation failed: Application Error",
  "service": "LoggingService",
  "timestamp": "2025-04-03T14:46:23.640Z"
}
{
  "context": "ApplicationError",
  "error": "The security token included in the request is expired",
  "level": "error",
  "message": "Login process failed: Application Error",
  "service": "LoggingService",
  "timestamp": "2025-04-03T18:50:02.241Z"
}
{
  "context": "ApplicationError",
  "error": "The security token included in the request is expired",
  "level": "error",
  "message": "Login process failed: Application Error",
  "service": "LoggingService",
  "timestamp": "2025-04-03T18:50:18.130Z"
}
{
  "context": "ApplicationError",
  "error": "The security token included in the request is expired",
  "level": "error",
  "message": "Login process failed: Application Error",
  "service": "LoggingService",
  "timestamp": "2025-04-04T14:00:08.801Z"
}
